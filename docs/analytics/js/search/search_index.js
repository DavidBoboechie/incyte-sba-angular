var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.8","fields":["title","body"],"fieldVectors":[["title/interfaces/AggregationData.html",[0,0.157,1,2.372]],["body/interfaces/AggregationData.html",[0,0.274,1,4.123,2,0.525,3,0.107,4,0.235,5,0.107,6,1.921,7,1.211,8,1.275,9,3.735,10,2.56,11,3.522,12,1.721,13,1.565,14,2.68,15,2.355,16,3.205,17,2.402,18,3.227,19,1.112,20,4.208,21,0.199,22,0.431,23,0.991,24,3.576,25,3.227,26,2.089,27,3.253,28,3.039,29,0.672,30,0.456,31,0.019,32,0.785,33,0.249,34,2.258,35,2.983,36,0.784,37,0.553,38,1.116,39,1.171,40,1.819,41,0.863,42,1.42,43,1.015,44,1.152,45,1.379,46,0.497,47,2.573,48,2.355,49,0.747,50,0.749,51,0.678,52,2.135,53,1.684,54,1.504,55,2.135,56,1.921,57,1.64,58,2.469,59,0.249,60,2.069,61,1.504,62,2.322,63,2.74,64,2.02,65,2.56,66,1.921,67,0.901,68,0.782,69,0.784,70,0.629,71,1.921,72,2.247,73,2.874,74,1.915,75,2.247,76,1.684,77,3.205,78,2.247,79,2.402,80,1.211,81,3.205,82,2.355,83,2.489,84,2.56,85,1.578,86,2.247,87,1.497,88,2.247,89,3.44,90,2.469,91,2.469,92,1.42,93,2.874,94,1.78,95,0.905,96,0.401,97,2.8,98,2.119,99,2.014,100,1.578,101,0.622,102,1.931,103,1.684,104,2.469,105,1.921,106,2.469,107,1.687,108,0.932,109,0.756,110,2.069,111,0.905,112,2.069,113,2.469,114,2.31,115,0.873,116,0.739,117,3.205,118,1.173,119,1.586,120,1.795,121,1.343,122,1.231,123,1.18,124,2.636,125,2.247,126,2.469,127,1.586,128,3.039,129,1.915,130,0.056,131,2.247,132,2.069,133,2.247,134,1.176,135,1.152,136,2.469,137,0.553,138,0.583,139,1.734,140,1.684,141,1.497,142,2.247,143,1.299,144,1.915,145,1.891,146,5.177,147,2.56,148,0.996,149,1.416,150,2.469,151,2.469,152,0.897,153,2.469,154,2.469,155,1.795,156,1.795,157,1.795,158,4.105,159,2.469,160,4.105,161,3.522,162,2.469,163,1.416,164,2.469,165,2.469,166,2.469,167,2.469,168,2.469,169,2.469,170,2.469,171,2.069,172,1.211,173,2.469,174,1.343,175,1.921,176,1.416,177,2.469,178,0.011,179,2.469,180,2.469,181,2.984,182,2.247,183,1.915,184,1.656,185,2.469,186,2.469,187,1.795,188,1.795,189,2.469,190,2.469,191,1.795,192,2.469,193,2.469,194,2.469,195,2.469,196,2.402,197,0.863,198,1.921,199,2.469,200,3.205,201,3.735,202,2.469,203,1.586,204,2.469,205,1.921,206,2.469,207,0.803,208,3.522,209,1.921,210,2.469,211,3.522,212,1.921,213,2.469,214,2.247,215,1.343,216,2.469,217,2.469,218,1.045,219,1.795,220,1.684,221,1.504,222,2.469,223,2.469,224,1.684,225,2.469,226,2.469,227,2.469,228,2.469,229,2.469,230,2.469,231,2.469,232,0.71,233,2.56,234,2.469,235,2.469,236,2.469,237,2.469,238,0.419,239,2.469,240,2.74,241,2.469,242,1.497,243,1.921,244,0.949,245,2.247,246,2.069,247,1.211,248,1.343,249,1.921,250,1.152,251,1.497,252,1.343,253,1.795,254,1.921,255,2.469,256,4.476,257,3.253,258,2.489,259,2.469,260,4.105,261,0.905,262,1.824,263,1.299,264,0.747,265,2.469,266,3.052,267,0.996,268,3.522,269,2.874,270,4.476,271,3.522,272,1.818,273,1.49,274,2.135,275,3.522,276,3.522,277,3.522,278,3.522,279,3.522,280,3.522,281,1.567,282,2.135,283,2.069,284,1.343,285,2.469,286,1.152,287,1.921,288,2.874,289,1.654,290,2.434,291,1.856,292,4.476,293,4.476,294,3.735,295,1.687,296,2.469,297,2.089,298,2.469,299,3.522,300,3.205,301,2.469,302,2.469,303,2.56,304,4.105,305,3.522,306,0.905,307,0.996,308,1.586,309,2.469,310,1.921,311,1.045,312,1.684,313,2.247,314,2.469,315,2.469,316,0.863,317,2.469,318,4.105,319,2.469,320,2.469,321,0.008,322,0.011]],["title/interfaces/AggregationEdge.html",[0,0.157,60,2.372]],["body/interfaces/AggregationEdge.html",[0,0.283,1,3.772,2,0.532,3,0.109,4,0.235,5,0.109,6,1.946,7,1.227,8,1.291,9,3.234,10,1.818,11,2.501,12,1.366,13,1.111,14,2.66,15,2.039,16,2.276,17,1.706,18,3.07,19,1.027,20,4.17,21,0.202,22,0.435,24,3.005,25,2.424,26,1.167,27,1.818,28,2.282,29,0.533,30,0.449,31,0.019,32,0.715,33,0.25,34,2.277,35,3.287,36,0.794,37,0.56,38,1.117,39,1.196,40,1.828,41,0.874,42,1.433,43,1.025,44,1.167,45,1.381,46,0.504,47,2.586,48,2.372,49,0.757,50,0.755,51,0.686,52,2.155,53,1.706,54,1.515,55,2.506,56,2.765,57,1.743,58,3.554,59,0.25,60,2.978,61,1.65,62,2.333,63,2.765,64,2.039,65,2.583,66,1.946,67,0.906,68,0.787,69,0.794,70,0.633,71,1.946,72,2.276,73,2.891,74,1.933,75,2.276,76,1.706,77,3.234,78,2.276,79,2.424,80,1.227,81,3.234,82,2.372,83,2.506,84,2.583,85,1.589,86,2.276,87,1.516,88,2.276,89,3.465,90,2.501,91,2.501,92,1.433,93,2.891,94,1.785,95,0.917,96,0.404,97,2.82,98,2.134,99,2.028,100,1.589,101,0.625,102,1.937,103,1.706,104,2.501,105,1.946,106,2.501,107,1.693,108,0.935,109,0.76,110,2.096,111,0.917,112,2.096,113,2.501,114,2.324,115,0.879,116,0.744,117,3.234,118,1.184,119,1.606,120,1.818,121,1.36,122,1.242,123,1.182,124,2.655,125,2.276,126,2.501,127,1.606,128,3.054,129,1.933,130,0.057,131,2.276,132,2.096,133,2.276,134,1.181,135,1.167,136,2.501,137,0.56,138,0.59,139,1.743,140,1.706,141,1.516,142,2.276,143,1.305,144,1.933,145,1.899,146,5.194,147,2.583,148,1.009,149,1.435,150,2.501,151,2.501,152,0.899,153,2.501,154,2.501,155,1.818,156,1.818,157,1.818,158,4.134,159,2.501,160,4.134,161,3.554,162,2.501,163,1.435,164,2.501,165,2.501,166,2.501,167,2.501,168,2.501,169,2.501,170,2.501,171,2.096,172,1.227,173,2.501,174,1.36,175,1.946,176,1.435,177,2.501,178,0.011,179,2.501,180,2.501,181,3.005,182,2.276,183,1.933,184,1.667,185,2.501,186,2.501,187,1.818,188,1.818,189,2.501,190,2.501,191,1.818,192,2.501,193,2.501,194,2.501,195,2.501,196,2.424,197,0.874,198,1.946,199,2.501,200,3.234,201,3.762,202,2.501,203,1.606,204,2.501,205,1.946,206,2.501,207,0.807,208,3.554,209,1.946,210,2.501,211,3.554,212,1.946,213,2.501,214,2.276,215,1.36,216,2.501,217,2.501,218,1.058,219,1.818,220,1.706,221,1.515,222,2.501,223,2.501,224,1.706,225,2.501,226,2.501,227,2.501,228,2.501,229,2.501,230,2.501,231,2.501,232,0.714,233,2.583,234,2.501,235,2.501,236,2.501,237,2.501,238,0.424,239,2.501,240,2.765,241,2.501,242,1.516,243,1.946,244,0.961,245,2.276,246,2.096,247,1.227,248,1.36,249,1.946,250,1.167,251,1.516,252,1.36,253,1.818,254,1.946,255,2.501,256,4.502,257,3.272,258,2.506,259,2.501,260,4.134,261,0.917,262,1.837,263,1.305,264,0.757,265,2.501,266,3.07,267,1.009,268,3.554,269,2.891,270,4.502,271,3.554,272,1.835,273,1.504,274,2.155,275,3.554,276,3.554,277,3.554,278,3.554,279,3.554,280,3.554,281,1.572,282,2.155,283,2.096,284,1.36,285,2.501,286,1.167,287,1.946,288,2.891,289,1.662,290,2.448,291,1.863,292,4.502,293,4.502,294,3.762,295,1.693,296,2.501,297,2.101,298,2.501,299,3.554,300,3.234,301,2.501,302,2.501,303,2.583,304,4.134,305,3.554,306,0.917,307,1.009,308,1.606,309,2.501,310,1.946,311,1.058,312,1.706,313,2.276,314,2.501,315,2.501,316,0.874,317,2.501,318,4.134,319,2.501,320,2.501,321,0.008,322,0.011]],["title/interfaces/AggregationEdgeType.html",[0,0.157,20,2.202]],["body/interfaces/AggregationEdgeType.html",[0,0.281,1,3.739,2,0.521,3,0.106,4,0.234,5,0.106,6,1.908,7,1.203,8,1.266,9,3.189,10,1.783,11,2.453,12,1.347,13,1.09,14,2.65,15,2.011,16,2.232,17,1.673,18,3.524,19,1.172,20,4.203,21,0.198,22,0.429,23,0.898,24,2.973,25,2.39,26,1.145,27,1.783,28,2.251,29,0.526,30,0.453,31,0.019,32,0.74,33,0.248,34,2.272,35,2.976,36,0.779,37,0.55,38,1.115,39,1.17,40,1.943,41,0.857,42,1.413,43,1.01,44,1.145,45,1.377,46,0.494,47,2.567,48,2.346,49,0.742,50,0.745,51,0.673,52,2.125,53,1.673,54,1.499,55,2.479,56,1.908,57,1.73,58,2.453,59,0.248,60,2.055,61,1.635,62,2.316,63,2.727,64,2.011,65,2.548,66,1.908,67,0.898,68,0.85,69,0.779,70,0.627,71,1.908,72,2.232,73,3.031,74,2.224,75,2.232,76,1.673,77,3.189,78,2.232,79,2.39,80,1.203,81,4.06,82,2.346,83,2.479,84,2.548,85,1.572,86,2.232,87,1.487,88,2.232,89,3.739,90,2.453,91,3.505,92,1.799,93,3.031,94,1.817,95,1.285,96,0.465,97,3.043,98,2.303,99,2.189,100,1.715,101,0.645,102,1.999,103,2.39,104,3.505,105,2.727,106,3.505,107,1.684,108,0.93,109,0.754,110,2.055,111,0.899,112,2.937,113,3.505,114,2.609,115,0.948,116,0.883,117,3.721,118,1.572,119,1.575,120,1.783,121,1.334,122,1.225,123,1.178,124,2.626,125,2.232,126,2.453,127,1.575,128,3.031,129,1.906,130,0.056,131,2.232,132,2.055,133,2.232,134,1.172,135,1.145,136,2.453,137,0.55,138,0.579,139,1.73,140,1.673,141,1.487,142,2.232,143,1.296,144,1.906,145,1.887,146,5.168,147,2.548,148,0.989,149,1.407,150,2.453,151,2.453,152,0.896,153,2.453,154,2.453,155,1.783,156,1.783,157,1.783,158,4.09,159,2.453,160,4.09,161,3.505,162,2.453,163,1.407,164,2.453,165,2.453,166,2.453,167,2.453,168,2.453,169,2.453,170,2.453,171,2.055,172,1.203,173,2.453,174,1.334,175,1.908,176,1.407,177,2.453,178,0.011,179,2.453,180,2.453,181,2.973,182,2.232,183,1.906,184,1.649,185,2.453,186,2.453,187,1.783,188,1.783,189,2.453,190,2.453,191,1.783,192,2.453,193,2.453,194,2.453,195,2.453,196,2.39,197,0.857,198,1.908,199,2.453,200,3.189,201,3.721,202,2.453,203,1.575,204,2.453,205,1.908,206,2.453,207,0.801,208,3.505,209,1.908,210,2.453,211,3.505,212,1.908,213,2.453,214,2.232,215,1.334,216,2.453,217,2.453,218,1.038,219,1.783,220,1.673,221,1.499,222,2.453,223,2.453,224,1.673,225,2.453,226,2.453,227,2.453,228,2.453,229,2.453,230,2.453,231,2.453,232,0.708,233,2.548,234,2.453,235,2.453,236,2.453,237,2.453,238,0.416,239,2.453,240,2.727,241,2.453,242,1.487,243,1.908,244,0.943,245,2.232,246,2.055,247,1.203,248,1.334,249,1.908,250,1.145,251,1.487,252,1.334,253,1.783,254,1.908,255,2.453,256,4.462,257,3.243,258,2.479,259,2.453,260,4.09,261,0.899,262,1.817,263,1.296,264,0.742,265,2.453,266,3.043,267,0.989,268,3.505,269,2.865,270,4.462,271,3.505,272,1.809,273,1.483,274,2.125,275,3.505,276,3.505,277,3.505,278,3.505,279,3.505,280,3.505,281,1.564,282,2.125,283,2.055,284,1.334,285,2.453,286,1.145,287,1.908,288,2.865,289,1.649,290,2.426,291,1.852,292,4.462,293,4.462,294,3.721,295,1.684,296,2.453,297,2.082,298,2.453,299,3.505,300,3.189,301,2.453,302,2.453,303,2.548,304,4.09,305,3.505,306,0.899,307,0.989,308,1.575,309,2.453,310,1.908,311,1.038,312,1.673,313,2.232,314,2.453,315,2.453,316,0.857,317,2.453,318,4.09,319,2.453,320,2.453,321,0.008,322,0.011]],["title/classes/AsyncRecordsProvider.html",[130,0.064,323,2.83]],["body/classes/AsyncRecordsProvider.html",[0,0.165,3,0.129,4,0.129,5,0.129,7,1.454,8,2.689,19,0.736,21,0.239,22,0.49,23,1.148,26,1.383,30,0.473,31,0.019,32,0.749,33,0.229,38,1.113,39,1.166,41,1.766,42,2.212,43,0.854,44,1.383,45,1.417,47,3.168,49,0.897,50,0.63,52,3.501,53,3.085,54,1.984,55,2.423,59,0.15,61,1.465,67,0.805,68,0.922,69,1.269,70,0.417,71,2.306,73,2.567,76,3.692,79,2.726,82,1.7,92,1.612,94,1.507,96,0.666,100,1.537,101,0.595,102,1.909,108,0.91,111,1.086,115,1.132,117,3.637,119,3.109,123,0.63,129,2.174,130,0.067,134,0.993,135,2.431,137,0.896,138,1.382,139,1.774,140,3.302,141,1.797,144,2.174,145,2.047,149,1.7,176,1.7,178,0.009,196,2.021,238,0.503,244,1.139,248,2.633,249,2.306,250,2.431,257,2.154,263,1.461,264,0.897,267,1.612,281,1.21,284,1.611,286,2.431,306,1.086,307,1.612,321,0.009,322,0.013,323,3.997,324,2.697,325,5.665,326,2.797,327,5.211,328,2.423,329,2.905,330,1.537,331,1.329,332,3.741,333,4.479,334,1.776,335,4.479,336,4.479,337,1.692,338,5.211,339,4.842,340,4.842,341,4.842,342,3.997,343,2.905,344,1.824,345,3.997,346,3.997,347,3.321,348,2.526,349,2.935,350,4.406,351,2.623,352,3.863,353,2.797,354,3.863,355,7.646,356,3.863,357,3.863,358,4.479,359,3.863,360,3.863,361,3.863,362,3.863,363,3.863,364,3.863,365,1.612,366,3.863,367,6.312,368,3.519,369,1.961,370,1.1,371,1.863,372,5.211,373,3.321,374,2.905,375,1.332,376,3.35,377,1.961,378,1.152,379,3.863,380,3.863,381,2.154,382,2.697,383,3.637,384,1.612,385,2.697,386,2.726,387,1.195,388,2.726,389,1.454,390,1.7,391,2.697,392,2.483,393,3.863,394,2.567,395,3.863,396,3.863,397,2.021,398,1.53,399,3.321,400,1.961,401,3.863,402,3.863,403,1.611,404,3.863,405,1.611,406,2.483,407,2.483,408,3.863,409,1.903,410,3.863,411,5.069,412,1.612,413,3.321,414,1.824,415,2.483,416,1.903,417,1.903,418,1.195,419,1.903,420,1.537,421,3.863,422,3.863,423,1.53,424,3.863,425,3.863,426,3.863,427,1.903,428,3.863,429,3.863,430,1.903,431,3.863,432,3.863,433,3.863,434,2.963,435,3.863]],["title/classes/BaseProvider.html",[52,1.716,130,0.064]],["body/classes/BaseProvider.html",[0,0.225,3,0.105,4,0.105,5,0.105,7,1.182,8,2.09,9,3.148,12,1.33,19,0.86,21,0.195,22,0.542,23,1.055,24,2.943,26,2.277,30,0.46,31,0.019,32,0.777,33,0.224,38,1.122,39,1.243,40,1.557,41,1.705,42,1.968,43,1.167,44,1.124,45,1.467,46,0.485,48,2.323,50,0.512,51,0.661,52,2.098,53,3.508,54,2.062,59,0.122,62,1.698,67,1.036,68,1.053,69,1.633,70,0.487,76,2.36,85,1.33,94,1.349,95,1.885,96,0.618,100,1.33,101,0.661,102,1.842,108,0.957,109,0.837,111,1.268,115,1.215,118,1.771,122,1.415,123,1.196,130,0.055,134,0.86,135,2.481,137,0.775,138,1.35,139,1.788,145,1.701,148,0.972,152,0.869,178,0.008,197,1.415,203,2.222,207,0.751,215,1.31,221,1.484,233,3.407,238,0.587,244,1.876,245,2.192,248,1.882,249,3.151,250,2.346,251,1.461,258,2.098,263,1.412,267,1.395,281,1.339,286,2.065,288,2.6,289,1.638,290,2.797,291,2.01,294,4.265,295,1.561,297,1.615,300,4.44,306,0.883,307,1.395,311,2.217,312,2.36,321,0.008,322,0.011,324,2.192,331,1.287,333,4.537,334,1.799,335,4.537,336,4.537,337,1.873,339,3.46,340,3.46,341,3.46,342,3.46,343,2.842,344,1.785,345,3.46,346,3.46,347,2.699,348,2.065,351,2.511,353,2.523,358,4.959,365,1.785,370,1.036,371,1.626,373,2.699,375,1.153,381,2.515,387,1.395,388,2.36,394,2.222,409,2.222,411,5.468,412,1.89,413,4.537,414,2.144,415,2.9,416,2.222,417,2.222,418,1.395,419,2.222,420,1.701,423,2.285,427,2.222,430,2.222,436,6.361,437,5.279,438,4.511,439,3.684,440,1.099,441,4.511,442,3.141,443,3.141,444,3.141,445,3.141,446,3.141,447,3.141,448,3.141,449,3.141,450,3.141,451,3.141,452,3.141,453,3.141,454,3.141,455,3.141,456,3.141,457,0.729,458,4.511,459,5.77,460,4.511,461,4.511,462,3.141,463,3.141,464,2.409,465,4.511,466,4.511,467,3.141,468,1.751,469,3.141,470,3.141,471,2.36,472,1.638,473,1.461,474,3.141,475,3.141,476,3.141,477,3.141,478,3.141,479,3.141,480,3.141,481,3.141,482,3.141,483,2.692,484,2.797,485,6.361,486,4.511,487,1.557,488,4.511,489,1.537,490,4.511,491,1.985,492,3.141,493,1.643,494,3.141,495,4.511,496,3.141,497,3.141,498,3.141,499,3.141,500,3.877,501,2.222,502,4.511,503,3.141,504,3.877,505,4.959,506,1.875,507,3.141,508,2.699,509,2.192,510,2.9,511,3.141,512,3.141,513,3.141,514,3.141,515,4.511,516,3.141,517,3.141,518,3.141,519,3.141,520,3.141,521,3.141,522,1.643,523,3.141,524,3.141,525,1.751,526,1.382,527,3.141,528,1.31,529,4.511,530,3.141,531,3.141,532,3.141,533,3.141,534,4.511,535,3.141,536,3.141,537,3.141,538,3.141,539,3.141,540,3.141,541,3.141,542,4.511,543,3.141,544,3.141,545,3.141,546,5.279,547,3.141,548,4.511,549,4.511,550,4.511,551,3.141,552,3.141,553,3.141,554,3.141,555,3.141,556,4.511,557,3.141,558,4.511,559,3.141,560,3.141,561,3.141,562,4.511,563,3.141,564,3.141,565,3.141]],["title/components/BsEdgeInfoCard.html",[566,0.539,567,1.539]],["body/components/BsEdgeInfoCard.html",[3,0.254,4,0.15,5,0.15,13,1.534,21,0.279,22,0.541,23,0.695,29,0.797,30,0.439,31,0.019,33,0.223,38,1.108,39,1.219,43,1.274,44,1.611,59,0.175,67,0.89,96,0.554,108,0.621,109,0.552,111,1.62,114,1.782,130,0.078,148,1.393,152,0.552,178,0.014,232,0.84,238,0.827,281,1.045,295,1.472,297,2.063,312,3.014,316,1.207,321,0.014,322,0.014,331,1.338,337,1.87,351,2.455,353,1.694,370,0.842,371,1.15,440,1.403,504,5.463,505,5.463,566,0.929,567,2.795,568,2.838,569,1.782,570,2.392,571,1.782,572,2.355,573,6.269,574,3.142,575,1.624,576,1.869,577,1.869,578,5.312,579,2.275,580,4.875,581,2.275,582,1.966,583,2.414,584,4.875,585,4.875,586,4.875,587,5.434,588,1.966,589,4.436,590,4.436,591,4.085,592,4.085,593,4.875,594,1.472,595,4.42,596,3.13,597,4.436,598,4.953,599,2.795,600,2.68,601,4.501,602,4.42,603,4.501,604,3.869,605,4.501,606,4.501,607,3.869,608,4.501,609,1.403,610,0.734,611,3.453,612,3.453,613,4.501,614,4.501,615,4.501,616,4.501,617,3.453,618,3.453,619,1.611,620,2.217,621,1.981,622,3.453,623,3.453,624,3.453,625,3.453,626,4.42,627,3.453,628,1.534,629,3.453,630,2.687,631,1.694,632,3.453,633,1.096,634,3.142,635,5.759,636,6.269,637,3.014,638,5.762,639,4.501,640,5.762,641,4.501,642,4.501,643,4.953,644,4.953,645,3.014,646,1.461,647,2.168,648,2.535,649,2.355,650,3.505,651,2.355,652,4.501,653,4.501,654,4.501,655,3.014,656,1.981,657,2.063,658,3.014,659,1.611,660,3.325,661,1.782,662,1.782,663,1.981,664,1.878,665,2.355,666,1.694,667,1.878,668,2.355,669,1.782,670,1.337,671,3.325,672,1.981,673,2.093,674,1.878,675,2.355,676,1.878,677,2.535,678,2.355,679,1.878,680,1.878,681,2.355,682,1.694,683,1.878,684,1.393,685,2.355,686,2.355]],["title/components/BsHeatmapComponent.html",[566,0.539,661,1.461]],["body/components/BsHeatmapComponent.html",[0,0.132,3,0.174,4,0.103,5,0.103,13,1.051,19,0.848,21,0.191,22,0.418,23,1.007,29,0.728,30,0.465,31,0.019,32,0.682,33,0.173,38,0.451,39,0.503,57,1.469,59,0.173,67,0.937,68,1.057,70,0.733,88,2.152,92,1.377,96,0.569,101,0.449,103,2.329,107,1.55,112,2.861,115,1.162,116,0.984,118,1.335,123,0.852,130,0.054,137,0.765,143,0.649,152,0.846,178,0.011,183,1.286,197,0.826,207,0.579,221,1.608,232,0.658,242,1.434,261,0.867,262,2.068,284,1.286,297,2.172,306,0.867,321,0.011,322,0.011,337,1.445,351,2.617,353,2.597,368,1.719,370,0.952,371,1.615,378,0.682,390,1.357,405,1.286,406,2.861,407,1.982,418,1.377,440,1.084,487,1.54,489,1.78,526,2.67,566,0.763,567,1.286,568,2.193,569,2.069,570,1.16,571,1.221,572,1.613,575,1.335,576,1.791,577,1.805,579,1.594,581,2.048,582,1.877,583,1.95,588,1.616,592,1.982,594,1.137,599,2.718,600,2.07,609,1.736,610,0.503,619,1.104,631,1.675,633,1.084,646,1.857,647,1.966,648,1.959,649,1.613,650,2.993,651,1.613,655,2.329,656,1.357,657,1.696,658,2.329,659,1.104,660,2.733,661,2.265,662,1.221,663,1.357,664,2.637,665,1.613,666,1.16,667,1.286,668,1.613,669,1.221,670,1.033,671,2.733,672,1.357,673,1.434,674,1.286,675,1.613,676,1.286,677,1.959,678,1.613,679,1.286,680,1.286,681,1.613,682,1.16,683,1.286,684,0.954,685,1.613,686,1.613,687,2.365,688,2.913,689,1.675,690,4.491,691,3.826,692,4.491,693,3.19,694,3.19,695,4.491,696,2.913,697,2.913,698,2.913,699,2.913,700,2.913,701,2.913,702,4.451,703,3.848,704,2.913,705,3.79,706,2.913,707,5.215,708,5.224,709,3.383,710,4.451,711,4.451,712,4.451,713,4.491,714,4.917,715,2.913,716,4.491,717,2.069,718,5.215,719,5.215,720,1.966,721,5.215,722,3.415,723,4.491,724,4.491,725,3.083,726,3.103,727,4.451,728,2.482,729,3.083,730,3.826,731,3.083,732,3.826,733,3.083,734,4.93,735,3.083,736,2.482,737,2.517,738,3.083,739,3.083,740,2.265,741,2.299,742,4.849,743,1.857,744,3.083,745,3.083,746,3.083,747,2.153,748,1.675,749,3.083,750,3.107,751,3.083,752,3.083,753,2.172,754,3.083,755,3.083,756,3.826,757,3.083,758,3.118,759,4.491,760,2.913,761,2.265,762,3.826,763,4.917,764,3.107,765,3.826,766,3.286,767,2.329,768,2.936,769,2.482,770,3.826,771,3.826,772,4.491,773,3.083,774,3.083,775,3.083,776,3.826,777,1.594,778,3.083,779,3.083,780,2.821,781,3.107,782,3.083,783,3.083,784,4.917,785,3.826,786,2.265,787,4.491,788,3.083,789,3.826,790,2.861,791,2.329,792,4.491,793,3.083,794,3.083,795,3.826,796,3.083,797,3.083,798,3.083,799,3.083,800,3.083,801,3.083,802,3.083,803,3.083,804,3.083,805,3.083,806,3.083,807,3.083,808,3.083,809,1.84,810,3.083,811,4.849,812,3.083,813,3.19,814,3.083,815,3.083,816,3.083,817,1.87,818,2.07,819,1.357,820,2.65,821,2.65,822,1.434,823,2.65,824,1.357,825,2.193,826,1.434,827,1.675,828,1.719,829,1.719,830,2.402,831,1.982,832,1.051,833,2.657,834,2.65,835,2.65,836,3.826,837,3.826,838,2.65,839,2.65,840,2.65,841,2.65,842,2.65,843,2.65,844,2.65,845,2.65,846,2.65,847,1.719,848,2.65,849,2.482,850,2.913,851,1.719,852,1.719,853,1.719,854,2.65,855,1.719,856,1.719,857,1.719,858,2.65,859,2.65,860,2.65,861,1.719,862,1.519,863,1.719,864,2.65,865,1.982,866,1.719,867,1.982,868,1.719,869,1.719,870,1.719,871,1.719,872,1.719,873,2.65,874,1.982,875,1.84,876,2.65,877,2.65,878,2.65,879,2.65,880,2.861,881,2.65,882,2.65,883,2.65,884,2.65,885,2.65,886,2.65,887,2.65,888,1.193,889,2.482,890,2.65,891,2.65,892,1.982,893,2.365,894,2.65,895,2.65,896,2.861,897,1.84,898,3.826,899,3.826,900,1.857,901,3.826,902,2.65,903,2.65,904,1.719,905,2.65,906,2.65,907,1.719,908,1.357,909,2.329,910,1.719,911,1.719,912,2.482,913,2.482,914,2.482,915,1.719,916,1.719,917,0.909,918,1.719,919,1.719,920,2.65,921,2.65,922,4.491,923,3.826,924,3.826,925,2.65,926,2.365,927,2.65,928,2.65,929,2.65,930,2.65,931,4.451,932,4.451,933,4.451,934,5.721,935,4.451,936,4.451,937,4.451,938,4.451,939,4.451,940,4.451,941,4.451,942,2.482,943,3.083,944,3.083,945,3.083,946,3.083,947,5.224,948,5.224,949,3.083,950,1.613,951,3.083,952,3.083,953,3.083,954,3.083,955,3.083,956,3.083,957,4.451,958,4.491,959,6.322,960,4.451,961,3.083,962,3.083,963,3.083,964,3.083,965,3.083,966,2.65,967,4.451,968,4.451,969,2.07,970,4.451,971,3.083,972,1.719,973,2.152,974,3.083]],["title/modules/BsHeatmapModule.html",[975,1.198,976,2.202]],["body/modules/BsHeatmapModule.html",[3,0.183,4,0.183,5,0.183,31,0.019,33,0.297,46,0.848,59,0.213,130,0.096,178,0.016,321,0.013,322,0.016,365,1.698,375,1.403,610,0.895,628,1.871,646,1.782,656,3.392,657,1.782,661,3.052,663,3.392,664,2.29,667,3.215,975,1.782,976,4.644,977,2.416,978,2.416,979,3.42,980,2.704,981,3.42,982,4.718,983,4.718,984,4.718,985,2.114,986,2.174,987,5.489,988,3.407,989,3.407,990,2.872,991,4.995,992,4.995,993,3.831,994,3.407,995,1.274,996,4.186,997,2.29,998,4.186,999,5.489,1000,6.512,1001,2.872]],["title/components/BsNodeInfoCard.html",[566,0.539,662,1.461]],["body/components/BsNodeInfoCard.html",[0,0.182,3,0.253,4,0.142,5,0.142,13,1.452,21,0.264,22,0.523,23,0.658,29,0.784,30,0.452,31,0.019,32,0.46,33,0.216,38,1.132,39,0.907,43,1.23,44,1.526,59,0.216,67,0.956,69,1.038,70,0.46,94,1.421,96,0.573,108,0.588,109,0.759,111,1.564,114,1.688,116,0.768,118,1.843,130,0.074,148,1.318,152,0.804,172,1.604,178,0.013,197,1.142,232,0.847,238,0.806,242,1.982,252,1.778,281,0.989,295,1.421,297,1.991,306,1.198,311,1.383,316,1.142,321,0.013,322,0.013,331,1.304,337,1.805,351,2.423,353,1.604,370,0.813,371,1.089,378,0.942,398,1.688,440,1.355,472,1.142,566,0.905,567,1.778,568,2.74,569,1.688,570,2.33,571,1.688,572,2.23,574,2.975,575,1.582,576,1.859,577,1.859,578,5.222,579,2.216,580,4.749,581,2.216,582,1.915,583,2.379,584,4.749,585,4.749,586,4.749,587,5.355,588,1.915,589,4.321,590,4.321,591,3.98,592,3.98,593,4.749,594,1.421,595,4.266,596,3.05,597,4.321,598,4.781,599,2.737,600,2.586,602,4.266,604,3.663,607,3.663,609,1.355,610,0.695,611,3.269,612,3.269,617,3.269,618,3.269,619,1.526,620,2.099,621,1.875,622,3.269,623,3.269,624,3.269,625,3.269,626,4.266,627,3.269,628,1.452,629,3.269,630,2.544,631,1.604,632,3.269,633,1.038,634,2.975,635,4.781,636,5.641,643,4.781,644,4.781,646,1.383,647,2.093,648,2.447,649,2.23,650,3.433,651,2.23,655,2.91,656,1.875,657,2.01,658,2.91,659,1.526,660,3.239,661,1.688,662,2.599,663,1.875,664,1.778,665,2.23,666,1.604,667,1.778,668,2.23,669,1.688,670,1.291,671,3.239,672,1.875,673,1.982,674,1.778,675,2.23,676,1.778,677,2.447,678,2.23,679,1.778,680,1.778,681,2.23,682,1.604,683,1.778,684,1.318,685,2.23,686,2.23,1002,5.532,1003,4.219,1004,5.033,1005,4.262,1006,4.262,1007,4.262,1008,2.23,1009,4.262,1010,4.262,1011,3.663,1012,3.663,1013,3.663,1014,3.663,1015,3.663,1016,3.663,1017,3.663,1018,3.05,1019,5.322,1020,2.74,1021,2.099,1022,3.663,1023,3.663,1024,2.975,1025,3.663,1026,3.663,1027,3.663,1028,3.269,1029,3.663,1030,3.663,1031,3.269,1032,3.663,1033,3.663,1034,3.663,1035,3.663,1036,3.663,1037,3.663,1038,3.663,1039,3.663,1040,3.663,1041,3.663,1042,3.663,1043,3.663,1044,5.562,1045,4.262,1046,5.562,1047,5.562,1048,4.262]],["title/modules/BsTimelineModule.html",[975,1.198,1049,2.575]],["body/modules/BsTimelineModule.html",[3,0.185,4,0.185,5,0.185,31,0.019,33,0.297,46,0.858,59,0.216,130,0.097,178,0.013,272,2.201,321,0.013,322,0.016,365,1.719,375,1.42,566,0.812,610,0.906,646,1.804,657,1.804,659,2.764,664,2.318,666,2.905,830,2.201,975,2.129,976,4.45,977,2.446,978,2.446,979,3.438,980,2.737,981,3.438,985,2.129,986,2.201,988,3.432,989,3.432,990,2.907,991,5.032,992,5.032,993,3.879,994,3.432,995,1.29,996,4.217,997,2.318,998,4.217,1001,3.432,1049,5.388,1050,4.777,1051,4.777,1052,5.558,1053,4.777,1054,5.558,1055,4.217,1056,2.907,1057,4.777,1058,3.915]],["title/components/BsTooltipComponent.html",[566,0.539,667,1.539]],["body/components/BsTooltipComponent.html",[3,0.214,4,0.154,5,0.154,13,1.572,21,0.419,30,0.363,31,0.019,33,0.179,38,0.674,39,0.752,59,0.179,68,1.02,96,0.511,109,0.717,115,1.138,130,0.08,163,2.829,178,0.014,232,0.821,321,0.014,322,0.014,351,2.43,508,5.031,526,3.137,566,0.939,567,1.924,568,2.883,569,2.318,570,2.419,571,1.827,572,2.413,576,1.873,577,1.903,579,2.552,581,2.624,582,2.321,583,2.191,589,5.264,600,2.722,609,1.737,610,0.752,646,1.498,647,2.203,648,2.575,649,2.413,650,3.537,651,2.413,655,3.062,656,2.03,657,2.087,658,3.062,659,1.652,660,3.363,661,1.827,662,1.827,663,2.03,664,1.924,665,2.413,666,1.736,667,2.82,668,2.413,669,1.827,670,1.359,671,3.363,672,2.03,673,2.145,674,1.924,675,2.413,676,1.924,677,2.575,678,2.413,679,1.924,680,1.924,681,2.413,682,1.736,683,1.924,684,1.427,685,2.413,686,2.413,720,2.419,747,2.544,748,2.203,830,2.868,942,3.584,1059,3.966,1060,4.487,1061,6.428,1062,4.931,1063,6.428,1064,6.428,1065,6.428,1066,6.128,1067,6.428,1068,6.428,1069,7.13,1070,7.689,1071,7.13,1072,6.428,1073,6.428,1074,4.085,1075,4.613,1076,4.613,1077,4.613,1078,4.613,1079,4.613,1080,4.613,1081,4.613,1082,4.613,1083,4.613,1084,4.613,1085,5.853,1086,5.853,1087,5.853,1088,5.031,1089,5.853,1090,4.613,1091,4.613]],["title/interfaces/ChartDataPoint.html",[0,0.157,1092,2.057]],["body/interfaces/ChartDataPoint.html",[0,0.265,2,0.829,3,0.169,4,0.169,5,0.169,21,0.315,22,0.584,29,0.585,30,0.445,31,0.019,32,0.816,33,0.283,50,0.829,51,1.07,59,0.26,67,0.96,68,1.081,70,0.548,95,1.429,96,0.61,101,0.512,109,0.88,115,1.014,116,0.927,130,0.089,137,0.874,139,1.429,148,1.572,178,0.012,238,0.809,321,0.012,322,0.015,344,1.923,371,1.299,387,1.572,440,1.238,457,1.18,526,2.736,566,0.908,575,1.589,576,1.238,577,1.238,594,1.299,609,1.636,610,0.829,670,1.559,682,1.912,689,1.912,715,3.466,726,2.891,753,2.404,761,2.461,817,1.819,818,2.363,824,2.736,832,2.119,972,2.834,995,1.18,1056,2.659,1092,3.901,1093,3.547,1094,3.996,1095,4.768,1096,2.018,1097,3.062,1098,2.289,1099,4.768,1100,5.152,1101,4.768,1102,3.267,1103,3.252,1104,5.152,1105,3.466,1106,3.898,1107,3.267,1108,3.267,1109,3.898,1110,3.898,1111,2.12,1112,3.898,1113,3.898,1114,2.955,1115,2.363,1116,3.898,1117,3.898,1118,3.898,1119,3.267,1120,3.898,1121,2.659,1122,3.898,1123,3.898,1124,3.898,1125,3.514,1126,3.267,1127,3.898,1128,4.768,1129,3.267,1130,3.267,1131,2.503,1132,3.898,1133,3.267,1134,3.267,1135,3.898,1136,3.898,1137,3.898,1138,2.339,1139,3.898,1140,3.898,1141,3.898,1142,3.547,1143,1.299,1144,3.898,1145,3.898,1146,1.65,1147,3.898,1148,3.033,1149,3.898,1150,3.898,1151,3.898,1152,2.363,1153,3.898,1154,3.898,1155,3.898,1156,4.768,1157,3.898,1158,3.898,1159,3.547,1160,3.898]],["title/interfaces/ChartOptions.html",[0,0.157,1105,2.057]],["body/interfaces/ChartOptions.html",[0,0.263,2,0.818,3,0.167,4,0.167,5,0.167,19,1.327,21,0.311,22,0.579,23,1.124,29,0.577,30,0.468,31,0.019,32,0.822,33,0.282,50,0.818,51,1.056,59,0.259,67,0.952,68,1.018,70,0.541,95,1.41,96,0.438,101,0.506,109,0.876,115,1.005,116,0.692,130,0.087,137,0.862,139,1.41,148,1.551,178,0.012,238,0.803,321,0.012,322,0.015,344,1.907,371,1.282,387,1.551,440,1.222,457,1.164,526,2.713,566,0.901,575,1.576,576,1.222,577,1.222,594,1.282,609,1.626,610,0.818,670,1.55,682,1.887,689,1.887,715,3.987,726,2.868,753,2.39,761,2.442,817,1.795,818,2.332,824,2.713,832,2.101,972,2.796,995,1.164,1056,2.624,1092,3.723,1093,3.5,1094,3.964,1095,4.73,1096,2.002,1097,3.037,1098,2.275,1099,4.73,1100,5.122,1101,4.73,1102,3.224,1103,3.226,1104,5.122,1105,3.723,1106,5.343,1107,4.477,1108,3.224,1109,3.847,1110,3.847,1111,2.092,1112,3.847,1113,3.847,1114,2.938,1115,2.332,1116,3.847,1117,3.847,1118,3.847,1119,3.224,1120,3.847,1121,2.624,1122,3.847,1123,3.847,1124,3.847,1125,3.493,1126,3.224,1127,3.847,1128,4.73,1129,3.224,1130,3.224,1131,2.47,1132,3.847,1133,3.224,1134,3.224,1135,3.847,1136,3.847,1137,3.847,1138,2.32,1139,3.847,1140,3.847,1141,3.847,1142,3.5,1143,1.282,1144,3.847,1145,3.847,1146,1.628,1147,3.847,1148,2.993,1149,3.847,1150,3.847,1151,3.847,1152,2.332,1153,3.847,1154,3.847,1155,3.847,1156,4.73,1157,3.847,1158,3.847,1159,3.5,1160,3.847]],["title/interfaces/CustomData.html",[0,0.157,1161,2.372]],["body/interfaces/CustomData.html",[0,0.252,2,0.469,3,0.096,4,0.096,5,0.096,7,1.083,8,1.139,10,2.36,12,1.819,13,2.469,14,1.083,17,2.214,18,3.337,19,1.176,21,0.421,22,0.52,23,1.011,24,3.44,25,2.896,26,1.982,27,3.087,28,3.346,29,0.679,30,0.472,31,0.019,32,0.772,33,0.229,36,0.701,37,0.495,38,1.134,39,1.229,40,1.633,41,1.484,42,0.89,43,0.936,44,1.03,45,1.247,46,0.444,50,0.469,51,0.606,52,1.968,53,1.505,54,1.735,55,1.968,59,0.247,61,1.411,62,2.322,63,2.526,64,2.209,65,2.36,66,1.717,67,1.087,68,1.006,69,0.701,70,0.721,79,2.214,80,1.083,82,2.209,83,2.335,84,2.36,85,1.248,87,1.968,93,1.417,94,1.828,96,0.369,101,0.674,102,2.024,103,1.505,105,1.717,108,0.584,109,0.832,111,1.411,114,1.139,115,0.469,116,0.88,118,1.283,119,3.142,120,3.087,121,1.2,122,0.771,123,1.198,124,2.473,127,2.473,130,0.05,134,0.957,137,0.495,138,0.521,139,1.91,140,1.505,141,1.338,143,1.166,145,1.97,149,1.266,152,0.862,172,1.083,178,0.007,181,2.36,184,1.309,196,2.627,197,1.484,198,2.526,203,1.417,207,0.768,212,1.717,218,2.003,221,1.793,232,0.679,233,2.36,238,0.884,240,2.997,243,1.717,251,1.338,254,1.717,257,2.36,258,1.968,261,0.809,263,1.057,264,1.165,266,1.505,267,0.89,269,2.473,281,1.37,282,1.338,284,1.2,286,1.03,287,1.717,288,2.085,289,1.134,290,1.765,291,1.19,295,1.081,306,1.411,307,0.89,308,1.417,321,0.007,322,0.01,326,2.401,329,1.604,330,0.848,331,0.891,332,1.505,348,1.797,349,3.044,350,2.008,370,0.618,374,1.604,377,1.593,378,0.636,381,1.604,382,2.008,383,3.864,384,2.356,385,2.008,386,3.809,387,0.89,388,1.505,389,1.593,390,1.266,391,2.008,392,1.849,398,2.336,400,1.083,405,1.2,406,1.849,414,1.909,415,1.849,416,1.417,419,2.085,420,1.48,468,2.36,471,1.505,473,2.967,483,1.717,484,2.309,489,0.98,491,1.266,506,1.717,620,1.417,633,1.503,767,1.505,874,3.227,1003,2.72,1138,1.083,1148,1.717,1161,3.793,1162,1.717,1163,3.504,1164,3.246,1165,3.246,1166,1.553,1167,2.526,1168,1.717,1169,3.809,1170,1.849,1171,2.72,1172,2.207,1173,1.717,1174,2.954,1175,2.207,1176,3.504,1177,2.207,1178,1.604,1179,2.207,1180,2.954,1181,2.008,1182,2.207,1183,2.207,1184,2.008,1185,2.799,1186,1.849,1187,2.954,1188,1.717,1189,1.338,1190,2.207,1191,2.207,1192,2.207,1193,2.207,1194,1.849,1195,2.207,1196,2.207,1197,2.207,1198,3.246,1199,2.207,1200,2.207,1201,2.207,1202,2.207,1203,2.207,1204,2.008,1205,2.72,1206,2.954,1207,2.008,1208,2.207,1209,2.207,1210,2.207,1211,3.864,1212,2.207,1213,2.207,1214,2.207,1215,3.851,1216,2.207,1217,2.207,1218,2.207,1219,2.207,1220,2.207,1221,3.246,1222,3.246,1223,3.246,1224,2.207,1225,3.246,1226,2.207,1227,1.417,1228,2.207,1229,2.207,1230,1.849,1231,2.207,1232,3.851,1233,1.849,1234,2.207,1235,1.505,1236,2.207,1237,3.246,1238,2.207,1239,2.207,1240,1.604,1241,2.207,1242,2.207,1243,2.207,1244,2.207,1245,1.765,1246,2.207,1247,2.207,1248,1.139,1249,2.207,1250,2.207,1251,2.008,1252,2.207,1253,2.207,1254,3.246,1255,2.207,1256,2.207,1257,2.207,1258,2.207,1259,2.207,1260,2.207,1261,2.207,1262,2.207,1263,2.207,1264,2.207,1265,2.008,1266,2.207,1267,1.604,1268,2.207,1269,2.207,1270,3.246,1271,2.207,1272,2.207,1273,2.207,1274,2.207,1275,2.207,1276,1.417,1277,1.717,1278,2.207,1279,2.207,1280,2.207,1281,2.207,1282,2.207,1283,2.207,1284,2.207,1285,2.207,1286,2.207,1287,2.207,1288,3.851,1289,2.207,1290,2.207,1291,3.246,1292,2.207,1293,2.207,1294,4.247,1295,2.207,1296,3.044,1297,2.575,1298,4.247,1299,4.247,1300,2.575,1301,2.207,1302,2.207,1303,2.207,1304,4.247,1305,2.967,1306,2.207,1307,2.008,1308,3.851,1309,2.207,1310,3.851,1311,3.246,1312,3.246,1313,3.246,1314,3.246,1315,2.207,1316,2.207,1317,3.851,1318,3.851,1319,2.207,1320,1.968,1321,2.207,1322,2.72,1323,2.207,1324,2.207,1325,2.207,1326,2.207,1327,2.207,1328,2.008,1329,1.505,1330,2.207,1331,1.717,1332,2.207,1333,2.207]],["title/interfaces/DynamicEdge.html",[0,0.157,1334,2.575]],["body/interfaces/DynamicEdge.html",[0,0.288,2,0.614,3,0.125,4,0.251,5,0.125,7,1.418,8,1.492,17,1.971,19,0.976,21,0.233,22,0.547,29,0.434,30,0.427,31,0.019,32,0.553,33,0.261,36,0.918,37,0.648,38,1.132,39,1.208,40,1.927,41,1.373,43,1.133,44,1.349,45,1.284,46,0.582,47,3.052,49,0.875,50,0.614,54,1.837,55,2.905,56,2.249,59,0.242,61,1.756,67,0.582,70,0.705,73,2.524,82,2.749,83,2.707,85,1.111,87,3.039,93,1.856,94,1.818,96,0.329,98,1.492,100,1.511,101,0.587,102,2.118,108,0.862,109,0.628,114,2.305,116,0.707,118,1.309,121,1.572,122,1.01,123,1.144,124,2.867,129,2.428,130,0.066,134,1.245,137,0.648,138,0.682,139,2,141,1.752,143,1.477,145,1.717,152,0.801,172,1.418,175,2.249,176,1.658,178,0.017,183,3.001,184,1.801,207,0.49,209,3.058,232,0.67,238,0.49,244,1.511,246,3.293,247,1.928,251,2.383,258,2.707,261,1.059,263,1.477,264,1.189,266,1.971,267,1.166,269,2.867,273,1.223,281,1.351,282,2.383,283,2.422,288,1.856,289,1.01,290,1.572,291,1.059,295,0.963,306,1.059,307,1.166,308,1.856,310,2.249,311,1.223,312,1.971,321,0.009,322,0.012,326,2.191,328,2.383,329,2.101,330,1.511,331,1.079,332,3.045,349,2.383,370,0.851,374,2.101,375,1.309,377,2.351,384,2.279,386,1.971,387,1.166,389,1.418,400,1.418,403,1.572,412,1.166,414,1.585,434,2.89,457,0.875,468,2.101,472,1.01,489,1.284,506,2.249,582,1.166,630,2.249,633,1.248,780,2.383,781,4.063,866,2.101,888,1.674,950,1.971,1138,1.418,1143,1.309,1166,1.585,1167,3.475,1168,3.475,1169,1.971,1170,2.422,1171,2.422,1173,2.249,1245,1.572,1248,1.492,1276,1.856,1322,2.422,1334,4.063,1335,2.422,1336,1.971,1337,3.764,1338,2.249,1339,4.333,1340,2.89,1341,2.89,1342,2.89,1343,2.89,1344,2.89,1345,3.912,1346,2.89,1347,3.239,1348,3.239,1349,2.524,1350,3.239,1351,3.239,1352,2.101,1353,3.239,1354,2.63,1355,1.572,1356,2.89,1357,2.89,1358,2.89,1359,4.792,1360,3.93,1361,2.856,1362,2.89,1363,1.752,1364,4.465,1365,2.89,1366,2.028,1367,4.404,1368,2.89,1369,2.89,1370,3.239,1371,2.89,1372,2.89,1373,2.89,1374,1.752,1375,2.89,1376,5.004,1377,2.89,1378,2.89,1379,2.89,1380,4.465,1381,2.89,1382,2.249,1383,2.89,1384,1.418,1385,2.89,1386,3.239,1387,2.89,1388,2.89,1389,2.89,1390,2.89,1391,2.89,1392,2.89,1393,2.89,1394,2.89,1395,2.89,1396,4.404,1397,4.404,1398,2.89,1399,2.89,1400,2.89,1401,2.89,1402,2.89,1403,2.89,1404,4.404,1405,3.239,1406,2.422,1407,4.404,1408,3.239,1409,2.89,1410,2.101,1411,3.239,1412,3.239,1413,3.239,1414,2.89,1415,2.89,1416,2.89,1417,2.89,1418,3.93,1419,3.93,1420,3.93,1421,3.93,1422,4.404,1423,4.404,1424,4.404,1425,4.404,1426,3.93]],["title/interfaces/DynamicEdgeType.html",[0,0.157,1339,2.372]],["body/interfaces/DynamicEdgeType.html",[0,0.285,2,0.597,3,0.122,4,0.251,5,0.122,7,1.378,8,1.449,17,2.628,19,1.233,21,0.227,22,0.58,23,0.776,29,0.421,30,0.438,31,0.019,32,0.542,33,0.259,36,0.892,37,0.629,38,1.132,39,1.187,40,2.018,41,1.346,43,1.111,44,1.31,45,1.273,46,0.565,47,3.093,49,0.85,50,0.597,54,1.818,55,2.87,56,2.185,59,0.239,61,1.735,67,0.565,70,0.698,73,2.474,82,2.94,83,3.008,85,1.079,87,3.241,93,2.474,94,1.846,96,0.319,98,1.989,100,1.481,101,0.578,102,2.111,108,0.852,109,0.616,114,2.646,116,0.893,118,1.707,121,1.527,122,0.981,123,1.136,124,2.825,129,2.392,130,0.064,134,1.273,137,0.629,138,0.663,139,1.988,141,1.702,143,1.467,145,1.691,152,0.793,172,1.378,175,2.185,176,1.611,178,0.017,183,2.984,184,1.774,207,0.477,209,2.998,232,0.66,238,0.477,244,1.481,246,3.229,247,1.89,251,2.336,258,2.667,261,1.029,263,1.467,264,1.166,266,1.915,267,1.132,269,2.825,273,1.188,281,1.331,282,2.667,283,2.353,288,1.803,289,0.981,290,1.527,291,1.029,295,0.935,306,1.029,307,1.132,308,1.803,310,2.185,311,1.188,312,1.915,321,0.009,322,0.012,326,2.323,328,2.336,329,2.041,330,1.481,331,1.3,332,3,349,2.336,370,0.945,374,2.041,375,1.284,377,2.323,384,2.117,386,1.915,387,1.132,389,1.378,400,1.378,403,1.527,412,1.132,414,1.132,434,2.808,457,0.85,468,2.041,472,0.981,489,1.248,506,2.998,582,1.132,630,2.998,633,1.224,780,2.336,781,4.003,866,2.041,888,1.654,950,1.915,1138,1.378,1143,1.284,1166,1.774,1167,3.423,1168,2.998,1169,1.915,1170,3.229,1171,3.229,1173,2.998,1245,1.527,1248,1.449,1276,1.803,1322,2.353,1334,3.506,1335,2.353,1336,1.915,1337,3.837,1338,2.998,1339,4.399,1340,3.853,1341,3.853,1342,4.735,1343,3.853,1344,3.853,1345,3.942,1346,2.808,1347,3.147,1348,3.147,1349,2.474,1350,3.147,1351,3.147,1352,2.041,1353,3.147,1354,2.555,1355,1.527,1356,2.808,1357,2.808,1358,2.808,1359,4.735,1360,3.853,1361,2.801,1362,2.808,1363,1.702,1364,4.399,1365,2.808,1366,2.004,1367,4.318,1368,2.808,1369,2.808,1370,3.147,1371,2.808,1372,2.808,1373,2.808,1374,1.702,1375,2.808,1376,4.93,1377,2.808,1378,2.808,1379,2.808,1380,4.399,1381,2.808,1382,2.185,1383,2.808,1384,1.378,1385,2.808,1386,3.147,1387,2.808,1388,2.808,1389,2.808,1390,2.808,1391,2.808,1392,2.808,1393,2.808,1394,2.808,1395,2.808,1396,4.318,1397,4.318,1398,2.808,1399,2.808,1400,2.808,1401,2.808,1402,2.808,1403,2.808,1404,4.318,1405,3.147,1406,2.353,1407,4.318,1408,3.147,1409,2.808,1410,2.041,1411,3.147,1412,3.147,1413,3.147,1414,2.808,1415,2.808,1416,2.808,1417,2.808,1418,3.853,1419,3.853,1420,3.853,1421,3.853,1422,4.318,1423,4.318,1424,4.318,1425,4.318,1426,3.853]],["title/interfaces/DynamicNodeType.html",[0,0.157,1427,2.83]],["body/interfaces/DynamicNodeType.html",[0,0.267,2,0.616,3,0.126,4,0.24,5,0.126,7,1.423,8,1.497,13,1.288,14,2.195,19,1.286,21,0.234,22,0.588,29,0.435,30,0.361,31,0.019,32,0.554,33,0.268,36,0.921,37,0.65,38,1.14,41,1.376,43,1.136,44,1.353,45,1.247,46,0.584,47,3.054,49,0.878,50,0.837,51,0.796,54,1.759,55,2.712,56,2.257,59,0.199,61,1.639,64,1.664,68,0.552,70,0.629,73,2.53,82,2.879,83,3.042,87,3.21,89,3.301,92,1.17,93,2.53,94,1.312,95,1.839,96,0.33,101,0.588,102,2.111,108,0.805,109,0.629,114,2.672,123,1.145,129,2.142,130,0.066,134,1.247,137,0.65,138,0.685,139,2.024,140,2.687,141,1.758,143,1.516,145,1.72,152,0.802,172,1.423,175,2.257,176,1.664,178,0.012,181,2.108,183,2.97,184,1.804,196,2.687,203,3.082,207,0.759,209,2.257,232,0.753,238,0.492,244,1.514,247,1.423,251,1.758,258,2.712,261,1.063,263,1.377,267,1.17,269,2.873,273,1.227,281,1.354,282,2.388,289,1.013,290,1.577,291,1.063,295,0.966,307,1.17,308,1.862,310,2.257,311,1.227,312,1.978,321,0.009,322,0.012,326,2.539,330,1.72,331,1.081,332,3.051,348,2.471,349,2.388,370,0.914,375,1.312,377,2.354,381,2.108,384,2.172,386,1.978,389,1.423,400,1.423,403,1.577,457,0.878,472,1.013,483,3.481,489,1.288,500,3.25,501,1.862,600,1.758,630,3.065,633,1.251,781,2.639,888,1.376,950,1.978,1031,2.9,1138,1.423,1166,1.804,1168,2.257,1169,3.611,1173,3.065,1186,2.43,1204,2.639,1211,4.367,1248,1.497,1276,1.862,1328,2.639,1335,2.43,1336,1.978,1337,3.724,1338,3.065,1340,3.939,1341,3.939,1342,5.294,1343,3.939,1344,3.939,1345,4.014,1354,2.639,1355,1.577,1356,2.9,1357,2.9,1359,4.473,1360,3.939,1361,2.108,1362,2.9,1363,2.388,1364,4.473,1365,2.9,1366,2.031,1368,2.9,1369,2.9,1371,2.9,1372,2.9,1373,2.9,1374,1.758,1375,2.9,1377,2.9,1378,2.9,1380,3.939,1381,2.9,1382,3.065,1383,2.9,1384,1.423,1385,2.9,1387,2.9,1388,2.9,1389,2.9,1390,2.9,1391,2.9,1392,2.9,1393,4.473,1394,2.9,1395,2.9,1398,2.9,1399,2.9,1400,2.9,1401,2.9,1402,2.9,1403,2.9,1409,3.939,1410,2.108,1414,2.9,1415,2.9,1416,2.9,1417,2.9,1418,2.9,1419,2.9,1420,2.9,1421,2.9,1426,3.939,1427,4.473,1428,5.135,1429,2.639,1430,3.781,1431,2.142,1432,3.065,1433,2.257,1434,3.25,1435,3.781,1436,1.978,1437,3.781,1438,3.781,1439,3.781,1440,3.25,1441,3.781,1442,5.135,1443,5.135,1444,3.781,1445,3.781,1446,3.781,1447,3.781,1448,3.25,1449,5.832,1450,3.781,1451,5.135,1452,3.781,1453,3.781,1454,3.781,1455,3.781,1456,3.781,1457,3.781,1458,3.781,1459,3.781,1460,3.25,1461,3.25,1462,3.781,1463,5.135,1464,3.781,1465,5.135,1466,3.781,1467,3.781,1468,3.781]],["title/interfaces/Edge.html",[0,0.157,39,0.602]],["body/interfaces/Edge.html",[0,0.285,2,0.506,3,0.103,4,0.103,5,0.103,12,1.318,14,1.682,15,1.364,19,0.999,21,0.355,22,0.595,23,0.69,26,2.053,29,0.769,30,0.458,31,0.019,32,0.83,33,0.259,34,0.914,37,0.768,38,1.133,39,1.25,40,1.793,41,1.63,42,2.02,43,1.268,45,1.244,46,0.479,49,0.72,50,0.729,51,0.653,54,2.006,57,0.872,59,0.253,62,1.167,68,0.838,69,1.397,70,0.656,74,1.864,80,1.972,85,1.318,92,1.621,94,1.85,95,1.967,96,0.53,99,1.167,100,1.793,101,0.674,102,2.058,107,0.792,108,0.792,109,0.881,111,0.872,115,0.729,116,0.839,118,1.807,122,1.405,123,0.506,130,0.054,134,1.093,135,1.6,138,1.332,143,1.433,145,2.148,152,0.703,178,0.008,207,0.404,215,1.293,218,1.701,232,0.603,238,0.404,244,1.793,247,1.167,248,1.293,250,2.437,261,1.257,262,2.072,263,0.941,264,1.551,267,0.959,273,1.451,274,2.079,286,1.11,307,0.959,311,1.862,316,1.198,321,0.008,322,0.011,330,1.318,331,0.653,334,1.523,343,1.527,344,0.959,348,2.053,369,1.972,370,0.888,371,0.792,375,1.142,378,1.159,387,0.959,394,1.527,397,3.001,398,1.77,400,2.159,403,2.536,409,1.527,412,1.383,414,1.621,417,2.995,418,0.959,420,1.97,423,2.271,427,1.527,430,1.527,457,0.72,472,1.75,484,2.839,487,1.318,491,2.306,493,2.338,501,2.202,522,1.622,528,2.642,619,1.6,621,1.364,628,1.523,637,2.338,645,1.622,670,0.72,826,1.442,827,1.682,832,2.225,888,1.405,917,0.914,995,0.72,1018,2.202,1020,2.202,1021,1.527,1098,1.786,1115,1.442,1143,0.792,1152,1.442,1166,1.774,1189,1.442,1245,1.293,1248,1.228,1296,1.442,1297,1.442,1300,2.079,1305,1.442,1320,1.442,1349,1.527,1363,2.079,1366,1.862,1374,1.442,1384,1.167,1431,1.864,1436,2.338,1469,1.527,1470,1.622,1471,2.492,1472,2.492,1473,2.159,1474,2.515,1475,1.622,1476,1.786,1477,1.11,1478,2.338,1479,1.972,1480,1.876,1481,1.864,1482,2.202,1483,1.729,1484,2.492,1485,1.6,1486,1.729,1487,1.729,1488,1.729,1489,2.492,1490,1.729,1491,3.39,1492,1.729,1493,2.306,1494,2.492,1495,1.729,1496,1.729,1497,1.729,1498,1.729,1499,1.622,1500,1.729,1501,1.729,1502,1.729,1503,1.729,1504,1.967,1505,1.622,1506,1.77,1507,1.729,1508,1.729,1509,1.527,1510,1.11,1511,1.527,1512,1.729,1513,1.729,1514,1.622,1515,1.729,1516,1.729,1517,2.492,1518,1.729,1519,1.729,1520,1.729,1521,1.729,1522,1.729,1523,1.729,1524,1.729,1525,1.729,1526,1.729,1527,1.729,1528,1.729,1529,1.729,1530,1.729,1531,1.729,1532,1.729,1533,1.729,1534,2.492,1535,2.492,1536,1.729,1537,1.729,1538,1.729,1539,1.729,1540,1.007,1541,1.729,1542,1.729,1543,1.729,1544,1.729,1545,1.729,1546,2.492,1547,1.729,1548,1.729,1549,1.729,1550,1.729,1551,2.492,1552,1.729,1553,1.729,1554,1.729,1555,1.729,1556,2.492,1557,2.492,1558,1.729,1559,1.729,1560,1.729,1561,1.729,1562,1.729,1563,2.492,1564,1.729,1565,1.729,1566,1.729,1567,1.729,1568,1.729,1569,3.198,1570,1.729,1571,1.729,1572,1.729,1573,1.729,1574,1.729,1575,1.729,1576,1.729,1577,1.729,1578,1.729,1579,1.729,1580,1.729,1581,1.622,1582,2.492,1583,1.729,1584,1.77,1585,1.729,1586,1.729,1587,2.492,1588,2.079,1589,1.729,1590,2.492,1591,1.729,1592,1.729,1593,1.729,1594,2.492,1595,1.729,1596,2.492,1597,1.729,1598,2.492,1599,2.492,1600,1.729,1601,1.729,1602,1.729,1603,1.729,1604,1.729,1605,1.729,1606,1.729,1607,2.492,1608,1.729,1609,1.729,1610,2.492,1611,1.729,1612,1.729,1613,1.729,1614,1.729,1615,1.729,1616,1.729,1617,1.729,1618,1.729,1619,2.492,1620,1.729,1621,1.729,1622,1.729,1623,1.729,1624,1.729,1625,1.729,1626,1.729,1627,1.729,1628,1.729,1629,1.729,1630,1.729,1631,1.729,1632,1.729,1633,1.729,1634,1.729,1635,1.729,1636,1.729,1637,1.729,1638,1.729,1639,2.492,1640,1.729,1641,1.729,1642,1.729,1643,1.729,1644,1.729,1645,1.729,1646,1.729,1647,1.729]],["title/interfaces/EdgeType.html",[0,0.157,40,1.088]],["body/interfaces/EdgeType.html",[0,0.286,2,0.509,3,0.104,4,0.104,5,0.104,12,1.325,14,1.981,15,1.978,19,1.003,21,0.357,22,0.597,23,0.694,26,1.119,29,0.731,30,0.439,31,0.019,32,0.825,33,0.26,34,1.325,37,0.773,38,1.135,39,1.251,40,1.697,41,1.635,42,1.887,43,1.273,45,1.247,46,0.483,49,0.725,50,0.733,51,0.658,54,1.946,57,1.264,59,0.254,62,1.176,68,0.841,69,1.402,70,0.658,74,1.875,80,1.981,85,1.325,92,1.781,94,1.852,95,1.991,96,0.532,99,1.176,100,1.798,101,0.675,102,2.05,107,0.799,108,0.795,109,0.888,111,1.264,115,0.733,116,0.727,118,1.672,122,1.411,123,0.509,130,0.054,134,1.097,135,1.609,138,1.333,143,1.436,145,2.15,152,0.705,178,0.008,207,0.407,215,1.304,218,1.709,232,0.606,238,0.407,244,1.552,247,1.176,248,1.304,250,2.273,261,1.264,262,2.078,263,0.946,264,1.554,267,0.967,273,1.459,274,2.09,286,1.119,307,0.967,311,1.98,316,1.205,321,0.008,322,0.011,330,1.325,331,0.658,334,1.532,343,1.539,344,0.967,348,2.273,369,1.981,370,0.891,371,0.799,375,1.149,378,1.164,387,1.39,394,1.539,397,3.011,398,1.78,400,2.166,403,2.544,409,1.539,412,0.967,414,1.39,417,2.835,418,0.967,420,2.041,423,2.279,427,1.539,430,1.539,457,0.725,472,1.543,484,2.649,487,1.325,491,2.533,493,2.754,501,2.214,522,1.635,528,2.649,619,1.884,621,1.375,628,1.532,637,2.351,645,1.635,670,0.725,826,1.453,827,1.176,832,2.23,888,1.411,917,0.921,995,0.725,1008,2.351,1018,2.214,1020,2.214,1021,1.539,1098,1.794,1115,1.453,1143,0.799,1152,1.453,1166,1.781,1189,1.453,1245,1.304,1248,1.237,1296,1.453,1297,1.453,1300,2.09,1305,1.453,1320,1.453,1349,2.214,1363,2.448,1366,1.869,1374,1.453,1384,1.176,1431,1.875,1436,2.351,1469,1.539,1470,1.635,1471,1.742,1472,1.742,1473,1.981,1474,2.566,1475,1.635,1476,1.794,1477,1.119,1478,2.351,1479,1.981,1480,1.884,1481,2.196,1482,2.593,1483,1.742,1484,2.506,1485,1.884,1486,2.506,1487,3.21,1488,2.506,1489,3.4,1490,1.742,1491,3.4,1492,1.742,1493,2.316,1494,2.506,1495,1.742,1496,1.742,1497,1.742,1498,1.742,1499,1.635,1500,1.742,1501,1.742,1502,1.742,1503,1.742,1504,1.978,1505,1.635,1506,1.78,1507,1.742,1508,1.742,1509,1.539,1510,1.119,1511,1.539,1512,1.742,1513,1.742,1514,1.635,1515,1.742,1516,1.742,1517,2.506,1518,1.742,1519,1.742,1520,1.742,1521,1.742,1522,1.742,1523,1.742,1524,1.742,1525,1.742,1526,1.742,1527,1.742,1528,1.742,1529,1.742,1530,1.742,1531,1.742,1532,1.742,1533,1.742,1534,2.506,1535,2.506,1536,1.742,1537,1.742,1538,1.742,1539,1.742,1540,1.014,1541,1.742,1542,1.742,1543,1.742,1544,1.742,1545,1.742,1546,2.506,1547,1.742,1548,1.742,1549,1.742,1550,1.742,1551,2.506,1552,1.742,1553,1.742,1554,1.742,1555,1.742,1556,2.506,1557,2.506,1558,1.742,1559,1.742,1560,1.742,1561,1.742,1562,1.742,1563,2.506,1564,1.742,1565,1.742,1566,1.742,1567,1.742,1568,1.742,1569,3.21,1570,1.742,1571,1.742,1572,1.742,1573,1.742,1574,1.742,1575,1.742,1576,1.742,1577,1.742,1578,1.742,1579,1.742,1580,1.742,1581,1.635,1582,2.506,1583,1.742,1584,1.78,1585,1.742,1586,1.742,1587,2.506,1588,2.09,1589,1.742,1590,2.506,1591,1.742,1592,1.742,1593,1.742,1594,2.506,1595,1.742,1596,2.506,1597,1.742,1598,2.506,1599,2.506,1600,1.742,1601,1.742,1602,1.742,1603,1.742,1604,1.742,1605,1.742,1606,1.742,1607,2.506,1608,1.742,1609,1.742,1610,2.506,1611,1.742,1612,1.742,1613,1.742,1614,1.742,1615,1.742,1616,1.742,1617,1.742,1618,1.742,1619,2.506,1620,1.742,1621,1.742,1622,1.742,1623,1.742,1624,1.742,1625,1.742,1626,1.742,1627,1.742,1628,1.742,1629,1.742,1630,1.742,1631,1.742,1632,1.742,1633,1.742,1634,1.742,1635,1.742,1636,1.742,1637,1.742,1638,1.742,1639,2.506,1640,1.742,1641,1.742,1642,1.742,1643,1.742,1644,1.742,1645,1.742,1646,1.742,1647,1.742]],["title/interfaces/FacetChartDataPoint.html",[0,0.157,1648,2.575]],["body/interfaces/FacetChartDataPoint.html",[0,0.171,2,0.652,3,0.133,4,0.133,5,0.133,21,0.372,22,0.501,28,1.969,29,0.691,30,0.33,31,0.019,32,0.791,33,0.282,34,1.966,35,3.256,36,0.974,37,0.687,45,1.398,46,0.617,49,0.928,50,0.869,51,0.842,59,0.207,61,1.686,67,1.03,68,1.039,70,0.69,92,1.237,95,1.499,96,0.523,98,1.583,101,0.645,107,1.924,108,0.828,109,0.919,115,0.652,123,0.652,127,1.969,128,1.969,130,0.07,134,0.762,135,2.148,137,0.917,148,1.237,149,1.759,152,0.858,171,2.57,178,0.017,197,1.429,207,0.694,221,1.124,232,0.614,242,1.859,250,1.431,253,2.229,281,1.592,289,1.071,291,1.124,295,1.362,297,1.431,306,1.124,321,0.01,322,0.013,331,0.842,334,1.362,337,1.298,344,1.649,369,1.504,370,0.877,418,1.237,420,1.179,440,0.974,457,0.928,464,3.066,526,1.759,566,0.779,575,1.362,576,0.974,577,1.461,594,1.021,600,1.859,609,1.772,610,0.652,633,0.974,657,2.226,669,1.583,670,1.238,715,2.973,761,2.534,777,1.909,786,1.583,819,2.64,824,1.759,832,2.517,833,4.179,861,2.229,995,0.928,997,1.667,1092,3.717,1094,3.427,1096,1.731,1097,2.955,1098,2.044,1103,2.091,1105,2.973,1107,3.427,1108,2.57,1119,2.57,1126,2.57,1129,2.57,1130,2.57,1131,1.969,1133,2.57,1134,2.57,1143,1.021,1146,1.298,1194,2.57,1230,2.57,1233,2.57,1235,2.091,1479,2.258,1504,1.759,1509,1.969,1510,1.431,1540,1.298,1648,4.187,1649,3.066,1650,2.79,1651,3.066,1652,3.345,1653,2.79,1654,3.345,1655,2.79,1656,1.667,1657,4.583,1658,3.436,1659,3.436,1660,3.436,1661,3.436,1662,3.436,1663,3.436,1664,3.436,1665,3.436,1666,3.436,1667,3.436,1668,1.859,1669,3.436,1670,2.57,1671,1.859,1672,2.111,1673,1.859,1674,1.859,1675,1.859,1676,1.859,1677,1.859,1678,1.859,1679,3.436,1680,3.436,1681,3.436,1682,3.436,1683,3.436,1684,5.501,1685,3.436,1686,4.583,1687,3.436,1688,3.436,1689,3.436,1690,4.583,1691,3.436,1692,3.436,1693,3.436,1694,3.436,1695,2.091,1696,3.436,1697,3.436,1698,2.479,1699,3.436,1700,3.436,1701,3.436,1702,3.436,1703,3.436,1704,4.583,1705,3.427,1706,4.583,1707,3.436,1708,3.436,1709,3.066,1710,3.436,1711,3.436,1712,2.386,1713,3.436,1714,3.436,1715,3.436,1716,2.229,1717,3.436,1718,3.436,1719,3.436,1720,3.436,1721,3.436,1722,3.436,1723,3.436,1724,3.436,1725,3.436,1726,3.436,1727,3.436,1728,3.436,1729,3.436,1730,3.436,1731,3.436,1732,4.583,1733,3.436,1734,3.436,1735,4.583,1736,3.436,1737,3.436,1738,3.436,1739,3.436,1740,3.436,1741,3.436,1742,3.436,1743,3.436,1744,3.436,1745,3.436,1746,3.436,1747,4.583,1748,2.57,1749,2.973,1750,3.436,1751,3.436,1752,3.436,1753,4.583,1754,3.436,1755,2.386,1756,3.436,1757,2.79,1758,2.57,1759,3.436,1760,2.091,1761,3.436,1762,3.436,1763,3.436,1764,3.436,1765,3.436,1766,3.436,1767,3.436,1768,3.436,1769,3.436,1770,3.436,1771,3.436,1772,3.436,1773,3.436,1774,4.583,1775,3.436,1776,3.436,1777,3.436,1778,3.436,1779,4.583,1780,3.436,1781,3.436,1782,3.436]],["title/components/FacetNgxChart.html",[566,0.539,669,1.461]],["body/components/FacetNgxChart.html",[0,0.137,3,0.178,4,0.107,5,0.107,13,1.094,21,0.331,22,0.431,23,0.952,28,1.582,29,0.738,30,0.456,31,0.019,32,0.8,33,0.27,34,1.989,35,3.192,36,0.782,37,0.552,38,0.469,39,0.523,45,1.356,46,0.496,49,0.745,50,0.747,51,0.676,59,0.178,61,1.502,67,1.019,68,1.04,70,0.712,92,1.418,95,1.638,96,0.615,98,1.815,101,0.588,107,1.848,108,0.851,109,0.892,115,1.005,123,0.523,127,1.582,128,2.632,130,0.056,134,0.873,135,1.913,137,0.919,148,0.993,149,2.017,152,0.808,171,2.064,178,0.017,197,1.432,207,0.597,221,0.903,232,0.528,242,1.493,250,1.641,253,1.79,281,1.593,289,0.861,291,0.903,295,1.171,297,1.149,306,0.903,321,0.011,322,0.011,331,0.676,334,1.562,337,1.735,344,1.653,351,2.561,353,2.319,369,1.725,370,1.07,371,1.489,418,1.418,420,0.947,440,1.116,457,0.745,464,2.463,526,1.413,566,0.781,567,1.339,568,2.257,569,1.271,571,1.271,572,1.68,575,1.366,576,1.8,577,1.814,594,1.171,599,1.912,600,2.485,609,1.696,610,0.523,633,0.782,646,1.042,647,1.725,648,2.017,649,1.68,650,3.049,651,1.68,655,2.398,656,1.413,657,2.348,658,2.398,659,1.149,660,2.796,661,1.271,662,1.271,663,1.413,664,1.339,665,1.68,666,1.208,667,1.339,668,1.68,669,2.308,670,1.764,671,2.796,672,1.413,673,1.493,674,1.339,675,1.68,676,1.339,677,2.017,678,1.68,679,1.339,680,1.339,681,1.68,682,1.208,683,1.339,684,0.993,685,1.68,686,1.68,715,3.25,761,2.44,777,2.206,786,1.271,819,2.565,824,1.413,832,2.426,833,3.937,861,1.79,995,0.745,997,1.339,1074,3.199,1092,3.76,1094,3.435,1096,1.892,1097,2.632,1098,2.248,1103,1.68,1105,2.98,1107,3.746,1108,2.946,1111,1.912,1119,2.064,1126,3.746,1129,2.064,1130,2.064,1131,2.871,1133,2.064,1134,3.435,1143,0.82,1146,1.488,1159,3.199,1194,2.064,1230,2.064,1233,2.064,1235,1.68,1479,2.482,1504,1.413,1509,1.582,1510,1.641,1540,1.042,1648,3.73,1649,5.779,1650,5.259,1651,2.463,1652,3.678,1653,2.241,1654,3.573,1655,2.71,1656,1.339,1657,5.01,1658,3.939,1659,2.76,1660,4.594,1661,3.939,1662,4.594,1663,3.939,1664,4.594,1665,2.76,1666,2.76,1667,2.76,1668,1.493,1669,2.76,1670,2.064,1671,1.493,1672,2.116,1673,1.493,1674,1.493,1675,1.493,1676,1.493,1677,1.493,1678,1.493,1679,2.76,1680,2.76,1681,2.76,1682,2.76,1683,2.76,1684,5.01,1685,2.76,1686,3.939,1687,2.76,1688,2.76,1689,2.76,1690,3.939,1691,3.939,1692,5.01,1693,3.939,1694,2.76,1695,1.68,1696,2.76,1697,2.76,1698,2.71,1699,3.939,1700,5.01,1701,2.76,1702,2.76,1703,2.76,1704,3.939,1705,2.946,1706,3.939,1707,2.76,1708,2.76,1709,2.463,1710,2.76,1711,2.76,1712,1.917,1713,2.76,1714,2.76,1715,2.76,1716,1.79,1717,2.76,1718,2.76,1719,2.76,1720,2.76,1721,2.76,1722,2.76,1723,2.76,1724,2.76,1725,2.76,1726,2.76,1727,2.76,1728,2.76,1729,2.76,1730,2.76,1731,2.76,1732,3.939,1733,2.76,1734,2.76,1735,3.939,1736,2.76,1737,2.76,1738,2.76,1739,2.76,1740,2.76,1741,2.76,1742,2.76,1743,2.76,1744,2.76,1745,2.76,1746,2.76,1747,5.01,1748,2.946,1749,3.25,1750,3.939,1751,3.939,1752,3.939,1753,3.939,1754,2.76,1755,1.917,1756,2.76,1757,2.241,1758,2.064,1759,2.76,1760,1.68,1761,2.76,1762,2.76,1763,2.76,1764,2.76,1765,2.76,1766,3.939,1767,2.76,1768,2.76,1769,2.76,1770,2.76,1771,3.939,1772,2.76,1773,3.939,1774,3.939,1775,2.76,1776,2.76,1777,2.76,1778,2.76,1779,3.939,1780,2.76,1781,5.01,1782,2.76,1783,4.583,1784,4.583,1785,3.211,1786,3.211,1787,3.211,1788,3.211,1789,3.211,1790,3.211,1791,3.211,1792,3.211,1793,3.211,1794,3.211,1795,3.211,1796,3.211,1797,3.211,1798,3.211,1799,3.211,1800,3.211,1801,3.211,1802,3.211,1803,3.211,1804,3.211,1805,3.211,1806,3.211,1807,3.211,1808,2.76,1809,3.211]],["title/modules/FinanceModule.html",[975,1.198,1810,2.575]],["body/modules/FinanceModule.html",[3,0.185,4,0.185,5,0.185,31,0.019,33,0.294,46,0.857,59,0.215,130,0.097,178,0.013,321,0.013,322,0.016,365,1.717,375,1.418,610,0.905,646,1.801,676,3.22,677,2.884,679,3.22,975,1.801,976,4.449,977,2.442,978,2.442,979,3.436,980,2.733,981,3.436,985,2.128,986,2.197,988,3.429,989,3.429,990,2.903,994,3.429,995,1.288,998,4.213,1001,3.429,1055,4.213,1056,2.903,1057,4.77,1058,3.312,1810,5.387,1811,4.77,1812,4.77,1813,5.549,1814,4.77,1815,5.549,1816,4.257,1817,4.257,1818,5.549]],["title/modules/FusionChartsModule.html",[975,1.198,1819,2.575]],["body/modules/FusionChartsModule.html",[3,0.184,4,0.184,5,0.184,31,0.019,33,0.299,59,0.215,130,0.096,178,0.013,238,0.72,321,0.013,322,0.016,365,1.712,375,1.414,610,0.902,646,1.796,672,3.395,673,2.573,720,2.462,747,2.082,748,2.082,761,2.191,764,3.862,975,1.796,977,2.879,978,2.435,979,3.431,980,2.726,981,3.431,985,2.124,986,2.191,988,3.423,989,3.423,990,2.895,994,3.423,995,1.284,996,4.206,997,2.308,1001,2.895,1055,4.206,1056,2.895,1103,3.423,1653,3.862,1819,5.291,1820,4.756,1821,4.756,1822,4.756,1823,5.533,1824,6.543,1825,6.188,1826,4.756,1827,5.533,1828,6.543,1829,5.533,1830,6.543,1831,5.533,1832,5.533,1833,5.533,1834,5.533]],["title/modules/GoogleMapsModule.html",[975,1.198,1835,2.575]],["body/modules/GoogleMapsModule.html",[3,0.189,4,0.189,5,0.189,31,0.019,33,0.295,46,0.875,59,0.22,130,0.099,178,0.014,321,0.014,322,0.016,365,1.753,375,1.448,610,0.924,646,1.839,674,3.227,975,1.839,977,2.493,978,2.493,979,3.465,980,2.79,981,3.465,985,2.154,986,2.243,988,3.471,989,3.471,990,2.964,994,3.471,995,1.315,996,4.264,997,2.363,998,4.264,1001,2.964,1656,2.363,1835,5.275,1836,4.87,1837,4.87,1838,4.87,1839,5.665,1840,5.702,1841,6.634,1842,4.346,1843,5.665]],["title/interfaces/HeatmapItem.html",[0,0.157,734,2.575]],["body/interfaces/HeatmapItem.html",[0,0.179,2,0.683,3,0.14,4,0.14,5,0.14,19,0.799,21,0.26,22,0.517,23,0.85,29,0.779,30,0.43,31,0.019,32,0.802,33,0.213,57,1.547,59,0.213,67,0.948,68,0.953,70,0.73,92,1.297,101,0.555,103,2.193,107,1.406,112,2.694,116,1.003,118,1.666,123,1.001,130,0.073,137,0.721,152,0.899,178,0.01,183,1.748,197,1.123,207,0.546,221,1.904,232,0.633,242,1.949,261,1.178,262,1.875,284,1.748,297,2.198,306,1.178,321,0.01,322,0.013,353,2.454,368,2.337,378,0.927,390,1.844,405,1.748,418,1.297,440,1.021,487,1.236,489,1.875,526,2.702,566,0.804,569,1.66,575,1.406,576,1.021,577,1.021,579,1.5,581,1.969,582,1.9,583,1.428,588,1.297,594,1.071,599,2.562,609,1.822,610,0.683,619,1.5,631,1.577,633,1.021,647,1.577,661,1.66,664,2.295,687,3.215,688,3.067,689,1.577,690,3.603,691,3.603,692,3.603,693,3.067,694,3.067,695,3.603,696,2.337,697,2.337,698,2.337,699,2.337,700,2.337,701,2.337,703,4.052,704,2.337,705,4.007,706,2.337,707,4.729,709,3.067,713,3.603,714,4.729,715,2.337,716,3.603,717,1.66,718,4.729,719,4.729,720,1.577,721,4.729,723,3.603,724,3.603,726,3.032,728,2.337,730,3.603,732,3.603,734,4.851,736,2.337,737,2.421,740,2.178,741,1.844,742,4.711,743,1.748,747,2.07,748,1.577,750,2.925,753,2.198,756,3.603,758,3.284,759,3.603,760,3.067,761,2.178,762,3.603,763,4.729,764,2.925,765,3.603,766,3.025,767,2.193,768,3.058,769,2.337,770,3.603,771,3.603,772,4.729,776,3.603,777,1.5,780,2.558,784,3.603,785,3.603,786,2.178,787,3.603,789,3.603,790,2.694,791,2.193,792,4.729,811,5.002,813,3.067,817,2.198,818,2.558,819,2.869,820,3.603,821,3.603,822,1.949,823,3.603,824,1.844,825,2.71,826,1.949,827,2.07,828,2.337,829,2.337,830,2.178,831,2.694,832,1.428,833,3.284,834,3.603,835,3.603,836,4.729,837,4.729,838,3.603,839,3.603,840,3.603,841,3.603,842,3.603,843,3.603,844,3.603,845,3.603,846,3.603,847,2.337,848,3.603,849,3.067,850,3.424,851,2.337,852,2.337,853,2.337,854,3.603,855,2.337,856,2.337,857,2.337,858,3.603,859,3.603,860,3.603,861,2.337,862,2.064,863,2.337,864,3.603,865,2.694,866,2.337,867,2.694,868,2.337,869,2.337,870,2.337,871,2.337,872,2.337,873,3.603,874,2.694,875,2.502,876,3.603,877,3.603,878,3.603,879,3.603,880,3.536,881,3.603,882,3.603,883,3.603,884,3.603,885,3.603,886,3.603,887,3.603,888,1.475,889,3.067,890,3.603,891,3.603,892,2.694,893,3.215,894,3.603,895,3.603,896,2.694,897,2.502,898,4.729,899,4.729,900,2.295,901,4.729,902,3.603,903,3.603,904,2.337,905,3.603,906,3.603,907,2.337,908,1.844,909,2.878,910,2.337,911,2.337,912,3.067,913,3.067,914,3.067,915,2.337,916,2.337,917,1.236,918,2.337,919,2.337,920,3.603,921,3.603,922,5.279,923,4.729,924,4.729,925,3.603,926,3.215,927,3.603,928,3.603,929,3.603,930,3.603]],["title/components/MapComponent.html",[566,0.539,674,1.539]],["body/components/MapComponent.html",[3,0.221,4,0.12,5,0.12,12,1.065,13,1.23,21,0.224,22,0.467,23,1.053,29,0.573,30,0.463,31,0.019,33,0.269,36,0.879,37,0.621,38,0.528,39,0.589,45,1.343,46,0.558,48,1.589,49,0.838,50,0.589,59,0.14,61,1.399,67,0.558,68,0.972,69,0.879,71,2.97,92,1.539,96,0.649,101,0.574,108,0.687,115,1.112,116,0.847,130,0.063,137,0.855,138,1.276,143,1.292,149,1.589,152,0.789,178,0.017,182,3.473,207,0.47,232,0.416,238,0.47,261,1.015,263,1.048,281,1.322,289,1.334,290,1.506,291,1.399,295,1.271,306,1.399,321,0.012,322,0.012,326,2.309,331,1.048,337,1.615,351,2.596,353,2.422,370,0.94,371,1.645,384,2.278,407,2.321,412,1.117,418,1.539,420,1.809,440,1.212,566,0.832,567,1.506,568,2.451,569,1.43,570,1.872,571,1.43,572,1.889,575,1.455,576,1.826,577,1.826,582,1.117,588,1.991,594,1.271,596,3.023,599,2.075,600,2.314,609,1.661,610,0.589,628,1.696,646,1.172,647,1.872,648,2.19,649,1.889,650,3.21,651,1.889,655,2.603,656,1.589,657,2.089,658,2.603,659,1.292,660,2.979,661,1.43,662,1.43,663,1.589,664,1.506,665,1.889,666,1.359,667,1.506,668,1.889,669,1.43,670,1.155,671,2.979,672,1.589,673,1.679,674,2.56,675,1.889,676,1.506,677,2.19,678,1.889,679,1.506,680,1.506,681,1.889,682,1.359,683,1.506,684,1.117,685,1.889,686,1.889,722,3.817,747,2.309,748,2.309,753,2.038,769,2.774,777,1.292,780,2.854,786,2.825,817,1.781,819,1.589,822,2.314,826,1.679,917,1.065,950,2.979,1066,5.719,1074,3.473,1096,1.848,1146,1.172,1166,1.539,1205,3.198,1206,3.473,1207,2.52,1366,2.433,1476,2.403,1477,1.292,1480,2.554,1504,1.589,1540,1.172,1581,2.603,1584,1.97,1654,3.978,1655,2.648,1656,1.506,1668,2.648,1671,1.679,1672,1.43,1673,1.679,1674,1.679,1675,1.679,1676,1.679,1677,1.679,1678,1.679,1698,1.679,1709,2.769,1808,3.103,1842,2.769,1844,3.103,1845,4.976,1846,4.976,1847,6.946,1848,5.694,1849,5.694,1850,5.694,1851,5.694,1852,5.694,1853,6.136,1854,4.976,1855,4.976,1856,4.976,1857,5.694,1858,5.694,1859,4.894,1860,3.61,1861,4.976,1862,4.976,1863,3.61,1864,4.976,1865,6.436,1866,3.61,1867,6.136,1868,6.136,1869,6.436,1870,3.61,1871,3.61,1872,4.277,1873,4.976,1874,3.61,1875,3.61,1876,4.976,1877,3.61,1878,4.976,1879,4.976,1880,3.61,1881,3.61,1882,4.976,1883,6.436,1884,3.61,1885,4.976,1886,3.61,1887,4.976,1888,6.136,1889,6.653,1890,3.61,1891,3.61,1892,4.976,1893,3.61,1894,3.61,1895,3.61,1896,3.61,1897,4.976,1898,3.61,1899,4.976,1900,4.976,1901,3.61,1902,4.976,1903,4.976,1904,3.61,1905,4.894,1906,6.136,1907,3.61,1908,3.61,1909,3.817,1910,3.61,1911,3.473,1912,3.61,1913,2.603,1914,1.889,1915,3.61,1916,3.61,1917,2.321,1918,4.976,1919,3.61,1920,3.61,1921,3.61,1922,4.976,1923,3.61,1924,3.61,1925,3.61,1926,3.61,1927,4.976,1928,3.61,1929,3.61,1930,5.694,1931,3.61,1932,3.61,1933,3.61,1934,3.61,1935,4.976,1936,5.694,1937,4.976,1938,4.976,1939,3.103,1940,3.61,1941,4.976,1942,6.136,1943,3.61,1944,4.976,1945,3.61,1946,3.61,1947,3.61,1948,3.61,1949,4.976,1950,3.61,1951,3.61,1952,3.61,1953,3.61,1954,3.61]],["title/interfaces/MoneyCloudDatum.html",[0,0.157,1955,2.83]],["body/interfaces/MoneyCloudDatum.html",[0,0.158,2,0.604,3,0.123,4,0.123,5,0.123,18,1.938,19,0.706,21,0.23,22,0.476,29,0.426,30,0.415,31,0.019,32,0.787,33,0.271,34,1.494,35,2.356,36,0.903,37,0.637,45,1.278,46,0.572,48,1.63,49,0.86,50,0.604,57,1.042,59,0.196,61,1.042,67,0.891,68,1.058,70,0.546,96,0.323,101,0.582,107,0.947,108,0.856,109,0.76,116,1.025,118,1.585,130,0.065,132,2.382,137,0.637,138,1.176,139,1.744,152,0.921,163,1.63,174,1.546,178,0.015,207,0.659,220,1.938,224,1.938,232,0.664,253,3.459,272,1.467,281,1.34,289,0.993,291,1.042,295,0.947,321,0.009,322,0.012,370,0.541,378,0.819,405,1.546,440,0.903,473,1.723,487,1.093,526,1.63,566,0.74,571,2.006,575,0.947,576,0.903,577,0.903,579,1.326,581,1.813,582,1.785,583,1.263,588,1.146,590,2.586,594,0.947,609,1.763,610,0.604,633,1.406,647,1.394,676,1.546,677,3.076,688,2.066,689,1.394,693,2.066,694,2.066,696,2.066,697,2.066,698,2.066,699,2.066,700,2.066,701,2.066,703,3.622,704,2.824,705,3.459,706,2.824,709,2.824,717,1.467,720,1.394,726,3.021,728,2.066,737,1.63,741,1.63,743,1.546,747,1.906,748,1.394,760,2.824,766,3.2,768,2.229,791,1.938,809,2.212,811,3.885,813,2.824,818,1.723,827,2.172,828,2.066,829,2.066,830,2.006,832,1.263,833,3.023,847,2.066,849,2.824,850,3.218,851,2.066,852,2.066,853,2.066,855,2.066,856,2.066,857,2.066,863,3.218,868,2.066,869,2.066,870,2.066,871,2.066,872,2.066,888,1.358,889,3.218,900,2.113,904,3.218,907,2.066,908,1.63,909,2.65,910,2.066,911,2.066,912,2.824,913,2.824,914,2.824,915,2.066,916,2.066,917,1.093,918,2.066,919,2.066,966,3.185,969,1.723,997,1.546,1024,2.586,1096,1.644,1121,2.65,1125,2.65,1143,1.294,1146,1.203,1227,1.825,1235,2.65,1329,1.938,1355,2.113,1366,1.644,1406,2.382,1432,3.023,1433,2.212,1476,1.967,1477,1.326,1480,2.066,1506,1.467,1510,1.326,1540,1.203,1584,1.467,1652,3.218,1655,2.356,1656,1.546,1668,1.723,1671,1.723,1672,1.467,1673,1.723,1674,1.723,1675,1.723,1676,1.723,1677,1.723,1678,1.723,1695,1.938,1749,2.066,1757,2.586,1760,1.938,1817,2.842,1913,1.938,1914,2.65,1955,5.266,1956,2.842,1957,3.185,1958,6.496,1959,5.765,1960,5.584,1961,2.495,1962,4.961,1963,5.065,1964,5.065,1965,3.705,1966,3.705,1967,3.185,1968,4.961,1969,2.842,1970,3.705,1971,3.705,1972,3.185,1973,3.705,1974,3.705,1975,3.185,1976,3.185,1977,3.705,1978,1.825,1979,2.495,1980,1.63,1981,1.825,1982,3.705,1983,3.705,1984,3.256,1985,3.705,1986,3.535,1987,4.354,1988,2.382,1989,2.382,1990,3.023,1991,3.185,1992,4.354,1993,3.256,1994,3.185,1995,3.185,1996,3.185,1997,1.825,1998,3.705,1999,5.065,2000,2.212,2001,2.382,2002,2.382,2003,2.382,2004,3.71,2005,5.065,2006,4.354,2007,2.382,2008,3.185,2009,3.185,2010,3.185,2011,3.185,2012,2.382,2013,2.382,2014,2.382,2015,3.256,2016,2.382,2017,2.382,2018,3.256,2019,2.382,2020,3.185,2021,2.382,2022,2.382,2023,2.382,2024,2.382,2025,3.256,2026,2.382,2027,2.382,2028,2.382,2029,2.382,2030,2.382,2031,2.382,2032,2.382,2033,2.382,2034,2.382,2035,2.212,2036,2.842,2037,3.185,2038,2.382,2039,2.842,2040,3.185,2041,3.185,2042,3.185,2043,3.185,2044,3.705,2045,3.185,2046,4.961,2047,3.705,2048,3.185,2049,3.185,2050,3.705,2051,5.065,2052,3.705,2053,3.705,2054,3.185,2055,3.185,2056,3.185,2057,3.185,2058,3.705,2059,3.705,2060,3.705,2061,3.705,2062,3.705,2063,3.705,2064,3.185,2065,3.705,2066,2.382,2067,3.185,2068,3.185,2069,3.185,2070,3.705,2071,3.185,2072,3.185,2073,3.185,2074,3.705,2075,3.705,2076,3.705,2077,3.705,2078,3.185,2079,3.185,2080,3.185,2081,3.705,2082,3.705,2083,2.586,2084,3.705,2085,3.705,2086,3.705,2087,3.705,2088,3.705,2089,2.382,2090,3.256,2091,2.382,2092,3.185,2093,3.185,2094,2.382,2095,2.382,2096,2.382,2097,3.185,2098,2.382,2099,2.382,2100,2.382,2101,2.382,2102,2.382,2103,2.382,2104,2.382,2105,2.382,2106,2.382,2107,2.382,2108,2.382,2109,3.705,2110,2.382,2111,3.185,2112,2.382,2113,2.382,2114,2.382,2115,2.382,2116,2.382,2117,2.382,2118,3.185,2119,3.705,2120,3.185,2121,2.212,2122,2.066,2123,3.185,2124,3.705,2125,3.705,2126,3.185,2127,3.185,2128,2.382]],["title/interfaces/MoneyDatum.html",[0,0.157,2129,2.83]],["body/interfaces/MoneyDatum.html",[0,0.153,2,0.586,3,0.12,4,0.12,5,0.12,18,1.882,19,0.685,21,0.223,22,0.466,25,1.882,29,0.414,30,0.412,31,0.019,32,0.735,33,0.273,34,1.463,36,0.876,37,0.618,45,1.266,46,0.555,48,1.583,49,1.152,50,0.926,51,0.757,57,1.011,59,0.192,61,1.011,67,0.878,68,0.939,69,0.876,70,0.693,96,0.314,100,1.061,101,0.573,108,0.94,109,0.788,116,1.009,118,1.643,123,0.926,130,0.063,132,2.312,137,0.618,138,1.029,139,1.722,147,2.005,152,0.911,163,1.583,174,1.5,178,0.016,207,0.468,221,1.011,224,1.882,232,0.571,242,1.673,253,2.005,263,1.045,272,1.424,281,1.319,289,0.964,291,1.011,295,0.919,306,1.011,321,0.009,322,0.012,370,0.526,378,0.795,384,2.246,405,1.5,412,1.113,440,0.876,487,1.061,566,0.83,571,1.965,575,0.919,576,0.876,577,0.876,579,1.288,581,1.777,582,1.758,583,1.226,588,1.113,594,0.919,609,1.769,610,0.586,633,1.492,647,1.353,677,3.195,679,1.5,684,1.535,688,2.005,689,1.353,693,2.005,694,2.005,696,2.005,697,2.005,698,2.005,699,2.005,700,2.005,701,2.005,703,3.584,704,2.767,705,3.416,706,2.767,709,2.767,717,1.424,720,1.353,726,2.989,728,2.005,736,2.005,737,1.583,741,1.583,743,1.5,747,1.868,748,1.353,750,2.51,753,1.777,760,2.767,761,1.424,766,3.166,768,2.184,791,1.882,809,2.147,813,2.767,817,1.777,818,1.673,827,2.138,828,2.005,829,2.005,830,2.545,832,1.226,833,2.962,847,2.005,849,2.005,850,3.168,851,2.005,852,2.005,853,2.005,855,2.005,856,2.005,857,2.005,863,3.168,868,2.005,869,2.005,870,2.005,871,2.005,872,2.005,888,1.523,889,3.416,900,2.37,904,3.168,907,2.005,908,1.583,909,2.596,910,2.005,911,2.005,912,2.767,913,2.767,914,2.767,915,2.005,916,2.005,917,1.061,918,2.005,919,2.005,942,2.005,969,1.673,1024,2.51,1096,1.611,1121,2.596,1125,2.596,1146,1.168,1227,1.772,1235,2.596,1329,1.882,1355,2.07,1366,1.168,1406,2.312,1432,2.962,1433,2.962,1460,3.091,1476,1.937,1477,1.288,1480,2.034,1506,1.424,1510,1.288,1540,1.168,1584,1.424,1655,2.308,1656,1.5,1668,1.673,1671,1.673,1672,1.965,1673,1.673,1674,1.673,1675,1.673,1676,1.673,1677,1.673,1678,1.673,1695,1.882,1716,2.005,1749,2.005,1757,2.51,1760,1.882,1816,2.759,1859,3.091,1913,1.882,1914,2.596,1956,2.759,1959,5.525,1960,5.525,1961,2.444,1962,4.884,1967,3.091,1968,4.884,1969,2.759,1972,3.091,1975,3.091,1976,3.091,1978,1.772,1979,2.444,1980,1.583,1981,1.772,1984,2.312,1987,4.266,1988,2.312,1989,2.312,1990,2.962,1991,3.091,1992,4.266,1993,3.19,1994,3.091,1995,3.091,1996,3.091,1997,1.772,2000,2.147,2001,2.312,2002,2.312,2003,2.312,2004,3.19,2006,4.266,2007,2.312,2008,3.091,2009,3.091,2010,3.091,2011,3.091,2012,2.312,2013,2.312,2014,2.312,2015,3.19,2016,2.312,2017,2.312,2018,3.19,2019,2.312,2020,3.091,2021,2.312,2022,2.312,2023,2.312,2024,2.312,2025,3.19,2026,2.312,2027,2.312,2028,2.312,2029,2.312,2030,2.312,2031,2.312,2032,2.312,2033,2.312,2034,2.312,2035,2.147,2036,2.759,2037,3.091,2038,2.312,2039,2.759,2040,3.091,2041,3.091,2042,3.091,2043,3.091,2045,3.091,2046,5.712,2048,3.091,2049,3.091,2054,3.091,2055,3.091,2056,3.091,2057,4.266,2064,3.091,2066,2.312,2067,3.091,2068,4.266,2069,3.091,2071,3.091,2072,3.091,2073,3.091,2078,3.091,2079,3.091,2080,3.091,2089,2.312,2090,3.19,2091,2.312,2092,3.091,2093,3.091,2094,2.312,2095,2.312,2096,2.312,2097,3.091,2098,2.312,2099,2.312,2100,2.312,2101,2.312,2102,2.312,2103,2.312,2104,2.312,2105,2.312,2106,2.312,2107,2.312,2108,2.312,2110,2.312,2111,3.091,2112,2.312,2113,2.312,2114,2.312,2115,2.312,2116,3.19,2117,2.312,2118,3.091,2120,3.091,2121,2.147,2122,2.005,2123,3.091,2126,3.091,2127,3.091,2128,2.312,2129,5.323,2130,2.005,2131,3.227,2132,1.882,2133,1.882,2134,4.963,2135,3.597,2136,3.091,2137,2.51,2138,2.51,2139,2.51,2140,2.51,2141,2.51,2142,3.597,2143,3.597,2144,2.51,2145,3.597,2146,3.597,2147,3.597,2148,3.597,2149,3.597,2150,3.597,2151,3.597,2152,3.597,2153,3.597,2154,3.597,2155,3.597,2156,2.51,2157,3.597,2158,2.51,2159,2.51,2160,3.597,2161,2.51,2162,3.597,2163,3.597,2164,3.464,2165,2.51,2166,3.966,2167,3.597,2168,3.091,2169,1.882,2170,3.597,2171,3.597,2172,3.597,2173,3.597,2174,3.597,2175,2.51,2176,3.597,2177,3.597,2178,3.597]],["title/interfaces/NetworkContext.html",[0,0.157,42,1.141]],["body/interfaces/NetworkContext.html",[0,0.285,2,0.503,3,0.103,4,0.103,5,0.103,12,1.313,14,1.675,15,1.357,19,0.995,21,0.354,22,0.594,23,0.476,26,1.104,29,0.728,30,0.448,31,0.019,32,0.825,33,0.259,34,0.909,37,0.898,38,1.135,39,1.251,40,1.54,41,1.626,42,1.956,43,1.342,45,1.242,46,0.476,49,0.716,50,0.726,51,0.649,54,1.94,57,0.867,59,0.253,62,1.16,68,0.763,69,1.273,70,0.682,74,1.857,80,1.966,85,1.313,92,1.616,94,1.878,95,1.965,96,0.602,99,1.16,100,1.687,101,0.673,102,2.075,107,0.788,108,0.79,109,0.88,111,0.867,115,0.726,116,0.721,118,1.665,122,1.4,123,0.503,130,0.054,134,1.09,135,1.594,138,1.331,143,1.431,145,2.185,148,1.377,152,0.701,178,0.007,207,0.401,215,1.286,218,1.696,232,0.601,238,0.401,244,1.54,247,1.16,248,1.286,250,2.263,261,1.251,262,2.068,263,0.937,264,1.549,267,0.954,273,1.445,274,2.07,286,1.104,307,0.954,311,1.857,316,1.193,321,0.007,322,0.011,330,1.313,331,0.649,334,1.517,337,1.445,343,1.519,344,0.954,348,2.048,351,1.051,353,1.16,369,1.966,370,0.924,371,1.137,375,1.137,378,1.265,387,0.954,394,1.519,397,2.993,398,1.763,400,2.153,403,2.531,407,2.861,409,1.519,412,0.954,414,1.377,417,2.818,418,0.954,420,1.864,423,2.265,427,1.519,430,1.519,457,0.716,472,1.533,484,2.637,487,1.313,491,2.299,493,2.329,501,2.193,522,1.613,528,2.637,619,1.594,621,2.517,628,1.517,637,2.329,645,1.613,670,0.716,826,2.07,827,1.16,832,2.221,888,1.4,917,0.909,995,0.716,1018,2.193,1020,2.193,1021,1.519,1098,2.274,1115,1.434,1143,0.788,1152,1.434,1166,1.77,1189,1.434,1245,1.286,1248,1.221,1296,1.434,1297,1.434,1300,2.07,1305,1.434,1320,1.434,1349,1.519,1363,2.07,1366,1.857,1374,1.434,1384,1.16,1431,1.857,1436,2.329,1469,2.193,1470,1.613,1471,1.719,1472,1.719,1473,1.966,1474,2.511,1475,1.613,1476,2.274,1477,1.104,1478,2.993,1479,2.511,1480,2.388,1481,1.857,1482,2.193,1483,1.719,1484,2.482,1485,1.594,1486,1.719,1487,1.719,1488,1.719,1489,2.482,1490,1.719,1491,3.383,1492,1.719,1493,2.299,1494,2.482,1495,1.719,1496,1.719,1497,1.719,1498,1.719,1499,1.613,1500,1.719,1501,1.719,1502,1.719,1503,1.719,1504,1.959,1505,1.613,1506,1.763,1507,1.719,1508,1.719,1509,1.519,1510,1.594,1511,2.193,1512,2.482,1513,2.482,1514,2.329,1515,1.719,1516,1.719,1517,2.482,1518,1.719,1519,1.719,1520,1.719,1521,1.719,1522,1.719,1523,1.719,1524,1.719,1525,1.719,1526,1.719,1527,1.719,1528,1.719,1529,1.719,1530,1.719,1531,1.719,1532,1.719,1533,1.719,1534,2.482,1535,2.482,1536,1.719,1537,1.719,1538,1.719,1539,1.719,1540,1.001,1541,1.719,1542,1.719,1543,1.719,1544,1.719,1545,1.719,1546,2.482,1547,1.719,1548,1.719,1549,1.719,1550,1.719,1551,2.482,1552,1.719,1553,1.719,1554,1.719,1555,1.719,1556,2.482,1557,2.482,1558,1.719,1559,1.719,1560,1.719,1561,1.719,1562,1.719,1563,2.482,1564,1.719,1565,1.719,1566,1.719,1567,1.719,1568,1.719,1569,3.19,1570,1.719,1571,1.719,1572,1.719,1573,1.719,1574,1.719,1575,1.719,1576,1.719,1577,1.719,1578,1.719,1579,1.719,1580,1.719,1581,1.613,1582,2.482,1583,1.719,1584,1.763,1585,1.719,1586,1.719,1587,2.482,1588,2.07,1589,1.719,1590,2.482,1591,1.719,1592,1.719,1593,1.719,1594,2.482,1595,1.719,1596,2.482,1597,1.719,1598,2.482,1599,2.482,1600,1.719,1601,1.719,1602,1.719,1603,1.719,1604,1.719,1605,1.719,1606,1.719,1607,2.482,1608,1.719,1609,1.719,1610,2.482,1611,1.719,1612,1.719,1613,1.719,1614,1.719,1615,1.719,1616,1.719,1617,1.719,1618,1.719,1619,2.482,1620,1.719,1621,1.719,1622,1.719,1623,1.719,1624,1.719,1625,1.719,1626,1.719,1627,1.719,1628,1.719,1629,1.719,1630,1.719,1631,1.719,1632,1.719,1633,1.719,1634,1.719,1635,1.719,1636,1.719,1637,1.719,1638,1.719,1639,2.482,1640,1.719,1641,1.719,1642,1.719,1643,1.719,1644,1.719,1645,1.719,1646,1.719,1647,1.719,2179,3.083]],["title/classes/NetworkDataset.html",[41,0.989,130,0.064]],["body/classes/NetworkDataset.html",[0,0.275,3,0.09,4,0.09,5,0.09,12,1.195,14,1.525,15,1.194,19,0.924,21,0.333,22,0.567,23,1.063,26,0.971,29,0.771,30,0.447,31,0.019,32,0.832,33,0.25,34,0.8,37,0.697,38,1.135,39,1.249,40,1.43,41,1.763,42,1.781,43,1.19,45,1.193,46,0.419,49,0.63,50,0.661,51,0.571,54,1.883,57,0.763,59,0.243,62,1.021,68,0.709,69,1.182,70,0.621,74,2.023,80,2.025,85,1.587,92,1.501,94,1.907,95,1.911,96,0.626,99,1.021,100,1.587,101,0.649,102,2.093,107,1.036,108,0.834,109,0.861,111,0.763,115,0.791,116,0.67,118,1.644,122,1.543,123,0.442,130,0.047,134,1.151,135,1.451,138,1.399,143,1.491,145,2.175,152,0.659,178,0.007,207,0.353,215,1.132,218,1.575,232,0.558,238,0.528,244,1.43,247,1.021,248,1.132,250,2.162,261,1.139,262,1.962,263,0.853,264,1.598,267,0.839,273,1.316,274,2.256,286,0.971,307,0.839,311,1.747,316,1.442,321,0.007,322,0.01,324,1.894,330,1.43,331,0.571,334,1.381,337,1.316,343,1.337,344,0.839,348,1.926,351,2.474,353,2.591,369,1.825,370,1.093,371,1.6,375,1.036,378,1.073,387,0.839,394,1.337,397,2.815,398,1.921,400,2.356,403,2.52,407,1.744,409,1.337,412,0.839,414,1.254,417,2.975,418,0.839,420,1.781,423,2.131,427,1.337,430,1.337,457,0.63,472,1.795,484,2.744,487,1.195,491,2.135,493,2.12,501,1.996,522,1.42,528,2.52,619,1.451,621,1.194,628,1.381,637,2.12,645,1.42,670,0.63,826,1.262,827,1.021,832,2.133,888,1.543,917,0.8,995,0.63,1018,1.996,1020,1.996,1021,1.337,1098,1.653,1115,1.262,1143,0.693,1152,1.262,1166,1.936,1189,1.885,1245,1.132,1248,1.074,1296,1.262,1297,1.262,1300,1.885,1305,1.262,1320,1.262,1349,1.337,1363,1.885,1366,1.747,1374,1.262,1384,1.021,1431,1.691,1436,2.12,1469,3.592,1470,1.42,1471,1.513,1472,1.513,1473,1.825,1474,2.475,1475,1.42,1476,1.653,1477,0.971,1478,2.12,1479,1.825,1480,1.737,1481,1.691,1482,1.996,1483,1.513,1484,2.705,1485,1.451,1486,1.513,1487,1.513,1488,1.513,1489,2.705,1490,1.513,1491,3.21,1492,1.513,1493,2.368,1494,2.26,1495,1.513,1496,1.513,1497,1.513,1498,1.513,1499,1.42,1500,1.513,1501,1.513,1502,1.513,1503,1.513,1504,2.135,1505,1.42,1506,1.605,1507,1.513,1508,1.513,1509,1.337,1510,0.971,1511,1.337,1512,1.513,1513,1.513,1514,1.42,1515,1.513,1516,1.513,1517,3,1518,2.26,1519,1.513,1520,2.26,1521,1.513,1522,2.26,1523,1.513,1524,2.26,1525,1.513,1526,3,1527,1.513,1528,3,1529,1.513,1530,3,1531,1.513,1532,1.513,1533,3,1534,2.26,1535,3.21,1536,3,1537,1.513,1538,3,1539,1.513,1540,1.747,1541,1.513,1542,1.513,1543,2.26,1544,1.513,1545,1.513,1546,2.26,1547,1.513,1548,2.26,1549,1.513,1550,1.513,1551,2.26,1552,1.513,1553,1.513,1554,2.705,1555,1.513,1556,2.26,1557,2.26,1558,1.513,1559,1.513,1560,2.26,1561,1.513,1562,1.513,1563,3.21,1564,2.26,1565,2.26,1566,2.26,1567,1.513,1568,1.513,1569,3.49,1570,1.513,1571,1.513,1572,1.513,1573,1.513,1574,1.513,1575,2.26,1576,2.26,1577,2.26,1578,2.26,1579,1.513,1580,1.513,1581,2.12,1582,2.705,1583,2.26,1584,2.131,1585,2.26,1586,2.26,1587,2.26,1588,1.885,1589,1.513,1590,2.26,1591,1.513,1592,1.513,1593,1.513,1594,2.26,1595,1.513,1596,2.26,1597,1.513,1598,2.26,1599,2.26,1600,1.513,1601,1.513,1602,1.513,1603,1.513,1604,1.513,1605,1.513,1606,1.513,1607,2.26,1608,1.513,1609,1.513,1610,2.26,1611,1.513,1612,1.513,1613,1.513,1614,1.513,1615,1.513,1616,1.513,1617,1.513,1618,1.513,1619,2.26,1620,1.513,1621,1.513,1622,1.513,1623,1.513,1624,1.513,1625,1.513,1626,2.26,1627,2.26,1628,1.513,1629,1.513,1630,1.513,1631,1.513,1632,1.513,1633,1.513,1634,1.513,1635,1.513,1636,1.513,1637,1.513,1638,1.513,1639,2.26,1640,1.513,1641,1.513,1642,1.513,1643,1.513,1644,1.513,1645,1.513,1646,1.513,1647,1.513,2180,4.053,2181,4.053,2182,4.053,2183,4.053,2184,4.053,2185,4.053,2186,4.053,2187,4.053,2188,4.053,2189,4.053,2190,2.714,2191,2.714,2192,2.714,2193,2.714,2194,2.714,2195,2.714,2196,2.714,2197,2.714,2198,2.714,2199,2.714,2200,2.714,2201,2.714,2202,2.714,2203,2.714,2204,2.714,2205,2.714,2206,2.714,2207,2.714,2208,2.714]],["title/modules/NetworkModule.html",[975,1.198,2209,2.575]],["body/modules/NetworkModule.html",[3,0.23,4,0.18,5,0.18,31,0.019,33,0.298,38,0.791,39,0.883,46,0.836,59,0.21,130,0.094,178,0.013,321,0.013,322,0.016,365,1.675,375,1.384,567,3.21,610,0.883,646,1.758,662,3.047,670,1.257,680,3.21,975,1.758,977,2.383,978,2.383,979,3.4,980,2.667,981,3.4,985,2.097,986,2.144,988,3.379,989,3.379,990,2.833,991,4.955,992,4.955,993,3.78,994,3.379,995,1.257,998,4.152,1001,2.833,1055,4.152,1056,2.833,1474,2.038,1656,2.259,1840,5.552,2209,5.388,2210,4.655,2211,4.655,2212,4.655,2213,5.415,2214,6.459,2215,5.415,2216,5.552,2217,5.415,2218,6.459]],["title/interfaces/NetworkProvider.html",[0,0.157,244,1.088]],["body/interfaces/NetworkProvider.html",[0,0.28,2,0.471,3,0.096,4,0.096,5,0.096,12,1.252,14,1.598,15,1.272,19,0.959,21,0.344,22,0.581,23,0.987,26,1.035,29,0.754,30,0.449,31,0.019,32,0.821,33,0.254,34,0.852,37,0.866,38,1.135,39,1.251,40,1.485,41,1.793,42,2.069,43,1.413,45,1.342,46,0.446,49,0.671,50,0.693,51,0.609,54,2.049,57,0.813,59,0.248,62,1.088,68,0.736,69,1.226,70,0.689,74,1.772,76,2.222,80,1.895,85,1.252,92,1.558,94,1.841,95,1.938,96,0.629,99,1.088,100,1.743,101,0.661,102,2.049,107,0.739,108,0.905,109,0.871,111,0.813,115,0.693,116,0.695,118,1.633,122,1.487,123,0.471,130,0.05,134,1.178,135,1.521,138,1.319,143,1.469,145,2.191,152,0.68,178,0.007,207,0.376,215,1.206,218,1.635,232,0.58,238,0.376,244,1.636,247,1.598,248,1.772,250,2.468,261,1.194,262,2.318,263,1.168,264,1.521,267,1.314,273,1.379,274,1.975,286,1.987,307,1.314,311,1.802,316,1.138,321,0.007,322,0.01,330,1.485,331,0.609,334,2.107,337,1.379,339,3.258,340,3.258,341,3.258,342,3.258,343,2.734,344,1.717,345,3.258,346,3.258,348,1.987,351,2.318,353,2.404,369,2.326,370,1.053,371,0.739,375,1.418,378,1.227,387,0.894,394,2.092,397,2.903,398,1.682,400,2.088,403,2.665,409,2.092,412,0.894,414,1.314,417,2.734,418,1.314,420,1.823,423,2.53,427,2.092,430,2.092,457,0.671,472,1.487,484,2.578,487,1.252,491,2.442,493,2.222,501,2.092,522,1.512,528,2.578,619,1.521,621,1.272,628,1.891,637,2.222,645,1.512,670,0.671,826,1.344,827,1.088,832,2.177,888,1.35,917,0.852,995,0.671,1018,2.092,1020,2.092,1021,1.424,1098,1.716,1115,1.975,1143,0.739,1152,1.975,1166,1.717,1189,1.344,1245,1.206,1248,1.145,1296,1.344,1297,1.344,1300,1.975,1305,1.344,1320,1.344,1349,1.424,1363,1.975,1366,1.802,1374,1.344,1384,1.088,1431,1.772,1436,2.903,1469,3.396,1470,1.512,1471,1.612,1472,1.612,1473,1.895,1474,2.517,1475,1.512,1476,1.716,1477,1.035,1478,2.222,1479,1.895,1480,1.802,1481,1.772,1482,2.092,1483,1.612,1484,2.368,1485,1.521,1486,1.612,1487,1.612,1488,1.612,1489,2.368,1490,1.612,1491,3.296,1492,1.612,1493,2.216,1494,2.368,1495,1.612,1496,2.368,1497,2.368,1498,2.368,1499,2.222,1500,2.368,1501,1.612,1502,1.612,1503,1.612,1504,2.216,1505,2.222,1506,2.197,1507,2.368,1508,2.368,1509,2.092,1510,1.035,1511,1.424,1512,1.612,1513,1.612,1514,1.512,1515,1.612,1516,1.612,1517,2.368,1518,1.612,1519,1.612,1520,1.612,1521,1.612,1522,1.612,1523,1.612,1524,1.612,1525,1.612,1526,1.612,1527,1.612,1528,1.612,1529,1.612,1530,1.612,1531,1.612,1532,1.612,1533,1.612,1534,2.368,1535,2.368,1536,1.612,1537,1.612,1538,1.612,1539,1.612,1540,0.938,1541,1.612,1542,1.612,1543,1.612,1544,1.612,1545,1.612,1546,2.368,1547,1.612,1548,1.612,1549,1.612,1550,1.612,1551,2.368,1552,1.612,1553,1.612,1554,1.612,1555,1.612,1556,2.368,1557,2.368,1558,1.612,1559,1.612,1560,1.612,1561,1.612,1562,1.612,1563,2.368,1564,1.612,1565,1.612,1566,1.612,1567,1.612,1568,1.612,1569,3.094,1570,1.612,1571,1.612,1572,1.612,1573,1.612,1574,1.612,1575,1.612,1576,1.612,1577,1.612,1578,1.612,1579,1.612,1580,1.612,1581,1.512,1582,2.368,1583,1.612,1584,1.682,1585,1.612,1586,1.612,1587,2.368,1588,1.975,1589,1.612,1590,2.368,1591,1.612,1592,1.612,1593,1.612,1594,2.368,1595,1.612,1596,2.368,1597,1.612,1598,2.368,1599,2.368,1600,1.612,1601,1.612,1602,1.612,1603,1.612,1604,1.612,1605,1.612,1606,1.612,1607,2.368,1608,1.612,1609,1.612,1610,2.368,1611,1.612,1612,1.612,1613,1.612,1614,1.612,1615,1.612,1616,1.612,1617,1.612,1618,1.612,1619,2.368,1620,1.612,1621,1.612,1622,1.612,1623,1.612,1624,1.612,1625,1.612,1626,1.612,1627,1.612,1628,1.612,1629,1.612,1630,1.612,1631,1.612,1632,1.612,1633,1.612,1634,1.612,1635,1.612,1636,1.612,1637,1.612,1638,1.612,1639,2.368,1640,1.612,1641,1.612,1642,1.612,1643,1.612,1644,1.612,1645,1.612,1646,1.612,1647,1.612,2219,2.891,2220,2.891,2221,2.891,2222,2.891,2223,2.891,2224,2.891,2225,2.891,2226,2.891,2227,2.891,2228,2.891]],["title/components/NgxChart.html",[566,0.539,682,1.388]],["body/components/NgxChart.html",[0,0.234,3,0.204,4,0.138,5,0.138,13,1.417,21,0.258,22,0.514,23,0.945,29,0.63,30,0.467,31,0.019,32,0.79,33,0.269,38,0.608,39,0.678,50,0.678,51,0.876,59,0.237,67,0.945,68,0.987,70,0.66,95,1.72,96,0.605,101,0.419,107,1.399,109,0.828,115,0.997,116,0.574,119,2.696,130,0.072,137,0.941,139,1.169,148,1.893,178,0.013,238,0.846,321,0.013,322,0.013,337,1.777,344,1.893,351,2.594,353,2.302,370,1.013,371,1.772,387,2.011,440,1.333,457,0.965,484,1.735,526,2.409,566,0.894,567,1.735,568,2.696,569,1.647,570,1.565,571,1.647,572,2.176,575,1.563,576,1.854,577,1.863,583,1.417,588,1.287,594,1.399,599,2.283,600,2.546,609,1.49,610,0.678,646,1.35,647,2.06,648,2.409,649,2.176,650,3.401,651,2.176,655,2.863,656,1.83,657,1.986,658,2.863,659,1.489,660,3.201,661,1.647,662,1.647,663,1.83,664,1.735,665,2.176,666,1.565,667,1.735,668,2.176,669,1.647,670,1.789,671,3.201,672,1.83,673,1.934,674,1.735,675,2.176,676,1.735,677,2.409,678,2.176,679,1.735,680,1.735,681,2.176,682,2.446,683,1.735,684,1.287,685,2.176,686,2.176,689,2.06,715,3.625,722,4.199,726,2.845,740,1.647,753,2.327,761,2.746,777,1.489,795,5.259,817,1.489,818,1.934,824,2.409,832,1.865,972,2.319,995,0.965,1056,2.176,1074,3.82,1092,3.625,1093,2.903,1094,3.933,1095,4.693,1096,2.11,1097,3.014,1098,2.363,1099,4.693,1100,4.693,1101,4.199,1102,2.674,1103,2.863,1104,5.423,1105,3.411,1106,3.19,1107,2.674,1108,3.519,1109,4.693,1110,3.19,1111,2.552,1112,3.19,1113,3.19,1114,3.052,1115,3.023,1116,3.19,1117,4.693,1118,3.19,1119,3.933,1120,3.19,1121,3.401,1122,3.19,1123,3.19,1124,3.19,1125,3.201,1126,4.179,1127,3.19,1128,4.199,1129,2.674,1130,2.674,1131,3.202,1132,3.19,1133,2.674,1134,3.933,1135,3.19,1136,3.19,1137,3.19,1138,2.06,1139,3.19,1140,3.19,1141,3.19,1142,2.903,1143,1.063,1144,3.19,1145,3.19,1146,1.777,1147,3.19,1148,2.483,1149,3.19,1150,3.19,1151,3.19,1152,1.934,1153,3.19,1154,3.19,1155,4.987,1156,4.199,1157,3.19,1158,3.19,1159,2.903,1160,3.19,2229,5.474,2230,4.159,2231,5.474,2232,4.159,2233,4.159,2234,4.159,2235,4.159,2236,4.159,2237,4.159,2238,4.159,2239,4.159,2240,4.159,2241,4.159,2242,4.159,2243,4.159,2244,4.159,2245,4.159,2246,4.159,2247,4.159,2248,4.159,2249,4.159,2250,4.159,2251,4.159,2252,4.159,2253,4.159,2254,5.474,2255,5.474,2256,5.474,2257,4.705,2258,4.159,2259,4.159]],["title/modules/NgxChartsModule.html",[975,1.198,2260,2.575]],["body/modules/NgxChartsModule.html",[3,0.184,4,0.184,5,0.184,31,0.019,33,0.294,59,0.214,130,0.096,178,0.013,321,0.013,322,0.016,365,1.709,375,1.412,610,0.901,646,1.794,657,1.794,669,3.055,670,1.517,682,2.903,761,2.188,975,1.794,977,2.877,978,2.431,979,3.429,980,2.722,981,3.429,985,2.122,986,2.188,988,3.42,989,3.42,990,2.89,994,3.42,995,1.283,996,4.202,997,2.305,1001,2.89,1055,4.202,1056,2.89,1102,3.552,1103,3.42,1650,3.857,1653,3.857,2260,5.346,2261,4.749,2262,4.749,2263,4.749,2264,5.525,2265,5.525,2266,6.537,2267,6.537,2268,6.537,2269,6.537,2270,6.537,2271,6.537]],["title/interfaces/Node.html",[0,0.157,38,0.539]],["body/interfaces/Node.html",[0,0.285,2,0.505,3,0.103,4,0.103,5,0.103,12,1.316,14,1.68,15,1.362,19,1.092,21,0.355,22,0.595,23,0.689,26,1.108,29,0.769,30,0.453,31,0.019,32,0.827,33,0.259,34,0.912,37,0.767,38,1.136,39,1.245,40,1.544,41,1.628,42,2.018,43,1.267,45,1.243,46,0.478,49,0.718,50,0.728,51,0.652,54,2.005,57,0.87,59,0.253,62,1.165,68,0.765,69,1.275,70,0.655,74,1.862,80,1.97,85,1.316,92,1.773,94,1.861,95,1.966,96,0.53,99,1.165,100,1.69,101,0.673,102,2.047,107,0.791,108,0.791,109,0.881,111,0.87,115,0.728,116,0.901,118,1.787,122,1.403,123,0.505,130,0.054,134,1.092,135,1.598,138,1.332,143,1.433,145,2.158,152,0.702,178,0.007,207,0.403,215,1.862,218,1.699,232,0.603,238,0.403,244,1.792,247,1.165,248,1.291,250,2.436,261,1.255,262,2.071,263,0.94,264,1.55,267,0.957,273,1.449,274,2.076,286,1.108,307,0.957,311,2.118,316,1.196,321,0.007,322,0.011,330,1.316,331,0.94,334,1.521,343,1.524,344,0.957,348,2.266,369,1.97,370,0.888,371,0.791,375,1.141,378,1.158,387,0.957,394,1.524,397,2.998,398,1.767,400,2.156,403,2.534,409,1.524,412,0.957,414,1.619,417,2.993,418,0.957,420,1.866,423,2.269,427,1.524,430,1.524,457,0.718,472,1.749,484,2.838,487,1.69,491,2.304,493,2.335,501,2.198,522,1.619,528,2.64,619,1.598,621,1.362,628,1.521,637,2.335,645,1.619,670,0.718,826,1.439,827,1.165,832,2.224,888,1.403,917,1.316,995,0.718,1018,2.198,1020,2.198,1021,1.524,1098,1.784,1115,1.439,1143,0.791,1152,1.439,1166,1.773,1189,1.439,1245,1.291,1248,1.225,1296,1.439,1297,1.439,1300,2.076,1305,1.439,1320,1.439,1349,1.524,1363,2.076,1366,1.86,1374,1.439,1384,1.165,1431,1.862,1436,2.335,1469,1.524,1470,1.619,1471,1.725,1472,1.725,1473,1.97,1474,2.513,1475,1.619,1476,1.784,1477,1.108,1478,2.335,1479,1.97,1480,1.874,1481,1.862,1482,2.198,1483,1.725,1484,2.488,1485,1.598,1486,1.725,1487,1.725,1488,1.725,1489,2.488,1490,2.488,1491,3.851,1492,2.488,1493,2.673,1494,2.919,1495,2.488,1496,1.725,1497,1.725,1498,1.725,1499,1.619,1500,1.725,1501,1.725,1502,1.725,1503,1.725,1504,1.964,1505,1.619,1506,1.767,1507,1.725,1508,1.725,1509,1.524,1510,1.108,1511,1.524,1512,1.725,1513,1.725,1514,1.619,1515,1.725,1516,1.725,1517,2.488,1518,1.725,1519,1.725,1520,1.725,1521,1.725,1522,1.725,1523,1.725,1524,1.725,1525,1.725,1526,1.725,1527,1.725,1528,1.725,1529,1.725,1530,1.725,1531,1.725,1532,1.725,1533,1.725,1534,2.488,1535,2.488,1536,1.725,1537,1.725,1538,1.725,1539,1.725,1540,1.005,1541,1.725,1542,1.725,1543,1.725,1544,1.725,1545,1.725,1546,2.488,1547,1.725,1548,1.725,1549,1.725,1550,1.725,1551,2.488,1552,1.725,1553,1.725,1554,1.725,1555,1.725,1556,2.488,1557,2.488,1558,1.725,1559,1.725,1560,1.725,1561,1.725,1562,1.725,1563,2.488,1564,1.725,1565,1.725,1566,1.725,1567,1.725,1568,1.725,1569,3.195,1570,1.725,1571,1.725,1572,1.725,1573,1.725,1574,1.725,1575,1.725,1576,1.725,1577,1.725,1578,1.725,1579,1.725,1580,1.725,1581,1.619,1582,2.488,1583,1.725,1584,1.767,1585,1.725,1586,1.725,1587,2.488,1588,2.076,1589,1.725,1590,2.488,1591,1.725,1592,1.725,1593,1.725,1594,2.488,1595,1.725,1596,2.488,1597,1.725,1598,2.488,1599,2.488,1600,1.725,1601,1.725,1602,1.725,1603,1.725,1604,1.725,1605,1.725,1606,1.725,1607,2.488,1608,1.725,1609,1.725,1610,2.488,1611,1.725,1612,1.725,1613,1.725,1614,1.725,1615,1.725,1616,1.725,1617,1.725,1618,1.725,1619,2.488,1620,1.725,1621,1.725,1622,1.725,1623,1.725,1624,1.725,1625,1.725,1626,1.725,1627,1.725,1628,1.725,1629,1.725,1630,1.725,1631,1.725,1632,1.725,1633,1.725,1634,1.725,1635,1.725,1636,1.725,1637,1.725,1638,1.725,1639,2.488,1640,1.725,1641,1.725,1642,1.725,1643,1.725,1644,1.725,1645,1.725,1646,1.725,1647,1.725]],["title/interfaces/NodeData.html",[0,0.157,1004,2.575]],["body/interfaces/NodeData.html",[0,0.213,2,0.814,3,0.238,4,0.166,5,0.166,21,0.309,22,0.578,23,0.95,29,0.708,30,0.431,31,0.019,32,0.539,33,0.239,38,1.139,39,0.814,43,1.36,44,1.788,59,0.239,67,1.029,69,1.217,70,0.539,94,1.572,96,0.436,108,0.689,109,0.817,114,1.978,116,0.96,118,1.939,130,0.087,148,1.545,152,0.852,172,1.88,178,0.012,197,1.339,232,0.801,238,0.868,242,2.323,252,2.084,281,1.16,306,1.404,311,1.622,316,1.339,321,0.012,322,0.015,331,1.052,378,1.105,398,1.978,440,1.217,472,1.339,566,0.899,570,1.88,574,3.487,575,1.572,576,1.217,577,1.217,578,4.718,579,1.788,580,3.832,581,1.788,582,1.545,583,2.096,584,3.832,585,3.832,586,3.832,587,4.718,588,1.545,589,3.487,590,3.487,591,3.211,592,3.211,593,3.832,594,1.276,595,3.832,596,2.461,597,3.487,599,2.084,602,3.832,609,1.498,610,0.814,611,3.832,612,3.832,617,3.832,618,3.832,619,1.788,620,2.461,621,2.198,622,3.832,623,3.832,624,3.832,625,3.832,626,4.718,627,3.832,628,1.702,629,3.832,630,2.982,631,1.88,632,3.832,633,1.217,634,3.487,662,1.978,1002,3.832,1003,3.954,1004,5.076,1011,4.294,1012,4.294,1013,4.294,1014,4.294,1015,4.294,1016,4.294,1017,4.294,1018,3.283,1019,5.729,1020,3.03,1021,2.461,1022,4.294,1023,4.294,1024,3.487,1025,4.294,1026,4.294,1027,4.294,1028,3.832,1029,4.294,1030,4.294,1031,3.832,1032,4.294,1033,4.294,1034,4.294,1035,4.294,1036,4.294,1037,4.294,1038,4.294,1039,4.294,1040,4.294,1041,4.294,1042,4.294,1043,4.294]],["title/interfaces/NodeType.html",[0,0.157,348,1.321]],["body/interfaces/NodeType.html",[0,0.286,2,0.512,3,0.105,4,0.105,5,0.105,12,1.33,14,1.698,15,1.382,19,1.006,21,0.357,22,0.598,23,0.697,26,1.124,29,0.732,30,0.435,31,0.019,32,0.828,33,0.26,34,0.926,37,0.775,38,1.136,39,1.246,40,1.557,41,1.638,42,1.89,43,1.276,45,1.249,46,0.485,49,0.729,50,0.735,51,0.661,54,1.948,57,0.883,59,0.254,62,1.182,68,0.843,69,1.405,70,0.659,74,1.882,80,1.986,85,1.33,92,1.785,94,1.854,95,1.993,96,0.585,99,1.182,100,1.802,101,0.676,102,2.051,107,0.803,108,0.796,109,0.883,111,0.883,115,0.735,116,0.729,118,1.675,122,1.415,123,0.512,130,0.055,134,1.099,135,1.615,138,1.334,143,1.438,145,2.152,152,0.707,178,0.008,207,0.409,215,1.31,218,1.714,232,0.608,238,0.409,244,1.557,247,1.182,248,1.31,250,2.277,261,1.268,262,2.082,263,0.95,264,1.556,267,0.972,273,1.464,274,2.098,286,1.124,307,0.972,311,1.984,316,1.209,321,0.008,322,0.011,330,1.33,331,0.661,334,1.537,343,1.547,344,0.972,348,2.188,369,1.986,370,0.893,371,0.803,375,1.153,378,1.167,387,0.972,394,1.547,397,3.018,398,1.786,400,2.171,403,2.549,409,1.547,412,0.972,414,1.395,417,2.842,418,0.972,420,2.043,423,2.285,427,1.547,430,1.547,457,0.729,472,1.546,484,2.653,487,1.33,491,2.539,493,2.761,501,2.222,522,1.643,528,2.653,619,1.89,621,1.382,628,1.537,637,2.36,645,1.643,670,0.729,826,1.461,827,1.182,832,2.233,888,1.415,917,0.926,995,0.729,1008,2.36,1018,2.222,1020,2.222,1021,1.547,1098,1.799,1115,1.461,1143,0.803,1152,1.461,1166,1.785,1189,1.461,1245,1.31,1248,1.244,1296,1.461,1297,1.461,1300,2.098,1305,1.461,1320,1.461,1349,1.547,1363,2.455,1366,1.873,1374,1.461,1384,1.182,1431,1.882,1436,2.36,1469,1.547,1470,1.643,1471,1.751,1472,1.751,1473,1.986,1474,2.57,1475,1.643,1476,1.799,1477,1.124,1478,2.36,1479,1.986,1480,1.89,1481,2.202,1482,2.6,1483,2.515,1484,3.407,1485,1.89,1486,1.751,1487,1.751,1488,1.751,1489,2.515,1490,1.751,1491,3.407,1492,1.751,1493,2.323,1494,2.515,1495,1.751,1496,1.751,1497,1.751,1498,1.751,1499,1.643,1500,1.751,1501,1.751,1502,1.751,1503,1.751,1504,1.985,1505,1.643,1506,1.786,1507,1.751,1508,1.751,1509,1.547,1510,1.124,1511,1.547,1512,1.751,1513,1.751,1514,1.643,1515,1.751,1516,1.751,1517,2.515,1518,1.751,1519,1.751,1520,1.751,1521,1.751,1522,1.751,1523,1.751,1524,1.751,1525,1.751,1526,1.751,1527,1.751,1528,1.751,1529,1.751,1530,1.751,1531,1.751,1532,1.751,1533,1.751,1534,2.515,1535,2.515,1536,1.751,1537,1.751,1538,1.751,1539,1.751,1540,1.019,1541,1.751,1542,1.751,1543,1.751,1544,1.751,1545,1.751,1546,2.515,1547,1.751,1548,1.751,1549,1.751,1550,1.751,1551,2.515,1552,1.751,1553,1.751,1554,1.751,1555,1.751,1556,2.515,1557,2.515,1558,1.751,1559,1.751,1560,1.751,1561,1.751,1562,1.751,1563,2.515,1564,1.751,1565,1.751,1566,1.751,1567,1.751,1568,1.751,1569,3.217,1570,1.751,1571,1.751,1572,1.751,1573,1.751,1574,1.751,1575,1.751,1576,1.751,1577,1.751,1578,1.751,1579,1.751,1580,1.751,1581,1.643,1582,2.515,1583,1.751,1584,1.786,1585,1.751,1586,1.751,1587,2.515,1588,2.098,1589,1.751,1590,2.515,1591,1.751,1592,1.751,1593,1.751,1594,2.515,1595,1.751,1596,2.515,1597,1.751,1598,2.515,1599,2.515,1600,1.751,1601,1.751,1602,1.751,1603,1.751,1604,1.751,1605,1.751,1606,1.751,1607,2.515,1608,1.751,1609,1.751,1610,2.515,1611,1.751,1612,1.751,1613,1.751,1614,1.751,1615,1.751,1616,1.751,1617,1.751,1618,1.751,1619,2.515,1620,1.751,1621,1.751,1622,1.751,1623,1.751,1624,1.751,1625,1.751,1626,1.751,1627,1.751,1628,1.751,1629,1.751,1630,1.751,1631,1.751,1632,1.751,1633,1.751,1634,1.751,1635,1.751,1636,1.751,1637,1.751,1638,1.751,1639,2.515,1640,1.751,1641,1.751,1642,1.751,1643,1.751,1644,1.751,1645,1.751,1646,1.751,1647,1.751]],["title/interfaces/RecordNode.html",[0,0.157,1169,1.93]],["body/interfaces/RecordNode.html",[0,0.265,2,0.477,3,0.097,4,0.097,5,0.097,7,1.1,8,1.157,10,1.63,12,1.83,13,2.474,14,1.1,17,1.529,18,3.246,19,1.132,21,0.422,22,0.524,23,0.451,24,2.825,25,1.529,26,1.046,27,1.63,28,3.057,29,0.583,30,0.469,31,0.019,32,0.692,33,0.23,36,0.712,37,0.503,38,1.137,39,1.229,40,1.645,41,1.495,42,0.904,43,0.947,44,1.046,45,1.253,46,0.451,50,0.477,51,0.615,52,1.991,53,1.529,54,1.745,55,2.357,59,0.249,61,1.568,62,2.335,63,2.556,64,2.23,65,2.388,66,1.745,67,1.09,68,1.01,69,0.712,70,0.709,79,2.24,80,1.1,82,2.23,83,2.357,84,2.388,85,1.263,87,1.991,93,1.44,94,1.819,96,0.374,101,0.676,102,2.016,103,1.529,105,1.745,108,0.591,109,0.835,111,1.425,114,1.157,115,0.477,116,0.885,118,1.295,119,3.158,120,3.111,121,1.219,122,0.784,123,1.2,124,2.496,127,2.496,130,0.051,134,0.966,137,0.503,138,0.529,139,1.917,140,1.529,141,1.359,143,1.175,145,1.978,149,1.286,152,0.865,172,1.1,178,0.007,181,2.388,184,1.325,196,2.651,197,1.495,198,2.556,203,1.44,207,0.773,212,1.745,218,2.014,221,1.802,232,0.684,233,2.388,238,0.888,240,3.025,243,1.745,251,1.359,254,1.745,257,2.388,258,1.991,261,0.822,263,1.067,264,0.994,266,1.529,267,0.904,269,2.496,281,1.379,282,1.359,284,1.219,286,1.046,287,1.745,288,2.109,289,1.148,290,1.786,291,1.204,295,1.094,306,1.425,307,0.904,308,1.44,321,0.007,322,0.01,326,2.413,329,1.63,330,0.862,331,1.067,332,1.529,348,1.814,349,3.058,350,2.04,370,0.626,374,1.63,377,1.611,378,0.646,381,1.63,382,2.04,383,3.894,384,2.375,385,2.04,386,3.798,387,0.904,388,1.529,389,1.611,390,1.286,391,2.04,392,1.879,398,2.352,400,1.1,405,1.219,406,1.879,414,1.837,415,1.879,416,1.44,419,2.109,420,1.494,468,2.388,471,1.529,473,2.982,483,1.745,484,2.327,489,0.996,491,1.286,506,1.745,620,1.44,633,1.512,767,1.529,874,3.257,1003,2.753,1138,1.1,1148,1.745,1161,3.586,1162,1.745,1163,2.989,1164,2.242,1165,2.242,1166,1.325,1167,3.025,1168,2.556,1169,3.836,1170,1.879,1171,2.753,1172,2.242,1173,1.745,1174,2.989,1175,2.242,1176,3.537,1177,2.242,1178,1.63,1179,2.242,1180,2.989,1181,2.04,1182,2.242,1183,2.242,1184,2.04,1185,2.825,1186,1.879,1187,2.989,1188,1.745,1189,1.359,1190,2.242,1191,2.242,1192,2.242,1193,2.242,1194,1.879,1195,2.242,1196,2.242,1197,2.242,1198,3.285,1199,2.242,1200,2.242,1201,2.242,1202,2.242,1203,2.242,1204,2.04,1205,2.753,1206,2.989,1207,2.04,1208,2.242,1209,2.242,1210,2.242,1211,3.894,1212,2.242,1213,2.242,1214,2.242,1215,3.887,1216,2.242,1217,2.242,1218,2.242,1219,2.242,1220,2.242,1221,3.285,1222,3.285,1223,3.285,1224,2.242,1225,3.285,1226,2.242,1227,1.44,1228,2.242,1229,2.242,1230,1.879,1231,2.242,1232,3.887,1233,1.879,1234,2.242,1235,1.529,1236,2.242,1237,3.285,1238,2.242,1239,2.242,1240,1.63,1241,2.242,1242,2.242,1243,2.242,1244,2.242,1245,1.786,1246,2.242,1247,2.242,1248,1.157,1249,2.242,1250,2.242,1251,2.04,1252,2.242,1253,2.242,1254,3.285,1255,2.242,1256,2.242,1257,2.242,1258,2.242,1259,2.242,1260,2.242,1261,2.242,1262,2.242,1263,2.242,1264,2.242,1265,2.04,1266,2.242,1267,1.63,1268,2.242,1269,2.242,1270,3.285,1271,2.242,1272,2.242,1273,2.242,1274,2.242,1275,2.242,1276,1.44,1277,1.745,1278,2.242,1279,2.242,1280,2.242,1281,2.242,1282,2.242,1283,2.242,1284,2.242,1285,2.242,1286,2.242,1287,2.242,1288,3.887,1289,2.242,1290,2.242,1291,3.285,1292,2.242,1293,2.242,1294,4.28,1295,2.242,1296,3.058,1297,2.595,1298,4.28,1299,4.28,1300,2.595,1301,2.242,1302,2.242,1303,2.242,1304,4.28,1305,2.982,1306,2.242,1307,2.04,1308,3.887,1309,2.242,1310,3.887,1311,3.285,1312,3.285,1313,3.285,1314,3.285,1315,2.242,1316,2.242,1317,3.887,1318,3.887,1319,2.242,1320,1.991,1321,2.242,1322,2.753,1323,2.242,1324,2.242,1325,2.242,1326,2.242,1327,2.242,1328,2.04,1329,1.529,1330,2.242,1331,1.745,1332,2.242,1333,2.242]],["title/components/ResultTimeline.html",[566,0.539,683,1.539]],["body/components/ResultTimeline.html",[3,0.2,4,0.134,5,0.134,13,1.37,21,0.249,22,0.565,23,0.826,30,0.458,31,0.019,32,0.577,33,0.249,36,0.979,37,0.691,38,0.587,39,0.655,57,1.803,59,0.208,67,0.621,68,1.04,95,1.691,96,0.612,101,0.405,107,1.027,115,1.161,116,0.983,130,0.07,137,0.691,138,0.969,152,0.92,178,0.013,207,0.869,232,0.616,238,0.696,321,0.017,322,0.013,337,1.737,351,2.568,353,2.013,370,0.879,371,1.537,384,2.125,440,1.303,472,1.79,525,2.983,566,0.879,567,1.676,568,2.635,569,1.591,571,1.591,572,2.102,575,1.537,576,1.848,577,1.848,594,1.367,599,2.232,600,2.488,609,1.773,610,0.655,631,2.413,646,1.305,647,2.013,648,2.354,649,2.102,650,3.667,651,2.102,655,2.799,656,1.768,657,1.953,658,2.799,659,1.439,660,3.147,661,1.591,662,1.591,663,1.768,664,1.676,665,2.102,666,1.512,667,1.676,668,2.102,669,1.591,670,1.396,671,3.147,672,1.768,673,1.869,674,1.676,675,2.102,676,1.676,677,2.354,678,2.102,679,1.676,680,1.676,681,2.102,682,1.512,683,2.675,684,2.125,685,2.102,686,2.102,717,1.591,740,2.119,766,1.979,777,1.439,897,3.194,1028,3.082,1062,4.104,1096,1.953,1146,1.305,1474,2.869,2131,3.311,2272,5.427,2273,3.082,2274,5.35,2275,6.015,2276,7.209,2277,6.413,2278,6.413,2279,3.355,2280,6.015,2281,6.015,2282,6.015,2283,6.015,2284,4.018,2285,5.35,2286,6.678,2287,4.018,2288,4.018,2289,4.018,2290,5.35,2291,4.018,2292,4.018,2293,4.018,2294,4.018,2295,5.513,2296,4.198,2297,4.018,2298,4.018,2299,4.018,2300,4.018,2301,4.018,2302,4.018,2303,6.015,2304,4.018,2305,3.439,2306,3.454,2307,3.454,2308,3.454,2309,3.454,2310,4.018,2311,4.018,2312,4.018,2313,4.018,2314,4.018,2315,4.018,2316,5.35,2317,4.018,2318,2.583,2319,4.018,2320,4.018,2321,4.018,2322,5.35,2323,4.018,2324,4.018,2325,4.018,2326,4.018,2327,4.018,2328,4.018,2329,5.35,2330,4.018,2331,4.018,2332,3.866,2333,5.35,2334,4.018,2335,4.018,2336,4.018,2337,4.018,2338,5.35,2339,5.35,2340,5.35,2341,5.35,2342,5.35,2343,4.018,2344,4.018,2345,5.35,2346,4.018,2347,4.018,2348,4.018,2349,4.018,2350,4.018,2351,4.018,2352,4.018,2353,5.35,2354,4.018,2355,5.35,2356,4.018,2357,4.018,2358,3.866,2359,4.018,2360,4.018,2361,4.018,2362,4.018,2363,4.018,2364,4.018,2365,4.018,2366,4.018,2367,4.018,2368,4.018,2369,4.018,2370,4.018,2371,4.018,2372,4.018,2373,4.018,2374,4.018,2375,4.018,2376,4.018,2377,4.018,2378,4.018,2379,4.018,2380,4.018,2381,4.018,2382,4.018,2383,4.018]],["title/interfaces/StructuralEdgeType.html",[0,0.157,349,1.716]],["body/interfaces/StructuralEdgeType.html",[0,0.262,2,0.462,3,0.094,4,0.094,5,0.094,7,1.067,8,1.123,10,1.581,12,1.872,13,2.489,14,1.067,17,1.483,18,3.541,19,1.242,21,0.419,22,0.551,23,0.906,24,2.775,25,1.483,26,1.015,27,1.581,28,3.278,29,0.573,30,0.471,31,0.019,32,0.718,33,0.227,36,0.691,37,0.487,38,1.134,39,1.23,40,1.81,41,1.473,42,0.877,43,0.926,44,1.015,45,1.268,46,0.438,50,0.462,51,0.597,52,1.947,53,1.483,54,1.726,55,2.315,59,0.246,61,1.545,62,2.31,63,2.499,64,2.191,65,2.334,66,1.692,67,1.084,68,1.015,69,0.691,70,0.703,79,2.19,80,1.576,82,2.191,83,2.727,84,2.334,85,1.235,87,1.947,93,1.396,94,1.823,96,0.434,101,0.671,102,2.02,103,1.483,105,1.692,108,0.578,109,0.829,111,1.399,114,2.177,115,0.462,116,0.934,118,1.622,119,3.127,120,3.27,121,1.183,122,0.76,123,1.196,124,2.452,127,2.452,130,0.049,134,0.949,137,0.487,138,0.513,139,1.903,140,1.483,141,1.318,143,1.157,145,1.962,149,1.247,152,0.86,172,1.067,178,0.007,181,2.334,184,1.295,196,2.604,197,1.473,198,2.499,203,1.396,207,0.763,212,1.692,218,1.993,221,1.953,232,0.707,233,2.334,238,0.881,240,2.971,243,1.692,251,1.318,254,1.692,257,2.334,258,1.947,261,0.797,263,1.048,264,0.972,266,1.483,267,0.877,269,2.452,281,1.361,282,1.947,284,1.183,286,1.015,287,1.692,288,2.062,289,1.122,290,1.746,291,1.177,295,1.07,306,1.649,307,0.877,308,1.396,321,0.007,322,0.01,326,2.389,329,1.581,330,0.836,331,0.882,332,1.483,348,1.782,349,3.095,350,1.979,370,0.612,374,1.581,377,1.576,378,0.926,381,1.581,382,1.979,383,3.837,384,2.362,385,1.979,386,3.802,387,0.877,388,1.483,389,1.576,390,1.247,391,1.979,392,1.822,398,2.322,400,1.067,405,1.183,406,1.822,414,1.814,415,1.822,416,1.396,419,2.062,420,1.922,468,2.334,471,1.483,473,3.031,483,1.692,484,2.293,489,0.966,491,1.247,506,2.499,620,1.396,633,1.495,767,2.19,874,3.2,1003,2.691,1138,1.067,1148,2.499,1161,3.534,1162,1.692,1163,2.922,1164,2.175,1165,2.175,1166,1.295,1167,2.971,1168,1.692,1169,3.802,1170,2.691,1171,3.534,1172,3.212,1173,2.499,1174,3.837,1175,3.212,1176,3.837,1177,3.212,1178,2.334,1179,3.212,1180,3.837,1181,1.979,1182,2.175,1183,2.175,1184,1.979,1185,2.775,1186,1.822,1187,2.922,1188,1.692,1189,1.318,1190,2.175,1191,2.175,1192,2.175,1193,2.175,1194,1.822,1195,2.175,1196,2.175,1197,2.175,1198,3.212,1199,2.175,1200,2.175,1201,2.175,1202,2.175,1203,2.175,1204,1.979,1205,2.691,1206,2.922,1207,1.979,1208,2.175,1209,2.175,1210,2.175,1211,3.837,1212,2.175,1213,2.175,1214,2.175,1215,3.818,1216,2.175,1217,2.175,1218,2.175,1219,2.175,1220,2.175,1221,3.212,1222,3.212,1223,3.212,1224,2.175,1225,3.212,1226,2.175,1227,1.396,1228,2.175,1229,2.175,1230,1.822,1231,2.175,1232,3.818,1233,1.822,1234,2.175,1235,1.483,1236,2.175,1237,3.212,1238,2.175,1239,2.175,1240,1.581,1241,2.175,1242,2.175,1243,2.175,1244,2.175,1245,1.746,1246,2.175,1247,2.175,1248,1.123,1249,2.175,1250,2.175,1251,1.979,1252,2.175,1253,2.175,1254,3.212,1255,2.175,1256,2.175,1257,2.175,1258,2.175,1259,2.175,1260,2.175,1261,2.175,1262,2.175,1263,2.175,1264,2.175,1265,1.979,1266,2.175,1267,1.581,1268,2.175,1269,2.175,1270,3.212,1271,2.175,1272,2.175,1273,2.175,1274,2.175,1275,2.175,1276,1.396,1277,1.692,1278,2.175,1279,2.175,1280,2.175,1281,2.175,1282,2.175,1283,2.175,1284,2.175,1285,2.175,1286,2.175,1287,2.175,1288,3.818,1289,2.175,1290,2.175,1291,3.212,1292,2.175,1293,2.175,1294,4.217,1295,2.175,1296,3.031,1297,2.557,1298,4.217,1299,4.217,1300,2.557,1301,2.175,1302,2.175,1303,2.175,1304,4.217,1305,2.953,1306,2.175,1307,1.979,1308,3.818,1309,2.175,1310,3.818,1311,3.212,1312,3.212,1313,3.212,1314,3.212,1315,2.175,1316,2.175,1317,3.818,1318,3.818,1319,2.175,1320,1.947,1321,2.175,1322,2.691,1323,2.175,1324,2.175,1325,2.175,1326,2.175,1327,2.175,1328,1.979,1329,1.483,1330,2.175,1331,1.692,1332,2.175,1333,2.175]],["title/interfaces/TimelineAggregation.html",[0,0.157,2384,2.057]],["body/interfaces/TimelineAggregation.html",[0,0.22,2,0.406,3,0.083,4,0.083,5,0.083,12,1.119,19,0.981,21,0.154,22,0.357,23,0.902,29,0.673,30,0.418,31,0.019,32,0.787,33,0.265,34,2.226,35,2.717,36,0.606,37,0.428,45,1.194,46,0.384,47,1.583,48,2.025,49,0.577,50,0.619,51,0.524,57,1.447,59,0.236,61,0.699,64,1.094,67,0.711,69,0.606,70,0.598,96,0.51,97,1.301,98,1.503,99,2.287,100,0.733,101,0.647,107,1.553,108,0.999,109,0.913,115,0.839,116,0.839,123,1.209,128,2.536,129,1.583,130,0.043,134,0.981,137,0.428,138,1.1,143,1.319,144,1.583,148,1.593,152,0.887,155,1.387,156,1.387,157,1.387,174,1.037,176,1.094,178,0.014,184,1.174,187,1.387,188,1.387,191,1.387,197,1.233,207,0.67,218,1.232,219,1.387,220,3.057,221,1.294,232,0.767,238,0.324,252,1.583,263,0.524,264,0.881,272,0.985,273,0.807,281,1.195,289,0.667,291,0.699,295,0.636,303,2.566,316,1.38,321,0.006,322,0.009,326,1.732,328,1.157,330,1.518,331,0.524,334,1.293,337,1.232,365,0.769,369,0.936,370,0.554,371,0.636,376,2.958,377,1.428,378,0.839,384,1.938,389,0.936,390,2.025,412,1.174,414,0.769,416,1.225,418,0.769,419,1.225,420,1.357,423,2.039,440,0.606,457,0.577,471,1.301,472,1.017,473,1.765,487,1.635,489,0.848,510,2.958,528,2.535,566,0.672,570,2.086,575,0.97,576,0.606,577,0.606,579,0.89,581,0.89,582,0.769,583,1.293,588,0.769,594,0.636,596,1.225,609,1.755,610,0.406,631,2.416,633,1.48,657,1.671,659,0.89,684,2.06,689,0.936,717,0.985,720,0.936,736,1.387,737,1.094,740,1.503,741,1.094,743,1.037,747,1.428,748,0.936,753,1.359,768,1.67,769,1.387,777,0.89,780,2.394,786,2.195,791,1.301,817,1.359,819,2.44,822,1.765,824,1.094,825,1.869,830,0.985,862,1.225,875,1.485,888,1.017,900,1.919,908,1.094,917,1.723,969,1.157,985,1.494,986,1.503,997,1.037,1008,2.693,1058,1.485,1096,1.232,1111,1.583,1114,2.674,1138,2.416,1143,1.316,1146,0.807,1166,0.769,1178,1.387,1185,1.387,1336,1.301,1337,1.301,1345,1.387,1355,1.037,1361,1.387,1366,0.807,1384,0.936,1410,1.387,1473,0.936,1476,1.568,1477,0.89,1479,1.732,1480,1.647,1485,0.89,1493,1.094,1540,0.807,1652,2.566,1654,2.566,1655,1.765,1656,1.037,1668,1.157,1671,1.157,1672,2.542,1673,1.157,1674,1.157,1675,1.157,1676,1.157,1677,1.157,1678,1.157,1695,1.301,1698,3.097,1712,1.485,1716,1.387,1755,1.485,1760,1.301,1913,2.407,1914,1.985,1917,1.599,1961,1.869,1978,1.225,1979,2.266,1980,1.094,1981,1.225,1990,1.485,1997,1.225,2000,1.485,2035,1.485,2121,1.485,2122,1.387,2130,1.387,2131,3.539,2132,1.301,2133,1.301,2169,1.301,2279,1.985,2305,2.439,2318,1.599,2332,1.599,2358,2.958,2384,3.58,2385,1.485,2386,3.091,2387,3.091,2388,3.258,2389,4.373,2390,3.594,2391,1.736,2392,5.074,2393,2.649,2394,1.736,2395,2.394,2396,2.266,2397,2.826,2398,3.091,2399,3.594,2400,1.387,2401,2.649,2402,1.736,2403,1.736,2404,3.258,2405,2.871,2406,1.736,2407,1.736,2408,2.439,2409,2.439,2410,3.388,2411,1.387,2412,1.387,2413,1.387,2414,1.387,2415,5.162,2416,1.736,2417,2.566,2418,1.736,2419,2.649,2420,1.736,2421,1.736,2422,1.387,2423,1.387,2424,1.387,2425,1.387,2426,1.387,2427,2.116,2428,1.387,2429,1.387,2430,1.736,2431,3.594,2432,2.116,2433,1.736,2434,1.736,2435,1.736,2436,1.736,2437,1.736,2438,2.649,2439,1.736,2440,1.736,2441,1.736,2442,1.387,2443,1.736,2444,1.736,2445,1.387,2446,2.649,2447,2.649,2448,1.736,2449,3.091,2450,1.736,2451,3.594,2452,1.736,2453,1.387,2454,1.736,2455,2.649,2456,1.387,2457,1.736,2458,1.301,2459,1.736,2460,2.649,2461,1.736,2462,1.736,2463,1.736,2464,1.736,2465,1.736,2466,1.736,2467,1.736,2468,1.736,2469,1.736,2470,1.736,2471,1.736,2472,1.736,2473,1.736,2474,1.736,2475,2.649,2476,1.736,2477,1.736,2478,1.736,2479,1.736,2480,1.736,2481,1.736,2482,1.736,2483,1.736,2484,1.736,2485,1.736,2486,1.387,2487,2.649,2488,1.736,2489,3.212,2490,2.649,2491,3.87,2492,1.736,2493,2.649,2494,4.822,2495,1.736,2496,1.387,2497,1.736,2498,1.736,2499,2.649,2500,1.736,2501,3.594,2502,1.736,2503,2.649,2504,2.649,2505,1.736,2506,2.649,2507,1.736,2508,3.212,2509,3.212,2510,2.649,2511,1.387,2512,1.736,2513,1.736,2514,1.736,2515,1.736,2516,1.736,2517,1.736,2518,1.736,2519,1.736,2520,2.649,2521,1.736,2522,1.736,2523,2.649,2524,2.649,2525,1.736,2526,2.649,2527,2.649,2528,1.736,2529,1.736,2530,1.736,2531,1.736,2532,1.736,2533,1.736,2534,2.649,2535,1.736,2536,1.736,2537,4.078,2538,2.566,2539,3.594,2540,1.736,2541,2.649,2542,4.078,2543,1.736,2544,1.736,2545,1.736,2546,1.736,2547,1.736,2548,2.649,2549,1.736,2550,1.736,2551,1.736,2552,1.736,2553,2.649,2554,1.736,2555,1.736,2556,1.736,2557,1.736,2558,1.736,2559,1.736,2560,1.736,2561,1.736,2562,1.736,2563,1.736,2564,1.736,2565,1.736,2566,1.736,2567,1.387,2568,1.736,2569,1.736,2570,3.212,2571,1.736,2572,1.736,2573,1.736,2574,1.736,2575,1.736,2576,1.736,2577,1.736,2578,1.736,2579,1.736,2580,2.649,2581,1.736,2582,1.736,2583,1.736,2584,1.736,2585,1.736,2586,1.736,2587,1.387,2588,2.649,2589,1.736,2590,1.736,2591,1.736,2592,1.736,2593,1.736,2594,1.736,2595,1.736,2596,1.736,2597,1.736,2598,2.649,2599,1.736,2600,1.736,2601,1.736,2602,1.736,2603,1.736,2604,1.736,2605,1.736,2606,1.736,2607,1.736,2608,1.736,2609,1.736,2610,1.736,2611,1.736,2612,1.736,2613,1.736,2614,1.736,2615,1.736,2616,1.736,2617,3.212,2618,1.736,2619,1.736,2620,1.736,2621,3.091,2622,1.736,2623,1.736,2624,1.736,2625,1.736,2626,1.736,2627,1.736,2628,1.736,2629,1.736,2630,1.736,2631,1.736,2632,1.736,2633,1.736,2634,1.736,2635,1.736,2636,1.736,2637,1.387,2638,1.736,2639,1.736,2640,1.387,2641,1.736,2642,3.87,2643,1.736,2644,1.736,2645,1.387,2646,1.736,2647,1.736,2648,1.736,2649,1.736,2650,1.736,2651,1.736,2652,1.736,2653,1.599,2654,1.736,2655,1.736,2656,1.736,2657,1.736,2658,1.736,2659,1.736,2660,1.736,2661,1.736,2662,1.736,2663,1.736,2664,1.736,2665,1.736,2666,2.649,2667,4.373,2668,3.594,2669,2.649,2670,2.649,2671,2.649,2672,2.649,2673,1.736,2674,1.736,2675,1.736,2676,1.736,2677,1.736,2678,1.736,2679,2.649,2680,1.736,2681,1.736,2682,1.736,2683,1.736,2684,2.649,2685,1.736,2686,2.649,2687,1.736]],["title/interfaces/TimelineCombinedAggregations.html",[0,0.157,2398,2.057]],["body/interfaces/TimelineCombinedAggregations.html",[0,0.22,2,0.408,3,0.083,4,0.083,5,0.083,12,1.123,19,0.984,21,0.155,22,0.358,23,0.588,29,0.594,30,0.377,31,0.019,32,0.774,33,0.265,34,2.216,35,2.723,36,0.609,37,0.43,45,1.196,46,0.386,47,1.589,48,2.031,49,0.58,50,0.621,51,0.526,57,1.451,59,0.236,61,0.703,64,1.1,67,0.713,69,0.609,70,0.599,96,0.403,97,1.308,98,1.508,99,2.291,100,0.737,101,0.648,107,1.556,108,1,109,0.914,115,0.993,116,0.887,123,1.21,128,2.999,129,1.589,130,0.044,134,0.984,137,0.43,138,1.102,143,1.321,144,1.589,148,1.597,152,0.888,155,1.394,156,1.394,157,1.394,174,1.043,176,1.1,178,0.014,184,1.178,187,1.394,188,1.394,191,1.394,197,1.237,207,0.672,218,1.237,219,1.394,220,3.063,221,1.298,232,0.768,238,0.325,252,1.589,263,0.526,264,0.884,272,0.99,273,0.811,281,1.198,289,0.67,291,0.703,295,0.639,303,2.573,316,1.383,321,0.006,322,0.009,326,1.737,328,1.162,330,1.522,331,0.526,334,1.298,337,1.237,365,0.773,369,0.941,370,0.557,371,0.639,376,2.967,377,1.433,378,0.842,384,1.941,389,0.941,390,2.031,412,1.178,414,0.773,416,1.231,418,0.773,419,1.231,420,1.361,423,2.044,440,0.609,457,0.58,471,1.308,472,1.021,473,1.771,487,1.638,489,0.852,510,2.967,528,2.539,566,0.674,570,2.091,575,0.973,576,0.609,577,0.609,579,0.895,581,0.895,582,0.773,583,1.298,588,0.773,594,0.639,596,1.231,609,1.756,610,0.408,631,2.42,633,1.483,657,1.676,659,0.895,684,2.063,689,0.941,717,0.99,720,0.941,736,1.394,737,1.1,740,1.508,741,1.1,743,1.043,747,1.433,748,0.941,753,1.364,768,1.676,769,1.394,777,0.895,780,2.4,786,2.2,791,1.308,817,1.364,819,2.445,822,1.771,824,1.1,825,1.876,830,0.99,862,1.231,875,1.492,888,1.021,900,1.925,908,1.1,917,1.726,969,1.162,985,1.498,986,1.508,997,1.043,1058,1.492,1096,1.237,1111,1.589,1114,2.679,1138,2.42,1143,1.319,1146,0.811,1166,0.773,1178,1.394,1185,1.394,1336,1.308,1337,1.308,1345,1.394,1355,1.043,1361,1.394,1366,0.811,1384,0.941,1410,1.394,1473,0.941,1476,1.573,1477,0.895,1479,1.737,1480,1.652,1485,0.895,1493,1.1,1540,0.811,1652,2.573,1654,2.573,1655,1.771,1656,1.043,1668,1.162,1671,1.162,1672,2.678,1673,1.162,1674,1.162,1675,1.162,1676,1.162,1677,1.162,1678,1.162,1695,1.308,1698,3.101,1712,1.492,1716,1.394,1755,1.492,1760,1.308,1913,2.414,1914,1.993,1917,1.607,1961,1.876,1978,1.231,1979,2.273,1980,1.1,1981,1.231,1990,1.492,1997,1.231,2000,1.492,2035,1.492,2121,1.492,2122,1.394,2130,1.394,2131,3.54,2132,1.308,2133,1.308,2169,1.308,2279,1.993,2305,2.449,2318,1.607,2332,1.607,2358,2.967,2384,3.856,2385,1.492,2386,2.124,2387,2.124,2388,2.573,2389,4.38,2390,3.603,2391,1.745,2392,5.078,2393,2.659,2394,1.745,2395,2.4,2396,2.273,2397,2.831,2398,3.264,2399,4.249,2400,1.394,2401,2.659,2402,1.745,2403,1.745,2404,3.264,2405,2.878,2406,1.745,2407,1.745,2408,2.449,2409,2.449,2410,3.394,2411,1.394,2412,1.394,2413,1.394,2414,1.394,2415,5.165,2416,1.745,2417,2.573,2418,1.745,2419,2.659,2420,1.745,2421,1.745,2422,1.394,2423,1.394,2424,1.394,2425,1.394,2426,1.394,2427,2.124,2428,1.394,2429,1.394,2430,1.745,2431,3.603,2432,2.124,2433,1.745,2434,1.745,2435,1.745,2436,1.745,2437,1.745,2438,2.659,2439,1.745,2440,1.745,2441,1.745,2442,1.394,2443,1.745,2444,1.745,2445,1.394,2446,2.659,2447,2.659,2448,1.745,2449,3.098,2450,1.745,2451,3.603,2452,1.745,2453,1.394,2454,1.745,2455,2.659,2456,1.394,2457,1.745,2458,1.308,2459,1.745,2460,2.659,2461,1.745,2462,1.745,2463,1.745,2464,1.745,2465,1.745,2466,1.745,2467,1.745,2468,1.745,2469,1.745,2470,1.745,2471,1.745,2472,1.745,2473,1.745,2474,1.745,2475,2.659,2476,1.745,2477,1.745,2478,1.745,2479,1.745,2480,1.745,2481,1.745,2482,1.745,2483,1.745,2484,1.745,2485,1.745,2486,1.394,2487,2.659,2488,1.745,2489,3.221,2490,2.659,2491,3.878,2492,1.745,2493,2.659,2494,4.827,2495,1.745,2496,1.394,2497,1.745,2498,1.745,2499,2.659,2500,1.745,2501,3.603,2502,1.745,2503,2.659,2504,2.659,2505,1.745,2506,2.659,2507,1.745,2508,3.221,2509,3.221,2510,2.659,2511,1.394,2512,1.745,2513,1.745,2514,1.745,2515,1.745,2516,1.745,2517,1.745,2518,1.745,2519,1.745,2520,2.659,2521,1.745,2522,1.745,2523,2.659,2524,2.659,2525,1.745,2526,2.659,2527,2.659,2528,1.745,2529,1.745,2530,1.745,2531,1.745,2532,1.745,2533,1.745,2534,2.659,2535,1.745,2536,1.745,2537,4.086,2538,2.573,2539,3.603,2540,1.745,2541,2.659,2542,4.086,2543,1.745,2544,1.745,2545,1.745,2546,1.745,2547,1.745,2548,2.659,2549,1.745,2550,1.745,2551,1.745,2552,1.745,2553,2.659,2554,1.745,2555,1.745,2556,1.745,2557,1.745,2558,1.745,2559,1.745,2560,1.745,2561,1.745,2562,1.745,2563,1.745,2564,1.745,2565,1.745,2566,1.745,2567,1.394,2568,1.745,2569,1.745,2570,3.221,2571,1.745,2572,1.745,2573,1.745,2574,1.745,2575,1.745,2576,1.745,2577,1.745,2578,1.745,2579,1.745,2580,2.659,2581,1.745,2582,1.745,2583,1.745,2584,1.745,2585,1.745,2586,1.745,2587,1.394,2588,2.659,2589,1.745,2590,1.745,2591,1.745,2592,1.745,2593,1.745,2594,1.745,2595,1.745,2596,1.745,2597,1.745,2598,2.659,2599,1.745,2600,1.745,2601,1.745,2602,1.745,2603,1.745,2604,1.745,2605,1.745,2606,1.745,2607,1.745,2608,1.745,2609,1.745,2610,1.745,2611,1.745,2612,1.745,2613,1.745,2614,1.745,2615,1.745,2616,1.745,2617,3.221,2618,1.745,2619,1.745,2620,1.745,2621,3.098,2622,1.745,2623,1.745,2624,1.745,2625,1.745,2626,1.745,2627,1.745,2628,1.745,2629,1.745,2630,1.745,2631,1.745,2632,1.745,2633,1.745,2634,1.745,2635,1.745,2636,1.745,2637,1.394,2638,1.745,2639,1.745,2640,1.394,2641,1.745,2642,3.878,2643,1.745,2644,1.745,2645,1.394,2646,1.745,2647,1.745,2648,1.745,2649,1.745,2650,1.745,2651,1.745,2652,1.745,2653,1.607,2654,1.745,2655,1.745,2656,1.745,2657,1.745,2658,1.745,2659,1.745,2660,1.745,2661,1.745,2662,1.745,2663,1.745,2664,1.745,2665,1.745,2666,2.659,2667,4.38,2668,3.603,2669,2.659,2670,2.659,2671,2.659,2672,2.659,2673,1.745,2674,1.745,2675,1.745,2676,1.745,2677,1.745,2678,1.745,2679,2.659,2680,1.745,2681,1.745,2682,1.745,2683,1.745,2684,2.659,2685,1.745,2686,2.659,2687,1.745]],["title/interfaces/TimelineDate.html",[0,0.157,2396,1.817]],["body/interfaces/TimelineDate.html",[0,0.196,2,0.405,3,0.083,4,0.083,5,0.083,21,0.154,22,0.356,29,0.672,30,0.285,31,0.019,32,0.598,33,0.215,36,0.605,37,0.427,59,0.2,67,0.967,68,0.752,70,0.728,85,0.732,96,0.217,101,0.519,108,0.886,109,0.846,111,1.761,116,1.018,121,1.036,122,0.666,123,1.021,130,0.043,134,0.473,137,0.427,139,1.96,143,0.968,144,2.146,147,1.385,152,0.919,163,1.093,172,0.935,174,1.036,178,0.006,183,1.036,184,1.173,197,1.016,205,1.483,207,0.67,221,1.066,224,1.299,232,0.795,238,0.67,252,1.036,262,1.292,264,1.067,272,1.821,284,1.036,297,1.357,316,1.016,321,0.009,322,0.009,328,1.155,344,1.173,351,0.847,365,0.768,368,1.385,370,0.554,377,1.427,378,0.549,384,1.422,388,1.299,389,0.935,405,1.036,439,1.734,440,0.605,457,0.577,472,0.666,487,1.791,489,1.753,509,2.646,525,2.114,566,0.554,569,0.984,570,0.935,571,1.821,575,0.969,576,0.605,577,0.605,579,1.357,581,1.357,582,1.422,583,0.847,588,0.768,594,0.635,599,1.036,609,1.745,610,0.405,619,0.889,620,1.224,628,0.847,631,2.541,633,1.622,647,0.935,648,1.668,666,0.935,684,0.768,688,2.114,689,0.935,693,2.114,694,2.114,696,1.385,697,1.385,698,1.385,699,1.385,700,1.385,701,2.114,703,3.918,704,1.385,705,3.492,706,2.114,709,2.869,717,0.984,720,0.935,726,2.577,728,1.385,737,1.093,740,1.501,741,1.093,743,1.036,747,1.427,748,0.935,753,1.646,758,1.483,760,2.869,761,0.984,766,3.085,767,1.299,768,1.668,777,1.983,786,2.593,790,1.597,809,1.483,813,2.869,817,1.646,818,1.763,822,1.155,825,1.867,827,2.198,828,1.385,829,1.385,830,2.194,831,1.597,847,3.089,849,1.385,850,2.563,851,2.114,852,1.385,853,1.385,855,1.385,856,1.385,857,1.385,861,1.385,862,1.224,863,2.869,865,1.597,866,1.385,867,1.597,868,1.385,869,1.385,870,1.385,871,1.385,872,1.385,880,1.597,888,1.232,889,3.089,892,1.597,896,1.597,897,1.483,900,2.311,904,2.114,907,1.385,908,1.093,909,1.983,910,1.385,911,1.385,912,2.114,913,2.114,914,2.114,915,1.385,916,1.385,917,1.893,918,1.385,919,1.385,942,1.385,950,1.299,969,1.155,972,2.114,973,2.646,985,1.972,995,0.577,1060,3.591,1096,1.231,1097,1.867,1098,1.567,1111,1.036,1114,2.023,1121,2.405,1125,1.983,1131,1.224,1143,0.635,1146,0.806,1188,1.483,1227,1.224,1240,1.385,1267,1.385,1276,1.224,1277,1.483,1329,1.299,1331,2.263,1338,1.483,1352,1.385,1355,1.581,1382,1.483,1429,2.646,1431,1.036,1432,1.483,1433,2.263,1473,0.935,1481,1.036,1485,0.889,1506,0.984,1510,0.889,1584,0.984,1588,1.155,1670,1.597,1672,1.821,1698,3.242,1705,1.597,1748,1.597,1749,1.385,1758,4.393,1911,1.734,1961,1.867,1978,1.224,1979,1.867,1980,1.093,1981,1.224,1984,2.955,1986,2.646,1988,3.307,1989,2.437,1993,2.955,1997,1.224,2001,1.597,2002,1.597,2003,1.597,2004,3.754,2007,1.597,2012,1.597,2013,1.597,2014,1.597,2015,2.437,2016,1.597,2017,1.597,2018,3.307,2019,1.597,2021,1.597,2022,1.597,2023,1.597,2024,2.437,2025,1.597,2026,1.597,2027,1.597,2028,1.597,2029,1.597,2030,1.597,2031,2.437,2032,1.597,2033,1.597,2034,3.562,2038,1.597,2066,1.597,2083,1.734,2089,1.597,2090,2.437,2091,1.597,2094,1.597,2095,1.597,2096,1.597,2098,1.597,2099,1.597,2100,3.307,2101,1.597,2102,1.597,2103,1.597,2104,1.597,2105,1.597,2106,1.597,2107,1.597,2108,1.597,2110,1.597,2112,1.597,2113,1.597,2114,1.597,2115,2.955,2116,2.437,2117,1.597,2128,2.955,2131,3.212,2132,1.299,2133,1.299,2137,2.646,2138,1.734,2139,3.209,2140,1.734,2141,1.734,2144,1.734,2156,1.734,2158,1.734,2159,2.646,2161,1.734,2164,2.646,2165,1.734,2166,3.867,2169,1.983,2175,1.734,2279,1.983,2386,1.385,2387,1.385,2388,2.114,2395,2.577,2396,2.265,2397,2.985,2400,1.385,2410,1.385,2411,1.385,2412,1.385,2413,1.385,2414,1.385,2417,1.385,2422,1.385,2423,1.385,2424,1.385,2425,1.385,2426,1.385,2427,1.385,2428,1.385,2429,1.385,2432,1.385,2442,2.869,2445,1.385,2449,1.385,2453,1.385,2456,1.385,2458,1.299,2486,2.114,2496,1.385,2511,1.385,2538,1.385,2567,1.385,2587,1.385,2621,1.385,2637,1.385,2640,1.385,2645,2.563,2688,1.734,2689,2.908,2690,1.734,2691,2.646,2692,3.527,2693,1.905,2694,1.905,2695,1.905,2696,1.905,2697,1.905,2698,1.905,2699,1.905,2700,2.908,2701,2.908,2702,2.908,2703,2.908,2704,1.905,2705,1.905,2706,1.905,2707,1.905,2708,1.905,2709,3.527,2710,1.905,2711,1.905,2712,5.107,2713,3.947,2714,1.905,2715,1.905,2716,1.905,2717,1.905,2718,1.905,2719,1.905,2720,1.905,2721,1.905,2722,1.905,2723,1.905,2724,4.25,2725,1.905,2726,2.908,2727,2.908,2728,2.908,2729,1.905,2730,1.905,2731,2.908,2732,1.905,2733,1.905,2734,1.905,2735,1.905,2736,2.908,2737,4.66,2738,1.905,2739,2.908,2740,1.905,2741,2.908,2742,1.905,2743,1.905,2744,1.905,2745,2.908,2746,2.908,2747,2.908,2748,3.527,2749,1.905,2750,1.905,2751,1.905,2752,1.905,2753,1.905,2754,5.023,2755,2.908,2756,2.908,2757,1.905,2758,1.905,2759,1.905,2760,1.905,2761,1.905,2762,1.905,2763,2.908,2764,1.905,2765,1.734,2766,1.905,2767,2.908,2768,1.905,2769,3.527,2770,1.905,2771,1.905,2772,1.905,2773,1.905,2774,1.905,2775,1.905,2776,2.908,2777,1.905,2778,1.905,2779,3.947,2780,1.905,2781,1.905,2782,2.908,2783,2.908,2784,2.908,2785,1.905,2786,1.905,2787,1.905,2788,1.905,2789,2.908,2790,1.905,2791,1.905,2792,1.905,2793,1.905,2794,1.905,2795,1.905,2796,1.905,2797,1.905,2798,1.905,2799,1.905,2800,1.905,2801,2.908,2802,1.905,2803,1.905,2804,1.905,2805,1.905,2806,1.905,2807,1.905,2808,1.905,2809,1.905,2810,2.908,2811,1.905,2812,1.905,2813,1.905,2814,1.905,2815,1.905,2816,1.905,2817,1.905,2818,1.905,2819,1.905,2820,1.905,2821,1.905,2822,1.905,2823,3.527,2824,1.905,2825,1.905,2826,1.905,2827,2.908,2828,1.905,2829,1.905,2830,1.905,2831,1.905,2832,1.905,2833,1.905,2834,1.905,2835,1.905,2836,1.905,2837,1.905,2838,2.908,2839,1.905,2840,1.905,2841,1.905,2842,1.905,2843,1.905,2844,1.905,2845,1.905,2846,1.905,2847,1.905,2848,1.905,2849,1.905,2850,1.905,2851,1.905,2852,1.905,2853,1.905,2854,1.905,2855,1.905,2856,1.905,2857,1.905,2858,2.908,2859,2.908,2860,2.908,2861,2.908,2862,1.905,2863,1.905,2864,3.527,2865,1.905,2866,1.905,2867,1.905,2868,1.905,2869,1.905,2870,1.905,2871,1.905,2872,1.905,2873,1.905,2874,1.905,2875,1.905,2876,1.905,2877,1.905,2878,1.905,2879,1.905,2880,1.905,2881,1.905,2882,1.905,2883,1.905,2884,1.905,2885,1.905,2886,1.905,2887,1.905,2888,3.527,2889,1.905,2890,1.905,2891,1.905,2892,1.905,2893,1.905,2894,2.908,2895,1.905,2896,1.905,2897,1.905,2898,1.905,2899,1.905,2900,1.905,2901,1.905,2902,1.905,2903,1.905,2904,1.905,2905,1.905,2906,1.905,2907,1.905,2908,3.527,2909,1.905,2910,1.905,2911,1.905,2912,1.905,2913,1.905,2914,1.905,2915,1.905,2916,2.908,2917,1.905,2918,1.905,2919,1.905,2920,1.905,2921,1.905,2922,1.905,2923,1.905,2924,1.905,2925,1.905,2926,2.908,2927,1.905,2928,1.905,2929,2.908,2930,1.905,2931,1.905,2932,1.905,2933,1.905,2934,1.905,2935,1.905,2936,1.905,2937,1.905,2938,1.905,2939,1.905,2940,2.908,2941,1.905,2942,1.905,2943,2.908,2944,1.905,2945,1.905,2946,1.905,2947,1.905,2948,1.905,2949,2.908,2950,1.905,2951,1.905,2952,3.527,2953,1.905,2954,3.527,2955,1.905,2956,2.908,2957,2.908,2958,1.905,2959,1.734,2960,1.905,2961,1.905,2962,1.734,2963,1.905,2964,1.905,2965,1.905,2966,1.905,2967,1.905,2968,1.905,2969,2.908,2970,4.66,2971,1.905,2972,1.905,2973,1.734,2974,1.734,2975,4.48,2976,3.527,2977,4.66,2978,2.908,2979,1.905,2980,1.905,2981,2.908,2982,1.905,2983,1.905,2984,1.905,2985,1.905,2986,1.905,2987,2.908,2988,1.905]],["title/interfaces/TimelineEvent.html",[0,0.157,2397,1.716]],["body/interfaces/TimelineEvent.html",[0,0.194,2,0.399,3,0.081,4,0.081,5,0.081,21,0.152,22,0.352,23,0.963,29,0.668,30,0.404,31,0.019,32,0.689,33,0.213,36,0.596,37,0.421,59,0.198,67,0.963,68,0.358,70,0.726,85,0.722,96,0.214,101,0.515,108,0.882,109,0.844,111,1.753,116,1.022,121,1.021,122,0.656,123,1.016,130,0.043,134,0.466,137,0.421,139,1.954,143,0.959,144,2.13,147,1.365,152,0.918,163,1.077,172,0.921,174,1.021,178,0.006,183,1.021,184,1.16,197,1.005,205,1.461,207,0.665,221,1.547,224,1.281,232,0.793,238,0.665,252,1.021,262,1.278,264,1.058,272,1.804,284,1.021,297,1.342,316,1.005,321,0.009,322,0.009,328,1.138,344,1.16,351,0.834,365,0.757,368,1.365,370,0.548,377,1.411,378,0.541,384,1.929,388,1.281,389,0.921,405,1.021,439,1.709,440,0.596,457,0.568,472,1.369,487,1.923,489,1.74,509,2.617,525,2.09,566,0.548,569,0.969,570,1.922,571,1.804,575,0.958,576,0.596,577,0.596,579,1.342,581,1.342,582,1.409,583,0.834,588,0.757,594,0.626,599,1.021,609,1.741,610,0.399,619,0.876,620,1.206,628,0.834,631,2.533,633,1.616,647,0.921,648,1.65,666,0.921,684,0.757,688,2.09,689,0.921,693,2.09,694,2.09,696,1.365,697,1.365,698,1.365,699,1.365,700,1.365,701,2.09,703,3.908,704,1.365,705,3.476,706,2.09,709,2.847,717,0.969,720,0.921,726,2.56,728,1.365,737,1.077,740,1.485,741,1.077,743,1.021,747,1.411,748,0.921,753,1.631,758,1.461,760,2.847,761,0.969,766,3.071,767,1.281,768,1.65,777,1.971,786,2.583,790,1.574,809,1.461,813,2.847,817,1.631,818,1.744,822,1.138,825,1.847,827,2.185,828,1.365,829,1.365,830,2.18,831,1.574,847,3.069,849,1.365,850,2.54,851,2.09,852,1.365,853,1.365,855,1.365,856,1.365,857,1.365,861,1.365,862,1.206,863,2.847,865,1.574,866,1.365,867,1.574,868,1.365,869,1.365,870,1.365,871,1.365,872,1.365,880,1.574,888,1.221,889,3.069,892,1.574,896,1.574,897,1.461,900,2.296,904,2.09,907,1.365,908,1.077,909,1.961,910,1.365,911,1.365,912,2.09,913,2.09,914,2.09,915,1.365,916,1.365,917,1.885,918,1.365,919,1.365,942,1.365,950,1.281,969,1.138,972,2.09,973,2.617,985,1.962,995,0.568,1008,1.961,1060,3.564,1096,1.217,1097,1.847,1098,1.553,1111,1.021,1114,2.005,1121,2.384,1125,1.961,1131,1.206,1143,0.626,1146,0.795,1188,1.461,1227,1.206,1240,1.365,1267,1.365,1276,1.206,1277,1.461,1329,1.281,1331,2.238,1338,1.461,1352,1.365,1355,1.564,1382,1.461,1429,2.617,1431,1.021,1432,1.461,1433,2.238,1473,0.921,1481,1.021,1485,0.876,1506,0.969,1510,0.876,1584,0.969,1588,1.138,1670,1.574,1672,1.804,1698,3.233,1705,1.574,1748,1.574,1749,1.365,1758,4.38,1911,1.709,1961,1.847,1978,1.206,1979,1.847,1980,1.077,1981,1.206,1984,2.929,1986,2.617,1988,3.282,1989,2.41,1993,2.929,1997,1.206,2001,1.574,2002,1.574,2003,1.574,2004,3.733,2007,1.574,2012,1.574,2013,1.574,2014,1.574,2015,2.41,2016,1.574,2017,1.574,2018,3.282,2019,1.574,2021,1.574,2022,1.574,2023,1.574,2024,2.41,2025,1.574,2026,1.574,2027,1.574,2028,1.574,2029,1.574,2030,1.574,2031,2.41,2032,1.574,2033,1.574,2034,3.538,2038,1.574,2066,1.574,2083,1.709,2089,1.574,2090,2.41,2091,1.574,2094,1.574,2095,1.574,2096,1.574,2098,1.574,2099,1.574,2100,3.282,2101,1.574,2102,1.574,2103,1.574,2104,1.574,2105,1.574,2106,1.574,2107,1.574,2108,1.574,2110,1.574,2112,1.574,2113,1.574,2114,1.574,2115,2.929,2116,2.41,2117,1.574,2128,2.929,2131,3.203,2132,1.281,2133,1.281,2137,2.617,2138,1.709,2139,3.18,2140,1.709,2141,1.709,2144,1.709,2156,1.709,2158,1.709,2159,2.617,2161,1.709,2164,2.617,2165,1.709,2166,3.842,2169,1.961,2175,1.709,2279,1.961,2386,1.365,2387,1.365,2388,2.09,2395,2.56,2396,1.847,2397,3.033,2400,1.365,2410,1.365,2411,1.365,2412,1.365,2413,1.365,2414,1.365,2417,1.365,2422,1.365,2423,1.365,2424,1.365,2425,1.365,2426,1.365,2427,1.365,2428,1.365,2429,1.365,2432,1.365,2442,2.847,2445,1.365,2449,1.365,2453,1.365,2456,1.365,2458,1.281,2486,2.09,2496,1.365,2511,1.365,2538,1.365,2567,1.365,2587,1.365,2621,1.365,2637,1.365,2640,1.365,2645,2.54,2688,1.709,2689,2.876,2690,1.709,2691,2.617,2692,3.495,2693,3.917,2694,1.878,2695,1.878,2696,1.878,2697,1.878,2698,1.878,2699,1.878,2700,2.876,2701,2.876,2702,2.876,2703,2.876,2704,1.878,2705,1.878,2706,1.878,2707,1.878,2708,1.878,2709,3.495,2710,1.878,2711,1.878,2712,5.089,2713,3.917,2714,1.878,2715,1.878,2716,1.878,2717,1.878,2718,1.878,2719,1.878,2720,1.878,2721,1.878,2722,1.878,2723,1.878,2724,4.222,2725,1.878,2726,2.876,2727,2.876,2728,2.876,2729,1.878,2730,1.878,2731,2.876,2732,1.878,2733,1.878,2734,1.878,2735,1.878,2736,2.876,2737,4.636,2738,1.878,2739,2.876,2740,1.878,2741,2.876,2742,1.878,2743,1.878,2744,1.878,2745,2.876,2746,2.876,2747,2.876,2748,3.495,2749,1.878,2750,1.878,2751,1.878,2752,1.878,2753,1.878,2754,5.003,2755,2.876,2756,2.876,2757,1.878,2758,1.878,2759,1.878,2760,1.878,2761,1.878,2762,1.878,2763,2.876,2764,1.878,2765,1.709,2766,1.878,2767,2.876,2768,1.878,2769,3.495,2770,1.878,2771,1.878,2772,1.878,2773,1.878,2774,1.878,2775,1.878,2776,2.876,2777,1.878,2778,1.878,2779,3.917,2780,1.878,2781,1.878,2782,2.876,2783,2.876,2784,2.876,2785,1.878,2786,1.878,2787,1.878,2788,1.878,2789,2.876,2790,1.878,2791,1.878,2792,1.878,2793,1.878,2794,1.878,2795,1.878,2796,1.878,2797,1.878,2798,1.878,2799,1.878,2800,1.878,2801,2.876,2802,1.878,2803,1.878,2804,1.878,2805,1.878,2806,1.878,2807,1.878,2808,1.878,2809,1.878,2810,2.876,2811,1.878,2812,1.878,2813,1.878,2814,1.878,2815,1.878,2816,1.878,2817,1.878,2818,1.878,2819,1.878,2820,1.878,2821,1.878,2822,1.878,2823,3.495,2824,1.878,2825,1.878,2826,1.878,2827,2.876,2828,1.878,2829,1.878,2830,1.878,2831,1.878,2832,1.878,2833,1.878,2834,1.878,2835,1.878,2836,1.878,2837,1.878,2838,2.876,2839,1.878,2840,1.878,2841,1.878,2842,1.878,2843,1.878,2844,1.878,2845,1.878,2846,1.878,2847,1.878,2848,1.878,2849,1.878,2850,1.878,2851,1.878,2852,1.878,2853,1.878,2854,1.878,2855,1.878,2856,1.878,2857,1.878,2858,2.876,2859,2.876,2860,2.876,2861,2.876,2862,1.878,2863,1.878,2864,3.495,2865,1.878,2866,1.878,2867,1.878,2868,1.878,2869,1.878,2870,1.878,2871,1.878,2872,1.878,2873,1.878,2874,1.878,2875,1.878,2876,1.878,2877,1.878,2878,1.878,2879,1.878,2880,1.878,2881,1.878,2882,1.878,2883,1.878,2884,1.878,2885,1.878,2886,1.878,2887,1.878,2888,3.495,2889,1.878,2890,1.878,2891,1.878,2892,1.878,2893,1.878,2894,2.876,2895,1.878,2896,1.878,2897,1.878,2898,1.878,2899,1.878,2900,1.878,2901,1.878,2902,1.878,2903,1.878,2904,1.878,2905,1.878,2906,1.878,2907,1.878,2908,3.495,2909,1.878,2910,1.878,2911,1.878,2912,1.878,2913,1.878,2914,1.878,2915,1.878,2916,2.876,2917,1.878,2918,1.878,2919,1.878,2920,1.878,2921,1.878,2922,1.878,2923,1.878,2924,1.878,2925,1.878,2926,2.876,2927,1.878,2928,1.878,2929,2.876,2930,1.878,2931,1.878,2932,1.878,2933,1.878,2934,1.878,2935,1.878,2936,1.878,2937,1.878,2938,1.878,2939,1.878,2940,2.876,2941,1.878,2942,1.878,2943,2.876,2944,1.878,2945,1.878,2946,1.878,2947,1.878,2948,1.878,2949,2.876,2950,1.878,2951,1.878,2952,3.495,2953,1.878,2954,3.495,2955,1.878,2956,2.876,2957,2.876,2958,1.878,2959,1.709,2960,1.878,2961,1.878,2962,1.709,2963,1.878,2964,1.878,2965,1.878,2966,1.878,2967,1.878,2968,1.878,2969,2.876,2970,4.636,2971,1.878,2972,1.878,2973,1.709,2974,1.709,2975,4.454,2976,3.495,2977,4.636,2978,2.876,2979,1.878,2980,1.878,2981,2.876,2982,1.878,2983,1.878,2984,1.878,2985,1.878,2986,1.878,2987,2.876,2988,1.878]],["title/interfaces/TimelineEventAggregation.html",[0,0.157,2405,2.057]],["body/interfaces/TimelineEventAggregation.html",[0,0.22,2,0.407,3,0.083,4,0.083,5,0.083,12,1.121,19,0.982,21,0.154,22,0.357,23,0.796,29,0.593,30,0.388,31,0.019,32,0.781,33,0.265,34,2.227,35,2.72,36,0.607,37,0.429,45,1.195,46,0.385,47,1.586,48,2.028,49,0.579,50,0.62,51,0.525,57,1.449,59,0.236,61,0.701,64,1.097,67,0.712,69,0.607,70,0.599,96,0.402,97,1.305,98,1.506,99,2.289,100,0.735,101,0.648,107,1.554,108,0.999,109,0.913,115,0.841,116,0.887,123,1.209,128,2.539,129,1.586,130,0.043,134,0.982,137,0.429,138,1.101,143,1.32,144,1.586,148,1.595,152,0.887,155,1.39,156,1.39,157,1.39,174,1.04,176,1.097,178,0.014,184,1.176,187,1.39,188,1.39,191,1.39,197,1.235,207,0.671,218,1.234,219,1.39,220,3.06,221,1.296,232,0.767,238,0.325,252,1.586,263,0.525,264,0.883,272,0.987,273,0.81,281,1.197,289,0.668,291,0.701,295,0.637,303,2.57,316,1.382,321,0.006,322,0.009,326,1.734,328,1.16,330,1.52,331,0.525,334,1.296,337,1.234,365,0.771,369,0.938,370,0.556,371,0.637,376,2.963,377,1.431,378,0.841,384,1.94,389,0.938,390,2.028,412,1.176,414,0.771,416,1.228,418,0.771,419,1.228,420,1.359,423,2.041,440,0.607,457,0.579,471,1.305,472,1.019,473,1.768,487,1.849,489,0.85,510,2.963,528,2.537,566,0.673,570,2.36,575,0.972,576,0.607,577,0.607,579,0.893,581,0.893,582,0.771,583,1.296,588,0.771,594,0.637,596,1.228,609,1.755,610,0.407,631,2.418,633,1.482,657,1.674,659,0.893,684,2.062,689,0.938,717,0.987,720,0.938,736,1.39,737,1.097,740,1.506,741,1.097,743,1.04,747,1.431,748,0.938,753,1.361,768,1.673,769,1.39,777,0.893,780,2.398,786,2.198,791,1.305,817,1.361,819,2.442,822,1.768,824,1.097,825,1.873,830,0.987,862,1.228,875,1.488,888,1.019,900,1.922,908,1.097,917,1.725,969,1.16,985,1.496,986,1.506,997,1.04,1008,1.989,1058,1.488,1096,1.234,1111,1.586,1114,2.677,1138,2.418,1143,1.317,1146,0.81,1166,0.771,1178,1.39,1185,1.39,1336,1.305,1337,1.305,1345,1.39,1355,1.04,1361,1.39,1366,0.81,1384,0.938,1410,1.39,1473,0.938,1476,1.571,1477,0.893,1479,1.734,1480,1.65,1485,0.893,1493,1.097,1540,0.81,1652,2.57,1654,2.57,1655,1.768,1656,1.04,1668,1.16,1671,1.16,1672,2.544,1673,1.16,1674,1.16,1675,1.16,1676,1.16,1677,1.16,1678,1.16,1695,1.305,1698,3.099,1712,1.488,1716,1.39,1755,1.488,1760,1.305,1913,2.411,1914,1.989,1917,1.603,1961,1.873,1978,1.228,1979,2.27,1980,1.097,1981,1.228,1990,1.488,1997,1.228,2000,1.488,2035,1.488,2121,1.488,2122,1.39,2130,1.39,2131,3.54,2132,1.305,2133,1.305,2169,1.305,2279,1.989,2305,2.444,2318,1.603,2332,1.603,2358,2.963,2384,3.496,2385,1.488,2386,2.12,2387,2.12,2388,2.57,2389,4.377,2390,3.598,2391,1.741,2392,5.076,2393,2.654,2394,1.741,2395,2.398,2396,2.27,2397,2.829,2398,3.095,2399,3.598,2400,1.39,2401,2.654,2402,1.741,2403,1.741,2404,3.261,2405,3.095,2406,3.598,2407,3.598,2408,2.444,2409,2.444,2410,3.392,2411,1.39,2412,1.39,2413,1.39,2414,1.39,2415,5.163,2416,1.741,2417,2.57,2418,1.741,2419,2.654,2420,1.741,2421,1.741,2422,1.39,2423,1.39,2424,1.39,2425,1.39,2426,1.39,2427,2.12,2428,1.39,2429,1.39,2430,1.741,2431,3.598,2432,2.12,2433,1.741,2434,1.741,2435,1.741,2436,1.741,2437,1.741,2438,2.654,2439,1.741,2440,1.741,2441,1.741,2442,1.39,2443,1.741,2444,1.741,2445,1.39,2446,2.654,2447,2.654,2448,1.741,2449,3.095,2450,1.741,2451,3.598,2452,1.741,2453,1.39,2454,1.741,2455,2.654,2456,1.39,2457,1.741,2458,1.305,2459,1.741,2460,2.654,2461,1.741,2462,1.741,2463,1.741,2464,1.741,2465,1.741,2466,1.741,2467,1.741,2468,1.741,2469,1.741,2470,1.741,2471,1.741,2472,1.741,2473,1.741,2474,1.741,2475,2.654,2476,1.741,2477,1.741,2478,1.741,2479,1.741,2480,1.741,2481,1.741,2482,1.741,2483,1.741,2484,1.741,2485,1.741,2486,1.39,2487,2.654,2488,1.741,2489,3.217,2490,2.654,2491,3.874,2492,1.741,2493,2.654,2494,4.824,2495,1.741,2496,1.39,2497,1.741,2498,1.741,2499,2.654,2500,1.741,2501,3.598,2502,1.741,2503,2.654,2504,2.654,2505,1.741,2506,2.654,2507,1.741,2508,3.217,2509,3.217,2510,2.654,2511,1.39,2512,1.741,2513,1.741,2514,1.741,2515,1.741,2516,1.741,2517,1.741,2518,1.741,2519,1.741,2520,2.654,2521,1.741,2522,1.741,2523,2.654,2524,2.654,2525,1.741,2526,2.654,2527,2.654,2528,1.741,2529,1.741,2530,1.741,2531,1.741,2532,1.741,2533,1.741,2534,2.654,2535,1.741,2536,1.741,2537,4.083,2538,2.57,2539,3.598,2540,1.741,2541,2.654,2542,4.083,2543,1.741,2544,1.741,2545,1.741,2546,1.741,2547,1.741,2548,2.654,2549,1.741,2550,1.741,2551,1.741,2552,1.741,2553,2.654,2554,1.741,2555,1.741,2556,1.741,2557,1.741,2558,1.741,2559,1.741,2560,1.741,2561,1.741,2562,1.741,2563,1.741,2564,1.741,2565,1.741,2566,1.741,2567,1.39,2568,1.741,2569,1.741,2570,3.217,2571,1.741,2572,1.741,2573,1.741,2574,1.741,2575,1.741,2576,1.741,2577,1.741,2578,1.741,2579,1.741,2580,2.654,2581,1.741,2582,1.741,2583,1.741,2584,1.741,2585,1.741,2586,1.741,2587,1.39,2588,2.654,2589,1.741,2590,1.741,2591,1.741,2592,1.741,2593,1.741,2594,1.741,2595,1.741,2596,1.741,2597,1.741,2598,2.654,2599,1.741,2600,1.741,2601,1.741,2602,1.741,2603,1.741,2604,1.741,2605,1.741,2606,1.741,2607,1.741,2608,1.741,2609,1.741,2610,1.741,2611,1.741,2612,1.741,2613,1.741,2614,1.741,2615,1.741,2616,1.741,2617,3.217,2618,1.741,2619,1.741,2620,1.741,2621,3.095,2622,1.741,2623,1.741,2624,1.741,2625,1.741,2626,1.741,2627,1.741,2628,1.741,2629,1.741,2630,1.741,2631,1.741,2632,1.741,2633,1.741,2634,1.741,2635,1.741,2636,1.741,2637,1.39,2638,1.741,2639,1.741,2640,1.39,2641,1.741,2642,3.874,2643,1.741,2644,1.741,2645,1.39,2646,1.741,2647,1.741,2648,1.741,2649,1.741,2650,1.741,2651,1.741,2652,1.741,2653,1.603,2654,1.741,2655,1.741,2656,1.741,2657,1.741,2658,1.741,2659,1.741,2660,1.741,2661,1.741,2662,1.741,2663,1.741,2664,1.741,2665,1.741,2666,2.654,2667,4.377,2668,3.598,2669,2.654,2670,2.654,2671,2.654,2672,2.654,2673,1.741,2674,1.741,2675,1.741,2676,1.741,2677,1.741,2678,1.741,2679,2.654,2680,1.741,2681,1.741,2682,1.741,2683,1.741,2684,2.654,2685,1.741,2686,2.654,2687,1.741]],["title/interfaces/TimelineRecords.html",[0,0.157,2404,2.057]],["body/interfaces/TimelineRecords.html",[0,0.22,2,0.406,3,0.083,4,0.083,5,0.083,12,1.12,19,1.114,21,0.154,22,0.357,23,0.903,29,0.593,30,0.398,31,0.019,32,0.781,33,0.265,34,2.216,35,2.719,36,0.607,37,0.428,45,1.195,46,0.385,47,1.585,48,2.027,49,0.578,50,0.619,51,0.525,57,1.449,59,0.236,61,0.7,64,1.096,67,0.711,69,0.607,70,0.598,96,0.402,97,1.303,98,1.505,99,2.288,100,0.735,101,0.648,107,1.554,108,0.999,109,0.913,115,0.84,116,0.887,123,1.209,128,2.538,129,1.585,130,0.043,134,0.982,137,0.428,138,1.101,143,1.32,144,1.585,148,1.594,152,0.887,155,1.389,156,1.389,157,1.389,174,1.039,176,1.096,178,0.014,184,1.175,187,1.389,188,1.389,191,1.389,197,1.235,207,0.671,218,1.233,219,1.389,220,3.059,221,1.644,232,0.767,238,0.324,252,1.585,263,0.525,264,0.882,272,0.986,273,0.809,281,1.196,289,0.668,291,0.7,295,0.637,303,2.568,316,1.381,321,0.006,322,0.009,326,1.733,328,1.159,330,1.519,331,0.525,334,1.295,337,1.233,365,0.771,369,0.938,370,0.555,371,0.637,376,2.961,377,1.43,378,0.84,384,1.939,389,0.938,390,2.027,412,1.175,414,0.771,416,1.227,418,0.771,419,1.227,420,1.724,423,2.04,440,0.607,457,0.578,471,1.303,472,1.018,473,1.767,487,1.849,489,0.849,510,2.961,528,2.536,566,0.673,570,2.359,575,0.971,576,0.607,577,0.607,579,0.892,581,0.892,582,0.771,583,1.295,588,0.771,594,0.637,596,1.227,609,1.755,610,0.406,631,2.417,633,1.481,657,1.673,659,0.892,684,2.061,689,0.938,717,0.986,720,0.938,736,1.389,737,1.096,740,1.505,741,1.096,743,1.039,747,1.43,748,0.938,753,1.36,768,1.672,769,1.389,777,0.892,780,2.396,786,2.197,791,1.303,817,1.36,819,2.441,822,1.767,824,1.096,825,1.872,830,0.986,862,1.227,875,1.487,888,1.018,900,1.921,908,1.096,917,1.724,969,1.159,985,1.495,986,1.505,997,1.039,1008,1.988,1058,1.487,1096,1.233,1111,1.585,1114,2.676,1138,2.417,1143,1.317,1146,0.809,1166,0.771,1178,1.389,1185,1.389,1336,1.303,1337,1.303,1345,1.389,1355,1.039,1361,1.389,1366,0.809,1384,0.938,1410,1.389,1473,0.938,1476,1.57,1477,0.892,1479,1.733,1480,1.649,1485,0.892,1493,1.096,1540,0.809,1652,2.568,1654,2.568,1655,1.767,1656,1.039,1668,1.159,1671,1.159,1672,2.544,1673,1.159,1674,1.159,1675,1.159,1676,1.159,1677,1.159,1678,1.159,1695,1.303,1698,3.099,1712,1.487,1716,1.389,1755,1.487,1760,1.303,1913,2.41,1914,1.988,1917,1.601,1961,1.872,1978,1.227,1979,2.269,1980,1.096,1981,1.227,1990,1.487,1997,1.227,2000,1.487,2035,1.487,2121,1.487,2122,1.389,2130,1.389,2131,3.54,2132,1.303,2133,1.303,2169,1.303,2279,1.988,2305,2.442,2318,1.601,2332,1.601,2358,2.961,2384,3.495,2385,1.487,2386,2.119,2387,2.119,2388,2.568,2389,4.376,2390,3.597,2391,1.739,2392,5.075,2393,2.652,2394,1.739,2395,2.396,2396,2.269,2397,2.828,2398,3.093,2399,3.597,2400,1.389,2401,2.652,2402,1.739,2403,1.739,2404,3.39,2405,2.873,2406,1.739,2407,1.739,2408,2.442,2409,2.442,2410,3.39,2411,1.389,2412,1.389,2413,1.389,2414,1.389,2415,5.163,2416,1.739,2417,2.568,2418,1.739,2419,2.652,2420,1.739,2421,1.739,2422,1.389,2423,1.389,2424,1.389,2425,1.389,2426,1.389,2427,2.119,2428,1.389,2429,1.389,2430,1.739,2431,3.597,2432,2.119,2433,1.739,2434,1.739,2435,1.739,2436,1.739,2437,1.739,2438,2.652,2439,1.739,2440,1.739,2441,1.739,2442,1.389,2443,1.739,2444,1.739,2445,1.389,2446,2.652,2447,2.652,2448,1.739,2449,3.093,2450,1.739,2451,3.597,2452,1.739,2453,1.389,2454,1.739,2455,2.652,2456,1.389,2457,1.739,2458,1.303,2459,1.739,2460,2.652,2461,1.739,2462,1.739,2463,1.739,2464,1.739,2465,1.739,2466,1.739,2467,1.739,2468,1.739,2469,1.739,2470,1.739,2471,1.739,2472,1.739,2473,1.739,2474,1.739,2475,2.652,2476,1.739,2477,1.739,2478,1.739,2479,1.739,2480,1.739,2481,1.739,2482,1.739,2483,1.739,2484,1.739,2485,1.739,2486,1.389,2487,2.652,2488,1.739,2489,3.215,2490,2.652,2491,3.872,2492,1.739,2493,2.652,2494,4.824,2495,1.739,2496,1.389,2497,1.739,2498,1.739,2499,2.652,2500,1.739,2501,3.597,2502,1.739,2503,2.652,2504,2.652,2505,1.739,2506,2.652,2507,1.739,2508,3.215,2509,3.215,2510,2.652,2511,1.389,2512,1.739,2513,1.739,2514,1.739,2515,1.739,2516,1.739,2517,1.739,2518,1.739,2519,1.739,2520,2.652,2521,1.739,2522,1.739,2523,2.652,2524,2.652,2525,1.739,2526,2.652,2527,2.652,2528,1.739,2529,1.739,2530,1.739,2531,1.739,2532,1.739,2533,1.739,2534,2.652,2535,1.739,2536,1.739,2537,4.081,2538,2.568,2539,3.597,2540,1.739,2541,2.652,2542,4.081,2543,1.739,2544,1.739,2545,1.739,2546,1.739,2547,1.739,2548,2.652,2549,1.739,2550,1.739,2551,1.739,2552,1.739,2553,2.652,2554,1.739,2555,1.739,2556,1.739,2557,1.739,2558,1.739,2559,1.739,2560,1.739,2561,1.739,2562,1.739,2563,1.739,2564,1.739,2565,1.739,2566,1.739,2567,1.389,2568,1.739,2569,1.739,2570,3.215,2571,1.739,2572,1.739,2573,1.739,2574,1.739,2575,1.739,2576,1.739,2577,1.739,2578,1.739,2579,1.739,2580,2.652,2581,1.739,2582,1.739,2583,1.739,2584,1.739,2585,1.739,2586,1.739,2587,1.389,2588,2.652,2589,1.739,2590,1.739,2591,1.739,2592,1.739,2593,1.739,2594,1.739,2595,1.739,2596,1.739,2597,1.739,2598,2.652,2599,1.739,2600,1.739,2601,1.739,2602,1.739,2603,1.739,2604,1.739,2605,1.739,2606,1.739,2607,1.739,2608,1.739,2609,1.739,2610,1.739,2611,1.739,2612,1.739,2613,1.739,2614,1.739,2615,1.739,2616,1.739,2617,3.215,2618,1.739,2619,1.739,2620,1.739,2621,3.093,2622,1.739,2623,1.739,2624,1.739,2625,1.739,2626,1.739,2627,1.739,2628,1.739,2629,1.739,2630,1.739,2631,1.739,2632,1.739,2633,1.739,2634,1.739,2635,1.739,2636,1.739,2637,1.389,2638,1.739,2639,1.739,2640,1.389,2641,1.739,2642,3.872,2643,1.739,2644,1.739,2645,1.389,2646,1.739,2647,1.739,2648,1.739,2649,1.739,2650,1.739,2651,1.739,2652,1.739,2653,1.601,2654,1.739,2655,1.739,2656,1.739,2657,1.739,2658,1.739,2659,1.739,2660,1.739,2661,1.739,2662,1.739,2663,1.739,2664,1.739,2665,1.739,2666,2.652,2667,4.376,2668,3.597,2669,2.652,2670,2.652,2671,2.652,2672,2.652,2673,1.739,2674,1.739,2675,1.739,2676,1.739,2677,1.739,2678,1.739,2679,2.652,2680,1.739,2681,1.739,2682,1.739,2683,1.739,2684,2.652,2685,1.739,2686,2.652,2687,1.739]],["title/interfaces/TimelineSeries.html",[0,0.157,2395,1.716]],["body/interfaces/TimelineSeries.html",[0,0.195,2,0.401,3,0.082,4,0.082,5,0.082,21,0.152,22,0.354,23,0.791,29,0.719,30,0.405,31,0.019,32,0.653,33,0.214,36,0.599,37,0.423,59,0.199,67,0.964,68,0.36,70,0.727,85,0.726,96,0.447,101,0.516,108,0.884,109,0.845,111,1.756,116,1.01,121,1.026,122,0.66,123,1.018,130,0.043,134,0.469,137,0.423,139,1.956,143,0.962,144,2.136,147,1.372,152,0.918,163,1.083,172,0.926,174,1.026,178,0.006,183,1.026,184,1.164,197,1.009,205,1.469,207,0.666,221,1.058,224,1.287,232,0.794,238,0.666,252,1.026,262,1.283,264,1.061,272,1.81,284,1.026,297,1.347,316,1.009,321,0.009,322,0.009,328,1.144,344,1.164,351,0.839,365,0.761,368,1.372,370,0.55,377,1.416,378,0.544,384,1.414,388,1.287,389,0.926,405,1.026,439,1.717,440,0.599,457,0.571,472,0.66,487,1.785,489,1.745,509,2.627,525,2.099,566,0.55,569,0.974,570,0.926,571,1.81,575,0.962,576,0.599,577,0.599,579,1.347,581,1.347,582,1.414,583,0.839,588,0.761,594,0.629,599,1.026,609,1.743,610,0.401,619,0.881,620,1.212,628,0.839,631,2.536,633,1.618,647,0.926,648,1.656,666,0.926,684,0.761,688,2.099,689,0.926,693,2.099,694,2.099,696,1.372,697,1.372,698,1.372,699,1.372,700,1.372,701,2.099,703,3.911,704,1.372,705,3.482,706,2.099,709,2.855,717,0.974,720,0.926,726,2.566,728,1.372,737,1.083,740,1.49,741,1.083,743,1.026,747,1.416,748,0.926,753,1.636,758,1.469,760,2.855,761,0.974,766,3.076,767,1.287,768,1.656,777,1.975,786,2.586,790,1.582,809,1.469,813,2.855,817,1.636,818,1.75,822,1.144,825,1.854,827,2.19,828,1.372,829,1.372,830,2.185,831,1.582,847,3.076,849,1.372,850,2.549,851,2.099,852,1.372,853,1.372,855,1.372,856,1.372,857,1.372,861,1.372,862,1.212,863,2.855,865,1.582,866,1.372,867,1.582,868,1.372,869,1.372,870,1.372,871,1.372,872,1.372,880,1.582,888,1.225,889,3.076,892,1.582,896,1.582,897,1.469,900,2.301,904,2.099,907,1.372,908,1.083,909,1.969,910,1.372,911,1.372,912,2.099,913,2.099,914,2.099,915,1.372,916,1.372,917,1.887,918,1.372,919,1.372,942,1.372,950,1.287,969,1.144,972,2.099,973,2.627,985,1.965,995,0.571,1008,2.678,1060,3.574,1096,1.222,1097,1.854,1098,1.558,1111,1.026,1114,2.011,1121,2.391,1125,1.969,1131,1.212,1143,0.629,1146,0.799,1188,1.469,1227,1.212,1240,1.372,1267,1.372,1276,1.212,1277,1.469,1329,1.287,1331,2.247,1338,1.469,1352,1.372,1355,1.57,1382,1.469,1429,2.627,1431,1.026,1432,1.469,1433,2.247,1473,0.926,1481,1.026,1485,0.881,1506,0.974,1510,0.881,1584,0.974,1588,1.144,1670,1.582,1672,1.81,1698,3.236,1705,1.582,1748,1.582,1749,1.372,1758,4.385,1911,1.717,1961,1.854,1978,1.212,1979,1.854,1980,1.083,1981,1.212,1984,2.938,1986,2.627,1988,3.291,1989,2.42,1993,2.938,1997,1.212,2001,1.582,2002,1.582,2003,1.582,2004,3.74,2007,1.582,2012,1.582,2013,1.582,2014,1.582,2015,2.42,2016,1.582,2017,1.582,2018,3.291,2019,1.582,2021,1.582,2022,1.582,2023,1.582,2024,2.42,2025,1.582,2026,1.582,2027,1.582,2028,1.582,2029,1.582,2030,1.582,2031,2.42,2032,1.582,2033,1.582,2034,3.547,2038,1.582,2066,1.582,2083,1.717,2089,1.582,2090,2.42,2091,1.582,2094,1.582,2095,1.582,2096,1.582,2098,1.582,2099,1.582,2100,3.291,2101,1.582,2102,1.582,2103,1.582,2104,1.582,2105,1.582,2106,1.582,2107,1.582,2108,1.582,2110,1.582,2112,1.582,2113,1.582,2114,1.582,2115,2.938,2116,2.42,2117,1.582,2128,2.938,2131,2.977,2132,1.287,2133,1.287,2137,2.627,2138,1.717,2139,3.19,2140,1.717,2141,1.717,2144,1.717,2156,1.717,2158,1.717,2159,2.627,2161,1.717,2164,2.627,2165,1.717,2166,3.851,2169,1.969,2175,1.717,2279,2.886,2386,2.855,2387,2.855,2388,3.076,2395,2.706,2396,2.522,2397,2.977,2400,1.372,2410,1.372,2411,1.372,2412,1.372,2413,1.372,2414,1.372,2417,1.372,2422,1.372,2423,1.372,2424,1.372,2425,1.372,2426,1.372,2427,1.372,2428,1.372,2429,1.372,2432,1.372,2442,2.855,2445,1.372,2449,1.372,2453,1.372,2456,1.372,2458,1.287,2486,2.099,2496,1.372,2511,1.372,2538,1.372,2567,1.372,2587,1.372,2621,1.372,2637,1.372,2640,1.372,2645,2.549,2688,1.717,2689,2.887,2690,1.717,2691,2.627,2692,3.506,2693,1.887,2694,1.887,2695,1.887,2696,1.887,2697,1.887,2698,1.887,2699,1.887,2700,2.887,2701,2.887,2702,2.887,2703,2.887,2704,1.887,2705,1.887,2706,1.887,2707,1.887,2708,1.887,2709,3.506,2710,1.887,2711,1.887,2712,5.095,2713,3.927,2714,1.887,2715,1.887,2716,1.887,2717,1.887,2718,1.887,2719,1.887,2720,1.887,2721,1.887,2722,1.887,2723,1.887,2724,4.232,2725,1.887,2726,2.887,2727,2.887,2728,2.887,2729,1.887,2730,1.887,2731,2.887,2732,1.887,2733,1.887,2734,1.887,2735,1.887,2736,2.887,2737,4.644,2738,1.887,2739,2.887,2740,1.887,2741,2.887,2742,1.887,2743,1.887,2744,1.887,2745,2.887,2746,2.887,2747,2.887,2748,3.506,2749,1.887,2750,1.887,2751,1.887,2752,1.887,2753,1.887,2754,5.01,2755,2.887,2756,2.887,2757,1.887,2758,1.887,2759,1.887,2760,1.887,2761,1.887,2762,1.887,2763,2.887,2764,1.887,2765,1.717,2766,1.887,2767,2.887,2768,1.887,2769,3.506,2770,1.887,2771,1.887,2772,1.887,2773,1.887,2774,1.887,2775,1.887,2776,2.887,2777,1.887,2778,1.887,2779,3.927,2780,1.887,2781,1.887,2782,2.887,2783,2.887,2784,2.887,2785,1.887,2786,1.887,2787,1.887,2788,1.887,2789,2.887,2790,1.887,2791,1.887,2792,1.887,2793,1.887,2794,1.887,2795,1.887,2796,1.887,2797,1.887,2798,1.887,2799,1.887,2800,1.887,2801,2.887,2802,1.887,2803,1.887,2804,1.887,2805,1.887,2806,1.887,2807,1.887,2808,1.887,2809,1.887,2810,2.887,2811,1.887,2812,1.887,2813,1.887,2814,1.887,2815,1.887,2816,1.887,2817,1.887,2818,1.887,2819,1.887,2820,1.887,2821,1.887,2822,1.887,2823,3.506,2824,1.887,2825,1.887,2826,1.887,2827,2.887,2828,1.887,2829,1.887,2830,1.887,2831,1.887,2832,1.887,2833,1.887,2834,1.887,2835,1.887,2836,1.887,2837,1.887,2838,2.887,2839,1.887,2840,1.887,2841,1.887,2842,1.887,2843,1.887,2844,1.887,2845,1.887,2846,1.887,2847,1.887,2848,1.887,2849,1.887,2850,1.887,2851,1.887,2852,1.887,2853,1.887,2854,1.887,2855,1.887,2856,1.887,2857,1.887,2858,2.887,2859,2.887,2860,2.887,2861,2.887,2862,1.887,2863,1.887,2864,3.506,2865,1.887,2866,1.887,2867,1.887,2868,1.887,2869,1.887,2870,1.887,2871,1.887,2872,1.887,2873,1.887,2874,1.887,2875,1.887,2876,1.887,2877,1.887,2878,1.887,2879,1.887,2880,1.887,2881,1.887,2882,1.887,2883,1.887,2884,1.887,2885,1.887,2886,1.887,2887,1.887,2888,3.506,2889,1.887,2890,1.887,2891,1.887,2892,1.887,2893,1.887,2894,2.887,2895,1.887,2896,1.887,2897,1.887,2898,1.887,2899,1.887,2900,1.887,2901,1.887,2902,1.887,2903,1.887,2904,1.887,2905,1.887,2906,1.887,2907,1.887,2908,3.506,2909,1.887,2910,1.887,2911,1.887,2912,1.887,2913,1.887,2914,1.887,2915,1.887,2916,2.887,2917,1.887,2918,1.887,2919,1.887,2920,1.887,2921,1.887,2922,1.887,2923,1.887,2924,1.887,2925,1.887,2926,2.887,2927,1.887,2928,1.887,2929,2.887,2930,1.887,2931,1.887,2932,1.887,2933,1.887,2934,1.887,2935,1.887,2936,1.887,2937,1.887,2938,1.887,2939,1.887,2940,2.887,2941,1.887,2942,1.887,2943,2.887,2944,1.887,2945,1.887,2946,1.887,2947,1.887,2948,1.887,2949,2.887,2950,1.887,2951,1.887,2952,3.506,2953,1.887,2954,3.506,2955,1.887,2956,2.887,2957,2.887,2958,1.887,2959,1.717,2960,1.887,2961,1.887,2962,1.717,2963,1.887,2964,1.887,2965,1.887,2966,1.887,2967,1.887,2968,1.887,2969,2.887,2970,4.644,2971,1.887,2972,1.887,2973,1.717,2974,1.717,2975,4.463,2976,3.506,2977,4.644,2978,2.887,2979,1.887,2980,1.887,2981,2.887,2982,1.887,2983,1.887,2984,1.887,2985,1.887,2986,1.887,2987,2.887,2988,1.887]],["title/interfaces/VisEvent.html",[0,0.157,2989,2.83]],["body/interfaces/VisEvent.html",[0,0.196,2,0.526,3,0.153,4,0.107,5,0.107,8,1.277,10,2.564,21,0.2,22,0.503,28,2.639,29,0.529,30,0.382,31,0.019,32,0.692,33,0.281,36,0.786,37,0.555,38,1.064,39,1.171,41,1.565,42,1.422,43,1.589,44,1.155,45,1.357,46,0.498,49,0.749,50,0.75,51,0.679,54,1.293,57,1.642,59,0.208,61,0.907,67,1.077,68,0.471,70,0.713,76,1.688,84,1.799,92,1.422,94,1.688,95,1.932,96,0.467,97,1.688,98,1.821,101,0.742,102,1.932,109,0.809,110,2.074,114,2.313,115,0.874,116,0.852,119,1.589,122,0.865,123,0.874,127,1.589,130,0.056,133,2.252,135,1.155,137,0.555,138,1.196,139,1.642,144,1.918,145,1.821,148,0.998,152,0.864,163,1.419,178,0.015,183,1.346,184,1.657,197,0.865,207,0.599,232,0.371,238,0.599,244,1.356,249,1.925,250,1.646,261,1.293,262,1.826,263,1.128,264,0.749,281,1.618,282,1.5,289,1.436,290,1.918,291,1.506,295,1.492,297,1.155,306,1.293,313,3.209,316,1.655,321,0.008,322,0.011,334,1.099,344,1.422,368,1.799,374,1.799,375,1.756,378,0.713,392,2.956,399,2.773,403,1.918,405,1.346,440,0.786,457,0.749,468,1.799,566,0.783,569,1.277,575,1.175,576,0.786,577,0.786,588,0.998,591,2.074,592,2.956,594,0.824,596,2.265,609,1.563,610,0.526,621,2.57,628,1.099,631,2.198,633,1.609,634,2.252,657,1.493,670,1.067,680,1.346,740,2.122,750,2.252,753,1.918,780,2.871,786,2.615,817,1.918,819,2.023,900,1.346,942,1.799,958,5.02,985,1.047,993,2.252,995,0.749,1062,2.474,1096,1.493,1097,2.265,1098,2.104,1111,1.918,1114,2.023,1131,1.589,1142,2.252,1146,1.047,1227,1.589,1240,1.799,1265,2.252,1307,2.252,1336,2.405,1352,2.564,1354,2.252,1379,2.474,1406,2.074,1448,2.773,1461,3.952,1474,2.323,1475,1.688,1476,2.104,1477,1.155,1478,2.405,1479,2.323,1480,2.21,1481,1.346,1482,2.265,1499,1.688,1504,1.419,1505,1.688,1510,1.155,1511,2.639,1514,1.688,1540,1.493,1655,2.492,1656,1.346,1668,1.5,1671,1.5,1672,1.277,1673,2.138,1674,1.5,1675,1.5,1676,1.5,1677,1.5,1678,1.5,1826,2.773,1905,4.606,1913,1.688,1914,1.688,1969,4.11,2036,4.11,2039,2.474,2122,2.987,2131,1.5,2168,5.02,2296,3.209,2458,2.803,2690,2.252,2691,3.74,2765,2.252,2959,2.252,2962,3.74,2974,2.252,2989,4.11,2990,2.474,2991,4.598,2992,4.598,2993,3.226,2994,5.358,2995,4.598,2996,3.226,2997,6.872,2998,3.952,2999,2.773,3000,3.226,3001,3.226,3002,3.226,3003,3.226,3004,3.226,3005,4.598,3006,4.598,3007,3.226,3008,4.598,3009,4.598,3010,3.226,3011,3.226,3012,3.226,3013,3.226,3014,3.226,3015,3.226,3016,3.226,3017,3.226,3018,3.226,3019,6.605,3020,3.226,3021,3.226,3022,3.226,3023,3.226,3024,3.226,3025,3.226,3026,6.174,3027,3.226,3028,3.226,3029,3.226,3030,3.226,3031,5.358,3032,5.84,3033,5.358,3034,5.358,3035,3.226,3036,4.598,3037,3.226,3038,3.226,3039,3.226,3040,4.598,3041,4.598,3042,3.226,3043,4.598,3044,3.226,3045,3.226,3046,3.226,3047,3.226,3048,3.226,3049,3.226,3050,3.226,3051,3.226,3052,3.226,3053,3.226,3054,3.226,3055,3.226,3056,3.226,3057,4.598,3058,4.598,3059,3.226,3060,5.84,3061,3.226,3062,3.226,3063,2.773,3064,3.226,3065,3.226,3066,3.226,3067,3.226,3068,3.226,3069,3.226,3070,4.598,3071,4.598,3072,3.226,3073,3.226,3074,3.226,3075,3.226,3076,3.226,3077,4.598,3078,3.226,3079,3.226,3080,3.226,3081,3.226,3082,3.226,3083,3.226,3084,3.226,3085,3.226,3086,3.226,3087,3.226,3088,3.226,3089,3.226,3090,3.226,3091,3.226,3092,3.226,3093,4.598,3094,5.358,3095,3.226,3096,3.226,3097,3.226,3098,3.226,3099,3.226,3100,3.226,3101,3.226,3102,3.226,3103,3.226,3104,3.226,3105,3.226,3106,3.226,3107,3.226,3108,3.226,3109,3.226,3110,3.226,3111,3.226,3112,3.226,3113,3.226,3114,3.226,3115,3.226,3116,3.226,3117,3.226,3118,3.226,3119,3.226,3120,3.226,3121,3.226,3122,3.226,3123,3.226,3124,3.226,3125,3.226,3126,3.226,3127,3.226,3128,3.226,3129,3.226,3130,3.226,3131,3.226,3132,3.226,3133,3.226,3134,3.226,3135,4.598,3136,3.226,3137,4.598,3138,3.226,3139,4.598,3140,3.226,3141,4.598,3142,3.226,3143,4.598,3144,3.226,3145,3.226,3146,3.226,3147,3.226,3148,3.226,3149,5.84,3150,5.84,3151,5.84,3152,3.226,3153,6.174,3154,6.419,3155,3.226,3156,4.598,3157,3.226,3158,3.226,3159,3.226,3160,3.226,3161,3.226,3162,3.226,3163,3.226,3164,3.226,3165,3.226,3166,3.226,3167,4.598,3168,3.226,3169,6.174,3170,3.226,3171,3.226,3172,3.226,3173,3.226,3174,3.226,3175,3.226,3176,6.174,3177,3.226,3178,3.226,3179,3.226,3180,3.226,3181,3.226]],["title/modules/VisTimelineModule.html",[975,1.198,3182,2.575]],["body/modules/VisTimelineModule.html",[3,0.192,4,0.192,5,0.192,31,0.019,33,0.288,59,0.223,130,0.1,178,0.014,321,0.016,322,0.016,365,1.78,375,1.471,610,0.938,646,1.868,670,1.336,683,3.233,684,2.071,975,1.868,977,2.533,978,2.533,979,3.488,980,2.835,981,3.488,985,2.173,986,2.279,988,3.503,989,3.503,990,3.011,994,3.503,995,1.336,1001,3.011,1474,2.52,2216,5.755,2272,4.017,3182,5.291,3183,4.947,3184,4.947,3185,4.947,3186,5.755,3187,5.755]],["title/coverage.html",[3188,4.341]],["body/coverage.html",[0,0.331,1,2.616,3,0.201,5,0.135,6,4.003,7,2.866,19,1.443,20,2.429,30,0.252,31,0.019,38,0.884,39,1.093,40,1.2,41,1.091,42,1.259,52,1.893,60,2.616,101,0.41,130,0.124,131,2.841,138,0.737,163,1.791,178,0.01,232,0.894,244,1.2,321,0.01,322,0.013,323,3.122,325,3.499,326,2.031,332,2.129,348,1.457,349,1.893,436,3.499,566,1.103,567,1.698,573,3.499,574,4.225,591,4.143,656,1.791,659,1.457,661,1.612,662,1.612,663,1.791,664,1.698,666,1.532,667,1.698,669,1.612,670,1.557,672,1.791,674,1.698,676,1.698,679,1.698,680,1.698,682,1.532,683,1.698,687,4.139,734,2.841,740,3.035,742,4.139,743,1.698,926,3.122,1002,4.139,1004,2.841,1059,3.499,1088,3.499,1092,2.269,1093,4.225,1105,2.269,1161,2.616,1162,4.003,1169,2.129,1334,2.841,1335,4.431,1339,2.616,1358,3.122,1427,3.122,1440,3.499,1469,3.768,1470,3.679,1474,2.031,1648,2.841,1649,4.139,1650,3.766,1651,4.139,1816,4.139,1817,4.139,1844,3.499,1872,3.499,1909,3.122,1955,3.122,1956,4.944,1957,4.638,1980,1.791,2129,3.122,2130,3.921,2272,4.499,2273,4.139,2296,3.766,2384,2.269,2385,4.003,2395,1.893,2396,2.005,2397,1.893,2398,2.269,2404,2.269,2405,2.269,2688,4.499,2989,3.122,2990,4.643,3063,6.435,3188,3.499,3189,4.07,3190,4.07,3191,5.203,3192,3.499,3193,7.449,3194,3.499,3195,3.499,3196,4.07,3197,6.053,3198,4.07,3199,4.07,3200,4.638,3201,4.07,3202,4.07,3203,3.499,3204,3.499,3205,3.499,3206,4.07,3207,5.203,3208,3.499,3209,3.499,3210,3.499,3211,4.07,3212,4.07,3213,4.07,3214,4.07,3215,4.07,3216,4.07,3217,4.07,3218,4.07,3219,4.07,3220,6.446,3221,5.203,3222,3.499,3223,3.499,3224,3.499,3225,6.053,3226,4.07,3227,4.07,3228,4.07,3229,4.07,3230,4.07,3231,4.07,3232,4.07,3233,4.07,3234,4.07,3235,4.07,3236,4.07,3237,6.435,3238,6.435,3239,3.499,3240,7.595,3241,3.499,3242,3.499,3243,3.499,3244,3.499,3245,3.499,3246,3.499,3247,3.499,3248,3.499,3249,3.499,3250,3.499,3251,3.499,3252,3.499,3253,3.499,3254,4.07,3255,5.203,3256,6.053,3257,6.053,3258,4.07,3259,4.07,3260,4.07,3261,4.07,3262,4.07,3263,3.499,3264,6.053,3265,6.053,3266,4.07,3267,4.07,3268,5.396,3269,4.07,3270,3.499,3271,4.07,3272,4.07,3273,4.07,3274,3.499,3275,3.499,3276,4.07,3277,4.07,3278,4.07,3279,4.07,3280,3.499,3281,4.07,3282,4.07,3283,4.07,3284,5.396,3285,6.053,3286,4.07,3287,4.07,3288,4.07,3289,3.499,3290,3.499,3291,4.07,3292,4.07,3293,4.07,3294,4.07,3295,4.07,3296,4.07]],["title/dependencies.html",[978,1.955,3297,3.074]],["body/dependencies.html",[31,0.019,43,1.31,70,0.639,178,0.014,321,0.014,322,0.016,670,1.375,684,1.833,764,4.136,978,2.996,1102,3.809,1103,3.1,1474,2.814,1825,5.853,1842,4.545,3298,5.926,3299,5.926,3300,5.926,3301,5.926,3302,5.926,3303,5.926,3304,5.926,3305,5.926,3306,5.926,3307,5.926,3308,5.926,3309,6.809,3310,5.926,3311,5.926]],["title/miscellaneous/functions.html",[3312,1.835,3313,3.818]],["body/miscellaneous/functions.html",[6,2.338,7,2.566,8,2.986,13,2.024,15,3,16,5.171,20,3.139,21,0.243,23,1.165,25,2.752,27,2.933,30,0.431,31,0.019,34,1.751,38,0.868,39,1.182,40,1.155,43,1.661,47,2.648,54,2.094,65,2.184,73,3.127,74,1.634,89,2.518,94,1.692,96,0.658,98,2.622,101,0.53,102,2.148,110,3.381,115,0.639,121,2.477,122,1.592,124,2.925,125,2.734,129,2.477,134,1.132,142,2.734,143,1.491,149,2.613,178,0.009,184,1.627,200,4.861,201,4.145,203,2.925,214,4.145,215,2.194,221,1.958,244,2.196,247,1.474,263,0.825,289,1.592,297,1.402,306,1.784,311,1.707,321,0.009,322,0.013,326,2.837,329,2.933,330,1.551,349,1.822,353,2.837,370,1.105,381,4.153,384,2.278,386,3.107,387,1.837,390,1.724,412,2.048,473,3.424,483,2.338,525,2.933,597,2.734,758,2.338,777,1.883,819,3,1138,2.235,1162,2.338,1163,3.671,1167,2.338,1181,2.734,1184,4.861,1186,4.551,1187,2.734,1205,4.08,1235,2.752,1251,2.734,1267,2.184,1335,2.518,1337,3.321,1339,3.381,1346,3.005,1352,2.933,1431,2.194,1434,4.521,1469,1.929,1476,2.47,1485,1.402,1506,1.551,1939,5.456,2136,3.367,2257,3.367,2653,2.518,3237,6.432,3238,6.432,3239,4.521,3241,4.521,3242,4.521,3243,4.521,3244,4.521,3245,4.521,3246,4.521,3247,4.521,3248,4.521,3249,4.521,3250,4.521,3251,4.521,3252,4.521,3253,4.521,3263,4.521,3270,4.521,3275,6.402,3280,4.521,3312,2.338,3313,3.367,3314,7.448,3315,3.367,3316,3.917,3317,3.367,3318,3.917,3319,5.938,3320,3.917,3321,6.348,3322,5.938,3323,7.448,3324,3.917,3325,7.606,3326,7.363,3327,3.917,3328,3.917,3329,3.917,3330,5.26,3331,3.917,3332,3.917,3333,3.917,3334,3.917,3335,5.26,3336,3.917,3337,3.917,3338,3.917,3339,3.917,3340,3.917,3341,5.26,3342,5.26,3343,5.938,3344,5.26,3345,3.917,3346,3.917,3347,3.917,3348,3.917,3349,3.917,3350,3.917,3351,3.917,3352,5.26,3353,5.26,3354,5.26,3355,3.917,3356,3.917,3357,3.917,3358,3.917,3359,3.917,3360,3.917,3361,3.917,3362,3.917,3363,3.917,3364,3.917,3365,3.917,3366,5.938,3367,3.917,3368,3.917]],["title/index.html",[21,0.229,3369,3.171]],["body/index.html",[2,0.825,31,0.019,178,0.012,207,0.658,321,0.012,322,0.015,324,3.531,365,1.565,375,1.293,567,3.082,568,2.492,646,1.642,656,3.251,659,2.645,661,2.926,662,2.926,663,3.251,666,2.78,667,3.082,669,2.926,672,3.251,674,3.082,676,3.082,679,3.082,680,3.082,682,2.78,683,3.082,975,1.642,976,4.609,977,2.226,978,2.226,979,2.492,980,2.492,981,2.492,982,4.348,983,4.348,984,4.348,985,2.012,986,2.003,1049,5.279,1050,4.348,1051,4.348,1053,4.348,1810,5.279,1811,4.348,1812,4.348,1814,4.348,1819,5.003,1820,4.348,1821,4.348,1822,4.348,1835,5.003,1836,4.348,1837,4.348,1838,4.348,1980,2.226,2209,5.305,2210,4.348,2211,4.348,2212,4.348,2260,5.207,2261,4.348,2262,4.348,2263,4.348,2973,4.327,3182,5.003,3183,4.348,3184,4.348,3185,4.348,3255,4.348,3274,4.348,3369,4.348]],["title/modules.html",[977,2.223]],["body/modules.html",[31,0.017,86,5.352,178,0.014,321,0.014,322,0.017,909,4.011,976,3.54,977,2.61,1049,4.139,1810,4.139,1819,4.139,1835,4.139,2209,4.139,2260,4.139,3182,4.139,3370,7.668,3371,7.668]],["title/miscellaneous/typealiases.html",[3312,1.835,3372,4.442]],["body/miscellaneous/typealiases.html",[4,0.224,6,3.464,7,2.799,21,0.36,30,0.36,31,0.019,38,0.983,71,3.464,72,4.051,73,2.859,74,2.421,75,4.051,76,3.036,77,4.051,78,4.051,79,3.036,80,2.184,81,4.696,82,2.961,83,3.129,87,2.699,120,3.236,178,0.014,321,0.014,322,0.016,1162,3.464,1174,4.696,1176,4.051,1180,4.696,2130,3.962,2384,3.236,2385,3.464,2395,2.699,2397,2.699,2398,3.236,2404,3.236,2405,3.236,2408,4.325,2409,4.325,3312,3.464,3315,4.989,3317,5.783,3373,5.804,3374,6.728]],["title/miscellaneous/variables.html",[3312,1.835,3375,3.818]],["body/miscellaneous/variables.html",[21,0.268,30,0.409,31,0.019,43,0.957,68,1.103,95,1.58,107,1.106,108,0.598,115,1.235,138,1.017,178,0.01,207,0.564,321,0.01,322,0.014,331,0.912,525,3.133,526,3.41,588,1.339,673,2.014,717,1.714,720,1.629,766,2.133,893,3.321,1474,2.115,1481,1.806,1482,2.133,1511,2.133,1909,4.31,2272,3.922,2273,4.31,2295,3.722,2296,4.608,2306,3.722,2307,3.722,2308,3.722,2309,3.722,2990,3.321,2998,3.722,2999,3.722,3191,3.722,3192,4.83,3194,4.83,3195,4.83,3200,3.722,3203,4.83,3204,3.722,3205,4.83,3207,3.722,3208,4.83,3209,4.83,3210,4.83,3221,3.722,3222,4.83,3223,4.83,3224,4.83,3289,4.83,3290,4.83,3312,2.584,3375,3.722,3376,4.33,3377,4.33,3378,4.33,3379,4.33,3380,6.239,3381,6.239,3382,6.239,3383,7.75,3384,7.138,3385,7.75,3386,6.602,3387,7.235,3388,4.33,3389,6.842,3390,4.33,3391,7.718,3392,4.33,3393,6.602,3394,5.619,3395,4.33,3396,4.33,3397,4.33,3398,4.33,3399,4.33,3400,4.33,3401,6.239,3402,6.239,3403,5.619,3404,4.33,3405,5.619,3406,5.619,3407,4.33,3408,6.239,3409,4.33,3410,5.619,3411,6.602,3412,4.33,3413,4.33,3414,4.33,3415,5.619,3416,4.33,3417,4.33,3418,4.33,3419,5.619,3420,4.33,3421,4.33,3422,4.33,3423,4.33,3424,7.313,3425,4.33,3426,5.619,3427,4.33,3428,5.619,3429,4.33,3430,5.619,3431,4.33,3432,4.33,3433,4.33,3434,4.33,3435,4.33,3436,4.33,3437,4.33,3438,4.33,3439,4.33,3440,4.33,3441,4.33,3442,4.33]]],"invertedIndex":[["",{"_index":31,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"components/BsEdgeInfoCard.html":{},"components/BsHeatmapComponent.html":{},"modules/BsHeatmapModule.html":{},"components/BsNodeInfoCard.html":{},"modules/BsTimelineModule.html":{},"components/BsTooltipComponent.html":{},"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"modules/FinanceModule.html":{},"modules/FusionChartsModule.html":{},"modules/GoogleMapsModule.html":{},"interfaces/HeatmapItem.html":{},"components/MapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"modules/NetworkModule.html":{},"interfaces/NetworkProvider.html":{},"components/NgxChart.html":{},"modules/NgxChartsModule.html":{},"interfaces/Node.html":{},"interfaces/NodeData.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"components/ResultTimeline.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{},"modules/VisTimelineModule.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":232,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"components/BsEdgeInfoCard.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"components/BsTooltipComponent.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"interfaces/HeatmapItem.html":{},"components/MapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeData.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"components/ResultTimeline.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{},"coverage.html":{}}}],["0(n",{"_index":1577,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["0.0.1",{"_index":3299,"title":{},"body":{"dependencies.html":{}}}],["0.02",{"_index":1942,"title":{},"body":{"components/MapComponent.html":{}}}],["0.2s",{"_index":962,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["0.3",{"_index":519,"title":{},"body":{"classes/BaseProvider.html":{}}}],["0.5",{"_index":966,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/MoneyCloudDatum.html":{}}}],["0.8",{"_index":974,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["0.9",{"_index":960,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["0/1",{"_index":3193,"title":{},"body":{"coverage.html":{}}}],["0/17",{"_index":3284,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":3288,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":3257,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":3285,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":3220,"title":{},"body":{"coverage.html":{}}}],["0/7",{"_index":3197,"title":{},"body":{"coverage.html":{}}}],["0/8",{"_index":3225,"title":{},"body":{"coverage.html":{}}}],["023e58",{"_index":3401,"title":{},"body":{"miscellaneous/variables.html":{}}}],["0s",{"_index":964,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["1",{"_index":207,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/BaseProvider.html":{},"components/BsHeatmapComponent.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"interfaces/HeatmapItem.html":{},"components/MapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"components/ResultTimeline.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["1).split",{"_index":2326,"title":{},"body":{"components/ResultTimeline.html":{}}}],["1.0",{"_index":932,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["1.5em",{"_index":587,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsNodeInfoCard.html":{},"interfaces/NodeData.html":{}}}],["1/1",{"_index":3240,"title":{},"body":{"coverage.html":{}}}],["1/2",{"_index":3268,"title":{},"body":{"coverage.html":{}}}],["1/3",{"_index":3261,"title":{},"body":{"coverage.html":{}}}],["1/6",{"_index":3256,"title":{},"body":{"coverage.html":{}}}],["10",{"_index":163,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"components/BsTooltipComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{},"coverage.html":{}}}],["100",{"_index":740,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{},"components/NgxChart.html":{},"components/ResultTimeline.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{},"coverage.html":{}}}],["1000",{"_index":750,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyDatum.html":{},"interfaces/VisEvent.html":{}}}],["10000",{"_index":2290,"title":{},"body":{"components/ResultTimeline.html":{}}}],["10px",{"_index":968,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["11",{"_index":3293,"title":{},"body":{"coverage.html":{}}}],["11/28",{"_index":3265,"title":{},"body":{"coverage.html":{}}}],["12",{"_index":2671,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["12/24",{"_index":3206,"title":{},"body":{"coverage.html":{}}}],["12/26",{"_index":3259,"title":{},"body":{"coverage.html":{}}}],["12px",{"_index":1064,"title":{},"body":{"components/BsTooltipComponent.html":{}}}],["13/45",{"_index":3199,"title":{},"body":{"coverage.html":{}}}],["13/54",{"_index":3214,"title":{},"body":{"coverage.html":{}}}],["13/68",{"_index":3219,"title":{},"body":{"coverage.html":{}}}],["14.0.0",{"_index":3303,"title":{},"body":{"dependencies.html":{}}}],["14/15",{"_index":3233,"title":{},"body":{"coverage.html":{}}}],["14/46",{"_index":3283,"title":{},"body":{"coverage.html":{}}}],["15",{"_index":1979,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{}}}],["15/55",{"_index":3292,"title":{},"body":{"coverage.html":{}}}],["150px",{"_index":2307,"title":{},"body":{"components/ResultTimeline.html":{},"miscellaneous/variables.html":{}}}],["16",{"_index":3255,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["16rem",{"_index":2258,"title":{},"body":{"components/NgxChart.html":{}}}],["17",{"_index":3286,"title":{},"body":{"coverage.html":{}}}],["17px",{"_index":1069,"title":{},"body":{"components/BsTooltipComponent.html":{}}}],["19",{"_index":3218,"title":{},"body":{"coverage.html":{}}}],["19/20",{"_index":3227,"title":{},"body":{"coverage.html":{}}}],["1950",{"_index":2337,"title":{},"body":{"components/ResultTimeline.html":{}}}],["1].date",{"_index":2657,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["1a3646",{"_index":3390,"title":{},"body":{"miscellaneous/variables.html":{}}}],["1d2c4d",{"_index":3386,"title":{},"body":{"miscellaneous/variables.html":{}}}],["2",{"_index":111,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"components/BsEdgeInfoCard.html":{},"components/BsNodeInfoCard.html":{},"interfaces/CustomData.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["2).split",{"_index":2060,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{}}}],["2*size",{"_index":2988,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["2/10",{"_index":3228,"title":{},"body":{"coverage.html":{}}}],["2/4",{"_index":3236,"title":{},"body":{"coverage.html":{}}}],["2/9",{"_index":3235,"title":{},"body":{"coverage.html":{}}}],["20",{"_index":742,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{},"coverage.html":{}}}],["200",{"_index":1978,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{}}}],["2000",{"_index":3180,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["2020",{"_index":2662,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["21",{"_index":1088,"title":{},"body":{"components/BsTooltipComponent.html":{},"coverage.html":{}}}],["22",{"_index":3234,"title":{},"body":{"coverage.html":{}}}],["222222",{"_index":3420,"title":{},"body":{"miscellaneous/variables.html":{}}}],["23",{"_index":3201,"title":{},"body":{"coverage.html":{}}}],["24",{"_index":3213,"title":{},"body":{"coverage.html":{}}}],["255763",{"_index":3413,"title":{},"body":{"miscellaneous/variables.html":{}}}],["27",{"_index":3291,"title":{},"body":{"coverage.html":{}}}],["28",{"_index":3198,"title":{},"body":{"coverage.html":{}}}],["283d6a",{"_index":3403,"title":{},"body":{"miscellaneous/variables.html":{}}}],["2c6675",{"_index":3412,"title":{},"body":{"miscellaneous/variables.html":{}}}],["2px",{"_index":2687,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["3",{"_index":110,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"interfaces/VisEvent.html":{},"miscellaneous/functions.html":{}}}],["3*24",{"_index":2674,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["3*size/2",{"_index":2987,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["3.0.0",{"_index":3301,"title":{},"body":{"dependencies.html":{}}}],["3.0.4",{"_index":3304,"title":{},"body":{"dependencies.html":{}}}],["3.1.0",{"_index":3307,"title":{},"body":{"dependencies.html":{}}}],["3.15.1",{"_index":3305,"title":{},"body":{"dependencies.html":{}}}],["3/3",{"_index":3271,"title":{},"body":{"coverage.html":{}}}],["3/4",{"_index":3230,"title":{},"body":{"coverage.html":{}}}],["30",{"_index":1980,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"coverage.html":{},"index.html":{}}}],["30/33",{"_index":3276,"title":{},"body":{"coverage.html":{}}}],["300",{"_index":1862,"title":{},"body":{"components/MapComponent.html":{}}}],["304a7d",{"_index":3409,"title":{},"body":{"miscellaneous/variables.html":{}}}],["31",{"_index":3266,"title":{},"body":{"coverage.html":{}}}],["33",{"_index":3260,"title":{},"body":{"coverage.html":{}}}],["334e87",{"_index":3399,"title":{},"body":{"miscellaneous/variables.html":{}}}],["35",{"_index":894,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["350px",{"_index":2309,"title":{},"body":{"components/ResultTimeline.html":{},"miscellaneous/variables.html":{}}}],["36",{"_index":3277,"title":{},"body":{"coverage.html":{}}}],["365",{"_index":2426,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{}}}],["39",{"_index":3264,"title":{},"body":{"coverage.html":{}}}],["3a4762",{"_index":3418,"title":{},"body":{"miscellaneous/variables.html":{}}}],["3c7680",{"_index":3407,"title":{},"body":{"miscellaneous/variables.html":{}}}],["4",{"_index":2974,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{}}}],["4.0.0",{"_index":3311,"title":{},"body":{"dependencies.html":{}}}],["4/10",{"_index":3231,"title":{},"body":{"coverage.html":{}}}],["4/23",{"_index":3287,"title":{},"body":{"coverage.html":{}}}],["4/4",{"_index":3269,"title":{},"body":{"coverage.html":{}}}],["40",{"_index":743,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"coverage.html":{}}}],["46",{"_index":3258,"title":{},"body":{"coverage.html":{}}}],["4b6878",{"_index":3394,"title":{},"body":{"miscellaneous/variables.html":{}}}],["4e6d70",{"_index":3421,"title":{},"body":{"miscellaneous/variables.html":{}}}],["5",{"_index":525,"title":{},"body":{"classes/BaseProvider.html":{},"components/ResultTimeline.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["5/46",{"_index":3196,"title":{},"body":{"coverage.html":{}}}],["5/5",{"_index":3262,"title":{},"body":{"coverage.html":{}}}],["50",{"_index":591,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsNodeInfoCard.html":{},"interfaces/NodeData.html":{},"interfaces/VisEvent.html":{},"coverage.html":{}}}],["500px",{"_index":2999,"title":{},"body":{"interfaces/VisEvent.html":{},"miscellaneous/variables.html":{}}}],["5px",{"_index":580,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsNodeInfoCard.html":{},"interfaces/NodeData.html":{}}}],["6",{"_index":2538,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{}}}],["6)*2",{"_index":2983,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["6.5.1",{"_index":3308,"title":{},"body":{"dependencies.html":{}}}],["6/19",{"_index":3267,"title":{},"body":{"coverage.html":{}}}],["6/6",{"_index":3279,"title":{},"body":{"coverage.html":{}}}],["600",{"_index":737,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{}}}],["600x400",{"_index":1153,"title":{},"body":{"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"components/NgxChart.html":{}}}],["64779e",{"_index":3396,"title":{},"body":{"miscellaneous/variables.html":{}}}],["69420",{"_index":1972,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{}}}],["6f9ba5",{"_index":3404,"title":{},"body":{"miscellaneous/variables.html":{}}}],["7",{"_index":1085,"title":{},"body":{"components/BsTooltipComponent.html":{}}}],["7.3.4",{"_index":3309,"title":{},"body":{"dependencies.html":{}}}],["7/62",{"_index":3294,"title":{},"body":{"coverage.html":{}}}],["75",{"_index":3229,"title":{},"body":{"coverage.html":{}}}],["7aa3e5",{"_index":1658,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["7acce5",{"_index":1663,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["8",{"_index":2973,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{},"index.html":{}}}],["8/38",{"_index":3254,"title":{},"body":{"coverage.html":{}}}],["8/39",{"_index":3215,"title":{},"body":{"coverage.html":{}}}],["80",{"_index":584,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsNodeInfoCard.html":{},"interfaces/NodeData.html":{}}}],["808080",{"_index":527,"title":{},"body":{"classes/BaseProvider.html":{}}}],["84",{"_index":2673,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["86400000",{"_index":2841,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["8ec3b9",{"_index":3388,"title":{},"body":{"miscellaneous/variables.html":{}}}],["8px",{"_index":1065,"title":{},"body":{"components/BsTooltipComponent.html":{}}}],["9",{"_index":730,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["9/25",{"_index":3278,"title":{},"body":{"coverage.html":{}}}],["9/38",{"_index":3202,"title":{},"body":{"coverage.html":{}}}],["90",{"_index":926,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{},"coverage.html":{}}}],["90px",{"_index":810,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["93",{"_index":3232,"title":{},"body":{"coverage.html":{}}}],["95",{"_index":3226,"title":{},"body":{"coverage.html":{}}}],["98a5be",{"_index":3410,"title":{},"body":{"miscellaneous/variables.html":{}}}],["_action",{"_index":3062,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["_actions",{"_index":3010,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["_datapoint",{"_index":1774,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["_datapoint.$item",{"_index":1779,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["_datapoint.name",{"_index":1776,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["_datapoint.value",{"_index":1777,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["_definance",{"_index":3425,"title":{},"body":{"miscellaneous/variables.html":{}}}],["_degooglemaps",{"_index":3431,"title":{},"body":{"miscellaneous/variables.html":{}}}],["_deheatmap",{"_index":3434,"title":{},"body":{"miscellaneous/variables.html":{}}}],["_enfinance",{"_index":3427,"title":{},"body":{"miscellaneous/variables.html":{}}}],["_engooglemaps",{"_index":3432,"title":{},"body":{"miscellaneous/variables.html":{}}}],["_enheatmap",{"_index":3437,"title":{},"body":{"miscellaneous/variables.html":{}}}],["_frfinance",{"_index":3429,"title":{},"body":{"miscellaneous/variables.html":{}}}],["_frgooglemaps",{"_index":3433,"title":{},"body":{"miscellaneous/variables.html":{}}}],["_frheatmap",{"_index":3440,"title":{},"body":{"miscellaneous/variables.html":{}}}],["_items",{"_index":2647,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["_networkinitialized",{"_index":3007,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["_queries",{"_index":1398,"title":{},"body":{"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/DynamicNodeType.html":{}}}],["_selectededge",{"_index":3009,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["_selectednode",{"_index":3008,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["a.count",{"_index":1043,"title":{},"body":{"components/BsNodeInfoCard.html":{},"interfaces/NodeData.html":{}}}],["a.date.gettime",{"_index":2936,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["a.name",{"_index":2044,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{}}}],["absolute",{"_index":1063,"title":{},"body":{"components/BsTooltipComponent.html":{}}}],["absolutely",{"_index":943,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["abstract",{"_index":1780,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["abstractfacet",{"_index":1655,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"components/MapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/VisEvent.html":{}}}],["abstractions",{"_index":771,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["access",{"_index":619,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/HeatmapItem.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeData.html":{},"interfaces/NodeType.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["accessible",{"_index":2793,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["accessor",{"_index":3172,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["accessors",{"_index":1074,"title":{},"body":{"components/BsTooltipComponent.html":{},"components/FacetNgxChart.html":{},"components/MapComponent.html":{},"components/NgxChart.html":{}}}],["accordingly",{"_index":1357,"title":{},"body":{"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/DynamicNodeType.html":{}}}],["account",{"_index":1613,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["accumulates",{"_index":490,"title":{},"body":{"classes/BaseProvider.html":{}}}],["act",{"_index":385,"title":{},"body":{"classes/AsyncRecordsProvider.html":{},"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{}}}],["action",{"_index":45,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"components/MapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/VisEvent.html":{}}}],["action.children",{"_index":1685,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["action.icon",{"_index":463,"title":{},"body":{"classes/BaseProvider.html":{}}}],["action.name",{"_index":1683,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["action.text",{"_index":464,"title":{},"body":{"classes/BaseProvider.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["actions",{"_index":281,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"components/BsEdgeInfoCard.html":{},"components/BsNodeInfoCard.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"components/MapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/NodeData.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/VisEvent.html":{}}}],["actions.push(new",{"_index":288,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/BaseProvider.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{}}}],["actions.push(this.clearfilters",{"_index":1695,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["actions.push(this.createexpandaction(types[0",{"_index":309,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{}}}],["actions.push(this.selectfield",{"_index":1697,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["actions.unshift(new",{"_index":1466,"title":{},"body":{"interfaces/DynamicNodeType.html":{}}}],["activateaction",{"_index":333,"title":{},"body":{"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{}}}],["activated",{"_index":1179,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{}}}],["active",{"_index":334,"title":{},"body":{"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/VisEvent.html":{}}}],["actual",{"_index":2948,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["actual_component",{"_index":686,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"components/BsTooltipComponent.html":{},"components/FacetNgxChart.html":{},"components/MapComponent.html":{},"components/NgxChart.html":{},"components/ResultTimeline.html":{}}}],["actually",{"_index":758,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{},"miscellaneous/functions.html":{}}}],["actualwidth",{"_index":914,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["adapted",{"_index":2499,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["add",{"_index":85,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/BaseProvider.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["add/replace",{"_index":2592,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["addaggregationnodes(item",{"_index":210,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{}}}],["addcustomedge(recordnode",{"_index":1268,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{}}}],["adddynamicedges(sourcenodes",{"_index":1408,"title":{},"body":{"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{}}}],["added",{"_index":74,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["addedge(edge",{"_index":1637,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["addedges",{"_index":2180,"title":{},"body":{"classes/NetworkDataset.html":{}}}],["addedges(edges",{"_index":1548,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["addition",{"_index":1275,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{}}}],["additional",{"_index":89,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"interfaces/DynamicNodeType.html":{},"miscellaneous/functions.html":{}}}],["additionally",{"_index":1184,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{},"miscellaneous/functions.html":{}}}],["addnode(node",{"_index":1634,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["addnodes",{"_index":2181,"title":{},"body":{"classes/NetworkDataset.html":{}}}],["addnodes(nodes",{"_index":1543,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["addrecordnodes(records",{"_index":1195,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{}}}],["adds",{"_index":198,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{}}}],["addstructuraledge(dataset",{"_index":1243,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{}}}],["addstructuraledges(node",{"_index":1209,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{}}}],["adjacent",{"_index":417,"title":{},"body":{"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["adjust",{"_index":405,"title":{},"body":{"classes/AsyncRecordsProvider.html":{},"components/BsHeatmapComponent.html":{},"interfaces/CustomData.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{}}}],["adjusts",{"_index":396,"title":{},"body":{"classes/AsyncRecordsProvider.html":{}}}],["administrative.country",{"_index":3392,"title":{},"body":{"miscellaneous/variables.html":{}}}],["administrative.land_parcel",{"_index":3395,"title":{},"body":{"miscellaneous/variables.html":{}}}],["administrative.province",{"_index":3397,"title":{},"body":{"miscellaneous/variables.html":{}}}],["afterviewinit",{"_index":688,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["agg",{"_index":303,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["aggregate",{"_index":156,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["aggregation",{"_index":34,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"miscellaneous/functions.html":{}}}],["aggregation.items",{"_index":188,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["aggregation.items.foreach(item",{"_index":194,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{}}}],["aggregation.items.length",{"_index":193,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{}}}],["aggregation.items.map(item",{"_index":2630,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["aggregation.name",{"_index":191,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["aggregationdata",{"_index":1,"title":{"interfaces/AggregationData.html":{}},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"coverage.html":{}}}],["aggregationedge",{"_index":60,"title":{"interfaces/AggregationEdge.html":{}},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"coverage.html":{}}}],["aggregationedgetype",{"_index":20,"title":{"interfaces/AggregationEdgeType.html":{}},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["aggregationedgetype).aggregation",{"_index":126,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{}}}],["aggregationitem",{"_index":35,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["aggregationname",{"_index":2548,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["aggregationprovider",{"_index":131,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"coverage.html":{}}}],["aggregations",{"_index":128,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["aggregations.foreach(aggregation",{"_index":186,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{}}}],["aggregationtriggertype",{"_index":81,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"miscellaneous/typealiases.html":{}}}],["agm/core",{"_index":1842,"title":{},"body":{"modules/GoogleMapsModule.html":{},"components/MapComponent.html":{},"dependencies.html":{}}}],["agmcoremodule",{"_index":1841,"title":{},"body":{"modules/GoogleMapsModule.html":{}}}],["agminfowindow",{"_index":1889,"title":{},"body":{"components/MapComponent.html":{}}}],["algorithm",{"_index":2923,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["aliases",{"_index":3373,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["align",{"_index":1089,"title":{},"body":{"components/BsTooltipComponent.html":{}}}],["all_dates",{"_index":2320,"title":{},"body":{"components/ResultTimeline.html":{}}}],["all_dates.indexof(dateobj.display",{"_index":2351,"title":{},"body":{"components/ResultTimeline.html":{}}}],["all_dates.push(cooc[1",{"_index":2344,"title":{},"body":{"components/ResultTimeline.html":{}}}],["all_ids",{"_index":2319,"title":{},"body":{"components/ResultTimeline.html":{}}}],["all_ids.indexof(id",{"_index":2341,"title":{},"body":{"components/ResultTimeline.html":{}}}],["all_ids.push(id",{"_index":2345,"title":{},"body":{"components/ResultTimeline.html":{}}}],["allen",{"_index":3365,"title":{},"body":{"miscellaneous/functions.html":{}}}],["allow",{"_index":78,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"miscellaneous/typealiases.html":{}}}],["allowing",{"_index":283,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{}}}],["allows",{"_index":506,"title":{},"body":{"classes/BaseProvider.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{}}}],["allprimarydates",{"_index":2805,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["allprimarydates.length",{"_index":2814,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["along",{"_index":2468,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["already",{"_index":273,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["alt",{"_index":468,"title":{},"body":{"classes/BaseProvider.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/VisEvent.html":{}}}],["alternative",{"_index":952,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["alternatively",{"_index":415,"title":{},"body":{"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{}}}],["always",{"_index":861,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"interfaces/HeatmapItem.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["amount",{"_index":2057,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{}}}],["amount.split",{"_index":2062,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{}}}],["anchor",{"_index":896,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["and/or",{"_index":382,"title":{},"body":{"classes/AsyncRecordsProvider.html":{},"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{}}}],["angular",{"_index":764,"title":{},"body":{"components/BsHeatmapComponent.html":{},"modules/FusionChartsModule.html":{},"interfaces/HeatmapItem.html":{},"dependencies.html":{}}}],["angular/common",{"_index":990,"title":{},"body":{"modules/BsHeatmapModule.html":{},"modules/BsTimelineModule.html":{},"modules/FinanceModule.html":{},"modules/FusionChartsModule.html":{},"modules/GoogleMapsModule.html":{},"modules/NetworkModule.html":{},"modules/NgxChartsModule.html":{},"modules/VisTimelineModule.html":{}}}],["angular/core",{"_index":610,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsHeatmapComponent.html":{},"modules/BsHeatmapModule.html":{},"components/BsNodeInfoCard.html":{},"modules/BsTimelineModule.html":{},"components/BsTooltipComponent.html":{},"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"modules/FinanceModule.html":{},"modules/FusionChartsModule.html":{},"modules/GoogleMapsModule.html":{},"interfaces/HeatmapItem.html":{},"components/MapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"modules/NetworkModule.html":{},"components/NgxChart.html":{},"modules/NgxChartsModule.html":{},"interfaces/NodeData.html":{},"components/ResultTimeline.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{},"modules/VisTimelineModule.html":{}}}],["angular/forms",{"_index":993,"title":{},"body":{"modules/BsHeatmapModule.html":{},"modules/BsTimelineModule.html":{},"modules/NetworkModule.html":{},"interfaces/VisEvent.html":{}}}],["animation",{"_index":626,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsNodeInfoCard.html":{},"interfaces/NodeData.html":{}}}],["another",{"_index":1581,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"components/MapComponent.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["anymore",{"_index":1391,"title":{},"body":{"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/DynamicNodeType.html":{}}}],["api.ts",{"_index":3289,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["app",{"_index":3001,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["appear",{"_index":2775,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["append(\"g",{"_index":2781,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["apple/steve",{"_index":225,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{}}}],["apply",{"_index":439,"title":{},"body":{"classes/BaseProvider.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["appropriate",{"_index":3095,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["appservice",{"_index":1479,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/VisEvent.html":{}}}],["april",{"_index":2663,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["area",{"_index":1911,"title":{},"body":{"components/MapComponent.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["areachartmodule",{"_index":2266,"title":{},"body":{"modules/NgxChartsModule.html":{}}}],["areastyles",{"_index":2386,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{}}}],["around",{"_index":1938,"title":{},"body":{"components/MapComponent.html":{}}}],["array",{"_index":1034,"title":{},"body":{"components/BsNodeInfoCard.html":{},"interfaces/NodeData.html":{}}}],["array.from(new",{"_index":836,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["array.from(this.edgeidx.keys",{"_index":1539,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["array.from(this.edgeidx.values",{"_index":1529,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["array.from(this.nodeidx.keys",{"_index":1537,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["array.from(this.nodeidx.values",{"_index":1527,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["array.isarray(edges",{"_index":1549,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["array.isarray(ids",{"_index":1556,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["array.isarray(nodes",{"_index":1544,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["arrow",{"_index":508,"title":{},"body":{"classes/BaseProvider.html":{},"components/BsTooltipComponent.html":{}}}],["arrows",{"_index":1322,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{}}}],["articles",{"_index":3357,"title":{},"body":{"miscellaneous/functions.html":{}}}],["asks",{"_index":3348,"title":{},"body":{"miscellaneous/functions.html":{}}}],["associate",{"_index":1873,"title":{},"body":{"components/MapComponent.html":{}}}],["assume",{"_index":206,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{}}}],["assumed",{"_index":199,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{}}}],["assuming",{"_index":223,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{}}}],["async",{"_index":2959,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{}}}],["asynchronous",{"_index":367,"title":{},"body":{"classes/AsyncRecordsProvider.html":{}}}],["asynchronously",{"_index":247,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"miscellaneous/functions.html":{}}}],["asyncrecordsprovider",{"_index":323,"title":{"classes/AsyncRecordsProvider.html":{}},"body":{"classes/AsyncRecordsProvider.html":{},"coverage.html":{}}}],["asyncrecordsproviderdemo",{"_index":3239,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["asyncrecordsproviderdemo(providerfactory",{"_index":3318,"title":{},"body":{"miscellaneous/functions.html":{}}}],["attach",{"_index":209,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/DynamicNodeType.html":{}}}],["attached",{"_index":387,"title":{},"body":{"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"components/NgxChart.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{},"miscellaneous/functions.html":{}}}],["attr(\"class",{"_index":2782,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["attr(\"d",{"_index":2786,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["attr(\"display",{"_index":2784,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["attr(\"text",{"_index":2788,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["attr(\"transform",{"_index":892,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["attr(\"x",{"_index":2790,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["attr(\"y",{"_index":2791,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["audit",{"_index":2443,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["auditeventtype",{"_index":2394,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["auditwebservice",{"_index":2393,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["auto",{"_index":908,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{}}}],["automatically",{"_index":103,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"components/BsHeatmapComponent.html":{},"interfaces/CustomData.html":{},"interfaces/HeatmapItem.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{}}}],["available",{"_index":1414,"title":{},"body":{"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/DynamicNodeType.html":{}}}],["avoid",{"_index":261,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"components/BsHeatmapComponent.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/HeatmapItem.html":{},"components/MapComponent.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/VisEvent.html":{}}}],["avoiding",{"_index":1149,"title":{},"body":{"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"components/NgxChart.html":{}}}],["axes",{"_index":760,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["axis",{"_index":766,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"components/ResultTimeline.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{},"miscellaneous/variables.html":{}}}],["axis.clickable",{"_index":953,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["axis/scales",{"_index":823,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["axisclickable",{"_index":713,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["axisclicked",{"_index":723,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["b).map(this.xt.invert",{"_index":2890,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["b.count",{"_index":1042,"title":{},"body":{"components/BsNodeInfoCard.html":{},"interfaces/NodeData.html":{}}}],["b.date.gettime",{"_index":2937,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["b0d5ce",{"_index":3414,"title":{},"body":{"miscellaneous/variables.html":{}}}],["ballmer",{"_index":3363,"title":{},"body":{"miscellaneous/functions.html":{}}}],["bar",{"_index":1659,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["barack",{"_index":3349,"title":{},"body":{"miscellaneous/functions.html":{}}}],["barchartmodule",{"_index":2267,"title":{},"body":{"modules/NgxChartsModule.html":{}}}],["barhorizontalcomponent",{"_index":1101,"title":{},"body":{"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"components/NgxChart.html":{}}}],["barverticalcomponent",{"_index":1100,"title":{},"body":{"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"components/NgxChart.html":{}}}],["base",{"_index":53,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{}}}],["basechartcomponent",{"_index":1099,"title":{},"body":{"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"components/NgxChart.html":{}}}],["based",{"_index":1473,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{}}}],["baseprovider",{"_index":52,"title":{"classes/BaseProvider.html":{}},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{},"coverage.html":{}}}],["baseprovider:15",{"_index":361,"title":{},"body":{"classes/AsyncRecordsProvider.html":{}}}],["baseprovider:151",{"_index":422,"title":{},"body":{"classes/AsyncRecordsProvider.html":{}}}],["baseprovider:155",{"_index":408,"title":{},"body":{"classes/AsyncRecordsProvider.html":{}}}],["baseprovider:159",{"_index":425,"title":{},"body":{"classes/AsyncRecordsProvider.html":{}}}],["baseprovider:16",{"_index":359,"title":{},"body":{"classes/AsyncRecordsProvider.html":{}}}],["baseprovider:163",{"_index":431,"title":{},"body":{"classes/AsyncRecordsProvider.html":{}}}],["baseprovider:167",{"_index":429,"title":{},"body":{"classes/AsyncRecordsProvider.html":{}}}],["baseprovider:171",{"_index":428,"title":{},"body":{"classes/AsyncRecordsProvider.html":{}}}],["baseprovider:179",{"_index":424,"title":{},"body":{"classes/AsyncRecordsProvider.html":{}}}],["baseprovider:18",{"_index":362,"title":{},"body":{"classes/AsyncRecordsProvider.html":{}}}],["baseprovider:188",{"_index":421,"title":{},"body":{"classes/AsyncRecordsProvider.html":{}}}],["baseprovider:21",{"_index":357,"title":{},"body":{"classes/AsyncRecordsProvider.html":{}}}],["baseprovider:211",{"_index":410,"title":{},"body":{"classes/AsyncRecordsProvider.html":{}}}],["baseprovider:23",{"_index":364,"title":{},"body":{"classes/AsyncRecordsProvider.html":{}}}],["baseprovider:245",{"_index":426,"title":{},"body":{"classes/AsyncRecordsProvider.html":{}}}],["baseprovider:25",{"_index":360,"title":{},"body":{"classes/AsyncRecordsProvider.html":{}}}],["baseprovider:28",{"_index":363,"title":{},"body":{"classes/AsyncRecordsProvider.html":{}}}],["become",{"_index":3353,"title":{},"body":{"miscellaneous/functions.html":{}}}],["before",{"_index":862,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{}}}],["behavior",{"_index":2827,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["behaviors",{"_index":2703,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["bellow",{"_index":2753,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["belong",{"_index":171,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["below",{"_index":2641,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["benefit",{"_index":770,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["bestaggregation",{"_index":2583,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["beta.0",{"_index":3302,"title":{},"body":{"dependencies.html":{}}}],["better",{"_index":951,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["between",{"_index":473,"title":{},"body":{"classes/BaseProvider.html":{},"interfaces/CustomData.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"miscellaneous/functions.html":{}}}],["bill",{"_index":203,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/BaseProvider.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{},"miscellaneous/functions.html":{}}}],["bin",{"_index":2916,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["black",{"_index":1736,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["block",{"_index":945,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["boolean",{"_index":29,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"components/BsEdgeInfoCard.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"interfaces/HeatmapItem.html":{},"components/MapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"components/NgxChart.html":{},"interfaces/Node.html":{},"interfaces/NodeData.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{}}}],["bootstrap",{"_index":980,"title":{},"body":{"modules/BsHeatmapModule.html":{},"modules/BsTimelineModule.html":{},"modules/FinanceModule.html":{},"modules/FusionChartsModule.html":{},"modules/GoogleMapsModule.html":{},"modules/NetworkModule.html":{},"modules/NgxChartsModule.html":{},"modules/VisTimelineModule.html":{},"index.html":{}}}],["border",{"_index":589,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsNodeInfoCard.html":{},"components/BsTooltipComponent.html":{},"interfaces/NodeData.html":{}}}],["both",{"_index":388,"title":{},"body":{"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["bottom",{"_index":741,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{}}}],["bounds",{"_index":1847,"title":{},"body":{"components/MapComponent.html":{}}}],["bracket",{"_index":2661,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["briefly",{"_index":1150,"title":{},"body":{"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"components/NgxChart.html":{}}}],["browse",{"_index":3371,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":3370,"title":{},"body":{"modules.html":{}}}],["brush",{"_index":2712,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["brush's",{"_index":2874,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["brushbehavior",{"_index":2704,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["brushing",{"_index":2717,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["brushselection",{"_index":2708,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["bsactionmodule",{"_index":998,"title":{},"body":{"modules/BsHeatmapModule.html":{},"modules/BsTimelineModule.html":{},"modules/FinanceModule.html":{},"modules/GoogleMapsModule.html":{},"modules/NetworkModule.html":{}}}],["bsedgeinfocard",{"_index":567,"title":{"components/BsEdgeInfoCard.html":{}},"body":{"components/BsEdgeInfoCard.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"components/BsTooltipComponent.html":{},"components/FacetNgxChart.html":{},"components/MapComponent.html":{},"modules/NetworkModule.html":{},"components/NgxChart.html":{},"components/ResultTimeline.html":{},"coverage.html":{},"index.html":{}}}],["bsfacetheatmapcomponent",{"_index":656,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsHeatmapComponent.html":{},"modules/BsHeatmapModule.html":{},"components/BsNodeInfoCard.html":{},"components/BsTooltipComponent.html":{},"components/FacetNgxChart.html":{},"components/MapComponent.html":{},"components/NgxChart.html":{},"components/ResultTimeline.html":{},"coverage.html":{},"index.html":{}}}],["bsfacetmodule",{"_index":1840,"title":{},"body":{"modules/GoogleMapsModule.html":{},"modules/NetworkModule.html":{}}}],["bsfacettimelinecomponent",{"_index":659,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"modules/BsTimelineModule.html":{},"components/BsTooltipComponent.html":{},"components/FacetNgxChart.html":{},"components/MapComponent.html":{},"components/NgxChart.html":{},"components/ResultTimeline.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"coverage.html":{},"index.html":{}}}],["bsfacettimelinecomponent.createaggregationevents(config",{"_index":2530,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["bsfacettimelinecomponent.createtimeseries(config",{"_index":2525,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["bsfacettimelinecomponent.defaultrecordstyle(r.$selected",{"_index":2543,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["bsheatmapcomponent",{"_index":661,"title":{"components/BsHeatmapComponent.html":{}},"body":{"components/BsEdgeInfoCard.html":{},"components/BsHeatmapComponent.html":{},"modules/BsHeatmapModule.html":{},"components/BsNodeInfoCard.html":{},"components/BsTooltipComponent.html":{},"components/FacetNgxChart.html":{},"interfaces/HeatmapItem.html":{},"components/MapComponent.html":{},"components/NgxChart.html":{},"components/ResultTimeline.html":{},"coverage.html":{},"index.html":{}}}],["bsheatmapmodule",{"_index":976,"title":{"modules/BsHeatmapModule.html":{}},"body":{"modules/BsHeatmapModule.html":{},"modules/BsTimelineModule.html":{},"modules/FinanceModule.html":{},"index.html":{},"modules.html":{}}}],["bsnodeinfocard",{"_index":662,"title":{"components/BsNodeInfoCard.html":{}},"body":{"components/BsEdgeInfoCard.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"components/BsTooltipComponent.html":{},"components/FacetNgxChart.html":{},"components/MapComponent.html":{},"modules/NetworkModule.html":{},"components/NgxChart.html":{},"interfaces/NodeData.html":{},"components/ResultTimeline.html":{},"coverage.html":{},"index.html":{}}}],["bsresultsheatmapview",{"_index":663,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsHeatmapComponent.html":{},"modules/BsHeatmapModule.html":{},"components/BsNodeInfoCard.html":{},"components/BsTooltipComponent.html":{},"components/FacetNgxChart.html":{},"components/MapComponent.html":{},"components/NgxChart.html":{},"components/ResultTimeline.html":{},"coverage.html":{},"index.html":{}}}],["bsselectionmodule",{"_index":996,"title":{},"body":{"modules/BsHeatmapModule.html":{},"modules/BsTimelineModule.html":{},"modules/FusionChartsModule.html":{},"modules/GoogleMapsModule.html":{},"modules/NgxChartsModule.html":{}}}],["bstimelinecomponent",{"_index":666,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"modules/BsTimelineModule.html":{},"components/BsTooltipComponent.html":{},"components/FacetNgxChart.html":{},"components/MapComponent.html":{},"components/NgxChart.html":{},"components/ResultTimeline.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{},"coverage.html":{},"index.html":{}}}],["bstimelinecomponent.counter",{"_index":2723,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["bstimelinemodule",{"_index":1049,"title":{"modules/BsTimelineModule.html":{}},"body":{"modules/BsTimelineModule.html":{},"index.html":{},"modules.html":{}}}],["bstooltipcomponent",{"_index":667,"title":{"components/BsTooltipComponent.html":{}},"body":{"components/BsEdgeInfoCard.html":{},"components/BsHeatmapComponent.html":{},"modules/BsHeatmapModule.html":{},"components/BsNodeInfoCard.html":{},"components/BsTooltipComponent.html":{},"components/FacetNgxChart.html":{},"components/MapComponent.html":{},"components/NgxChart.html":{},"components/ResultTimeline.html":{},"coverage.html":{},"index.html":{}}}],["buckets",{"_index":714,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["bugs",{"_index":3083,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["build",{"_index":763,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["buildchart",{"_index":707,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["buildchart(update",{"_index":756,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["builds",{"_index":759,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["built",{"_index":1667,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["button",{"_index":1353,"title":{},"body":{"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{}}}],["c",{"_index":1991,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{}}}],["c3e6cb",{"_index":1661,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["cache",{"_index":1364,"title":{},"body":{"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/DynamicNodeType.html":{}}}],["call",{"_index":368,"title":{},"body":{"classes/AsyncRecordsProvider.html":{},"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{}}}],["call(d3.axisleft(this.y).ticksize(0",{"_index":883,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["call(d3.axistop(this.x).ticksize(0",{"_index":879,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["call(this.brushbehavior",{"_index":2771,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["call(this.zoombehavior",{"_index":2849,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["callbacks",{"_index":2587,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{}}}],["called",{"_index":262,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"components/BsHeatmapComponent.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/HeatmapItem.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{}}}],["calling",{"_index":2028,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["calls",{"_index":3164,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["cancel",{"_index":1508,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["candy",{"_index":1833,"title":{},"body":{"modules/FusionChartsModule.html":{}}}],["candytheme",{"_index":1830,"title":{},"body":{"modules/FusionChartsModule.html":{}}}],["card",{"_index":578,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsNodeInfoCard.html":{},"interfaces/NodeData.html":{}}}],["card'},{'name",{"_index":655,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"components/BsTooltipComponent.html":{},"components/FacetNgxChart.html":{},"components/MapComponent.html":{},"components/NgxChart.html":{},"components/ResultTimeline.html":{}}}],["card.component",{"_index":2218,"title":{},"body":{"modules/NetworkModule.html":{}}}],["card.component.html",{"_index":595,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsNodeInfoCard.html":{},"interfaces/NodeData.html":{}}}],["card.component.ts",{"_index":574,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsNodeInfoCard.html":{},"interfaces/NodeData.html":{},"coverage.html":{}}}],["card.component.ts:24",{"_index":601,"title":{},"body":{"components/BsEdgeInfoCard.html":{}}}],["card.component.ts:26",{"_index":605,"title":{},"body":{"components/BsEdgeInfoCard.html":{}}}],["card.component.ts:27",{"_index":606,"title":{},"body":{"components/BsEdgeInfoCard.html":{}}}],["card.component.ts:29",{"_index":607,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsNodeInfoCard.html":{}}}],["card.component.ts:30",{"_index":608,"title":{},"body":{"components/BsEdgeInfoCard.html":{}}}],["card.component.ts:31",{"_index":1007,"title":{},"body":{"components/BsNodeInfoCard.html":{}}}],["card.component.ts:32",{"_index":604,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsNodeInfoCard.html":{}}}],["card.component.ts:34",{"_index":1010,"title":{},"body":{"components/BsNodeInfoCard.html":{}}}],["card.component.ts:36",{"_index":1009,"title":{},"body":{"components/BsNodeInfoCard.html":{}}}],["card.component.ts:38",{"_index":1006,"title":{},"body":{"components/BsNodeInfoCard.html":{}}}],["card.component.ts:40",{"_index":603,"title":{},"body":{"components/BsEdgeInfoCard.html":{}}}],["card.component.ts:70",{"_index":1005,"title":{},"body":{"components/BsNodeInfoCard.html":{}}}],["cards",{"_index":634,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsNodeInfoCard.html":{},"interfaces/NodeData.html":{},"interfaces/VisEvent.html":{}}}],["case",{"_index":1138,"title":{},"body":{"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/DynamicNodeType.html":{},"components/NgxChart.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"miscellaneous/functions.html":{}}}],["catch",{"_index":2359,"title":{},"body":{"components/ResultTimeline.html":{}}}],["categories",{"_index":1982,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{}}}],["category",{"_index":1958,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{}}}],["cause",{"_index":2958,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["caused",{"_index":2027,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["ccaggregation",{"_index":2392,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["ccaggregation?.mask",{"_index":2626,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["cdref",{"_index":1997,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{}}}],["centered",{"_index":1937,"title":{},"body":{"components/MapComponent.html":{}}}],["change",{"_index":2754,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["change.currentvalue",{"_index":2955,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["change.previousvalue",{"_index":2953,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["changed",{"_index":2024,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["changedetectorref",{"_index":1961,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{}}}],["changes",{"_index":777,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"interfaces/HeatmapItem.html":{},"components/MapComponent.html":{},"components/NgxChart.html":{},"components/ResultTimeline.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"miscellaneous/functions.html":{}}}],["changes[\"data",{"_index":2761,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["changes[\"events",{"_index":2480,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["changes[\"results",{"_index":1757,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{}}}],["changes[\"selection",{"_index":2756,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["changes[\"timeseries",{"_index":2472,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["changes[\"width",{"_index":2766,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["changes['dates",{"_index":2313,"title":{},"body":{"components/ResultTimeline.html":{}}}],["changes['events",{"_index":2314,"title":{},"body":{"components/ResultTimeline.html":{}}}],["changes['providers",{"_index":3029,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["chart",{"_index":761,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"modules/FusionChartsModule.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyDatum.html":{},"components/NgxChart.html":{},"modules/NgxChartsModule.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["chart's",{"_index":2143,"title":{},"body":{"interfaces/MoneyDatum.html":{}}}],["chart'},{'name",{"_index":671,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"components/BsTooltipComponent.html":{},"components/FacetNgxChart.html":{},"components/MapComponent.html":{},"components/NgxChart.html":{},"components/ResultTimeline.html":{}}}],["chart.html",{"_index":1108,"title":{},"body":{"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"components/NgxChart.html":{}}}],["chart.scss",{"_index":1109,"title":{},"body":{"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"components/NgxChart.html":{}}}],["chart.ts",{"_index":1651,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"coverage.html":{}}}],["chart.ts:100",{"_index":1809,"title":{},"body":{"components/FacetNgxChart.html":{}}}],["chart.ts:114",{"_index":1798,"title":{},"body":{"components/FacetNgxChart.html":{}}}],["chart.ts:191",{"_index":1807,"title":{},"body":{"components/FacetNgxChart.html":{}}}],["chart.ts:206",{"_index":1803,"title":{},"body":{"components/FacetNgxChart.html":{}}}],["chart.ts:21",{"_index":1793,"title":{},"body":{"components/FacetNgxChart.html":{}}}],["chart.ts:217",{"_index":1801,"title":{},"body":{"components/FacetNgxChart.html":{}}}],["chart.ts:22",{"_index":1787,"title":{},"body":{"components/FacetNgxChart.html":{}}}],["chart.ts:23",{"_index":1788,"title":{},"body":{"components/FacetNgxChart.html":{}}}],["chart.ts:232",{"_index":1802,"title":{},"body":{"components/FacetNgxChart.html":{}}}],["chart.ts:237",{"_index":1795,"title":{},"body":{"components/FacetNgxChart.html":{}}}],["chart.ts:24",{"_index":1789,"title":{},"body":{"components/FacetNgxChart.html":{}}}],["chart.ts:25",{"_index":1791,"title":{},"body":{"components/FacetNgxChart.html":{}}}],["chart.ts:253",{"_index":1799,"title":{},"body":{"components/FacetNgxChart.html":{}}}],["chart.ts:257",{"_index":1796,"title":{},"body":{"components/FacetNgxChart.html":{}}}],["chart.ts:26",{"_index":1790,"title":{},"body":{"components/FacetNgxChart.html":{}}}],["chart.ts:266",{"_index":1800,"title":{},"body":{"components/FacetNgxChart.html":{}}}],["chart.ts:27",{"_index":1792,"title":{},"body":{"components/FacetNgxChart.html":{}}}],["chart.ts:28",{"_index":1794,"title":{},"body":{"components/FacetNgxChart.html":{}}}],["chart.ts:31",{"_index":1804,"title":{},"body":{"components/FacetNgxChart.html":{}}}],["chart.ts:34",{"_index":1805,"title":{},"body":{"components/FacetNgxChart.html":{}}}],["chart.ts:35",{"_index":1806,"title":{},"body":{"components/FacetNgxChart.html":{}}}],["chart.ts:46",{"_index":1786,"title":{},"body":{"components/FacetNgxChart.html":{}}}],["chart.ts:93",{"_index":1797,"title":{},"body":{"components/FacetNgxChart.html":{}}}],["chart/chart",{"_index":1653,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"modules/FusionChartsModule.html":{},"modules/NgxChartsModule.html":{}}}],["chart/facet",{"_index":1650,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"modules/NgxChartsModule.html":{},"coverage.html":{}}}],["chartcomponent",{"_index":2229,"title":{},"body":{"components/NgxChart.html":{}}}],["chartcomponent(type",{"_index":2235,"title":{},"body":{"components/NgxChart.html":{}}}],["chartcomponent(type:string",{"_index":1136,"title":{},"body":{"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"components/NgxChart.html":{}}}],["chartdatapoint",{"_index":1092,"title":{"interfaces/ChartDataPoint.html":{}},"body":{"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"components/NgxChart.html":{},"coverage.html":{}}}],["chartoptions",{"_index":1105,"title":{"interfaces/ChartOptions.html":{}},"body":{"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"components/NgxChart.html":{},"coverage.html":{}}}],["charts",{"_index":1103,"title":{},"body":{"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"modules/FusionChartsModule.html":{},"components/NgxChart.html":{},"modules/NgxChartsModule.html":{},"dependencies.html":{}}}],["charts.module.ts",{"_index":2265,"title":{},"body":{"modules/NgxChartsModule.html":{}}}],["charts/chart/chart.ts",{"_index":1093,"title":{},"body":{"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"components/NgxChart.html":{},"coverage.html":{}}}],["charts/chart/chart.ts:28",{"_index":2233,"title":{},"body":{"components/NgxChart.html":{}}}],["charts/chart/chart.ts:29",{"_index":2232,"title":{},"body":{"components/NgxChart.html":{}}}],["charts/chart/chart.ts:30",{"_index":2234,"title":{},"body":{"components/NgxChart.html":{}}}],["charts/chart/chart.ts:31",{"_index":2249,"title":{},"body":{"components/NgxChart.html":{}}}],["charts/chart/chart.ts:32",{"_index":2247,"title":{},"body":{"components/NgxChart.html":{}}}],["charts/chart/chart.ts:33",{"_index":2243,"title":{},"body":{"components/NgxChart.html":{}}}],["charts/chart/chart.ts:34",{"_index":2244,"title":{},"body":{"components/NgxChart.html":{}}}],["charts/chart/chart.ts:35",{"_index":2231,"title":{},"body":{"components/NgxChart.html":{}}}],["charts/chart/chart.ts:43",{"_index":2241,"title":{},"body":{"components/NgxChart.html":{}}}],["charts/chart/chart.ts:49",{"_index":2240,"title":{},"body":{"components/NgxChart.html":{}}}],["charts/chart/chart.ts:57",{"_index":2239,"title":{},"body":{"components/NgxChart.html":{}}}],["charts/chart/chart.ts:62",{"_index":2251,"title":{},"body":{"components/NgxChart.html":{}}}],["charts/chart/chart.ts:66",{"_index":2236,"title":{},"body":{"components/NgxChart.html":{}}}],["charts/chart/chart.ts:75",{"_index":2253,"title":{},"body":{"components/NgxChart.html":{}}}],["charts/chart/chart.ts:79",{"_index":2238,"title":{},"body":{"components/NgxChart.html":{}}}],["charts/chart/chart.ts:83",{"_index":2237,"title":{},"body":{"components/NgxChart.html":{}}}],["charts/chart/chart.ts:92",{"_index":2245,"title":{},"body":{"components/NgxChart.html":{}}}],["charts/facet",{"_index":1649,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"coverage.html":{}}}],["charts/ngx",{"_index":2264,"title":{},"body":{"modules/NgxChartsModule.html":{}}}],["charttype",{"_index":1134,"title":{},"body":{"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"components/NgxChart.html":{}}}],["check",{"_index":2025,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["checkdatachanges(change",{"_index":2951,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["children",{"_index":313,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"interfaces/VisEvent.html":{}}}],["circle",{"_index":293,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{}}}],["circular",{"_index":585,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsNodeInfoCard.html":{},"interfaces/NodeData.html":{}}}],["class",{"_index":130,"title":{"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"classes/NetworkDataset.html":{}},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"components/BsEdgeInfoCard.html":{},"components/BsHeatmapComponent.html":{},"modules/BsHeatmapModule.html":{},"components/BsNodeInfoCard.html":{},"modules/BsTimelineModule.html":{},"components/BsTooltipComponent.html":{},"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"modules/FinanceModule.html":{},"modules/FusionChartsModule.html":{},"modules/GoogleMapsModule.html":{},"interfaces/HeatmapItem.html":{},"components/MapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"modules/NetworkModule.html":{},"interfaces/NetworkProvider.html":{},"components/NgxChart.html":{},"modules/NgxChartsModule.html":{},"interfaces/Node.html":{},"interfaces/NodeData.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"components/ResultTimeline.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{},"modules/VisTimelineModule.html":{},"coverage.html":{}}}],["class=\"mr",{"_index":643,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsNodeInfoCard.html":{}}}],["classes",{"_index":324,"title":{},"body":{"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"classes/NetworkDataset.html":{},"index.html":{}}}],["cleanremovenode",{"_index":1554,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["cleanremovenode(nodeid",{"_index":1566,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["clear",{"_index":1540,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"components/MapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/VisEvent.html":{}}}],["clearfilters",{"_index":1668,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"components/MapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/VisEvent.html":{}}}],["clearing",{"_index":1912,"title":{},"body":{"components/MapComponent.html":{}}}],["clearly",{"_index":2964,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["clears",{"_index":1189,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{}}}],["click",{"_index":1111,"title":{},"body":{"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"components/FacetNgxChart.html":{},"components/NgxChart.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{}}}],["click(datapoint",{"_index":1766,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["clicked",{"_index":263,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"components/MapComponent.html":{},"interfaces/MoneyDatum.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/VisEvent.html":{},"miscellaneous/functions.html":{}}}],["clicks",{"_index":781,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/DynamicNodeType.html":{}}}],["close",{"_index":1331,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["closed",{"_index":596,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsNodeInfoCard.html":{},"components/MapComponent.html":{},"interfaces/NodeData.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/VisEvent.html":{}}}],["closeness",{"_index":2918,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["closetooltip",{"_index":2617,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["closewindow",{"_index":1853,"title":{},"body":{"components/MapComponent.html":{}}}],["cloud",{"_index":1964,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{}}}],["cloud'},{'name",{"_index":678,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"components/BsTooltipComponent.html":{},"components/FacetNgxChart.html":{},"components/MapComponent.html":{},"components/NgxChart.html":{},"components/ResultTimeline.html":{}}}],["cloud.component",{"_index":1818,"title":{},"body":{"modules/FinanceModule.html":{}}}],["cloud.component.html",{"_index":1965,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{}}}],["cloud.component.scss",{"_index":1966,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{}}}],["cloud.component.ts",{"_index":1957,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"coverage.html":{}}}],["cloud/money",{"_index":1817,"title":{},"body":{"modules/FinanceModule.html":{},"interfaces/MoneyCloudDatum.html":{},"coverage.html":{}}}],["clunky",{"_index":1147,"title":{},"body":{"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"components/NgxChart.html":{}}}],["cluster_bsheatmapmodule",{"_index":982,"title":{},"body":{"modules/BsHeatmapModule.html":{},"index.html":{}}}],["cluster_bsheatmapmodule_declarations",{"_index":983,"title":{},"body":{"modules/BsHeatmapModule.html":{},"index.html":{}}}],["cluster_bsheatmapmodule_exports",{"_index":984,"title":{},"body":{"modules/BsHeatmapModule.html":{},"index.html":{}}}],["cluster_bstimelinemodule",{"_index":1050,"title":{},"body":{"modules/BsTimelineModule.html":{},"index.html":{}}}],["cluster_bstimelinemodule_declarations",{"_index":1051,"title":{},"body":{"modules/BsTimelineModule.html":{},"index.html":{}}}],["cluster_bstimelinemodule_exports",{"_index":1053,"title":{},"body":{"modules/BsTimelineModule.html":{},"index.html":{}}}],["cluster_bstimelinemodule_imports",{"_index":1052,"title":{},"body":{"modules/BsTimelineModule.html":{}}}],["cluster_financemodule",{"_index":1811,"title":{},"body":{"modules/FinanceModule.html":{},"index.html":{}}}],["cluster_financemodule_declarations",{"_index":1812,"title":{},"body":{"modules/FinanceModule.html":{},"index.html":{}}}],["cluster_financemodule_exports",{"_index":1814,"title":{},"body":{"modules/FinanceModule.html":{},"index.html":{}}}],["cluster_financemodule_imports",{"_index":1813,"title":{},"body":{"modules/FinanceModule.html":{}}}],["cluster_fusionchartsmodule",{"_index":1820,"title":{},"body":{"modules/FusionChartsModule.html":{},"index.html":{}}}],["cluster_fusionchartsmodule_declarations",{"_index":1821,"title":{},"body":{"modules/FusionChartsModule.html":{},"index.html":{}}}],["cluster_fusionchartsmodule_exports",{"_index":1822,"title":{},"body":{"modules/FusionChartsModule.html":{},"index.html":{}}}],["cluster_googlemapsmodule",{"_index":1836,"title":{},"body":{"modules/GoogleMapsModule.html":{},"index.html":{}}}],["cluster_googlemapsmodule_declarations",{"_index":1837,"title":{},"body":{"modules/GoogleMapsModule.html":{},"index.html":{}}}],["cluster_googlemapsmodule_exports",{"_index":1838,"title":{},"body":{"modules/GoogleMapsModule.html":{},"index.html":{}}}],["cluster_networkmodule",{"_index":2210,"title":{},"body":{"modules/NetworkModule.html":{},"index.html":{}}}],["cluster_networkmodule_declarations",{"_index":2211,"title":{},"body":{"modules/NetworkModule.html":{},"index.html":{}}}],["cluster_networkmodule_exports",{"_index":2212,"title":{},"body":{"modules/NetworkModule.html":{},"index.html":{}}}],["cluster_ngxchartsmodule",{"_index":2261,"title":{},"body":{"modules/NgxChartsModule.html":{},"index.html":{}}}],["cluster_ngxchartsmodule_declarations",{"_index":2262,"title":{},"body":{"modules/NgxChartsModule.html":{},"index.html":{}}}],["cluster_ngxchartsmodule_exports",{"_index":2263,"title":{},"body":{"modules/NgxChartsModule.html":{},"index.html":{}}}],["cluster_vistimelinemodule",{"_index":3183,"title":{},"body":{"modules/VisTimelineModule.html":{},"index.html":{}}}],["cluster_vistimelinemodule_declarations",{"_index":3184,"title":{},"body":{"modules/VisTimelineModule.html":{},"index.html":{}}}],["cluster_vistimelinemodule_exports",{"_index":3185,"title":{},"body":{"modules/VisTimelineModule.html":{},"index.html":{}}}],["clustering",{"_index":2925,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["col",{"_index":495,"title":{},"body":{"classes/BaseProvider.html":{}}}],["collapsed",{"_index":401,"title":{},"body":{"classes/AsyncRecordsProvider.html":{}}}],["collapsemodule",{"_index":2214,"title":{},"body":{"modules/NetworkModule.html":{}}}],["collapsing",{"_index":383,"title":{},"body":{"classes/AsyncRecordsProvider.html":{},"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{}}}],["color",{"_index":526,"title":{},"body":{"classes/BaseProvider.html":{},"components/BsHeatmapComponent.html":{},"components/BsTooltipComponent.html":{},"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"components/NgxChart.html":{},"miscellaneous/variables.html":{}}}],["colors",{"_index":1657,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["colorscheme",{"_index":715,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"interfaces/HeatmapItem.html":{},"components/NgxChart.html":{}}}],["column",{"_index":1968,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{}}}],["combination",{"_index":2433,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["combined",{"_index":2417,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{}}}],["combinelastest",{"_index":2434,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["combinelatest",{"_index":1336,"title":{},"body":{"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/VisEvent.html":{}}}],["combinelatest(sourceproviders.map(p",{"_index":1371,"title":{},"body":{"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/DynamicNodeType.html":{}}}],["combinelatest(this.events$).pipe",{"_index":2483,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["combinelatest(this.timeseries",{"_index":2477,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["come",{"_index":1354,"title":{},"body":{"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/VisEvent.html":{}}}],["comes",{"_index":205,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["commonmodule",{"_index":989,"title":{},"body":{"modules/BsHeatmapModule.html":{},"modules/BsTimelineModule.html":{},"modules/FinanceModule.html":{},"modules/FusionChartsModule.html":{},"modules/GoogleMapsModule.html":{},"modules/NetworkModule.html":{},"modules/NgxChartsModule.html":{},"modules/VisTimelineModule.html":{}}}],["companies",{"_index":3342,"title":{},"body":{"miscellaneous/functions.html":{}}}],["company",{"_index":3326,"title":{},"body":{"miscellaneous/functions.html":{}}}],["compare",{"_index":2968,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["compares",{"_index":2614,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["completed",{"_index":2638,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["complexity",{"_index":90,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{}}}],["component",{"_index":566,"title":{"components/BsEdgeInfoCard.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"components/BsTooltipComponent.html":{},"components/FacetNgxChart.html":{},"components/MapComponent.html":{},"components/NgxChart.html":{},"components/ResultTimeline.html":{}},"body":{"components/BsEdgeInfoCard.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"modules/BsTimelineModule.html":{},"components/BsTooltipComponent.html":{},"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"interfaces/HeatmapItem.html":{},"components/MapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"components/NgxChart.html":{},"interfaces/NodeData.html":{},"components/ResultTimeline.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{},"coverage.html":{}}}],["component_template",{"_index":651,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"components/BsTooltipComponent.html":{},"components/FacetNgxChart.html":{},"components/MapComponent.html":{},"components/NgxChart.html":{},"components/ResultTimeline.html":{}}}],["components",{"_index":568,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"components/BsTooltipComponent.html":{},"components/FacetNgxChart.html":{},"components/MapComponent.html":{},"components/NgxChart.html":{},"components/ResultTimeline.html":{},"index.html":{}}}],["compress",{"_index":1325,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{}}}],["compute",{"_index":147,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["computed",{"_index":1975,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{}}}],["computes",{"_index":1460,"title":{},"body":{"interfaces/DynamicNodeType.html":{},"interfaces/MoneyDatum.html":{}}}],["concretely",{"_index":1348,"title":{},"body":{"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{}}}],["config",{"_index":2494,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["config.aggregations.length",{"_index":2575,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["config.areastyles",{"_index":2628,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["config.current",{"_index":2501,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["config.default",{"_index":2502,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["config.display",{"_index":2545,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["config.display(r",{"_index":2546,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["config.getdate(item",{"_index":2632,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["config.getdate(item).toutcstring()+\"|\"+config.getdisplay(item",{"_index":2631,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["config.getdisplay(item",{"_index":2635,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["config.linestyles",{"_index":2627,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["config.maxnmonths.foreach((maxnmonths",{"_index":2581,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["config.maxnmonths.length",{"_index":2574,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["config.name",{"_index":2623,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["config.primary",{"_index":2624,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["config.size",{"_index":2537,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["config.size(item",{"_index":2633,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["config.size(r",{"_index":2540,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["config.styles",{"_index":2542,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["config.styles(item",{"_index":2634,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["config.styles(r",{"_index":2544,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["configs.ts",{"_index":3238,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["configuration",{"_index":99,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["conflicts",{"_index":1273,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{}}}],["connected",{"_index":274,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["connectednodes",{"_index":275,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{}}}],["connectednodes.length",{"_index":280,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{}}}],["console.error('invalid",{"_index":2815,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["console.error(config",{"_index":2576,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["console.log",{"_index":2336,"title":{},"body":{"components/ResultTimeline.html":{}}}],["console.log(\"cooc1:\",data_date[i+2",{"_index":2328,"title":{},"body":{"components/ResultTimeline.html":{}}}],["console.log(\"date:\",data_date[i+1",{"_index":2348,"title":{},"body":{"components/ResultTimeline.html":{}}}],["console.log(\"no",{"_index":2378,"title":{},"body":{"components/ResultTimeline.html":{}}}],["console.log('event",{"_index":2366,"title":{},"body":{"components/ResultTimeline.html":{}}}],["console.log('selected",{"_index":2364,"title":{},"body":{"components/ResultTimeline.html":{}}}],["console.log(cooc",{"_index":2331,"title":{},"body":{"components/ResultTimeline.html":{}}}],["console.log(data",{"_index":2356,"title":{},"body":{"components/ResultTimeline.html":{}}}],["console.log(properties",{"_index":2368,"title":{},"body":{"components/ResultTimeline.html":{}}}],["console.log(regdate.test(date",{"_index":2335,"title":{},"body":{"components/ResultTimeline.html":{}}}],["console.log(this.items.get(properties.items[0",{"_index":2371,"title":{},"body":{"components/ResultTimeline.html":{}}}],["console.log(year",{"_index":2334,"title":{},"body":{"components/ResultTimeline.html":{}}}],["console.warn(`aggregation",{"_index":173,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{}}}],["const",{"_index":152,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/BaseProvider.html":{},"components/BsEdgeInfoCard.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"interfaces/HeatmapItem.html":{},"components/MapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeData.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"components/ResultTimeline.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{}}}],["constant",{"_index":3156,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["constant',true",{"_index":3170,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["constructed",{"_index":58,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{}}}],["constructor",{"_index":137,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"components/BsHeatmapComponent.html":{},"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"interfaces/HeatmapItem.html":{},"components/MapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"components/NgxChart.html":{},"interfaces/RecordNode.html":{},"components/ResultTimeline.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{}}}],["constructor(el",{"_index":725,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["constructor(facetservice",{"_index":1785,"title":{},"body":{"components/FacetNgxChart.html":{}}}],["constructor(intlservice",{"_index":2230,"title":{},"body":{"components/NgxChart.html":{}}}],["constructor(name",{"_index":347,"title":{},"body":{"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{}}}],["constructor(public",{"_index":2310,"title":{},"body":{"components/ResultTimeline.html":{}}}],["constructor(searchservice",{"_index":1860,"title":{},"body":{"components/MapComponent.html":{}}}],["constructor(vistimelineservice",{"_index":2284,"title":{},"body":{"components/ResultTimeline.html":{}}}],["contain",{"_index":1251,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{},"miscellaneous/functions.html":{}}}],["contained",{"_index":1205,"title":{},"body":{"interfaces/CustomData.html":{},"components/MapComponent.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{},"miscellaneous/functions.html":{}}}],["container",{"_index":910,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["containing",{"_index":1267,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{},"miscellaneous/functions.html":{}}}],["contains",{"_index":1163,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{},"miscellaneous/functions.html":{}}}],["content",{"_index":1062,"title":{},"body":{"components/BsTooltipComponent.html":{},"components/ResultTimeline.html":{},"interfaces/VisEvent.html":{}}}],["contentchild",{"_index":2690,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{}}}],["contentchild(\"edgetpl",{"_index":3014,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["contentchild(\"nodetpl",{"_index":3012,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["contentchild(\"tooltiptpl",{"_index":2695,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["context",{"_index":250,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/VisEvent.html":{}}}],["convenience",{"_index":9,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/BaseProvider.html":{}}}],["convert",{"_index":911,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["converted",{"_index":104,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{}}}],["cooc",{"_index":2324,"title":{},"body":{"components/ResultTimeline.html":{}}}],["cooc[0",{"_index":2343,"title":{},"body":{"components/ResultTimeline.html":{}}}],["coocaggregationdemo",{"_index":3241,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["coocaggregationdemo(providerfactory",{"_index":3324,"title":{},"body":{"miscellaneous/functions.html":{}}}],["cooccurrence",{"_index":15,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"miscellaneous/functions.html":{}}}],["coocrecorddemo",{"_index":3242,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["coocrecorddemo(providerfactory",{"_index":3327,"title":{},"body":{"miscellaneous/functions.html":{}}}],["cool",{"_index":1145,"title":{},"body":{"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"components/NgxChart.html":{}}}],["coordinate",{"_index":912,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["coordinates",{"_index":2984,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["corresponding",{"_index":181,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{}}}],["count",{"_index":118,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/BaseProvider.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeData.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{}}}],["counter",{"_index":2715,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["counts",{"_index":253,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{}}}],["counts.get(d.category",{"_index":2052,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{}}}],["counts.get(money.value",{"_index":2150,"title":{},"body":{"interfaces/MoneyDatum.html":{}}}],["counts.set(item.value.tostring",{"_index":2146,"title":{},"body":{"interfaces/MoneyDatum.html":{}}}],["cover",{"_index":593,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsNodeInfoCard.html":{},"interfaces/NodeData.html":{}}}],["coverage",{"_index":3188,"title":{"coverage.html":{}},"body":{"coverage.html":{}}}],["create",{"_index":197,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/BaseProvider.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"interfaces/CustomData.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"interfaces/HeatmapItem.html":{},"interfaces/NodeData.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{}}}],["createaggregationevents(config",{"_index":2629,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["createchartoptions",{"_index":1726,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["created",{"_index":416,"title":{},"body":{"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["createdatapoints(items",{"_index":2643,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["createedge(type",{"_index":511,"title":{},"body":{"classes/BaseProvider.html":{}}}],["createexpandaction(type",{"_index":319,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{}}}],["createnode(type",{"_index":492,"title":{},"body":{"classes/BaseProvider.html":{}}}],["creates",{"_index":381,"title":{},"body":{"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{},"miscellaneous/functions.html":{}}}],["createtimeseries(config",{"_index":2622,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["cross",{"_index":200,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"miscellaneous/functions.html":{}}}],["crossaggregationdemo",{"_index":3243,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["crossaggregationdemo(providerfactory",{"_index":3331,"title":{},"body":{"miscellaneous/functions.html":{}}}],["crossaggregationexpanddemo",{"_index":3244,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["crossaggregationexpanddemo(providerfactory",{"_index":3332,"title":{},"body":{"miscellaneous/functions.html":{}}}],["cur",{"_index":3051,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["currency",{"_index":1959,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{}}}],["current",{"_index":1672,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"components/MapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{}}}],["currently",{"_index":950,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/DynamicNodeType.html":{},"components/MapComponent.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["currentrange",{"_index":2438,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["currentselection",{"_index":2709,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["currentvalue",{"_index":2954,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["currentvalue.length",{"_index":2967,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["cursor",{"_index":957,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["curve(d3[this.curvetype",{"_index":2726,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["curvemonotonex",{"_index":2429,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{}}}],["curvetype",{"_index":2428,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{}}}],["custom",{"_index":12,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/BaseProvider.html":{},"interfaces/CustomData.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"components/MapComponent.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["customdata",{"_index":1161,"title":{"interfaces/CustomData.html":{}},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{},"coverage.html":{}}}],["customprops",{"_index":485,"title":{},"body":{"classes/BaseProvider.html":{}}}],["d",{"_index":900,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{}}}],["d.aggregation",{"_index":2526,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["d.category",{"_index":2075,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{}}}],["d.ccaggregation",{"_index":2527,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["d.count",{"_index":2069,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{}}}],["d.currency",{"_index":2081,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{}}}],["d.date",{"_index":2156,"title":{},"body":{"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["d.i",{"_index":2051,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{}}}],["d.record.id",{"_index":2162,"title":{},"body":{"interfaces/MoneyDatum.html":{}}}],["d.type",{"_index":2789,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["d.value",{"_index":2066,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["d3",{"_index":768,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{}}}],["d3.area",{"_index":2701,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["d3.axisbottom(this.x",{"_index":2092,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{}}}],["d3.axisleft(this.y",{"_index":2108,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["d3.brushbehavior",{"_index":2705,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["d3.brushselection(this.gbrush.nativeelement",{"_index":2885,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["d3.brushx",{"_index":2735,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["d3.countabletimeinterval",{"_index":2678,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["d3.extent(allprimarydates",{"_index":2809,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["d3.extent(this.data",{"_index":2068,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{}}}],["d3.line",{"_index":2702,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["d3.max(data",{"_index":2811,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["d3.max(s.dates",{"_index":2813,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["d3.mouse(this.gbrush.nativeelement)[0",{"_index":2906,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["d3.mouse(this.overlay.nativeelement)[0",{"_index":2167,"title":{},"body":{"interfaces/MoneyDatum.html":{}}}],["d3.scaleband",{"_index":811,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{}}}],["d3.scalelinear",{"_index":1986,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["d3.scalelog",{"_index":2006,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{}}}],["d3.scalelogarithmic",{"_index":1987,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{}}}],["d3.scaleordinal",{"_index":1992,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{}}}],["d3.scalequantile",{"_index":792,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["d3.scaletime",{"_index":2137,"title":{},"body":{"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["d3.scaleutc",{"_index":2139,"title":{},"body":{"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["d3.select(nodes[i",{"_index":921,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["d3.select(this.gbrush.nativeelement",{"_index":2770,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["d3.select(this.gx.nativeelement",{"_index":869,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["d3.select(this.gy.nativeelement",{"_index":871,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["d3.select(this.overlay.nativeelement",{"_index":2020,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{}}}],["d3.selection",{"_index":813,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["d3.timeday",{"_index":2679,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["d3.timeday.offset(date",{"_index":2675,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["d3.timeformat(\"%y",{"_index":2441,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["d3.timehour.offset(date",{"_index":2670,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["d3.timemonth",{"_index":2681,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["d3.timemonth.count(range[0",{"_index":2571,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["d3.timemonth.offset(date",{"_index":2676,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["d3.timeweek",{"_index":2680,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["d3.timeyear",{"_index":2682,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["d3.transition",{"_index":877,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["d3.transition().duration(this.transition",{"_index":876,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["d3.zoom",{"_index":2843,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["d3.zoombehavior",{"_index":2707,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["d3.zoomidentity",{"_index":2835,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["d3.zoomtransform(this.brush$.node",{"_index":2899,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["damping",{"_index":3149,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["dampingcontrol",{"_index":3139,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["dampingcontrol.value",{"_index":3158,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["dampingpref",{"_index":3178,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["dark",{"_index":748,"title":{},"body":{"components/BsHeatmapComponent.html":{},"components/BsTooltipComponent.html":{},"modules/FusionChartsModule.html":{},"interfaces/HeatmapItem.html":{},"components/MapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{}}}],["darkgrey",{"_index":970,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["darkstyle",{"_index":1909,"title":{},"body":{"components/MapComponent.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["data",{"_index":70,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"components/NgxChart.html":{},"interfaces/Node.html":{},"interfaces/NodeData.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{},"dependencies.html":{}}}],["data([{type",{"_index":2778,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["data.addedges(this.createedge(type",{"_index":239,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{}}}],["data.addnodes(node",{"_index":1229,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{}}}],["data.directed",{"_index":1280,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{}}}],["data.directed[i",{"_index":1281,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{}}}],["data.fieldvalue",{"_index":1283,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{}}}],["data.filter(s",{"_index":2802,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["data.length",{"_index":937,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["data.relations",{"_index":1278,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{}}}],["data.relations[i",{"_index":1279,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{}}}],["data.values.length",{"_index":1270,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{}}}],["data/peer/esm/vis",{"_index":1475,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/VisEvent.html":{}}}],["data[0",{"_index":2804,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["data_date",{"_index":2322,"title":{},"body":{"components/ResultTimeline.html":{}}}],["data_date.substring(1,data_date.length",{"_index":2325,"title":{},"body":{"components/ResultTimeline.html":{}}}],["datafiltered",{"_index":692,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["datafiltered.length",{"_index":935,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["dataitem",{"_index":2303,"title":{},"body":{"components/ResultTimeline.html":{}}}],["datapoint",{"_index":1159,"title":{},"body":{"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"components/FacetNgxChart.html":{},"components/NgxChart.html":{}}}],["datapoint.name",{"_index":1735,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["datapoint.value",{"_index":1778,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["datapoints",{"_index":1664,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["dataset",{"_index":145,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/VisEvent.html":{}}}],["dataset.addedges(edge",{"_index":1264,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{}}}],["dataset.addedges(this.createedge(type",{"_index":1282,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{}}}],["dataset.addnodes(node",{"_index":1260,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{}}}],["dataset.addnodes(recordnode",{"_index":1274,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{}}}],["dataset.foreach(dataset",{"_index":1373,"title":{},"body":{"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/DynamicNodeType.html":{}}}],["dataset.getadjacentedges(neighbor.id",{"_index":1302,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{}}}],["dataset.getadjacentedges(node.id",{"_index":1290,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{}}}],["dataset.getedges().foreach(edge",{"_index":1603,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["dataset.getnode(node.id",{"_index":1295,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{}}}],["dataset.getnodes().foreach(node",{"_index":1374,"title":{},"body":{"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["dataset.updatedatasets(this.context.nodes",{"_index":3055,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["datasets",{"_index":403,"title":{},"body":{"classes/AsyncRecordsProvider.html":{},"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/VisEvent.html":{}}}],["datasets.reduce((prev",{"_index":3050,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["date",{"_index":2131,"title":{},"body":{"interfaces/MoneyDatum.html":{},"components/ResultTimeline.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{}}}],["date(cooc[1",{"_index":2327,"title":{},"body":{"components/ResultTimeline.html":{}}}],["date(parsedexpr.values[0",{"_index":2466,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["date(parsedexpr.values[1",{"_index":2467,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["date.getfullyear",{"_index":2333,"title":{},"body":{"components/ResultTimeline.html":{}}}],["dateobj.display",{"_index":2350,"title":{},"body":{"components/ResultTimeline.html":{}}}],["dateobj.locations.split(\",\")[0",{"_index":2349,"title":{},"body":{"components/ResultTimeline.html":{}}}],["dates",{"_index":2279,"title":{},"body":{"components/ResultTimeline.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{}}}],["dates.foreach(dateobj",{"_index":2346,"title":{},"body":{"components/ResultTimeline.html":{}}}],["datum",{"_index":2046,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{}}}],["datum.currency",{"_index":2173,"title":{},"body":{"interfaces/MoneyDatum.html":{}}}],["datum.rawvalue",{"_index":2120,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{}}}],["day",{"_index":2424,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{}}}],["days",{"_index":2567,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{}}}],["dd",{"_index":2669,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["deactivate",{"_index":2851,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["deal)#(usd",{"_index":1971,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{}}}],["debounce",{"_index":3162,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["debouncesync",{"_index":3165,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["decimal",{"_index":1868,"title":{},"body":{"components/MapComponent.html":{}}}],["declarations",{"_index":979,"title":{},"body":{"modules/BsHeatmapModule.html":{},"modules/BsTimelineModule.html":{},"modules/FinanceModule.html":{},"modules/FusionChartsModule.html":{},"modules/GoogleMapsModule.html":{},"modules/NetworkModule.html":{},"modules/NgxChartsModule.html":{},"modules/VisTimelineModule.html":{},"index.html":{}}}],["decoration",{"_index":955,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["decorators",{"_index":795,"title":{},"body":{"components/BsHeatmapComponent.html":{},"components/NgxChart.html":{}}}],["decreasing",{"_index":1038,"title":{},"body":{"components/BsNodeInfoCard.html":{},"interfaces/NodeData.html":{}}}],["deep",{"_index":948,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["defacet",{"_index":3426,"title":{},"body":{"miscellaneous/variables.html":{}}}],["default",{"_index":115,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"components/BsHeatmapComponent.html":{},"components/BsTooltipComponent.html":{},"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/CustomData.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"components/MapComponent.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"components/NgxChart.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"components/ResultTimeline.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/VisEvent.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["defaultchart",{"_index":3203,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["defaultoptions",{"_index":2296,"title":{},"body":{"components/ResultTimeline.html":{},"interfaces/VisEvent.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["defaultrecordstyle(selected",{"_index":2683,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["definance",{"_index":3192,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["define",{"_index":113,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{}}}],["defined",{"_index":351,"title":{},"body":{"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"components/BsEdgeInfoCard.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"components/BsTooltipComponent.html":{},"components/FacetNgxChart.html":{},"components/MapComponent.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"components/NgxChart.html":{},"components/ResultTimeline.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["defines",{"_index":1173,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{}}}],["degooglemaps",{"_index":3208,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["deheatmap",{"_index":3222,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["delay",{"_index":3081,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["dependencies",{"_index":978,"title":{"dependencies.html":{}},"body":{"modules/BsHeatmapModule.html":{},"modules/BsTimelineModule.html":{},"modules/FinanceModule.html":{},"modules/FusionChartsModule.html":{},"modules/GoogleMapsModule.html":{},"modules/NetworkModule.html":{},"modules/NgxChartsModule.html":{},"modules/VisTimelineModule.html":{},"dependencies.html":{},"index.html":{}}}],["depending",{"_index":1285,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{}}}],["deprecated",{"_index":949,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["deresultsview",{"_index":3435,"title":{},"body":{"miscellaneous/variables.html":{}}}],["description",{"_index":8,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/VisEvent.html":{},"miscellaneous/functions.html":{}}}],["desearch",{"_index":3436,"title":{},"body":{"miscellaneous/variables.html":{}}}],["desired",{"_index":1864,"title":{},"body":{"components/MapComponent.html":{}}}],["detail",{"_index":2607,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["determined",{"_index":2531,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["determines",{"_index":1492,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["difference",{"_index":2957,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["different",{"_index":172,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"components/BsNodeInfoCard.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/NodeData.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["dimensional",{"_index":208,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{}}}],["dimensions",{"_index":1154,"title":{},"body":{"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"components/NgxChart.html":{}}}],["directed",{"_index":24,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/BaseProvider.html":{},"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{}}}],["directive",{"_index":649,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"components/BsTooltipComponent.html":{},"components/FacetNgxChart.html":{},"components/MapComponent.html":{},"components/NgxChart.html":{},"components/ResultTimeline.html":{}}}],["directives",{"_index":685,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"components/BsTooltipComponent.html":{},"components/FacetNgxChart.html":{},"components/MapComponent.html":{},"components/NgxChart.html":{},"components/ResultTimeline.html":{}}}],["directly",{"_index":328,"title":{},"body":{"classes/AsyncRecordsProvider.html":{},"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{}}}],["disabled",{"_index":299,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{}}}],["discarded",{"_index":1507,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["display",{"_index":221,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/BaseProvider.html":{},"components/BsHeatmapComponent.html":{},"interfaces/CustomData.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyDatum.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"miscellaneous/functions.html":{}}}],["display=paginate",{"_index":1242,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{}}}],["displayed",{"_index":306,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"interfaces/HeatmapItem.html":{},"components/MapComponent.html":{},"interfaces/MoneyDatum.html":{},"interfaces/NodeData.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/VisEvent.html":{},"miscellaneous/functions.html":{}}}],["displays",{"_index":25,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"interfaces/CustomData.html":{},"interfaces/MoneyDatum.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{},"miscellaneous/functions.html":{}}}],["distribution",{"_index":201,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"miscellaneous/functions.html":{}}}],["distributions",{"_index":214,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"miscellaneous/functions.html":{}}}],["doc",{"_index":2379,"title":{},"body":{"components/ResultTimeline.html":{}}}],["docheck",{"_index":1095,"title":{},"body":{"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"components/NgxChart.html":{}}}],["document",{"_index":1709,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"components/MapComponent.html":{}}}],["document.body.contains(this.wrapper.nativeelement",{"_index":1158,"title":{},"body":{"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"components/NgxChart.html":{}}}],["documentation",{"_index":3189,"title":{},"body":{"coverage.html":{}}}],["documents",{"_index":149,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AsyncRecordsProvider.html":{},"interfaces/CustomData.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"components/MapComponent.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{},"miscellaneous/functions.html":{}}}],["dom",{"_index":571,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"components/BsTooltipComponent.html":{},"components/FacetNgxChart.html":{},"components/MapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"components/NgxChart.html":{},"components/ResultTimeline.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["domain",{"_index":1989,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["domain([0",{"_index":2076,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{}}}],["domain(this.datafiltered.map(item",{"_index":859,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["domain(this.x.domain",{"_index":2867,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["domain(this.xt.domain",{"_index":2869,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["domain(xlabels",{"_index":848,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["domain(ylabels",{"_index":854,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["domain[0].gettime",{"_index":2933,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["domain[1].gettime",{"_index":2932,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["don't",{"_index":1141,"title":{},"body":{"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"components/NgxChart.html":{}}}],["draw",{"_index":2032,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["drawevents(events",{"_index":2985,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["drawn",{"_index":509,"title":{},"body":{"classes/BaseProvider.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["draws",{"_index":2090,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["drawxaxis",{"_index":2091,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["drawyaxis",{"_index":2095,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["due",{"_index":2699,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["duplicate",{"_index":1254,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{}}}],["duplicates",{"_index":1582,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["dynamic",{"_index":1337,"title":{},"body":{"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"miscellaneous/functions.html":{}}}],["dynamicedge",{"_index":1334,"title":{"interfaces/DynamicEdge.html":{}},"body":{"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{},"coverage.html":{}}}],["dynamicedgeprovider",{"_index":1358,"title":{},"body":{"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{},"coverage.html":{}}}],["dynamicedgetype",{"_index":1339,"title":{"interfaces/DynamicEdgeType.html":{}},"body":{"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["dynamicedgetype).getquery",{"_index":1347,"title":{},"body":{"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{}}}],["dynamicnodeprovider",{"_index":1440,"title":{},"body":{"interfaces/DynamicNodeType.html":{},"coverage.html":{}}}],["dynamicnodetype",{"_index":1427,"title":{"interfaces/DynamicNodeType.html":{}},"body":{"interfaces/DynamicNodeType.html":{},"coverage.html":{}}}],["e",{"_index":2445,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{}}}],["e.count",{"_index":1023,"title":{},"body":{"components/BsNodeInfoCard.html":{},"interfaces/NodeData.html":{}}}],["e.from",{"_index":1018,"title":{},"body":{"components/BsNodeInfoCard.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeData.html":{},"interfaces/NodeType.html":{}}}],["e.to",{"_index":1020,"title":{},"body":{"components/BsNodeInfoCard.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeData.html":{},"interfaces/NodeType.html":{}}}],["e.value",{"_index":230,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{}}}],["e.visible",{"_index":1320,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{}}}],["each",{"_index":184,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{},"miscellaneous/functions.html":{}}}],["each(this.wrap",{"_index":898,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["ease",{"_index":963,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["east",{"_index":1940,"title":{},"body":{"components/MapComponent.html":{}}}],["edge",{"_index":39,"title":{"interfaces/Edge.html":{}},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"components/BsEdgeInfoCard.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"components/BsTooltipComponent.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"components/FacetNgxChart.html":{},"components/MapComponent.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"modules/NetworkModule.html":{},"interfaces/NetworkProvider.html":{},"components/NgxChart.html":{},"interfaces/Node.html":{},"interfaces/NodeData.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"components/ResultTimeline.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/VisEvent.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["edge.context.name",{"_index":549,"title":{},"body":{"classes/BaseProvider.html":{}}}],["edge.context.nodes.get(edge.from",{"_index":541,"title":{},"body":{"classes/BaseProvider.html":{}}}],["edge.context.nodes.get(edge.to",{"_index":543,"title":{},"body":{"classes/BaseProvider.html":{}}}],["edge.context.searchservice.query.addselect(expr",{"_index":548,"title":{},"body":{"classes/BaseProvider.html":{}}}],["edge.context.searchservice.search",{"_index":550,"title":{},"body":{"classes/BaseProvider.html":{}}}],["edge.count",{"_index":637,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["edge.fieldvalue",{"_index":546,"title":{},"body":{"classes/BaseProvider.html":{}}}],["edge.from",{"_index":1297,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{}}}],["edge.id",{"_index":1300,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{}}}],["edge.provider",{"_index":544,"title":{},"body":{"classes/BaseProvider.html":{}}}],["edge.to",{"_index":1296,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{}}}],["edge.type",{"_index":1292,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{}}}],["edge.type['trigger",{"_index":1309,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{}}}],["edge.visible",{"_index":1305,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{}}}],["edge[\"arrows",{"_index":517,"title":{},"body":{"classes/BaseProvider.html":{}}}],["edge[\"font",{"_index":524,"title":{},"body":{"classes/BaseProvider.html":{}}}],["edge[\"label",{"_index":522,"title":{},"body":{"classes/BaseProvider.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["edge[\"labels",{"_index":523,"title":{},"body":{"classes/BaseProvider.html":{}}}],["edge[\"labels\"].foreach(label",{"_index":1615,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["edge['aggregation'].name",{"_index":639,"title":{},"body":{"components/BsEdgeInfoCard.html":{}}}],["edge['record']['title",{"_index":641,"title":{},"body":{"components/BsEdgeInfoCard.html":{}}}],["edge[\\'aggregation\\'].name",{"_index":652,"title":{},"body":{"components/BsEdgeInfoCard.html":{}}}],["edge[\\'record\\'][\\'title",{"_index":653,"title":{},"body":{"components/BsEdgeInfoCard.html":{}}}],["edgeclicked",{"_index":3006,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["edgeidx",{"_index":1516,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["edgeoptions",{"_index":1489,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["edges",{"_index":94,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"components/BsNodeInfoCard.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeData.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/VisEvent.html":{},"miscellaneous/functions.html":{}}}],["edges.foreach(edge",{"_index":1550,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["edges.remove(edges.get().filter(e",{"_index":1630,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["edges.update(this.getvisibleedges",{"_index":1633,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["edgeseparator",{"_index":335,"title":{},"body":{"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{}}}],["edgetpl",{"_index":3015,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["edgetype",{"_index":40,"title":{"interfaces/EdgeType.html":{}},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/BaseProvider.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["edgetype.nodetypes[1",{"_index":1370,"title":{},"body":{"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{}}}],["edgetypes",{"_index":140,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AsyncRecordsProvider.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{}}}],["effect",{"_index":2589,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["eg",{"_index":62,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/BaseProvider.html":{},"interfaces/CustomData.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{}}}],["el",{"_index":728,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["element",{"_index":648,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"components/BsTooltipComponent.html":{},"components/FacetNgxChart.html":{},"components/MapComponent.html":{},"components/NgxChart.html":{},"components/ResultTimeline.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["elementref",{"_index":726,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"components/NgxChart.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["elements",{"_index":1993,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["elementtype",{"_index":3383,"title":{},"body":{"miscellaneous/variables.html":{}}}],["elusive",{"_index":3082,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["email",{"_index":1257,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{}}}],["emits",{"_index":182,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"components/MapComponent.html":{}}}],["emitted",{"_index":2991,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["emitter",{"_index":1878,"title":{},"body":{"components/MapComponent.html":{}}}],["empty",{"_index":1497,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["enabled",{"_index":520,"title":{},"body":{"classes/BaseProvider.html":{}}}],["end",{"_index":972,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"components/NgxChart.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["enfacet",{"_index":3428,"title":{},"body":{"miscellaneous/variables.html":{}}}],["enfinance",{"_index":3194,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["enforce",{"_index":2896,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["engooglemaps",{"_index":3209,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["enheatmap",{"_index":3223,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["enresultsview",{"_index":3438,"title":{},"body":{"miscellaneous/variables.html":{}}}],["enrich",{"_index":1430,"title":{},"body":{"interfaces/DynamicNodeType.html":{}}}],["enriched",{"_index":1434,"title":{},"body":{"interfaces/DynamicNodeType.html":{},"miscellaneous/functions.html":{}}}],["ensearch",{"_index":3439,"title":{},"body":{"miscellaneous/variables.html":{}}}],["enter",{"_index":2780,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["entities",{"_index":16,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"miscellaneous/functions.html":{}}}],["entity",{"_index":1235,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{},"miscellaneous/functions.html":{}}}],["entityitem",{"_index":2286,"title":{},"body":{"components/ResultTimeline.html":{}}}],["err",{"_index":2509,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["error",{"_index":2508,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["error(\"maxnmonths",{"_index":2577,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["error(`aggregation",{"_index":219,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["error(`edge",{"_index":1639,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["error(`inconsistent",{"_index":1212,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{}}}],["error(`missing",{"_index":1299,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{}}}],["error(`node",{"_index":1636,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["error(`wrong",{"_index":1271,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{}}}],["errors",{"_index":2026,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["essentially",{"_index":2909,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["et",{"_index":124,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{},"miscellaneous/functions.html":{}}}],["etc",{"_index":1485,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"miscellaneous/functions.html":{}}}],["even",{"_index":2763,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["event",{"_index":786,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"interfaces/HeatmapItem.html":{},"components/MapComponent.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{}}}],["event.display",{"_index":2323,"title":{},"body":{"components/ResultTimeline.html":{}}}],["event.locations.split(\",\")[0",{"_index":2330,"title":{},"body":{"components/ResultTimeline.html":{}}}],["event.nodes.length",{"_index":3103,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["eventclicked",{"_index":2430,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["eventdata",{"_index":3096,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["eventdata[0",{"_index":3098,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["eventdata[1",{"_index":3099,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["eventemitter",{"_index":753,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/HeatmapItem.html":{},"components/MapComponent.html":{},"interfaces/MoneyDatum.html":{},"components/NgxChart.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{}}}],["events",{"_index":631,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"interfaces/HeatmapItem.html":{},"interfaces/NodeData.html":{},"components/ResultTimeline.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{}}}],["events.foreach(event",{"_index":2321,"title":{},"body":{"components/ResultTimeline.html":{}}}],["events.push([event",{"_index":2940,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["events[0].size",{"_index":2981,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["events[0].sizeopened",{"_index":2982,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["events[events.length",{"_index":2942,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["eventsize(events",{"_index":2979,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["example",{"_index":1432,"title":{},"body":{"interfaces/DynamicNodeType.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["exanding",{"_index":1315,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{}}}],["except",{"_index":2759,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["exclusion",{"_index":1699,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["execute",{"_index":1340,"title":{},"body":{"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/DynamicNodeType.html":{}}}],["executed",{"_index":1343,"title":{},"body":{"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/DynamicNodeType.html":{}}}],["exist",{"_index":174,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{}}}],["existing",{"_index":80,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"interfaces/CustomData.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{},"miscellaneous/typealiases.html":{}}}],["existingedge",{"_index":1607,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["existingedge.count",{"_index":1609,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["existingedge.from",{"_index":1620,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["existingedge.to].map(id",{"_index":1621,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["existingedge.type",{"_index":1624,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["existingedge.type.edgeoptions",{"_index":1619,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["existingedge.type.edgeoptions(nodes",{"_index":1623,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["existingedge.visible",{"_index":1610,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["existingedge[\"label",{"_index":1617,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["existingedge[\"labels\"].push(label",{"_index":1618,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["existingnode",{"_index":397,"title":{},"body":{"classes/AsyncRecordsProvider.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["existingnode.count",{"_index":1597,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["existingnode.precedence",{"_index":1593,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["existingnode.type",{"_index":1601,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["existingnode.type.nodeoptions",{"_index":1599,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["existingnode.type.nodeoptions(existingnode",{"_index":1600,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["existingnode.visible",{"_index":1598,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["existingnodes",{"_index":120,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{},"miscellaneous/typealiases.html":{}}}],["exists",{"_index":1517,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["expand",{"_index":266,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{}}}],["expandable",{"_index":3335,"title":{},"body":{"miscellaneous/functions.html":{}}}],["expanded",{"_index":597,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsNodeInfoCard.html":{},"interfaces/NodeData.html":{},"miscellaneous/functions.html":{}}}],["expanding",{"_index":79,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AsyncRecordsProvider.html":{},"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{},"miscellaneous/typealiases.html":{}}}],["expected",{"_index":2760,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["export",{"_index":59,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"components/BsEdgeInfoCard.html":{},"components/BsHeatmapComponent.html":{},"modules/BsHeatmapModule.html":{},"components/BsNodeInfoCard.html":{},"modules/BsTimelineModule.html":{},"components/BsTooltipComponent.html":{},"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"modules/FinanceModule.html":{},"modules/FusionChartsModule.html":{},"modules/GoogleMapsModule.html":{},"interfaces/HeatmapItem.html":{},"components/MapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"modules/NetworkModule.html":{},"interfaces/NetworkProvider.html":{},"components/NgxChart.html":{},"modules/NgxChartsModule.html":{},"interfaces/Node.html":{},"interfaces/NodeData.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"components/ResultTimeline.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{},"modules/VisTimelineModule.html":{}}}],["exports",{"_index":981,"title":{},"body":{"modules/BsHeatmapModule.html":{},"modules/BsTimelineModule.html":{},"modules/FinanceModule.html":{},"modules/FusionChartsModule.html":{},"modules/GoogleMapsModule.html":{},"modules/NetworkModule.html":{},"modules/NgxChartsModule.html":{},"modules/VisTimelineModule.html":{},"index.html":{}}}],["expr",{"_index":48,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/BaseProvider.html":{},"components/MapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["expr.operands.map(e",{"_index":229,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{}}}],["exprbuilder",{"_index":1480,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"components/MapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/VisEvent.html":{}}}],["expression",{"_index":2023,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["exprfrom",{"_index":559,"title":{},"body":{"classes/BaseProvider.html":{}}}],["exprs",{"_index":2597,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["exprs.push(this.exprbuilder.makerangeexpr(ccaggregation.column",{"_index":2602,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["exprto",{"_index":562,"title":{},"body":{"classes/BaseProvider.html":{}}}],["extends",{"_index":61,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AsyncRecordsProvider.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"components/MapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/VisEvent.html":{}}}],["extension",{"_index":55,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AsyncRecordsProvider.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{}}}],["extent([[0",{"_index":2736,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["extract",{"_index":2040,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{}}}],["fa",{"_index":291,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/BaseProvider.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"components/MapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/VisEvent.html":{}}}],["facet",{"_index":657,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsHeatmapComponent.html":{},"modules/BsHeatmapModule.html":{},"components/BsNodeInfoCard.html":{},"modules/BsTimelineModule.html":{},"components/BsTooltipComponent.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"components/MapComponent.html":{},"components/NgxChart.html":{},"modules/NgxChartsModule.html":{},"components/ResultTimeline.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/VisEvent.html":{}}}],["facetchartdatapoint",{"_index":1648,"title":{"interfaces/FacetChartDataPoint.html":{}},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"coverage.html":{}}}],["facetname",{"_index":1761,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["facetngxchart",{"_index":669,"title":{"components/FacetNgxChart.html":{}},"body":{"components/BsEdgeInfoCard.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"components/BsTooltipComponent.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"components/MapComponent.html":{},"components/NgxChart.html":{},"modules/NgxChartsModule.html":{},"components/ResultTimeline.html":{},"coverage.html":{},"index.html":{}}}],["facetservice",{"_index":1654,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"components/MapComponent.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["factory",{"_index":3323,"title":{},"body":{"miscellaneous/functions.html":{}}}],["factory.ts",{"_index":3273,"title":{},"body":{"coverage.html":{}}}],["false",{"_index":238,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"components/BsEdgeInfoCard.html":{},"components/BsNodeInfoCard.html":{},"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"modules/FusionChartsModule.html":{},"components/MapComponent.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"components/NgxChart.html":{},"interfaces/Node.html":{},"interfaces/NodeData.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"components/ResultTimeline.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{}}}],["far",{"_index":1675,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"components/MapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/VisEvent.html":{}}}],["fas",{"_index":290,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/BaseProvider.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/DynamicNodeType.html":{},"components/MapComponent.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/VisEvent.html":{}}}],["fcmodule",{"_index":1824,"title":{},"body":{"modules/FusionChartsModule.html":{}}}],["fcmodule.fcroot(fusioncharts",{"_index":1834,"title":{},"body":{"modules/FusionChartsModule.html":{}}}],["features",{"_index":438,"title":{},"body":{"classes/BaseProvider.html":{}}}],["featuretype",{"_index":3391,"title":{},"body":{"miscellaneous/variables.html":{}}}],["fetch",{"_index":117,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AsyncRecordsProvider.html":{}}}],["fetchaggregation(aggregation",{"_index":2557,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["fetchaggregations(types",{"_index":151,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{}}}],["fetched",{"_index":73,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AsyncRecordsProvider.html":{},"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/DynamicNodeType.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["fetches",{"_index":142,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"miscellaneous/functions.html":{}}}],["fetching",{"_index":1361,"title":{},"body":{"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["field",{"_index":420,"title":{},"body":{"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"interfaces/CustomData.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"components/MapComponent.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["fields",{"_index":1185,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["fieldvalue",{"_index":26,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"interfaces/CustomData.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{}}}],["file",{"_index":5,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"components/BsEdgeInfoCard.html":{},"components/BsHeatmapComponent.html":{},"modules/BsHeatmapModule.html":{},"components/BsNodeInfoCard.html":{},"modules/BsTimelineModule.html":{},"components/BsTooltipComponent.html":{},"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"modules/FinanceModule.html":{},"modules/FusionChartsModule.html":{},"modules/GoogleMapsModule.html":{},"interfaces/HeatmapItem.html":{},"components/MapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"modules/NetworkModule.html":{},"interfaces/NetworkProvider.html":{},"components/NgxChart.html":{},"modules/NgxChartsModule.html":{},"interfaces/Node.html":{},"interfaces/NodeData.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"components/ResultTimeline.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{},"modules/VisTimelineModule.html":{},"coverage.html":{}}}],["fill",{"_index":969,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{}}}],["fills",{"_index":180,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{}}}],["filter",{"_index":69,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"components/BsNodeInfoCard.html":{},"interfaces/CustomData.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"components/MapComponent.html":{},"interfaces/MoneyDatum.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeData.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["filter(e",{"_index":1017,"title":{},"body":{"components/BsNodeInfoCard.html":{},"interfaces/NodeData.html":{}}}],["filter(edge",{"_index":1291,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{}}}],["filter(item",{"_index":2654,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["filter(node",{"_index":277,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{}}}],["filter(r",{"_index":2533,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["filter(record",{"_index":1713,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["filter(tick",{"_index":2098,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["filter(v",{"_index":1687,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["filterarea",{"_index":1848,"title":{},"body":{"components/MapComponent.html":{}}}],["filterdatum(datum",{"_index":2118,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{}}}],["filtered",{"_index":418,"title":{},"body":{"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"components/BsHeatmapComponent.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"interfaces/HeatmapItem.html":{},"components/MapComponent.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["filteredcolor",{"_index":1660,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["filtering",{"_index":2556,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["filters",{"_index":1673,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"components/MapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/VisEvent.html":{}}}],["finance/.../index.ts",{"_index":3380,"title":{},"body":{"miscellaneous/variables.html":{}}}],["finance/finance.module.ts",{"_index":1815,"title":{},"body":{"modules/FinanceModule.html":{}}}],["finance/messages/index.ts",{"_index":3191,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["finance/money",{"_index":1956,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"coverage.html":{}}}],["financemodule",{"_index":1810,"title":{"modules/FinanceModule.html":{}},"body":{"modules/FinanceModule.html":{},"index.html":{},"modules.html":{}}}],["find",{"_index":2578,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["find(a",{"_index":2043,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{}}}],["fire",{"_index":2904,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["first",{"_index":2800,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["fit",{"_index":592,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"interfaces/NodeData.html":{},"interfaces/VisEvent.html":{}}}],["fitbounds",{"_index":1849,"title":{},"body":{"components/MapComponent.html":{}}}],["fitnetwork",{"_index":3084,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["fitting",{"_index":1899,"title":{},"body":{"components/MapComponent.html":{}}}],["focus",{"_index":622,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsNodeInfoCard.html":{},"interfaces/NodeData.html":{}}}],["focusnode",{"_index":598,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsNodeInfoCard.html":{}}}],["focusnode(node",{"_index":602,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsNodeInfoCard.html":{},"interfaces/NodeData.html":{}}}],["following",{"_index":2640,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{}}}],["font",{"_index":967,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["for(let",{"_index":1276,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["foreach",{"_index":2615,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["foreach(edge",{"_index":1294,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{}}}],["foreach(event",{"_index":2938,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["foreach(item",{"_index":1024,"title":{},"body":{"components/BsNodeInfoCard.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/NodeData.html":{}}}],["foreach(list",{"_index":1040,"title":{},"body":{"components/BsNodeInfoCard.html":{},"interfaces/NodeData.html":{}}}],["foreach(node",{"_index":1289,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{}}}],["foreach(record",{"_index":1715,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["forget",{"_index":1390,"title":{},"body":{"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/DynamicNodeType.html":{}}}],["form",{"_index":1969,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/VisEvent.html":{}}}],["format",{"_index":224,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["formatdayrequest",{"_index":2440,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["formating",{"_index":2439,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["formatservice",{"_index":1962,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{}}}],["formatted",{"_index":202,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{}}}],["formatter",{"_index":493,"title":{},"body":{"classes/BaseProvider.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["formatting",{"_index":1702,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["formbuilder",{"_index":2994,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["formcontrol",{"_index":2993,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["formcontrol(this.dampingpref",{"_index":3140,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["formcontrol(this.gravitypref",{"_index":3144,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["formcontrol(this.repulsionpref",{"_index":3142,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["formcontrol(this.springconstantpref",{"_index":3138,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["formcontrol(this.springlengthpref",{"_index":3136,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["formgroup",{"_index":2992,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["formsmodule",{"_index":991,"title":{},"body":{"modules/BsHeatmapModule.html":{},"modules/BsTimelineModule.html":{},"modules/NetworkModule.html":{}}}],["found",{"_index":1583,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["fractional",{"_index":1745,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["frame",{"_index":3061,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["frfacet",{"_index":3430,"title":{},"body":{"miscellaneous/variables.html":{}}}],["frfinance",{"_index":3195,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["frgooglemaps",{"_index":3210,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["frheatmap",{"_index":3224,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["fromnode",{"_index":504,"title":{},"body":{"classes/BaseProvider.html":{},"components/BsEdgeInfoCard.html":{}}}],["fromnode.id",{"_index":513,"title":{},"body":{"classes/BaseProvider.html":{}}}],["frresultsview",{"_index":3441,"title":{},"body":{"miscellaneous/variables.html":{}}}],["frsearch",{"_index":3442,"title":{},"body":{"miscellaneous/variables.html":{}}}],["fulltext",{"_index":925,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["function",{"_index":19,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"components/BsHeatmapComponent.html":{},"interfaces/ChartOptions.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"coverage.html":{}}}],["functions",{"_index":3313,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["fusion",{"_index":673,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"components/BsTooltipComponent.html":{},"components/FacetNgxChart.html":{},"modules/FusionChartsModule.html":{},"components/MapComponent.html":{},"components/NgxChart.html":{},"components/ResultTimeline.html":{},"miscellaneous/variables.html":{}}}],["fusionchart",{"_index":672,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"components/BsTooltipComponent.html":{},"components/FacetNgxChart.html":{},"modules/FusionChartsModule.html":{},"components/MapComponent.html":{},"components/NgxChart.html":{},"components/ResultTimeline.html":{},"coverage.html":{},"index.html":{}}}],["fusioncharts",{"_index":1825,"title":{},"body":{"modules/FusionChartsModule.html":{},"dependencies.html":{}}}],["fusioncharts.options.creditlabel",{"_index":1832,"title":{},"body":{"modules/FusionChartsModule.html":{}}}],["fusioncharts/.../chart.ts",{"_index":3377,"title":{},"body":{"miscellaneous/variables.html":{}}}],["fusioncharts/chart/chart.ts",{"_index":3200,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["fusioncharts/fusioncharts.charts",{"_index":1827,"title":{},"body":{"modules/FusionChartsModule.html":{}}}],["fusioncharts/fusioncharts.module.ts",{"_index":1823,"title":{},"body":{"modules/FusionChartsModule.html":{}}}],["fusioncharts/themes/fusioncharts.theme.candy",{"_index":1831,"title":{},"body":{"modules/FusionChartsModule.html":{}}}],["fusioncharts/themes/fusioncharts.theme.fusion",{"_index":1829,"title":{},"body":{"modules/FusionChartsModule.html":{}}}],["fusionchartsmodule",{"_index":1819,"title":{"modules/FusionChartsModule.html":{}},"body":{"modules/FusionChartsModule.html":{},"index.html":{},"modules.html":{}}}],["fusiontheme",{"_index":1828,"title":{},"body":{"modules/FusionChartsModule.html":{}}}],["fw",{"_index":294,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/BaseProvider.html":{}}}],["gain",{"_index":618,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsNodeInfoCard.html":{},"interfaces/NodeData.html":{}}}],["gate",{"_index":1435,"title":{},"body":{"interfaces/DynamicNodeType.html":{}}}],["gates",{"_index":483,"title":{},"body":{"classes/BaseProvider.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{},"miscellaneous/functions.html":{}}}],["gates)#(ceo)#(microsoft",{"_index":3344,"title":{},"body":{"miscellaneous/functions.html":{}}}],["gates/microsoft",{"_index":204,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{}}}],["gaugemodule",{"_index":2271,"title":{},"body":{"modules/NgxChartsModule.html":{}}}],["gaxis",{"_index":2030,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["gbrush",{"_index":2711,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["general",{"_index":1499,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/VisEvent.html":{}}}],["generate",{"_index":93,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{}}}],["generated",{"_index":1168,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{}}}],["generates",{"_index":127,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"interfaces/CustomData.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/VisEvent.html":{}}}],["generating",{"_index":1183,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{}}}],["generic",{"_index":3322,"title":{},"body":{"miscellaneous/functions.html":{}}}],["geo",{"_index":1939,"title":{},"body":{"components/MapComponent.html":{},"miscellaneous/functions.html":{}}}],["geolocated",{"_index":1903,"title":{},"body":{"components/MapComponent.html":{}}}],["geometry",{"_index":3384,"title":{},"body":{"miscellaneous/variables.html":{}}}],["geometry.fill",{"_index":3406,"title":{},"body":{"miscellaneous/variables.html":{}}}],["geometry.stroke",{"_index":3393,"title":{},"body":{"miscellaneous/variables.html":{}}}],["georecords",{"_index":1850,"title":{},"body":{"components/MapComponent.html":{}}}],["getactions",{"_index":1808,"title":{},"body":{"components/FacetNgxChart.html":{},"components/MapComponent.html":{}}}],["getadjacentedges",{"_index":2182,"title":{},"body":{"classes/NetworkDataset.html":{}}}],["getadjacentedges(nodeid",{"_index":1576,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["getaggregation",{"_index":2520,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["getaggregation(aggregationname",{"_index":2549,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["getcharttype",{"_index":2250,"title":{},"body":{"components/NgxChart.html":{}}}],["getcolorscheme",{"_index":2252,"title":{},"body":{"components/NgxChart.html":{}}}],["getconnectednodes",{"_index":2183,"title":{},"body":{"classes/NetworkDataset.html":{}}}],["getconnectednodes(nodeid",{"_index":1578,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["getd3timeinterval(resolution",{"_index":2677,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["getdata",{"_index":76,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"interfaces/NetworkProvider.html":{},"interfaces/VisEvent.html":{},"miscellaneous/typealiases.html":{}}}],["getdata(context",{"_index":248,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["getdate",{"_index":2406,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["getdisplay",{"_index":2407,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["getedge",{"_index":2184,"title":{},"body":{"classes/NetworkDataset.html":{}}}],["getedge(id",{"_index":1524,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["getedgeactions",{"_index":342,"title":{},"body":{"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"interfaces/NetworkProvider.html":{}}}],["getedgeactions(edge",{"_index":409,"title":{},"body":{"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["getedgeid(node1",{"_index":474,"title":{},"body":{"classes/BaseProvider.html":{}}}],["getedgeids",{"_index":1538,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["getedges",{"_index":1528,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["geteventaggregation(config",{"_index":2528,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["getitem",{"_index":1783,"title":{},"body":{"components/FacetNgxChart.html":{}}}],["getitem(datapoint",{"_index":1773,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["getitemcolor",{"_index":1106,"title":{},"body":{"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"components/NgxChart.html":{}}}],["getlegend",{"_index":708,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["getmaxdate",{"_index":2454,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["getmindate",{"_index":2450,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["getname",{"_index":1692,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["getnode",{"_index":2185,"title":{},"body":{"classes/NetworkDataset.html":{}}}],["getnode(id",{"_index":1522,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["getnodeactions",{"_index":339,"title":{},"body":{"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"interfaces/NetworkProvider.html":{}}}],["getnodeactions(node",{"_index":307,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{}}}],["getnodeid(type",{"_index":479,"title":{},"body":{"classes/BaseProvider.html":{}}}],["getnodeids",{"_index":1536,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["getnodes",{"_index":1526,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["getnodevalue(node",{"_index":481,"title":{},"body":{"classes/BaseProvider.html":{}}}],["getprovider",{"_index":343,"title":{},"body":{"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["getprovideractions",{"_index":286,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"interfaces/CustomData.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{}}}],["getquery",{"_index":1342,"title":{},"body":{"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/DynamicNodeType.html":{}}}],["getrecordsasevents(config",{"_index":2532,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["gets",{"_index":2653,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"miscellaneous/functions.html":{}}}],["getstyle",{"_index":1080,"title":{},"body":{"components/BsTooltipComponent.html":{}}}],["gettimeseries(config",{"_index":2521,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["getvisibleedges",{"_index":1533,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["getvisiblenodes",{"_index":1530,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["given",{"_index":134,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"miscellaneous/functions.html":{}}}],["global",{"_index":1266,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{}}}],["google",{"_index":65,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{},"miscellaneous/functions.html":{}}}],["google.maps.latlngbounds",{"_index":1883,"title":{},"body":{"components/MapComponent.html":{}}}],["google.maps.latlngboundsliteral",{"_index":1897,"title":{},"body":{"components/MapComponent.html":{}}}],["googlemaps",{"_index":1845,"title":{},"body":{"components/MapComponent.html":{}}}],["googlemaps'},{'name",{"_index":675,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"components/BsTooltipComponent.html":{},"components/FacetNgxChart.html":{},"components/MapComponent.html":{},"components/NgxChart.html":{},"components/ResultTimeline.html":{}}}],["googlemaps/.../dark",{"_index":3376,"title":{},"body":{"miscellaneous/variables.html":{}}}],["googlemaps/.../index.ts",{"_index":3381,"title":{},"body":{"miscellaneous/variables.html":{}}}],["googlemaps/dark",{"_index":3204,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["googlemaps/googlemaps.module.ts",{"_index":1839,"title":{},"body":{"modules/GoogleMapsModule.html":{}}}],["googlemaps/map.component.ts",{"_index":1844,"title":{},"body":{"components/MapComponent.html":{},"coverage.html":{}}}],["googlemaps/map.component.ts:102",{"_index":1881,"title":{},"body":{"components/MapComponent.html":{}}}],["googlemaps/map.component.ts:134",{"_index":1880,"title":{},"body":{"components/MapComponent.html":{}}}],["googlemaps/map.component.ts:144",{"_index":1886,"title":{},"body":{"components/MapComponent.html":{}}}],["googlemaps/map.component.ts:148",{"_index":1890,"title":{},"body":{"components/MapComponent.html":{}}}],["googlemaps/map.component.ts:154",{"_index":1884,"title":{},"body":{"components/MapComponent.html":{}}}],["googlemaps/map.component.ts:19",{"_index":1871,"title":{},"body":{"components/MapComponent.html":{}}}],["googlemaps/map.component.ts:21",{"_index":1874,"title":{},"body":{"components/MapComponent.html":{}}}],["googlemaps/map.component.ts:23",{"_index":1863,"title":{},"body":{"components/MapComponent.html":{}}}],["googlemaps/map.component.ts:25",{"_index":1866,"title":{},"body":{"components/MapComponent.html":{}}}],["googlemaps/map.component.ts:27",{"_index":1870,"title":{},"body":{"components/MapComponent.html":{}}}],["googlemaps/map.component.ts:29",{"_index":1875,"title":{},"body":{"components/MapComponent.html":{}}}],["googlemaps/map.component.ts:31",{"_index":1877,"title":{},"body":{"components/MapComponent.html":{}}}],["googlemaps/map.component.ts:34",{"_index":1901,"title":{},"body":{"components/MapComponent.html":{}}}],["googlemaps/map.component.ts:36",{"_index":1898,"title":{},"body":{"components/MapComponent.html":{}}}],["googlemaps/map.component.ts:39",{"_index":1896,"title":{},"body":{"components/MapComponent.html":{}}}],["googlemaps/map.component.ts:40",{"_index":1893,"title":{},"body":{"components/MapComponent.html":{}}}],["googlemaps/map.component.ts:43",{"_index":1891,"title":{},"body":{"components/MapComponent.html":{}}}],["googlemaps/map.component.ts:45",{"_index":1904,"title":{},"body":{"components/MapComponent.html":{}}}],["googlemaps/map.component.ts:48",{"_index":1861,"title":{},"body":{"components/MapComponent.html":{}}}],["googlemaps/map.component.ts:51",{"_index":1907,"title":{},"body":{"components/MapComponent.html":{}}}],["googlemaps/map.component.ts:52",{"_index":1895,"title":{},"body":{"components/MapComponent.html":{}}}],["googlemaps/map.component.ts:53",{"_index":1894,"title":{},"body":{"components/MapComponent.html":{}}}],["googlemaps/map.component.ts:91",{"_index":1908,"title":{},"body":{"components/MapComponent.html":{}}}],["googlemaps/messages/index.ts",{"_index":3207,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["googlemapsmodule",{"_index":1835,"title":{"modules/GoogleMapsModule.html":{}},"body":{"modules/GoogleMapsModule.html":{},"index.html":{},"modules.html":{}}}],["goup",{"_index":2772,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["graph",{"_index":2792,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["graphical",{"_index":820,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["gravity",{"_index":3151,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["gravitycontrol",{"_index":3143,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["gravitycontrol.value",{"_index":3160,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["gravitypref",{"_index":3181,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["green",{"_index":2685,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["grip",{"_index":2783,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["gripheight",{"_index":2970,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["grips",{"_index":2713,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["gripwidth",{"_index":2975,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["group",{"_index":2978,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["groupedevents",{"_index":2697,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["groupevents(pixperevent",{"_index":2927,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["grouping",{"_index":2823,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["gx",{"_index":693,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["gy",{"_index":694,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["hack",{"_index":617,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsNodeInfoCard.html":{},"interfaces/NodeData.html":{}}}],["handled",{"_index":1502,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["handling",{"_index":1227,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{}}}],["happens",{"_index":3354,"title":{},"body":{"miscellaneous/functions.html":{}}}],["hascollapsededge",{"_index":1318,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{}}}],["hasedge",{"_index":2186,"title":{},"body":{"classes/NetworkDataset.html":{}}}],["hasedge(id",{"_index":1520,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["hasexpandededge",{"_index":1317,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{}}}],["hasfiltered",{"_index":1700,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["hasn't",{"_index":2496,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{}}}],["hasnode",{"_index":2187,"title":{},"body":{"classes/NetworkDataset.html":{}}}],["hasnode(id",{"_index":1518,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["heatmap",{"_index":664,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsHeatmapComponent.html":{},"modules/BsHeatmapModule.html":{},"components/BsNodeInfoCard.html":{},"modules/BsTimelineModule.html":{},"components/BsTooltipComponent.html":{},"components/FacetNgxChart.html":{},"interfaces/HeatmapItem.html":{},"components/MapComponent.html":{},"components/NgxChart.html":{},"components/ResultTimeline.html":{},"coverage.html":{}}}],["heatmap'},{'name",{"_index":658,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"components/BsTooltipComponent.html":{},"components/FacetNgxChart.html":{},"components/MapComponent.html":{},"components/NgxChart.html":{},"components/ResultTimeline.html":{}}}],["heatmap.component",{"_index":1000,"title":{},"body":{"modules/BsHeatmapModule.html":{}}}],["heatmap.component.html",{"_index":691,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["heatmap.component.scss",{"_index":690,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["heatmap.component.ts",{"_index":3212,"title":{},"body":{"coverage.html":{}}}],["heatmap/.../index.ts",{"_index":3382,"title":{},"body":{"miscellaneous/variables.html":{}}}],["heatmap/bootstrap/facet",{"_index":3211,"title":{},"body":{"coverage.html":{}}}],["heatmap/bootstrap/heatmap.component.ts",{"_index":687,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{},"coverage.html":{}}}],["heatmap/bootstrap/heatmap.component.ts:108",{"_index":774,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["heatmap/bootstrap/heatmap.component.ts:123",{"_index":757,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["heatmap/bootstrap/heatmap.component.ts:160",{"_index":788,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["heatmap/bootstrap/heatmap.component.ts:189",{"_index":783,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["heatmap/bootstrap/heatmap.component.ts:200",{"_index":779,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["heatmap/bootstrap/heatmap.component.ts:209",{"_index":773,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["heatmap/bootstrap/heatmap.component.ts:23",{"_index":735,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["heatmap/bootstrap/heatmap.component.ts:230",{"_index":806,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["heatmap/bootstrap/heatmap.component.ts:26",{"_index":738,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["heatmap/bootstrap/heatmap.component.ts:27",{"_index":752,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["heatmap/bootstrap/heatmap.component.ts:28",{"_index":744,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["heatmap/bootstrap/heatmap.component.ts:29",{"_index":751,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["heatmap/bootstrap/heatmap.component.ts:32",{"_index":739,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["heatmap/bootstrap/heatmap.component.ts:33",{"_index":729,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["heatmap/bootstrap/heatmap.component.ts:36",{"_index":731,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["heatmap/bootstrap/heatmap.component.ts:37",{"_index":733,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["heatmap/bootstrap/heatmap.component.ts:38",{"_index":745,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["heatmap/bootstrap/heatmap.component.ts:39",{"_index":746,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["heatmap/bootstrap/heatmap.component.ts:40",{"_index":749,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["heatmap/bootstrap/heatmap.component.ts:43",{"_index":755,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["heatmap/bootstrap/heatmap.component.ts:44",{"_index":754,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["heatmap/bootstrap/heatmap.component.ts:47",{"_index":812,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["heatmap/bootstrap/heatmap.component.ts:48",{"_index":815,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["heatmap/bootstrap/heatmap.component.ts:49",{"_index":793,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["heatmap/bootstrap/heatmap.component.ts:52",{"_index":797,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["heatmap/bootstrap/heatmap.component.ts:53",{"_index":799,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["heatmap/bootstrap/heatmap.component.ts:54",{"_index":814,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["heatmap/bootstrap/heatmap.component.ts:55",{"_index":816,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["heatmap/bootstrap/heatmap.component.ts:58",{"_index":794,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["heatmap/bootstrap/heatmap.component.ts:61",{"_index":800,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["heatmap/bootstrap/heatmap.component.ts:62",{"_index":802,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["heatmap/bootstrap/heatmap.component.ts:63",{"_index":804,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["heatmap/bootstrap/heatmap.component.ts:64",{"_index":803,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["heatmap/bootstrap/heatmap.component.ts:65",{"_index":801,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["heatmap/bootstrap/heatmap.component.ts:68",{"_index":805,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["heatmap/bootstrap/heatmap.component.ts:69",{"_index":727,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["heatmap/bootstrap/heatmap.component.ts:78",{"_index":775,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["heatmap/bootstrap/heatmap.module.ts",{"_index":987,"title":{},"body":{"modules/BsHeatmapModule.html":{}}}],["heatmap/bootstrap/results",{"_index":3216,"title":{},"body":{"coverage.html":{}}}],["heatmap/bootstrap/tooltip.component.ts",{"_index":1059,"title":{},"body":{"components/BsTooltipComponent.html":{},"coverage.html":{}}}],["heatmap/bootstrap/tooltip.component.ts:37",{"_index":1076,"title":{},"body":{"components/BsTooltipComponent.html":{}}}],["heatmap/bootstrap/tooltip.component.ts:38",{"_index":1075,"title":{},"body":{"components/BsTooltipComponent.html":{}}}],["heatmap/bootstrap/tooltip.component.ts:39",{"_index":1077,"title":{},"body":{"components/BsTooltipComponent.html":{}}}],["heatmap/bootstrap/tooltip.component.ts:40",{"_index":1079,"title":{},"body":{"components/BsTooltipComponent.html":{}}}],["heatmap/bootstrap/tooltip.component.ts:41",{"_index":1078,"title":{},"body":{"components/BsTooltipComponent.html":{}}}],["heatmap/bootstrap/tooltip.component.ts:43",{"_index":1081,"title":{},"body":{"components/BsTooltipComponent.html":{}}}],["heatmap/messages/index.ts",{"_index":3221,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["heatmapitem",{"_index":734,"title":{"interfaces/HeatmapItem.html":{}},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{},"coverage.html":{}}}],["height",{"_index":588,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"interfaces/HeatmapItem.html":{},"components/MapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"components/NgxChart.html":{},"interfaces/NodeData.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{},"miscellaneous/variables.html":{}}}],["hidden",{"_index":2257,"title":{},"body":{"components/NgxChart.html":{},"miscellaneous/functions.html":{}}}],["hiderecordnode",{"_index":350,"title":{},"body":{"classes/AsyncRecordsProvider.html":{},"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{}}}],["hiderecordnode=true",{"_index":3329,"title":{},"body":{"miscellaneous/functions.html":{}}}],["hides",{"_index":2856,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["highest",{"_index":1495,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["highlight",{"_index":1752,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["histogram",{"_index":2922,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["horizontalbar",{"_index":1139,"title":{},"body":{"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"components/NgxChart.html":{}}}],["host",{"_index":944,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["hovered",{"_index":2176,"title":{},"body":{"interfaces/MoneyDatum.html":{}}}],["hovers",{"_index":789,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["html",{"_index":647,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"components/BsTooltipComponent.html":{},"components/FacetNgxChart.html":{},"interfaces/HeatmapItem.html":{},"components/MapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"components/NgxChart.html":{},"components/ResultTimeline.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["htmlelement).offsetwidth",{"_index":916,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["https://github.com/angular/angular/issues/16982",{"_index":2960,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["https://github.com/d3/d3",{"_index":2112,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["https://stackoverflow.com/questions/13576906/d3",{"_index":2103,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["https://visjs.github.io/vis",{"_index":1482,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/VisEvent.html":{},"miscellaneous/variables.html":{}}}],["human",{"_index":3320,"title":{},"body":{"miscellaneous/functions.html":{}}}],["humans",{"_index":3358,"title":{},"body":{"miscellaneous/functions.html":{}}}],["hybrid",{"_index":1250,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{}}}],["i=0",{"_index":1277,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["icon",{"_index":289,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/BaseProvider.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"components/MapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/VisEvent.html":{},"miscellaneous/functions.html":{}}}],["id",{"_index":472,"title":{},"body":{"classes/BaseProvider.html":{},"components/BsNodeInfoCard.html":{},"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeData.html":{},"interfaces/NodeType.html":{},"components/ResultTimeline.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{}}}],["identifier",{"_index":1872,"title":{},"body":{"components/MapComponent.html":{},"coverage.html":{}}}],["ids",{"_index":1535,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["ids.foreach(id",{"_index":1557,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["ie",{"_index":419,"title":{},"body":{"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["if(!!changes['record",{"_index":2312,"title":{},"body":{"components/ResultTimeline.html":{}}}],["if(!!existingedge[\"label",{"_index":1614,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["if(!!item.value",{"_index":2649,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["if(!!this.selectfield.name",{"_index":1696,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["if(!changes[\"height",{"_index":2749,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["if(!config.maxnmonths",{"_index":2573,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["if(!dataset.hasedge(edge.id",{"_index":1263,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{}}}],["if(!dataset.hasnode(node.id",{"_index":1253,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{}}}],["if(!item.display",{"_index":217,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{}}}],["if(!items",{"_index":2644,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["if(!keepdanglingnodes",{"_index":1572,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["if(!neighbor",{"_index":1298,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{}}}],["if(!neighbor.visible",{"_index":1311,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{}}}],["if(!node",{"_index":1199,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{}}}],["if(!previousvalue",{"_index":2965,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["if(!record.modified",{"_index":2153,"title":{},"body":{"interfaces/MoneyDatum.html":{}}}],["if(!select",{"_index":2469,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["if(!sourcenode",{"_index":216,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{}}}],["if(!this.active",{"_index":1191,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{}}}],["if(!this.context.appservice.getccaggregation(aggregation",{"_index":169,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{}}}],["if(!this.currentrange",{"_index":2500,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["if(!this.events",{"_index":2479,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["if(!this.hasedge(edge.id",{"_index":1604,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["if(!this.hasnode(edge.from",{"_index":1640,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["if(!this.hasnode(node.id",{"_index":1589,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["if(!this.isfiltered(item",{"_index":1768,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["if(!this.neighbors[type",{"_index":1032,"title":{},"body":{"components/BsNodeInfoCard.html":{},"interfaces/NodeData.html":{}}}],["if(!this.optionsprefs.physics",{"_index":3118,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["if(!this.optionsprefs.physics.barneshut",{"_index":3120,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["if(!this.permanent",{"_index":1418,"title":{},"body":{"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/DynamicNodeType.html":{}}}],["if(!this.showtooltip",{"_index":2177,"title":{},"body":{"interfaces/MoneyDatum.html":{}}}],["if(!this.timeseries",{"_index":2471,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["if(!this.tooltipitem",{"_index":2164,"title":{},"body":{"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["if(!this.x",{"_index":2003,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["if(!this.zoomable",{"_index":2829,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["if(!utils.isstring(parsedexpr",{"_index":2462,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["if(!xextent[0",{"_index":2158,"title":{},"body":{"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["if(!yextent[0",{"_index":2070,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{}}}],["if((config",{"_index":2491,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["if((neighbor.visible",{"_index":1327,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{}}}],["if((node.precedence",{"_index":1592,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["if(_queries.length",{"_index":1401,"title":{},"body":{"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/DynamicNodeType.html":{}}}],["if(actions.length",{"_index":3070,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["if(agg.aggregation",{"_index":2495,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["if(aggregation",{"_index":187,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["if(array.isarray(config",{"_index":2519,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["if(bin",{"_index":2946,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["if(ccaggregation",{"_index":2553,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["if(changes[\"events",{"_index":2768,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["if(changes[\"height",{"_index":2013,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["if(changes[\"width",{"_index":2016,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["if(changes['options",{"_index":3035,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["if(changes['results",{"_index":3028,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["if(changes['style",{"_index":1931,"title":{},"body":{"components/MapComponent.html":{}}}],["if(col?.formatter",{"_index":497,"title":{},"body":{"classes/BaseProvider.html":{}}}],["if(currentvalue",{"_index":2961,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["if(datum",{"_index":2048,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{}}}],["if(directed",{"_index":516,"title":{},"body":{"classes/BaseProvider.html":{}}}],["if(edge.type.field",{"_index":545,"title":{},"body":{"classes/BaseProvider.html":{}}}],["if(event.edges.length",{"_index":3102,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["if(event.event.type",{"_index":3100,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["if(event.nodes.length",{"_index":3105,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["if(events!==this.tooltipitem",{"_index":2980,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["if(events.length",{"_index":2939,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["if(existingedge[\"labels\"].indexof(label",{"_index":1616,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["if(exprs.length",{"_index":2603,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["if(hascollapsededge",{"_index":1321,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{}}}],["if(hasexpandededge",{"_index":1324,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{}}}],["if(i",{"_index":2447,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["if(isnan(value",{"_index":2065,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{}}}],["if(item.node",{"_index":1025,"title":{},"body":{"components/BsNodeInfoCard.html":{},"interfaces/NodeData.html":{}}}],["if(maxnmonths",{"_index":2582,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["if(neighborsneighbors.length",{"_index":1303,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{}}}],["if(node.visible",{"_index":1375,"title":{},"body":{"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/DynamicNodeType.html":{}}}],["if(nodefrom",{"_index":551,"title":{},"body":{"classes/BaseProvider.html":{}}}],["if(opened",{"_index":3134,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["if(parsedexpr.values",{"_index":2465,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["if(properties.items.length>0",{"_index":2369,"title":{},"body":{"components/ResultTimeline.html":{}}}],["if(query",{"_index":1416,"title":{},"body":{"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/DynamicNodeType.html":{}}}],["if(range",{"_index":2559,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["if(recorddata",{"_index":1217,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{}}}],["if(recordnode.id",{"_index":1247,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{}}}],["if(relation",{"_index":521,"title":{},"body":{"classes/BaseProvider.html":{}}}],["if(relativex",{"_index":919,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["if(results.records.length",{"_index":1454,"title":{},"body":{"interfaces/DynamicNodeType.html":{}}}],["if(select",{"_index":2459,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["if(selection",{"_index":2594,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["if(sourcenode",{"_index":164,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{}}}],["if(this._networkinitialized",{"_index":3057,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["if(this._selectededge",{"_index":3072,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["if(this._selectednode",{"_index":3068,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["if(this.active",{"_index":258,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/BaseProvider.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{}}}],["if(this.aggregations",{"_index":1682,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["if(this.checkselectionchange(this.currentselection",{"_index":2891,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["if(this.currentselection",{"_index":2858,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["if(this.data",{"_index":1705,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["if(this.edgetype.trigger",{"_index":1386,"title":{},"body":{"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{}}}],["if(this.events",{"_index":2928,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["if(this.facetservice.hasfiltered(this.name",{"_index":1917,"title":{},"body":{"components/MapComponent.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["if(this.georecords.length",{"_index":1935,"title":{},"body":{"components/MapComponent.html":{}}}],["if(this.hasedge(edge.id",{"_index":1638,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["if(this.hasfiltered",{"_index":1694,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["if(this.hasnode(node.id",{"_index":1635,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["if(this.initdone",{"_index":2380,"title":{},"body":{"components/ResultTimeline.html":{}}}],["if(this.items.length",{"_index":2353,"title":{},"body":{"components/ResultTimeline.html":{}}}],["if(this.maxdate",{"_index":2819,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["if(this.mindate",{"_index":2817,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["if(this.nodecache.has(node.id",{"_index":1417,"title":{},"body":{"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/DynamicNodeType.html":{}}}],["if(this.nodetype.trigger",{"_index":1441,"title":{},"body":{"interfaces/DynamicNodeType.html":{}}}],["if(this.openedwindow",{"_index":1947,"title":{},"body":{"components/MapComponent.html":{}}}],["if(this.orientation",{"_index":1082,"title":{},"body":{"components/BsTooltipComponent.html":{}}}],["if(this.providerssubscription",{"_index":3040,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["if(this.results",{"_index":2035,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["if(this.searchservice.breadcrumbs",{"_index":3065,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["if(this.searchservice.query.findselect(this.name",{"_index":2000,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["if(this.selectedvalues.has(utils.tosqlvalue(item.value).tolowercase",{"_index":1740,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["if(this.skips[type.aggregation+node.id",{"_index":271,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{}}}],["if(this.tooltipitem",{"_index":2128,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["if(this.viewinit",{"_index":863,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["if(this.zoombehavior",{"_index":2831,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["if(type",{"_index":192,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{}}}],["if(type.display",{"_index":1288,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{}}}],["if(type.field",{"_index":494,"title":{},"body":{"classes/BaseProvider.html":{}}}],["if(type.nodetypes.length",{"_index":1269,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{}}}],["if(type.nodetypes[0",{"_index":1210,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{}}}],["if(type.parse",{"_index":212,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{}}}],["if(typeof",{"_index":501,"title":{},"body":{"classes/BaseProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["if(types.length",{"_index":270,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{}}}],["if(update",{"_index":874,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/CustomData.html":{},"interfaces/HeatmapItem.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{}}}],["if(utils.isarray(recorddata",{"_index":1221,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{}}}],["if(utils.isarray(val",{"_index":1721,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["if(utils.isstring(recorddata",{"_index":1231,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{}}}],["if(utils.isstring(this.record.modified",{"_index":2360,"title":{},"body":{"components/ResultTimeline.html":{}}}],["if(utils.isstring(v",{"_index":1723,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["if(utils.isstring(val",{"_index":1719,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["if(utils.isstring(value",{"_index":1234,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{}}}],["if(val",{"_index":1718,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["if(value[\"value",{"_index":1236,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{}}}],["if(values.length",{"_index":231,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{}}}],["if(year",{"_index":2339,"title":{},"body":{"components/ResultTimeline.html":{}}}],["ignore",{"_index":2949,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["ignored",{"_index":2416,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["image",{"_index":586,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsNodeInfoCard.html":{},"interfaces/NodeData.html":{}}}],["implementation",{"_index":437,"title":{},"body":{"classes/BaseProvider.html":{}}}],["implements",{"_index":440,"title":{},"body":{"classes/BaseProvider.html":{},"components/BsEdgeInfoCard.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"interfaces/HeatmapItem.html":{},"components/MapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"components/NgxChart.html":{},"interfaces/NodeData.html":{},"components/ResultTimeline.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{}}}],["import",{"_index":33,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"components/BsEdgeInfoCard.html":{},"components/BsHeatmapComponent.html":{},"modules/BsHeatmapModule.html":{},"components/BsNodeInfoCard.html":{},"modules/BsTimelineModule.html":{},"components/BsTooltipComponent.html":{},"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"modules/FinanceModule.html":{},"modules/FusionChartsModule.html":{},"modules/GoogleMapsModule.html":{},"interfaces/HeatmapItem.html":{},"components/MapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"modules/NetworkModule.html":{},"interfaces/NetworkProvider.html":{},"components/NgxChart.html":{},"modules/NgxChartsModule.html":{},"interfaces/Node.html":{},"interfaces/NodeData.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"components/ResultTimeline.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{},"modules/VisTimelineModule.html":{}}}],["importance",{"_index":488,"title":{},"body":{"classes/BaseProvider.html":{}}}],["important",{"_index":2750,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["imports",{"_index":1001,"title":{},"body":{"modules/BsHeatmapModule.html":{},"modules/BsTimelineModule.html":{},"modules/FinanceModule.html":{},"modules/FusionChartsModule.html":{},"modules/GoogleMapsModule.html":{},"modules/NetworkModule.html":{},"modules/NgxChartsModule.html":{},"modules/VisTimelineModule.html":{}}}],["improved",{"_index":2924,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["inactive",{"_index":1496,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["incl",{"_index":2054,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{}}}],["include",{"_index":1167,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{},"miscellaneous/functions.html":{}}}],["includes",{"_index":411,"title":{},"body":{"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{}}}],["including",{"_index":1194,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{}}}],["index",{"_index":21,"title":{"index.html":{}},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"components/BsEdgeInfoCard.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"components/BsTooltipComponent.html":{},"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"interfaces/HeatmapItem.html":{},"components/MapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"components/NgxChart.html":{},"interfaces/Node.html":{},"interfaces/NodeData.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"components/ResultTimeline.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["individually",{"_index":285,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{}}}],["influence",{"_index":1241,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{}}}],["info",{"_index":3,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"components/BsEdgeInfoCard.html":{},"components/BsHeatmapComponent.html":{},"modules/BsHeatmapModule.html":{},"components/BsNodeInfoCard.html":{},"modules/BsTimelineModule.html":{},"components/BsTooltipComponent.html":{},"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"modules/FinanceModule.html":{},"modules/FusionChartsModule.html":{},"modules/GoogleMapsModule.html":{},"interfaces/HeatmapItem.html":{},"components/MapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"modules/NetworkModule.html":{},"interfaces/NetworkProvider.html":{},"components/NgxChart.html":{},"modules/NgxChartsModule.html":{},"interfaces/Node.html":{},"interfaces/NodeData.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"components/ResultTimeline.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{},"modules/VisTimelineModule.html":{},"coverage.html":{}}}],["information",{"_index":1439,"title":{},"body":{"interfaces/DynamicNodeType.html":{}}}],["infowindow",{"_index":1888,"title":{},"body":{"components/MapComponent.html":{}}}],["inherited",{"_index":355,"title":{},"body":{"classes/AsyncRecordsProvider.html":{}}}],["initdone",{"_index":2275,"title":{},"body":{"components/ResultTimeline.html":{}}}],["initial",{"_index":2411,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{}}}],["initialization",{"_index":1892,"title":{},"body":{"components/MapComponent.html":{}}}],["initialize",{"_index":252,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"components/BsNodeInfoCard.html":{},"interfaces/NodeData.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{}}}],["initialized",{"_index":2765,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{}}}],["injectable",{"_index":3274,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["innerheight",{"_index":2002,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["innerwidth",{"_index":2001,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["input",{"_index":609,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"components/BsTooltipComponent.html":{},"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"interfaces/HeatmapItem.html":{},"components/MapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"components/NgxChart.html":{},"interfaces/NodeData.html":{},"components/ResultTimeline.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{}}}],["inputs",{"_index":600,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"components/BsTooltipComponent.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"components/MapComponent.html":{},"components/NgxChart.html":{},"components/ResultTimeline.html":{}}}],["insert",{"_index":1423,"title":{},"body":{"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{}}}],["inserted",{"_index":1352,"title":{},"body":{"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{},"miscellaneous/functions.html":{}}}],["inside",{"_index":809,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["instance",{"_index":620,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsNodeInfoCard.html":{},"interfaces/CustomData.html":{},"interfaces/NodeData.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["instanceof",{"_index":2650,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["instead",{"_index":329,"title":{},"body":{"classes/AsyncRecordsProvider.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{},"miscellaneous/functions.html":{}}}],["integer",{"_index":2101,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["integers",{"_index":2106,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["interaction",{"_index":822,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{},"components/MapComponent.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{}}}],["interactions",{"_index":826,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/HeatmapItem.html":{},"components/MapComponent.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["interface",{"_index":0,"title":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/FacetChartDataPoint.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/NetworkContext.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeData.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{}},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"components/NgxChart.html":{},"interfaces/Node.html":{},"interfaces/NodeData.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{},"coverage.html":{}}}],["interfaces",{"_index":2,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/FacetChartDataPoint.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/NetworkContext.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeData.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{},"index.html":{}}}],["intermediate",{"_index":391,"title":{},"body":{"classes/AsyncRecordsProvider.html":{},"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{}}}],["internally",{"_index":1503,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["intlmodule",{"_index":994,"title":{},"body":{"modules/BsHeatmapModule.html":{},"modules/BsTimelineModule.html":{},"modules/FinanceModule.html":{},"modules/FusionChartsModule.html":{},"modules/GoogleMapsModule.html":{},"modules/NetworkModule.html":{},"modules/NgxChartsModule.html":{},"modules/VisTimelineModule.html":{}}}],["intlservice",{"_index":1098,"title":{},"body":{"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"components/NgxChart.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{}}}],["intlsubscription",{"_index":2714,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["invalid/empty",{"_index":2796,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["invisible",{"_index":1313,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{}}}],["isaggregationedgetype",{"_index":3263,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["isaggregationedgetype(et",{"_index":125,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"miscellaneous/functions.html":{}}}],["isdynamicedgetype",{"_index":3270,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["isdynamicedgetype(et",{"_index":1346,"title":{},"body":{"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{},"miscellaneous/functions.html":{}}}],["isedgevisible(type",{"_index":1287,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{}}}],["isfiltered",{"_index":1784,"title":{},"body":{"components/FacetNgxChart.html":{}}}],["isfiltered(item",{"_index":1771,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["ishidden",{"_index":1781,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["isnan(val[1",{"_index":2154,"title":{},"body":{"interfaces/MoneyDatum.html":{}}}],["isoltated",{"_index":1332,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{}}}],["isstructuraledgetype",{"_index":3280,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["isstructuraledgetype(et",{"_index":1181,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{},"miscellaneous/functions.html":{}}}],["it's",{"_index":1500,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["item",{"_index":107,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"components/BsHeatmapComponent.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"components/NgxChart.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"components/ResultTimeline.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"miscellaneous/variables.html":{}}}],["item.count",{"_index":242,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyDatum.html":{},"interfaces/NodeData.html":{}}}],["item.date",{"_index":2658,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["item.display!.length",{"_index":2059,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{}}}],["item.display!.substr(1",{"_index":2058,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{}}}],["item.display.split",{"_index":227,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{}}}],["item.node",{"_index":1036,"title":{},"body":{"components/BsNodeInfoCard.html":{},"interfaces/NodeData.html":{}}}],["item.node.context.appservice.getplurallabel(item.node.type.field",{"_index":1027,"title":{},"body":{"components/BsNodeInfoCard.html":{},"interfaces/NodeData.html":{}}}],["item.node.type.field",{"_index":1026,"title":{},"body":{"components/BsNodeInfoCard.html":{},"interfaces/NodeData.html":{}}}],["item.node.type.name",{"_index":1030,"title":{},"body":{"components/BsNodeInfoCard.html":{},"interfaces/NodeData.html":{}}}],["item.start",{"_index":931,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["item.value",{"_index":220,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["item.value.tostring",{"_index":2651,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["itemclicked",{"_index":724,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["itemclickevent",{"_index":1112,"title":{},"body":{"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"components/NgxChart.html":{}}}],["items",{"_index":57,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"components/BsHeatmapComponent.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"components/ResultTimeline.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/VisEvent.html":{}}}],["items._data[properties.items[0]].start",{"_index":2372,"title":{},"body":{"components/ResultTimeline.html":{}}}],["itemsclickable",{"_index":716,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["itimeseries",{"_index":2568,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["itself",{"_index":1252,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{}}}],["j",{"_index":1410,"title":{},"body":{"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["jmin",{"_index":2580,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["job",{"_index":3343,"title":{},"body":{"miscellaneous/functions.html":{}}}],["jobs",{"_index":226,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{}}}],["keep",{"_index":2100,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["keepdanglingnodes",{"_index":1563,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["keeping",{"_index":1902,"title":{},"body":{"components/MapComponent.html":{}}}],["kept",{"_index":1493,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["key",{"_index":528,"title":{},"body":{"classes/BaseProvider.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["key:string",{"_index":2692,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["keyword",{"_index":1970,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{}}}],["l",{"_index":2977,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["label",{"_index":311,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/BaseProvider.html":{},"components/BsNodeInfoCard.html":{},"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeData.html":{},"interfaces/NodeType.html":{},"miscellaneous/functions.html":{}}}],["label1",{"_index":555,"title":{},"body":{"classes/BaseProvider.html":{}}}],["label2",{"_index":557,"title":{},"body":{"classes/BaseProvider.html":{}}}],["labeldisplay",{"_index":3422,"title":{},"body":{"miscellaneous/variables.html":{}}}],["labels",{"_index":1611,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["labels.text.fill",{"_index":3387,"title":{},"body":{"miscellaneous/variables.html":{}}}],["labels.text.stroke",{"_index":3389,"title":{},"body":{"miscellaneous/variables.html":{}}}],["landscape.man_made",{"_index":3398,"title":{},"body":{"miscellaneous/variables.html":{}}}],["landscape.natural",{"_index":3400,"title":{},"body":{"miscellaneous/variables.html":{}}}],["language",{"_index":1748,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["larry",{"_index":63,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{}}}],["last",{"_index":2941,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["last.push(event",{"_index":2947,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["lastbin",{"_index":2943,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["lastnode",{"_index":240,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{}}}],["latitude",{"_index":1865,"title":{},"body":{"components/MapComponent.html":{}}}],["latitudefield",{"_index":1857,"title":{},"body":{"components/MapComponent.html":{}}}],["left",{"_index":581,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"components/BsTooltipComponent.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/NodeData.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{}}}],["left.px",{"_index":1083,"title":{},"body":{"components/BsTooltipComponent.html":{}}}],["legend",{"_index":646,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsHeatmapComponent.html":{},"modules/BsHeatmapModule.html":{},"components/BsNodeInfoCard.html":{},"modules/BsTimelineModule.html":{},"components/BsTooltipComponent.html":{},"components/FacetNgxChart.html":{},"modules/FinanceModule.html":{},"modules/FusionChartsModule.html":{},"modules/GoogleMapsModule.html":{},"components/MapComponent.html":{},"modules/NetworkModule.html":{},"components/NgxChart.html":{},"modules/NgxChartsModule.html":{},"components/ResultTimeline.html":{},"modules/VisTimelineModule.html":{},"index.html":{}}}],["length",{"_index":2962,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{}}}],["library",{"_index":1826,"title":{},"body":{"modules/FusionChartsModule.html":{},"interfaces/VisEvent.html":{}}}],["life",{"_index":1468,"title":{},"body":{"interfaces/DynamicNodeType.html":{}}}],["light",{"_index":747,"title":{},"body":{"components/BsHeatmapComponent.html":{},"components/BsTooltipComponent.html":{},"modules/FusionChartsModule.html":{},"interfaces/HeatmapItem.html":{},"components/MapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{}}}],["limit",{"_index":2897,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["limits",{"_index":1170,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{}}}],["line",{"_index":889,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["linestyles",{"_index":2387,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{}}}],["link",{"_index":1177,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{}}}],["linked",{"_index":3330,"title":{},"body":{"miscellaneous/functions.html":{}}}],["links",{"_index":1330,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{}}}],["list",{"_index":143,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"components/BsHeatmapComponent.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"components/MapComponent.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"miscellaneous/functions.html":{}}}],["list.sort((a,b",{"_index":1041,"title":{},"body":{"components/BsNodeInfoCard.html":{},"interfaces/NodeData.html":{}}}],["listen",{"_index":1356,"title":{},"body":{"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/DynamicNodeType.html":{}}}],["listener",{"_index":3037,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["literal",{"_index":1008,"title":{},"body":{"components/BsNodeInfoCard.html":{},"interfaces/EdgeType.html":{},"interfaces/NodeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{}}}],["locale",{"_index":2718,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["localechange",{"_index":1119,"title":{},"body":{"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"components/NgxChart.html":{}}}],["longitude",{"_index":1869,"title":{},"body":{"components/MapComponent.html":{}}}],["longitudefield",{"_index":1858,"title":{},"body":{"components/MapComponent.html":{}}}],["lot",{"_index":1437,"title":{},"body":{"interfaces/DynamicNodeType.html":{}}}],["m",{"_index":2442,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{}}}],["made",{"_index":2498,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["make",{"_index":1314,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{}}}],["makedata",{"_index":1703,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["manage",{"_index":1207,"title":{},"body":{"interfaces/CustomData.html":{},"components/MapComponent.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{}}}],["manages",{"_index":1428,"title":{},"body":{"interfaces/DynamicNodeType.html":{}}}],["managing",{"_index":11,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{}}}],["manual",{"_index":83,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{},"miscellaneous/typealiases.html":{}}}],["manually",{"_index":3368,"title":{},"body":{"miscellaneous/functions.html":{}}}],["many",{"_index":133,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"interfaces/VisEvent.html":{}}}],["map",{"_index":1366,"title":{},"body":{"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"components/MapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["map(a",{"_index":1689,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["map(agg",{"_index":2555,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["map(d",{"_index":2524,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["map(e",{"_index":1021,"title":{},"body":{"components/BsNodeInfoCard.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeData.html":{},"interfaces/NodeType.html":{}}}],["map(events",{"_index":2484,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["map(item",{"_index":2648,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["map(r",{"_index":2535,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["map(results",{"_index":2563,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["map.component",{"_index":1843,"title":{},"body":{"modules/GoogleMapsModule.html":{}}}],["map.component.html",{"_index":1846,"title":{},"body":{"components/MapComponent.html":{}}}],["map.set(node.id",{"_index":1377,"title":{},"body":{"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/DynamicNodeType.html":{}}}],["mapcomponent",{"_index":674,"title":{"components/MapComponent.html":{}},"body":{"components/BsEdgeInfoCard.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"components/BsTooltipComponent.html":{},"components/FacetNgxChart.html":{},"modules/GoogleMapsModule.html":{},"components/MapComponent.html":{},"components/NgxChart.html":{},"components/ResultTimeline.html":{},"coverage.html":{},"index.html":{}}}],["mapstyles",{"_index":1851,"title":{},"body":{"components/MapComponent.html":{}}}],["margin",{"_index":717,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"components/ResultTimeline.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"miscellaneous/variables.html":{}}}],["marker",{"_index":1879,"title":{},"body":{"components/MapComponent.html":{}}}],["markers",{"_index":1900,"title":{},"body":{"components/MapComponent.html":{}}}],["marks",{"_index":2105,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["matching",{"_index":322,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"components/BsEdgeInfoCard.html":{},"components/BsHeatmapComponent.html":{},"modules/BsHeatmapModule.html":{},"components/BsNodeInfoCard.html":{},"modules/BsTimelineModule.html":{},"components/BsTooltipComponent.html":{},"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"modules/FinanceModule.html":{},"modules/FusionChartsModule.html":{},"modules/GoogleMapsModule.html":{},"interfaces/HeatmapItem.html":{},"components/MapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"modules/NetworkModule.html":{},"interfaces/NetworkProvider.html":{},"components/NgxChart.html":{},"modules/NgxChartsModule.html":{},"interfaces/Node.html":{},"interfaces/NodeData.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"components/ResultTimeline.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{},"modules/VisTimelineModule.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["math.floor(event.date.gettime",{"_index":2945,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["math.floor(last[0].date.gettime",{"_index":2944,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["math.floor(this.innerwidth",{"_index":2930,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["math.max((this.innerheight",{"_index":2972,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["math.min(10",{"_index":2971,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["max",{"_index":825,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{}}}],["max_dates",{"_index":2280,"title":{},"body":{"components/ResultTimeline.html":{}}}],["max_year",{"_index":2281,"title":{},"body":{"components/ResultTimeline.html":{}}}],["maxaggregationdate",{"_index":2421,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["maxdate",{"_index":2414,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{}}}],["maxheight",{"_index":2308,"title":{},"body":{"components/ResultTimeline.html":{},"miscellaneous/variables.html":{}}}],["maximum",{"_index":2400,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{}}}],["maxlat",{"_index":1920,"title":{},"body":{"components/MapComponent.html":{}}}],["maxlng",{"_index":1924,"title":{},"body":{"components/MapComponent.html":{}}}],["maxnmonths",{"_index":2399,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["maxx",{"_index":718,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["maxy",{"_index":719,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["maxzoomdays",{"_index":2425,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{}}}],["meaning",{"_index":3352,"title":{},"body":{"miscellaneous/functions.html":{}}}],["means",{"_index":72,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"miscellaneous/typealiases.html":{}}}],["measured",{"_index":2919,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["menu",{"_index":1666,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["merge",{"_index":400,"title":{},"body":{"classes/AsyncRecordsProvider.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{}}}],["merge(dataset",{"_index":1586,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["merged",{"_index":491,"title":{},"body":{"classes/BaseProvider.html":{},"interfaces/CustomData.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{}}}],["mergedatasets(datasets",{"_index":3049,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["mergedevents",{"_index":2436,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["mergedtimeseries",{"_index":2435,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["merges",{"_index":1265,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/VisEvent.html":{}}}],["merging",{"_index":1494,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["metadata",{"_index":13,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"components/BsEdgeInfoCard.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"components/BsTooltipComponent.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicNodeType.html":{},"components/FacetNgxChart.html":{},"components/MapComponent.html":{},"components/NgxChart.html":{},"interfaces/RecordNode.html":{},"components/ResultTimeline.html":{},"interfaces/StructuralEdgeType.html":{},"miscellaneous/functions.html":{}}}],["method",{"_index":316,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"components/BsEdgeInfoCard.html":{},"components/BsNodeInfoCard.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeData.html":{},"interfaces/NodeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{}}}],["methods",{"_index":337,"title":{},"body":{"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"components/BsEdgeInfoCard.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"components/MapComponent.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"components/NgxChart.html":{},"components/ResultTimeline.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["microsoft",{"_index":1187,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{},"miscellaneous/functions.html":{}}}],["middle",{"_index":510,"title":{},"body":{"classes/BaseProvider.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["min",{"_index":2579,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["min_dates",{"_index":2282,"title":{},"body":{"components/ResultTimeline.html":{}}}],["min_year",{"_index":2283,"title":{},"body":{"components/ResultTimeline.html":{}}}],["minaggregationdate",{"_index":2420,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["mindate",{"_index":2413,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{}}}],["minheight",{"_index":2306,"title":{},"body":{"components/ResultTimeline.html":{},"miscellaneous/variables.html":{}}}],["minimum",{"_index":2836,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["minlat",{"_index":1918,"title":{},"body":{"components/MapComponent.html":{}}}],["minlng",{"_index":1922,"title":{},"body":{"components/MapComponent.html":{}}}],["minus",{"_index":1676,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"components/MapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/VisEvent.html":{}}}],["minzoomdays",{"_index":2423,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{}}}],["misc",{"_index":831,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["miscellaneous",{"_index":3312,"title":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["missing",{"_index":1642,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["mistake",{"_index":170,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{}}}],["mm",{"_index":2668,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["mode",{"_index":71,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AsyncRecordsProvider.html":{},"components/MapComponent.html":{},"miscellaneous/typealiases.html":{}}}],["model.name",{"_index":2254,"title":{},"body":{"components/NgxChart.html":{}}}],["model.value",{"_index":2255,"title":{},"body":{"components/NgxChart.html":{}}}],["models",{"_index":44,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"components/BsEdgeInfoCard.html":{},"components/BsNodeInfoCard.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/NodeData.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/VisEvent.html":{}}}],["models.ts",{"_index":1470,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"coverage.html":{}}}],["models.ts:100",{"_index":2226,"title":{},"body":{"interfaces/NetworkProvider.html":{}}}],["models.ts:103",{"_index":2223,"title":{},"body":{"interfaces/NetworkProvider.html":{}}}],["models.ts:106",{"_index":2221,"title":{},"body":{"interfaces/NetworkProvider.html":{}}}],["models.ts:109",{"_index":2220,"title":{},"body":{"interfaces/NetworkProvider.html":{}}}],["models.ts:112",{"_index":2225,"title":{},"body":{"interfaces/NetworkProvider.html":{}}}],["models.ts:128",{"_index":2179,"title":{},"body":{"interfaces/NetworkContext.html":{}}}],["models.ts:142",{"_index":2205,"title":{},"body":{"classes/NetworkDataset.html":{}}}],["models.ts:147",{"_index":2204,"title":{},"body":{"classes/NetworkDataset.html":{}}}],["models.ts:152",{"_index":2199,"title":{},"body":{"classes/NetworkDataset.html":{}}}],["models.ts:157",{"_index":2196,"title":{},"body":{"classes/NetworkDataset.html":{}}}],["models.ts:162",{"_index":2201,"title":{},"body":{"classes/NetworkDataset.html":{}}}],["models.ts:167",{"_index":2198,"title":{},"body":{"classes/NetworkDataset.html":{}}}],["models.ts:172",{"_index":2203,"title":{},"body":{"classes/NetworkDataset.html":{}}}],["models.ts:177",{"_index":2202,"title":{},"body":{"classes/NetworkDataset.html":{}}}],["models.ts:182",{"_index":2200,"title":{},"body":{"classes/NetworkDataset.html":{}}}],["models.ts:187",{"_index":2197,"title":{},"body":{"classes/NetworkDataset.html":{}}}],["models.ts:192",{"_index":2193,"title":{},"body":{"classes/NetworkDataset.html":{}}}],["models.ts:198",{"_index":2191,"title":{},"body":{"classes/NetworkDataset.html":{}}}],["models.ts:203",{"_index":2190,"title":{},"body":{"classes/NetworkDataset.html":{}}}],["models.ts:213",{"_index":2207,"title":{},"body":{"classes/NetworkDataset.html":{}}}],["models.ts:218",{"_index":2192,"title":{},"body":{"classes/NetworkDataset.html":{}}}],["models.ts:230",{"_index":2194,"title":{},"body":{"classes/NetworkDataset.html":{}}}],["models.ts:235",{"_index":2195,"title":{},"body":{"classes/NetworkDataset.html":{}}}],["models.ts:251",{"_index":2206,"title":{},"body":{"classes/NetworkDataset.html":{}}}],["models.ts:318",{"_index":2208,"title":{},"body":{"classes/NetworkDataset.html":{}}}],["models.ts:85",{"_index":2222,"title":{},"body":{"interfaces/NetworkProvider.html":{}}}],["models.ts:88",{"_index":2219,"title":{},"body":{"interfaces/NetworkProvider.html":{}}}],["models.ts:91",{"_index":2224,"title":{},"body":{"interfaces/NetworkProvider.html":{}}}],["models.ts:94",{"_index":2228,"title":{},"body":{"interfaces/NetworkProvider.html":{}}}],["models.ts:97",{"_index":2227,"title":{},"body":{"interfaces/NetworkProvider.html":{}}}],["modes",{"_index":77,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"miscellaneous/typealiases.html":{}}}],["modified",{"_index":2358,"title":{},"body":{"components/ResultTimeline.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["modifying",{"_index":1588,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["module",{"_index":975,"title":{"modules/BsHeatmapModule.html":{},"modules/BsTimelineModule.html":{},"modules/FinanceModule.html":{},"modules/FusionChartsModule.html":{},"modules/GoogleMapsModule.html":{},"modules/NetworkModule.html":{},"modules/NgxChartsModule.html":{},"modules/VisTimelineModule.html":{}},"body":{"modules/BsHeatmapModule.html":{},"modules/BsTimelineModule.html":{},"modules/FinanceModule.html":{},"modules/FusionChartsModule.html":{},"modules/GoogleMapsModule.html":{},"modules/NetworkModule.html":{},"modules/NgxChartsModule.html":{},"modules/VisTimelineModule.html":{},"index.html":{}}}],["module.ts",{"_index":3187,"title":{},"body":{"modules/VisTimelineModule.html":{}}}],["modules",{"_index":977,"title":{"modules.html":{}},"body":{"modules/BsHeatmapModule.html":{},"modules/BsTimelineModule.html":{},"modules/FinanceModule.html":{},"modules/FusionChartsModule.html":{},"modules/GoogleMapsModule.html":{},"modules/NetworkModule.html":{},"modules/NgxChartsModule.html":{},"modules/VisTimelineModule.html":{},"index.html":{},"modules.html":{}}}],["moment",{"_index":2305,"title":{},"body":{"components/ResultTimeline.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["moment(date).format('ll",{"_index":2352,"title":{},"body":{"components/ResultTimeline.html":{}}}],["moment(dateobj.display).todate",{"_index":2347,"title":{},"body":{"components/ResultTimeline.html":{}}}],["moment(val.length",{"_index":2652,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["money",{"_index":677,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"components/BsTooltipComponent.html":{},"components/FacetNgxChart.html":{},"modules/FinanceModule.html":{},"components/MapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"components/NgxChart.html":{},"components/ResultTimeline.html":{}}}],["moneyaggregation",{"_index":1976,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{}}}],["moneycloudcomponent",{"_index":676,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"components/BsTooltipComponent.html":{},"components/FacetNgxChart.html":{},"modules/FinanceModule.html":{},"components/MapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"components/NgxChart.html":{},"components/ResultTimeline.html":{},"coverage.html":{},"index.html":{}}}],["moneyclouddatum",{"_index":1955,"title":{"interfaces/MoneyCloudDatum.html":{}},"body":{"interfaces/MoneyCloudDatum.html":{},"coverage.html":{}}}],["moneycolumn",{"_index":2135,"title":{},"body":{"interfaces/MoneyDatum.html":{}}}],["moneydatum",{"_index":2129,"title":{"interfaces/MoneyDatum.html":{}},"body":{"interfaces/MoneyDatum.html":{},"coverage.html":{}}}],["moneytimelinecomponent",{"_index":679,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"components/BsTooltipComponent.html":{},"components/FacetNgxChart.html":{},"modules/FinanceModule.html":{},"components/MapComponent.html":{},"interfaces/MoneyDatum.html":{},"components/NgxChart.html":{},"components/ResultTimeline.html":{},"coverage.html":{},"index.html":{}}}],["moneyvaluecolumn",{"_index":1973,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{}}}],["mono",{"_index":1218,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{}}}],["month",{"_index":2664,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["months",{"_index":2401,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["more",{"_index":1349,"title":{},"body":{"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["mouse",{"_index":790,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["mouseevent",{"_index":787,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["move",{"_index":627,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsNodeInfoCard.html":{},"interfaces/NodeData.html":{}}}],["moved",{"_index":2875,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["ms",{"_index":821,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["msg#facet.clearselects",{"_index":1678,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"components/MapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/VisEvent.html":{}}}],["msg#googlemaps.filterarea",{"_index":1916,"title":{},"body":{"components/MapComponent.html":{}}}],["msg#heatmap.showing",{"_index":933,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["msg#heatmap.tooltip",{"_index":940,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["msg#network.actions.active",{"_index":460,"title":{},"body":{"classes/BaseProvider.html":{}}}],["msg#network.actions.collapsemeta",{"_index":1326,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{}}}],["msg#network.actions.expandmeta",{"_index":1323,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{}}}],["msg#network.actions.fetchmoreall",{"_index":296,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{}}}],["msg#network.actions.fetchmorealltext",{"_index":298,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{}}}],["msg#network.actions.inactive",{"_index":461,"title":{},"body":{"classes/BaseProvider.html":{}}}],["msg#network.actions.providers",{"_index":3076,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["msg#network.actions.refresh",{"_index":3025,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["msg#network.actions.reset",{"_index":469,"title":{},"body":{"classes/BaseProvider.html":{}}}],["msg#network.actions.resettitle",{"_index":470,"title":{},"body":{"classes/BaseProvider.html":{}}}],["msg#network.actions.toggle",{"_index":462,"title":{},"body":{"classes/BaseProvider.html":{}}}],["msg#network.infocards.aggregation",{"_index":638,"title":{},"body":{"components/BsEdgeInfoCard.html":{}}}],["msg#network.infocards.count",{"_index":635,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsNodeInfoCard.html":{}}}],["msg#network.infocards.record",{"_index":640,"title":{},"body":{"components/BsEdgeInfoCard.html":{}}}],["msgfrom",{"_index":1258,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{}}}],["msgto",{"_index":1259,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{}}}],["multi",{"_index":1219,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{}}}],["multiple",{"_index":1166,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"components/MapComponent.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["multivalued",{"_index":1782,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["mutable",{"_index":1490,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["mutate",{"_index":1449,"title":{},"body":{"interfaces/DynamicNodeType.html":{}}}],["mutatenodes(nodes",{"_index":1457,"title":{},"body":{"interfaces/DynamicNodeType.html":{}}}],["mutates",{"_index":1456,"title":{},"body":{"interfaces/DynamicNodeType.html":{}}}],["mutation",{"_index":1461,"title":{},"body":{"interfaces/DynamicNodeType.html":{},"interfaces/VisEvent.html":{}}}],["muted",{"_index":644,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsNodeInfoCard.html":{}}}],["n.visible",{"_index":1532,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["name",{"_index":96,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"components/BsEdgeInfoCard.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"components/BsTooltipComponent.html":{},"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"components/MapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"components/NgxChart.html":{},"interfaces/Node.html":{},"interfaces/NodeData.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"components/ResultTimeline.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{},"miscellaneous/functions.html":{}}}],["native",{"_index":2019,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["nbins",{"_index":2929,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["necessary",{"_index":1355,"title":{},"body":{"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{}}}],["need",{"_index":272,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"modules/BsTimelineModule.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{}}}],["needs",{"_index":2031,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["neighbor",{"_index":398,"title":{},"body":{"classes/AsyncRecordsProvider.html":{},"components/BsNodeInfoCard.html":{},"interfaces/CustomData.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeData.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{}}}],["neighbor.count",{"_index":1571,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["neighbor.key",{"_index":1044,"title":{},"body":{"components/BsNodeInfoCard.html":{}}}],["neighbor.visible",{"_index":1304,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{}}}],["neighbors",{"_index":1003,"title":{},"body":{"components/BsNodeInfoCard.html":{},"interfaces/CustomData.html":{},"interfaces/NodeData.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{}}}],["neighborsneighbors",{"_index":1301,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{}}}],["network",{"_index":43,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"components/BsEdgeInfoCard.html":{},"components/BsNodeInfoCard.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeData.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/VisEvent.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["network'},{'name",{"_index":681,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"components/BsTooltipComponent.html":{},"components/FacetNgxChart.html":{},"components/MapComponent.html":{},"components/NgxChart.html":{},"components/ResultTimeline.html":{}}}],["network.component",{"_index":2217,"title":{},"body":{"modules/NetworkModule.html":{}}}],["network.component.html",{"_index":3000,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["network/.../aggregation",{"_index":3315,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["network/.../dynamic",{"_index":3316,"title":{},"body":{"miscellaneous/functions.html":{}}}],["network/.../network",{"_index":3314,"title":{},"body":{"miscellaneous/functions.html":{}}}],["network/.../network.component.ts",{"_index":3379,"title":{},"body":{"miscellaneous/variables.html":{}}}],["network/.../records",{"_index":3317,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["network/docs/network",{"_index":2998,"title":{},"body":{"interfaces/VisEvent.html":{},"miscellaneous/variables.html":{}}}],["network/docs/network/edges.html",{"_index":1488,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["network/docs/network/nodes.html",{"_index":1483,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["network/edge",{"_index":573,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"coverage.html":{}}}],["network/network",{"_index":1469,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["network/network.component.ts",{"_index":2990,"title":{},"body":{"interfaces/VisEvent.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["network/network.module.ts",{"_index":2213,"title":{},"body":{"modules/NetworkModule.html":{}}}],["network/node",{"_index":1002,"title":{},"body":{"components/BsNodeInfoCard.html":{},"interfaces/NodeData.html":{},"coverage.html":{}}}],["network/providers/aggregation",{"_index":6,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["network/providers/async",{"_index":325,"title":{},"body":{"classes/AsyncRecordsProvider.html":{},"coverage.html":{}}}],["network/providers/base",{"_index":436,"title":{},"body":{"classes/BaseProvider.html":{},"coverage.html":{}}}],["network/providers/dynamic",{"_index":1335,"title":{},"body":{"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/DynamicNodeType.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["network/providers/provider",{"_index":3272,"title":{},"body":{"coverage.html":{}}}],["network/providers/records",{"_index":1162,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["network/providers/selected",{"_index":3281,"title":{},"body":{"coverage.html":{}}}],["networkcomponent",{"_index":680,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"components/BsTooltipComponent.html":{},"components/FacetNgxChart.html":{},"components/MapComponent.html":{},"modules/NetworkModule.html":{},"components/NgxChart.html":{},"components/ResultTimeline.html":{},"interfaces/VisEvent.html":{},"coverage.html":{},"index.html":{}}}],["networkcontext",{"_index":42,"title":{"interfaces/NetworkContext.html":{}},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"interfaces/CustomData.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/VisEvent.html":{},"coverage.html":{}}}],["networkdataset",{"_index":41,"title":{"classes/NetworkDataset.html":{}},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/VisEvent.html":{},"coverage.html":{}}}],["networkinitialized",{"_index":3086,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["networkinstance",{"_index":623,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsNodeInfoCard.html":{},"interfaces/NodeData.html":{}}}],["networkinstance.focus(node.id",{"_index":625,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsNodeInfoCard.html":{},"interfaces/NodeData.html":{}}}],["networkinstance.selectnodes([node.id",{"_index":629,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsNodeInfoCard.html":{},"interfaces/NodeData.html":{}}}],["networkmodule",{"_index":2209,"title":{"modules/NetworkModule.html":{}},"body":{"modules/NetworkModule.html":{},"index.html":{},"modules.html":{}}}],["networkprovider",{"_index":244,"title":{"interfaces/NetworkProvider.html":{}},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/VisEvent.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["networkservice",{"_index":621,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsNodeInfoCard.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeData.html":{},"interfaces/NodeType.html":{},"interfaces/VisEvent.html":{}}}],["new",{"_index":101,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"components/BsHeatmapComponent.html":{},"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"interfaces/HeatmapItem.html":{},"components/MapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"components/NgxChart.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"components/ResultTimeline.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["newselection",{"_index":2888,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["next",{"_index":376,"title":{},"body":{"classes/AsyncRecordsProvider.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["ng",{"_index":947,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["ngafterviewinit",{"_index":709,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["ngdocheck",{"_index":1155,"title":{},"body":{"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"components/NgxChart.html":{}}}],["ngmodule",{"_index":988,"title":{},"body":{"modules/BsHeatmapModule.html":{},"modules/BsTimelineModule.html":{},"modules/FinanceModule.html":{},"modules/FusionChartsModule.html":{},"modules/GoogleMapsModule.html":{},"modules/NetworkModule.html":{},"modules/NgxChartsModule.html":{},"modules/VisTimelineModule.html":{}}}],["ngonchanges",{"_index":599,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"components/FacetNgxChart.html":{},"interfaces/HeatmapItem.html":{},"components/MapComponent.html":{},"components/NgxChart.html":{},"interfaces/NodeData.html":{},"components/ResultTimeline.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["ngonchanges(changes",{"_index":1146,"title":{},"body":{"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"components/MapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"components/NgxChart.html":{},"components/ResultTimeline.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{}}}],["ngonchanges(changes:simplechanges",{"_index":2311,"title":{},"body":{"components/ResultTimeline.html":{}}}],["ngondestroy",{"_index":1131,"title":{},"body":{"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"components/NgxChart.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{}}}],["ngoninit",{"_index":1126,"title":{},"body":{"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"components/NgxChart.html":{}}}],["ngx",{"_index":670,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"components/BsTooltipComponent.html":{},"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"components/MapComponent.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"modules/NetworkModule.html":{},"interfaces/NetworkProvider.html":{},"components/NgxChart.html":{},"modules/NgxChartsModule.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"components/ResultTimeline.html":{},"interfaces/VisEvent.html":{},"modules/VisTimelineModule.html":{},"coverage.html":{},"dependencies.html":{}}}],["ngxchart",{"_index":682,"title":{"components/NgxChart.html":{}},"body":{"components/BsEdgeInfoCard.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"components/BsTooltipComponent.html":{},"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"components/FacetNgxChart.html":{},"components/MapComponent.html":{},"components/NgxChart.html":{},"modules/NgxChartsModule.html":{},"components/ResultTimeline.html":{},"coverage.html":{},"index.html":{}}}],["ngxchartsmodule",{"_index":2260,"title":{"modules/NgxChartsModule.html":{}},"body":{"modules/NgxChartsModule.html":{},"index.html":{},"modules.html":{}}}],["nmonths",{"_index":2570,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["node",{"_index":38,"title":{"interfaces/Node.html":{}},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"components/BsEdgeInfoCard.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"components/BsTooltipComponent.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"components/FacetNgxChart.html":{},"components/MapComponent.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"modules/NetworkModule.html":{},"interfaces/NetworkProvider.html":{},"components/NgxChart.html":{},"interfaces/Node.html":{},"interfaces/NodeData.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"components/ResultTimeline.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/VisEvent.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["node's",{"_index":3361,"title":{},"body":{"miscellaneous/functions.html":{}}}],["node.context.name",{"_index":538,"title":{},"body":{"classes/BaseProvider.html":{}}}],["node.context.networkservice['networks'][node.context.name",{"_index":624,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsNodeInfoCard.html":{},"interfaces/NodeData.html":{}}}],["node.context.searchservice.query.addselect(expr",{"_index":537,"title":{},"body":{"classes/BaseProvider.html":{}}}],["node.context.searchservice.search",{"_index":539,"title":{},"body":{"classes/BaseProvider.html":{}}}],["node.context.select(node",{"_index":632,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsNodeInfoCard.html":{},"interfaces/NodeData.html":{}}}],["node.count",{"_index":645,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["node.id",{"_index":1248,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{}}}],["node.id.substr(node.type.name.length+1",{"_index":482,"title":{},"body":{"classes/BaseProvider.html":{}}}],["node.label",{"_index":312,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/BaseProvider.html":{},"components/BsEdgeInfoCard.html":{},"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/DynamicNodeType.html":{}}}],["node.provider",{"_index":532,"title":{},"body":{"classes/BaseProvider.html":{}}}],["node.record",{"_index":1225,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{}}}],["node.record[type.field",{"_index":1216,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{}}}],["node.type",{"_index":269,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{}}}],["node.type.field",{"_index":533,"title":{},"body":{"classes/BaseProvider.html":{}}}],["node.visible",{"_index":1245,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{}}}],["node1.id",{"_index":476,"title":{},"body":{"classes/BaseProvider.html":{}}}],["node2",{"_index":475,"title":{},"body":{"classes/BaseProvider.html":{}}}],["node2.id",{"_index":478,"title":{},"body":{"classes/BaseProvider.html":{}}}],["node['icon']['code",{"_index":642,"title":{},"body":{"components/BsEdgeInfoCard.html":{}}}],["node[\\'icon\\'][\\'code",{"_index":654,"title":{},"body":{"components/BsEdgeInfoCard.html":{}}}],["nodecache",{"_index":1365,"title":{},"body":{"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/DynamicNodeType.html":{}}}],["nodeclicked",{"_index":3005,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["nodedata",{"_index":1004,"title":{"interfaces/NodeData.html":{}},"body":{"components/BsNodeInfoCard.html":{},"interfaces/NodeData.html":{},"coverage.html":{}}}],["nodedata.count",{"_index":1047,"title":{},"body":{"components/BsNodeInfoCard.html":{}}}],["nodedata.node.label",{"_index":1046,"title":{},"body":{"components/BsNodeInfoCard.html":{}}}],["nodedata.node['icon']['code",{"_index":1045,"title":{},"body":{"components/BsNodeInfoCard.html":{}}}],["nodedata.node[\\'icon\\'][\\'code",{"_index":1048,"title":{},"body":{"components/BsNodeInfoCard.html":{}}}],["nodefrom",{"_index":540,"title":{},"body":{"classes/BaseProvider.html":{}}}],["nodefrom.label",{"_index":556,"title":{},"body":{"classes/BaseProvider.html":{}}}],["nodefrom.type.field",{"_index":552,"title":{},"body":{"classes/BaseProvider.html":{}}}],["nodeid",{"_index":1569,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["nodeidx",{"_index":1515,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["nodeoptions",{"_index":1484,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["nodes",{"_index":102,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/VisEvent.html":{},"miscellaneous/functions.html":{}}}],["nodes.foreach(node",{"_index":1545,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["nodes.remove(nodes.get().filter(n",{"_index":1628,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["nodes.update(this.getvisiblenodes",{"_index":1632,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["nodes/edges",{"_index":1255,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{}}}],["nodes[i].getcomputedtextlength",{"_index":923,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["nodeto",{"_index":542,"title":{},"body":{"classes/BaseProvider.html":{}}}],["nodeto.label",{"_index":558,"title":{},"body":{"classes/BaseProvider.html":{}}}],["nodeto.type.field",{"_index":553,"title":{},"body":{"classes/BaseProvider.html":{}}}],["nodetpl",{"_index":3013,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["nodetype",{"_index":348,"title":{"interfaces/NodeType.html":{}},"body":{"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{},"coverage.html":{}}}],["nodetypes",{"_index":1487,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["nodetypes[1",{"_index":106,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{}}}],["none",{"_index":973,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["normalize",{"_index":2053,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{}}}],["north",{"_index":1943,"title":{},"body":{"components/MapComponent.html":{}}}],["note",{"_index":489,"title":{},"body":{"classes/BaseProvider.html":{},"components/BsHeatmapComponent.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/HeatmapItem.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{}}}],["nothing",{"_index":2950,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["notify",{"_index":2168,"title":{},"body":{"interfaces/MoneyDatum.html":{},"interfaces/VisEvent.html":{}}}],["now",{"_index":3088,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["null",{"_index":1758,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["null/undefined",{"_index":2956,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["number",{"_index":116,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/HeatmapItem.html":{},"components/MapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"components/NgxChart.html":{},"interfaces/Node.html":{},"interfaces/NodeData.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"components/ResultTimeline.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{}}}],["number.isinteger(tick",{"_index":2099,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["numbercardmodule",{"_index":2270,"title":{},"body":{"modules/NgxChartsModule.html":{}}}],["numerical",{"_index":2055,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{}}}],["o(n",{"_index":1575,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["obama",{"_index":3350,"title":{},"body":{"miscellaneous/functions.html":{}}}],["object",{"_index":331,"title":{},"body":{"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"components/BsEdgeInfoCard.html":{},"components/BsNodeInfoCard.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"components/MapComponent.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeData.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"miscellaneous/variables.html":{}}}],["object.assign",{"_index":1587,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["object.keys(query.aggregations).foreach(aggregation",{"_index":168,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{}}}],["object.values(this.neighbors",{"_index":1039,"title":{},"body":{"components/BsNodeInfoCard.html":{},"interfaces/NodeData.html":{}}}],["objects",{"_index":1363,"title":{},"body":{"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["observable",{"_index":2389,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["observables",{"_index":2431,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["obtain",{"_index":1341,"title":{},"body":{"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/DynamicNodeType.html":{}}}],["obtained",{"_index":866,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/HeatmapItem.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["occurrences",{"_index":2041,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{}}}],["of({aggregation",{"_index":2552,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["on(\"click",{"_index":899,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["on(\"end",{"_index":880,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["on(\"mousedown.zoom",{"_index":2850,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["on(\"mousemove",{"_index":2021,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["on(\"mouseout",{"_index":2140,"title":{},"body":{"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["on(\"start",{"_index":2738,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["on(\"touchend.zoom",{"_index":2855,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["on(\"touchmove.zoom",{"_index":2854,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["on(\"touchstart.zoom",{"_index":2853,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["on(\"zoom",{"_index":2846,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["on('brush",{"_index":2740,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["on('end",{"_index":2742,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["on/off",{"_index":2911,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["onafterviewinit",{"_index":865,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["onaxisclicked",{"_index":710,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["onaxisclicked(value",{"_index":778,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["onboundschange",{"_index":1854,"title":{},"body":{"components/MapComponent.html":{}}}],["onboundschange(bounds",{"_index":1882,"title":{},"body":{"components/MapComponent.html":{}}}],["onbrush",{"_index":2883,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["onbrushend",{"_index":2887,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["once",{"_index":284,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AsyncRecordsProvider.html":{},"components/BsHeatmapComponent.html":{},"interfaces/CustomData.html":{},"interfaces/HeatmapItem.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["onchange",{"_index":3003,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["onchanges",{"_index":575,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"interfaces/HeatmapItem.html":{},"components/MapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"components/NgxChart.html":{},"interfaces/NodeData.html":{},"components/ResultTimeline.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{}}}],["onchanges,afterviewinit",{"_index":1967,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{}}}],["onclick",{"_index":82,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AsyncRecordsProvider.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{},"miscellaneous/typealiases.html":{}}}],["ondatasetsmerged",{"_index":340,"title":{},"body":{"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"interfaces/NetworkProvider.html":{}}}],["ondatasetsmerged(dataset",{"_index":394,"title":{},"body":{"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["ondestroy",{"_index":344,"title":{},"body":{"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"components/NgxChart.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{}}}],["one",{"_index":264,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AsyncRecordsProvider.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{}}}],["onedgeclicked",{"_index":345,"title":{},"body":{"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"interfaces/NetworkProvider.html":{}}}],["onedgeclicked(edge",{"_index":427,"title":{},"body":{"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["ones",{"_index":1333,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{}}}],["oneventclick(event",{"_index":2912,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["oneventclicked(event",{"_index":2618,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["oninit",{"_index":1094,"title":{},"body":{"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"components/NgxChart.html":{}}}],["oninsert",{"_index":87,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{},"miscellaneous/typealiases.html":{}}}],["onitemclicked",{"_index":711,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["onitemclicked(item",{"_index":782,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["only/56821215",{"_index":2107,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["onmapclick",{"_index":1855,"title":{},"body":{"components/MapComponent.html":{}}}],["onmapclick(event",{"_index":1885,"title":{},"body":{"components/MapComponent.html":{}}}],["onmarkerclick",{"_index":1856,"title":{},"body":{"components/MapComponent.html":{}}}],["onmarkerclick(event",{"_index":1887,"title":{},"body":{"components/MapComponent.html":{}}}],["onmouseenterdatum(datum",{"_index":2123,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{}}}],["onmousemove",{"_index":2117,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["onmouseout",{"_index":2175,"title":{},"body":{"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["onmouseover",{"_index":712,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["onmouseover(item",{"_index":785,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["onnetworkclick(eventdata",{"_index":3097,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["onnodeclicked",{"_index":341,"title":{},"body":{"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"interfaces/NetworkProvider.html":{}}}],["onnodeclicked(node",{"_index":267,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{}}}],["onnodesinserted",{"_index":346,"title":{},"body":{"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"interfaces/NetworkProvider.html":{}}}],["onnodesinserted(nodes",{"_index":430,"title":{},"body":{"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["onopensettings(opened",{"_index":3133,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["onrangechange(range",{"_index":2610,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["onrecordclicked(datum",{"_index":2170,"title":{},"body":{"interfaces/MoneyDatum.html":{}}}],["onresize",{"_index":1124,"title":{},"body":{"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"components/NgxChart.html":{}}}],["onselectionchange(selection",{"_index":2593,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["onzoom",{"_index":2893,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["onzoomend",{"_index":2902,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["ootbconfig",{"_index":3245,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["ootbconfig(providerfactory",{"_index":3333,"title":{},"body":{"miscellaneous/functions.html":{}}}],["opacity",{"_index":959,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["opened",{"_index":1905,"title":{},"body":{"components/MapComponent.html":{},"interfaces/VisEvent.html":{}}}],["openedwindow",{"_index":1852,"title":{},"body":{"components/MapComponent.html":{}}}],["optional",{"_index":23,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"components/BsEdgeInfoCard.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"interfaces/ChartOptions.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"components/FacetNgxChart.html":{},"interfaces/HeatmapItem.html":{},"components/MapComponent.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"components/NgxChart.html":{},"interfaces/Node.html":{},"interfaces/NodeData.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"components/ResultTimeline.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"miscellaneous/functions.html":{}}}],["options",{"_index":95,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/BaseProvider.html":{},"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"components/NgxChart.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"components/ResultTimeline.html":{},"interfaces/VisEvent.html":{},"miscellaneous/variables.html":{}}}],["optionsprefs",{"_index":3004,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["order",{"_index":1749,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["ored",{"_index":1585,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["orientation",{"_index":1073,"title":{},"body":{"components/BsTooltipComponent.html":{}}}],["original",{"_index":1431,"title":{},"body":{"interfaces/DynamicNodeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{},"miscellaneous/functions.html":{}}}],["originalcount",{"_index":695,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["out",{"_index":986,"title":{},"body":{"modules/BsHeatmapModule.html":{},"modules/BsTimelineModule.html":{},"modules/FinanceModule.html":{},"modules/FusionChartsModule.html":{},"modules/GoogleMapsModule.html":{},"modules/NetworkModule.html":{},"modules/NgxChartsModule.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"modules/VisTimelineModule.html":{},"index.html":{}}}],["output",{"_index":817,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/HeatmapItem.html":{},"components/MapComponent.html":{},"interfaces/MoneyDatum.html":{},"components/NgxChart.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{}}}],["output(\"item",{"_index":1110,"title":{},"body":{"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"components/NgxChart.html":{}}}],["outputs",{"_index":722,"title":{},"body":{"components/BsHeatmapComponent.html":{},"components/MapComponent.html":{},"components/NgxChart.html":{}}}],["outside",{"_index":2752,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["over",{"_index":791,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["overflow",{"_index":2259,"title":{},"body":{"components/NgxChart.html":{}}}],["overlay",{"_index":1995,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{}}}],["overriden",{"_index":2402,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["overview",{"_index":3369,"title":{"index.html":{}},"body":{"index.html":{}}}],["p.getdata(this.context",{"_index":3047,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["p.getedgeactions(this._selectededge",{"_index":3073,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["p.getnodeactions(this._selectednode",{"_index":3069,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["p.getprovider",{"_index":3044,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["p.getprovider())).subscribe(dataset",{"_index":1372,"title":{},"body":{"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/DynamicNodeType.html":{}}}],["p.getprovideractions",{"_index":3078,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["p.ondatasetsmerged(dataset",{"_index":3053,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["p.onedgeclicked(edge",{"_index":3022,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["p.onnodeclicked(node",{"_index":3020,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["p.onnodesinserted(this.context.nodes.get",{"_index":3059,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["package",{"_index":3297,"title":{"dependencies.html":{}},"body":{}}],["page",{"_index":64,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["pages",{"_index":3355,"title":{},"body":{"miscellaneous/functions.html":{}}}],["paginate",{"_index":1176,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{},"miscellaneous/typealiases.html":{}}}],["pagination",{"_index":1171,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{}}}],["panel",{"_index":3132,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["param",{"_index":123,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"components/BsHeatmapComponent.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyDatum.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{}}}],["parameter",{"_index":112,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["parameters",{"_index":353,"title":{},"body":{"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"components/BsEdgeInfoCard.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"components/FacetNgxChart.html":{},"interfaces/HeatmapItem.html":{},"components/MapComponent.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"components/NgxChart.html":{},"components/ResultTimeline.html":{},"miscellaneous/functions.html":{}}}],["params",{"_index":2636,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["parent",{"_index":2169,"title":{},"body":{"interfaces/MoneyDatum.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{}}}],["parse",{"_index":18,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"interfaces/CustomData.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{}}}],["parsed",{"_index":1164,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{}}}],["parsedexpr",{"_index":2460,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["parsedexpr.operands[0",{"_index":2464,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["parseentity",{"_index":2056,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{}}}],["parsefloat(val[1",{"_index":2155,"title":{},"body":{"interfaces/MoneyDatum.html":{}}}],["parsefloat(valuestr",{"_index":2063,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{}}}],["parseint(id[1",{"_index":2376,"title":{},"body":{"components/ResultTimeline.html":{}}}],["parsing",{"_index":222,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{}}}],["particular",{"_index":1338,"title":{},"body":{"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["passed",{"_index":1505,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/VisEvent.html":{}}}],["path",{"_index":2976,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["paul",{"_index":3364,"title":{},"body":{"miscellaneous/functions.html":{}}}],["peer",{"_index":3300,"title":{},"body":{"dependencies.html":{}}}],["people",{"_index":3366,"title":{},"body":{"miscellaneous/functions.html":{}}}],["per",{"_index":2432,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{}}}],["permanent",{"_index":1368,"title":{},"body":{"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/DynamicNodeType.html":{}}}],["person",{"_index":3325,"title":{},"body":{"miscellaneous/functions.html":{}}}],["piece",{"_index":2969,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["piechartmodule",{"_index":2268,"title":{},"body":{"modules/NgxChartsModule.html":{}}}],["pixel",{"_index":2920,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["pixperevent",{"_index":2926,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["plus",{"_index":292,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{}}}],["poi",{"_index":3402,"title":{},"body":{"miscellaneous/variables.html":{}}}],["poi.park",{"_index":3405,"title":{},"body":{"miscellaneous/variables.html":{}}}],["point",{"_index":867,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["pointer",{"_index":958,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/VisEvent.html":{}}}],["points",{"_index":1751,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["popup_extract(id[0",{"_index":2375,"title":{},"body":{"components/ResultTimeline.html":{}}}],["pos",{"_index":2329,"title":{},"body":{"components/ResultTimeline.html":{}}}],["position",{"_index":942,"title":{},"body":{"components/BsHeatmapComponent.html":{},"components/BsTooltipComponent.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{}}}],["possible",{"_index":1206,"title":{},"body":{"interfaces/CustomData.html":{},"components/MapComponent.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{}}}],["possibly",{"_index":2470,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["post",{"_index":399,"title":{},"body":{"classes/AsyncRecordsProvider.html":{},"interfaces/VisEvent.html":{}}}],["potentially",{"_index":265,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{}}}],["pre",{"_index":834,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["precedence",{"_index":1491,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["preference",{"_index":3174,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["preferences",{"_index":3033,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["prefs",{"_index":3017,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["present",{"_index":1256,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{}}}],["pretty",{"_index":1029,"title":{},"body":{"components/BsNodeInfoCard.html":{},"interfaces/NodeData.html":{}}}],["prev.merge(cur",{"_index":3052,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["prevent",{"_index":1329,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["previous",{"_index":2830,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["previously",{"_index":1419,"title":{},"body":{"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/DynamicNodeType.html":{}}}],["previousvalue",{"_index":2952,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["previousvalue.length",{"_index":2966,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["primary",{"_index":2388,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{}}}],["primaryseries",{"_index":2801,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["primitives",{"_index":2144,"title":{},"body":{"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["prior",{"_index":2412,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{}}}],["private",{"_index":832,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"components/NgxChart.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["probably",{"_index":1188,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["process",{"_index":183,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"components/BsHeatmapComponent.html":{},"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/HeatmapItem.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{}}}],["processed",{"_index":1359,"title":{},"body":{"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/DynamicNodeType.html":{}}}],["processednodes",{"_index":1360,"title":{},"body":{"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/DynamicNodeType.html":{}}}],["processes",{"_index":1447,"title":{},"body":{"interfaces/DynamicNodeType.html":{}}}],["processnode(node",{"_index":1415,"title":{},"body":{"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/DynamicNodeType.html":{}}}],["produce",{"_index":3002,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["produced",{"_index":3048,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["programmatically",{"_index":767,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/CustomData.html":{},"interfaces/HeatmapItem.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["propagate",{"_index":1312,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{}}}],["propagated",{"_index":2616,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["properties",{"_index":22,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"components/BsEdgeInfoCard.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"interfaces/HeatmapItem.html":{},"components/MapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"components/NgxChart.html":{},"interfaces/Node.html":{},"interfaces/NodeData.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"components/ResultTimeline.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{}}}],["properties.event",{"_index":2367,"title":{},"body":{"components/ResultTimeline.html":{}}}],["properties.event.target,url",{"_index":2377,"title":{},"body":{"components/ResultTimeline.html":{}}}],["properties.items",{"_index":2365,"title":{},"body":{"components/ResultTimeline.html":{}}}],["properties.items[0].split",{"_index":2370,"title":{},"body":{"components/ResultTimeline.html":{}}}],["property",{"_index":414,"title":{},"body":{"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["protected",{"_index":139,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"components/NgxChart.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{}}}],["provide",{"_index":1436,"title":{},"body":{"interfaces/DynamicNodeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["provided",{"_index":100,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/MoneyDatum.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["provider",{"_index":54,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/VisEvent.html":{},"miscellaneous/functions.html":{}}}],["provider.ts",{"_index":7,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["provider.ts:10",{"_index":352,"title":{},"body":{"classes/AsyncRecordsProvider.html":{}}}],["provider.ts:13",{"_index":354,"title":{},"body":{"classes/AsyncRecordsProvider.html":{}}}],["provider.ts:15",{"_index":444,"title":{},"body":{"classes/BaseProvider.html":{}}}],["provider.ts:151",{"_index":450,"title":{},"body":{"classes/BaseProvider.html":{}}}],["provider.ts:155",{"_index":447,"title":{},"body":{"classes/BaseProvider.html":{}}}],["provider.ts:159",{"_index":452,"title":{},"body":{"classes/BaseProvider.html":{}}}],["provider.ts:16",{"_index":443,"title":{},"body":{"classes/BaseProvider.html":{}}}],["provider.ts:163",{"_index":456,"title":{},"body":{"classes/BaseProvider.html":{}}}],["provider.ts:167",{"_index":455,"title":{},"body":{"classes/BaseProvider.html":{}}}],["provider.ts:171",{"_index":454,"title":{},"body":{"classes/BaseProvider.html":{}}}],["provider.ts:179",{"_index":451,"title":{},"body":{"classes/BaseProvider.html":{}}}],["provider.ts:18",{"_index":445,"title":{},"body":{"classes/BaseProvider.html":{}}}],["provider.ts:188",{"_index":449,"title":{},"body":{"classes/BaseProvider.html":{}}}],["provider.ts:21",{"_index":442,"title":{},"body":{"classes/BaseProvider.html":{}}}],["provider.ts:211",{"_index":448,"title":{},"body":{"classes/BaseProvider.html":{}}}],["provider.ts:23",{"_index":446,"title":{},"body":{"classes/BaseProvider.html":{}}}],["provider.ts:245",{"_index":453,"title":{},"body":{"classes/BaseProvider.html":{}}}],["provider.ts:25",{"_index":441,"title":{},"body":{"classes/BaseProvider.html":{}}}],["provider.ts:28",{"_index":373,"title":{},"body":{"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{}}}],["provider.ts:38",{"_index":366,"title":{},"body":{"classes/AsyncRecordsProvider.html":{}}}],["providerfactory",{"_index":3275,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["providers",{"_index":375,"title":{},"body":{"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"modules/BsHeatmapModule.html":{},"modules/BsTimelineModule.html":{},"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"modules/FinanceModule.html":{},"modules/FusionChartsModule.html":{},"modules/GoogleMapsModule.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"modules/NetworkModule.html":{},"interfaces/NetworkProvider.html":{},"modules/NgxChartsModule.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/VisEvent.html":{},"modules/VisTimelineModule.html":{},"index.html":{}}}],["providersactionlist",{"_index":3074,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["providerssubscription",{"_index":3016,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["providing",{"_index":1208,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{}}}],["public",{"_index":138,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"components/MapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"components/ResultTimeline.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/VisEvent.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["q",{"_index":1400,"title":{},"body":{"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/DynamicNodeType.html":{}}}],["queries",{"_index":1345,"title":{},"body":{"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["queries.filter(q",{"_index":1399,"title":{},"body":{"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/DynamicNodeType.html":{}}}],["query",{"_index":47,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AsyncRecordsProvider.html":{},"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"miscellaneous/functions.html":{}}}],["query.action",{"_index":155,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["query.addselect(`${ccaggregation.column}:[${this.formatdayrequest(range[0])}..${this.formatdayrequest(range[1",{"_index":2560,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["query.addselect(this.context.exprbuilder.makeexpr(sourcenode.type.field",{"_index":166,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{}}}],["query.aggregations",{"_index":157,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["query.aggregations[type.aggregation",{"_index":159,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{}}}],["query.select",{"_index":2591,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["query|undefined",{"_index":1409,"title":{},"body":{"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/DynamicNodeType.html":{}}}],["r",{"_index":1990,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["r.$selected",{"_index":2541,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["r.id",{"_index":2536,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["r.records.length",{"_index":1445,"title":{},"body":{"interfaces/DynamicNodeType.html":{}}}],["r.records[0",{"_index":1446,"title":{},"body":{"interfaces/DynamicNodeType.html":{}}}],["r.title",{"_index":2547,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["r[this.latitudefield",{"_index":1929,"title":{},"body":{"components/MapComponent.html":{}}}],["r[this.moneyvaluecolumn]?.foreach((item",{"_index":2087,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{}}}],["radius",{"_index":590,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsNodeInfoCard.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/NodeData.html":{}}}],["range",{"_index":2415,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["range([0",{"_index":849,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["range([4",{"_index":2009,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{}}}],["range([this.innerheight",{"_index":2007,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["range(d3.schemecategory10",{"_index":2011,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{}}}],["range(d3[this.colorscheme][this.buckets",{"_index":860,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["range(this.x.range",{"_index":2868,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["range(this.xt.range",{"_index":2870,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["range).pipe",{"_index":2523,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["range).subscribe",{"_index":2506,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["range[0",{"_index":2655,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["range[1",{"_index":2572,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["rangechange",{"_index":2694,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["raw",{"_index":736,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["rawdata",{"_index":211,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{}}}],["rawdata.directed",{"_index":236,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{}}}],["rawdata.directed[i",{"_index":237,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{}}}],["rawdata.fieldvalue",{"_index":241,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{}}}],["rawdata.relations",{"_index":234,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{}}}],["rawdata.relations[i",{"_index":235,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{}}}],["rawvalue",{"_index":1960,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{}}}],["rawvalue.split",{"_index":2151,"title":{},"body":{"interfaces/MoneyDatum.html":{}}}],["re",{"_index":1459,"title":{},"body":{"interfaces/DynamicNodeType.html":{}}}],["reactiveformsmodule",{"_index":992,"title":{},"body":{"modules/BsHeatmapModule.html":{},"modules/BsTimelineModule.html":{},"modules/NetworkModule.html":{}}}],["read",{"_index":1988,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["read/write",{"_index":1984,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["readable",{"_index":1498,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["readonly",{"_index":135,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/VisEvent.html":{}}}],["rebuild",{"_index":1382,"title":{},"body":{"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["rebuilds",{"_index":1379,"title":{},"body":{"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/VisEvent.html":{}}}],["recomputed",{"_index":2418,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["recomputes",{"_index":2142,"title":{},"body":{"interfaces/MoneyDatum.html":{}}}],["record",{"_index":384,"title":{},"body":{"classes/AsyncRecordsProvider.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/DynamicNodeType.html":{},"components/MapComponent.html":{},"interfaces/MoneyDatum.html":{},"interfaces/RecordNode.html":{},"components/ResultTimeline.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"miscellaneous/functions.html":{}}}],["record.$selected",{"_index":1714,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["record.id",{"_index":1198,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{}}}],["record.title",{"_index":1201,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{}}}],["record?.[this.moneycolumn]?.foreach(money",{"_index":2148,"title":{},"body":{"interfaces/MoneyDatum.html":{}}}],["record['title",{"_index":1953,"title":{},"body":{"components/MapComponent.html":{}}}],["record[\\'title",{"_index":1954,"title":{},"body":{"components/MapComponent.html":{}}}],["record[this.appservice.getcolumnalias(this.appservice.getcolumn(this.data.column",{"_index":1717,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["recordclicked",{"_index":1859,"title":{},"body":{"components/MapComponent.html":{},"interfaces/MoneyDatum.html":{}}}],["recorddata",{"_index":1215,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{}}}],["recorddata.foreach((value,i",{"_index":1222,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{}}}],["recordnode",{"_index":1169,"title":{"interfaces/RecordNode.html":{}},"body":{"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{},"coverage.html":{}}}],["recordnode).record",{"_index":1328,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{}}}],["recordnode.record",{"_index":1262,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{}}}],["records",{"_index":326,"title":{},"body":{"classes/AsyncRecordsProvider.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/DynamicNodeType.html":{},"components/MapComponent.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["records.length",{"_index":1192,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{}}}],["records.map(record",{"_index":1196,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{}}}],["recordsprovider",{"_index":332,"title":{},"body":{"classes/AsyncRecordsProvider.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{},"coverage.html":{}}}],["recordsprovider:256",{"_index":379,"title":{},"body":{"classes/AsyncRecordsProvider.html":{}}}],["recordsprovider:269",{"_index":395,"title":{},"body":{"classes/AsyncRecordsProvider.html":{}}}],["recordsprovider:296",{"_index":404,"title":{},"body":{"classes/AsyncRecordsProvider.html":{}}}],["recordsprovider:319",{"_index":393,"title":{},"body":{"classes/AsyncRecordsProvider.html":{}}}],["recordsprovider:331",{"_index":380,"title":{},"body":{"classes/AsyncRecordsProvider.html":{}}}],["recordsprovider:68",{"_index":356,"title":{},"body":{"classes/AsyncRecordsProvider.html":{}}}],["recordsproviderdemo",{"_index":3246,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["recordsproviderdemo(providerfactory",{"_index":3336,"title":{},"body":{"miscellaneous/functions.html":{}}}],["recordsproviders",{"_index":327,"title":{},"body":{"classes/AsyncRecordsProvider.html":{}}}],["record|undefined",{"_index":1458,"title":{},"body":{"interfaces/DynamicNodeType.html":{}}}],["recreate",{"_index":2865,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["rect",{"_index":971,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["rectangle",{"_index":2774,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["red",{"_index":2684,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["redraw",{"_index":2115,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["redrawing",{"_index":2758,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["referencing",{"_index":150,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{}}}],["reflect",{"_index":486,"title":{},"body":{"classes/BaseProvider.html":{}}}],["reformat",{"_index":1750,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["refresh",{"_index":2458,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{}}}],["refreshaction",{"_index":3011,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["refreshed",{"_index":3338,"title":{},"body":{"miscellaneous/functions.html":{}}}],["refreshnodeoptions(node",{"_index":1462,"title":{},"body":{"interfaces/DynamicNodeType.html":{}}}],["register",{"_index":3089,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["relation",{"_index":233,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/BaseProvider.html":{},"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{}}}],["relations",{"_index":27,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{},"miscellaneous/functions.html":{}}}],["relative",{"_index":946,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["relativex",{"_index":918,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["relevant",{"_index":1693,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["remaining",{"_index":1565,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["remove",{"_index":888,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{}}}],["removed",{"_index":1384,"title":{},"body":{"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["removeedge(id",{"_index":1646,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["removeedges",{"_index":2188,"title":{},"body":{"classes/NetworkDataset.html":{}}}],["removeedges(ids",{"_index":1560,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["removenode(id",{"_index":1644,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["removenodes(ids",{"_index":1555,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["removes",{"_index":1564,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["rendered",{"_index":1506,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{},"miscellaneous/functions.html":{}}}],["rendering",{"_index":1152,"title":{},"body":{"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"components/NgxChart.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["reorganize",{"_index":2903,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["replaysubject",{"_index":2390,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["replaysubject(1",{"_index":2475,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["representing",{"_index":1471,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["repulsion",{"_index":3150,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["repulsioncontrol",{"_index":3141,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["repulsioncontrol.value",{"_index":3159,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["repulsionpref",{"_index":3179,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["required",{"_index":88,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"components/BsHeatmapComponent.html":{}}}],["res",{"_index":1407,"title":{},"body":{"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{}}}],["res.results",{"_index":1405,"title":{},"body":{"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{}}}],["res.results.map(r",{"_index":1444,"title":{},"body":{"interfaces/DynamicNodeType.html":{}}}],["reset",{"_index":365,"title":{},"body":{"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"modules/BsHeatmapModule.html":{},"modules/BsTimelineModule.html":{},"modules/FinanceModule.html":{},"modules/FusionChartsModule.html":{},"modules/GoogleMapsModule.html":{},"modules/NetworkModule.html":{},"modules/NgxChartsModule.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"modules/VisTimelineModule.html":{},"index.html":{}}}],["resetaction",{"_index":336,"title":{},"body":{"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{}}}],["resets",{"_index":3036,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["resize",{"_index":2012,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["resolution",{"_index":2642,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["respond",{"_index":776,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["responds",{"_index":2907,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["rest",{"_index":762,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["result",{"_index":321,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"components/BsEdgeInfoCard.html":{},"components/BsHeatmapComponent.html":{},"modules/BsHeatmapModule.html":{},"components/BsNodeInfoCard.html":{},"modules/BsTimelineModule.html":{},"components/BsTooltipComponent.html":{},"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"modules/FinanceModule.html":{},"modules/FusionChartsModule.html":{},"modules/GoogleMapsModule.html":{},"interfaces/HeatmapItem.html":{},"components/MapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"modules/NetworkModule.html":{},"interfaces/NetworkProvider.html":{},"components/NgxChart.html":{},"modules/NgxChartsModule.html":{},"interfaces/Node.html":{},"interfaces/NodeData.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"components/ResultTimeline.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{},"modules/VisTimelineModule.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["resulting",{"_index":402,"title":{},"body":{"classes/AsyncRecordsProvider.html":{}}}],["results",{"_index":178,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"components/BsEdgeInfoCard.html":{},"components/BsHeatmapComponent.html":{},"modules/BsHeatmapModule.html":{},"components/BsNodeInfoCard.html":{},"modules/BsTimelineModule.html":{},"components/BsTooltipComponent.html":{},"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"modules/FinanceModule.html":{},"modules/FusionChartsModule.html":{},"modules/GoogleMapsModule.html":{},"interfaces/HeatmapItem.html":{},"components/MapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"modules/NetworkModule.html":{},"interfaces/NetworkProvider.html":{},"components/NgxChart.html":{},"modules/NgxChartsModule.html":{},"interfaces/Node.html":{},"interfaces/NodeData.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"components/ResultTimeline.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{},"modules/VisTimelineModule.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["results.aggregations[0",{"_index":2564,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["results.records[0",{"_index":1455,"title":{},"body":{"interfaces/DynamicNodeType.html":{}}}],["resulttimeline",{"_index":683,"title":{"components/ResultTimeline.html":{}},"body":{"components/BsEdgeInfoCard.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"components/BsTooltipComponent.html":{},"components/FacetNgxChart.html":{},"components/MapComponent.html":{},"components/NgxChart.html":{},"components/ResultTimeline.html":{},"modules/VisTimelineModule.html":{},"coverage.html":{},"index.html":{}}}],["retrieve",{"_index":369,"title":{},"body":{"classes/AsyncRecordsProvider.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["retrieves",{"_index":245,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/BaseProvider.html":{}}}],["return",{"_index":109,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/BaseProvider.html":{},"components/BsEdgeInfoCard.html":{},"components/BsNodeInfoCard.html":{},"components/BsTooltipComponent.html":{},"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"components/NgxChart.html":{},"interfaces/Node.html":{},"interfaces/NodeData.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{}}}],["returned",{"_index":17,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{}}}],["returns",{"_index":370,"title":{},"body":{"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"components/BsEdgeInfoCard.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"components/MapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"components/NgxChart.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"components/ResultTimeline.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"miscellaneous/functions.html":{}}}],["rextent",{"_index":2067,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{}}}],["rextent[0",{"_index":2072,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{}}}],["rextent[1",{"_index":2073,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{}}}],["rgb(0,0,0,0.125",{"_index":1071,"title":{},"body":{"components/BsTooltipComponent.html":{}}}],["right",{"_index":582,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"components/BsTooltipComponent.html":{},"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/HeatmapItem.html":{},"components/MapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/NodeData.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{}}}],["right.px",{"_index":1090,"title":{},"body":{"components/BsTooltipComponent.html":{}}}],["rnode",{"_index":1412,"title":{},"body":{"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{}}}],["rnode.record",{"_index":1413,"title":{},"body":{"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{}}}],["road",{"_index":3408,"title":{},"body":{"miscellaneous/variables.html":{}}}],["road.highway",{"_index":3411,"title":{},"body":{"miscellaneous/variables.html":{}}}],["rolling",{"_index":1743,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["rotate",{"_index":893,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{},"miscellaneous/variables.html":{}}}],["rxjs",{"_index":457,"title":{},"body":{"classes/BaseProvider.html":{},"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"components/NgxChart.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{}}}],["rxjs/operators",{"_index":2391,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["s",{"_index":2812,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["s.dates",{"_index":2807,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["s.primary",{"_index":2803,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["same",{"_index":389,"title":{},"body":{"classes/AsyncRecordsProvider.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{}}}],["sample",{"_index":3237,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["saved",{"_index":3173,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["scale",{"_index":917,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/HeatmapItem.html":{},"components/MapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{}}}],["scaleextent",{"_index":2838,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["scaleextent([scaleextent/this.maxzoomdays",{"_index":2844,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["scaleextent/this.minzoomdays",{"_index":2845,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["scalefactor",{"_index":518,"title":{},"body":{"classes/BaseProvider.html":{}}}],["scales",{"_index":827,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["scaling",{"_index":2437,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["scheme",{"_index":824,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"interfaces/HeatmapItem.html":{},"components/NgxChart.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["schemeblues",{"_index":732,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["scratch",{"_index":1383,"title":{},"body":{"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/DynamicNodeType.html":{}}}],["search",{"_index":412,"title":{},"body":{"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"components/MapComponent.html":{},"interfaces/MoneyDatum.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"miscellaneous/functions.html":{}}}],["search?action=select&resultid=\"+resultid+\"&item=%22tag%3b\"+settings.date_column+\"%3b\"+date+\"%3b\"+date+\"%22",{"_index":2374,"title":{},"body":{"components/ResultTimeline.html":{}}}],["searches",{"_index":2565,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["searchinactive",{"_index":176,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AsyncRecordsProvider.html":{},"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["searchservice",{"_index":1476,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"components/MapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/VisEvent.html":{},"miscellaneous/functions.html":{}}}],["secondaryedgetypes",{"_index":1367,"title":{},"body":{"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{}}}],["see",{"_index":1481,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{},"miscellaneous/variables.html":{}}}],["seeing",{"_index":1151,"title":{},"body":{"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"components/NgxChart.html":{}}}],["select",{"_index":148,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/BaseProvider.html":{},"components/BsEdgeInfoCard.html":{},"components/BsNodeInfoCard.html":{},"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"interfaces/NetworkContext.html":{},"components/NgxChart.html":{},"interfaces/NodeData.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/VisEvent.html":{}}}],["select(node",{"_index":1514,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/VisEvent.html":{}}}],["selected",{"_index":819,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"interfaces/HeatmapItem.html":{},"components/MapComponent.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/VisEvent.html":{},"miscellaneous/functions.html":{}}}],["selectedcolor",{"_index":1662,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["selectedge(edge",{"_index":3112,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["selecteditems",{"_index":1983,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{}}}],["selectedrecordsprovider",{"_index":3282,"title":{},"body":{"coverage.html":{}}}],["selectedrecordsproviderdemo",{"_index":3247,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["selectedrecordsproviderdemo(providerfactory",{"_index":3337,"title":{},"body":{"miscellaneous/functions.html":{}}}],["selectedvalues",{"_index":1665,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["selectfield",{"_index":1669,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["selecting",{"_index":1910,"title":{},"body":{"components/MapComponent.html":{}}}],["selection",{"_index":1698,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"components/MapComponent.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{}}}],["selection[i",{"_index":2879,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["selectionchange",{"_index":1670,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["selectionchanged",{"_index":2755,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["selections",{"_index":1510,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{}}}],["selectionservice",{"_index":1652,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["selectnode(node",{"_index":3109,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["selector",{"_index":576,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"components/BsTooltipComponent.html":{},"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"interfaces/HeatmapItem.html":{},"components/MapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"components/NgxChart.html":{},"interfaces/NodeData.html":{},"components/ResultTimeline.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{}}}],["selects",{"_index":769,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{},"components/MapComponent.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["self",{"_index":920,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["self.append('svg:title').text(fulltext",{"_index":930,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["self.text",{"_index":924,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["self.text(text",{"_index":929,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["semantic",{"_index":1606,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["separator",{"_index":301,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{}}}],["series",{"_index":2621,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{}}}],["server",{"_index":129,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AsyncRecordsProvider.html":{},"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"miscellaneous/functions.html":{}}}],["service",{"_index":98,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/VisEvent.html":{},"miscellaneous/functions.html":{}}}],["services",{"_index":37,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"components/MapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"components/ResultTimeline.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{}}}],["set",{"_index":1143,"title":{},"body":{"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"components/NgxChart.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{}}}],["set(this.data.map(value",{"_index":837,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["setdefaults",{"_index":3168,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["setquery",{"_index":338,"title":{},"body":{"classes/AsyncRecordsProvider.html":{}}}],["setquery(query",{"_index":372,"title":{},"body":{"classes/AsyncRecordsProvider.html":{}}}],["sets",{"_index":374,"title":{},"body":{"classes/AsyncRecordsProvider.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/VisEvent.html":{}}}],["settings",{"_index":2997,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["shapes",{"_index":2700,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["shift",{"_index":2660,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["shiftdate(date",{"_index":2665,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["show",{"_index":1178,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["showall",{"_index":1175,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{}}}],["showing",{"_index":2136,"title":{},"body":{"interfaces/MoneyDatum.html":{},"miscellaneous/functions.html":{}}}],["shown",{"_index":406,"title":{},"body":{"classes/AsyncRecordsProvider.html":{},"components/BsHeatmapComponent.html":{},"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{}}}],["shows",{"_index":1934,"title":{},"body":{"components/MapComponent.html":{}}}],["showtooltip",{"_index":1981,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{}}}],["side",{"_index":2773,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["simple",{"_index":1433,"title":{},"body":{"interfaces/DynamicNodeType.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["simplechange",{"_index":2689,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["simplechanges",{"_index":1096,"title":{},"body":{"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"components/MapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"components/NgxChart.html":{},"components/ResultTimeline.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{}}}],["simply",{"_index":2822,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["simultaneous",{"_index":1344,"title":{},"body":{"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/DynamicNodeType.html":{}}}],["sinequa",{"_index":1228,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{}}}],["sinequa/analytics/heatmap",{"_index":1057,"title":{},"body":{"modules/BsTimelineModule.html":{},"modules/FinanceModule.html":{}}}],["sinequa/components",{"_index":3298,"title":{},"body":{"dependencies.html":{}}}],["sinequa/components/action",{"_index":46,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/BaseProvider.html":{},"modules/BsHeatmapModule.html":{},"modules/BsTimelineModule.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"modules/FinanceModule.html":{},"modules/GoogleMapsModule.html":{},"components/MapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"modules/NetworkModule.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/VisEvent.html":{}}}],["sinequa/components/collapse",{"_index":2215,"title":{},"body":{"modules/NetworkModule.html":{}}}],["sinequa/components/facet",{"_index":1656,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"modules/GoogleMapsModule.html":{},"components/MapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"modules/NetworkModule.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/VisEvent.html":{}}}],["sinequa/components/search",{"_index":1477,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"components/MapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/VisEvent.html":{}}}],["sinequa/components/selection",{"_index":997,"title":{},"body":{"modules/BsHeatmapModule.html":{},"modules/BsTimelineModule.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"modules/FusionChartsModule.html":{},"modules/GoogleMapsModule.html":{},"interfaces/MoneyCloudDatum.html":{},"modules/NgxChartsModule.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["sinequa/components/user",{"_index":2996,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["sinequa/components/utils",{"_index":1056,"title":{},"body":{"modules/BsTimelineModule.html":{},"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"modules/FinanceModule.html":{},"modules/FusionChartsModule.html":{},"modules/NetworkModule.html":{},"components/NgxChart.html":{},"modules/NgxChartsModule.html":{}}}],["sinequa/core/app",{"_index":49,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AsyncRecordsProvider.html":{},"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"components/MapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/VisEvent.html":{}}}],["sinequa/core/base",{"_index":51,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/BaseProvider.html":{},"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"interfaces/MoneyDatum.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"components/NgxChart.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/VisEvent.html":{}}}],["sinequa/core/intl",{"_index":995,"title":{},"body":{"modules/BsHeatmapModule.html":{},"modules/BsTimelineModule.html":{},"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"modules/FinanceModule.html":{},"modules/FusionChartsModule.html":{},"modules/GoogleMapsModule.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"modules/NetworkModule.html":{},"interfaces/NetworkProvider.html":{},"components/NgxChart.html":{},"modules/NgxChartsModule.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{},"modules/VisTimelineModule.html":{}}}],["sinequa/core/web",{"_index":36,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"components/MapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/RecordNode.html":{},"components/ResultTimeline.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{}}}],["sinequacomponentsmodule",{"_index":3290,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["single",{"_index":1504,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"components/MapComponent.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/VisEvent.html":{}}}],["size",{"_index":487,"title":{},"body":{"classes/BaseProvider.html":{},"components/BsHeatmapComponent.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{}}}],["sizeopened",{"_index":2693,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["skip",{"_index":160,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{}}}],["skip/count",{"_index":1501,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["skips",{"_index":136,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{}}}],["slantlabel",{"_index":3423,"title":{},"body":{"miscellaneous/variables.html":{}}}],["solid",{"_index":1067,"title":{},"body":{"components/BsTooltipComponent.html":{}}}],["somehow",{"_index":3054,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["sort",{"_index":1037,"title":{},"body":{"components/BsNodeInfoCard.html":{},"interfaces/NodeData.html":{}}}],["sort((a,b",{"_index":2935,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["source",{"_index":4,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"components/BsEdgeInfoCard.html":{},"components/BsHeatmapComponent.html":{},"modules/BsHeatmapModule.html":{},"components/BsNodeInfoCard.html":{},"modules/BsTimelineModule.html":{},"components/BsTooltipComponent.html":{},"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"modules/FinanceModule.html":{},"modules/FusionChartsModule.html":{},"modules/GoogleMapsModule.html":{},"interfaces/HeatmapItem.html":{},"components/MapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"modules/NetworkModule.html":{},"interfaces/NetworkProvider.html":{},"components/NgxChart.html":{},"modules/NgxChartsModule.html":{},"interfaces/Node.html":{},"interfaces/NodeData.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"components/ResultTimeline.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{},"modules/VisTimelineModule.html":{},"miscellaneous/typealiases.html":{}}}],["sourcecsv",{"_index":1233,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{}}}],["sourcenode",{"_index":146,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{}}}],["sourcenode.type.field",{"_index":165,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{}}}],["sourcenodes",{"_index":1380,"title":{},"body":{"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/DynamicNodeType.html":{}}}],["sourcenodes.filter(node",{"_index":1392,"title":{},"body":{"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/DynamicNodeType.html":{}}}],["sourcenodes.find(node",{"_index":1389,"title":{},"body":{"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/DynamicNodeType.html":{}}}],["sourcenodes.map(node",{"_index":1394,"title":{},"body":{"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/DynamicNodeType.html":{}}}],["sourceproviders",{"_index":1369,"title":{},"body":{"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/DynamicNodeType.html":{}}}],["sourcestr",{"_index":1230,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{}}}],["south",{"_index":1945,"title":{},"body":{"components/MapComponent.html":{}}}],["special",{"_index":1249,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{}}}],["specific",{"_index":282,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/VisEvent.html":{}}}],["specifically",{"_index":3319,"title":{},"body":{"miscellaneous/functions.html":{}}}],["specified",{"_index":1351,"title":{},"body":{"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{}}}],["specifying",{"_index":91,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{}}}],["split",{"_index":2152,"title":{},"body":{"interfaces/MoneyDatum.html":{}}}],["spring",{"_index":3154,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["springconstant",{"_index":3148,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["springconstantcontrol",{"_index":3137,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["springconstantcontrol.value",{"_index":3157,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["springconstantpref",{"_index":3177,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["springlength",{"_index":3147,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["springlengthcontrol",{"_index":3135,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["springlengthcontrol.value",{"_index":3155,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["springlengthpref",{"_index":3175,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["sq",{"_index":577,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"components/BsTooltipComponent.html":{},"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"interfaces/HeatmapItem.html":{},"components/MapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"components/NgxChart.html":{},"interfaces/NodeData.html":{},"components/ResultTimeline.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{}}}],["sqmessage",{"_index":636,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsNodeInfoCard.html":{}}}],["sqmessage:{values",{"_index":934,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["square",{"_index":1677,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"components/MapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/VisEvent.html":{}}}],["sqvalue",{"_index":2256,"title":{},"body":{"components/NgxChart.html":{}}}],["sr.1",{"_index":3306,"title":{},"body":{"dependencies.html":{}}}],["standard",{"_index":471,"title":{},"body":{"classes/BaseProvider.html":{},"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["star",{"_index":1467,"title":{},"body":{"interfaces/DynamicNodeType.html":{}}}],["start",{"_index":897,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{},"components/ResultTimeline.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["state",{"_index":392,"title":{},"body":{"classes/AsyncRecordsProvider.html":{},"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/VisEvent.html":{}}}],["statement",{"_index":2751,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["statements",{"_index":3190,"title":{},"body":{"coverage.html":{}}}],["static",{"_index":1114,"title":{},"body":{"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"components/NgxChart.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{}}}],["statistical",{"_index":1605,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["steve",{"_index":3362,"title":{},"body":{"miscellaneous/functions.html":{}}}],["stop",{"_index":2795,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["store",{"_index":56,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/DynamicNodeType.html":{}}}],["stored",{"_index":1406,"title":{},"body":{"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/VisEvent.html":{}}}],["stores",{"_index":132,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{}}}],["storing",{"_index":1867,"title":{},"body":{"components/MapComponent.html":{}}}],["stream",{"_index":1016,"title":{},"body":{"components/BsNodeInfoCard.html":{},"interfaces/NodeData.html":{}}}],["strength",{"_index":1472,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["string",{"_index":32,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"components/NgxChart.html":{},"interfaces/Node.html":{},"interfaces/NodeData.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"components/ResultTimeline.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{}}}],["strings",{"_index":808,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["stroke",{"_index":2686,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["structural",{"_index":386,"title":{},"body":{"classes/AsyncRecordsProvider.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{},"miscellaneous/functions.html":{}}}],["structuraldisplaytype",{"_index":1180,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{},"miscellaneous/typealiases.html":{}}}],["structuraledgetype",{"_index":349,"title":{"interfaces/StructuralEdgeType.html":{}},"body":{"classes/AsyncRecordsProvider.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["structuraledgetype).display",{"_index":1293,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{}}}],["structuraledgetype).field",{"_index":1182,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{}}}],["structuraltriggertype",{"_index":1174,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{},"miscellaneous/typealiases.html":{}}}],["structure",{"_index":10,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/VisEvent.html":{}}}],["structured",{"_index":1438,"title":{},"body":{"interfaces/DynamicNodeType.html":{}}}],["structures",{"_index":1512,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["style",{"_index":1066,"title":{},"body":{"components/BsTooltipComponent.html":{},"components/MapComponent.html":{}}}],["style(\"text",{"_index":895,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["style.ts",{"_index":3205,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["stylers",{"_index":3385,"title":{},"body":{"miscellaneous/variables.html":{}}}],["styles",{"_index":570,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"components/BsTooltipComponent.html":{},"components/MapComponent.html":{},"components/NgxChart.html":{},"interfaces/NodeData.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{}}}],["styleurls",{"_index":689,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"components/NgxChart.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{}}}],["subject",{"_index":423,"title":{},"body":{"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["subject.error(err",{"_index":2510,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["subject.next(config",{"_index":2493,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["subject.next(d",{"_index":2507,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["subject.next(t",{"_index":2518,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["subject.next(this.getrecordsasevents(config",{"_index":2514,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["subscribe",{"_index":1747,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["subscribe(datasets",{"_index":3045,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["subscribe(results",{"_index":434,"title":{},"body":{"classes/AsyncRecordsProvider.html":{},"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{}}}],["subscription",{"_index":1097,"title":{},"body":{"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"components/NgxChart.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{}}}],["subscriptions",{"_index":1509,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["super",{"_index":1671,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"components/MapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/VisEvent.html":{}}}],["super(name",{"_index":141,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AsyncRecordsProvider.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{}}}],["super.getnodeactions(node",{"_index":308,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{}}}],["super.getprovideractions",{"_index":287,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{}}}],["support",{"_index":86,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"modules.html":{}}}],["supported",{"_index":1876,"title":{},"body":{"components/MapComponent.html":{}}}],["svg",{"_index":909,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{},"modules.html":{}}}],["swap",{"_index":1595,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["swimlane/ngx",{"_index":1102,"title":{},"body":{"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"components/NgxChart.html":{},"modules/NgxChartsModule.html":{},"dependencies.html":{}}}],["switch(resolution",{"_index":2666,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["switch(type",{"_index":1137,"title":{},"body":{"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"components/NgxChart.html":{}}}],["switching",{"_index":2403,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["sync",{"_index":3024,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["synchronously",{"_index":246,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{}}}],["syncing",{"_index":3163,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["syntax",{"_index":765,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["system",{"_index":913,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["systematically",{"_index":75,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"miscellaneous/typealiases.html":{}}}],["t",{"_index":875,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["table",{"_index":3296,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":3295,"title":{},"body":{"coverage.html":{}}}],["take",{"_index":1448,"title":{},"body":{"interfaces/DynamicNodeType.html":{},"interfaces/VisEvent.html":{}}}],["taken",{"_index":2852,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["takes",{"_index":1590,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["taking",{"_index":1612,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["talking",{"_index":3359,"title":{},"body":{"miscellaneous/functions.html":{}}}],["tap",{"_index":3101,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["target",{"_index":1239,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{}}}],["tasks",{"_index":3075,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["temp",{"_index":1596,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["template",{"_index":569,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"components/BsTooltipComponent.html":{},"components/FacetNgxChart.html":{},"interfaces/HeatmapItem.html":{},"components/MapComponent.html":{},"components/NgxChart.html":{},"components/ResultTimeline.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{}}}],["templateref",{"_index":2691,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{}}}],["templateurl",{"_index":594,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"interfaces/HeatmapItem.html":{},"components/MapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"components/NgxChart.html":{},"interfaces/NodeData.html":{},"components/ResultTimeline.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{}}}],["test",{"_index":1306,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{}}}],["tests",{"_index":121,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{},"miscellaneous/functions.html":{}}}],["text",{"_index":297,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/BaseProvider.html":{},"components/BsEdgeInfoCard.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"interfaces/HeatmapItem.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{},"miscellaneous/functions.html":{}}}],["text(d",{"_index":2881,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["text.length",{"_index":927,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["text.slice(0",{"_index":928,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["text:hover",{"_index":954,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["textlength",{"_index":922,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["theme",{"_index":720,"title":{},"body":{"components/BsHeatmapComponent.html":{},"components/BsTooltipComponent.html":{},"modules/FusionChartsModule.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"miscellaneous/variables.html":{}}}],["themselves",{"_index":3328,"title":{},"body":{"miscellaneous/functions.html":{}}}],["there's",{"_index":2963,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this._actions",{"_index":3060,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["this._actions.concat(actions",{"_index":3071,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["this._actions.push(providersactionlist",{"_index":3079,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["this._actions.push(this.clearfilters",{"_index":3067,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["this._actions.push(this.refreshaction",{"_index":3080,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["this._networkinitialized",{"_index":3087,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["this._selectededge",{"_index":3113,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["this._selectednode",{"_index":3110,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["this.activateaction",{"_index":458,"title":{},"body":{"classes/BaseProvider.html":{}}}],["this.active",{"_index":300,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/BaseProvider.html":{}}}],["this.addaggregationnodes(item",{"_index":195,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{}}}],["this.addcustomedge(node",{"_index":1223,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{}}}],["this.adddynamicedges([node",{"_index":1422,"title":{},"body":{"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{}}}],["this.adddynamicedges(sourcenodes",{"_index":1404,"title":{},"body":{"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{}}}],["this.addedge(edge",{"_index":1551,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["this.addedge(edges",{"_index":1552,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["this.addnode(node",{"_index":1546,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["this.addnode(nodes",{"_index":1547,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["this.addrecordnodes(records",{"_index":1193,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{}}}],["this.addstructuraledge(data",{"_index":1232,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{}}}],["this.addstructuraledges(node",{"_index":1204,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{}}}],["this.aggregation",{"_index":1684,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["this.aggregations",{"_index":1686,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["this.appservice.getccaggregation(aggregation",{"_index":2601,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["this.appservice.getccaggregation(aggregationname",{"_index":2550,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["this.appservice.parseexpr(select.expression",{"_index":2461,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["this.area",{"_index":2725,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.area.y0(this.y(0",{"_index":2744,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.attached",{"_index":1156,"title":{},"body":{"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"components/NgxChart.html":{}}}],["this.bounds",{"_index":1952,"title":{},"body":{"components/MapComponent.html":{}}}],["this.bounds.getnortheast().lat",{"_index":1921,"title":{},"body":{"components/MapComponent.html":{}}}],["this.bounds.getnortheast().lng",{"_index":1925,"title":{},"body":{"components/MapComponent.html":{}}}],["this.bounds.getsouthwest().lat",{"_index":1919,"title":{},"body":{"components/MapComponent.html":{}}}],["this.bounds.getsouthwest().lng",{"_index":1923,"title":{},"body":{"components/MapComponent.html":{}}}],["this.brush",{"_index":2769,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.brush$.call(this.brushbehavior",{"_index":2746,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.brush$.call(this.brushbehavior.move",{"_index":2861,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.brush$.selectall(\".grip",{"_index":2777,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.brushbehavior",{"_index":2734,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.brushbehavior.extent([[0",{"_index":2745,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.brushbehavior.move(this.brush",{"_index":2901,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.brushing",{"_index":2739,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.brushselection",{"_index":2884,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.brushselection?.sort((a,b)=>a",{"_index":2889,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.buildchart",{"_index":873,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["this.buildchart(!!this.transition",{"_index":864,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["this.c",{"_index":2010,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{}}}],["this.c.domain(this.data.map(d",{"_index":2080,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{}}}],["this.categories",{"_index":2082,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{}}}],["this.cdref.detectchanges",{"_index":2033,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.chart",{"_index":1122,"title":{},"body":{"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"components/NgxChart.html":{}}}],["this.chart.update",{"_index":1123,"title":{},"body":{"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"components/NgxChart.html":{}}}],["this.charttype",{"_index":1728,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["this.checkdatachanges(changes[\"data",{"_index":2762,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.checkselectionchange(this.selection",{"_index":2863,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.clearfilters",{"_index":1674,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"components/MapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/VisEvent.html":{}}}],["this.closed",{"_index":611,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsNodeInfoCard.html":{},"interfaces/NodeData.html":{}}}],["this.closewindow",{"_index":1930,"title":{},"body":{"components/MapComponent.html":{}}}],["this.color",{"_index":858,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["this.colors",{"_index":1731,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["this.colors.length",{"_index":1732,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["this.colors[index",{"_index":1742,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["this.colorscheme",{"_index":1730,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["this.context",{"_index":249,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"interfaces/VisEvent.html":{}}}],["this.context.appservice.formatservice.formatfieldvalue({value",{"_index":498,"title":{},"body":{"classes/BaseProvider.html":{}}}],["this.context.appservice.getcolumn(type.field",{"_index":496,"title":{},"body":{"classes/BaseProvider.html":{}}}],["this.context.appservice.parseexpr(item.value.tostring",{"_index":228,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{}}}],["this.context.edges",{"_index":3056,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["this.context.edges.clear",{"_index":3039,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["this.context.exprbuilder.concatandexpr([exprfrom",{"_index":565,"title":{},"body":{"classes/BaseProvider.html":{}}}],["this.context.exprbuilder.makeexpr(edge.type.field",{"_index":547,"title":{},"body":{"classes/BaseProvider.html":{}}}],["this.context.exprbuilder.makeexpr(node.type.field",{"_index":535,"title":{},"body":{"classes/BaseProvider.html":{}}}],["this.context.exprbuilder.makeexpr(nodefrom.type.field",{"_index":560,"title":{},"body":{"classes/BaseProvider.html":{}}}],["this.context.exprbuilder.makeexpr(nodeto.type.field",{"_index":563,"title":{},"body":{"classes/BaseProvider.html":{}}}],["this.context.intlservice.formatmessage(\"msg#network.actions.expandnode",{"_index":310,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/DynamicNodeType.html":{}}}],["this.context.intlservice.formatmessage(\"msg#network.actions.expandnodewith",{"_index":320,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{}}}],["this.context.intlservice.formatmessage(\"msg#network.actions.fetchmoreagg",{"_index":302,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{}}}],["this.context.intlservice.formatmessage(\"msg#network.actions.filtersearch",{"_index":534,"title":{},"body":{"classes/BaseProvider.html":{}}}],["this.context.intlservice.formatmessage(\"msg#network.actions.filtersearch2",{"_index":554,"title":{},"body":{"classes/BaseProvider.html":{}}}],["this.context.name",{"_index":3030,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["this.context.nodes.clear",{"_index":3038,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["this.context.searchservice.getmultipleresults(_queries",{"_index":1402,"title":{},"body":{"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/DynamicNodeType.html":{}}}],["this.context.searchservice.getresults(query",{"_index":175,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/DynamicNodeType.html":{}}}],["this.context.searchservice.getresults(this.query",{"_index":433,"title":{},"body":{"classes/AsyncRecordsProvider.html":{}}}],["this.context.searchservice.query",{"_index":154,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{}}}],["this.createchartoptions",{"_index":1764,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["this.createdatapoints(aggregation.items",{"_index":2625,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["this.createedge(this.edgetype",{"_index":1411,"title":{},"body":{"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{}}}],["this.createedge(type",{"_index":1261,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{}}}],["this.createexpandaction(type",{"_index":315,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{}}}],["this.createnode(this.nodetype",{"_index":1200,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{}}}],["this.createnode(type.nodetypes[1",{"_index":1244,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{}}}],["this.currentrange",{"_index":2451,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["this.currentrange[0",{"_index":2452,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["this.currentrange[1",{"_index":2455,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["this.currentselection",{"_index":2864,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.dampingpref",{"_index":3127,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["this.data",{"_index":833,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{}}}],["this.data.filter(value",{"_index":844,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["this.data.foreach(d",{"_index":2050,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{}}}],["this.data.items",{"_index":1706,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["this.data.length",{"_index":2794,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.data.push(datum",{"_index":2049,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{}}}],["this.datafiltered",{"_index":843,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["this.datapoints",{"_index":1704,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["this.datapoints.find(_datapoint",{"_index":1775,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["this.datapoints.findindex(datapoint",{"_index":1734,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["this.datapoints.push",{"_index":1707,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["this.dataset",{"_index":1385,"title":{},"body":{"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/DynamicNodeType.html":{}}}],["this.dataset.addnodes(node",{"_index":1203,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{}}}],["this.dataset.clear",{"_index":251,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/BaseProvider.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{}}}],["this.dataset.getadjacentedges(node.id",{"_index":1308,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{}}}],["this.dataset.getadjacentedges(node.id).foreach(e",{"_index":1319,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{}}}],["this.dataset.getconnectednodes(node.id",{"_index":276,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{}}}],["this.dataset.getnode(node.id",{"_index":1310,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{}}}],["this.dataset.getnode(this.getnodeid(this.nodetype",{"_index":1197,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{}}}],["this.dataset.hasnode(node.id",{"_index":1425,"title":{},"body":{"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{}}}],["this.dataset.merge(data",{"_index":243,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{}}}],["this.dataset.merge(dataset",{"_index":1284,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{}}}],["this.dates",{"_index":2317,"title":{},"body":{"components/ResultTimeline.html":{}}}],["this.debouncesync",{"_index":3161,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["this.drawgrips",{"_index":2748,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.drawxaxis",{"_index":2018,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.drawyaxis",{"_index":2015,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.edge.context.nodes.get(this.edge.from",{"_index":614,"title":{},"body":{"components/BsEdgeInfoCard.html":{}}}],["this.edge.context.nodes.get(this.edge.to",{"_index":616,"title":{},"body":{"components/BsEdgeInfoCard.html":{}}}],["this.edgeclicked.next",{"_index":3114,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["this.edgeclicked.subscribe((edge",{"_index":3021,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["this.edgeidx.clear",{"_index":1542,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["this.edgeidx.delete(id",{"_index":1647,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["this.edgeidx.get(id",{"_index":1525,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["this.edgeidx.has(id",{"_index":1521,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["this.edgeidx.set(edge.id",{"_index":1643,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["this.edgeseparator",{"_index":477,"title":{},"body":{"classes/BaseProvider.html":{}}}],["this.edgetype",{"_index":1397,"title":{},"body":{"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{}}}],["this.edgetype.getquery(node",{"_index":1396,"title":{},"body":{"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{}}}],["this.edgetype.nodetypes[0",{"_index":1376,"title":{},"body":{"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{}}}],["this.edgetype.trigger",{"_index":1424,"title":{},"body":{"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{}}}],["this.edgetypes.filter(type",{"_index":256,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{}}}],["this.edgetypes.foreach(type",{"_index":254,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{}}}],["this.edgetypes.length",{"_index":1316,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{}}}],["this.el.nativeelement",{"_index":915,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.eventclicked.next(event",{"_index":2619,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["this.events",{"_index":2318,"title":{},"body":{"components/ResultTimeline.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["this.events$[i",{"_index":2513,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["this.events$[i].next(this.getrecordsasevents(this.events[i",{"_index":2448,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["this.events.concat",{"_index":2934,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.events.findindex(e",{"_index":2444,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["this.events.foreach((config",{"_index":2512,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["this.events.map(_",{"_index":2481,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["this.expanded",{"_index":612,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsNodeInfoCard.html":{},"interfaces/NodeData.html":{}}}],["this.exprbuilder.concatandexpr",{"_index":1926,"title":{},"body":{"components/MapComponent.html":{}}}],["this.exprbuilder.concatorexpr(exprs",{"_index":2604,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["this.exprbuilder.makeexpr(this.moneycolumn",{"_index":2172,"title":{},"body":{"interfaces/MoneyDatum.html":{}}}],["this.exprbuilder.makeexpr(this.moneyvaluecolumn",{"_index":2119,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{}}}],["this.exprbuilder.makenumericalexpr(this.latitudefield",{"_index":1927,"title":{},"body":{"components/MapComponent.html":{}}}],["this.exprbuilder.makenumericalexpr(this.longitudefield",{"_index":1928,"title":{},"body":{"components/MapComponent.html":{}}}],["this.facetservice.addfiltersearch(this.getname",{"_index":1769,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["this.facetservice.clearfilterssearch(this.getname",{"_index":1679,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["this.facetservice.formatvalue(item",{"_index":1708,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["this.facetservice.getaggregation(aggregationname",{"_index":2551,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["this.facetservice.getaggregation(this.aggregation",{"_index":1759,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["this.facetservice.hasfiltered(this.getname",{"_index":1701,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["this.facetservice.itemfiltered(this.getname",{"_index":1772,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["this.facetservice.removefiltersearch(this.getname",{"_index":1770,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["this.fetchaggregation(aggregationname",{"_index":2554,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["this.fetchaggregations([type",{"_index":305,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{}}}],["this.fetchaggregations(types",{"_index":260,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{}}}],["this.filterarea",{"_index":1915,"title":{},"body":{"components/MapComponent.html":{}}}],["this.filteredcolor",{"_index":1739,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["this.fitbounds",{"_index":1936,"title":{},"body":{"components/MapComponent.html":{}}}],["this.fitnetwork",{"_index":3058,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["this.form",{"_index":3145,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["this.form.valuechanges.subscribe(_",{"_index":3152,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["this.formatdayrequest(selection[0",{"_index":2595,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["this.formatdayrequest(selection[1",{"_index":2596,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["this.formatservice.moneyformatter(datum.value",{"_index":2174,"title":{},"body":{"interfaces/MoneyDatum.html":{}}}],["this.formbuilder.group",{"_index":3146,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["this.fromnode",{"_index":613,"title":{},"body":{"components/BsEdgeInfoCard.html":{}}}],["this.georecords[0][this.latitudefield",{"_index":1944,"title":{},"body":{"components/MapComponent.html":{}}}],["this.georecords[0][this.longitudefield",{"_index":1941,"title":{},"body":{"components/MapComponent.html":{}}}],["this.getadjacentedges(neighbor.id).length",{"_index":1573,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["this.getadjacentedges(nodeid",{"_index":1579,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["this.getadjacentedges(nodeid).foreach(edge",{"_index":1567,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["this.getaggregation(config.aggregation",{"_index":2522,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["this.getaggregation(config.aggregation).pipe",{"_index":2529,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["this.getd3timeinterval(resolution",{"_index":2646,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["this.getdata(this.context",{"_index":465,"title":{},"body":{"classes/BaseProvider.html":{}}}],["this.getedge(e.id)?.visible",{"_index":1631,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["this.getedge(edge.id",{"_index":1608,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["this.getedgeid(fromnode",{"_index":512,"title":{},"body":{"classes/BaseProvider.html":{}}}],["this.getedges().filter(e",{"_index":1534,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["this.geteventaggregation(config",{"_index":2516,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["this.getitem(datapoint",{"_index":1767,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["this.getitem(this.datapoints[index",{"_index":1737,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["this.getname",{"_index":1762,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["this.getnode(e.from",{"_index":1580,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["this.getnode(edge.from",{"_index":1568,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["this.getnode(n.id)?.visible",{"_index":1629,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["this.getnode(node.id",{"_index":1591,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["this.getnodeid(type",{"_index":499,"title":{},"body":{"classes/BaseProvider.html":{}}}],["this.getnodes().filter(n",{"_index":1531,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["this.getnodevalue(node",{"_index":536,"title":{},"body":{"classes/BaseProvider.html":{}}}],["this.getnodevalue(nodefrom",{"_index":561,"title":{},"body":{"classes/BaseProvider.html":{}}}],["this.getnodevalue(nodeto",{"_index":564,"title":{},"body":{"classes/BaseProvider.html":{}}}],["this.getnodevalue(sourcenode",{"_index":167,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{}}}],["this.gettimeseries(agg",{"_index":2505,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["this.gettimeseries(bestaggregation",{"_index":2584,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["this.gravitypref",{"_index":3131,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["this.grips",{"_index":2776,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.grips$.append(\"path",{"_index":2785,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.grips$.append(\"text",{"_index":2787,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.grips$.attr(\"display",{"_index":2877,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.grips$.selectall(\"path\").attr(\"d",{"_index":2747,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.grips$.selectall('.grip",{"_index":2880,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.groupedevents",{"_index":2824,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.groupevents(5",{"_index":2825,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.hasnode(edge.to",{"_index":1641,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["this.height",{"_index":855,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.hiderecordnode",{"_index":1202,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{}}}],["this.initdone",{"_index":2383,"title":{},"body":{"components/ResultTimeline.html":{}}}],["this.innerheight",{"_index":2737,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.innerwidth",{"_index":2004,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.instance",{"_index":2722,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.intlservice.events.subscribe(e",{"_index":2720,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.intlservice.formatdate(this.xt.invert(selection[d.type",{"_index":2882,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.intlservice.formatmessage(p.name",{"_index":3077,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["this.intlservice.formatnumber(value",{"_index":1746,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["this.intlsubscription",{"_index":2719,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.intlsubscription.unsubscribe",{"_index":2914,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.isedgevisible(type",{"_index":1246,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{}}}],["this.isfiltered(item",{"_index":1738,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["this.itemclickevent",{"_index":1120,"title":{},"body":{"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"components/NgxChart.html":{}}}],["this.itemclickevent.emit(datapoint",{"_index":1160,"title":{},"body":{"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"components/NgxChart.html":{}}}],["this.items",{"_index":2382,"title":{},"body":{"components/ResultTimeline.html":{}}}],["this.items.push({id",{"_index":2342,"title":{},"body":{"components/ResultTimeline.html":{}}}],["this.items.splice(0",{"_index":2316,"title":{},"body":{"components/ResultTimeline.html":{}}}],["this.left",{"_index":1084,"title":{},"body":{"components/BsTooltipComponent.html":{}}}],["this.line",{"_index":2732,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.localechange",{"_index":1129,"title":{},"body":{"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"components/NgxChart.html":{}}}],["this.localechange.unsubscribe",{"_index":1133,"title":{},"body":{"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"components/NgxChart.html":{}}}],["this.makedata",{"_index":1753,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["this.mapstyles",{"_index":1932,"title":{},"body":{"components/MapComponent.html":{}}}],["this.margin.bottom",{"_index":857,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.margin.left",{"_index":851,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.margin.right",{"_index":852,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.margin.top",{"_index":856,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.max_dates",{"_index":2355,"title":{},"body":{"components/ResultTimeline.html":{}}}],["this.maxaggregationdate",{"_index":2504,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["this.maxdate",{"_index":2456,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{}}}],["this.maxx",{"_index":839,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["this.maxy",{"_index":842,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["this.mergedatasets(datasets.filter(d",{"_index":3046,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["this.mergedevents",{"_index":2482,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["this.mergedtimeseries",{"_index":2476,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["this.min_dates",{"_index":2354,"title":{},"body":{"components/ResultTimeline.html":{}}}],["this.min_year",{"_index":2340,"title":{},"body":{"components/ResultTimeline.html":{}}}],["this.minaggregationdate",{"_index":2503,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["this.mindate",{"_index":2453,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{}}}],["this.moneyaggregation",{"_index":2045,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{}}}],["this.mutatenode(node",{"_index":1451,"title":{},"body":{"interfaces/DynamicNodeType.html":{}}}],["this.mutatenodes(sourcenodes",{"_index":1443,"title":{},"body":{"interfaces/DynamicNodeType.html":{}}}],["this.name",{"_index":2122,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/VisEvent.html":{}}}],["this.neighbors",{"_index":1014,"title":{},"body":{"components/BsNodeInfoCard.html":{},"interfaces/NodeData.html":{}}}],["this.neighbors[type",{"_index":1033,"title":{},"body":{"components/BsNodeInfoCard.html":{},"interfaces/NodeData.html":{}}}],["this.neighbors[type].push",{"_index":1035,"title":{},"body":{"components/BsNodeInfoCard.html":{},"interfaces/NodeData.html":{}}}],["this.networkservice.click.subscribe((eventdata",{"_index":3091,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["this.networkservice.fit(this.name",{"_index":3085,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["this.networkservice.off(this.name",{"_index":3115,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["this.networkservice.on(this.name",{"_index":3090,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["this.networkservice.setoptions(this.name",{"_index":3093,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["this.ngonchanges",{"_index":1690,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["this.node",{"_index":1012,"title":{},"body":{"components/BsNodeInfoCard.html":{},"interfaces/NodeData.html":{}}}],["this.node.context.edges",{"_index":1015,"title":{},"body":{"components/BsNodeInfoCard.html":{},"interfaces/NodeData.html":{}}}],["this.node.context.nodes.get(id",{"_index":1022,"title":{},"body":{"components/BsNodeInfoCard.html":{},"interfaces/NodeData.html":{}}}],["this.node.count",{"_index":1013,"title":{},"body":{"components/BsNodeInfoCard.html":{},"interfaces/NodeData.html":{}}}],["this.node.id",{"_index":1019,"title":{},"body":{"components/BsNodeInfoCard.html":{},"interfaces/NodeData.html":{}}}],["this.nodecache.has(node.id",{"_index":1395,"title":{},"body":{"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/DynamicNodeType.html":{}}}],["this.nodecache[node.id",{"_index":1452,"title":{},"body":{"interfaces/DynamicNodeType.html":{}}}],["this.nodeclicked.next(node",{"_index":3111,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["this.nodeclicked.subscribe((node",{"_index":3018,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["this.nodedata",{"_index":1011,"title":{},"body":{"components/BsNodeInfoCard.html":{},"interfaces/NodeData.html":{}}}],["this.nodeidx.clear",{"_index":1541,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["this.nodeidx.delete(id",{"_index":1645,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["this.nodeidx.get(id",{"_index":1523,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["this.nodeidx.has(id",{"_index":1519,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["this.nodeidx.set(node.id",{"_index":1594,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["this.nodeidx[id",{"_index":1622,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["this.nodetype",{"_index":1211,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{}}}],["this.nodetype.getquery(node",{"_index":1442,"title":{},"body":{"interfaces/DynamicNodeType.html":{}}}],["this.nodetype.name",{"_index":1214,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{}}}],["this.nodetype.nodeoptions",{"_index":1463,"title":{},"body":{"interfaces/DynamicNodeType.html":{}}}],["this.nodetype.nodeoptions(node",{"_index":1464,"title":{},"body":{"interfaces/DynamicNodeType.html":{}}}],["this.nodetype.trigger",{"_index":1465,"title":{},"body":{"interfaces/DynamicNodeType.html":{}}}],["this.onaxisclicked(d",{"_index":901,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["this.onbrush",{"_index":2741,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.onbrushend",{"_index":2743,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.onmousemove",{"_index":2022,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.onmouseout",{"_index":2141,"title":{},"body":{"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.onnetworkclick(eventdata",{"_index":3092,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["this.onopensettings(true",{"_index":3171,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["this.onresize",{"_index":1128,"title":{},"body":{"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"components/NgxChart.html":{}}}],["this.onzoom",{"_index":2847,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.onzoomend",{"_index":2848,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.openedwindow",{"_index":1949,"title":{},"body":{"components/MapComponent.html":{}}}],["this.openedwindow.close",{"_index":1948,"title":{},"body":{"components/MapComponent.html":{}}}],["this.options",{"_index":1727,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["this.options.colorscheme",{"_index":1144,"title":{},"body":{"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"components/NgxChart.html":{}}}],["this.options.getitemcolor",{"_index":1733,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["this.optionsprefs",{"_index":3094,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["this.optionsprefs.physics",{"_index":3119,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["this.optionsprefs.physics.barneshut",{"_index":3121,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["this.optionsprefs.physics.barneshut.centralgravity",{"_index":3130,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["this.optionsprefs.physics.barneshut.damping",{"_index":3126,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["this.optionsprefs.physics.barneshut.gravitationalconstant",{"_index":3128,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["this.optionsprefs.physics.barneshut.springconstant",{"_index":3124,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["this.optionsprefs.physics.barneshut.springlength",{"_index":3122,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["this.parseentity(item",{"_index":2047,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{}}}],["this.parseentity(money.value",{"_index":2149,"title":{},"body":{"interfaces/MoneyDatum.html":{}}}],["this.prefs.delete(this.name",{"_index":3169,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["this.prefs.get(this.name",{"_index":3176,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["this.prefs.set(this.name",{"_index":3153,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["this.prefs.sync",{"_index":3167,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["this.processednodes",{"_index":1387,"title":{},"body":{"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/DynamicNodeType.html":{}}}],["this.processednodes.filter(id",{"_index":1388,"title":{},"body":{"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/DynamicNodeType.html":{}}}],["this.processednodes.indexof(node.id",{"_index":1393,"title":{},"body":{"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/DynamicNodeType.html":{}}}],["this.processednodes.push(node.id",{"_index":1421,"title":{},"body":{"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/DynamicNodeType.html":{}}}],["this.processednodes.splice(0",{"_index":1420,"title":{},"body":{"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/DynamicNodeType.html":{}}}],["this.processnode(node",{"_index":1426,"title":{},"body":{"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/DynamicNodeType.html":{}}}],["this.provider",{"_index":531,"title":{},"body":{"classes/BaseProvider.html":{}}}],["this.provider.next(this.dataset",{"_index":196,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AsyncRecordsProvider.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{}}}],["this.providers.foreach(p",{"_index":3019,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["this.providers.map(p",{"_index":3043,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["this.providerssubscription",{"_index":3042,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["this.providerssubscription.unsubscribe",{"_index":3041,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["this.query",{"_index":432,"title":{},"body":{"classes/AsyncRecordsProvider.html":{}}}],["this.r",{"_index":2008,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{}}}],["this.r(datum.count",{"_index":2127,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{}}}],["this.r.domain(rextent",{"_index":2079,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{}}}],["this.rangechange.next(this.xt.domain",{"_index":2905,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.record.id",{"_index":2338,"title":{},"body":{"components/ResultTimeline.html":{}}}],["this.record.modified.length>=10",{"_index":2361,"title":{},"body":{"components/ResultTimeline.html":{}}}],["this.recordclicked.next(datum.record",{"_index":2171,"title":{},"body":{"interfaces/MoneyDatum.html":{}}}],["this.recordclicked.next(record",{"_index":1951,"title":{},"body":{"components/MapComponent.html":{}}}],["this.refreshaction",{"_index":3023,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["this.removeedge(id",{"_index":1561,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["this.removeedge(ids",{"_index":1562,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["this.removeedges(edge.id",{"_index":1570,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["this.removenode(id",{"_index":1558,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["this.removenode(ids",{"_index":1559,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["this.removenodes(neighbor.id",{"_index":1574,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["this.repulsionpref",{"_index":3129,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["this.resetaction",{"_index":466,"title":{},"body":{"classes/BaseProvider.html":{}}}],["this.results",{"_index":1760,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["this.results.aggregations",{"_index":2042,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{}}}],["this.results.records",{"_index":1712,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["this.results.records?.foreach(record",{"_index":2147,"title":{},"body":{"interfaces/MoneyDatum.html":{}}}],["this.right",{"_index":1091,"title":{},"body":{"components/BsTooltipComponent.html":{}}}],["this.searchservice.breadcrumbs.findselect(this.name",{"_index":3066,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["this.searchservice.getresults(query",{"_index":2561,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["this.searchservice.query.addselect(expr",{"_index":2121,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["this.searchservice.query.findselect(this.name",{"_index":2457,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["this.searchservice.query.removeselect(this.name",{"_index":1913,"title":{},"body":{"components/MapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/VisEvent.html":{}}}],["this.searchservice.search",{"_index":1914,"title":{},"body":{"components/MapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/VisEvent.html":{}}}],["this.searchservice.search(undefined",{"_index":2605,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["this.select(node",{"_index":3027,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["this.selectedcolor",{"_index":1741,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["this.selectedge",{"_index":3031,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["this.selectedge(edge",{"_index":3108,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["this.selectedge(this.context.edges.get(event.edges[0",{"_index":3104,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["this.selecteditems",{"_index":2085,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{}}}],["this.selecteditems.add(item.value",{"_index":2088,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{}}}],["this.selectedvalues.add(v.tolowercase",{"_index":1724,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["this.selectedvalues.add(v.value.tolowercase",{"_index":1725,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["this.selectedvalues.add(val.tolowercase",{"_index":1720,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["this.selectedvalues.clear",{"_index":1711,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["this.selectfield",{"_index":1680,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["this.selectfield.update",{"_index":1756,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["this.selection",{"_index":2449,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{}}}],["this.selectionchange",{"_index":1754,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["this.selectionchange.next(this.currentselection",{"_index":2892,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.selectionchange.unsubscribe",{"_index":1765,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["this.selectionservice.events.subscribe(e",{"_index":1998,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{}}}],["this.selectionservice.events.subscribe(event",{"_index":1755,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["this.selectionservice.getselecteditems().foreach(r",{"_index":2086,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{}}}],["this.selectnode",{"_index":3032,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["this.selectnode(node",{"_index":3107,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["this.selectnode(this.context.nodes.get(event.nodes[0",{"_index":3106,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["this.shiftdate(item.date",{"_index":2659,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["this.showtooltip",{"_index":2165,"title":{},"body":{"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.skips[type.aggregation",{"_index":255,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{}}}],["this.skips[type.aggregation+(sourcenode?.id",{"_index":161,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{}}}],["this.skips[type.aggregation+node.id",{"_index":279,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{}}}],["this.springconstantpref",{"_index":3125,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["this.springlengthpref",{"_index":3123,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["this.style",{"_index":1933,"title":{},"body":{"components/MapComponent.html":{}}}],["this.tickformatter",{"_index":1729,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["this.timeline.addcustomtime(this.record.modified.substring(0,10",{"_index":2362,"title":{},"body":{"components/ResultTimeline.html":{}}}],["this.timeline.on('select",{"_index":2363,"title":{},"body":{"components/ResultTimeline.html":{}}}],["this.timeline.removecustomtime(\"date",{"_index":2357,"title":{},"body":{"components/ResultTimeline.html":{}}}],["this.timeseries",{"_index":2473,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["this.timeseries$[i",{"_index":2490,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["this.timeseries.foreach((config",{"_index":2489,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["this.timeseries.map(_",{"_index":2474,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["this.tonode",{"_index":615,"title":{},"body":{"components/BsEdgeInfoCard.html":{}}}],["this.tooltipitem",{"_index":904,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.tooltipx",{"_index":2166,"title":{},"body":{"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.top",{"_index":1087,"title":{},"body":{"components/BsTooltipComponent.html":{}}}],["this.turnofftooltip",{"_index":2034,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.uiservice.addelementresizelistener(this.wrapper.nativeelement",{"_index":1127,"title":{},"body":{"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"components/NgxChart.html":{}}}],["this.uiservice.removeelementresizelistener(this.wrapper.nativeelement",{"_index":1132,"title":{},"body":{"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"components/NgxChart.html":{}}}],["this.updateactions",{"_index":3026,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["this.updateaxes",{"_index":2038,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.updatebrush",{"_index":2767,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.updatechart",{"_index":1125,"title":{},"body":{"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"components/NgxChart.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.updatecombinedaggregation(config",{"_index":2612,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["this.updatedata",{"_index":2036,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/VisEvent.html":{}}}],["this.updatedataset(results.aggregations",{"_index":179,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{}}}],["this.updatedataset(results.records",{"_index":435,"title":{},"body":{"classes/AsyncRecordsProvider.html":{}}}],["this.updatedynamicdataset(array.from(map.values",{"_index":1378,"title":{},"body":{"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/DynamicNodeType.html":{}}}],["this.updateevents",{"_index":2486,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{}}}],["this.updategrips(this.brushselection",{"_index":2886,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.updateoptions",{"_index":3034,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["this.updatescales",{"_index":2037,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{}}}],["this.updatescales(this.data",{"_index":2797,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.updateselecteditems",{"_index":1999,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{}}}],["this.updateselectedvalues",{"_index":1763,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["this.updateselection",{"_index":2757,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.updatetimeline",{"_index":2315,"title":{},"body":{"components/ResultTimeline.html":{}}}],["this.updatetimeseries",{"_index":2478,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["this.updatexaxis",{"_index":2721,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.updatezoom",{"_index":2798,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.viewinit",{"_index":872,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.vistimelineservice.setitems(this.name",{"_index":2381,"title":{},"body":{"components/ResultTimeline.html":{}}}],["this.width",{"_index":850,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.wrapper",{"_index":1157,"title":{},"body":{"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"components/NgxChart.html":{}}}],["this.x",{"_index":847,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.x(datum.category",{"_index":2124,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{}}}],["this.x(datum.date",{"_index":2178,"title":{},"body":{"interfaces/MoneyDatum.html":{}}}],["this.x(item.x",{"_index":905,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["this.x.bandwidth",{"_index":2077,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{}}}],["this.x.domain",{"_index":2083,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.x.domain(this.data.map(d",{"_index":2074,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{}}}],["this.x.domain(this.xt.domain",{"_index":2816,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.x.domain(xextent",{"_index":2161,"title":{},"body":{"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.x.range([0",{"_index":2017,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.x_inner",{"_index":2005,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{}}}],["this.x_inner(datum.i",{"_index":2125,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{}}}],["this.xaxis",{"_index":868,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.xaxis$.call(d3.axisbottom(this.xt",{"_index":2871,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.xaxis$.call(xaxis",{"_index":2093,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{}}}],["this.xaxis$.selectall(\".domain\").remove",{"_index":2094,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.xaxis.call(d3.axistop(this.x).ticksize(0",{"_index":885,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["this.xaxis.selectall(\".domain\").remove",{"_index":887,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["this.xaxis.selectall(\"text",{"_index":890,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["this.xaxis.selectall('text').each(this.wrap",{"_index":881,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["this.xaxis.transition(t",{"_index":878,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["this.xt",{"_index":2724,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.xt(d.date",{"_index":2728,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.xt(event[0].date",{"_index":2913,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.xt(events[0].date",{"_index":2986,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.xt(this.currentselection[0",{"_index":2859,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.xt(this.currentselection[1",{"_index":2860,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.xt.domain",{"_index":2931,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.y",{"_index":853,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.y(d.value",{"_index":2731,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.y(datum.value",{"_index":2126,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{}}}],["this.y(item.y",{"_index":906,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["this.y.domain([0",{"_index":2820,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.y.domain(yextent",{"_index":2078,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{}}}],["this.y.range([this.innerheight",{"_index":2014,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.y.ticks",{"_index":2872,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.y.ticks(5",{"_index":2097,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{}}}],["this.yaxis",{"_index":870,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.yaxis$.call(yaxis",{"_index":2113,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.yaxis$.selectall(\".domain\").remove",{"_index":2114,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.yaxis.call(d3.axisleft(this.y).ticksize(0",{"_index":886,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["this.yaxis.selectall(\".domain\").remove",{"_index":902,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["this.yaxis.selectall(\"text",{"_index":903,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["this.yaxis.selectall('text').each(this.wrap",{"_index":884,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["this.yaxis.transition(t",{"_index":882,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["this.zoombehavior",{"_index":2842,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.zoombehavior.on(\"end",{"_index":2833,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.zoombehavior.on(\"zoom",{"_index":2832,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.zoombehavior.transform(this.brush",{"_index":2834,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.zooming",{"_index":2894,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["though",{"_index":2764,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["three",{"_index":3334,"title":{},"body":{"miscellaneous/functions.html":{}}}],["through",{"_index":1691,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["throw",{"_index":218,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"interfaces/CustomData.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["thumbnail",{"_index":3321,"title":{},"body":{"miscellaneous/functions.html":{}}}],["tick",{"_index":2104,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["tickformat(d3.format(\"~s",{"_index":2873,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["tickformat(this.formatservice.moneyformatter",{"_index":2111,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{}}}],["tickformatter",{"_index":1107,"title":{},"body":{"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"components/NgxChart.html":{}}}],["ticks",{"_index":2102,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["ticks(5",{"_index":2163,"title":{},"body":{"interfaces/MoneyDatum.html":{}}}],["ticksizeinner",{"_index":2109,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{}}}],["tickvalues(yaxisticks",{"_index":2110,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["tile",{"_index":784,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["tile.clickable:hover",{"_index":961,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["tile.selected",{"_index":965,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["tilt",{"_index":891,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["time",{"_index":390,"title":{},"body":{"classes/AsyncRecordsProvider.html":{},"components/BsHeatmapComponent.html":{},"interfaces/CustomData.html":{},"interfaces/HeatmapItem.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"miscellaneous/functions.html":{}}}],["timeinterval",{"_index":2645,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{}}}],["timeinterval.offset(series[series.length",{"_index":2656,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["timeline",{"_index":684,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"components/BsTooltipComponent.html":{},"components/FacetNgxChart.html":{},"components/MapComponent.html":{},"interfaces/MoneyDatum.html":{},"components/NgxChart.html":{},"components/ResultTimeline.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"modules/VisTimelineModule.html":{},"dependencies.html":{}}}],["timeline'},{'name",{"_index":660,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"components/BsTooltipComponent.html":{},"components/FacetNgxChart.html":{},"components/MapComponent.html":{},"components/NgxChart.html":{},"components/ResultTimeline.html":{}}}],["timeline.component",{"_index":1058,"title":{},"body":{"modules/BsTimelineModule.html":{},"modules/FinanceModule.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["timeline.component.html",{"_index":2132,"title":{},"body":{"interfaces/MoneyDatum.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{}}}],["timeline.component.scss",{"_index":2133,"title":{},"body":{"interfaces/MoneyDatum.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{}}}],["timeline.component.ts",{"_index":2130,"title":{},"body":{"interfaces/MoneyDatum.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["timeline.html",{"_index":2274,"title":{},"body":{"components/ResultTimeline.html":{}}}],["timeline.ts",{"_index":2273,"title":{},"body":{"components/ResultTimeline.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["timeline.ts:122",{"_index":2300,"title":{},"body":{"components/ResultTimeline.html":{}}}],["timeline.ts:21",{"_index":2294,"title":{},"body":{"components/ResultTimeline.html":{}}}],["timeline.ts:22",{"_index":2298,"title":{},"body":{"components/ResultTimeline.html":{}}}],["timeline.ts:23",{"_index":2287,"title":{},"body":{"components/ResultTimeline.html":{}}}],["timeline.ts:24",{"_index":2288,"title":{},"body":{"components/ResultTimeline.html":{}}}],["timeline.ts:25",{"_index":2293,"title":{},"body":{"components/ResultTimeline.html":{}}}],["timeline.ts:26",{"_index":2291,"title":{},"body":{"components/ResultTimeline.html":{}}}],["timeline.ts:27",{"_index":2292,"title":{},"body":{"components/ResultTimeline.html":{}}}],["timeline.ts:28",{"_index":2289,"title":{},"body":{"components/ResultTimeline.html":{}}}],["timeline.ts:29",{"_index":2297,"title":{},"body":{"components/ResultTimeline.html":{}}}],["timeline.ts:31",{"_index":2302,"title":{},"body":{"components/ResultTimeline.html":{}}}],["timeline.ts:32",{"_index":2285,"title":{},"body":{"components/ResultTimeline.html":{}}}],["timeline.ts:34",{"_index":2304,"title":{},"body":{"components/ResultTimeline.html":{}}}],["timeline.ts:37",{"_index":2299,"title":{},"body":{"components/ResultTimeline.html":{}}}],["timeline.ts:43",{"_index":2301,"title":{},"body":{"components/ResultTimeline.html":{}}}],["timeline/.../facet",{"_index":3374,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["timeline/.../result",{"_index":3378,"title":{},"body":{"miscellaneous/variables.html":{}}}],["timeline/bootstrap/facet",{"_index":2385,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["timeline/bootstrap/timeline.component.ts",{"_index":2688,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{},"coverage.html":{}}}],["timeline/bootstrap/timeline.module.ts",{"_index":1054,"title":{},"body":{"modules/BsTimelineModule.html":{}}}],["timeline/money",{"_index":1816,"title":{},"body":{"modules/FinanceModule.html":{},"interfaces/MoneyDatum.html":{},"coverage.html":{}}}],["timeline/result",{"_index":2272,"title":{},"body":{"components/ResultTimeline.html":{},"modules/VisTimelineModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["timeline/vis",{"_index":3186,"title":{},"body":{"modules/VisTimelineModule.html":{}}}],["timelineaggregation",{"_index":2384,"title":{"interfaces/TimelineAggregation.html":{}},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["timelineaggregation).aggregation",{"_index":2598,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["timelinecombinedaggregations",{"_index":2398,"title":{"interfaces/TimelineCombinedAggregations.html":{}},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["timelinecombinedaggregations).aggregations",{"_index":2611,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["timelinecombinedaggregations).default",{"_index":2599,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["timelinecombinedaggregations).default.aggregation",{"_index":2600,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["timelinedata",{"_index":2408,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"miscellaneous/typealiases.html":{}}}],["timelinedate",{"_index":2396,"title":{"interfaces/TimelineDate.html":{}},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"coverage.html":{}}}],["timelinedate[]).concat(...primaryseries.map(s",{"_index":2806,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["timelineevent",{"_index":2397,"title":{"interfaces/TimelineEvent.html":{}},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["timelineevent[]).concat(...events",{"_index":2485,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["timelineeventaggregation",{"_index":2405,"title":{"interfaces/TimelineEventAggregation.html":{}},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["timelineeventaggregation).aggregation",{"_index":2515,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["timelineeventaggregation).subscribe",{"_index":2517,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["timelineeventdata",{"_index":2409,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"miscellaneous/typealiases.html":{}}}],["timelineinitialized",{"_index":2277,"title":{},"body":{"components/ResultTimeline.html":{}}}],["timelineoptions",{"_index":2295,"title":{},"body":{"components/ResultTimeline.html":{},"miscellaneous/variables.html":{}}}],["timelinerecords",{"_index":2404,"title":{"interfaces/TimelineRecords.html":{}},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["timelinerecords).field",{"_index":2446,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["timelines",{"_index":2487,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["timelineseries",{"_index":2395,"title":{"interfaces/TimelineSeries.html":{}},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["timelineseries).dates",{"_index":2492,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["times",{"_index":1362,"title":{},"body":{"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/DynamicNodeType.html":{}}}],["timeseries",{"_index":2410,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{}}}],["timeseries$.error(err",{"_index":2586,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["timeseries$.next(d",{"_index":2585,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["title",{"_index":295,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/BaseProvider.html":{},"components/BsEdgeInfoCard.html":{},"components/BsNodeInfoCard.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"components/MapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/VisEvent.html":{}}}],["todo",{"_index":84,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/VisEvent.html":{}}}],["together",{"_index":2917,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["toggle",{"_index":459,"title":{},"body":{"classes/BaseProvider.html":{}}}],["tonode",{"_index":505,"title":{},"body":{"classes/BaseProvider.html":{},"components/BsEdgeInfoCard.html":{}}}],["tonode.id",{"_index":514,"title":{},"body":{"classes/BaseProvider.html":{}}}],["tooltip",{"_index":830,"title":{},"body":{"components/BsHeatmapComponent.html":{},"modules/BsTimelineModule.html":{},"components/BsTooltipComponent.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{}}}],["tooltip'},{'name",{"_index":668,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"components/BsTooltipComponent.html":{},"components/FacetNgxChart.html":{},"components/MapComponent.html":{},"components/NgxChart.html":{},"components/ResultTimeline.html":{}}}],["tooltip.component",{"_index":999,"title":{},"body":{"modules/BsHeatmapModule.html":{}}}],["tooltip.left::after",{"_index":1072,"title":{},"body":{"components/BsTooltipComponent.html":{}}}],["tooltip.right::after",{"_index":1068,"title":{},"body":{"components/BsTooltipComponent.html":{}}}],["tooltip::after",{"_index":1061,"title":{},"body":{"components/BsTooltipComponent.html":{}}}],["tooltipitem",{"_index":696,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["tooltipitem.count",{"_index":941,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["tooltipitem.display",{"_index":938,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["tooltipitem.value",{"_index":939,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["tooltipleft",{"_index":697,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["tooltiporientation",{"_index":698,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["tooltipright",{"_index":699,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["tooltips",{"_index":1996,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{}}}],["tooltiptemplate",{"_index":1117,"title":{},"body":{"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"components/NgxChart.html":{}}}],["tooltiptop",{"_index":700,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["tooltiptpl",{"_index":2696,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["tooltipx",{"_index":2138,"title":{},"body":{"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["top",{"_index":579,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"components/BsTooltipComponent.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/NodeData.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{}}}],["top.px",{"_index":1086,"title":{},"body":{"components/BsTooltipComponent.html":{}}}],["total",{"_index":936,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["transfer",{"_index":1626,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["transform",{"_index":2898,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["transform.rescalex(this.x",{"_index":2900,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["transformed",{"_index":1429,"title":{},"body":{"interfaces/DynamicNodeType.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["transforms",{"_index":2637,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{}}}],["transit",{"_index":3415,"title":{},"body":{"miscellaneous/variables.html":{}}}],["transit.line",{"_index":3416,"title":{},"body":{"miscellaneous/variables.html":{}}}],["transit.station",{"_index":3417,"title":{},"body":{"miscellaneous/variables.html":{}}}],["transition",{"_index":721,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["transitions",{"_index":772,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["translate",{"_index":2878,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["transparent",{"_index":1070,"title":{},"body":{"components/BsTooltipComponent.html":{}}}],["trash",{"_index":467,"title":{},"body":{"classes/BaseProvider.html":{}}}],["tree",{"_index":572,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"components/BsTooltipComponent.html":{},"components/FacetNgxChart.html":{},"components/MapComponent.html":{},"components/NgxChart.html":{},"components/ResultTimeline.html":{}}}],["treemapmodule",{"_index":2269,"title":{},"body":{"modules/NgxChartsModule.html":{}}}],["triangle",{"_index":2908,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["trigger",{"_index":114,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"components/BsEdgeInfoCard.html":{},"components/BsNodeInfoCard.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/NodeData.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/VisEvent.html":{}}}],["triggered",{"_index":2588,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["triggers",{"_index":2609,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["triple",{"_index":3341,"title":{},"body":{"miscellaneous/functions.html":{}}}],["true",{"_index":67,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"components/BsEdgeInfoCard.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"interfaces/HeatmapItem.html":{},"components/MapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"components/NgxChart.html":{},"interfaces/NodeData.html":{},"interfaces/RecordNode.html":{},"components/ResultTimeline.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{}}}],["true}).pipe",{"_index":2562,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["true}).subscribe",{"_index":177,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{}}}],["true}).subscribe(results",{"_index":1453,"title":{},"body":{"interfaces/DynamicNodeType.html":{}}}],["truncates",{"_index":807,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["try",{"_index":1028,"title":{},"body":{"components/BsNodeInfoCard.html":{},"interfaces/NodeData.html":{},"components/ResultTimeline.html":{}}}],["turn",{"_index":358,"title":{},"body":{"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{}}}],["turned",{"_index":1165,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{}}}],["turning",{"_index":2910,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["two",{"_index":215,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/BaseProvider.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"miscellaneous/functions.html":{}}}],["type",{"_index":30,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"components/BsEdgeInfoCard.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"components/BsTooltipComponent.html":{},"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"interfaces/HeatmapItem.html":{},"components/MapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"components/NgxChart.html":{},"interfaces/Node.html":{},"interfaces/NodeData.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"components/ResultTimeline.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["type's",{"_index":1031,"title":{},"body":{"components/BsNodeInfoCard.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/NodeData.html":{}}}],["type.aggregation",{"_index":304,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{}}}],["type.count",{"_index":162,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{}}}],["type.display",{"_index":1286,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{}}}],["type.edgeoptions",{"_index":529,"title":{},"body":{"classes/BaseProvider.html":{}}}],["type.edgeoptions([fromnode",{"_index":530,"title":{},"body":{"classes/BaseProvider.html":{}}}],["type.field",{"_index":413,"title":{},"body":{"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{}}}],["type.name}:${value",{"_index":480,"title":{},"body":{"classes/BaseProvider.html":{}}}],["type.nodeoptions",{"_index":502,"title":{},"body":{"classes/BaseProvider.html":{}}}],["type.nodeoptions(node",{"_index":503,"title":{},"body":{"classes/BaseProvider.html":{}}}],["type.nodetypes.length",{"_index":1272,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{}}}],["type.nodetypes[0",{"_index":268,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{}}}],["type.nodetypes[0].name",{"_index":1213,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{}}}],["type.nodetypes[1",{"_index":278,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{}}}],["type.parse!(recorddata",{"_index":1226,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{}}}],["type.parse!(value",{"_index":1224,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{}}}],["type.parse(item",{"_index":213,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{}}}],["type.trigger",{"_index":257,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AsyncRecordsProvider.html":{},"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{}}}],["type:auditeventtype.search_timeline_usage",{"_index":2606,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["typealiases",{"_index":3372,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["typed",{"_index":3346,"title":{},"body":{"miscellaneous/functions.html":{}}}],["typedcoocaggregationdemo",{"_index":3248,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["typedcoocaggregationdemo(providerfactory",{"_index":3340,"title":{},"body":{"miscellaneous/functions.html":{}}}],["typedcoocrecorddemo",{"_index":3249,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["typedcoocrecorddemo(providerfactory",{"_index":3345,"title":{},"body":{"miscellaneous/functions.html":{}}}],["typeof",{"_index":2539,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["types",{"_index":14,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{}}}],["types.find(type",{"_index":189,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{}}}],["types.foreach(type",{"_index":158,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{}}}],["types.length",{"_index":259,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{}}}],["types.map(type",{"_index":314,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{}}}],["typically",{"_index":1486,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["uiservice",{"_index":1104,"title":{},"body":{"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"components/NgxChart.html":{}}}],["undefined",{"_index":108,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"components/BsEdgeInfoCard.html":{},"components/BsNodeInfoCard.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"components/MapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeData.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"miscellaneous/variables.html":{}}}],["undefined).subscribe(res",{"_index":1403,"title":{},"body":{"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/DynamicNodeType.html":{}}}],["underline",{"_index":956,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["undirected",{"_index":507,"title":{},"body":{"classes/BaseProvider.html":{}}}],["unfortunately",{"_index":2029,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["unique",{"_index":1307,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/VisEvent.html":{}}}],["unlimited",{"_index":1172,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{}}}],["unselected",{"_index":3339,"title":{},"body":{"miscellaneous/functions.html":{}}}],["up",{"_index":1142,"title":{},"body":{"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"components/NgxChart.html":{},"interfaces/VisEvent.html":{}}}],["update",{"_index":633,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/NodeData.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{}}}],["update/reset",{"_index":2826,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["updateactions",{"_index":3064,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["updateaxes",{"_index":2089,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["updatebrush",{"_index":2857,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["updatechart",{"_index":1121,"title":{},"body":{"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"components/NgxChart.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["updatecombinedaggregation",{"_index":2613,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["updatecombinedaggregation(config",{"_index":2569,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["updated",{"_index":1584,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"components/MapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["updatedata",{"_index":2039,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/VisEvent.html":{}}}],["updatedataset(aggregations",{"_index":185,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{}}}],["updatedataset(records",{"_index":1190,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{}}}],["updatedatasets",{"_index":2189,"title":{},"body":{"classes/NetworkDataset.html":{}}}],["updatedatasets(nodes",{"_index":1627,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["updatedynamicdataset(sourcenodes",{"_index":1381,"title":{},"body":{"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/DynamicNodeType.html":{}}}],["updateevents",{"_index":2511,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{}}}],["updategrips(selection",{"_index":2876,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["updateoptions",{"_index":3116,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["updater",{"_index":1681,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["updates",{"_index":144,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AsyncRecordsProvider.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{}}}],["updatescales(data",{"_index":2799,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["updateselecteditems",{"_index":2084,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{}}}],["updateselectedvalues",{"_index":1710,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["updateselection",{"_index":2862,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["updatetimeline",{"_index":2278,"title":{},"body":{"components/ResultTimeline.html":{}}}],["updatetimeseries",{"_index":2488,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["updatexaxis",{"_index":2866,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["updatezoom",{"_index":2828,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["updating",{"_index":2590,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["upon",{"_index":1450,"title":{},"body":{"interfaces/DynamicNodeType.html":{}}}],["url",{"_index":2373,"title":{},"body":{"components/ResultTimeline.html":{}}}],["usd",{"_index":2134,"title":{},"body":{"interfaces/MoneyDatum.html":{}}}],["use",{"_index":378,"title":{},"body":{"classes/AsyncRecordsProvider.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"interfaces/CustomData.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeData.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{}}}],["used",{"_index":92,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AsyncRecordsProvider.html":{},"components/BsHeatmapComponent.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"interfaces/HeatmapItem.html":{},"components/MapComponent.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/VisEvent.html":{}}}],["useful",{"_index":1513,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["user",{"_index":780,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/HeatmapItem.html":{},"components/MapComponent.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/VisEvent.html":{}}}],["userpreferences",{"_index":2995,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["uses",{"_index":2921,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["using",{"_index":105,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{}}}],["util",{"_index":3310,"title":{},"body":{"dependencies.html":{}}}],["utilities",{"_index":2915,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["utility",{"_index":2620,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["utils",{"_index":50,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"components/MapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"components/NgxChart.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/VisEvent.html":{}}}],["utils.copy(this.options",{"_index":3117,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["utils.copy(this.query",{"_index":153,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{}}}],["utils.copy(this.searchservice.query",{"_index":2558,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["utils.debounce",{"_index":3166,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["utils.eqnc(a.name",{"_index":2145,"title":{},"body":{"interfaces/MoneyDatum.html":{}}}],["utils.eqnc(type.aggregation",{"_index":190,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{}}}],["utils.extend(edge",{"_index":515,"title":{},"body":{"classes/BaseProvider.html":{}}}],["utils.extend(existingedge",{"_index":1625,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["utils.extend(existingnode",{"_index":1602,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["utils.extend(node",{"_index":500,"title":{},"body":{"classes/BaseProvider.html":{},"interfaces/DynamicNodeType.html":{}}}],["utils.isnumber(value",{"_index":1744,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["utils.merge",{"_index":3424,"title":{},"body":{"miscellaneous/variables.html":{}}}],["utils.subscribe(this.intlservice.events",{"_index":1130,"title":{},"body":{"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"components/NgxChart.html":{}}}],["utils.todate(r[config.field",{"_index":2534,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["utils.tolowercase(this.options.type",{"_index":1135,"title":{},"body":{"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"components/NgxChart.html":{}}}],["utilsmodule",{"_index":1055,"title":{},"body":{"modules/BsTimelineModule.html":{},"modules/FinanceModule.html":{},"modules/FusionChartsModule.html":{},"modules/NetworkModule.html":{},"modules/NgxChartsModule.html":{}}}],["v!==this.aggregation",{"_index":1688,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["val",{"_index":1716,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["val.foreach(v",{"_index":1722,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["valid",{"_index":2064,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{}}}],["value",{"_index":68,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"components/BsHeatmapComponent.html":{},"components/BsTooltipComponent.html":{},"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"interfaces/HeatmapItem.html":{},"components/MapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"components/NgxChart.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"components/ResultTimeline.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{},"miscellaneous/variables.html":{}}}],["value.x))).slice(0",{"_index":838,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["value.y))).slice(0",{"_index":841,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["value[\"display",{"_index":1238,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{}}}],["value[\"value",{"_index":1237,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{}}}],["value_amount",{"_index":1974,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{}}}],["valueamounts",{"_index":1977,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{}}}],["valued",{"_index":1220,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{}}}],["valueitem",{"_index":1963,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{}}}],["values",{"_index":28,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"interfaces/CustomData.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/VisEvent.html":{}}}],["valuestr",{"_index":2061,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{}}}],["var",{"_index":650,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"components/BsTooltipComponent.html":{},"components/FacetNgxChart.html":{},"components/MapComponent.html":{},"components/NgxChart.html":{},"components/ResultTimeline.html":{}}}],["variable",{"_index":3063,"title":{},"body":{"interfaces/VisEvent.html":{},"coverage.html":{}}}],["variables",{"_index":3375,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["vertical",{"_index":2116,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["verticaltalbar",{"_index":1140,"title":{},"body":{"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"components/NgxChart.html":{}}}],["via",{"_index":330,"title":{},"body":{"classes/AsyncRecordsProvider.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"miscellaneous/functions.html":{}}}],["view",{"_index":628,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"modules/BsHeatmapModule.html":{},"components/BsNodeInfoCard.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"components/MapComponent.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeData.html":{},"interfaces/NodeType.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{}}}],["view'},{'name",{"_index":665,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"components/BsTooltipComponent.html":{},"components/FacetNgxChart.html":{},"components/MapComponent.html":{},"components/NgxChart.html":{},"components/ResultTimeline.html":{}}}],["view.ts",{"_index":3217,"title":{},"body":{"coverage.html":{}}}],["viewbox",{"_index":907,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["viewchild",{"_index":818,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"components/NgxChart.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["viewchild(\"brush",{"_index":2710,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["viewchild(\"chart",{"_index":1118,"title":{},"body":{"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"components/NgxChart.html":{}}}],["viewchild(\"overlay",{"_index":1994,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{}}}],["viewchild(\"tooltiptemplate",{"_index":1116,"title":{},"body":{"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"components/NgxChart.html":{}}}],["viewchild(\"wrapper",{"_index":1113,"title":{},"body":{"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"components/NgxChart.html":{}}}],["viewchild(\"xaxis",{"_index":828,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["viewchild(\"yaxis",{"_index":829,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["viewchild('chart",{"_index":2242,"title":{},"body":{"components/NgxChart.html":{}}}],["viewchild('tooltiptemplate",{"_index":2246,"title":{},"body":{"components/NgxChart.html":{}}}],["viewchild('wrapper",{"_index":2248,"title":{},"body":{"components/NgxChart.html":{}}}],["viewchild('xaxis",{"_index":796,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["viewchild('yaxis",{"_index":798,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["viewinit",{"_index":701,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["vis",{"_index":1474,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"modules/NetworkModule.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"components/ResultTimeline.html":{},"interfaces/VisEvent.html":{},"modules/VisTimelineModule.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/variables.html":{}}}],["vis.js",{"_index":1511,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/VisEvent.html":{},"miscellaneous/variables.html":{}}}],["visevent",{"_index":2989,"title":{"interfaces/VisEvent.html":{}},"body":{"interfaces/VisEvent.html":{},"coverage.html":{}}}],["visibility",{"_index":119,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AsyncRecordsProvider.html":{},"interfaces/CustomData.html":{},"components/NgxChart.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/VisEvent.html":{}}}],["visible",{"_index":484,"title":{},"body":{"classes/BaseProvider.html":{},"interfaces/CustomData.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"components/NgxChart.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{}}}],["vismodule",{"_index":2216,"title":{},"body":{"modules/NetworkModule.html":{},"modules/VisTimelineModule.html":{}}}],["visnetworkservice",{"_index":1478,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/VisEvent.html":{}}}],["vistimelinemodule",{"_index":3182,"title":{"modules/VisTimelineModule.html":{}},"body":{"modules/VisTimelineModule.html":{},"index.html":{},"modules.html":{}}}],["vistimelineservice",{"_index":2276,"title":{},"body":{"components/ResultTimeline.html":{}}}],["void",{"_index":371,"title":{},"body":{"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"components/BsEdgeInfoCard.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"components/FacetNgxChart.html":{},"components/MapComponent.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"components/NgxChart.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"components/ResultTimeline.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["w",{"_index":2779,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["want",{"_index":377,"title":{},"body":{"classes/AsyncRecordsProvider.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{}}}],["warning",{"_index":630,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsNodeInfoCard.html":{},"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/NodeData.html":{}}}],["water",{"_index":3419,"title":{},"body":{"miscellaneous/variables.html":{}}}],["way",{"_index":1148,"title":{},"body":{"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/CustomData.html":{},"components/NgxChart.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{}}}],["web",{"_index":97,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/VisEvent.html":{}}}],["weeks",{"_index":2566,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["well",{"_index":1553,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["west",{"_index":1946,"title":{},"body":{"components/MapComponent.html":{}}}],["whatever",{"_index":3360,"title":{},"body":{"miscellaneous/functions.html":{}}}],["whether",{"_index":122,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/BaseProvider.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{},"miscellaneous/functions.html":{}}}],["while(!parsedexpr.isleaf",{"_index":2463,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["whose",{"_index":1350,"title":{},"body":{"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{}}}],["width",{"_index":583,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"components/BsTooltipComponent.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"components/NgxChart.html":{},"interfaces/NodeData.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{}}}],["wikiasyncconfig",{"_index":3250,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["wikiasyncconfig(providerfactory",{"_index":3347,"title":{},"body":{"miscellaneous/functions.html":{}}}],["wikidynconfig",{"_index":3251,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["wikidynconfig(providerfactory",{"_index":3351,"title":{},"body":{"miscellaneous/functions.html":{}}}],["wikidynedgeconfig",{"_index":3252,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["wikidynedgeconfig(providerfactory",{"_index":3356,"title":{},"body":{"miscellaneous/functions.html":{}}}],["wikimultidynconfig",{"_index":3253,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["wikimultidynconfig(providerfactory",{"_index":3367,"title":{},"body":{"miscellaneous/functions.html":{}}}],["wikipedia",{"_index":1186,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{},"miscellaneous/functions.html":{}}}],["window",{"_index":1906,"title":{},"body":{"components/MapComponent.html":{}}}],["windows",{"_index":1950,"title":{},"body":{"components/MapComponent.html":{}}}],["wish",{"_index":317,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{}}}],["within",{"_index":1240,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{}}}],["without",{"_index":2895,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["withtext",{"_index":318,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{}}}],["works",{"_index":66,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{}}}],["wrap",{"_index":702,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["wrapper",{"_index":1115,"title":{},"body":{"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"components/NgxChart.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["ww",{"_index":2672,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["x",{"_index":703,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["x(d",{"_index":2727,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["x_inner",{"_index":1985,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{}}}],["xaxis",{"_index":704,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["xdomain",{"_index":2837,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["xdomain[0].gettime",{"_index":2840,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["xdomain[1].gettime",{"_index":2839,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["xextent",{"_index":2808,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["xextent[0",{"_index":2818,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["xextent[1",{"_index":2159,"title":{},"body":{"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["xlabels",{"_index":835,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["xlabels.includes(value.x",{"_index":845,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["xt",{"_index":2698,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["y",{"_index":705,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["y(d",{"_index":2733,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["y0(this.y(0",{"_index":2729,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["y1(d",{"_index":2730,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["yaxis",{"_index":706,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["yaxisticks",{"_index":2096,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["year",{"_index":2332,"title":{},"body":{"components/ResultTimeline.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["years",{"_index":2427,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{}}}],["yes",{"_index":407,"title":{},"body":{"classes/AsyncRecordsProvider.html":{},"components/BsHeatmapComponent.html":{},"components/MapComponent.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{}}}],["yextent",{"_index":2157,"title":{},"body":{"interfaces/MoneyDatum.html":{}}}],["yextent[0",{"_index":2160,"title":{},"body":{"interfaces/MoneyDatum.html":{}}}],["yextent[1",{"_index":2071,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{}}}],["ylabels",{"_index":840,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["ylabels.includes(value.y",{"_index":846,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["ymax",{"_index":2810,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["ymax*1.1",{"_index":2821,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["yyyy",{"_index":2667,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["z",{"_index":1060,"title":{},"body":{"components/BsTooltipComponent.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["zeros",{"_index":2639,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["zoom",{"_index":985,"title":{},"body":{"modules/BsHeatmapModule.html":{},"modules/BsTimelineModule.html":{},"modules/FinanceModule.html":{},"modules/FusionChartsModule.html":{},"modules/GoogleMapsModule.html":{},"modules/NetworkModule.html":{},"modules/NgxChartsModule.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{},"modules/VisTimelineModule.html":{},"index.html":{}}}],["zoom/selection",{"_index":2497,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["zoomable",{"_index":2422,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{}}}],["zoombehavior",{"_index":2706,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["zoomed",{"_index":2419,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["zooming",{"_index":2716,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["zooms",{"_index":2608,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"interfaces/AggregationData.html":{"url":"interfaces/AggregationData.html","title":"interface - AggregationData","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  AggregationData\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            network/providers/aggregation-provider.ts\n        \n\n            \n                Description\n            \n            \n                Convenience structure for managing custom metadata types (like\ncooccurrence entities). AggregationData is returned by the custom\nparse() function of an AggregationEdgeType.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        directed\n                                \n                                \n                                        displays\n                                \n                                \n                                            Optional\n                                        fieldValue\n                                \n                                \n                                            Optional\n                                        relations\n                                \n                                \n                                        values\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        directed\n                                    \n                                \n                                \n                                    \n                                        directed:     boolean[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     boolean[]\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        displays\n                                    \n                                \n                                \n                                    \n                                        displays:     string[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        fieldValue\n                                    \n                                \n                                \n                                    \n                                        fieldValue:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        relations\n                                    \n                                \n                                \n                                    \n                                        relations:     string[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string[]\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        values\n                                    \n                                \n                                \n                                    \n                                        values:     string[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Aggregation, AggregationItem } from '@sinequa/core/web-services';\nimport { Node, Edge, EdgeType, NetworkDataset, NetworkContext } from '../network-models';\nimport { Action } from '@sinequa/components/action';\nimport { Query, Expr } from '@sinequa/core/app-utils';\nimport { Utils } from '@sinequa/core/base';\nimport { BaseProvider } from './base-provider';\n\n/**\n * Extension of the Edge interface, to store the aggregation and\n * aggregation items from which the edge is constructed\n */\nexport interface AggregationEdge extends Edge {\n    aggregationItem: AggregationItem;\n    aggregation: Aggregation;\n}\n\n/**\n * Convenience structure for managing custom metadata types (like\n * cooccurrence entities). AggregationData is returned by the custom\n * parse() function of an AggregationEdgeType.\n */\nexport interface AggregationData {\n    values: string[]; // eg. LARRY PAGE, GOOGLE\n    displays: string[]; // eg. Larry Page, Google\n    relations?: string[]; // eg. Works At\n    directed?: boolean[]; // eg. true\n    fieldValue?: string; // A value on which to filter the data\n}\n\n/** Mode \"source\" means node are fetched and added systematically on getData() / other modes allow expanding an existing node*/\nexport type AggregationTriggerType = \"source\" | \"onclick\" | \"manual\";\n// TODO: Add support for \"oninsert\" (which might required additional complexity)\n\n/**\n * Extension of the EdgeType interface, specifying which aggregation is used\n * to generate the Edges, and additional options.\n */\nexport interface AggregationEdgeType extends EdgeType {\n    /** Name of the aggregation in the Web Service configuration */\n    aggregation: string;\n    /** If parse is provided, it is used to get the new nodes and edges. If not, the value is automatically converted into nodes, using nodeTypes[1] */\n    parse?: (item: AggregationItem, type: AggregationEdgeType) => AggregationData | undefined; // A cooccurrence aggregation might return 3 nodes and 2 edges\n    /** A parameter to define when the aggregation is fetched and nodes are added */\n    trigger: AggregationTriggerType;\n    /** Default number of items to fetch */\n    count?: number;\n    // TODO: add visibility modes ? (eg. existingNodes)\n}\n\n/**\n * Tests whether an EdgeType is an AggregationEdgeType\n * @param et an edge type\n */\nexport function isAggregationEdgeType(et: EdgeType): et is AggregationEdgeType {\n    return !!(et as AggregationEdgeType).aggregation;\n}\n\n/**\n * The Aggregation Provider generates nodes and edges from aggregations\n * fetched from the server.\n */\nexport class AggregationProvider extends BaseProvider {\n\n    /** Stores how many aggregation items have been fetched from the server for a given aggregation */\n    readonly skips: {[aggregation: string]: number} = {};\n\n    constructor(\n        public name: string,\n        protected edgeTypes: AggregationEdgeType[],\n        protected query?: Query\n    ) {\n        super(name);\n    }\n\n\n    /**\n     * Fetches the list of aggregations and updates the dataset\n     * @param types list of aggregation edge types\n     * @param sourceNode if provided, will compute the aggregation with a select to compute the aggregation for documents referencing that node\n     */\n    protected fetchAggregations(types: AggregationEdgeType[], sourceNode?: Node) {\n        \n        const query = Utils.copy(this.query || this.context.searchService.query);\n        query.action = \"aggregate\";\n        query.aggregations = {};\n        types.forEach(type => query.aggregations[type.aggregation] = {\n            skip: this.skips[type.aggregation+(sourceNode?.id || \"\")], \n            count: type.count || 10\n        });\n\n        if(sourceNode && sourceNode.type.field) {\n            query.addSelect(this.context.exprBuilder.makeExpr(sourceNode.type.field, this.getNodeValue(sourceNode)));\n        }\n\n        Object.keys(query.aggregations).forEach(aggregation => {\n            if(!this.context.appService.getCCAggregation(aggregation)) {\n                // This may not be a mistake if the aggregation belong to a different web service configuration\n                console.warn(`Aggregation '${aggregation}' does not exist in the Query web service configuration`);\n            }\n        });\n\n        this.context.searchService.getResults(query, undefined, {searchInactive: true}).subscribe(\n            results => {\n                this.updateDataset(results.aggregations, types, sourceNode);\n            }\n        );\n        \n    }\n\n    /**\n     * Fills the dataset with nodes and edges corresponding to\n     * the given aggregations data, and emits this new dataset.\n     * @param aggregations the list of aggregations to process\n     * @param types the corresponding edge types for each aggregation\n     */\n    protected updateDataset(aggregations: Aggregation[], types: AggregationEdgeType[], sourceNode?: Node) {\n\n        aggregations.forEach(aggregation => {\n            if(aggregation && aggregation.items) {\n                const type = types.find(type => Utils.eqNC(type.aggregation, aggregation.name));\n                if(type) {\n                    this.skips[type.aggregation+(sourceNode?.id || \"\")] += aggregation.items.length;\n                    aggregation.items.forEach(item => this.addAggregationNodes(item, aggregation, type, sourceNode));\n                }\n            }\n        });\n\n        this.provider.next(this.dataset);\n    }\n\n    /**\n     * Create nodes and edges for the given aggregation item and adds them\n     * to the dataset. By default (if the edge does not have a parse() function\n     * and there is no sourceNode), the aggregation is assumed to be a cross-\n     * distribution, with items formatted as \"Bill Gates/Microsoft\".\n     * @param item the aggregation item to process\n     * @param aggregation the aggregation from which the item comes from\n     * @param type the type of the edge corresponding to that aggregation\n     * @param sourceNode if provided, will assume the distribution is 1-dimensional and attach each new node to that source node\n     */\n    addAggregationNodes(item: AggregationItem, aggregation: Aggregation, type: AggregationEdgeType, sourceNode?: Node) {\n\n        let rawData: AggregationData | undefined;\n\n        if(type.parse) {\n            rawData = type.parse(item, type);\n        }\n        else {\n            // Source distributions are at least two-dimensional\n            if(!sourceNode) {\n                if(!item.display){\n                    throw new Error(`Aggregation Item '${item.value}' has no display value`);\n                }\n                // Default parsing, assuming cross-distribution format (\"Apple/Steve Jobs\")\n                const displays = item.display.split(\"/\");\n                const expr = this.context.appService.parseExpr(item.value.toString()) as Expr;\n                const values = expr.operands.map(e => e.value!);\n                if(values.length  0){\n                    const relation = rawData.relations? rawData.relations[i-1] : undefined;\n                    const directed = rawData.directed? rawData.directed[i-1] : false;\n                    data.addEdges(this.createEdge(type, lastNode!, node, rawData.fieldValue, true, {aggregation, aggregationItem: item}, item.count, directed, relation));\n                }\n                lastNode = node;\n            }\n            this.dataset.merge(data);\n        }\n    }\n\n\n    // NetworkProvider interface\n\n    /** \n     * Retrieves the aggregation data synchronously or asynchronously, and updates the dataset with it.\n     */\n    getData(context: NetworkContext) {\n        this.context = context;\n        this.dataset.clear();\n\n        // Initialize the counts\n        this.edgeTypes.forEach(type => this.skips[type.aggregation] = 0);\n\n        // Fetch the \"source\" aggregation edges\n        const types = this.edgeTypes.filter(type => type.trigger === \"source\");\n\n        if(this.active && types.length > 0) {\n            this.fetchAggregations(types);\n        }\n        else {            \n            this.provider.next(this.dataset); // avoid undefined dataset when edge trigger !== source\n        }\n    }\n\n    /**\n     * Called when a node in the network is clicked.\n     * If one edge has an \"onclick\" trigger we potentially expand that\n     * clicked node.\n     * @param node the clicked node\n     */\n    onNodeClicked(node?: Node) {\n        if(this.active && node) {\n            const types = this.edgeTypes.filter(type => type.trigger === \"onclick\" && type.nodeTypes[0] === node.type);\n            if(types.length > 0) {\n                types.forEach(type => {\n                    if(this.skips[type.aggregation+node.id] === undefined) {\n                        // We need to skip the already connected nodes\n                        const connectedNodes = this.dataset.getConnectedNodes(node.id)\n                            .filter(node => node.type === type.nodeTypes[1]);\n                        this.skips[type.aggregation+node.id] = connectedNodes.length;\n                    }\n                });\n                this.fetchAggregations(types, node);\n            }\n        }\n    }\n\n    /**\n     * Called to generate the list of actions specific to this provider.\n     * We display actions allowing to add additional data for \"source\" edges\n     * (either all the source edges at once, or each individually).\n     */\n    getProviderActions(): Action[] {\n        const actions = super.getProviderActions();\n        const types = this.edgeTypes.filter(type => type.trigger === \"source\");\n        if(types.length > 0) {\n            actions.push(new Action({\n                icon: \"fas fa-plus-circle fa-fw\",\n                title: \"msg#network.actions.fetchMoreAll\",\n                text: \"msg#network.actions.fetchMoreAllText\",\n                action: () => {\n                    this.fetchAggregations(types);\n                },\n                disabled: !this.active\n            }));\n            actions.push(new Action({\n                separator: true\n            }));\n            types.forEach(type => {\n                actions.push(new Action({\n                    icon: \"fas fa-plus-circle fa-fw\",\n                    title: this.context.intlService.formatMessage(\"msg#network.actions.fetchMoreAgg\", {agg: type.aggregation}),\n                    text: type.aggregation,\n                    action: () => {\n                        this.fetchAggregations([type]);\n                    },\n                    disabled: !this.active\n                }))\n            });\n        }\n        return actions;\n    }\n\n    /**\n     * Called to generate the list of actions displayed for a specific node\n     * when it is clicked on.\n     * We display \"expand\" actions for the edges with a \"manual\" trigger.\n     * @param node The clicked node\n     */\n    getNodeActions(node: Node): Action[] {\n        const actions = super.getNodeActions(node);\n        if(this.active) {\n            const types = this.edgeTypes.filter(type => type.trigger === \"manual\" && type.nodeTypes[0] === node.type);\n            if(types.length === 1){\n                actions.push(this.createExpandAction(types[0], node));\n            }\n            else if(types.length > 1) {\n                actions.push(new Action({\n                    icon: \"fas fa-plus-circle\",\n                    title: this.context.intlService.formatMessage(\"msg#network.actions.expandNode\", {label: node.label}),\n                    children: types.map(type => this.createExpandAction(type, node, true))\n                }));\n            }\n        }\n        return actions;\n    }\n    \n    /**\n     * Convenience method to generate an expand action for a given node\n     * and given edge type.\n     * @param type The edge type for expanding the node\n     * @param node The node we wish to expand\n     * @param withtext Whether or not the action should have text (or just an icon)\n     */\n    protected createExpandAction(type: AggregationEdgeType, node: Node, withtext?: boolean): Action {\n        const title = this.context.intlService.formatMessage(\"msg#network.actions.expandNodeWith\", {agg: type.aggregation});\n        return new Action({\n            icon: \"fas fa-plus-circle fa-fw\",\n            title: title,\n            text: withtext? title : undefined,\n            action: () => {\n                if(this.skips[type.aggregation+node.id] === undefined) {\n                    // We need to skip the already connected nodes\n                    const connectedNodes = this.dataset.getConnectedNodes(node.id)\n                        .filter(node => node.type === type.nodeTypes[1]);\n                    this.skips[type.aggregation+node.id] = connectedNodes.length;\n                }\n                this.fetchAggregations([type], node);\n            },\n        })\n    }\n\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/AggregationEdge.html":{"url":"interfaces/AggregationEdge.html","title":"interface - AggregationEdge","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  AggregationEdge\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            network/providers/aggregation-provider.ts\n        \n\n            \n                Description\n            \n            \n                Extension of the Edge interface, to store the aggregation and\naggregation items from which the edge is constructed\n\n            \n\n            \n                Extends\n            \n            \n                        Edge\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        aggregation\n                                \n                                \n                                        aggregationItem\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        aggregation\n                                    \n                                \n                                \n                                    \n                                        aggregation:     Aggregation\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Aggregation\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        aggregationItem\n                                    \n                                \n                                \n                                    \n                                        aggregationItem:     AggregationItem\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     AggregationItem\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Aggregation, AggregationItem } from '@sinequa/core/web-services';\nimport { Node, Edge, EdgeType, NetworkDataset, NetworkContext } from '../network-models';\nimport { Action } from '@sinequa/components/action';\nimport { Query, Expr } from '@sinequa/core/app-utils';\nimport { Utils } from '@sinequa/core/base';\nimport { BaseProvider } from './base-provider';\n\n/**\n * Extension of the Edge interface, to store the aggregation and\n * aggregation items from which the edge is constructed\n */\nexport interface AggregationEdge extends Edge {\n    aggregationItem: AggregationItem;\n    aggregation: Aggregation;\n}\n\n/**\n * Convenience structure for managing custom metadata types (like\n * cooccurrence entities). AggregationData is returned by the custom\n * parse() function of an AggregationEdgeType.\n */\nexport interface AggregationData {\n    values: string[]; // eg. LARRY PAGE, GOOGLE\n    displays: string[]; // eg. Larry Page, Google\n    relations?: string[]; // eg. Works At\n    directed?: boolean[]; // eg. true\n    fieldValue?: string; // A value on which to filter the data\n}\n\n/** Mode \"source\" means node are fetched and added systematically on getData() / other modes allow expanding an existing node*/\nexport type AggregationTriggerType = \"source\" | \"onclick\" | \"manual\";\n// TODO: Add support for \"oninsert\" (which might required additional complexity)\n\n/**\n * Extension of the EdgeType interface, specifying which aggregation is used\n * to generate the Edges, and additional options.\n */\nexport interface AggregationEdgeType extends EdgeType {\n    /** Name of the aggregation in the Web Service configuration */\n    aggregation: string;\n    /** If parse is provided, it is used to get the new nodes and edges. If not, the value is automatically converted into nodes, using nodeTypes[1] */\n    parse?: (item: AggregationItem, type: AggregationEdgeType) => AggregationData | undefined; // A cooccurrence aggregation might return 3 nodes and 2 edges\n    /** A parameter to define when the aggregation is fetched and nodes are added */\n    trigger: AggregationTriggerType;\n    /** Default number of items to fetch */\n    count?: number;\n    // TODO: add visibility modes ? (eg. existingNodes)\n}\n\n/**\n * Tests whether an EdgeType is an AggregationEdgeType\n * @param et an edge type\n */\nexport function isAggregationEdgeType(et: EdgeType): et is AggregationEdgeType {\n    return !!(et as AggregationEdgeType).aggregation;\n}\n\n/**\n * The Aggregation Provider generates nodes and edges from aggregations\n * fetched from the server.\n */\nexport class AggregationProvider extends BaseProvider {\n\n    /** Stores how many aggregation items have been fetched from the server for a given aggregation */\n    readonly skips: {[aggregation: string]: number} = {};\n\n    constructor(\n        public name: string,\n        protected edgeTypes: AggregationEdgeType[],\n        protected query?: Query\n    ) {\n        super(name);\n    }\n\n\n    /**\n     * Fetches the list of aggregations and updates the dataset\n     * @param types list of aggregation edge types\n     * @param sourceNode if provided, will compute the aggregation with a select to compute the aggregation for documents referencing that node\n     */\n    protected fetchAggregations(types: AggregationEdgeType[], sourceNode?: Node) {\n        \n        const query = Utils.copy(this.query || this.context.searchService.query);\n        query.action = \"aggregate\";\n        query.aggregations = {};\n        types.forEach(type => query.aggregations[type.aggregation] = {\n            skip: this.skips[type.aggregation+(sourceNode?.id || \"\")], \n            count: type.count || 10\n        });\n\n        if(sourceNode && sourceNode.type.field) {\n            query.addSelect(this.context.exprBuilder.makeExpr(sourceNode.type.field, this.getNodeValue(sourceNode)));\n        }\n\n        Object.keys(query.aggregations).forEach(aggregation => {\n            if(!this.context.appService.getCCAggregation(aggregation)) {\n                // This may not be a mistake if the aggregation belong to a different web service configuration\n                console.warn(`Aggregation '${aggregation}' does not exist in the Query web service configuration`);\n            }\n        });\n\n        this.context.searchService.getResults(query, undefined, {searchInactive: true}).subscribe(\n            results => {\n                this.updateDataset(results.aggregations, types, sourceNode);\n            }\n        );\n        \n    }\n\n    /**\n     * Fills the dataset with nodes and edges corresponding to\n     * the given aggregations data, and emits this new dataset.\n     * @param aggregations the list of aggregations to process\n     * @param types the corresponding edge types for each aggregation\n     */\n    protected updateDataset(aggregations: Aggregation[], types: AggregationEdgeType[], sourceNode?: Node) {\n\n        aggregations.forEach(aggregation => {\n            if(aggregation && aggregation.items) {\n                const type = types.find(type => Utils.eqNC(type.aggregation, aggregation.name));\n                if(type) {\n                    this.skips[type.aggregation+(sourceNode?.id || \"\")] += aggregation.items.length;\n                    aggregation.items.forEach(item => this.addAggregationNodes(item, aggregation, type, sourceNode));\n                }\n            }\n        });\n\n        this.provider.next(this.dataset);\n    }\n\n    /**\n     * Create nodes and edges for the given aggregation item and adds them\n     * to the dataset. By default (if the edge does not have a parse() function\n     * and there is no sourceNode), the aggregation is assumed to be a cross-\n     * distribution, with items formatted as \"Bill Gates/Microsoft\".\n     * @param item the aggregation item to process\n     * @param aggregation the aggregation from which the item comes from\n     * @param type the type of the edge corresponding to that aggregation\n     * @param sourceNode if provided, will assume the distribution is 1-dimensional and attach each new node to that source node\n     */\n    addAggregationNodes(item: AggregationItem, aggregation: Aggregation, type: AggregationEdgeType, sourceNode?: Node) {\n\n        let rawData: AggregationData | undefined;\n\n        if(type.parse) {\n            rawData = type.parse(item, type);\n        }\n        else {\n            // Source distributions are at least two-dimensional\n            if(!sourceNode) {\n                if(!item.display){\n                    throw new Error(`Aggregation Item '${item.value}' has no display value`);\n                }\n                // Default parsing, assuming cross-distribution format (\"Apple/Steve Jobs\")\n                const displays = item.display.split(\"/\");\n                const expr = this.context.appService.parseExpr(item.value.toString()) as Expr;\n                const values = expr.operands.map(e => e.value!);\n                if(values.length  0){\n                    const relation = rawData.relations? rawData.relations[i-1] : undefined;\n                    const directed = rawData.directed? rawData.directed[i-1] : false;\n                    data.addEdges(this.createEdge(type, lastNode!, node, rawData.fieldValue, true, {aggregation, aggregationItem: item}, item.count, directed, relation));\n                }\n                lastNode = node;\n            }\n            this.dataset.merge(data);\n        }\n    }\n\n\n    // NetworkProvider interface\n\n    /** \n     * Retrieves the aggregation data synchronously or asynchronously, and updates the dataset with it.\n     */\n    getData(context: NetworkContext) {\n        this.context = context;\n        this.dataset.clear();\n\n        // Initialize the counts\n        this.edgeTypes.forEach(type => this.skips[type.aggregation] = 0);\n\n        // Fetch the \"source\" aggregation edges\n        const types = this.edgeTypes.filter(type => type.trigger === \"source\");\n\n        if(this.active && types.length > 0) {\n            this.fetchAggregations(types);\n        }\n        else {            \n            this.provider.next(this.dataset); // avoid undefined dataset when edge trigger !== source\n        }\n    }\n\n    /**\n     * Called when a node in the network is clicked.\n     * If one edge has an \"onclick\" trigger we potentially expand that\n     * clicked node.\n     * @param node the clicked node\n     */\n    onNodeClicked(node?: Node) {\n        if(this.active && node) {\n            const types = this.edgeTypes.filter(type => type.trigger === \"onclick\" && type.nodeTypes[0] === node.type);\n            if(types.length > 0) {\n                types.forEach(type => {\n                    if(this.skips[type.aggregation+node.id] === undefined) {\n                        // We need to skip the already connected nodes\n                        const connectedNodes = this.dataset.getConnectedNodes(node.id)\n                            .filter(node => node.type === type.nodeTypes[1]);\n                        this.skips[type.aggregation+node.id] = connectedNodes.length;\n                    }\n                });\n                this.fetchAggregations(types, node);\n            }\n        }\n    }\n\n    /**\n     * Called to generate the list of actions specific to this provider.\n     * We display actions allowing to add additional data for \"source\" edges\n     * (either all the source edges at once, or each individually).\n     */\n    getProviderActions(): Action[] {\n        const actions = super.getProviderActions();\n        const types = this.edgeTypes.filter(type => type.trigger === \"source\");\n        if(types.length > 0) {\n            actions.push(new Action({\n                icon: \"fas fa-plus-circle fa-fw\",\n                title: \"msg#network.actions.fetchMoreAll\",\n                text: \"msg#network.actions.fetchMoreAllText\",\n                action: () => {\n                    this.fetchAggregations(types);\n                },\n                disabled: !this.active\n            }));\n            actions.push(new Action({\n                separator: true\n            }));\n            types.forEach(type => {\n                actions.push(new Action({\n                    icon: \"fas fa-plus-circle fa-fw\",\n                    title: this.context.intlService.formatMessage(\"msg#network.actions.fetchMoreAgg\", {agg: type.aggregation}),\n                    text: type.aggregation,\n                    action: () => {\n                        this.fetchAggregations([type]);\n                    },\n                    disabled: !this.active\n                }))\n            });\n        }\n        return actions;\n    }\n\n    /**\n     * Called to generate the list of actions displayed for a specific node\n     * when it is clicked on.\n     * We display \"expand\" actions for the edges with a \"manual\" trigger.\n     * @param node The clicked node\n     */\n    getNodeActions(node: Node): Action[] {\n        const actions = super.getNodeActions(node);\n        if(this.active) {\n            const types = this.edgeTypes.filter(type => type.trigger === \"manual\" && type.nodeTypes[0] === node.type);\n            if(types.length === 1){\n                actions.push(this.createExpandAction(types[0], node));\n            }\n            else if(types.length > 1) {\n                actions.push(new Action({\n                    icon: \"fas fa-plus-circle\",\n                    title: this.context.intlService.formatMessage(\"msg#network.actions.expandNode\", {label: node.label}),\n                    children: types.map(type => this.createExpandAction(type, node, true))\n                }));\n            }\n        }\n        return actions;\n    }\n    \n    /**\n     * Convenience method to generate an expand action for a given node\n     * and given edge type.\n     * @param type The edge type for expanding the node\n     * @param node The node we wish to expand\n     * @param withtext Whether or not the action should have text (or just an icon)\n     */\n    protected createExpandAction(type: AggregationEdgeType, node: Node, withtext?: boolean): Action {\n        const title = this.context.intlService.formatMessage(\"msg#network.actions.expandNodeWith\", {agg: type.aggregation});\n        return new Action({\n            icon: \"fas fa-plus-circle fa-fw\",\n            title: title,\n            text: withtext? title : undefined,\n            action: () => {\n                if(this.skips[type.aggregation+node.id] === undefined) {\n                    // We need to skip the already connected nodes\n                    const connectedNodes = this.dataset.getConnectedNodes(node.id)\n                        .filter(node => node.type === type.nodeTypes[1]);\n                    this.skips[type.aggregation+node.id] = connectedNodes.length;\n                }\n                this.fetchAggregations([type], node);\n            },\n        })\n    }\n\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/AggregationEdgeType.html":{"url":"interfaces/AggregationEdgeType.html","title":"interface - AggregationEdgeType","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  AggregationEdgeType\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            network/providers/aggregation-provider.ts\n        \n\n            \n                Description\n            \n            \n                Extension of the EdgeType interface, specifying which aggregation is used\nto generate the Edges, and additional options.\n\n            \n\n            \n                Extends\n            \n            \n                        EdgeType\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        aggregation\n                                \n                                \n                                            Optional\n                                        count\n                                \n                                \n                                            Optional\n                                        parse\n                                \n                                \n                                        trigger\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        aggregation\n                                    \n                                \n                                \n                                    \n                                        aggregation:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Name of the aggregation in the Web Service configuration \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        count\n                                    \n                                \n                                \n                                    \n                                        count:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Default number of items to fetch \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        parse\n                                    \n                                \n                                \n                                    \n                                        parse:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    If parse is provided, it is used to get the new nodes and edges. If not, the value is automatically converted into nodes, using nodeTypes[1] \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        trigger\n                                    \n                                \n                                \n                                    \n                                        trigger:         AggregationTriggerType\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         AggregationTriggerType\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    A parameter to define when the aggregation is fetched and nodes are added \n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { Aggregation, AggregationItem } from '@sinequa/core/web-services';\nimport { Node, Edge, EdgeType, NetworkDataset, NetworkContext } from '../network-models';\nimport { Action } from '@sinequa/components/action';\nimport { Query, Expr } from '@sinequa/core/app-utils';\nimport { Utils } from '@sinequa/core/base';\nimport { BaseProvider } from './base-provider';\n\n/**\n * Extension of the Edge interface, to store the aggregation and\n * aggregation items from which the edge is constructed\n */\nexport interface AggregationEdge extends Edge {\n    aggregationItem: AggregationItem;\n    aggregation: Aggregation;\n}\n\n/**\n * Convenience structure for managing custom metadata types (like\n * cooccurrence entities). AggregationData is returned by the custom\n * parse() function of an AggregationEdgeType.\n */\nexport interface AggregationData {\n    values: string[]; // eg. LARRY PAGE, GOOGLE\n    displays: string[]; // eg. Larry Page, Google\n    relations?: string[]; // eg. Works At\n    directed?: boolean[]; // eg. true\n    fieldValue?: string; // A value on which to filter the data\n}\n\n/** Mode \"source\" means node are fetched and added systematically on getData() / other modes allow expanding an existing node*/\nexport type AggregationTriggerType = \"source\" | \"onclick\" | \"manual\";\n// TODO: Add support for \"oninsert\" (which might required additional complexity)\n\n/**\n * Extension of the EdgeType interface, specifying which aggregation is used\n * to generate the Edges, and additional options.\n */\nexport interface AggregationEdgeType extends EdgeType {\n    /** Name of the aggregation in the Web Service configuration */\n    aggregation: string;\n    /** If parse is provided, it is used to get the new nodes and edges. If not, the value is automatically converted into nodes, using nodeTypes[1] */\n    parse?: (item: AggregationItem, type: AggregationEdgeType) => AggregationData | undefined; // A cooccurrence aggregation might return 3 nodes and 2 edges\n    /** A parameter to define when the aggregation is fetched and nodes are added */\n    trigger: AggregationTriggerType;\n    /** Default number of items to fetch */\n    count?: number;\n    // TODO: add visibility modes ? (eg. existingNodes)\n}\n\n/**\n * Tests whether an EdgeType is an AggregationEdgeType\n * @param et an edge type\n */\nexport function isAggregationEdgeType(et: EdgeType): et is AggregationEdgeType {\n    return !!(et as AggregationEdgeType).aggregation;\n}\n\n/**\n * The Aggregation Provider generates nodes and edges from aggregations\n * fetched from the server.\n */\nexport class AggregationProvider extends BaseProvider {\n\n    /** Stores how many aggregation items have been fetched from the server for a given aggregation */\n    readonly skips: {[aggregation: string]: number} = {};\n\n    constructor(\n        public name: string,\n        protected edgeTypes: AggregationEdgeType[],\n        protected query?: Query\n    ) {\n        super(name);\n    }\n\n\n    /**\n     * Fetches the list of aggregations and updates the dataset\n     * @param types list of aggregation edge types\n     * @param sourceNode if provided, will compute the aggregation with a select to compute the aggregation for documents referencing that node\n     */\n    protected fetchAggregations(types: AggregationEdgeType[], sourceNode?: Node) {\n        \n        const query = Utils.copy(this.query || this.context.searchService.query);\n        query.action = \"aggregate\";\n        query.aggregations = {};\n        types.forEach(type => query.aggregations[type.aggregation] = {\n            skip: this.skips[type.aggregation+(sourceNode?.id || \"\")], \n            count: type.count || 10\n        });\n\n        if(sourceNode && sourceNode.type.field) {\n            query.addSelect(this.context.exprBuilder.makeExpr(sourceNode.type.field, this.getNodeValue(sourceNode)));\n        }\n\n        Object.keys(query.aggregations).forEach(aggregation => {\n            if(!this.context.appService.getCCAggregation(aggregation)) {\n                // This may not be a mistake if the aggregation belong to a different web service configuration\n                console.warn(`Aggregation '${aggregation}' does not exist in the Query web service configuration`);\n            }\n        });\n\n        this.context.searchService.getResults(query, undefined, {searchInactive: true}).subscribe(\n            results => {\n                this.updateDataset(results.aggregations, types, sourceNode);\n            }\n        );\n        \n    }\n\n    /**\n     * Fills the dataset with nodes and edges corresponding to\n     * the given aggregations data, and emits this new dataset.\n     * @param aggregations the list of aggregations to process\n     * @param types the corresponding edge types for each aggregation\n     */\n    protected updateDataset(aggregations: Aggregation[], types: AggregationEdgeType[], sourceNode?: Node) {\n\n        aggregations.forEach(aggregation => {\n            if(aggregation && aggregation.items) {\n                const type = types.find(type => Utils.eqNC(type.aggregation, aggregation.name));\n                if(type) {\n                    this.skips[type.aggregation+(sourceNode?.id || \"\")] += aggregation.items.length;\n                    aggregation.items.forEach(item => this.addAggregationNodes(item, aggregation, type, sourceNode));\n                }\n            }\n        });\n\n        this.provider.next(this.dataset);\n    }\n\n    /**\n     * Create nodes and edges for the given aggregation item and adds them\n     * to the dataset. By default (if the edge does not have a parse() function\n     * and there is no sourceNode), the aggregation is assumed to be a cross-\n     * distribution, with items formatted as \"Bill Gates/Microsoft\".\n     * @param item the aggregation item to process\n     * @param aggregation the aggregation from which the item comes from\n     * @param type the type of the edge corresponding to that aggregation\n     * @param sourceNode if provided, will assume the distribution is 1-dimensional and attach each new node to that source node\n     */\n    addAggregationNodes(item: AggregationItem, aggregation: Aggregation, type: AggregationEdgeType, sourceNode?: Node) {\n\n        let rawData: AggregationData | undefined;\n\n        if(type.parse) {\n            rawData = type.parse(item, type);\n        }\n        else {\n            // Source distributions are at least two-dimensional\n            if(!sourceNode) {\n                if(!item.display){\n                    throw new Error(`Aggregation Item '${item.value}' has no display value`);\n                }\n                // Default parsing, assuming cross-distribution format (\"Apple/Steve Jobs\")\n                const displays = item.display.split(\"/\");\n                const expr = this.context.appService.parseExpr(item.value.toString()) as Expr;\n                const values = expr.operands.map(e => e.value!);\n                if(values.length  0){\n                    const relation = rawData.relations? rawData.relations[i-1] : undefined;\n                    const directed = rawData.directed? rawData.directed[i-1] : false;\n                    data.addEdges(this.createEdge(type, lastNode!, node, rawData.fieldValue, true, {aggregation, aggregationItem: item}, item.count, directed, relation));\n                }\n                lastNode = node;\n            }\n            this.dataset.merge(data);\n        }\n    }\n\n\n    // NetworkProvider interface\n\n    /** \n     * Retrieves the aggregation data synchronously or asynchronously, and updates the dataset with it.\n     */\n    getData(context: NetworkContext) {\n        this.context = context;\n        this.dataset.clear();\n\n        // Initialize the counts\n        this.edgeTypes.forEach(type => this.skips[type.aggregation] = 0);\n\n        // Fetch the \"source\" aggregation edges\n        const types = this.edgeTypes.filter(type => type.trigger === \"source\");\n\n        if(this.active && types.length > 0) {\n            this.fetchAggregations(types);\n        }\n        else {            \n            this.provider.next(this.dataset); // avoid undefined dataset when edge trigger !== source\n        }\n    }\n\n    /**\n     * Called when a node in the network is clicked.\n     * If one edge has an \"onclick\" trigger we potentially expand that\n     * clicked node.\n     * @param node the clicked node\n     */\n    onNodeClicked(node?: Node) {\n        if(this.active && node) {\n            const types = this.edgeTypes.filter(type => type.trigger === \"onclick\" && type.nodeTypes[0] === node.type);\n            if(types.length > 0) {\n                types.forEach(type => {\n                    if(this.skips[type.aggregation+node.id] === undefined) {\n                        // We need to skip the already connected nodes\n                        const connectedNodes = this.dataset.getConnectedNodes(node.id)\n                            .filter(node => node.type === type.nodeTypes[1]);\n                        this.skips[type.aggregation+node.id] = connectedNodes.length;\n                    }\n                });\n                this.fetchAggregations(types, node);\n            }\n        }\n    }\n\n    /**\n     * Called to generate the list of actions specific to this provider.\n     * We display actions allowing to add additional data for \"source\" edges\n     * (either all the source edges at once, or each individually).\n     */\n    getProviderActions(): Action[] {\n        const actions = super.getProviderActions();\n        const types = this.edgeTypes.filter(type => type.trigger === \"source\");\n        if(types.length > 0) {\n            actions.push(new Action({\n                icon: \"fas fa-plus-circle fa-fw\",\n                title: \"msg#network.actions.fetchMoreAll\",\n                text: \"msg#network.actions.fetchMoreAllText\",\n                action: () => {\n                    this.fetchAggregations(types);\n                },\n                disabled: !this.active\n            }));\n            actions.push(new Action({\n                separator: true\n            }));\n            types.forEach(type => {\n                actions.push(new Action({\n                    icon: \"fas fa-plus-circle fa-fw\",\n                    title: this.context.intlService.formatMessage(\"msg#network.actions.fetchMoreAgg\", {agg: type.aggregation}),\n                    text: type.aggregation,\n                    action: () => {\n                        this.fetchAggregations([type]);\n                    },\n                    disabled: !this.active\n                }))\n            });\n        }\n        return actions;\n    }\n\n    /**\n     * Called to generate the list of actions displayed for a specific node\n     * when it is clicked on.\n     * We display \"expand\" actions for the edges with a \"manual\" trigger.\n     * @param node The clicked node\n     */\n    getNodeActions(node: Node): Action[] {\n        const actions = super.getNodeActions(node);\n        if(this.active) {\n            const types = this.edgeTypes.filter(type => type.trigger === \"manual\" && type.nodeTypes[0] === node.type);\n            if(types.length === 1){\n                actions.push(this.createExpandAction(types[0], node));\n            }\n            else if(types.length > 1) {\n                actions.push(new Action({\n                    icon: \"fas fa-plus-circle\",\n                    title: this.context.intlService.formatMessage(\"msg#network.actions.expandNode\", {label: node.label}),\n                    children: types.map(type => this.createExpandAction(type, node, true))\n                }));\n            }\n        }\n        return actions;\n    }\n    \n    /**\n     * Convenience method to generate an expand action for a given node\n     * and given edge type.\n     * @param type The edge type for expanding the node\n     * @param node The node we wish to expand\n     * @param withtext Whether or not the action should have text (or just an icon)\n     */\n    protected createExpandAction(type: AggregationEdgeType, node: Node, withtext?: boolean): Action {\n        const title = this.context.intlService.formatMessage(\"msg#network.actions.expandNodeWith\", {agg: type.aggregation});\n        return new Action({\n            icon: \"fas fa-plus-circle fa-fw\",\n            title: title,\n            text: withtext? title : undefined,\n            action: () => {\n                if(this.skips[type.aggregation+node.id] === undefined) {\n                    // We need to skip the already connected nodes\n                    const connectedNodes = this.dataset.getConnectedNodes(node.id)\n                        .filter(node => node.type === type.nodeTypes[1]);\n                    this.skips[type.aggregation+node.id] = connectedNodes.length;\n                }\n                this.fetchAggregations([type], node);\n            },\n        })\n    }\n\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/AsyncRecordsProvider.html":{"url":"classes/AsyncRecordsProvider.html","title":"class - AsyncRecordsProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AsyncRecordsProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            network/providers/async-records-provider.ts\n        \n\n            \n                Description\n            \n            \n                An extension of RecordsProviders where the records are not provided\ndirectly, but instead fetched from the server via a given Query object.\n\n            \n\n            \n                Extends\n            \n            \n                        RecordsProvider\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                name\n                            \n                            \n                                    Public\n                                name\n                            \n                            \n                                    Public\n                                    Readonly\n                                activateAction\n                            \n                            \n                                    Public\n                                active\n                            \n                            \n                                    Public\n                                context\n                            \n                            \n                                    Public\n                                dataset\n                            \n                            \n                                    Public\n                                    Readonly\n                                EDGESEPARATOR\n                            \n                            \n                                    Public\n                                name\n                            \n                            \n                                    Public\n                                    Readonly\n                                resetAction\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getData\n                            \n                            \n                                    Public\n                                setQuery\n                            \n                            \n                                getData\n                            \n                            \n                                getNodeActions\n                            \n                            \n                                getProviderActions\n                            \n                            \n                                onDatasetsMerged\n                            \n                            \n                                onNodeClicked\n                            \n                            \n                                getData\n                            \n                            \n                                getEdgeActions\n                            \n                            \n                                getNodeActions\n                            \n                            \n                                getProvider\n                            \n                            \n                                getProviderActions\n                            \n                            \n                                onDatasetsMerged\n                            \n                            \n                                onDestroy\n                            \n                            \n                                onEdgeClicked\n                            \n                            \n                                onNodeClicked\n                            \n                            \n                                onNodesInserted\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(name: string, nodeType: NodeType, edgeTypes: StructuralEdgeType[], query: Query, hideRecordNode)\n                    \n                \n                        \n                            \n                                Defined in network/providers/async-records-provider.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        name\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        nodeType\n                                                  \n                                                        \n                                                                        NodeType\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        edgeTypes\n                                                  \n                                                        \n                                                                    StructuralEdgeType[]\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        query\n                                                  \n                                                        \n                                                                        Query\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        hideRecordNode\n                                                  \n                                                        \n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            name\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in network/providers/async-records-provider.ts:13\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            name\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : \"Documents\"\n                        \n                    \n                            \n                                \n                                    Inherited from         RecordsProvider\n\n                                \n                            \n                        \n                            \n                                    Defined in         RecordsProvider:68\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                                Readonly\n                            activateAction\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Action\n\n                        \n                    \n                            \n                                \n                                    Inherited from         BaseProvider\n\n                                \n                            \n                        \n                            \n                                    Defined in         BaseProvider:21\n\n                            \n                        \n\n                \n                    \n                        Action to turn the provider on or off \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            active\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : true\n                        \n                    \n                            \n                                \n                                    Inherited from         BaseProvider\n\n                                \n                            \n                        \n                            \n                                    Defined in         BaseProvider:16\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            context\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         NetworkContext\n\n                        \n                    \n                            \n                                \n                                    Inherited from         BaseProvider\n\n                                \n                            \n                        \n                            \n                                    Defined in         BaseProvider:25\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            dataset\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : new NetworkDataset()\n                        \n                    \n                            \n                                \n                                    Inherited from         BaseProvider\n\n                                \n                            \n                        \n                            \n                                    Defined in         BaseProvider:15\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                                Readonly\n                            EDGESEPARATOR\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : \"~~~EDGE~~~\"\n                        \n                    \n                            \n                                \n                                    Inherited from         BaseProvider\n\n                                \n                            \n                        \n                            \n                                    Defined in         BaseProvider:18\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            name\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                            \n                                \n                                    Inherited from         BaseProvider\n\n                                \n                            \n                        \n                            \n                                    Defined in         BaseProvider:28\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                                Readonly\n                            resetAction\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Action\n\n                        \n                    \n                            \n                                \n                                    Inherited from         BaseProvider\n\n                                \n                            \n                        \n                            \n                                    Defined in         BaseProvider:23\n\n                            \n                        \n\n                \n                    \n                        Action to reset the provider \n\n                    \n                \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getData\n                        \n                        \n                    \n                \n            \n            \n                \ngetData(context: NetworkContext)\n                \n            \n\n\n            \n                \n                    Defined in network/providers/async-records-provider.ts:38\n                \n            \n\n\n            \n                \n                    Updates the dataset after an asynchronous call to retrieve the records.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                                NetworkContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            setQuery\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    setQuery(query: Query)\n                \n            \n\n\n            \n                \n                    Defined in network/providers/async-records-provider.ts:28\n                \n            \n\n\n            \n                \n                    Sets a new query to asynchronous records providers.\nIt will be used on the next call to getData()\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    query\n                                    \n                                                Query\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The query object we want to use to fetch records\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getData\n                        \n                        \n                    \n                \n            \n            \n                \ngetData(context: NetworkContext)\n                \n            \n\n\n            \n                \n                    Inherited from         RecordsProvider\n\n                \n            \n            \n                \n                        Defined in         RecordsProvider:256\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                                NetworkContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getNodeActions\n                        \n                        \n                    \n                \n            \n            \n                \ngetNodeActions(node: Node)\n                \n            \n\n\n            \n                \n                    Inherited from         RecordsProvider\n\n                \n            \n            \n                \n                        Defined in         RecordsProvider:331\n\n                \n            \n\n\n            \n                \n                    Creates actions for expanding and/or collapsing a record node that was clicked.\nexpanding and collapsing will act on the visibility of the structural edges\nattached to this node.\nBoth actions might be displayed at the same time, if the node is in an intermediate\nstate.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    node\n                                    \n                                                Node\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Action[]\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getProviderActions\n                        \n                        \n                    \n                \n            \n            \n                \ngetProviderActions()\n                \n            \n\n\n            \n                \n                    Inherited from         RecordsProvider\n\n                \n            \n            \n                \n                        Defined in         RecordsProvider:319\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     Action[]\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            onDatasetsMerged\n                        \n                        \n                    \n                \n            \n            \n                \nonDatasetsMerged(dataset: NetworkDataset)\n                \n            \n\n\n            \n                \n                    Inherited from         RecordsProvider\n\n                \n            \n            \n                \n                        Defined in         RecordsProvider:269\n\n                \n            \n\n\n            \n                \n                    This function adjusts the visibility of nodes for the visibility\ntype \"existingnode\", so that nodes with only one neighbor (post-merge)\nare collapsed.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    dataset\n                                    \n                                                NetworkDataset\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The dataset resulting of the merge of all the datasets\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            onNodeClicked\n                        \n                        \n                    \n                \n            \n            \n                \nonNodeClicked(node?: Node)\n                \n            \n\n\n            \n                \n                    Inherited from         RecordsProvider\n\n                \n            \n            \n                \n                        Defined in         RecordsProvider:296\n\n                \n            \n\n\n            \n                \n                    Adjust visibility of nodes and edges, for structural edges with\ntype.trigger = onclick. These nodes will only be shown once their\nrecord node is clicked on.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    node\n                                    \n                                                Node\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        A node that was clicked\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getData\n                        \n                        \n                    \n                \n            \n            \n                \ngetData(context: NetworkContext)\n                \n            \n\n\n            \n                \n                    Inherited from         BaseProvider\n\n                \n            \n            \n                \n                        Defined in         BaseProvider:155\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                                NetworkContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getEdgeActions\n                        \n                        \n                    \n                \n            \n            \n                \ngetEdgeActions(edge: Edge)\n                \n            \n\n\n            \n                \n                    Inherited from         BaseProvider\n\n                \n            \n            \n                \n                        Defined in         BaseProvider:211\n\n                \n            \n\n\n            \n                \n                    By default the base provider includes an action to filter the search if a clicked\nedge has a \"type.field\" property and a \"fieldValue\" (alternatively, an action\nis created if the 2 adjacent nodes can be filtered, ie they both have a \"field\"\nproperty)\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    edge\n                                    \n                                                Edge\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The clicked edge\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Action[]\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getNodeActions\n                        \n                        \n                    \n                \n            \n            \n                \ngetNodeActions(node: Node)\n                \n            \n\n\n            \n                \n                    Inherited from         BaseProvider\n\n                \n            \n            \n                \n                        Defined in         BaseProvider:188\n\n                \n            \n\n\n            \n                \n                    By default the base provider includes an action to filter the search if a clicked\nnode has a \"field\" property\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    node\n                                    \n                                                Node\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The clicked node\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Action[]\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getProvider\n                        \n                        \n                    \n                \n            \n            \n                \ngetProvider()\n                \n            \n\n\n            \n                \n                    Inherited from         BaseProvider\n\n                \n            \n            \n                \n                        Defined in         BaseProvider:151\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         Subject\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getProviderActions\n                        \n                        \n                    \n                \n            \n            \n                \ngetProviderActions()\n                \n            \n\n\n            \n                \n                    Inherited from         BaseProvider\n\n                \n            \n            \n                \n                        Defined in         BaseProvider:179\n\n                \n            \n\n\n            \n                \n                    By default, the base provider includes an action to turn the provider\non or off, and an action to reset the data from this provider\n\n\n                    \n                        Returns :     Action[]\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            onDatasetsMerged\n                        \n                        \n                    \n                \n            \n            \n                \nonDatasetsMerged(dataset: NetworkDataset)\n                \n            \n\n\n            \n                \n                    Inherited from         BaseProvider\n\n                \n            \n            \n                \n                        Defined in         BaseProvider:159\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dataset\n                                    \n                                                NetworkDataset\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            onDestroy\n                        \n                        \n                    \n                \n            \n            \n                \nonDestroy()\n                \n            \n\n\n            \n                \n                    Inherited from         BaseProvider\n\n                \n            \n            \n                \n                        Defined in         BaseProvider:245\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            onEdgeClicked\n                        \n                        \n                    \n                \n            \n            \n                \nonEdgeClicked(edge: Edge | undefined)\n                \n            \n\n\n            \n                \n                    Inherited from         BaseProvider\n\n                \n            \n            \n                \n                        Defined in         BaseProvider:171\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    edge\n                                    \n                                                Edge | undefined\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            onNodeClicked\n                        \n                        \n                    \n                \n            \n            \n                \nonNodeClicked(node: Node | undefined)\n                \n            \n\n\n            \n                \n                    Inherited from         BaseProvider\n\n                \n            \n            \n                \n                        Defined in         BaseProvider:167\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    node\n                                    \n                                                Node | undefined\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            onNodesInserted\n                        \n                        \n                    \n                \n            \n            \n                \nonNodesInserted(nodes: Node[])\n                \n            \n\n\n            \n                \n                    Inherited from         BaseProvider\n\n                \n            \n            \n                \n                        Defined in         BaseProvider:163\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    nodes\n                                    \n                                                Node[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Query } from '@sinequa/core/app-utils';\nimport { NodeType, NetworkContext } from '../network-models';\nimport { RecordsProvider, StructuralEdgeType } from './records-provider';\n\n\n/**\n * An extension of RecordsProviders where the records are not provided\n * directly, but instead fetched from the server via a given Query object.\n */\nexport class AsyncRecordsProvider extends RecordsProvider {\n\n    constructor(\n        public name: string,\n        protected nodeType: NodeType,\n        protected edgeTypes: StructuralEdgeType[],\n        protected query: Query,\n        protected hideRecordNode = false\n    ){\n        super(name, nodeType, edgeTypes, [], hideRecordNode);\n    }\n\n\n    /**\n     * Sets a new query to asynchronous records providers.\n     * It will be used on the next call to getData()\n     * @param query The query object we want to use to fetch records\n     */\n    public setQuery(query: Query) {\n        this.query = query;\n    }\n\n\n    // NetworkProvider interface\n\n    /**\n     * Updates the dataset after an asynchronous call to retrieve the records.\n     */\n    getData(context: NetworkContext) {\n        this.context = context;\n        // Query mode\n        this.context.searchService.getResults(this.query, undefined, {searchInactive: true})\n            .subscribe(results => {\n                this.updateDataset(results.records);\n                this.provider.next(this.dataset);\n            });\n    }\n\n}\n    \n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/BaseProvider.html":{"url":"classes/BaseProvider.html","title":"class - BaseProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  BaseProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            network/providers/base-provider.ts\n        \n\n            \n                Description\n            \n            \n                Base implementation of the NetworkProvider interface with convenience\nmethods to create nodes and edges, and default features which should apply\nto all providers.\n\n            \n\n\n            \n                Implements\n            \n            \n                            NetworkProvider\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Readonly\n                                activateAction\n                            \n                            \n                                    Public\n                                active\n                            \n                            \n                                    Public\n                                context\n                            \n                            \n                                    Public\n                                dataset\n                            \n                            \n                                    Public\n                                    Readonly\n                                EDGESEPARATOR\n                            \n                            \n                                    Public\n                                name\n                            \n                            \n                                    Public\n                                    Readonly\n                                resetAction\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getData\n                            \n                            \n                                getEdgeActions\n                            \n                            \n                                getNodeActions\n                            \n                            \n                                getProvider\n                            \n                            \n                                getProviderActions\n                            \n                            \n                                onDatasetsMerged\n                            \n                            \n                                onDestroy\n                            \n                            \n                                onEdgeClicked\n                            \n                            \n                                onNodeClicked\n                            \n                            \n                                onNodesInserted\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(name: string)\n                    \n                \n                        \n                            \n                                Defined in network/providers/base-provider.ts:25\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        name\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                                Readonly\n                            activateAction\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Action\n\n                        \n                    \n                        \n                            \n                                    Defined in network/providers/base-provider.ts:21\n                            \n                        \n\n                \n                    \n                        Action to turn the provider on or off \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            active\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : true\n                        \n                    \n                        \n                            \n                                    Defined in network/providers/base-provider.ts:16\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            context\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         NetworkContext\n\n                        \n                    \n                        \n                            \n                                    Defined in network/providers/base-provider.ts:25\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            dataset\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : new NetworkDataset()\n                        \n                    \n                        \n                            \n                                    Defined in network/providers/base-provider.ts:15\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                                Readonly\n                            EDGESEPARATOR\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : \"~~~EDGE~~~\"\n                        \n                    \n                        \n                            \n                                    Defined in network/providers/base-provider.ts:18\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            name\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in network/providers/base-provider.ts:28\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                                Readonly\n                            resetAction\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Action\n\n                        \n                    \n                        \n                            \n                                    Defined in network/providers/base-provider.ts:23\n                            \n                        \n\n                \n                    \n                        Action to reset the provider \n\n                    \n                \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getData\n                        \n                        \n                    \n                \n            \n            \n                \ngetData(context: NetworkContext)\n                \n            \n\n\n            \n                \n                    Defined in network/providers/base-provider.ts:155\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                                NetworkContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getEdgeActions\n                        \n                        \n                    \n                \n            \n            \n                \ngetEdgeActions(edge: Edge)\n                \n            \n\n\n            \n                \n                    Defined in network/providers/base-provider.ts:211\n                \n            \n\n\n            \n                \n                    By default the base provider includes an action to filter the search if a clicked\nedge has a \"type.field\" property and a \"fieldValue\" (alternatively, an action\nis created if the 2 adjacent nodes can be filtered, ie they both have a \"field\"\nproperty)\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    edge\n                                    \n                                                Edge\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The clicked edge\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Action[]\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getNodeActions\n                        \n                        \n                    \n                \n            \n            \n                \ngetNodeActions(node: Node)\n                \n            \n\n\n            \n                \n                    Defined in network/providers/base-provider.ts:188\n                \n            \n\n\n            \n                \n                    By default the base provider includes an action to filter the search if a clicked\nnode has a \"field\" property\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    node\n                                    \n                                                Node\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The clicked node\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Action[]\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getProvider\n                        \n                        \n                    \n                \n            \n            \n                \ngetProvider()\n                \n            \n\n\n            \n                \n                    Defined in network/providers/base-provider.ts:151\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         Subject\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getProviderActions\n                        \n                        \n                    \n                \n            \n            \n                \ngetProviderActions()\n                \n            \n\n\n            \n                \n                    Defined in network/providers/base-provider.ts:179\n                \n            \n\n\n            \n                \n                    By default, the base provider includes an action to turn the provider\non or off, and an action to reset the data from this provider\n\n\n                    \n                        Returns :     Action[]\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            onDatasetsMerged\n                        \n                        \n                    \n                \n            \n            \n                \nonDatasetsMerged(dataset: NetworkDataset)\n                \n            \n\n\n            \n                \n                    Defined in network/providers/base-provider.ts:159\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dataset\n                                    \n                                                NetworkDataset\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            onDestroy\n                        \n                        \n                    \n                \n            \n            \n                \nonDestroy()\n                \n            \n\n\n            \n                \n                    Defined in network/providers/base-provider.ts:245\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            onEdgeClicked\n                        \n                        \n                    \n                \n            \n            \n                \nonEdgeClicked(edge: Edge | undefined)\n                \n            \n\n\n            \n                \n                    Defined in network/providers/base-provider.ts:171\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    edge\n                                    \n                                                Edge | undefined\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            onNodeClicked\n                        \n                        \n                    \n                \n            \n            \n                \nonNodeClicked(node: Node | undefined)\n                \n            \n\n\n            \n                \n                    Defined in network/providers/base-provider.ts:167\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    node\n                                    \n                                                Node | undefined\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            onNodesInserted\n                        \n                        \n                    \n                \n            \n            \n                \nonNodesInserted(nodes: Node[])\n                \n            \n\n\n            \n                \n                    Defined in network/providers/base-provider.ts:163\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    nodes\n                                    \n                                                Node[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Utils } from '@sinequa/core/base';\nimport { Node, Edge, NodeType, EdgeType, NetworkProvider, NetworkDataset, NetworkContext} from '../network-models';\nimport { Subject } from 'rxjs';\nimport { Action } from '@sinequa/components/action';\n\n\n/**\n * Base implementation of the NetworkProvider interface with convenience\n * methods to create nodes and edges, and default features which should apply\n * to all providers.\n */\nexport class BaseProvider implements NetworkProvider {\n\n    protected readonly provider = new Subject();\n    public dataset = new NetworkDataset();\n    public active = true;\n\n    public readonly EDGESEPARATOR = \"~~~EDGE~~~\";\n\n    /** Action to turn the provider on or off */\n    public readonly activateAction: Action;\n    /** Action to reset the provider */\n    public readonly resetAction: Action;\n\n    public context: NetworkContext;\n\n    constructor(\n        public name: string\n    ) {\n        this.activateAction = new Action({\n            icon: this.active? \"fas fa-toggle-on fa-fw\" : \"fas fa-toggle-off fa-fw\",\n            text: this.active? \"msg#network.actions.active\" : \"msg#network.actions.inactive\",\n            title: \"msg#network.actions.toggle\",\n            action: (action: Action) => {\n                this.active = !this.active\n                action.icon = this.active? \"fas fa-toggle-on fa-fw\" : \"fas fa-toggle-off fa-fw\";\n                action.text = this.active? \"msg#network.actions.active\" : \"msg#network.actions.inactive\";\n                this.getData(this.context);\n            }\n        });\n        this.resetAction = new Action({\n            icon: \"fas fa-trash-alt fa-fw\",\n            text: \"msg#network.actions.reset\",\n            title: \"msg#network.actions.resetTitle\",\n            action: () => {\n                this.dataset.clear();\n                this.getData(this.context);\n            }\n        });\n    }\n\n    /** Returns a standard ID for an edge between two given nodes */\n    protected getEdgeId(node1: Node, node2: Node): string {\n        return node1.id + this.EDGESEPARATOR + node2.id;\n    }\n    \n    /** Returns a standard ID for a node with a given type and \"value\" */\n    protected getNodeId(type: NodeType, value: string): string {\n        return `${type.name}:${value}`;\n    }\n\n    /** Retrieves the \"value\" of the node from its ID */\n    protected getNodeValue(node: Node): string {\n        return node.id.substr(node.type.name.length+1);\n    }\n\n    /**\n     * Creates a new Node object\n     * @param type The NodeType of the node\n     * @param value The \"value\" of the node (eg. \"BILL GATES\")\n     * @param label (default: display = value) The \"display value\" of the node (eg. \"Bill Gates\")\n     * @param visible (default: true) Whether the node should be visible or not\n     * @param customProps (default: {}) Custom properties to add to the node object\n     * @param count (default: 1) A \"count\" property that can reflect the \"size\" or \"importance\" of the node in the network (note that the count property accumulates when nodes are merged)\n     */\n    protected createNode(type: NodeType, value: string, label?: string, visible = true, customProps = {}, count = 1): Node {\n        // Apply formatter if any\n        if(type.field) {\n            const col = this.context.appService.getColumn(type.field);\n            if(col?.formatter) {\n                label = this.context.appService.formatService.formatFieldValue({value, display: label}, col);\n            }\n        }\n        // Create node\n        const node: Node = {\n            id: this.getNodeId(type, value),\n            label: label || value,\n            type,\n            provider: this,\n            visible,\n            count,\n            context: this.context\n        }\n        Utils.extend(node, customProps);\n        let options;\n        if(typeof type.nodeOptions === \"function\") {\n            options = type.nodeOptions(node, type);\n        }\n        else {\n            options = type.nodeOptions;\n        }\n        return Utils.extend(node, options);\n    }\n    \n    /**\n     * Creates a new Edge object\n     * @param type The EdgeType of that Edge\n     * @param fromNode The \"from\" Node object to which this edge is attached\n     * @param toNode The \"to\" Node object to which this edge is attached\n     * @param fieldValue (default: undefined) An optional value, which, if provided, allows to filter the search with a select (\"type.field = fieldValue\")\n     * @param visible (default: true) Whether the edge should be visible or not\n     * @param customProps (default: {}) Custom properties to add to this edge\n     * @param count (default: 1) A \"count\" property that can reflect the \"size\" or \"importance\" of the edge in the network (note that the count property accumulates when edges are merged)\n     * @param directed (default: false) Whether the edge is directed or undirected. If true, an arrow is drawn on the edge.\n     * @param relation (default: undefined) If provided, the \"relation\" is a label displayed in the middle of the edge\n     */\n    protected createEdge(type: EdgeType, fromNode: Node, toNode: Node, fieldValue: string | undefined = undefined, visible = true, customProps = {}, count = 1, directed = false, relation?: string): Edge {\n        const edge: Edge = {\n            id: this.getEdgeId(fromNode, toNode),\n            from: fromNode.id,\n            to: toNode.id,\n            fieldValue,\n            type,\n            visible,\n            count,\n            provider: this,\n            context: this.context\n        }\n        Utils.extend(edge, customProps);\n        if(directed) {\n            edge[\"arrows\"] = {middle: {scaleFactor: 0.3, enabled: true}};\n        }\n        if(relation) {\n            edge[\"label\"] = relation;\n            edge[\"labels\"] = [relation];\n            edge[\"font\"] = {size: 5, color: \"#808080\"};            \n        }\n        let options: {[key: string]: any};\n        if(typeof type.edgeOptions === \"function\") {\n            options = type.edgeOptions([fromNode, toNode], edge, type);\n        }\n        else {\n            options = type.edgeOptions;\n        }\n        return Utils.extend(edge, options);\n    }\n    \n\n    // Implementation of the NetworkProvider interface\n\n    getProvider(): Subject {\n        return this.provider;\n    }\n\n    getData(context: NetworkContext) {\n        this.context = context;\n    }\n\n    onDatasetsMerged(dataset: NetworkDataset) {\n        \n    }\n\n    onNodesInserted(nodes: Node[]) {\n        \n    }\n    \n    onNodeClicked(node: Node | undefined) {\n        \n    }\n\n    onEdgeClicked(edge: Edge | undefined) {\n        \n    }\n\n    /**\n     * By default, the base provider includes an action to turn the provider\n     * on or off, and an action to reset the data from this provider\n     */\n    getProviderActions(): Action[] {\n        return [this.activateAction, this.resetAction];\n    }\n\n    /**\n     * By default the base provider includes an action to filter the search if a clicked\n     * node has a \"field\" property\n     * @param node The clicked node\n     */\n    getNodeActions(node: Node): Action[] {\n        const actions: Action[] = []\n        if(this.active && node.provider === this && node.type.field) {\n            actions.push(new Action({\n                icon: \"fas fa-filter\",\n                title: this.context.intlService.formatMessage(\"msg#network.actions.filterSearch\", {label: node.label}),\n                action: () => {\n                    const expr = this.context.exprBuilder.makeExpr(node.type.field!, this.getNodeValue(node), node.label);\n                    node.context.searchService.query.addSelect(expr, node.context.name);\n                    node.context.searchService.search();\n                }\n            }));\n        }\n        return actions;\n    }\n\n    /**\n     * By default the base provider includes an action to filter the search if a clicked\n     * edge has a \"type.field\" property and a \"fieldValue\" (alternatively, an action\n     * is created if the 2 adjacent nodes can be filtered, ie they both have a \"field\"\n     * property)\n     * @param edge The clicked edge\n     */\n    getEdgeActions(edge: Edge): Action[] {\n        const actions: Action[] = [];\n        const nodeFrom = edge.context.nodes.get(edge.from);\n        const nodeTo = edge.context.nodes.get(edge.to);\n        if(this.active && edge.provider === this) {\n            if(edge.type.field && edge.fieldValue) {\n                actions.push(new Action({\n                    icon: \"fas fa-filter\",\n                    title: this.context.intlService.formatMessage(\"msg#network.actions.filterSearch\", {label: edge.fieldValue}),\n                    action: () => {\n                        const expr = this.context.exprBuilder.makeExpr(edge.type.field!, edge.fieldValue!);\n                        edge.context.searchService.query.addSelect(expr, edge.context.name);\n                        edge.context.searchService.search();\n                    }\n                }));\n            }\n            else if(nodeFrom && nodeTo && nodeFrom.type.field && nodeTo.type.field) {\n                actions.push(new Action({\n                    icon: \"fas fa-filter\",\n                    title: this.context.intlService.formatMessage(\"msg#network.actions.filterSearch2\", {label1: nodeFrom.label, label2: nodeTo.label}),\n                    action: () => {\n                        const exprFrom = this.context.exprBuilder.makeExpr(nodeFrom.type.field!, this.getNodeValue(nodeFrom), nodeFrom.label);\n                        const exprTo = this.context.exprBuilder.makeExpr(nodeTo.type.field!, this.getNodeValue(nodeTo), nodeTo.label);\n                        const expr = this.context.exprBuilder.concatAndExpr([exprFrom, exprTo]);\n                        edge.context.searchService.query.addSelect(expr, edge.context.name);\n                        edge.context.searchService.search();\n                    }\n                }));\n            }\n            \n        }\n        return actions;\n    }\n\n    onDestroy() {\n        \n    }\n\n}\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/BsEdgeInfoCard.html":{"url":"components/BsEdgeInfoCard.html","title":"component - BsEdgeInfoCard","body":"\n                   \n\n\n\n\n\n  Components\n  BsEdgeInfoCard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    network/edge-info-card.component.ts\n\n\n\n\n    \n        Implements\n    \n    \n                    OnChanges\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                sq-edge-info-card\n            \n\n\n            \n                styles\n                \n.card {\n    top: 5px;\n    left: 0;\n    right: 0;\n    width: 80%;\n}\n.circular-image {\n    width: 1.5em;\n    height: 1.5em;\n    border-radius: 50%;\n    object-fit: cover;\n}\n    \n            \n\n\n            \n                templateUrl\n                edge-info-card.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                closed\n                            \n                            \n                                expanded\n                            \n                            \n                                fromNode\n                            \n                            \n                                toNode\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                focusNode\n                            \n                            \n                                ngOnChanges\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                edge\n                            \n                        \n                    \n                \n\n\n\n\n        \n    \n\n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        edge\n                    \n                \n                \n                    \n                        Type :         Edge\n\n                    \n                \n                        \n                            \n                                    Defined in network/edge-info-card.component.ts:24\n                            \n                        \n            \n        \n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            focusNode\n                        \n                        \n                    \n                \n            \n            \n                \nfocusNode(node: Node)\n                \n            \n\n\n            \n                \n                    Defined in network/edge-info-card.component.ts:40\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    node\n                                    \n                                                Node\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            ngOnChanges\n                        \n                        \n                    \n                \n            \n            \n                \nngOnChanges()\n                \n            \n\n\n            \n                \n                    Defined in network/edge-info-card.component.ts:32\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n    \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            closed\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                        \n                            \n                                    Defined in network/edge-info-card.component.ts:26\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            expanded\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                        \n                            \n                                    Defined in network/edge-info-card.component.ts:27\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            fromNode\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Node\n\n                        \n                    \n                        \n                            \n                                    Defined in network/edge-info-card.component.ts:29\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            toNode\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Node\n\n                        \n                    \n                        \n                            \n                                    Defined in network/edge-info-card.component.ts:30\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n    \n        import { Component, Input, OnChanges } from \"@angular/core\";\nimport { Node, Edge } from './network-models';\n\n\n@Component({\n    selector: \"sq-edge-info-card\",\n    templateUrl: \"edge-info-card.component.html\",\n    styles: [`\n.card {\n    top: 5px;\n    left: 0;\n    right: 0;\n    width: 80%;\n}\n.circular-image {\n    width: 1.5em;\n    height: 1.5em;\n    border-radius: 50%;\n    object-fit: cover;\n}\n    `]\n})\nexport class BsEdgeInfoCard implements OnChanges {\n    @Input() edge: Edge;\n\n    closed: boolean;\n    expanded: boolean;\n\n    fromNode: Node;\n    toNode: Node;\n\n    ngOnChanges() {\n        this.closed = false;\n        this.expanded = false;\n\n        this.fromNode = this.edge.context.nodes.get(this.edge.from) as Node;\n        this.toNode = this.edge.context.nodes.get(this.edge.to) as Node;\n    }\n\n    focusNode(node: Node) {\n        // Hack to gain access to the network instance (networkService does not have the focus() method)\n        const networkInstance = node.context.networkService['networks'][node.context.name];\n        networkInstance.focus(node.id, {animation: true}); // Move the view to this node with animation\n        networkInstance.selectNodes([node.id], true); // Warning: does not trigger events...\n        node.context.select(node, undefined); // Select the node to update info cards, actions\n        return false;\n    }\n}\n    \n\n    \n        \n    \n        \n            \n            -\n            \n\n            \n                \n            \n            \n                \n            \n        \n        \n            \n                {{ 'msg#network.infocards.count' | sqMessage }}:  {{edge.count}}\n                {{ 'msg#network.infocards.aggregation' | sqMessage }}:  {{edge['aggregation'].name}}\n                {{ 'msg#network.infocards.record' | sqMessage }}:  {{edge['record']['title']}}\n            \n        \n    \n\n\n\n    \n    {{node['icon']['code']}}\n    {{node.label}}\n     0\" class=\"mr-2 text-muted\" title=\"{{ 'msg#network.infocards.count' | sqMessage }}\">({{node.count}})\n\n    \n\n    \n            \n.card {\n    top: 5px;\n    left: 0;\n    right: 0;\n    width: 80%;\n}\n.circular-image {\n    width: 1.5em;\n    height: 1.5em;\n    border-radius: 50%;\n    object-fit: cover;\n}\n    \n\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '                                    -                                                                                                                                        {{ \\'msg#network.infocards.count\\' | sqMessage }}:  {{edge.count}}                {{ \\'msg#network.infocards.aggregation\\' | sqMessage }}:  {{edge[\\'aggregation\\'].name}}                {{ \\'msg#network.infocards.record\\' | sqMessage }}:  {{edge[\\'record\\'][\\'title\\']}}                                {{node[\\'icon\\'][\\'code\\']}}    {{node.label}}     0\" class=\"mr-2 text-muted\" title=\"{{ \\'msg#network.infocards.count\\' | sqMessage }}\">({{node.count}})'\n    var COMPONENTS = [{'name': 'BsEdgeInfoCard', 'selector': 'sq-edge-info-card'},{'name': 'BsFacetHeatmapComponent', 'selector': 'sq-facet-heatmap'},{'name': 'BsFacetTimelineComponent', 'selector': 'sq-facet-timeline'},{'name': 'BsHeatmapComponent', 'selector': 'sq-heatmap'},{'name': 'BsNodeInfoCard', 'selector': 'sq-node-info-card'},{'name': 'BsResultsHeatmapView', 'selector': 'sq-results-heatmap-view'},{'name': 'BsTimelineComponent', 'selector': 'sq-timeline'},{'name': 'BsTooltipComponent', 'selector': 'sq-tooltip'},{'name': 'FacetNgxChart', 'selector': 'sq-facet-ngx-chart'},{'name': 'FusionChart', 'selector': 'sq-fusion-chart'},{'name': 'MapComponent', 'selector': 'sq-googlemaps'},{'name': 'MoneyCloudComponent', 'selector': 'sq-money-cloud'},{'name': 'MoneyTimelineComponent', 'selector': 'sq-money-timeline'},{'name': 'NetworkComponent', 'selector': 'sq-network'},{'name': 'NgxChart', 'selector': 'sq-ngx-chart'},{'name': 'ResultTimeline', 'selector': 'sq-result-timeline'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'BsEdgeInfoCard'};\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/BsHeatmapComponent.html":{"url":"components/BsHeatmapComponent.html","title":"component - BsHeatmapComponent","body":"\n                   \n\n\n\n\n\n  Components\n  BsHeatmapComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    heatmap/bootstrap/heatmap.component.ts\n\n\n\n\n    \n        Implements\n    \n    \n                    OnChanges\n                    AfterViewInit\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                sq-heatmap\n            \n\n            \n                styleUrls\n                ./heatmap.component.scss\n            \n\n\n\n            \n                templateUrl\n                ./heatmap.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                color\n                            \n                            \n                                dataFiltered\n                            \n                            \n                                gx\n                            \n                            \n                                gy\n                            \n                            \n                                originalCount\n                            \n                            \n                                    Optional\n                                tooltipItem\n                            \n                            \n                                tooltipLeft\n                            \n                            \n                                tooltipOrientation\n                            \n                            \n                                tooltipRight\n                            \n                            \n                                tooltipTop\n                            \n                            \n                                viewInit\n                            \n                            \n                                wrap\n                            \n                            \n                                x\n                            \n                            \n                                xAxis\n                            \n                            \n                                y\n                            \n                            \n                                yAxis\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                buildChart\n                            \n                            \n                                getLegend\n                            \n                            \n                                ngAfterViewInit\n                            \n                            \n                                ngOnChanges\n                            \n                            \n                                onAxisClicked\n                            \n                            \n                                onItemClicked\n                            \n                            \n                                onMouseOver\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                axisClickable\n                            \n                            \n                                buckets\n                            \n                            \n                                colorScheme\n                            \n                            \n                                data\n                            \n                            \n                                height\n                            \n                            \n                                itemsClickable\n                            \n                            \n                                margin\n                            \n                            \n                                maxX\n                            \n                            \n                                maxY\n                            \n                            \n                                theme\n                            \n                            \n                                transition\n                            \n                            \n                                width\n                            \n                        \n                    \n                \n\n                \n                    \n                        Outputs\n                    \n                \n                \n                    \n                        \n                            \n                                axisClicked\n                            \n                            \n                                itemClicked\n                            \n                        \n                    \n                \n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(el: ElementRef)\n                    \n                \n                        \n                            \n                                Defined in heatmap/bootstrap/heatmap.component.ts:69\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        el\n                                                  \n                                                        \n                                                                        ElementRef\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        axisClickable\n                    \n                \n                \n                    \n                        Default value : true\n                    \n                \n                        \n                            \n                                    Defined in heatmap/bootstrap/heatmap.component.ts:33\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        buckets\n                    \n                \n                \n                    \n                        Default value : 9\n                    \n                \n                        \n                            \n                                    Defined in heatmap/bootstrap/heatmap.component.ts:36\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        colorScheme\n                    \n                \n                \n                    \n                        Default value : \"schemeBlues\"\n                    \n                \n                        \n                            \n                                    Defined in heatmap/bootstrap/heatmap.component.ts:37\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        data\n                    \n                \n                \n                    \n                        Type :         HeatmapItem[]\n\n                    \n                \n                        \n                            \n                                    Defined in heatmap/bootstrap/heatmap.component.ts:23\n                            \n                        \n                \n                    \n                        Raw data to display (will be filtered in function of maxX and maxY parameters)\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        height\n                    \n                \n                \n                    \n                        Default value : 600\n                    \n                \n                        \n                            \n                                    Defined in heatmap/bootstrap/heatmap.component.ts:26\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        itemsClickable\n                    \n                \n                \n                    \n                        Default value : true\n                    \n                \n                        \n                            \n                                    Defined in heatmap/bootstrap/heatmap.component.ts:32\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        margin\n                    \n                \n                \n                    \n                        Default value : {top: 100, bottom: 20, left: 100, right: 40}\n                    \n                \n                        \n                            \n                                    Defined in heatmap/bootstrap/heatmap.component.ts:28\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        maxX\n                    \n                \n                \n                    \n                        Default value : 20\n                    \n                \n                        \n                            \n                                    Defined in heatmap/bootstrap/heatmap.component.ts:38\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        maxY\n                    \n                \n                \n                    \n                        Default value : 20\n                    \n                \n                        \n                            \n                                    Defined in heatmap/bootstrap/heatmap.component.ts:39\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        theme\n                    \n                \n                \n                    \n                        Type :     \"light\" | \"dark\"\n\n                    \n                \n                \n                    \n                        Default value : \"light\"\n                    \n                \n                        \n                            \n                                    Defined in heatmap/bootstrap/heatmap.component.ts:40\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        transition\n                    \n                \n                \n                    \n                        Default value : 1000\n                    \n                \n                        \n                            \n                                    Defined in heatmap/bootstrap/heatmap.component.ts:29\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        width\n                    \n                \n                \n                    \n                        Default value : 600\n                    \n                \n                        \n                            \n                                    Defined in heatmap/bootstrap/heatmap.component.ts:27\n                            \n                        \n            \n        \n\n    \n    Outputs\n        \n            \n                \n                    \n                        \n                        axisClicked\n                    \n                \n                \n                    \n                        Type :         EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in heatmap/bootstrap/heatmap.component.ts:44\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        itemClicked\n                    \n                \n                \n                    \n                        Type :         EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in heatmap/bootstrap/heatmap.component.ts:43\n                            \n                        \n            \n        \n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            buildChart\n                        \n                        \n                    \n                \n            \n            \n                \nbuildChart(update?: boolean)\n                \n            \n\n\n            \n                \n                    Defined in heatmap/bootstrap/heatmap.component.ts:123\n                \n            \n\n\n            \n                \n                    buildChart() actually only builds the axes of the chart, since the\nrest is build automatically with Angular syntax in the template.\nWe build axis programmatically (with D3 selects) to benefit from the\nD3 abstractions and transitions.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    update\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getLegend\n                        \n                        \n                    \n                \n            \n            \n                \ngetLegend()\n                \n            \n\n\n            \n                \n                    Defined in heatmap/bootstrap/heatmap.component.ts:209\n                \n            \n\n\n            \n                \n                    Builds the list of legend items\n\n\n                    \n                        Returns :     {}\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            ngAfterViewInit\n                        \n                        \n                    \n                \n            \n            \n                \nngAfterViewInit()\n                \n            \n\n\n            \n                \n                    Defined in heatmap/bootstrap/heatmap.component.ts:108\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            ngOnChanges\n                        \n                        \n                    \n                \n            \n            \n                \nngOnChanges()\n                \n            \n\n\n            \n                \n                    Defined in heatmap/bootstrap/heatmap.component.ts:78\n                \n            \n\n\n            \n                \n                    ngOnChanges is used to respond to changes in the data (or chart parameter)\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            onAxisClicked\n                        \n                        \n                    \n                \n            \n            \n                \nonAxisClicked(value: string, axis: \"x\" | \"y\")\n                \n            \n\n\n            \n                \n                    Defined in heatmap/bootstrap/heatmap.component.ts:200\n                \n            \n\n\n            \n                \n                    Called when the user clicks on an axis item\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    axis\n                                    \n                                            \"x\" | \"y\"\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            onItemClicked\n                        \n                        \n                    \n                \n            \n            \n                \nonItemClicked(item: HeatmapItem)\n                \n            \n\n\n            \n                \n                    Defined in heatmap/bootstrap/heatmap.component.ts:189\n                \n            \n\n\n            \n                \n                    Called when the user clicks on a heatmap tile\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    item\n                                    \n                                                HeatmapItem\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            onMouseOver\n                        \n                        \n                    \n                \n            \n            \n                \nonMouseOver(item: HeatmapItem, event: MouseEvent)\n                \n            \n\n\n            \n                \n                    Defined in heatmap/bootstrap/heatmap.component.ts:160\n                \n            \n\n\n            \n                \n                    Called when the user hovers the mouse over a heatmap tile\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    item\n                                    \n                                                HeatmapItem\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    event\n                                    \n                                            MouseEvent\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n    \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            color\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     d3.ScaleQuantile\n\n                        \n                    \n                        \n                            \n                                    Defined in heatmap/bootstrap/heatmap.component.ts:49\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            dataFiltered\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         HeatmapItem[]\n\n                        \n                    \n                    \n                        \n                            Default value : []\n                        \n                    \n                        \n                            \n                                    Defined in heatmap/bootstrap/heatmap.component.ts:58\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            gx\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         ElementRef\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ViewChild('xAxis')\n                            \n                        \n                    \n                        \n                            \n                                    Defined in heatmap/bootstrap/heatmap.component.ts:52\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            gy\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         ElementRef\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ViewChild('yAxis')\n                            \n                        \n                    \n                        \n                            \n                                    Defined in heatmap/bootstrap/heatmap.component.ts:53\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            originalCount\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                        \n                            \n                                    Defined in heatmap/bootstrap/heatmap.component.ts:69\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            tooltipItem\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         HeatmapItem\n\n                        \n                    \n                        \n                            \n                                    Defined in heatmap/bootstrap/heatmap.component.ts:61\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            tooltipLeft\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                        \n                            \n                                    Defined in heatmap/bootstrap/heatmap.component.ts:65\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            tooltipOrientation\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     \"left\" | \"right\"\n\n                        \n                    \n                        \n                            \n                                    Defined in heatmap/bootstrap/heatmap.component.ts:62\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            tooltipRight\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                        \n                            \n                                    Defined in heatmap/bootstrap/heatmap.component.ts:64\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            tooltipTop\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                        \n                            \n                                    Defined in heatmap/bootstrap/heatmap.component.ts:63\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            viewInit\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                        \n                            \n                                    Defined in heatmap/bootstrap/heatmap.component.ts:68\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            wrap\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : () => {...}\n                        \n                    \n                        \n                            \n                                    Defined in heatmap/bootstrap/heatmap.component.ts:230\n                            \n                        \n\n                \n                    \n                        Truncates the axis strings to fit inside 90px width\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            x\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     d3.ScaleBand\n\n                        \n                    \n                        \n                            \n                                    Defined in heatmap/bootstrap/heatmap.component.ts:47\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            xAxis\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     d3.Selection\n\n                        \n                    \n                        \n                            \n                                    Defined in heatmap/bootstrap/heatmap.component.ts:54\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            y\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     d3.ScaleBand\n\n                        \n                    \n                        \n                            \n                                    Defined in heatmap/bootstrap/heatmap.component.ts:48\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            yAxis\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     d3.Selection\n\n                        \n                    \n                        \n                            \n                                    Defined in heatmap/bootstrap/heatmap.component.ts:55\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n    \n        import { Component, ElementRef, Output, EventEmitter, Input, ViewChild, OnChanges, AfterViewInit } from '@angular/core';\n\nimport * as d3 from 'd3';\n\nexport interface HeatmapItem {\n    x: string;\n    y: string;\n    count: number;\n    value: string;\n    display: string;\n    selected?: boolean;\n}\n\n@Component({\n    selector: \"sq-heatmap\",\n    templateUrl: \"./heatmap.component.html\",\n    styleUrls: ['./heatmap.component.scss']\n})\nexport class BsHeatmapComponent implements OnChanges, AfterViewInit {\n    /**\n     * Raw data to display (will be filtered in function of maxX and maxY parameters)\n     */\n    @Input() data: HeatmapItem[];\n\n    // Graphical parameters\n    @Input() height = 600;\n    @Input() width = 600;\n    @Input() margin = {top: 100, bottom: 20, left: 100, right: 40};\n    @Input() transition = 1000; // Transition time in ms (0 to avoid transitions)\n\n    // Interaction parameters\n    @Input() itemsClickable = true;\n    @Input() axisClickable = true;\n\n    // Axis/Scales parameters\n    @Input() buckets = 9; // Color buckets\n    @Input() colorScheme = \"schemeBlues\"; // Color scheme from D3\n    @Input() maxX = 20; // Max items on X\n    @Input() maxY = 20; // Max items on Y\n    @Input() theme: \"light\" | \"dark\" = \"light\";\n    \n    // Events from user interactions\n    @Output() itemClicked = new EventEmitter();\n    @Output() axisClicked = new EventEmitter();\n\n    // D3 Scales\n    x: d3.ScaleBand;\n    y: d3.ScaleBand;\n    color: d3.ScaleQuantile;\n\n    // Axes\n    @ViewChild(\"xAxis\") gx: ElementRef;\n    @ViewChild(\"yAxis\") gy: ElementRef;\n    xAxis: d3.Selection;\n    yAxis: d3.Selection;\n    \n    // Data actually displayed\n    dataFiltered: HeatmapItem[] = [];\n\n    // Tooltip    \n    tooltipItem?: HeatmapItem;\n    tooltipOrientation: \"left\" | \"right\";\n    tooltipTop: number;\n    tooltipRight: number;\n    tooltipLeft: number;\n\n    // Misc\n    viewInit: boolean;\n    originalCount: number;\n\n    constructor(\n        private el: ElementRef\n    ){}\n\n    /**\n     * ngOnChanges is used to respond to changes in the data (or chart parameter)\n     */\n    ngOnChanges() {\n\n        this.data = this.data || [];\n\n        // Pre-process data\n        const xLabels = Array.from(new Set(this.data.map(value => value.x))).slice(0, this.maxX);\n        const yLabels = Array.from(new Set(this.data.map(value => value.y))).slice(0, this.maxY);\n        this.dataFiltered = this.data.filter(value => xLabels.includes(value.x) && yLabels.includes(value.y));\n\n        // Create scales\n        this.x = d3.scaleBand()\n            .domain(xLabels)\n            .range([0, this.width-this.margin.left-this.margin.right]);\n\n        this.y = d3.scaleBand()\n            .domain(yLabels)\n            .range([0, this.height-this.margin.top-this.margin.bottom]);\n\n        this.color = d3.scaleQuantile()\n            .domain(this.dataFiltered.map(item => item.count))\n            .range(d3[this.colorScheme][this.buckets]);\n\n        // Note: ngOnChanges is always called once, before ngAfterViewInit\n        if(this.viewInit) {\n            this.buildChart(!!this.transition);\n        }\n    }\n\n    // Note: In onAfterViewInit we can access gx and gy, obtained with @ViewChild.\n    // At this point we can call buildChart()\n    ngAfterViewInit(){\n        this.xAxis = d3.select(this.gx.nativeElement);\n        this.yAxis = d3.select(this.gy.nativeElement);\n        this.viewInit = true;\n\n        this.buildChart();\n    }\n    \n    /**\n     * buildChart() actually only builds the axes of the chart, since the\n     * rest is build automatically with Angular syntax in the template.\n     * We build axis programmatically (with D3 selects) to benefit from the\n     * D3 abstractions and transitions.\n     * @param update \n     */\n    buildChart(update?: boolean){\n                    \n        if(update){\n            const t = d3.transition().duration(this.transition) as d3.Transition;\n    \n            this.xAxis.transition(t)\n                .call(d3.axisTop(this.x).tickSize(0))\n                .on(\"end\", () => this.xAxis.selectAll('text').each(this.wrap));\n\n            this.yAxis.transition(t)\n                .call(d3.axisLeft(this.y).tickSize(0))\n                .on(\"end\", () => this.yAxis.selectAll('text').each(this.wrap));\n            \n        }\n        else {\n            this.xAxis.call(d3.axisTop(this.x).tickSize(0));\n            this.yAxis.call(d3.axisLeft(this.y).tickSize(0));\n        }\n\n        this.xAxis.selectAll(\".domain\").remove(); // Remove the axis line\n        this.xAxis.selectAll(\"text\")  // Tilt the text\n            .attr(\"transform\", \"rotate(-35)\")\n            .style(\"text-anchor\", \"start\")\n            .each(this.wrap)\n            .on(\"click\", d => this.onAxisClicked(d, 'x'));\n\n        this.yAxis.selectAll(\".domain\").remove(); // Remove the axis line\n        this.yAxis.selectAll(\"text\")\n            .each(this.wrap)\n            .on(\"click\", d => this.onAxisClicked(d, 'y'));\n    }\n\n    /**\n     * Called when the user hovers the mouse over a heatmap tile\n     * @param item \n     * @param event \n     */\n    onMouseOver(item: HeatmapItem, event: MouseEvent){\n        this.tooltipItem = item;\n\n        const x = this.x(item.x) as number;\n        const y = this.y(item.y) as number;\n\n        // Since we use viewBox to auto-adjust the SVG to the container size, we have to\n        // convert from the SVG coordinate system to the HTML coordinate system\n        const actualWidth = (this.el.nativeElement as HTMLElement).offsetWidth;\n        const scale = actualWidth / this.width;\n        const relativeX = x / this.width;\n\n        // Tooltip to the right\n        if(relativeX ) => {\n        const self = d3.select(nodes[i]);\n        let textLength = nodes[i].getComputedTextLength();\n        let text = self.text();\n        const fullText = self.text();\n        while (textLength > 90 && text.length > 0) {\n          text = text.slice(0, -1)\n          self.text(text + '...');\n          textLength = nodes[i].getComputedTextLength();\n        }\n        self.append('svg:title').text(fullText);\n    };\n}\n\n    \n\n    \n        \n\n    \n    \n        \n            \n            \n            {{ item.start | number : '1.0-0'}}\n        \n    \n\n    \n        \n        \n\n        \n        \n\n        \n        \n        \n        \n    \n    \n    \n        {{'msg#heatmap.showing' | sqMessage:{values: {shown: dataFiltered.length, total: data.length} } }}\n    \n\n\n\n\n\n    {{tooltipItem.display || tooltipItem.value}}\n    {{'msg#heatmap.tooltip' | sqMessage:{values: {count: tooltipItem.count} } }}\n\n\n    \n\n    \n                \n                    ./heatmap.component.scss\n                \n                // This is required to position the tooltip absolutely\n:host {\n    display: block;\n    position: relative;\n}\n\n// Note: ::ng-deep is deprecated, but currently no better alternative\n.axis.clickable ::ng-deep text:hover {\n    text-decoration: underline;\n    cursor: pointer;\n}\n\n.tile {\n    opacity: 0.9;\n}\n\n.tile.clickable:hover {\n    cursor: pointer;\n    opacity: 1;\n    transition: opacity 0.2s ease-in 0s;\n}\n\n.tile.selected {\n    opacity: 0.5;\n}\n\n.legend {\n    font-size: 10px;\n    fill: darkgrey;\n\n    rect {\n        opacity: 0.9;\n    }\n}\n\n.bottom-legend {\n    fill: darkgrey;\n    font-size: 10px;\n    text-anchor: end;\n}\n\nsq-tooltip ::ng-deep {\n    .sq-tooltip {\n        pointer-events: none;\n        opacity: 0.8;\n    }\n}\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '                                                    {{ item.start | number : \\'1.0-0\\'}}                                                                                                    {{\\'msg#heatmap.showing\\' | sqMessage:{values: {shown: dataFiltered.length, total: data.length} } }}        {{tooltipItem.display || tooltipItem.value}}    {{\\'msg#heatmap.tooltip\\' | sqMessage:{values: {count: tooltipItem.count} } }}'\n    var COMPONENTS = [{'name': 'BsEdgeInfoCard', 'selector': 'sq-edge-info-card'},{'name': 'BsFacetHeatmapComponent', 'selector': 'sq-facet-heatmap'},{'name': 'BsFacetTimelineComponent', 'selector': 'sq-facet-timeline'},{'name': 'BsHeatmapComponent', 'selector': 'sq-heatmap'},{'name': 'BsNodeInfoCard', 'selector': 'sq-node-info-card'},{'name': 'BsResultsHeatmapView', 'selector': 'sq-results-heatmap-view'},{'name': 'BsTimelineComponent', 'selector': 'sq-timeline'},{'name': 'BsTooltipComponent', 'selector': 'sq-tooltip'},{'name': 'FacetNgxChart', 'selector': 'sq-facet-ngx-chart'},{'name': 'FusionChart', 'selector': 'sq-fusion-chart'},{'name': 'MapComponent', 'selector': 'sq-googlemaps'},{'name': 'MoneyCloudComponent', 'selector': 'sq-money-cloud'},{'name': 'MoneyTimelineComponent', 'selector': 'sq-money-timeline'},{'name': 'NetworkComponent', 'selector': 'sq-network'},{'name': 'NgxChart', 'selector': 'sq-ngx-chart'},{'name': 'ResultTimeline', 'selector': 'sq-result-timeline'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'BsHeatmapComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/BsHeatmapModule.html":{"url":"modules/BsHeatmapModule.html","title":"module - BsHeatmapModule","body":"\n                   \n\n\n\n\n    Modules\n    BsHeatmapModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_BsHeatmapModule\n\n\n\ncluster_BsHeatmapModule_declarations\n\n\n\ncluster_BsHeatmapModule_exports\n\n\n\n\nBsFacetHeatmapComponent\n\nBsFacetHeatmapComponent\n\n\n\nBsHeatmapModule\n\nBsHeatmapModule\n\nBsHeatmapModule -->\n\nBsFacetHeatmapComponent->BsHeatmapModule\n\n\n\n\n\nBsHeatmapComponent\n\nBsHeatmapComponent\n\nBsHeatmapModule -->\n\nBsHeatmapComponent->BsHeatmapModule\n\n\n\n\n\nBsResultsHeatmapView\n\nBsResultsHeatmapView\n\nBsHeatmapModule -->\n\nBsResultsHeatmapView->BsHeatmapModule\n\n\n\n\n\nBsTooltipComponent\n\nBsTooltipComponent\n\nBsHeatmapModule -->\n\nBsTooltipComponent->BsHeatmapModule\n\n\n\n\n\nBsFacetHeatmapComponent \n\nBsFacetHeatmapComponent \n\nBsFacetHeatmapComponent  -->\n\nBsHeatmapModule->BsFacetHeatmapComponent \n\n\n\n\n\nBsHeatmapComponent \n\nBsHeatmapComponent \n\nBsHeatmapComponent  -->\n\nBsHeatmapModule->BsHeatmapComponent \n\n\n\n\n\nBsResultsHeatmapView \n\nBsResultsHeatmapView \n\nBsResultsHeatmapView  -->\n\nBsHeatmapModule->BsResultsHeatmapView \n\n\n\n\n\nBsTooltipComponent \n\nBsTooltipComponent \n\nBsTooltipComponent  -->\n\nBsHeatmapModule->BsTooltipComponent \n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            heatmap/bootstrap/heatmap.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Declarations\n                    \n                        \n                            BsFacetHeatmapComponent\n                        \n                        \n                            BsHeatmapComponent\n                        \n                        \n                            BsResultsHeatmapView\n                        \n                        \n                            BsTooltipComponent\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            BsFacetHeatmapComponent\n                        \n                        \n                            BsHeatmapComponent\n                        \n                        \n                            BsResultsHeatmapView\n                        \n                        \n                            BsTooltipComponent\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import {NgModule} from \"@angular/core\";\nimport {CommonModule} from \"@angular/common\";\nimport {FormsModule, ReactiveFormsModule} from \"@angular/forms\";\n\nimport {IntlModule} from \"@sinequa/core/intl\";\n\nimport {BsSelectionModule} from \"@sinequa/components/selection\";\nimport {BsActionModule} from \"@sinequa/components/action\";\n\nimport {BsTooltipComponent} from \"./tooltip.component\";\nimport {BsHeatmapComponent} from \"./heatmap.component\";\nimport {BsFacetHeatmapComponent} from \"./facet-heatmap.component\";\nimport {BsResultsHeatmapView} from \"./results-heatmap-view\";\n\n@NgModule({\n    imports: [\n        FormsModule, ReactiveFormsModule,\n        CommonModule,\n        IntlModule,\n\n        BsSelectionModule,\n        BsActionModule\n    ],\n    declarations: [\n        BsResultsHeatmapView,\n        BsTooltipComponent,\n        BsHeatmapComponent,\n        BsFacetHeatmapComponent\n    ],\n    exports: [\n        BsResultsHeatmapView,\n        BsTooltipComponent,\n        BsHeatmapComponent,\n        BsFacetHeatmapComponent\n    ]\n})\nexport class BsHeatmapModule {\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/BsNodeInfoCard.html":{"url":"components/BsNodeInfoCard.html","title":"component - BsNodeInfoCard","body":"\n                   \n\n\n\n\n\n  Components\n  BsNodeInfoCard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    network/node-info-card.component.ts\n\n\n\n\n    \n        Implements\n    \n    \n                    OnChanges\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                sq-node-info-card\n            \n\n\n            \n                styles\n                \n.card {\n    top: 5px;\n    left: 0;\n    right: 0;\n    width: 80%;\n}\n.circular-image {\n    width: 1.5em;\n    height: 1.5em;\n    border-radius: 50%;\n    object-fit: cover;\n}\n    \n            \n\n\n            \n                templateUrl\n                node-info-card.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                closed\n                            \n                            \n                                expanded\n                            \n                            \n                                neighbors\n                            \n                            \n                                nodeData\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                focusNode\n                            \n                            \n                                ngOnChanges\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                node\n                            \n                        \n                    \n                \n\n\n\n\n        \n    \n\n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        node\n                    \n                \n                \n                    \n                        Type :         Node\n\n                    \n                \n                        \n                            \n                                    Defined in network/node-info-card.component.ts:29\n                            \n                        \n            \n        \n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            focusNode\n                        \n                        \n                    \n                \n            \n            \n                \nfocusNode(node: Node)\n                \n            \n\n\n            \n                \n                    Defined in network/node-info-card.component.ts:70\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    node\n                                    \n                                                Node\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            ngOnChanges\n                        \n                        \n                    \n                \n            \n            \n                \nngOnChanges()\n                \n            \n\n\n            \n                \n                    Defined in network/node-info-card.component.ts:38\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n    \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            closed\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                        \n                            \n                                    Defined in network/node-info-card.component.ts:31\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            expanded\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                        \n                            \n                                    Defined in network/node-info-card.component.ts:32\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            neighbors\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     literal type\n\n                        \n                    \n                        \n                            \n                                    Defined in network/node-info-card.component.ts:36\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            nodeData\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         NodeData\n\n                        \n                    \n                        \n                            \n                                    Defined in network/node-info-card.component.ts:34\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n    \n        import { Component, Input, OnChanges } from \"@angular/core\";\nimport { Node } from './network-models';\n\n\nexport interface NodeData {\n    node: Node;\n    count?: number; // The count displayed may be different from the node count (for edges)\n}\n\n@Component({\n    selector: \"sq-node-info-card\",\n    templateUrl: \"node-info-card.component.html\",\n    styles: [`\n.card {\n    top: 5px;\n    left: 0;\n    right: 0;\n    width: 80%;\n}\n.circular-image {\n    width: 1.5em;\n    height: 1.5em;\n    border-radius: 50%;\n    object-fit: cover;\n}\n    `]\n})\nexport class BsNodeInfoCard implements OnChanges {\n    @Input() node: Node;\n\n    closed: boolean;\n    expanded: boolean;\n\n    nodeData: NodeData;\n\n    neighbors: {[type: string]: NodeData[]};\n\n    ngOnChanges() {\n        this.closed = false;\n        this.expanded = false;\n        this.nodeData = { node: this.node, count: this.node.count };\n\n        this.neighbors = {};\n        this.node.context.edges\n            .stream()\n            .filter(e => e.from === this.node.id || e.to === this.node.id) // Filter edges\n            .map(e => {\n                const id = e.from === this.node.id ? e.to : e.from\n                const node = this.node.context.nodes.get(id);\n                return {node, count: e.count};\n            }) // get node and edge count\n            .forEach(item => {\n                if(item.node) {\n                    const type = item.node.type.field ?\n                        item.node.context.appService.getPluralLabel(item.node.type.field) : // Try to get the \"pretty label\"\n                        item.node.type.name; // Or just use the node type's name\n                    if(!this.neighbors[type]) {\n                        this.neighbors[type] = []; // Initialize the neighbor array\n                    }\n                    // Create the node data\n                    this.neighbors[type].push({ node: item.node, count: item.count } as NodeData);\n                }\n                return true;\n            });\n        // Sort the neighbors by decreasing count number\n        Object.values(this.neighbors)\n            .forEach(list => list.sort((a,b) => (b.count || 0) - (a.count || 0)));\n    }\n\n    focusNode(node: Node) {\n        // Hack to gain access to the network instance (networkService does not have the focus() method)\n        const networkInstance = node.context.networkService['networks'][node.context.name];\n        networkInstance.focus(node.id, {animation: true}); // Move the view to this node with animation\n        networkInstance.selectNodes([node.id], true); // Warning: does not trigger events...\n        node.context.select(node, undefined); // Select the node to update info cards, actions\n        return false;\n    }\n}\n    \n\n    \n        \n    \n        \n            \n            \n                \n            \n            \n                \n            \n        \n        \n            \n                \n                    {{neighbor.key | sqMessage}}\n                    \n                        \n                            \n                                \n                            \n                        \n                    \n                \n            \n        \n    \n\n\n\n    \n    {{nodeData.node['icon']['code']}}\n    {{nodeData.node.label}}\n     0\" class=\"mr-2 text-muted\" title=\"{{ 'msg#network.infocards.count' | sqMessage }}\">({{nodeData.count}})\n\n    \n\n    \n            \n.card {\n    top: 5px;\n    left: 0;\n    right: 0;\n    width: 80%;\n}\n.circular-image {\n    width: 1.5em;\n    height: 1.5em;\n    border-radius: 50%;\n    object-fit: cover;\n}\n    \n\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '                                                                                                                                                                        {{neighbor.key | sqMessage}}                                                                                                                                                                                                                                {{nodeData.node[\\'icon\\'][\\'code\\']}}    {{nodeData.node.label}}     0\" class=\"mr-2 text-muted\" title=\"{{ \\'msg#network.infocards.count\\' | sqMessage }}\">({{nodeData.count}})'\n    var COMPONENTS = [{'name': 'BsEdgeInfoCard', 'selector': 'sq-edge-info-card'},{'name': 'BsFacetHeatmapComponent', 'selector': 'sq-facet-heatmap'},{'name': 'BsFacetTimelineComponent', 'selector': 'sq-facet-timeline'},{'name': 'BsHeatmapComponent', 'selector': 'sq-heatmap'},{'name': 'BsNodeInfoCard', 'selector': 'sq-node-info-card'},{'name': 'BsResultsHeatmapView', 'selector': 'sq-results-heatmap-view'},{'name': 'BsTimelineComponent', 'selector': 'sq-timeline'},{'name': 'BsTooltipComponent', 'selector': 'sq-tooltip'},{'name': 'FacetNgxChart', 'selector': 'sq-facet-ngx-chart'},{'name': 'FusionChart', 'selector': 'sq-fusion-chart'},{'name': 'MapComponent', 'selector': 'sq-googlemaps'},{'name': 'MoneyCloudComponent', 'selector': 'sq-money-cloud'},{'name': 'MoneyTimelineComponent', 'selector': 'sq-money-timeline'},{'name': 'NetworkComponent', 'selector': 'sq-network'},{'name': 'NgxChart', 'selector': 'sq-ngx-chart'},{'name': 'ResultTimeline', 'selector': 'sq-result-timeline'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'BsNodeInfoCard'};\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/BsTimelineModule.html":{"url":"modules/BsTimelineModule.html","title":"module - BsTimelineModule","body":"\n                   \n\n\n\n\n    Modules\n    BsTimelineModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_BsTimelineModule\n\n\n\ncluster_BsTimelineModule_declarations\n\n\n\ncluster_BsTimelineModule_imports\n\n\n\ncluster_BsTimelineModule_exports\n\n\n\n\nBsFacetTimelineComponent\n\nBsFacetTimelineComponent\n\n\n\nBsTimelineModule\n\nBsTimelineModule\n\nBsTimelineModule -->\n\nBsFacetTimelineComponent->BsTimelineModule\n\n\n\n\n\nBsTimelineComponent\n\nBsTimelineComponent\n\nBsTimelineModule -->\n\nBsTimelineComponent->BsTimelineModule\n\n\n\n\n\nBsFacetTimelineComponent \n\nBsFacetTimelineComponent \n\nBsFacetTimelineComponent  -->\n\nBsTimelineModule->BsFacetTimelineComponent \n\n\n\n\n\nBsTimelineComponent \n\nBsTimelineComponent \n\nBsTimelineComponent  -->\n\nBsTimelineModule->BsTimelineComponent \n\n\n\n\n\nBsHeatmapModule\n\nBsHeatmapModule\n\nBsTimelineModule -->\n\nBsHeatmapModule->BsTimelineModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            timeline/bootstrap/timeline.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Declarations\n                    \n                        \n                            BsFacetTimelineComponent\n                        \n                        \n                            BsTimelineComponent\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            BsHeatmapModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            BsFacetTimelineComponent\n                        \n                        \n                            BsTimelineComponent\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import {NgModule} from \"@angular/core\";\nimport {CommonModule} from \"@angular/common\";\nimport {FormsModule, ReactiveFormsModule} from \"@angular/forms\";\n\nimport {IntlModule} from \"@sinequa/core/intl\";\n\nimport {UtilsModule} from \"@sinequa/components/utils\";\nimport {BsSelectionModule} from \"@sinequa/components/selection\";\nimport {BsActionModule} from \"@sinequa/components/action\";\nimport {BsHeatmapModule} from \"@sinequa/analytics/heatmap\";\n\nimport {BsTimelineComponent} from \"./timeline.component\";\nimport {BsFacetTimelineComponent} from \"./facet-timeline.component\";\n\n@NgModule({\n    imports: [\n        FormsModule, ReactiveFormsModule,\n        CommonModule,\n        IntlModule,\n\n        UtilsModule,\n        BsSelectionModule,\n        BsActionModule,\n        BsHeatmapModule // We need the heatmap module for the tooltip component\n    ],\n    declarations: [\n        BsTimelineComponent,\n        BsFacetTimelineComponent\n    ],\n    exports: [\n        BsTimelineComponent,\n        BsFacetTimelineComponent\n    ]\n})\nexport class BsTimelineModule {\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/BsTooltipComponent.html":{"url":"components/BsTooltipComponent.html","title":"component - BsTooltipComponent","body":"\n                   \n\n\n\n\n\n  Components\n  BsTooltipComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    heatmap/bootstrap/tooltip.component.ts\n\n\n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                sq-tooltip\n            \n\n\n            \n                styles\n                \n.sq-tooltip {\n    z-index: 10;\n}\n\n.sq-tooltip::after {\n    content: \" \";\n    position: absolute;\n    top: 12px;\n    border-width: 8px;\n    border-style: solid;\n}\n\n.sq-tooltip.right::after {\n    left: -17px;\n    border-color: transparent rgb(0,0,0,0.125) transparent transparent;\n}\n\n.sq-tooltip.left::after {\n    right: -17px;\n    border-color: transparent transparent transparent rgb(0,0,0,0.125);\n}\n    \n            \n\n            \n                template\n                \n    \n        \n    \n\n\n            \n\n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n\n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                left\n                            \n                            \n                                orientation\n                            \n                            \n                                right\n                            \n                            \n                                theme\n                            \n                            \n                                top\n                            \n                        \n                    \n                \n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    style\n                                \n                            \n                        \n                    \n        \n    \n\n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        left\n                    \n                \n                \n                    \n                        Default value : 0\n                    \n                \n                        \n                            \n                                    Defined in heatmap/bootstrap/tooltip.component.ts:38\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        orientation\n                    \n                \n                \n                    \n                        Type :     \"left\" | \"right\"\n\n                    \n                \n                \n                    \n                        Default value : \"right\"\n                    \n                \n                        \n                            \n                                    Defined in heatmap/bootstrap/tooltip.component.ts:37\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        right\n                    \n                \n                \n                    \n                        Default value : 0\n                    \n                \n                        \n                            \n                                    Defined in heatmap/bootstrap/tooltip.component.ts:39\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        theme\n                    \n                \n                \n                    \n                        Type :     \"light\" | \"dark\"\n\n                    \n                \n                \n                    \n                        Default value : \"light\"\n                    \n                \n                        \n                            \n                                    Defined in heatmap/bootstrap/tooltip.component.ts:41\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        top\n                    \n                \n                \n                    \n                        Default value : 0\n                    \n                \n                        \n                            \n                                    Defined in heatmap/bootstrap/tooltip.component.ts:40\n                            \n                        \n            \n        \n\n\n\n\n\n\n    \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        style\n                    \n                \n\n                \n                    \n                        getstyle()\n                    \n                \n                            \n                                \n                                    Defined in heatmap/bootstrap/tooltip.component.ts:43\n                                \n                            \n\n            \n        \n\n\n\n\n    \n        import {Component, Input} from '@angular/core';\n\n@Component({\n    selector: \"sq-tooltip\",\n    template: `\n\n    \n        \n    \n\n`,\n    styles: [`\n.sq-tooltip {\n    z-index: 10;\n}\n\n.sq-tooltip::after {\n    content: \" \";\n    position: absolute;\n    top: 12px;\n    border-width: 8px;\n    border-style: solid;\n}\n\n.sq-tooltip.right::after {\n    left: -17px;\n    border-color: transparent rgb(0,0,0,0.125) transparent transparent;\n}\n\n.sq-tooltip.left::after {\n    right: -17px;\n    border-color: transparent transparent transparent rgb(0,0,0,0.125);\n}\n    `]\n})\nexport class BsTooltipComponent {\n    @Input() orientation: \"left\" | \"right\" = \"right\";\n    @Input() left = 0;\n    @Input() right = 0;\n    @Input() top = 0;\n    @Input() theme: \"light\" | \"dark\" = \"light\";\n\n    get style() {\n        if(this.orientation === \"right\") {\n            return {\n                'left.px': this.left + 7,\n                'top.px': this.top - 21, // Align tooltip arrow\n            }\n        }\n        else {\n            return {\n                'right.px': this.right + 7,\n                'top.px': this.top - 21, // Align tooltip arrow\n            }\n        }\n    }\n}\n    \n\n\n    \n            \n.sq-tooltip {\n    z-index: 10;\n}\n\n.sq-tooltip::after {\n    content: \" \";\n    position: absolute;\n    top: 12px;\n    border-width: 8px;\n    border-style: solid;\n}\n\n.sq-tooltip.right::after {\n    left: -17px;\n    border-color: transparent rgb(0,0,0,0.125) transparent transparent;\n}\n\n.sq-tooltip.left::after {\n    right: -17px;\n    border-color: transparent transparent transparent rgb(0,0,0,0.125);\n}\n    \n\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '                '\n    var COMPONENTS = [{'name': 'BsEdgeInfoCard', 'selector': 'sq-edge-info-card'},{'name': 'BsFacetHeatmapComponent', 'selector': 'sq-facet-heatmap'},{'name': 'BsFacetTimelineComponent', 'selector': 'sq-facet-timeline'},{'name': 'BsHeatmapComponent', 'selector': 'sq-heatmap'},{'name': 'BsNodeInfoCard', 'selector': 'sq-node-info-card'},{'name': 'BsResultsHeatmapView', 'selector': 'sq-results-heatmap-view'},{'name': 'BsTimelineComponent', 'selector': 'sq-timeline'},{'name': 'BsTooltipComponent', 'selector': 'sq-tooltip'},{'name': 'FacetNgxChart', 'selector': 'sq-facet-ngx-chart'},{'name': 'FusionChart', 'selector': 'sq-fusion-chart'},{'name': 'MapComponent', 'selector': 'sq-googlemaps'},{'name': 'MoneyCloudComponent', 'selector': 'sq-money-cloud'},{'name': 'MoneyTimelineComponent', 'selector': 'sq-money-timeline'},{'name': 'NetworkComponent', 'selector': 'sq-network'},{'name': 'NgxChart', 'selector': 'sq-ngx-chart'},{'name': 'ResultTimeline', 'selector': 'sq-result-timeline'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'BsTooltipComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ChartDataPoint.html":{"url":"interfaces/ChartDataPoint.html","title":"interface - ChartDataPoint","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  ChartDataPoint\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            ngx-charts/chart/chart.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        name\n                                \n                                \n                                        value\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        name\n                                    \n                                \n                                \n                                    \n                                        name:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        value\n                                    \n                                \n                                \n                                    \n                                        value:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import {Component, Input, Output, EventEmitter, OnInit, OnDestroy, OnChanges, DoCheck, SimpleChanges, ViewChild, ElementRef, Type} from \"@angular/core\";\nimport {Subscription} from \"rxjs\";\nimport {Utils} from \"@sinequa/core/base\";\nimport {IntlService} from \"@sinequa/core/intl\";\nimport {BaseChartComponent, BarVerticalComponent, BarHorizontalComponent} from \"@swimlane/ngx-charts\";\nimport {UIService} from \"@sinequa/components/utils\";\n\n\nexport interface ChartOptions {\n    type: string;\n    colorScheme?: string;\n    getItemColor?: (value: string) => string;\n    tickFormatter?: (value: any) => string;\n}\n\nexport interface ChartDataPoint {\n    name: string;\n    value: number;\n}\n\n@Component({\n    selector: \"sq-ngx-chart\",\n    templateUrl: \"./chart.html\",\n    styleUrls: [\"./chart.scss\"]\n})\nexport class NgxChart implements OnInit, OnDestroy, OnChanges, DoCheck {\n    @Input() options: ChartOptions;\n    @Input() data: ChartDataPoint[];\n    @Output(\"item-click\") itemClickEvent: EventEmitter;\n    @ViewChild(\"wrapper\", {static: true}) wrapper: ElementRef;\n    @ViewChild(\"tooltipTemplate\", {static: false}) tooltipTemplate;\n    @ViewChild(\"chart\", {static: false}) chart: BaseChartComponent;\n    localeChange: Subscription;\n    attached: boolean;\n\n    constructor(\n        protected intlService: IntlService,\n        private uiService: UIService) {\n        this.itemClickEvent = new EventEmitter();\n    }\n\n    updateChart() {\n        if (!!this.chart) this.chart.update();\n    }\n\n    private onResize = () => this.updateChart();\n\n    ngOnInit() {\n        this.uiService.addElementResizeListener(this.wrapper.nativeElement, this.onResize);\n        this.localeChange = Utils.subscribe(this.intlService.events,\n            (value) => {\n                this.updateChart();\n            });\n    }\n\n    ngOnDestroy() {\n        this.uiService.removeElementResizeListener(this.wrapper.nativeElement, this.onResize);\n        this.localeChange.unsubscribe();\n    }\n\n    get chartType(): string {\n        return Utils.toLowerCase(this.options.type);\n    }\n\n    chartComponent(type:string) : Type {\n        switch(type){\n            case \"horizontalbar\": return BarHorizontalComponent;\n            case \"verticaltalbar\": return BarVerticalComponent;\n            default: return BarVerticalComponent;\n        }\n    }\n\n    // so we don't end up with no color scheme if the color scheme is not set\n    get colorScheme(): string {\n        return this.options.colorScheme || \"cool\";\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n    }\n\n    // This is a clunky way of avoiding (briefly) seeing ngx-charts rendering with the default 600x400 dimensions\n    ngDoCheck() {\n        if (!this.attached && !!this.wrapper) {\n            if (document.body.contains(this.wrapper.nativeElement)) {\n                this.updateChart();\n                this.attached = true;\n            }\n        }\n    }\n\n    select = (dataPoint: ChartDataPoint): void => {\n        this.itemClickEvent.emit(dataPoint);\n    }\n}\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ChartOptions.html":{"url":"interfaces/ChartOptions.html","title":"interface - ChartOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  ChartOptions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            ngx-charts/chart/chart.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        colorScheme\n                                \n                                \n                                            Optional\n                                        getItemColor\n                                \n                                \n                                            Optional\n                                        tickFormatter\n                                \n                                \n                                        type\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        colorScheme\n                                    \n                                \n                                \n                                    \n                                        colorScheme:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        getItemColor\n                                    \n                                \n                                \n                                    \n                                        getItemColor:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        tickFormatter\n                                    \n                                \n                                \n                                    \n                                        tickFormatter:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        type\n                                    \n                                \n                                \n                                    \n                                        type:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import {Component, Input, Output, EventEmitter, OnInit, OnDestroy, OnChanges, DoCheck, SimpleChanges, ViewChild, ElementRef, Type} from \"@angular/core\";\nimport {Subscription} from \"rxjs\";\nimport {Utils} from \"@sinequa/core/base\";\nimport {IntlService} from \"@sinequa/core/intl\";\nimport {BaseChartComponent, BarVerticalComponent, BarHorizontalComponent} from \"@swimlane/ngx-charts\";\nimport {UIService} from \"@sinequa/components/utils\";\n\n\nexport interface ChartOptions {\n    type: string;\n    colorScheme?: string;\n    getItemColor?: (value: string) => string;\n    tickFormatter?: (value: any) => string;\n}\n\nexport interface ChartDataPoint {\n    name: string;\n    value: number;\n}\n\n@Component({\n    selector: \"sq-ngx-chart\",\n    templateUrl: \"./chart.html\",\n    styleUrls: [\"./chart.scss\"]\n})\nexport class NgxChart implements OnInit, OnDestroy, OnChanges, DoCheck {\n    @Input() options: ChartOptions;\n    @Input() data: ChartDataPoint[];\n    @Output(\"item-click\") itemClickEvent: EventEmitter;\n    @ViewChild(\"wrapper\", {static: true}) wrapper: ElementRef;\n    @ViewChild(\"tooltipTemplate\", {static: false}) tooltipTemplate;\n    @ViewChild(\"chart\", {static: false}) chart: BaseChartComponent;\n    localeChange: Subscription;\n    attached: boolean;\n\n    constructor(\n        protected intlService: IntlService,\n        private uiService: UIService) {\n        this.itemClickEvent = new EventEmitter();\n    }\n\n    updateChart() {\n        if (!!this.chart) this.chart.update();\n    }\n\n    private onResize = () => this.updateChart();\n\n    ngOnInit() {\n        this.uiService.addElementResizeListener(this.wrapper.nativeElement, this.onResize);\n        this.localeChange = Utils.subscribe(this.intlService.events,\n            (value) => {\n                this.updateChart();\n            });\n    }\n\n    ngOnDestroy() {\n        this.uiService.removeElementResizeListener(this.wrapper.nativeElement, this.onResize);\n        this.localeChange.unsubscribe();\n    }\n\n    get chartType(): string {\n        return Utils.toLowerCase(this.options.type);\n    }\n\n    chartComponent(type:string) : Type {\n        switch(type){\n            case \"horizontalbar\": return BarHorizontalComponent;\n            case \"verticaltalbar\": return BarVerticalComponent;\n            default: return BarVerticalComponent;\n        }\n    }\n\n    // so we don't end up with no color scheme if the color scheme is not set\n    get colorScheme(): string {\n        return this.options.colorScheme || \"cool\";\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n    }\n\n    // This is a clunky way of avoiding (briefly) seeing ngx-charts rendering with the default 600x400 dimensions\n    ngDoCheck() {\n        if (!this.attached && !!this.wrapper) {\n            if (document.body.contains(this.wrapper.nativeElement)) {\n                this.updateChart();\n                this.attached = true;\n            }\n        }\n    }\n\n    select = (dataPoint: ChartDataPoint): void => {\n        this.itemClickEvent.emit(dataPoint);\n    }\n}\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/CustomData.html":{"url":"interfaces/CustomData.html","title":"interface - CustomData","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  CustomData\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            network/providers/records-provider.ts\n        \n\n            \n                Description\n            \n            \n                Data structure returned by the optional parse() function of a structural edge\ntype. Contains the parsed values of a property that can be turned into one or\nmultiple nodes and edges.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        directed\n                                \n                                \n                                        displays\n                                \n                                \n                                            Optional\n                                        fieldValue\n                                \n                                \n                                            Optional\n                                        relations\n                                \n                                \n                                        values\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        directed\n                                    \n                                \n                                \n                                    \n                                        directed:     boolean[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     boolean[]\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        displays\n                                    \n                                \n                                \n                                    \n                                        displays:     string[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        fieldValue\n                                    \n                                \n                                \n                                    \n                                        fieldValue:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        relations\n                                    \n                                \n                                \n                                    \n                                        relations:     string[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string[]\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        values\n                                    \n                                \n                                \n                                    \n                                        values:     string[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Utils } from '@sinequa/core/base';\nimport { Record } from '@sinequa/core/web-services';\nimport { Action } from '@sinequa/components/action';\nimport { Node, NetworkDataset, NodeType, EdgeType, NetworkContext } from '../network-models';\nimport { BaseProvider } from './base-provider';\n\n/**\n * Extension of the Node interface, to include the Record object\n * from which the node is generated\n */\nexport interface RecordNode extends Node {\n    record: Record;\n}\n\n\n/**\n * An extension of the EdgeType interface to include properties specific to\n * structural edges (edge between a record and its metadata).\n */\nexport interface StructuralEdgeType extends EdgeType {\n    /** Name of the field in the record */\n    field: string;\n    /** count limits the number of values displayed and allows for pagination. Use 0 for unlimited values */\n    count?: number;\n    /** Defines when the edge should be displayed */\n    trigger: StructuralTriggerType;\n    /** showall: display all values from the field / paginate: display all value with pagination / existingnodes: only link to existing nodes / manual: only show if manual action (activated programmatically) */\n    display: StructuralDisplayType;\n    /** A function to parse metadata from a record node in a custom way */\n    parse?: (value: any, record: Record, type: StructuralEdgeType) => CustomData;\n}\n\nexport type StructuralTriggerType = \"oninsert\" | \"onclick\" | \"manual\";\nexport type StructuralDisplayType = \"all\" | \"paginate\" | \"existingnodes\" | ((node: Node, recordNode: RecordNode, index: number) => boolean);\n\n/**\n * Data structure returned by the optional parse() function of a structural edge\n * type. Contains the parsed values of a property that can be turned into one or\n * multiple nodes and edges.\n */\nexport interface CustomData {\n    values: string[]; // eg. LARRY PAGE, GOOGLE\n    displays: string[]; // eg. Larry Page, Google\n    relations?: string[]; // eg. Works At\n    directed?: boolean[]; // eg. true\n    fieldValue?: string; // A value on which to filter the data\n}\n\n/**\n * Tests whether the given edge type is a structural edge type\n * @param et an edge type\n */\nexport function isStructuralEdgeType(et: EdgeType): et is StructuralEdgeType {\n    return !!(et as StructuralEdgeType).field;\n}\n\n\n/**\n * A network provider generating nodes from records.\n * Additionally, the provider can generate the \"structural edges\" of that\n * node. Structural edges are edges between a record and the fields of\n * that record (eg. the wikipedia page of Microsoft is a record that probably\n * contains the fields \"Microsoft\" and \"Bill Gates\").\n */\nexport class RecordsProvider extends BaseProvider {\n\n    constructor(\n        public name = \"Documents\",\n        protected nodeType: NodeType,\n        protected edgeTypes: StructuralEdgeType[],\n        protected records: Record[],\n        protected hideRecordNode = false\n    ){\n        super(name);\n    }\n\n    /**\n     * Clears the dataset and generates new record nodes\n     * @param records the list of records of this provider\n     */\n    protected updateDataset(records?: Record[]) {\n        this.dataset.clear();\n        if(!this.active || !records || records.length === 0) {\n            return; \n        }\n        this.addRecordNodes(records);\n    }\n    \n    // Record nodes\n\n    /**\n     * Generates the nodes for a list of records, including their structural\n     * edges, and adds them to the dataset.\n     * Returns the list of record nodes.\n     * @param records \n     */\n    protected addRecordNodes(records: Record[]): RecordNode[] {\n        return records.map(record => {\n            let node = this.dataset.getNode(this.getNodeId(this.nodeType, record.id));\n            if(!node) {\n                node = this.createNode(this.nodeType, record.id, record.title, !this.hideRecordNode, {record});\n                this.dataset.addNodes(node);\n                this.edgeTypes.forEach(type => {\n                    this.addStructuralEdges(node as RecordNode, type);\n                });\n            }\n            return node as RecordNode;\n        });\n    }\n\n    \n    // Structural edges\n\n    /**\n     * Generates the metadata nodes and structural edges from the given node,\n     * and merge them into the dataset.\n     * This function will automatically parse the metadata contained in the record,\n     * but it is possible to manage custom types of metadata by providing a\n     * custom parse() function via the structural edge type.\n     * @param node The record node\n     * @param type The edge type for which we want to create edges\n     */\n    protected addStructuralEdges(node: RecordNode, type: StructuralEdgeType) {\n\n        if(type.nodeTypes[0] !== this.nodeType){\n            throw new Error(`Inconsistent node type: '${type.nodeTypes[0].name}' instead of '${this.nodeType.name}'`);\n        }\n        \n        const recorddata = node.record[type.field];\n\n        if(recorddata === undefined){\n            return;\n        }\n\n        // Custom parse for mono or multi valued data\n        if(type.parse) {\n            if(Utils.isArray(recorddata)) {\n                recorddata.forEach((value,i) => { \n                    this.addCustomEdge(node, type, type.parse!(value, node.record, type));\n                });\n            }\n            else {\n                this.addCustomEdge(node, type, type.parse!(recorddata, node.record, type));\n            }\n        }\n        // Default handling for standard Sinequa Metadata\n        else {\n            const data = new NetworkDataset();\n            data.addNodes(node);\n    \n            // sourcestr\n            if(Utils.isString(recorddata)) {\n                this.addStructuralEdge(data, node, type, recorddata, recorddata, 0);\n            }\n            else if(Utils.isArray(recorddata)) {\n                recorddata.forEach((value,i) => {\n                    // sourcecsv\n                    if(Utils.isString(value)) {\n                        this.addStructuralEdge(data, node, type, value, value, i);\n                    }\n                    // entity\n                    else if(value[\"value\"]) {\n                        this.addStructuralEdge(data, node, type, value[\"value\"], value[\"display\"] || value[\"value\"], i);\n                    }\n                });\n            }\n    \n            this.dataset.merge(data);\n        }\n    }\n\n    /**\n     * Add a structural edge to a record node and adds that edge\n     * (and corresponding metadata node) to the given dataset.\n     * @param dataset The target dataset\n     * @param recordNode The record node\n     * @param type The edge type of the structural edge\n     * @param value The \"value\" property of the metadata node\n     * @param display The \"display\" property of the metadata node\n     * @param index The index of the metadata within the record, which may influence its visibility when using display=paginate\n     */\n    protected addStructuralEdge(dataset: NetworkDataset, recordNode: RecordNode, type: StructuralEdgeType, value: string, display: string, index: number) {\n        // Create the metadata node\n        const node = this.createNode(type.nodeTypes[1], value, display, true);\n        // Sets its visibility\n        node.visible = type.trigger === \"oninsert\" && this.isEdgeVisible(type, node, recordNode, index);\n        if(recordNode.id !== node.id){ // Special case of hybrid nodes, where the recordNode might contain itself...!\n            if(!dataset.hasNode(node.id)) { // Duplicate nodes/edges are possible when the same node type is present in multiple fields of a record (eg. \"email\" in msgfrom and msgto)\n                dataset.addNodes(node);\n            }\n            const edge = this.createEdge(type, recordNode, node, value, node.visible, {record: recordNode.record});\n            if(!dataset.hasEdge(edge.id)) {\n                dataset.addEdges(edge);\n            }\n        }\n    }\n\n    /**\n     * Add a custom structural edge to a record node and merges that edge\n     * (and corresponding metadata node) into the global dataset.\n     * @param recordNode The record node\n     * @param type The edge type of the structural edge\n     * @param data A CustomData object containing the properties of the metadata nodes we want to created\n     */\n    protected addCustomEdge(recordNode: RecordNode, type: StructuralEdgeType, data: CustomData) {\n        if(type.nodeTypes.length !== data.values.length + 1) {\n            throw new Error(`Wrong number of values for this custom edge ${type.nodeTypes.length}, ${data.values.length}`);\n        }\n        // Create a dataset only for this data, to avoid duplicate conflicts\n        const dataset = new NetworkDataset();\n        dataset.addNodes(recordNode);\n        // For each value contained in \"data\", create a node, and edges in between them (in addition to the edges between the record and each metadata node)\n        let lastNode: Node;\n        for(let i=0; i 0){\n                const relation = data.relations? data.relations[i-1] : undefined;\n                const directed = data.directed? data.directed[i-1] : false;\n                dataset.addEdges(this.createEdge(type, lastNode!, node, data.fieldValue, true, {}, 1, directed, relation));\n            }\n            lastNode = node;\n        }\n        this.dataset.merge(dataset);\n    }\n\n    /**\n     * Returns the visibility of a structural edge, depending on the type.display property\n     * @param type The structural edge type\n     * @param node The metadata node of this edge\n     * @param recordNode The record node of this edge\n     * @param index The index of the metadata in the list of metadata of the record\n     */\n    protected isEdgeVisible(type: StructuralEdgeType, node: Node, recordNode: RecordNode, index: number): boolean {\n        if(type.display === \"all\") {\n            return true;\n        }\n        else if(type.display === \"existingnodes\") {\n            return false;\n        }\n        else if(type.display === \"paginate\") {\n            return index  node.type === this.nodeType)\n            .forEach(node => {\n                dataset.getAdjacentEdges(node.id)\n                    .filter(edge => (edge.type as StructuralEdgeType).display === 'existingnodes')\n                    .forEach(edge => {\n                        const neighbor = dataset.getNode(node.id === edge.to ? edge.from : edge.to);\n                        if(!neighbor) {\n                            throw new Error(`Missing node from edge ${edge.id}`);\n                        }\n                        const neighborsneighbors = dataset.getAdjacentEdges(neighbor.id);\n                        if(neighborsneighbors.length > 1) {\n                            neighbor.visible = true;\n                            edge.visible = true;\n                        }\n                    });\n            });\n    }\n\n    /**\n     * Adjust visibility of nodes and edges, for structural edges with\n     * type.trigger = onclick. These nodes will only be shown once their\n     * record node is clicked on.\n     * @param node A node that was clicked\n     */\n    onNodeClicked(node?: Node) {\n        if(this.active && node && node.type === this.nodeType) { // Note: we cannot test the provider property, since this node might have been merged with one from a different provider. However the node type should be a unique instance\n            let update = false;\n            this.dataset.getAdjacentEdges(node.id)\n                .filter(edge => edge.type['trigger'] === 'onclick')\n                .forEach(edge => {\n                    const neighbor = this.dataset.getNode(node.id === edge.to ? edge.from : edge.to);\n                    if(!neighbor) {\n                        throw new Error(`Missing node from edge ${edge.id}`);\n                    }\n                    if(!neighbor.visible || !edge.visible) {\n                        edge.visible = true;\n                        neighbor.visible = true;\n                        update = true;\n                    }\n                    // TODO \"propagate\" visibility (ie. if 2 nodes are visible but an edge in between is invisible, make it visible)\n                });\n            if(update) {\n                this.provider.next(this.dataset);\n            }\n        }\n    }\n\n    getProviderActions(): Action[] {\n        return super.getProviderActions();\n    }\n\n    /**\n     * Creates actions for expanding and/or collapsing a record node that was clicked.\n     * expanding and collapsing will act on the visibility of the structural edges\n     * attached to this node.\n     * Both actions might be displayed at the same time, if the node is in an intermediate\n     * state.\n     * @param node \n     */\n    getNodeActions(node: Node): Action[] {\n        const actions = super.getNodeActions(node);\n        \n        // Actions for exanding / collapsing a record node\n        if(this.active && node.type === this.nodeType && this.edgeTypes.length > 0) {\n            let hasExpandedEdge = false;\n            let hasCollapsedEdge = false;\n            this.dataset.getAdjacentEdges(node.id).forEach(e => {\n                hasCollapsedEdge = hasCollapsedEdge || !e.visible;\n                hasExpandedEdge = hasExpandedEdge || e.visible;\n            });\n\n            if(hasCollapsedEdge) {\n                actions.push(new Action({\n                    icon: \"fas fa-expand-arrows-alt\",\n                    title: \"msg#network.actions.expandMeta\",\n                    action: () => {\n                        let update = false;\n                        this.dataset.getAdjacentEdges(node.id)\n                            .forEach(edge => {\n                                const neighbor = this.dataset.getNode(node.id === edge.to ? edge.from : edge.to);\n                                if(!neighbor) {\n                                    throw new Error(`Missing node from edge ${edge.id}`);\n                                }\n                                if(!neighbor.visible || !edge.visible) {\n                                    edge.visible = true;\n                                    neighbor.visible = true;\n                                    update = true;\n                                }\n                                // TODO \"propagate\" visibility (ie. if 2 nodes are visible but an edge in between is invisible, make it visible)\n                            });\n                        if(update) {\n                            this.provider.next(this.dataset);\n                        }\n                    }\n                }));\n            }\n            \n            if(hasExpandedEdge) {\n                actions.push(new Action({\n                    icon: \"fas fa-compress-arrows-alt\",\n                    title: \"msg#network.actions.collapseMeta\",\n                    action: () => {\n                        let update = false;\n                        this.dataset.getAdjacentEdges(node.id)\n                            .forEach(edge => {\n                                const neighbor = this.dataset.getNode(node.id === edge.to ? edge.from : edge.to);\n                                if(!neighbor) {\n                                    throw new Error(`Missing node from edge ${edge.id}`);\n                                }\n                                if((neighbor.visible || edge.visible) && !(neighbor as RecordNode).record) { // Prevent collapsing links between 2 record nodes (alternatively, we could count the number of neighbors of the neighbors, and close only the isoltated ones)\n                                    edge.visible = false;\n                                    neighbor.visible = false;\n                                    update = true;\n                                }\n                            });\n                        if(update) {\n                            this.provider.next(this.dataset);\n                        }\n                    }\n                }));\n            }\n        }\n        return actions;\n    }\n\n}\n    \n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/DynamicEdge.html":{"url":"interfaces/DynamicEdge.html","title":"interface - DynamicEdge","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  DynamicEdge\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            network/providers/dynamic-edge-provider.ts\n        \n\n            \n                Description\n            \n            \n                Extension of the Edge interface, to include the record property\nfrom which this edge is generated\n\n            \n\n            \n                Extends\n            \n            \n                        Edge\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        record\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        record\n                                    \n                                \n                                \n                                    \n                                        record:     Record\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Record\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Query } from '@sinequa/core/app-utils';\nimport { Results, Record } from '@sinequa/core/web-services';\nimport { EdgeType, Node, Edge, NetworkProvider, NetworkDataset } from '../network-models';\nimport { RecordsProvider, StructuralEdgeType, RecordNode } from './records-provider';\nimport { combineLatest } from 'rxjs';\nimport { Action } from '@sinequa/components/action';\n\n/**\n * Extension of the Edge interface, to include the record property\n * from which this edge is generated\n */\nexport interface DynamicEdge extends Edge {\n    record: Record;\n}\n\n/**\n * Extension of the EdgeType interface, to include properties specific\n * to dynamic edges, in particular a function that returns a Query object\n * for a given source node.\n */\nexport interface DynamicEdgeType extends EdgeType {\n    /** Returns a query object to execute to obtain dynamic edges from a node */\n    getQuery: (node: Node, type: DynamicEdgeType) => Query | undefined;\n    /** count limits the number of records returned by the query service and allows for pagination */\n    count?: number;\n    /** Defines when the dynamic edge should be executed. Warning: oninsert may generate multiple simultaneous queries */\n    trigger: \"oninsert\" | \"onclick\" | \"manual\";\n}\n\n/**\n * Tests whether a given edge type is a DynamicEdgeType\n * @param et an edge type\n */\nexport function isDynamicEdgeType(et: EdgeType): et is DynamicEdgeType {\n    return !!(et as DynamicEdgeType).getQuery;\n}\n\n\n/**\n * A extension of the RecordsProvider, where records are not directly\n * provided, but are instead fetched from the server via a Query specific\n * to a source node.\n * Concretely, the dynamic edge provider will attach one (or more) record nodes\n * (and their structural edges) to one (or more) source nodes, whose type is\n * specified in the DynamicEdgeType.\n * Dynamic edges can be attached right when the source nodes are inserted (oninsert),\n * or when a user clicks on a source node (onclick) or when a user clicks on an\n * action button displayed when a source node is clicked.\n * Note that the \"source node\" have to come from different providers, so it is\n * necessary to listen to these providers and update the data generated by this\n * provider accordingly.\n */\nexport class DynamicEdgeProvider extends RecordsProvider {\n\n    /** List of the source nodes that have been already processed via clicks or actions */\n    protected processedNodes: string[] = [];\n    /** to avoid fetching the same data multiple times, we store the record objects fetched from the server in this cache */\n    protected nodeCache = new Map();\n\n    constructor(\n        public name: string,\n        protected edgeType: DynamicEdgeType,\n        protected secondaryEdgeTypes: StructuralEdgeType[],\n        protected permanent: boolean,\n        protected sourceProviders: NetworkProvider[]\n    ){\n        super(name, edgeType.nodeTypes[1], secondaryEdgeTypes, [], false);\n\n        combineLatest(sourceProviders.map(p => p.getProvider())).subscribe(dataset => {\n            if(this.active) {\n                // Merge the nodes from all datasets into a map\n                const map = new Map();\n                dataset.forEach(dataset => {\n                    dataset.getNodes().forEach(node => {\n                        if(node.visible && node.type === this.edgeType.nodeTypes[0]) {\n                            map.set(node.id, node);\n                        }\n                    });\n                });\n                // Update the dataset of dynamic edges\n                this.updateDynamicDataset(Array.from(map.values()));\n            }\n        });\n    }\n    \n    /**\n     * Rebuilds the dataset of this provider, given a list of source nodes to process.\n     * @param sourceNodes A list of source node to process\n     */\n    protected updateDynamicDataset(sourceNodes: Node[]) {\n\n        // We rebuild the dataset from scratch, in case some source nodes were removed\n        this.dataset = new NetworkDataset();\n\n        // If oninsert, we want to process all the source nodes. If not, we want to process the nodes in the processedNodes list\n        if(this.edgeType.trigger !== \"oninsert\") {\n            this.processedNodes = this.processedNodes.filter(id => !!sourceNodes.find(node => node.id === id)); // We want to \"forget\" the nodes that are not in the source anymore\n            sourceNodes = sourceNodes.filter(node => this.processedNodes.indexOf(node.id) !== -1); // We want to process only the nodes currently in the processed list\n        }\n\n        // For each source, we get its query\n        const queries = sourceNodes.map(node => this.nodeCache.has(node.id)? undefined : this.edgeType.getQuery(node, this.edgeType));\n        const _queries = queries.filter(q => !!q) as Query[];\n        // If there are queries, we process them asynchronously\n        if(_queries.length > 0) {\n            this.context.searchService.getMultipleResults(_queries, undefined).subscribe(res => {\n                this.addDynamicEdges(sourceNodes, res.results, queries);\n            });\n        }\n        // If not, we process them synchronously\n        else {\n            this.addDynamicEdges(sourceNodes, [], queries);\n        }\n    \n    }\n\n    /**\n     * Add dynamic edges to a list of source nodes, given a results set\n     * for each of these nodes (either directly provided or stored in the cache).\n     * @param sourceNodes The source nodes\n     * @param res The list of results sets\n     * @param queries The list of queries from which we obtained the results\n     */\n    protected addDynamicEdges(sourceNodes: Node[], res: Results[], queries: (Query|undefined)[]){\n        let j = 0;\n        // For each source node\n        for(let i = 0; i this.createEdge(this.edgeType, node, rNode, undefined, node.visible, {record: rNode.record}) as DynamicEdge);\n    }\n\n    /**\n     * Attach dynamic edges to a given node, either synchronously, if the results set\n     * is available in the cache, or asynchronously, by fetching the data from the server.\n     * @param node The node to process\n     */\n    protected processNode(node: Node) {\n        const query = this.edgeType.getQuery(node, this.edgeType); // Get the search query for this node\n        if(query){\n            if(this.nodeCache.has(node.id)) {\n                if(!this.permanent) {\n                    this.dataset.clear(); // Remove data from previously clicked node\n                    this.processedNodes.splice(0); // Remove the processed nodes\n                }\n                this.processedNodes.push(node.id);\n                this.addDynamicEdges([node], [], [query]); // Insert dynamic nodes and edges for this clicked node\n            }\n            else {\n                this.context.searchService.getResults(query, undefined, {searchInactive: true})\n                    .subscribe(results => {\n                        if(!this.permanent) {\n                            this.dataset.clear(); // Remove data from previously clicked node\n                            this.processedNodes.splice(0); // Remove the processed nodes\n                        }\n                        this.processedNodes.push(node.id);\n                        this.addDynamicEdges([node], [results], [query]); // Insert dynamic nodes and edges for this clicked node\n                    });\n            }\n        }\n    }\n\n\n    // Network provider interface\n\n    /**\n     * Process a clicked source node, if the trigger of the edge type is \"onclick\"\n     * @param node The clicked node\n     */\n    onNodeClicked(node?: Node) {\n        if(this.active && this.edgeType.trigger === \"onclick\" && node && node.type === this.edgeType.nodeTypes[0] && !this.dataset.hasNode(node.id)) {\n            this.processNode(node);\n        }\n    }\n    \n    /**\n     * Returns an Action allowing to process a node, if the trigger of the edge type\n     * is \"manual\".\n     * @param node The clicked node\n     */\n    getNodeActions(node: Node): Action[] {\n        const actions = super.getNodeActions(node);\n        if(this.active && this.edgeType.trigger === \"manual\" && node && node.type === this.edgeType.nodeTypes[0] && !this.dataset.hasNode(node.id)) {            \n            actions.push(new Action({\n                icon: \"fas fa-expand-arrows-alt\",\n                title: this.context.intlService.formatMessage(\"msg#network.actions.expandNode\", {label: node.label}),\n                action: () => {\n                    this.processNode(node);\n                }\n            }));            \n        }\n        return actions;\n    }\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/DynamicEdgeType.html":{"url":"interfaces/DynamicEdgeType.html","title":"interface - DynamicEdgeType","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  DynamicEdgeType\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            network/providers/dynamic-edge-provider.ts\n        \n\n            \n                Description\n            \n            \n                Extension of the EdgeType interface, to include properties specific\nto dynamic edges, in particular a function that returns a Query object\nfor a given source node.\n\n            \n\n            \n                Extends\n            \n            \n                        EdgeType\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        count\n                                \n                                \n                                        getQuery\n                                \n                                \n                                        trigger\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        count\n                                    \n                                \n                                \n                                    \n                                        count:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    count limits the number of records returned by the query service and allows for pagination \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        getQuery\n                                    \n                                \n                                \n                                    \n                                        getQuery:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Returns a query object to execute to obtain dynamic edges from a node \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        trigger\n                                    \n                                \n                                \n                                    \n                                        trigger:     \"oninsert\" | \"onclick\" | \"manual\"\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     \"oninsert\" | \"onclick\" | \"manual\"\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Defines when the dynamic edge should be executed. Warning: oninsert may generate multiple simultaneous queries \n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { Query } from '@sinequa/core/app-utils';\nimport { Results, Record } from '@sinequa/core/web-services';\nimport { EdgeType, Node, Edge, NetworkProvider, NetworkDataset } from '../network-models';\nimport { RecordsProvider, StructuralEdgeType, RecordNode } from './records-provider';\nimport { combineLatest } from 'rxjs';\nimport { Action } from '@sinequa/components/action';\n\n/**\n * Extension of the Edge interface, to include the record property\n * from which this edge is generated\n */\nexport interface DynamicEdge extends Edge {\n    record: Record;\n}\n\n/**\n * Extension of the EdgeType interface, to include properties specific\n * to dynamic edges, in particular a function that returns a Query object\n * for a given source node.\n */\nexport interface DynamicEdgeType extends EdgeType {\n    /** Returns a query object to execute to obtain dynamic edges from a node */\n    getQuery: (node: Node, type: DynamicEdgeType) => Query | undefined;\n    /** count limits the number of records returned by the query service and allows for pagination */\n    count?: number;\n    /** Defines when the dynamic edge should be executed. Warning: oninsert may generate multiple simultaneous queries */\n    trigger: \"oninsert\" | \"onclick\" | \"manual\";\n}\n\n/**\n * Tests whether a given edge type is a DynamicEdgeType\n * @param et an edge type\n */\nexport function isDynamicEdgeType(et: EdgeType): et is DynamicEdgeType {\n    return !!(et as DynamicEdgeType).getQuery;\n}\n\n\n/**\n * A extension of the RecordsProvider, where records are not directly\n * provided, but are instead fetched from the server via a Query specific\n * to a source node.\n * Concretely, the dynamic edge provider will attach one (or more) record nodes\n * (and their structural edges) to one (or more) source nodes, whose type is\n * specified in the DynamicEdgeType.\n * Dynamic edges can be attached right when the source nodes are inserted (oninsert),\n * or when a user clicks on a source node (onclick) or when a user clicks on an\n * action button displayed when a source node is clicked.\n * Note that the \"source node\" have to come from different providers, so it is\n * necessary to listen to these providers and update the data generated by this\n * provider accordingly.\n */\nexport class DynamicEdgeProvider extends RecordsProvider {\n\n    /** List of the source nodes that have been already processed via clicks or actions */\n    protected processedNodes: string[] = [];\n    /** to avoid fetching the same data multiple times, we store the record objects fetched from the server in this cache */\n    protected nodeCache = new Map();\n\n    constructor(\n        public name: string,\n        protected edgeType: DynamicEdgeType,\n        protected secondaryEdgeTypes: StructuralEdgeType[],\n        protected permanent: boolean,\n        protected sourceProviders: NetworkProvider[]\n    ){\n        super(name, edgeType.nodeTypes[1], secondaryEdgeTypes, [], false);\n\n        combineLatest(sourceProviders.map(p => p.getProvider())).subscribe(dataset => {\n            if(this.active) {\n                // Merge the nodes from all datasets into a map\n                const map = new Map();\n                dataset.forEach(dataset => {\n                    dataset.getNodes().forEach(node => {\n                        if(node.visible && node.type === this.edgeType.nodeTypes[0]) {\n                            map.set(node.id, node);\n                        }\n                    });\n                });\n                // Update the dataset of dynamic edges\n                this.updateDynamicDataset(Array.from(map.values()));\n            }\n        });\n    }\n    \n    /**\n     * Rebuilds the dataset of this provider, given a list of source nodes to process.\n     * @param sourceNodes A list of source node to process\n     */\n    protected updateDynamicDataset(sourceNodes: Node[]) {\n\n        // We rebuild the dataset from scratch, in case some source nodes were removed\n        this.dataset = new NetworkDataset();\n\n        // If oninsert, we want to process all the source nodes. If not, we want to process the nodes in the processedNodes list\n        if(this.edgeType.trigger !== \"oninsert\") {\n            this.processedNodes = this.processedNodes.filter(id => !!sourceNodes.find(node => node.id === id)); // We want to \"forget\" the nodes that are not in the source anymore\n            sourceNodes = sourceNodes.filter(node => this.processedNodes.indexOf(node.id) !== -1); // We want to process only the nodes currently in the processed list\n        }\n\n        // For each source, we get its query\n        const queries = sourceNodes.map(node => this.nodeCache.has(node.id)? undefined : this.edgeType.getQuery(node, this.edgeType));\n        const _queries = queries.filter(q => !!q) as Query[];\n        // If there are queries, we process them asynchronously\n        if(_queries.length > 0) {\n            this.context.searchService.getMultipleResults(_queries, undefined).subscribe(res => {\n                this.addDynamicEdges(sourceNodes, res.results, queries);\n            });\n        }\n        // If not, we process them synchronously\n        else {\n            this.addDynamicEdges(sourceNodes, [], queries);\n        }\n    \n    }\n\n    /**\n     * Add dynamic edges to a list of source nodes, given a results set\n     * for each of these nodes (either directly provided or stored in the cache).\n     * @param sourceNodes The source nodes\n     * @param res The list of results sets\n     * @param queries The list of queries from which we obtained the results\n     */\n    protected addDynamicEdges(sourceNodes: Node[], res: Results[], queries: (Query|undefined)[]){\n        let j = 0;\n        // For each source node\n        for(let i = 0; i this.createEdge(this.edgeType, node, rNode, undefined, node.visible, {record: rNode.record}) as DynamicEdge);\n    }\n\n    /**\n     * Attach dynamic edges to a given node, either synchronously, if the results set\n     * is available in the cache, or asynchronously, by fetching the data from the server.\n     * @param node The node to process\n     */\n    protected processNode(node: Node) {\n        const query = this.edgeType.getQuery(node, this.edgeType); // Get the search query for this node\n        if(query){\n            if(this.nodeCache.has(node.id)) {\n                if(!this.permanent) {\n                    this.dataset.clear(); // Remove data from previously clicked node\n                    this.processedNodes.splice(0); // Remove the processed nodes\n                }\n                this.processedNodes.push(node.id);\n                this.addDynamicEdges([node], [], [query]); // Insert dynamic nodes and edges for this clicked node\n            }\n            else {\n                this.context.searchService.getResults(query, undefined, {searchInactive: true})\n                    .subscribe(results => {\n                        if(!this.permanent) {\n                            this.dataset.clear(); // Remove data from previously clicked node\n                            this.processedNodes.splice(0); // Remove the processed nodes\n                        }\n                        this.processedNodes.push(node.id);\n                        this.addDynamicEdges([node], [results], [query]); // Insert dynamic nodes and edges for this clicked node\n                    });\n            }\n        }\n    }\n\n\n    // Network provider interface\n\n    /**\n     * Process a clicked source node, if the trigger of the edge type is \"onclick\"\n     * @param node The clicked node\n     */\n    onNodeClicked(node?: Node) {\n        if(this.active && this.edgeType.trigger === \"onclick\" && node && node.type === this.edgeType.nodeTypes[0] && !this.dataset.hasNode(node.id)) {\n            this.processNode(node);\n        }\n    }\n    \n    /**\n     * Returns an Action allowing to process a node, if the trigger of the edge type\n     * is \"manual\".\n     * @param node The clicked node\n     */\n    getNodeActions(node: Node): Action[] {\n        const actions = super.getNodeActions(node);\n        if(this.active && this.edgeType.trigger === \"manual\" && node && node.type === this.edgeType.nodeTypes[0] && !this.dataset.hasNode(node.id)) {            \n            actions.push(new Action({\n                icon: \"fas fa-expand-arrows-alt\",\n                title: this.context.intlService.formatMessage(\"msg#network.actions.expandNode\", {label: node.label}),\n                action: () => {\n                    this.processNode(node);\n                }\n            }));            \n        }\n        return actions;\n    }\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/DynamicNodeType.html":{"url":"interfaces/DynamicNodeType.html","title":"interface - DynamicNodeType","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  DynamicNodeType\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            network/providers/dynamic-node-provider.ts\n        \n\n            \n                Description\n            \n            \n                Extension of the NodeType interface with additional properties specific\nto dynamic nodes, in particular the getQuery() function that returns a\nquery given a node\n\n            \n\n            \n                Extends\n            \n            \n                        NodeType\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        getQuery\n                                \n                                \n                                        trigger\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        getQuery\n                                    \n                                \n                                \n                                    \n                                        getQuery:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Returns a query object to execute to obtain a record for this node \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        trigger\n                                    \n                                \n                                \n                                    \n                                        trigger:     \"oninsert\" | \"onclick\" | \"manual\"\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     \"oninsert\" | \"onclick\" | \"manual\"\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Defines when the query should be executed. Warning: oninsert may generate multiple simultaneous queries \n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { Query } from '@sinequa/core/app-utils';\nimport { Record } from '@sinequa/core/web-services';\nimport { NodeType, Node, NetworkProvider, NetworkDataset } from '../network-models';\nimport { RecordsProvider, StructuralEdgeType, RecordNode } from './records-provider';\nimport { Utils } from '@sinequa/core/base';\nimport { combineLatest } from 'rxjs';\nimport { Action } from '@sinequa/components/action';\n\n/**\n * Extension of the NodeType interface with additional properties specific\n * to dynamic nodes, in particular the getQuery() function that returns a\n * query given a node\n */\nexport interface DynamicNodeType extends NodeType {\n    /** Returns a query object to execute to obtain a record for this node */\n    getQuery: (node: Node) => Query|undefined;\n    /** Defines when the query should be executed. Warning: oninsert may generate multiple simultaneous queries */\n    trigger: \"oninsert\" | \"onclick\" | \"manual\";\n}\n\n/**\n * An extension of the RecordsProvider which manages dynamic node types.\n * Dynamic nodes are nodes that are transformed into record nodes via a\n * query. The records are fetched from the server dynamic to enrich the\n * original node.\n * For example, a simple metadata node with the value \"Bill Gates\" can be\n * enriched with the wikipedia page of Bill Gate, which can provide a lot\n * of structured information about Bill Gates (which can be used, for\n * example, to attach structural edges to the original Bill Gates node).\n * Note that the \"source node\" have to come from different providers, so it is\n * necessary to listen to these providers and update the data generated by this\n * provider accordingly.\n */\nexport class DynamicNodeProvider extends RecordsProvider {\n\n    /** List of the source nodes that have been already processed via clicks or actions */\n    protected processedNodes: string[] = [];\n    /** to avoid fetching the same data multiple times, we store the record objects fetched from the server in this cache */\n    protected nodeCache = new Map();\n\n    constructor(\n        public name: string,\n        protected nodeType: DynamicNodeType,\n        protected edgeTypes: StructuralEdgeType[],\n        protected permanent: boolean,\n        protected sourceProviders: NetworkProvider[]\n    ){\n        super(name, nodeType, edgeTypes, [], false);\n        \n        combineLatest(sourceProviders.map(p => p.getProvider())).subscribe(dataset => {\n            if(this.active){\n                // \"Merge\" the nodes from all datasets into a map\n                const map = new Map();\n                dataset.forEach(dataset => {\n                    dataset.getNodes().forEach(node => {\n                        if(node.visible && node.type === this.nodeType) {\n                            map.set(node.id, node);\n                        }\n                    });\n                });\n                // Update the dataset of dynamic edges\n                this.updateDynamicDataset(Array.from(map.values()));\n            }\n        });\n    }\n\n    /**\n     * Rebuild the dataset of this provider given a list of source nodes to process\n     * @param sourceNodes A list of source nodes to process\n     */\n    protected updateDynamicDataset(sourceNodes: Node[]) {\n        \n        // We rebuild the dataset from scratch, in case some source nodes were removed\n        this.dataset = new NetworkDataset();\n\n        // If oninsert, we want to process all the source nodes. If not, we want to process the nodes in the processedNodes list\n        if(this.nodeType.trigger !== \"oninsert\") {\n            this.processedNodes = this.processedNodes.filter(id => !!sourceNodes.find(node => node.id === id)); // We want to \"forget\" the nodes that are not in the source anymore\n            sourceNodes = sourceNodes.filter(node => this.processedNodes.indexOf(node.id) !== -1); // We want to process only the nodes currently in the processed list\n        }\n        \n        // For each source, we get its query\n        const queries = sourceNodes.map(node => (this.nodeCache.has(node.id) || (node as RecordNode).record)? undefined : this.nodeType.getQuery(node));\n        const _queries = queries.filter(q => !!q) as Query[];\n        // If there are queries, we process them asynchronously\n        if(_queries.length > 0) {\n            this.context.searchService.getMultipleResults(_queries, undefined).subscribe(res => {\n                this.mutateNodes(sourceNodes as RecordNode[], res.results.map(r => r.records.length > 0? r.records[0] : undefined), queries);\n            });\n        }\n        else {\n            this.mutateNodes(sourceNodes as RecordNode[], [], queries);\n        }\n    }\n\n    /**\n     * Processes a given node: If the record for this node is available\n     * in the node cache, we take this record and mutate the node. If not,\n     * we get the query via the dynamic node type's getQuery() function,\n     * and mutate the node upon results.\n     * @param node A source node to process\n     */\n    protected processNode(node: RecordNode) {\n        if(!this.permanent) {\n            this.dataset.clear(); // Remove data from previously clicked node\n            this.processedNodes.splice(0); // Remove the processed nodes\n        }\n\n        this.processedNodes.push(node.id);\n        if(this.nodeCache.has(node.id)) {\n            this.mutateNode(node, this.nodeCache[node.id]);\n            this.provider.next(this.dataset);\n        }\n        else {\n            const query = this.nodeType.getQuery(node);\n            if(query) {\n                this.context.searchService.getResults(query, undefined, {searchInactive: true}).subscribe(results => {\n                    if(results.records.length > 0) {\n                        this.mutateNode(node, results.records[0]);\n                    }\n                    this.provider.next(this.dataset);\n                });\n            }\n        }       \n    }\n\n    /**\n     * Mutates a list of nodes, given a corresponding list of records\n     * and of queries. Manages to get the record objects either from\n     * these inputs or from the cache.\n     * @param nodes The list of node to mutate\n     * @param records The list of records for each node\n     * @param queries The list of queries for each node\n     */\n    protected mutateNodes(nodes: RecordNode[], records: (Record|undefined)[], queries: (Query|undefined)[]) {\n        let j = 0;\n        for(let i = 0; i {\n            this.addStructuralEdges(node, type);\n        });\n    }\n\n    /**\n     * (Re-)computes the node options of a node (after mutation)\n     * @param node a node\n     */\n    protected refreshNodeOptions(node: Node) {\n        let options;\n        if(typeof this.nodeType.nodeOptions === \"function\") {\n            options = this.nodeType.nodeOptions(node, this.nodeType);\n        }\n        else {\n            options = this.nodeType.nodeOptions;\n        }\n        return Utils.extend(node, options);\n    }\n    \n    // Network provider interface\n\n    /**\n     * Process a clicked node, for dynamic node types with an \"onclick\" trigger\n     * @param node The clicked node\n     */\n    onNodeClicked(node?: RecordNode) {\n        if(this.active && this.nodeType.trigger === \"onclick\" && node && node.type === this.nodeType && this.processedNodes.indexOf(node.id) === -1) {\n            this.processNode(node);\n        }\n    }\n\n    /**\n     * Creates an action to process a clicked node, for dynamic node types\n     * with a \"manual\" trigger.\n     * @param node The clicked node\n     */\n    getNodeActions(node: RecordNode): Action[] {\n        const actions = super.getNodeActions(node);\n        if(this.active && this.nodeType.trigger === \"manual\" && node && node.type === this.nodeType && this.processedNodes.indexOf(node.id) === -1) {\n            actions.unshift(new Action({\n                icon: \"fas fa-star-of-life\",\n                title: this.context.intlService.formatMessage(\"msg#network.actions.expandNode\", {label: node.label}),\n                action: () => {\n                    this.processNode(node);\n                }\n            }));\n        }\n        return actions;\n    }\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Edge.html":{"url":"interfaces/Edge.html","title":"interface - Edge","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  Edge\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            network/network-models.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        context\n                                \n                                \n                                        count\n                                \n                                \n                                            Optional\n                                        fieldValue\n                                \n                                \n                                        from\n                                \n                                \n                                        id\n                                \n                                \n                                        provider\n                                \n                                \n                                        to\n                                \n                                \n                                        type\n                                \n                                \n                                        visible\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        context\n                                    \n                                \n                                \n                                    \n                                        context:         NetworkContext\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         NetworkContext\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        count\n                                    \n                                \n                                \n                                    \n                                        count:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    count is a property representing the strength of an edge, which scales the count of adjacent nodes\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        fieldValue\n                                    \n                                \n                                \n                                    \n                                        fieldValue:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    A field value may be provided to filter search based on the edge field type \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        from\n                                    \n                                \n                                \n                                    \n                                        from:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                    \n                                \n                                \n                                    \n                                        id:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        provider\n                                    \n                                \n                                \n                                    \n                                        provider:         NetworkProvider\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         NetworkProvider\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        to\n                                    \n                                \n                                \n                                    \n                                        to:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        type\n                                    \n                                \n                                \n                                    \n                                        type:         EdgeType\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         EdgeType\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        visible\n                                    \n                                \n                                \n                                    \n                                        visible:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Subject } from 'rxjs';\nimport { Action } from '@sinequa/components/action';\nimport { Utils } from '@sinequa/core/base';\nimport { DataSet } from \"vis-data/peer/esm/vis-data\";\nimport { SearchService } from '@sinequa/components/search';\nimport { VisNetworkService } from 'ngx-vis';\nimport { AppService, ExprBuilder } from '@sinequa/core/app-utils';\nimport { IntlService } from '@sinequa/core/intl';\n\n// TYPES (configuration)\n\nexport interface NodeType {\n    name: string;\n    /** Vis Node options (merged in the Node objects). See https://visjs.github.io/vis-network/docs/network/nodes.html */\n    nodeOptions: {[key: string]: any} | ((node: Node, type: NodeType) => {[key: string]: any} );\n    /** If a field is provided, it can be used to filter the node value (and access the label, formatter, etc.) */\n    field?: string;\n}\n\nexport interface EdgeType {\n    /** Node types attached to this edge type. Should typically be 2 items, but cooccurrence aggregation might return more */\n    nodeTypes: NodeType[];\n    /** Vis Edge options (merged in the Edge objects). See https://visjs.github.io/vis-network/docs/network/edges.html */\n    edgeOptions: {[key: string]: any} | ((nodes: Node[], edge: Edge, type: EdgeType) => {[key: string]: any} );\n    /** If a field is provided, it can be used to filter the node value (and access the label, formatter, etc.) */\n    field?: string;\n}\n\n\n// DATA\n\n// Nodes (based on Vis Node interface)\n\nexport interface Node {\n    id: string;\n    label: string;\n\n    // Custom properties\n    type: NodeType;\n    provider: NetworkProvider;\n    visible: boolean;\n    /** count is a mutable property used to scale the node size in function of the size of adjacent edges*/\n    count: number;\n    /** the precedence of a node determines which node object is kept when merging two dataset (the highest precedence node is kept) */\n    precedence?: number;\n    // Context\n    context: NetworkContext;\n}\n\n// Edge (based on Vis Edge interface)\n\nexport interface Edge {\n    id: string;\n    from: string;\n    to: string;\n\n    // Custom properties\n    type: EdgeType;\n    provider: NetworkProvider;\n    visible: boolean;    \n    /** count is a property representing the strength of an edge, which scales the count of adjacent nodes*/\n    count: number;\n    /** A field value may be provided to filter search based on the edge field type */\n    fieldValue?: string;\n    // Context\n    context: NetworkContext;\n}\n\n\nexport interface NetworkProvider {\n    /** Whether or not the provider is active (if inactive, it will not provide empty datasets of nodes and edges) */\n    active: boolean;\n\n    /** Readable name of this provider */\n    name: string;\n\n    /** Dataset of this provider */\n    dataset: NetworkDataset;\n\n    /** Context (wrapper for general data about the network and services) */\n    context: NetworkContext;\n\n    /** Returns the Subject of this provider */\n    getProvider(): Subject;\n\n    /** Asynchronously provide data via it's provider Subject */\n    getData(context: NetworkContext); // skip/count handled internally\n\n    /** Called after the datasets provided by all providers have been merged into a single dataset */\n    onDatasetsMerged(dataset: NetworkDataset);\n\n    /** Called after the dataset is filtered and passed to Vis for rendering */\n    onNodesInserted(nodes: Node[]);\n\n    /** Called when ANY node is clicked in the rendered view of the network */\n    onNodeClicked(node: Node | undefined);\n\n    /** Called when ANY edge is clicked in the rendered view of the network */\n    onEdgeClicked(edge: Edge | undefined);\n\n    /** Retrieve the list of action for this provider. */\n    getProviderActions(): Action[];\n\n    /** Retrieve the list of action for a given node, and this provider. */\n    getNodeActions(node: Node): Action[];\n    \n    /** Retrieve the list of action for a given edge, and this provider. */\n    getEdgeActions(edge: Edge): Action[];\n\n    /** Called when the providers are discarded. Can be use to cancel subscriptions */\n    onDestroy();\n}\n\nexport interface NetworkContext {\n    /** Name of this network, for use in selections */\n    name: string;\n    /** Vis.js data structures */\n    nodes: DataSet;\n    edges: DataSet;\n    /** Useful services */\n    searchService: SearchService;\n    networkService: VisNetworkService;\n    appService: AppService;\n    intlService: IntlService;\n    exprBuilder: ExprBuilder;\n    /** Interactions */\n    select(node?: Node, edge?: Edge): void;\n}\n\n\nexport class NetworkDataset {\n\n    // Node index\n    private readonly nodeIdx: Map = new Map();\n\n    // Edge index\n    private readonly edgeIdx: Map = new Map();\n\n\n    /** Returns whether this node exists */\n    public hasNode(id: string): boolean {\n        return this.nodeIdx.has(id);\n    }\n    \n    /** Returns whether this edge exists */\n    public hasEdge(id: string): boolean {\n        return this.edgeIdx.has(id);\n    }\n\n    /** Returns the node with given id */\n    public getNode(id: string): Node | undefined {\n        return this.nodeIdx.get(id);\n    }\n\n    /** Returns the edge with given id */\n    public getEdge(id: string): Edge | undefined {\n        return this.edgeIdx.get(id);\n    }\n\n    /** Get the list of nodes */\n    public getNodes(): Node[] {\n        return Array.from(this.nodeIdx.values());\n    }\n\n    /** Get the list of edges */\n    public getEdges(): Edge[] {\n        return Array.from(this.edgeIdx.values());\n    }    \n\n    /** Get the list of visible nodes */\n    public getVisibleNodes(): Node[] {\n        return this.getNodes().filter(n => n.visible);\n    }\n\n    /** Get the list of visible edges */\n    public getVisibleEdges(): Edge[] {\n        return this.getEdges().filter(e => e.visible);\n    }\n\n    /** Get the list of node ids */\n    public getNodeIds(): string[] {\n        return Array.from(this.nodeIdx.keys());\n    }\n\n    /** Get the list of edge ids */\n    public getEdgeIds(): string[] {\n        return Array.from(this.edgeIdx.keys());\n    }\n    \n    /** Clears this dataset */\n    public clear() {\n        this.nodeIdx.clear();\n        this.edgeIdx.clear();\n    }\n\n    /** Add one or multiple nodes */\n    public addNodes(nodes: Node | Node[]) {\n        Array.isArray(nodes)? nodes.forEach(node => this.addNode(node)) : this.addNode(nodes);\n    }\n\n    /** Add one or multiple edges. */\n    public addEdges(edges: Edge | Edge[]) {\n        Array.isArray(edges)? edges.forEach(edge => this.addEdge(edge)) : this.addEdge(edges);\n    }\n\n    /** Remove one or multiple nodes. /!\\ Connected edges MUST be removed as well (use cleanRemoveNode() to do so) */\n    private removeNodes(ids: string | string[]) {\n        Array.isArray(ids)? ids.forEach(id => this.removeNode(id)) : this.removeNode(ids);\n    }\n\n    /** Remove one or multiple edges. */\n    public removeEdges(ids: string | string[]) {\n        Array.isArray(ids)? ids.forEach(id => this.removeEdge(id)) : this.removeEdge(ids);\n    }\n\n    /** Remove a node and its adjacent edges. keepDanglingNodes = false (default) removes the remaining nodes with no neighbor */\n    public cleanRemoveNode(nodeId: string, keepDanglingNodes?: boolean) {\n        this.getAdjacentEdges(nodeId).forEach(edge => {\n            const neighbor = this.getNode(edge.from === nodeId ? edge.to : edge.from) as Node;\n            this.removeEdges(edge.id);\n            neighbor.count -= edge.count;\n            if(!keepDanglingNodes && this.getAdjacentEdges(neighbor.id).length === 0) {\n                this.removeNodes(neighbor.id);\n            }\n        });\n    }\n\n    /** Get the edges adjacent to a node (O(n) method) */\n    public getAdjacentEdges(nodeId: string): Edge[] {\n        return this.getEdges().filter(e => e.from === nodeId || e.to === nodeId);\n    }\n\n    /** Get the nodes connected to a node via a single node (0(n) method) */\n    public getConnectedNodes(nodeId: string): Node[] {\n        return this.getAdjacentEdges(nodeId)\n                    .map(e => this.getNode(e.from === nodeId ? e.to : e.from) as Node);\n    }\n\n    /**\n     * Merge this dataset with another one. \n     * \n     * When duplicates nodes or edges are found:\n     * - The existing item is kept and updated\n     * - Their 'count' properties are added\n     * - Their 'visible' properties are ORed\n     * - Their nodeOptions and edgeOptions are updated\n     * \n     * @param dataset \n     */\n    public merge(dataset: NetworkDataset): NetworkDataset {\n\n        dataset.getNodes().forEach(node => {\n            node = Object.assign({}, node); // Avoid modifying the original datasets\n            if(!this.hasNode(node.id)) {\n                this.addNode(node);\n            }\n            else {\n                // Merge the new node with the existing one (which takes precedence by default)\n                let existingNode = this.getNode(node.id) as Node;\n                if((node.precedence || 0) > (existingNode.precedence || 0)) {\n                    // Set the new node in the node index\n                    this.nodeIdx.set(node.id, node);\n                    // swap existingNode and node for the merging of count, visible and node options\n                    const temp = node;\n                    node = existingNode;\n                    existingNode = temp;\n                }\n                existingNode.count += node.count;\n                existingNode.visible = existingNode.visible || node.visible;\n                let options: {[key: string]: any};\n                if(typeof existingNode.type.nodeOptions === \"function\") {\n                    options = existingNode.type.nodeOptions(existingNode, existingNode.type);\n                }\n                else {\n                    options = existingNode.type.nodeOptions;\n                }\n                Utils.extend(existingNode, options);\n            }\n        });\n\n        dataset.getEdges().forEach(edge => {\n            edge = Object.assign({}, edge); // Avoid modifying the original datasets\n            if(!this.hasEdge(edge.id)) {\n                this.addEdge(edge);\n            }\n            else {\n                // Merge the new edge with the existing one (which takes precedence)\n                // eg. statistical and semantic edges\n                const existingEdge = this.getEdge(edge.id) as Edge;\n                existingEdge.count += edge.count;\n                existingEdge.visible = existingEdge.visible || edge.visible;\n                // Merge edge labels (taking duplicates into account)\n                if(!!existingEdge[\"label\"] && !!edge[\"label\"]){\n                    edge[\"labels\"].forEach(label => {\n                        if(existingEdge[\"labels\"].indexOf(label) === -1) {\n                            existingEdge[\"label\"] += \", \"+label;\n                            existingEdge[\"labels\"].push(label);\n                        }\n                    });\n                }\n                let options: {[key: string]: any};\n                if(typeof existingEdge.type.edgeOptions === \"function\") {\n                    const nodes = [existingEdge.from, existingEdge.to].map(id => this.nodeIdx[id]);\n                    options = existingEdge.type.edgeOptions(nodes, existingEdge, existingEdge.type);\n                }\n                else {\n                    options = existingEdge.type.edgeOptions;\n                }\n                Utils.extend(existingEdge, options);\n            }\n        });\n\n        return this;\n    }\n\n    /** Transfer nodes and edges to the Vis nodes and edges DataSets */\n    updateDatasets(nodes: DataSet, edges: DataSet) {\n        nodes.remove(nodes.get().filter(n => !this.getNode(n.id)?.visible));\n        edges.remove(edges.get().filter(e => !this.getEdge(e.id)?.visible));\n        nodes.update(this.getVisibleNodes());\n        edges.update(this.getVisibleEdges());\n    }\n\n    \n    private addNode(node: Node) {\n        if(this.hasNode(node.id)) {\n            throw new Error(`Node '${node.id}' already in dataset`);\n        }\n        this.nodeIdx.set(node.id, node);\n    }\n    \n    private addEdge(edge: Edge) {\n        if(this.hasEdge(edge.id)) {\n            throw new Error(`Edge '${edge.id}' already in dataset`);\n        }\n        if(!this.hasNode(edge.from) || !this.hasNode(edge.to)) {\n            throw new Error(`Edge '${edge.id}' cannot be added as one of the nodes is missing from the dataset`)\n        }\n        this.edgeIdx.set(edge.id, edge);\n    }\n\n    private removeNode(id: string) {\n        this.nodeIdx.delete(id);\n    }\n\n    private removeEdge(id: string) {\n        this.edgeIdx.delete(id);\n    }\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/EdgeType.html":{"url":"interfaces/EdgeType.html","title":"interface - EdgeType","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  EdgeType\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            network/network-models.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        edgeOptions\n                                \n                                \n                                            Optional\n                                        field\n                                \n                                \n                                        nodeTypes\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        edgeOptions\n                                    \n                                \n                                \n                                    \n                                        edgeOptions:     literal type | \n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type | \n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Vis Edge options (merged in the Edge objects). See https://visjs.github.io/vis-network/docs/network/edges.html \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        field\n                                    \n                                \n                                \n                                    \n                                        field:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    If a field is provided, it can be used to filter the node value (and access the label, formatter, etc.) \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        nodeTypes\n                                    \n                                \n                                \n                                    \n                                        nodeTypes:     NodeType[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     NodeType[]\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Node types attached to this edge type. Should typically be 2 items, but cooccurrence aggregation might return more \n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { Subject } from 'rxjs';\nimport { Action } from '@sinequa/components/action';\nimport { Utils } from '@sinequa/core/base';\nimport { DataSet } from \"vis-data/peer/esm/vis-data\";\nimport { SearchService } from '@sinequa/components/search';\nimport { VisNetworkService } from 'ngx-vis';\nimport { AppService, ExprBuilder } from '@sinequa/core/app-utils';\nimport { IntlService } from '@sinequa/core/intl';\n\n// TYPES (configuration)\n\nexport interface NodeType {\n    name: string;\n    /** Vis Node options (merged in the Node objects). See https://visjs.github.io/vis-network/docs/network/nodes.html */\n    nodeOptions: {[key: string]: any} | ((node: Node, type: NodeType) => {[key: string]: any} );\n    /** If a field is provided, it can be used to filter the node value (and access the label, formatter, etc.) */\n    field?: string;\n}\n\nexport interface EdgeType {\n    /** Node types attached to this edge type. Should typically be 2 items, but cooccurrence aggregation might return more */\n    nodeTypes: NodeType[];\n    /** Vis Edge options (merged in the Edge objects). See https://visjs.github.io/vis-network/docs/network/edges.html */\n    edgeOptions: {[key: string]: any} | ((nodes: Node[], edge: Edge, type: EdgeType) => {[key: string]: any} );\n    /** If a field is provided, it can be used to filter the node value (and access the label, formatter, etc.) */\n    field?: string;\n}\n\n\n// DATA\n\n// Nodes (based on Vis Node interface)\n\nexport interface Node {\n    id: string;\n    label: string;\n\n    // Custom properties\n    type: NodeType;\n    provider: NetworkProvider;\n    visible: boolean;\n    /** count is a mutable property used to scale the node size in function of the size of adjacent edges*/\n    count: number;\n    /** the precedence of a node determines which node object is kept when merging two dataset (the highest precedence node is kept) */\n    precedence?: number;\n    // Context\n    context: NetworkContext;\n}\n\n// Edge (based on Vis Edge interface)\n\nexport interface Edge {\n    id: string;\n    from: string;\n    to: string;\n\n    // Custom properties\n    type: EdgeType;\n    provider: NetworkProvider;\n    visible: boolean;    \n    /** count is a property representing the strength of an edge, which scales the count of adjacent nodes*/\n    count: number;\n    /** A field value may be provided to filter search based on the edge field type */\n    fieldValue?: string;\n    // Context\n    context: NetworkContext;\n}\n\n\nexport interface NetworkProvider {\n    /** Whether or not the provider is active (if inactive, it will not provide empty datasets of nodes and edges) */\n    active: boolean;\n\n    /** Readable name of this provider */\n    name: string;\n\n    /** Dataset of this provider */\n    dataset: NetworkDataset;\n\n    /** Context (wrapper for general data about the network and services) */\n    context: NetworkContext;\n\n    /** Returns the Subject of this provider */\n    getProvider(): Subject;\n\n    /** Asynchronously provide data via it's provider Subject */\n    getData(context: NetworkContext); // skip/count handled internally\n\n    /** Called after the datasets provided by all providers have been merged into a single dataset */\n    onDatasetsMerged(dataset: NetworkDataset);\n\n    /** Called after the dataset is filtered and passed to Vis for rendering */\n    onNodesInserted(nodes: Node[]);\n\n    /** Called when ANY node is clicked in the rendered view of the network */\n    onNodeClicked(node: Node | undefined);\n\n    /** Called when ANY edge is clicked in the rendered view of the network */\n    onEdgeClicked(edge: Edge | undefined);\n\n    /** Retrieve the list of action for this provider. */\n    getProviderActions(): Action[];\n\n    /** Retrieve the list of action for a given node, and this provider. */\n    getNodeActions(node: Node): Action[];\n    \n    /** Retrieve the list of action for a given edge, and this provider. */\n    getEdgeActions(edge: Edge): Action[];\n\n    /** Called when the providers are discarded. Can be use to cancel subscriptions */\n    onDestroy();\n}\n\nexport interface NetworkContext {\n    /** Name of this network, for use in selections */\n    name: string;\n    /** Vis.js data structures */\n    nodes: DataSet;\n    edges: DataSet;\n    /** Useful services */\n    searchService: SearchService;\n    networkService: VisNetworkService;\n    appService: AppService;\n    intlService: IntlService;\n    exprBuilder: ExprBuilder;\n    /** Interactions */\n    select(node?: Node, edge?: Edge): void;\n}\n\n\nexport class NetworkDataset {\n\n    // Node index\n    private readonly nodeIdx: Map = new Map();\n\n    // Edge index\n    private readonly edgeIdx: Map = new Map();\n\n\n    /** Returns whether this node exists */\n    public hasNode(id: string): boolean {\n        return this.nodeIdx.has(id);\n    }\n    \n    /** Returns whether this edge exists */\n    public hasEdge(id: string): boolean {\n        return this.edgeIdx.has(id);\n    }\n\n    /** Returns the node with given id */\n    public getNode(id: string): Node | undefined {\n        return this.nodeIdx.get(id);\n    }\n\n    /** Returns the edge with given id */\n    public getEdge(id: string): Edge | undefined {\n        return this.edgeIdx.get(id);\n    }\n\n    /** Get the list of nodes */\n    public getNodes(): Node[] {\n        return Array.from(this.nodeIdx.values());\n    }\n\n    /** Get the list of edges */\n    public getEdges(): Edge[] {\n        return Array.from(this.edgeIdx.values());\n    }    \n\n    /** Get the list of visible nodes */\n    public getVisibleNodes(): Node[] {\n        return this.getNodes().filter(n => n.visible);\n    }\n\n    /** Get the list of visible edges */\n    public getVisibleEdges(): Edge[] {\n        return this.getEdges().filter(e => e.visible);\n    }\n\n    /** Get the list of node ids */\n    public getNodeIds(): string[] {\n        return Array.from(this.nodeIdx.keys());\n    }\n\n    /** Get the list of edge ids */\n    public getEdgeIds(): string[] {\n        return Array.from(this.edgeIdx.keys());\n    }\n    \n    /** Clears this dataset */\n    public clear() {\n        this.nodeIdx.clear();\n        this.edgeIdx.clear();\n    }\n\n    /** Add one or multiple nodes */\n    public addNodes(nodes: Node | Node[]) {\n        Array.isArray(nodes)? nodes.forEach(node => this.addNode(node)) : this.addNode(nodes);\n    }\n\n    /** Add one or multiple edges. */\n    public addEdges(edges: Edge | Edge[]) {\n        Array.isArray(edges)? edges.forEach(edge => this.addEdge(edge)) : this.addEdge(edges);\n    }\n\n    /** Remove one or multiple nodes. /!\\ Connected edges MUST be removed as well (use cleanRemoveNode() to do so) */\n    private removeNodes(ids: string | string[]) {\n        Array.isArray(ids)? ids.forEach(id => this.removeNode(id)) : this.removeNode(ids);\n    }\n\n    /** Remove one or multiple edges. */\n    public removeEdges(ids: string | string[]) {\n        Array.isArray(ids)? ids.forEach(id => this.removeEdge(id)) : this.removeEdge(ids);\n    }\n\n    /** Remove a node and its adjacent edges. keepDanglingNodes = false (default) removes the remaining nodes with no neighbor */\n    public cleanRemoveNode(nodeId: string, keepDanglingNodes?: boolean) {\n        this.getAdjacentEdges(nodeId).forEach(edge => {\n            const neighbor = this.getNode(edge.from === nodeId ? edge.to : edge.from) as Node;\n            this.removeEdges(edge.id);\n            neighbor.count -= edge.count;\n            if(!keepDanglingNodes && this.getAdjacentEdges(neighbor.id).length === 0) {\n                this.removeNodes(neighbor.id);\n            }\n        });\n    }\n\n    /** Get the edges adjacent to a node (O(n) method) */\n    public getAdjacentEdges(nodeId: string): Edge[] {\n        return this.getEdges().filter(e => e.from === nodeId || e.to === nodeId);\n    }\n\n    /** Get the nodes connected to a node via a single node (0(n) method) */\n    public getConnectedNodes(nodeId: string): Node[] {\n        return this.getAdjacentEdges(nodeId)\n                    .map(e => this.getNode(e.from === nodeId ? e.to : e.from) as Node);\n    }\n\n    /**\n     * Merge this dataset with another one. \n     * \n     * When duplicates nodes or edges are found:\n     * - The existing item is kept and updated\n     * - Their 'count' properties are added\n     * - Their 'visible' properties are ORed\n     * - Their nodeOptions and edgeOptions are updated\n     * \n     * @param dataset \n     */\n    public merge(dataset: NetworkDataset): NetworkDataset {\n\n        dataset.getNodes().forEach(node => {\n            node = Object.assign({}, node); // Avoid modifying the original datasets\n            if(!this.hasNode(node.id)) {\n                this.addNode(node);\n            }\n            else {\n                // Merge the new node with the existing one (which takes precedence by default)\n                let existingNode = this.getNode(node.id) as Node;\n                if((node.precedence || 0) > (existingNode.precedence || 0)) {\n                    // Set the new node in the node index\n                    this.nodeIdx.set(node.id, node);\n                    // swap existingNode and node for the merging of count, visible and node options\n                    const temp = node;\n                    node = existingNode;\n                    existingNode = temp;\n                }\n                existingNode.count += node.count;\n                existingNode.visible = existingNode.visible || node.visible;\n                let options: {[key: string]: any};\n                if(typeof existingNode.type.nodeOptions === \"function\") {\n                    options = existingNode.type.nodeOptions(existingNode, existingNode.type);\n                }\n                else {\n                    options = existingNode.type.nodeOptions;\n                }\n                Utils.extend(existingNode, options);\n            }\n        });\n\n        dataset.getEdges().forEach(edge => {\n            edge = Object.assign({}, edge); // Avoid modifying the original datasets\n            if(!this.hasEdge(edge.id)) {\n                this.addEdge(edge);\n            }\n            else {\n                // Merge the new edge with the existing one (which takes precedence)\n                // eg. statistical and semantic edges\n                const existingEdge = this.getEdge(edge.id) as Edge;\n                existingEdge.count += edge.count;\n                existingEdge.visible = existingEdge.visible || edge.visible;\n                // Merge edge labels (taking duplicates into account)\n                if(!!existingEdge[\"label\"] && !!edge[\"label\"]){\n                    edge[\"labels\"].forEach(label => {\n                        if(existingEdge[\"labels\"].indexOf(label) === -1) {\n                            existingEdge[\"label\"] += \", \"+label;\n                            existingEdge[\"labels\"].push(label);\n                        }\n                    });\n                }\n                let options: {[key: string]: any};\n                if(typeof existingEdge.type.edgeOptions === \"function\") {\n                    const nodes = [existingEdge.from, existingEdge.to].map(id => this.nodeIdx[id]);\n                    options = existingEdge.type.edgeOptions(nodes, existingEdge, existingEdge.type);\n                }\n                else {\n                    options = existingEdge.type.edgeOptions;\n                }\n                Utils.extend(existingEdge, options);\n            }\n        });\n\n        return this;\n    }\n\n    /** Transfer nodes and edges to the Vis nodes and edges DataSets */\n    updateDatasets(nodes: DataSet, edges: DataSet) {\n        nodes.remove(nodes.get().filter(n => !this.getNode(n.id)?.visible));\n        edges.remove(edges.get().filter(e => !this.getEdge(e.id)?.visible));\n        nodes.update(this.getVisibleNodes());\n        edges.update(this.getVisibleEdges());\n    }\n\n    \n    private addNode(node: Node) {\n        if(this.hasNode(node.id)) {\n            throw new Error(`Node '${node.id}' already in dataset`);\n        }\n        this.nodeIdx.set(node.id, node);\n    }\n    \n    private addEdge(edge: Edge) {\n        if(this.hasEdge(edge.id)) {\n            throw new Error(`Edge '${edge.id}' already in dataset`);\n        }\n        if(!this.hasNode(edge.from) || !this.hasNode(edge.to)) {\n            throw new Error(`Edge '${edge.id}' cannot be added as one of the nodes is missing from the dataset`)\n        }\n        this.edgeIdx.set(edge.id, edge);\n    }\n\n    private removeNode(id: string) {\n        this.nodeIdx.delete(id);\n    }\n\n    private removeEdge(id: string) {\n        this.edgeIdx.delete(id);\n    }\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/FacetChartDataPoint.html":{"url":"interfaces/FacetChartDataPoint.html","title":"interface - FacetChartDataPoint","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  FacetChartDataPoint\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            ngx-charts/facet-chart/facet-chart.ts\n        \n\n\n            \n                Extends\n            \n            \n                        ChartDataPoint\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        $item\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        $item\n                                    \n                                \n                                \n                                    \n                                        $item:     AggregationItem\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     AggregationItem\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import {Component, Input, OnInit, OnDestroy, OnChanges, SimpleChanges} from \"@angular/core\";\nimport {Results, Aggregation, AggregationItem} from \"@sinequa/core/web-services\";\nimport {Utils} from \"@sinequa/core/base\";\nimport {IntlService} from \"@sinequa/core/intl\";\nimport {AppService} from \"@sinequa/core/app-utils\";\nimport {SelectionService} from '@sinequa/components/selection';\nimport {Subscription} from \"rxjs\";\nimport {ChartOptions, ChartDataPoint} from \"../chart/chart\";\nimport {FacetService, AbstractFacet} from \"@sinequa/components/facet\";\nimport {Action} from \"@sinequa/components/action\";\n\nexport interface FacetChartDataPoint extends ChartDataPoint {\n    $item: AggregationItem;\n}\n\n@Component({\n    selector: \"sq-facet-ngx-chart\",\n    templateUrl: \"./facet-chart.html\"\n})\nexport class FacetNgxChart extends AbstractFacet implements OnInit, OnChanges, OnDestroy {\n    @Input() results: Results;\n    @Input() aggregation: string;\n    @Input() aggregations: string[];\n    @Input() chartType: string;\n    @Input() colorScheme: string;\n    @Input() colors: string[] = [\"#7aa3e5\"];    // Single color (default is bar chart)\n    @Input() filteredColor: string = \"#C3E6CB\";\n    @Input() selectedColor: string = \"#7acce5\";\n\n    // Aggregation from the Results object\n    data: Aggregation | undefined;\n\n    // sq-charts inputs\n    dataPoints: FacetChartDataPoint[];\n    options: ChartOptions;\n\n    private readonly selectedValues = new Set();\n\n    // Actions (displayed in facet menu)\n    // All actions are built in the constructor\n    private readonly clearFilters: Action;\n    private readonly selectField: Action;\n\n    // Subscriptions\n    private localeChange: Subscription;\n    private selectionChange: Subscription;\n\n    constructor(\n        private facetService: FacetService,\n        private intlService: IntlService,\n        private selectionService: SelectionService,\n        private appService: AppService\n    ){\n        super();\n\n        // Clear the current filters\n        this.clearFilters = new Action({\n            icon: \"far fa-minus-square\",\n            title: \"msg#facet.clearSelects\",\n            action: () => {\n                this.facetService.clearFiltersSearch(this.getName(), true);\n            }\n        });\n\n        this.selectField = new Action({\n            title: \"Select field\",\n            updater: (action) => {\n                if(this.aggregations){\n                    action.name = this.aggregation;\n                    action.text = this.aggregation;\n                    action.children = this.aggregations\n                        .filter(v => v!==this.aggregation)\n                        .map(a => {\n                            return new Action({\n                                name: a,\n                                text: a,\n                                action : (item, event) => {\n                                    this.aggregation = a;\n                                    this.ngOnChanges(  {results: true});\n                                }\n                            });\n                        });\n                }\n            }\n        });\n\n    }\n\n    /**\n     * Name of the facet, used to create and retrieve selections\n     * through the facet service.\n     */\n    getName() : string {\n        return this.aggregation;\n    }\n\n    /**\n     * Returns all the actions that are relevant in the current context\n     */\n    get actions(): Action[] {\n        const actions: Action[] = [];\n        if(this.hasFiltered()) {\n            actions.push(this.clearFilters);\n        }\n        if(!!this.selectField.name) {\n            actions.push(this.selectField);\n        }\n        return actions;\n    }\n\n    /**\n     * Returns true if there is an active selection (or exclusion) from this facet\n     */\n    hasFiltered(): boolean {\n        return this.facetService.hasFiltered(this.getName());\n    }\n\n    /**\n     * Generates the sq-chart input data, including formatting\n     */\n    private makeData() {\n        this.dataPoints = [];\n        if(this.data && this.data.items){\n            for (const item of this.data.items) {\n                this.dataPoints.push({\n                    name: this.facetService.formatValue(item),\n                    value: item.count,\n                    $item: item\n                });\n            }\n        }\n    }\n\n    /**\n     * Update selected values (the value in the aggregation that belong to a selected document)\n     */\n    private updateSelectedValues(){\n        this.selectedValues.clear();\n        this.results.records\n            .filter(record => record.$selected)\n            .forEach(record => {\n                if(this.data){\n                    const val = record[this.appService.getColumnAlias(this.appService.getColumn(this.data.column))];\n                    if(val){\n                        if(Utils.isString(val)){    // Sourcestr\n                            this.selectedValues.add(val.toLowerCase());\n                        }\n                        if(Utils.isArray(val)){\n                            val.forEach(v => {\n                                if(Utils.isString(v))\n                                    this.selectedValues.add(v.toLowerCase()); // Sourcecsv\n                                else\n                                    this.selectedValues.add(v.value.toLowerCase()); // Entity\n                            });\n                        }\n                    }\n                }\n            });\n    }\n\n    /**\n     * Create the chart options\n     */\n    private createChartOptions(){\n        this.options = {\n            type: this.chartType,\n            tickFormatter: this.tickFormatter,\n            colorScheme: this.colorScheme\n        };\n\n        if (this.colors && this.colors.length > 0) {\n            this.options.getItemColor = (value: string): string => {\n                const index = this.dataPoints.findIndex(dataPoint => dataPoint.name === value);\n                if (index === -1) {\n                    return \"black\";\n                }\n                const item = this.getItem(this.dataPoints[index]);\n                if (item) {\n                    if (this.isFiltered(item)) {\n                        return this.filteredColor;\n                    }\n                    if(this.selectedValues.has(Utils.toSqlValue(item.value).toLowerCase())){\n                        return this.selectedColor;\n                    }\n                }\n                return this.colors[index % this.colors.length]; // Rolling colors scheme\n            };\n        }\n    }\n\n    tickFormatter = (value: any): string => {\n        if (Utils.isNumber(value)) {\n            // No fractional counts\n            if (value % 1 !== 0) {\n                return \"\";\n            }\n            return this.intlService.formatNumber(value);\n        }\n        return value;\n    }\n\n    /**\n     * Subscribe to language changes, in order to reformat the data points.\n     * Subscribe to selection changes, in order to highlight selected documents.\n     */\n    ngOnInit() {\n        this.localeChange = Utils.subscribe(this.intlService.events,\n            (value) => {\n                this.makeData();\n            });\n        this.selectionChange = this.selectionService.events.subscribe(event => {\n            this.ngOnChanges(  {results: true});\n        });\n    }\n\n\n    ngOnChanges(changes: SimpleChanges) {\n        this.selectField.update();\n\n        if (!!changes[\"results\"]) {\n            // may be null if no data\n            this.data = this.facetService.getAggregation(this.aggregation, this.results, {facetName: this.getName()});\n\n            this.updateSelectedValues();\n\n            this.createChartOptions();\n\n            this.makeData();\n        }\n    }\n\n    ngOnDestroy() {\n        this.localeChange.unsubscribe();\n        this.selectionChange.unsubscribe();\n    }\n\n    click(dataPoint: ChartDataPoint) {\n        if (this.data) {\n            const item = this.getItem(dataPoint);\n            if (!!item) {\n                if(!this.isFiltered(item))\n                    this.facetService.addFilterSearch(this.getName(), this.data, item);\n                else\n                    this.facetService.removeFilterSearch(this.getName(), this.data, item);\n            }\n        }\n    }\n\n    /**\n     * Returns true if the given AggregationItem is filtered\n     * @param item\n     */\n    isFiltered(item: AggregationItem) : boolean {\n        return !!this.data && this.facetService.itemFiltered(this.getName(), this.data, item);\n    }\n\n    getItem(dataPoint: ChartDataPoint): AggregationItem | undefined {\n        const _dataPoint = this.dataPoints.find(_dataPoint => _dataPoint.name === dataPoint.name && _dataPoint.value === dataPoint.value);\n        if (!!_dataPoint && !!_dataPoint.$item) {\n            return _dataPoint.$item;\n        }\n        return undefined;\n    }\n\n    /* AbstractFacet abstract methods */\n    isHidden(): boolean {\n        // Always display if multivalued\n        return !this.aggregations && (!this.data || !this.dataPoints);\n    }\n\n}\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/FacetNgxChart.html":{"url":"components/FacetNgxChart.html","title":"component - FacetNgxChart","body":"\n                   \n\n\n\n\n\n  Components\n  FacetNgxChart\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    ngx-charts/facet-chart/facet-chart.ts\n\n\n\n    \n        Extends\n    \n    \n            AbstractFacet\n    \n\n    \n        Implements\n    \n    \n                    OnInit\n                    OnChanges\n                    OnDestroy\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                sq-facet-ngx-chart\n            \n\n\n\n\n            \n                templateUrl\n                ./facet-chart.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                data\n                            \n                            \n                                dataPoints\n                            \n                            \n                                options\n                            \n                            \n                                tickFormatter\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                click\n                            \n                            \n                                getItem\n                            \n                            \n                                getName\n                            \n                            \n                                hasFiltered\n                            \n                            \n                                isFiltered\n                            \n                            \n                                isHidden\n                            \n                            \n                                ngOnChanges\n                            \n                            \n                                ngOnDestroy\n                            \n                            \n                                ngOnInit\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                aggregation\n                            \n                            \n                                aggregations\n                            \n                            \n                                chartType\n                            \n                            \n                                colors\n                            \n                            \n                                colorScheme\n                            \n                            \n                                filteredColor\n                            \n                            \n                                results\n                            \n                            \n                                selectedColor\n                            \n                        \n                    \n                \n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    actions\n                                \n                            \n                        \n                    \n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(facetService: FacetService, intlService: IntlService, selectionService: SelectionService, appService: AppService)\n                    \n                \n                        \n                            \n                                Defined in ngx-charts/facet-chart/facet-chart.ts:46\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        facetService\n                                                  \n                                                        \n                                                                    FacetService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        intlService\n                                                  \n                                                        \n                                                                    IntlService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        selectionService\n                                                  \n                                                        \n                                                                    SelectionService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        appService\n                                                  \n                                                        \n                                                                    AppService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        aggregation\n                    \n                \n                \n                    \n                        Type :         string\n\n                    \n                \n                        \n                            \n                                    Defined in ngx-charts/facet-chart/facet-chart.ts:22\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        aggregations\n                    \n                \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                        \n                            \n                                    Defined in ngx-charts/facet-chart/facet-chart.ts:23\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        chartType\n                    \n                \n                \n                    \n                        Type :         string\n\n                    \n                \n                        \n                            \n                                    Defined in ngx-charts/facet-chart/facet-chart.ts:24\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        colors\n                    \n                \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Default value : [\"#7aa3e5\"]\n                    \n                \n                        \n                            \n                                    Defined in ngx-charts/facet-chart/facet-chart.ts:26\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        colorScheme\n                    \n                \n                \n                    \n                        Type :         string\n\n                    \n                \n                        \n                            \n                                    Defined in ngx-charts/facet-chart/facet-chart.ts:25\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        filteredColor\n                    \n                \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : \"#C3E6CB\"\n                    \n                \n                        \n                            \n                                    Defined in ngx-charts/facet-chart/facet-chart.ts:27\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        results\n                    \n                \n                \n                    \n                        Type :     Results\n\n                    \n                \n                        \n                            \n                                    Defined in ngx-charts/facet-chart/facet-chart.ts:21\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        selectedColor\n                    \n                \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : \"#7acce5\"\n                    \n                \n                        \n                            \n                                    Defined in ngx-charts/facet-chart/facet-chart.ts:28\n                            \n                        \n            \n        \n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            click\n                        \n                        \n                    \n                \n            \n            \n                \nclick(dataPoint: ChartDataPoint)\n                \n            \n\n\n            \n                \n                    Defined in ngx-charts/facet-chart/facet-chart.ts:237\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dataPoint\n                                    \n                                                ChartDataPoint\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getItem\n                        \n                        \n                    \n                \n            \n            \n                \ngetItem(dataPoint: ChartDataPoint)\n                \n            \n\n\n            \n                \n                    Defined in ngx-charts/facet-chart/facet-chart.ts:257\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dataPoint\n                                    \n                                                ChartDataPoint\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     AggregationItem | undefined\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getName\n                        \n                        \n                    \n                \n            \n            \n                \ngetName()\n                \n            \n\n\n            \n                \n                    Defined in ngx-charts/facet-chart/facet-chart.ts:93\n                \n            \n\n\n            \n                \n                    Name of the facet, used to create and retrieve selections\nthrough the facet service.\n\n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            hasFiltered\n                        \n                        \n                    \n                \n            \n            \n                \nhasFiltered()\n                \n            \n\n\n            \n                \n                    Defined in ngx-charts/facet-chart/facet-chart.ts:114\n                \n            \n\n\n            \n                \n                    Returns true if there is an active selection (or exclusion) from this facet\n\n\n                    \n                        Returns :         boolean\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            isFiltered\n                        \n                        \n                    \n                \n            \n            \n                \nisFiltered(item: AggregationItem)\n                \n            \n\n\n            \n                \n                    Defined in ngx-charts/facet-chart/facet-chart.ts:253\n                \n            \n\n\n            \n                \n                    Returns true if the given AggregationItem is filtered\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    item\n                                    \n                                            AggregationItem\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            isHidden\n                        \n                        \n                    \n                \n            \n            \n                \nisHidden()\n                \n            \n\n\n            \n                \n                    Defined in ngx-charts/facet-chart/facet-chart.ts:266\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         boolean\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            ngOnChanges\n                        \n                        \n                    \n                \n            \n            \n                \nngOnChanges(changes: SimpleChanges)\n                \n            \n\n\n            \n                \n                    Defined in ngx-charts/facet-chart/facet-chart.ts:217\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    changes\n                                    \n                                                SimpleChanges\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            ngOnDestroy\n                        \n                        \n                    \n                \n            \n            \n                \nngOnDestroy()\n                \n            \n\n\n            \n                \n                    Defined in ngx-charts/facet-chart/facet-chart.ts:232\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            ngOnInit\n                        \n                        \n                    \n                \n            \n            \n                \nngOnInit()\n                \n            \n\n\n            \n                \n                    Defined in ngx-charts/facet-chart/facet-chart.ts:206\n                \n            \n\n\n            \n                \n                    Subscribe to language changes, in order to reformat the data points.\nSubscribe to selection changes, in order to highlight selected documents.\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n    \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            data\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Aggregation | undefined\n\n                        \n                    \n                        \n                            \n                                    Defined in ngx-charts/facet-chart/facet-chart.ts:31\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            dataPoints\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     FacetChartDataPoint[]\n\n                        \n                    \n                        \n                            \n                                    Defined in ngx-charts/facet-chart/facet-chart.ts:34\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            options\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         ChartOptions\n\n                        \n                    \n                        \n                            \n                                    Defined in ngx-charts/facet-chart/facet-chart.ts:35\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            tickFormatter\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : () => {...}\n                        \n                    \n                        \n                            \n                                    Defined in ngx-charts/facet-chart/facet-chart.ts:191\n                            \n                        \n\n\n            \n        \n\n\n    \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        actions\n                    \n                \n\n                \n                    \n                        getactions()\n                    \n                \n                            \n                                \n                                    Defined in ngx-charts/facet-chart/facet-chart.ts:100\n                                \n                            \n                    \n                        \n                                Returns all the actions that are relevant in the current context\n\n\n                                \n                                    Returns :     Action[]\n\n                                \n                        \n                    \n\n            \n        \n\n\n\n\n    \n        import {Component, Input, OnInit, OnDestroy, OnChanges, SimpleChanges} from \"@angular/core\";\nimport {Results, Aggregation, AggregationItem} from \"@sinequa/core/web-services\";\nimport {Utils} from \"@sinequa/core/base\";\nimport {IntlService} from \"@sinequa/core/intl\";\nimport {AppService} from \"@sinequa/core/app-utils\";\nimport {SelectionService} from '@sinequa/components/selection';\nimport {Subscription} from \"rxjs\";\nimport {ChartOptions, ChartDataPoint} from \"../chart/chart\";\nimport {FacetService, AbstractFacet} from \"@sinequa/components/facet\";\nimport {Action} from \"@sinequa/components/action\";\n\nexport interface FacetChartDataPoint extends ChartDataPoint {\n    $item: AggregationItem;\n}\n\n@Component({\n    selector: \"sq-facet-ngx-chart\",\n    templateUrl: \"./facet-chart.html\"\n})\nexport class FacetNgxChart extends AbstractFacet implements OnInit, OnChanges, OnDestroy {\n    @Input() results: Results;\n    @Input() aggregation: string;\n    @Input() aggregations: string[];\n    @Input() chartType: string;\n    @Input() colorScheme: string;\n    @Input() colors: string[] = [\"#7aa3e5\"];    // Single color (default is bar chart)\n    @Input() filteredColor: string = \"#C3E6CB\";\n    @Input() selectedColor: string = \"#7acce5\";\n\n    // Aggregation from the Results object\n    data: Aggregation | undefined;\n\n    // sq-charts inputs\n    dataPoints: FacetChartDataPoint[];\n    options: ChartOptions;\n\n    private readonly selectedValues = new Set();\n\n    // Actions (displayed in facet menu)\n    // All actions are built in the constructor\n    private readonly clearFilters: Action;\n    private readonly selectField: Action;\n\n    // Subscriptions\n    private localeChange: Subscription;\n    private selectionChange: Subscription;\n\n    constructor(\n        private facetService: FacetService,\n        private intlService: IntlService,\n        private selectionService: SelectionService,\n        private appService: AppService\n    ){\n        super();\n\n        // Clear the current filters\n        this.clearFilters = new Action({\n            icon: \"far fa-minus-square\",\n            title: \"msg#facet.clearSelects\",\n            action: () => {\n                this.facetService.clearFiltersSearch(this.getName(), true);\n            }\n        });\n\n        this.selectField = new Action({\n            title: \"Select field\",\n            updater: (action) => {\n                if(this.aggregations){\n                    action.name = this.aggregation;\n                    action.text = this.aggregation;\n                    action.children = this.aggregations\n                        .filter(v => v!==this.aggregation)\n                        .map(a => {\n                            return new Action({\n                                name: a,\n                                text: a,\n                                action : (item, event) => {\n                                    this.aggregation = a;\n                                    this.ngOnChanges(  {results: true});\n                                }\n                            });\n                        });\n                }\n            }\n        });\n\n    }\n\n    /**\n     * Name of the facet, used to create and retrieve selections\n     * through the facet service.\n     */\n    getName() : string {\n        return this.aggregation;\n    }\n\n    /**\n     * Returns all the actions that are relevant in the current context\n     */\n    get actions(): Action[] {\n        const actions: Action[] = [];\n        if(this.hasFiltered()) {\n            actions.push(this.clearFilters);\n        }\n        if(!!this.selectField.name) {\n            actions.push(this.selectField);\n        }\n        return actions;\n    }\n\n    /**\n     * Returns true if there is an active selection (or exclusion) from this facet\n     */\n    hasFiltered(): boolean {\n        return this.facetService.hasFiltered(this.getName());\n    }\n\n    /**\n     * Generates the sq-chart input data, including formatting\n     */\n    private makeData() {\n        this.dataPoints = [];\n        if(this.data && this.data.items){\n            for (const item of this.data.items) {\n                this.dataPoints.push({\n                    name: this.facetService.formatValue(item),\n                    value: item.count,\n                    $item: item\n                });\n            }\n        }\n    }\n\n    /**\n     * Update selected values (the value in the aggregation that belong to a selected document)\n     */\n    private updateSelectedValues(){\n        this.selectedValues.clear();\n        this.results.records\n            .filter(record => record.$selected)\n            .forEach(record => {\n                if(this.data){\n                    const val = record[this.appService.getColumnAlias(this.appService.getColumn(this.data.column))];\n                    if(val){\n                        if(Utils.isString(val)){    // Sourcestr\n                            this.selectedValues.add(val.toLowerCase());\n                        }\n                        if(Utils.isArray(val)){\n                            val.forEach(v => {\n                                if(Utils.isString(v))\n                                    this.selectedValues.add(v.toLowerCase()); // Sourcecsv\n                                else\n                                    this.selectedValues.add(v.value.toLowerCase()); // Entity\n                            });\n                        }\n                    }\n                }\n            });\n    }\n\n    /**\n     * Create the chart options\n     */\n    private createChartOptions(){\n        this.options = {\n            type: this.chartType,\n            tickFormatter: this.tickFormatter,\n            colorScheme: this.colorScheme\n        };\n\n        if (this.colors && this.colors.length > 0) {\n            this.options.getItemColor = (value: string): string => {\n                const index = this.dataPoints.findIndex(dataPoint => dataPoint.name === value);\n                if (index === -1) {\n                    return \"black\";\n                }\n                const item = this.getItem(this.dataPoints[index]);\n                if (item) {\n                    if (this.isFiltered(item)) {\n                        return this.filteredColor;\n                    }\n                    if(this.selectedValues.has(Utils.toSqlValue(item.value).toLowerCase())){\n                        return this.selectedColor;\n                    }\n                }\n                return this.colors[index % this.colors.length]; // Rolling colors scheme\n            };\n        }\n    }\n\n    tickFormatter = (value: any): string => {\n        if (Utils.isNumber(value)) {\n            // No fractional counts\n            if (value % 1 !== 0) {\n                return \"\";\n            }\n            return this.intlService.formatNumber(value);\n        }\n        return value;\n    }\n\n    /**\n     * Subscribe to language changes, in order to reformat the data points.\n     * Subscribe to selection changes, in order to highlight selected documents.\n     */\n    ngOnInit() {\n        this.localeChange = Utils.subscribe(this.intlService.events,\n            (value) => {\n                this.makeData();\n            });\n        this.selectionChange = this.selectionService.events.subscribe(event => {\n            this.ngOnChanges(  {results: true});\n        });\n    }\n\n\n    ngOnChanges(changes: SimpleChanges) {\n        this.selectField.update();\n\n        if (!!changes[\"results\"]) {\n            // may be null if no data\n            this.data = this.facetService.getAggregation(this.aggregation, this.results, {facetName: this.getName()});\n\n            this.updateSelectedValues();\n\n            this.createChartOptions();\n\n            this.makeData();\n        }\n    }\n\n    ngOnDestroy() {\n        this.localeChange.unsubscribe();\n        this.selectionChange.unsubscribe();\n    }\n\n    click(dataPoint: ChartDataPoint) {\n        if (this.data) {\n            const item = this.getItem(dataPoint);\n            if (!!item) {\n                if(!this.isFiltered(item))\n                    this.facetService.addFilterSearch(this.getName(), this.data, item);\n                else\n                    this.facetService.removeFilterSearch(this.getName(), this.data, item);\n            }\n        }\n    }\n\n    /**\n     * Returns true if the given AggregationItem is filtered\n     * @param item\n     */\n    isFiltered(item: AggregationItem) : boolean {\n        return !!this.data && this.facetService.itemFiltered(this.getName(), this.data, item);\n    }\n\n    getItem(dataPoint: ChartDataPoint): AggregationItem | undefined {\n        const _dataPoint = this.dataPoints.find(_dataPoint => _dataPoint.name === dataPoint.name && _dataPoint.value === dataPoint.value);\n        if (!!_dataPoint && !!_dataPoint.$item) {\n            return _dataPoint.$item;\n        }\n        return undefined;\n    }\n\n    /* AbstractFacet abstract methods */\n    isHidden(): boolean {\n        // Always display if multivalued\n        return !this.aggregations && (!this.data || !this.dataPoints);\n    }\n\n}\n    \n\n    \n        \n    \n\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '    '\n    var COMPONENTS = [{'name': 'BsEdgeInfoCard', 'selector': 'sq-edge-info-card'},{'name': 'BsFacetHeatmapComponent', 'selector': 'sq-facet-heatmap'},{'name': 'BsFacetTimelineComponent', 'selector': 'sq-facet-timeline'},{'name': 'BsHeatmapComponent', 'selector': 'sq-heatmap'},{'name': 'BsNodeInfoCard', 'selector': 'sq-node-info-card'},{'name': 'BsResultsHeatmapView', 'selector': 'sq-results-heatmap-view'},{'name': 'BsTimelineComponent', 'selector': 'sq-timeline'},{'name': 'BsTooltipComponent', 'selector': 'sq-tooltip'},{'name': 'FacetNgxChart', 'selector': 'sq-facet-ngx-chart'},{'name': 'FusionChart', 'selector': 'sq-fusion-chart'},{'name': 'MapComponent', 'selector': 'sq-googlemaps'},{'name': 'MoneyCloudComponent', 'selector': 'sq-money-cloud'},{'name': 'MoneyTimelineComponent', 'selector': 'sq-money-timeline'},{'name': 'NetworkComponent', 'selector': 'sq-network'},{'name': 'NgxChart', 'selector': 'sq-ngx-chart'},{'name': 'ResultTimeline', 'selector': 'sq-result-timeline'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'FacetNgxChart'};\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/FinanceModule.html":{"url":"modules/FinanceModule.html","title":"module - FinanceModule","body":"\n                   \n\n\n\n\n    Modules\n    FinanceModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_FinanceModule\n\n\n\ncluster_FinanceModule_declarations\n\n\n\ncluster_FinanceModule_imports\n\n\n\ncluster_FinanceModule_exports\n\n\n\n\nMoneyCloudComponent\n\nMoneyCloudComponent\n\n\n\nFinanceModule\n\nFinanceModule\n\nFinanceModule -->\n\nMoneyCloudComponent->FinanceModule\n\n\n\n\n\nMoneyTimelineComponent\n\nMoneyTimelineComponent\n\nFinanceModule -->\n\nMoneyTimelineComponent->FinanceModule\n\n\n\n\n\nMoneyCloudComponent \n\nMoneyCloudComponent \n\nMoneyCloudComponent  -->\n\nFinanceModule->MoneyCloudComponent \n\n\n\n\n\nMoneyTimelineComponent \n\nMoneyTimelineComponent \n\nMoneyTimelineComponent  -->\n\nFinanceModule->MoneyTimelineComponent \n\n\n\n\n\nBsHeatmapModule\n\nBsHeatmapModule\n\nFinanceModule -->\n\nBsHeatmapModule->FinanceModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            finance/finance.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Declarations\n                    \n                        \n                            MoneyCloudComponent\n                        \n                        \n                            MoneyTimelineComponent\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            BsHeatmapModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            MoneyCloudComponent\n                        \n                        \n                            MoneyTimelineComponent\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { NgModule } from \"@angular/core\";\nimport { CommonModule } from \"@angular/common\";\n\nimport { IntlModule } from '@sinequa/core/intl';\nimport { UtilsModule } from \"@sinequa/components/utils\";\nimport { MoneyTimelineComponent } from \"./money-timeline/money-timeline.component\";\nimport { BsHeatmapModule } from \"@sinequa/analytics/heatmap\";\nimport { BsActionModule } from \"@sinequa/components/action\";\nimport { MoneyCloudComponent } from \"./money-cloud/money-cloud.component\";\n\n\n@NgModule({\n\n    imports: [\n        CommonModule,\n        IntlModule,\n        UtilsModule,\n        BsHeatmapModule,\n        BsActionModule\n    ],\n    declarations: [\n        MoneyTimelineComponent,\n        MoneyCloudComponent\n    ],\n    exports: [\n        MoneyTimelineComponent,\n        MoneyCloudComponent\n    ],\n})\nexport class FinanceModule {}\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/FusionChartsModule.html":{"url":"modules/FusionChartsModule.html","title":"module - FusionChartsModule","body":"\n                   \n\n\n\n\n    Modules\n    FusionChartsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_FusionChartsModule\n\n\n\ncluster_FusionChartsModule_declarations\n\n\n\ncluster_FusionChartsModule_exports\n\n\n\n\nFusionChart\n\nFusionChart\n\n\n\nFusionChartsModule\n\nFusionChartsModule\n\nFusionChartsModule -->\n\nFusionChart->FusionChartsModule\n\n\n\n\n\nFusionChart \n\nFusionChart \n\nFusionChart  -->\n\nFusionChartsModule->FusionChart \n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            fusioncharts/fusioncharts.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Declarations\n                    \n                        \n                            FusionChart\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            FusionChart\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { NgModule } from \"@angular/core\";\nimport { CommonModule } from \"@angular/common\";\n\nimport { FusionChartsModule as FCModule } from \"angular-fusioncharts\";\n\n// Import FusionCharts library and chart modules\nimport * as FusionCharts from \"fusioncharts\";\nimport * as charts from \"fusioncharts/fusioncharts.charts\";\nimport * as FusionTheme from \"fusioncharts/themes/fusioncharts.theme.fusion\";\nimport * as CandyTheme from \"fusioncharts/themes/fusioncharts.theme.candy\";\n\nimport { IntlModule } from '@sinequa/core/intl';\nimport { BsSelectionModule } from '@sinequa/components/selection';\nimport { UtilsModule } from \"@sinequa/components/utils\";\n\nimport { FusionChart } from \"./chart/chart\";\n\nFusionCharts.options.creditLabel = false;\n// Fusion is a light theme, Candy is a dark theme\nFCModule.fcRoot(FusionCharts, charts, FusionTheme, CandyTheme);\n\n@NgModule({\n\n    imports: [\n        CommonModule,\n        IntlModule,\n        UtilsModule,\n        BsSelectionModule,\n        FCModule\n    ],\n    declarations: [\n        FusionChart\n    ],\n    exports: [\n        FusionChart\n    ],\n})\nexport class FusionChartsModule {}\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/GoogleMapsModule.html":{"url":"modules/GoogleMapsModule.html","title":"module - GoogleMapsModule","body":"\n                   \n\n\n\n\n    Modules\n    GoogleMapsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_GoogleMapsModule\n\n\n\ncluster_GoogleMapsModule_declarations\n\n\n\ncluster_GoogleMapsModule_exports\n\n\n\n\nMapComponent\n\nMapComponent\n\n\n\nGoogleMapsModule\n\nGoogleMapsModule\n\nGoogleMapsModule -->\n\nMapComponent->GoogleMapsModule\n\n\n\n\n\nMapComponent \n\nMapComponent \n\nMapComponent  -->\n\nGoogleMapsModule->MapComponent \n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            googlemaps/googlemaps.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Declarations\n                    \n                        \n                            MapComponent\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            MapComponent\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { NgModule } from \"@angular/core\";\nimport { CommonModule } from \"@angular/common\";\n\nimport { IntlModule } from '@sinequa/core/intl';\nimport { BsActionModule } from \"@sinequa/components/action\";\nimport { BsFacetModule } from \"@sinequa/components/facet\";\nimport { BsSelectionModule } from '@sinequa/components/selection';\n\nimport { AgmCoreModule } from '@agm/core';\nimport { MapComponent } from './map.component';\n\n@NgModule({\n\n    imports: [\n        CommonModule,\n        IntlModule,\n        BsActionModule,\n        BsFacetModule,\n        BsSelectionModule,\n        \n        AgmCoreModule,\n    ],\n    declarations: [\n        MapComponent\n    ],\n    exports: [\n        MapComponent\n    ],\n})\nexport class GoogleMapsModule {}\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/HeatmapItem.html":{"url":"interfaces/HeatmapItem.html","title":"interface - HeatmapItem","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  HeatmapItem\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            heatmap/bootstrap/heatmap.component.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        count\n                                \n                                \n                                        display\n                                \n                                \n                                            Optional\n                                        selected\n                                \n                                \n                                        value\n                                \n                                \n                                        x\n                                \n                                \n                                        y\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        count\n                                    \n                                \n                                \n                                    \n                                        count:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        display\n                                    \n                                \n                                \n                                    \n                                        display:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        selected\n                                    \n                                \n                                \n                                    \n                                        selected:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        value\n                                    \n                                \n                                \n                                    \n                                        value:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        x\n                                    \n                                \n                                \n                                    \n                                        x:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        y\n                                    \n                                \n                                \n                                    \n                                        y:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Component, ElementRef, Output, EventEmitter, Input, ViewChild, OnChanges, AfterViewInit } from '@angular/core';\n\nimport * as d3 from 'd3';\n\nexport interface HeatmapItem {\n    x: string;\n    y: string;\n    count: number;\n    value: string;\n    display: string;\n    selected?: boolean;\n}\n\n@Component({\n    selector: \"sq-heatmap\",\n    templateUrl: \"./heatmap.component.html\",\n    styleUrls: ['./heatmap.component.scss']\n})\nexport class BsHeatmapComponent implements OnChanges, AfterViewInit {\n    /**\n     * Raw data to display (will be filtered in function of maxX and maxY parameters)\n     */\n    @Input() data: HeatmapItem[];\n\n    // Graphical parameters\n    @Input() height = 600;\n    @Input() width = 600;\n    @Input() margin = {top: 100, bottom: 20, left: 100, right: 40};\n    @Input() transition = 1000; // Transition time in ms (0 to avoid transitions)\n\n    // Interaction parameters\n    @Input() itemsClickable = true;\n    @Input() axisClickable = true;\n\n    // Axis/Scales parameters\n    @Input() buckets = 9; // Color buckets\n    @Input() colorScheme = \"schemeBlues\"; // Color scheme from D3\n    @Input() maxX = 20; // Max items on X\n    @Input() maxY = 20; // Max items on Y\n    @Input() theme: \"light\" | \"dark\" = \"light\";\n    \n    // Events from user interactions\n    @Output() itemClicked = new EventEmitter();\n    @Output() axisClicked = new EventEmitter();\n\n    // D3 Scales\n    x: d3.ScaleBand;\n    y: d3.ScaleBand;\n    color: d3.ScaleQuantile;\n\n    // Axes\n    @ViewChild(\"xAxis\") gx: ElementRef;\n    @ViewChild(\"yAxis\") gy: ElementRef;\n    xAxis: d3.Selection;\n    yAxis: d3.Selection;\n    \n    // Data actually displayed\n    dataFiltered: HeatmapItem[] = [];\n\n    // Tooltip    \n    tooltipItem?: HeatmapItem;\n    tooltipOrientation: \"left\" | \"right\";\n    tooltipTop: number;\n    tooltipRight: number;\n    tooltipLeft: number;\n\n    // Misc\n    viewInit: boolean;\n    originalCount: number;\n\n    constructor(\n        private el: ElementRef\n    ){}\n\n    /**\n     * ngOnChanges is used to respond to changes in the data (or chart parameter)\n     */\n    ngOnChanges() {\n\n        this.data = this.data || [];\n\n        // Pre-process data\n        const xLabels = Array.from(new Set(this.data.map(value => value.x))).slice(0, this.maxX);\n        const yLabels = Array.from(new Set(this.data.map(value => value.y))).slice(0, this.maxY);\n        this.dataFiltered = this.data.filter(value => xLabels.includes(value.x) && yLabels.includes(value.y));\n\n        // Create scales\n        this.x = d3.scaleBand()\n            .domain(xLabels)\n            .range([0, this.width-this.margin.left-this.margin.right]);\n\n        this.y = d3.scaleBand()\n            .domain(yLabels)\n            .range([0, this.height-this.margin.top-this.margin.bottom]);\n\n        this.color = d3.scaleQuantile()\n            .domain(this.dataFiltered.map(item => item.count))\n            .range(d3[this.colorScheme][this.buckets]);\n\n        // Note: ngOnChanges is always called once, before ngAfterViewInit\n        if(this.viewInit) {\n            this.buildChart(!!this.transition);\n        }\n    }\n\n    // Note: In onAfterViewInit we can access gx and gy, obtained with @ViewChild.\n    // At this point we can call buildChart()\n    ngAfterViewInit(){\n        this.xAxis = d3.select(this.gx.nativeElement);\n        this.yAxis = d3.select(this.gy.nativeElement);\n        this.viewInit = true;\n\n        this.buildChart();\n    }\n    \n    /**\n     * buildChart() actually only builds the axes of the chart, since the\n     * rest is build automatically with Angular syntax in the template.\n     * We build axis programmatically (with D3 selects) to benefit from the\n     * D3 abstractions and transitions.\n     * @param update \n     */\n    buildChart(update?: boolean){\n                    \n        if(update){\n            const t = d3.transition().duration(this.transition) as d3.Transition;\n    \n            this.xAxis.transition(t)\n                .call(d3.axisTop(this.x).tickSize(0))\n                .on(\"end\", () => this.xAxis.selectAll('text').each(this.wrap));\n\n            this.yAxis.transition(t)\n                .call(d3.axisLeft(this.y).tickSize(0))\n                .on(\"end\", () => this.yAxis.selectAll('text').each(this.wrap));\n            \n        }\n        else {\n            this.xAxis.call(d3.axisTop(this.x).tickSize(0));\n            this.yAxis.call(d3.axisLeft(this.y).tickSize(0));\n        }\n\n        this.xAxis.selectAll(\".domain\").remove(); // Remove the axis line\n        this.xAxis.selectAll(\"text\")  // Tilt the text\n            .attr(\"transform\", \"rotate(-35)\")\n            .style(\"text-anchor\", \"start\")\n            .each(this.wrap)\n            .on(\"click\", d => this.onAxisClicked(d, 'x'));\n\n        this.yAxis.selectAll(\".domain\").remove(); // Remove the axis line\n        this.yAxis.selectAll(\"text\")\n            .each(this.wrap)\n            .on(\"click\", d => this.onAxisClicked(d, 'y'));\n    }\n\n    /**\n     * Called when the user hovers the mouse over a heatmap tile\n     * @param item \n     * @param event \n     */\n    onMouseOver(item: HeatmapItem, event: MouseEvent){\n        this.tooltipItem = item;\n\n        const x = this.x(item.x) as number;\n        const y = this.y(item.y) as number;\n\n        // Since we use viewBox to auto-adjust the SVG to the container size, we have to\n        // convert from the SVG coordinate system to the HTML coordinate system\n        const actualWidth = (this.el.nativeElement as HTMLElement).offsetWidth;\n        const scale = actualWidth / this.width;\n        const relativeX = x / this.width;\n\n        // Tooltip to the right\n        if(relativeX ) => {\n        const self = d3.select(nodes[i]);\n        let textLength = nodes[i].getComputedTextLength();\n        let text = self.text();\n        const fullText = self.text();\n        while (textLength > 90 && text.length > 0) {\n          text = text.slice(0, -1)\n          self.text(text + '...');\n          textLength = nodes[i].getComputedTextLength();\n        }\n        self.append('svg:title').text(fullText);\n    };\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/MapComponent.html":{"url":"components/MapComponent.html","title":"component - MapComponent","body":"\n                   \n\n\n\n\n\n  Components\n  MapComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    googlemaps/map.component.ts\n\n\n\n    \n        Extends\n    \n    \n            AbstractFacet\n    \n\n    \n        Implements\n    \n    \n                    OnChanges\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                sq-googlemaps\n            \n\n\n\n\n            \n                templateUrl\n                ./map.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                bounds\n                            \n                            \n                                clearFilters\n                            \n                            \n                                    Public\n                                exprBuilder\n                            \n                            \n                                    Public\n                                facetService\n                            \n                            \n                                filterArea\n                            \n                            \n                                fitBounds\n                            \n                            \n                                geoRecords\n                            \n                            \n                                mapStyles\n                            \n                            \n                                    Optional\n                                openedWindow\n                            \n                            \n                                    Public\n                                searchService\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                closeWindow\n                            \n                            \n                                ngOnChanges\n                            \n                            \n                                onBoundsChange\n                            \n                            \n                                onMapClick\n                            \n                            \n                                onMarkerClick\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                height\n                            \n                            \n                                latitudeField\n                            \n                            \n                                longitudeField\n                            \n                            \n                                name\n                            \n                            \n                                results\n                            \n                            \n                                style\n                            \n                        \n                    \n                \n\n                \n                    \n                        Outputs\n                    \n                \n                \n                    \n                        \n                            \n                                recordClicked\n                            \n                        \n                    \n                \n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    actions\n                                \n                            \n                        \n                    \n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(searchService: SearchService, facetService: FacetService, exprBuilder: ExprBuilder)\n                    \n                \n                        \n                            \n                                Defined in googlemaps/map.component.ts:48\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        searchService\n                                                  \n                                                        \n                                                                    SearchService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        facetService\n                                                  \n                                                        \n                                                                    FacetService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        exprBuilder\n                                                  \n                                                        \n                                                                    ExprBuilder\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        height\n                    \n                \n                \n                    \n                        Default value : 300\n                    \n                \n                        \n                            \n                                    Defined in googlemaps/map.component.ts:23\n                            \n                        \n                \n                    \n                        Desired height of the map \n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        latitudeField\n                    \n                \n                \n                    \n                        Default value : \"latitude\"\n                    \n                \n                        \n                            \n                                    Defined in googlemaps/map.component.ts:25\n                            \n                        \n                \n                    \n                        Name of the field storing the latitude as a decimal number \n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        longitudeField\n                    \n                \n                \n                    \n                        Default value : \"longitude\"\n                    \n                \n                        \n                            \n                                    Defined in googlemaps/map.component.ts:27\n                            \n                        \n                \n                    \n                        Name of the field storing the longitude as a decimal number \n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        name\n                    \n                \n                \n                    \n                        Default value : \"map\"\n                    \n                \n                        \n                            \n                                    Defined in googlemaps/map.component.ts:19\n                            \n                        \n                \n                    \n                        Name of the map used as an identifier for the facet, to associate its selects \n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        results\n                    \n                \n                \n                    \n                        Type :     Results\n\n                    \n                \n                        \n                            \n                                    Defined in googlemaps/map.component.ts:21\n                            \n                        \n                \n                    \n                        Results list displayed on the map when possible \n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        style\n                    \n                \n                \n                    \n                        Default value : \"light\"\n                    \n                \n                        \n                            \n                                    Defined in googlemaps/map.component.ts:29\n                            \n                        \n                \n                    \n                        Map style (light or dark are supported) \n\n                    \n                \n            \n        \n\n    \n    Outputs\n        \n            \n                \n                    \n                        \n                        recordClicked\n                    \n                \n                \n                    \n                        Type :         EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in googlemaps/map.component.ts:31\n                            \n                        \n                \n                    \n                        Event emitter that emits a Record object when the marker of that record is clicked by the user \n\n                    \n                \n            \n        \n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            closeWindow\n                        \n                        \n                    \n                \n            \n            \n                \ncloseWindow()\n                \n            \n\n\n            \n                \n                    Defined in googlemaps/map.component.ts:134\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            ngOnChanges\n                        \n                        \n                    \n                \n            \n            \n                \nngOnChanges(changes: SimpleChanges)\n                \n            \n\n\n            \n                \n                    Defined in googlemaps/map.component.ts:102\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    changes\n                                    \n                                                SimpleChanges\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            onBoundsChange\n                        \n                        \n                    \n                \n            \n            \n                \nonBoundsChange(bounds: google.maps.LatLngBounds)\n                \n            \n\n\n            \n                \n                    Defined in googlemaps/map.component.ts:154\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    bounds\n                                    \n                                            google.maps.LatLngBounds\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            onMapClick\n                        \n                        \n                    \n                \n            \n            \n                \nonMapClick(event: Event)\n                \n            \n\n\n            \n                \n                    Defined in googlemaps/map.component.ts:144\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    event\n                                    \n                                                Event\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            onMarkerClick\n                        \n                        \n                    \n                \n            \n            \n                \nonMarkerClick(event: Event, record: Record, infoWindow?: AgmInfoWindow)\n                \n            \n\n\n            \n                \n                    Defined in googlemaps/map.component.ts:148\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    event\n                                    \n                                                Event\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    record\n                                    \n                                            Record\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    infoWindow\n                                    \n                                            AgmInfoWindow\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n    \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            bounds\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     google.maps.LatLngBounds\n\n                        \n                    \n                        \n                            \n                                    Defined in googlemaps/map.component.ts:43\n                            \n                        \n\n                \n                    \n                        Bounds of the map updated on initialization and user interaction \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            clearFilters\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Action\n\n                        \n                    \n                        \n                            \n                                    Defined in googlemaps/map.component.ts:40\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            exprBuilder\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     ExprBuilder\n\n                        \n                    \n                        \n                            \n                                    Defined in googlemaps/map.component.ts:53\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            facetService\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     FacetService\n\n                        \n                    \n                        \n                            \n                                    Defined in googlemaps/map.component.ts:52\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            filterArea\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Action\n\n                        \n                    \n                        \n                            \n                                    Defined in googlemaps/map.component.ts:39\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            fitBounds\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     google.maps.LatLngBoundsLiteral | boolean\n\n                        \n                    \n                        \n                            \n                                    Defined in googlemaps/map.component.ts:36\n                            \n                        \n\n                \n                    \n                        Mode for fitting the map to its contained markers \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            geoRecords\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Record[]\n\n                        \n                    \n                    \n                        \n                            Default value : []\n                        \n                    \n                        \n                            \n                                    Defined in googlemaps/map.component.ts:34\n                            \n                        \n\n                \n                    \n                        Filtered list of records, keeping only the geolocated records \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            mapStyles\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         any\n\n                        \n                    \n                        \n                            \n                                    Defined in googlemaps/map.component.ts:48\n                            \n                        \n\n                \n                    \n                        Styles of the map if any \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            openedWindow\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     AgmInfoWindow\n\n                        \n                    \n                        \n                            \n                                    Defined in googlemaps/map.component.ts:45\n                            \n                        \n\n                \n                    \n                        Currently opened info window, which can be closed when another window is closed \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            searchService\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     SearchService\n\n                        \n                    \n                        \n                            \n                                    Defined in googlemaps/map.component.ts:51\n                            \n                        \n\n\n            \n        \n\n\n    \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        actions\n                    \n                \n\n                \n                    \n                        getactions()\n                    \n                \n                            \n                                \n                                    Defined in googlemaps/map.component.ts:91\n                                \n                            \n\n            \n        \n\n\n\n\n    \n        import { Component, Input, Output, EventEmitter, OnChanges, SimpleChanges } from '@angular/core';\nimport { AgmInfoWindow } from '@agm/core'\n;\nimport { AbstractFacet, FacetService } from '@sinequa/components/facet';\nimport { Action } from '@sinequa/components/action';\nimport { SearchService } from '@sinequa/components/search';\n\nimport { ExprBuilder } from '@sinequa/core/app-utils';\nimport { Results, Record } from '@sinequa/core/web-services';\n\nimport { darkStyle } from \"./dark-style\";\n\n@Component({\n    selector: \"sq-googlemaps\",\n    templateUrl: \"./map.component.html\"\n})\nexport class MapComponent extends AbstractFacet implements OnChanges {\n    /** Name of the map used as an identifier for the facet, to associate its selects */\n    @Input() name = \"map\";\n    /** Results list displayed on the map when possible */\n    @Input() results: Results;\n    /** Desired height of the map */\n    @Input() height = 300;\n    /** Name of the field storing the latitude as a decimal number */\n    @Input() latitudeField = \"latitude\";\n    /** Name of the field storing the longitude as a decimal number */\n    @Input() longitudeField = \"longitude\";\n    /** Map style (light or dark are supported) */\n    @Input() style = \"light\";\n    /** Event emitter that emits a Record object when the marker of that record is clicked by the user */\n    @Output() recordClicked = new EventEmitter();\n\n    /** Filtered list of records, keeping only the geolocated records */\n    geoRecords: Record[] = [];\n    /** Mode for fitting the map to its contained markers */\n    fitBounds: google.maps.LatLngBoundsLiteral | boolean;\n\n    // Actions for selecting an area on the map, and clearing that selection\n    filterArea: Action;\n    clearFilters: Action;\n\n    /** Bounds of the map updated on initialization and user interaction */\n    bounds: google.maps.LatLngBounds;\n    /** Currently opened info window, which can be closed when another window is closed */\n    openedWindow?: AgmInfoWindow;\n\n    /** Styles of the map if any */\n    mapStyles: any;\n\n    constructor(\n        public searchService: SearchService,\n        public facetService: FacetService,\n        public exprBuilder: ExprBuilder\n    ){\n        super();\n        \n        // Clear the current filters\n        this.clearFilters = new Action({\n            icon: \"far fa-minus-square\",\n            title: \"msg#facet.clearSelects\",\n            action: () => {\n                this.searchService.query.removeSelect(this.name);\n                this.searchService.search();\n            }\n        });\n\n        // Filter the currently selected area\n        this.filterArea = new Action({\n            icon: \"fas fa-search\",\n            title: \"msg#googlemaps.filterArea\",\n            action: () => {\n                if(this.facetService.hasFiltered(this.name)) {\n                    this.searchService.query.removeSelect(this.name);\n                }\n                const minLat = this.bounds.getSouthWest().lat();\n                const maxLat = this.bounds.getNorthEast().lat();\n                const minLng = this.bounds.getSouthWest().lng();\n                const maxLng = this.bounds.getNorthEast().lng();\n                const expr = this.exprBuilder.concatAndExpr([\n                    this.exprBuilder.makeNumericalExpr(this.latitudeField, '>=', minLat),\n                    this.exprBuilder.makeNumericalExpr(this.latitudeField, '=', minLng),\n                    this.exprBuilder.makeNumericalExpr(this.longitudeField, ' !!r[this.latitudeField]);\n            }\n            this.closeWindow();\n        }\n\n        if(changes['style']) {\n            this.mapStyles = this.style === \"dark\"? darkStyle : undefined;\n        }\n\n        // If no document, the view shows a default latitude / longitude\n        if(this.geoRecords.length === 0) {\n            this.fitBounds = false;\n        }\n        // If multiple documents, the view is centered around them, at the right scale\n        else if(this.geoRecords.length > 1) {\n            this.fitBounds = true;\n        }\n        else {\n            // Custom bounds centered around the single geo record in the results\n            this.fitBounds = {\n                east: this.geoRecords[0][this.longitudeField] + 0.02,\n                north: this.geoRecords[0][this.latitudeField] + 0.02,\n                south: this.geoRecords[0][this.latitudeField] - 0.02,\n                west: this.geoRecords[0][this.longitudeField] - 0.02\n            };\n        }\n    }\n\n    closeWindow() {\n        if(this.openedWindow) {\n            this.openedWindow.close();\n            this.openedWindow = undefined;\n        }\n    }\n\n\n    // Manage map interactions (avoid multiple opened info windows)\n\n    onMapClick(event: Event) {\n        this.closeWindow();\n    }\n\n    onMarkerClick(event: Event, record: Record, infoWindow?: AgmInfoWindow) {\n        this.closeWindow();\n        this.openedWindow = infoWindow;\n        this.recordClicked.next(record);\n    }\n\n    onBoundsChange(bounds: google.maps.LatLngBounds) {\n        this.bounds = bounds;\n    }\n}\n    \n\n    \n        \n\n    \n\n        \n            {{record['title']}}\n        \n\n    \n\n\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '                        {{record[\\'title\\']}}            '\n    var COMPONENTS = [{'name': 'BsEdgeInfoCard', 'selector': 'sq-edge-info-card'},{'name': 'BsFacetHeatmapComponent', 'selector': 'sq-facet-heatmap'},{'name': 'BsFacetTimelineComponent', 'selector': 'sq-facet-timeline'},{'name': 'BsHeatmapComponent', 'selector': 'sq-heatmap'},{'name': 'BsNodeInfoCard', 'selector': 'sq-node-info-card'},{'name': 'BsResultsHeatmapView', 'selector': 'sq-results-heatmap-view'},{'name': 'BsTimelineComponent', 'selector': 'sq-timeline'},{'name': 'BsTooltipComponent', 'selector': 'sq-tooltip'},{'name': 'FacetNgxChart', 'selector': 'sq-facet-ngx-chart'},{'name': 'FusionChart', 'selector': 'sq-fusion-chart'},{'name': 'MapComponent', 'selector': 'sq-googlemaps'},{'name': 'MoneyCloudComponent', 'selector': 'sq-money-cloud'},{'name': 'MoneyTimelineComponent', 'selector': 'sq-money-timeline'},{'name': 'NetworkComponent', 'selector': 'sq-network'},{'name': 'NgxChart', 'selector': 'sq-ngx-chart'},{'name': 'ResultTimeline', 'selector': 'sq-result-timeline'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'MapComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/MoneyCloudDatum.html":{"url":"interfaces/MoneyCloudDatum.html","title":"interface - MoneyCloudDatum","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  MoneyCloudDatum\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            finance/money-cloud/money-cloud.component.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        category\n                                \n                                \n                                        count\n                                \n                                \n                                        currency\n                                \n                                \n                                        i\n                                \n                                \n                                        rawvalue\n                                \n                                \n                                        value\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        category\n                                    \n                                \n                                \n                                    \n                                        category:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        count\n                                    \n                                \n                                \n                                    \n                                        count:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        currency\n                                    \n                                \n                                \n                                    \n                                        currency:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        i\n                                    \n                                \n                                \n                                    \n                                        i:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        rawvalue\n                                    \n                                \n                                \n                                    \n                                        rawvalue:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        value\n                                    \n                                \n                                \n                                    \n                                        value:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { AfterViewInit, ChangeDetectorRef, Component, ElementRef, Input, OnChanges, SimpleChanges, ViewChild } from \"@angular/core\";\nimport { Action } from \"@sinequa/components/action\";\nimport { AbstractFacet } from \"@sinequa/components/facet\";\nimport { SearchService } from \"@sinequa/components/search\";\nimport { SelectionService } from \"@sinequa/components/selection\";\nimport { ExprBuilder, FormatService, ValueItem } from \"@sinequa/core/app-utils\";\nimport { AggregationItem, Results } from \"@sinequa/core/web-services\";\n\nimport * as d3 from 'd3';\n\n\nexport interface MoneyCloudDatum {\n    value: number;\n    currency: string;\n    count: number;\n    category: string;\n    i: number;\n    rawvalue: string;\n}\n\n@Component({\n    selector: 'sq-money-cloud',\n    templateUrl: './money-cloud.component.html',\n    styleUrls: ['./money-cloud.component.scss']\n})\nexport class MoneyCloudComponent extends AbstractFacet implements OnChanges,AfterViewInit {\n    @Input() name = \"money-cloud\"\n\n    @Input() results: Results;\n    /** The \"money-value\" column stores an entity in the form \"(KEYWORD)#( )\", for example \"(DEAL)#(USD 69420)\" */\n    @Input() moneyValueColumn = \"value_amount\";\n    /** The \"Money-Value\" aggregation must be computed over the money-value column */\n    @Input() moneyAggregation = \"ValueAmounts\";\n\n    @Input() width = 600;\n    @Input() height = 200;\n    @Input() margin = {top: 15, bottom: 30, left: 40, right: 15};\n\n    @Input() showTooltip = true;\n    @Input() theme: \"light\" | \"dark\" = \"light\";\n\n    data: MoneyCloudDatum[];\n    categories: string[];\n\n    selectedItems: Set;\n\n    // Scales\n    x: d3.ScaleBand; // Read/Write\n    x_inner: d3.ScaleLinear; // Read/Write\n    y: d3.ScaleLogarithmic; // Read-only / domain updated\n    r: d3.ScaleLogarithmic; // Radius (function of counts)\n    c: d3.ScaleOrdinal; // Color\n\n    // Elements\n    @ViewChild(\"overlay\") overlay: ElementRef;\n    @ViewChild(\"xAxis\") gx: ElementRef;\n    @ViewChild(\"yAxis\") gy: ElementRef;\n\n    // Selections\n    xAxis$: d3.Selection;\n    yAxis$: d3.Selection;\n    \n    // Tooltips\n    tooltipItem: MoneyCloudDatum | undefined;\n    tooltipOrientation: \"left\" | \"right\";\n    tooltipTop: number;\n    tooltipRight: number;\n    tooltipLeft: number;\n\n    viewInit: boolean;\n    \n    clearFilters: Action;\n\n    constructor(\n        private el: ElementRef,\n        protected cdRef: ChangeDetectorRef,\n        public searchService: SearchService,\n        public exprBuilder: ExprBuilder,\n        public selectionService: SelectionService,\n        public formatService: FormatService\n    ){\n        super();\n\n        // Clear the current filters\n        this.clearFilters = new Action({\n            icon: \"far fa-minus-square\",\n            title: \"msg#facet.clearSelects\",\n            action: () => {\n                this.searchService.query.removeSelect(this.name, true);\n                this.searchService.search();\n            }\n        });\n\n        this.selectionService.events.subscribe(e => this.updateSelectedItems());\n    }\n\n    get actions(): Action[] {\n        const actions: Action[] = [];\n        if(this.searchService.query.findSelect(this.name)){\n            actions.push(this.clearFilters);\n        }\n        return actions;\n    }\n\n    get innerWidth(): number {\n        return this.width - this.margin.left - this.margin.right;\n    }\n\n    get innerHeight(): number {\n        return this.height - this.margin.top - this.margin.bottom;\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n\n        if(!this.x) {\n            \n            // Scales\n            this.x = d3.scaleBand()\n                .range([0, this.innerWidth]);\n                \n            this.x_inner = d3.scaleLinear();\n\n            this.y = d3.scaleLog()\n                .range([this.innerHeight, 0]);\n\n            this.r = d3.scaleLog()\n                .range([4, 10]);\n\n            this.c = d3.scaleOrdinal()\n                .range(d3.schemeCategory10);\n                \n        }\n        \n        // Resize handling\n\n        if(changes[\"height\"]) {\n            this.y.range([this.innerHeight, 0]);\n            if(this.viewInit) {\n                this.drawYAxis();\n            }\n        }\n\n        if(changes[\"width\"]) {\n            this.x.range([0, this.innerWidth]);\n            if(this.viewInit) {\n                this.drawXAxis();\n            }\n        }\n\n        if(this.viewInit && changes[\"results\"] && this.results){\n            this.updateChart();\n        }\n    }\n\n    ngAfterViewInit() {\n        \n        // Get native elements\n        this.xAxis$ = d3.select(this.gx.nativeElement);\n        this.yAxis$ = d3.select(this.gy.nativeElement);\n\n        d3.select(this.overlay.nativeElement)        \n            .on(\"mousemove\", () => this.onMousemove());\n        \n        this.viewInit = true;\n\n        this.updateChart();\n        \n        // This is necessary to prevent \"Expression has changed after check\" errors\n        // caused by calling updateChart inside ngAfterViewInit().\n        // Unfortunately this is necessary because we need the DOM to be rendered in order fill the DOM\n        // (for example gAxis needs to exist so we can draw the axis)\n        this.cdRef.detectChanges();\n    }\n\n    updateChart() {\n\n        this.turnoffTooltip();\n\n        if(this.results) {\n            \n            this.updateData();\n\n            // Update scales\n            this.updateScales();\n\n            // Update Axes\n            this.updateAxes();\n\n        }\n    }\n\n    updateData() {\n\n        this.updateSelectedItems();\n        \n        const counts = new Map();\n\n        this.data = [];\n        // Extract number of occurrences from the aggregation\n        this.results.aggregations\n            ?.find(a => a.name === this.moneyAggregation)\n            ?.items\n            ?.forEach(item => {\n                const datum = this.parseEntity(item, counts);\n                if(datum) {\n                    this.data.push(datum);\n                }\n            });\n\n        this.data.forEach(d => d.i = (d.i-0.5) / counts.get(d.category)!); // Normalize i between 0 and 1\n\n    }\n\n    /**\n     * Parse the entity stored in the \"money-value\" column and returns a datum (incl. numerical value and currency)\n     */\n    @Input()\n    parseEntity = (item: AggregationItem, counts: Map): MoneyCloudDatum | undefined => {\n        const rawvalue = item.value as string;\n        const [category, amount] = item.display!.substr(1, item.display!.length-2).split(\")#(\");\n        const [currency, valuestr] = amount.split(\" \");\n        const value = parseFloat(valuestr);\n        // Check the data is valid\n        if(isNaN(value) || value (this.data, d => d.value);\n            const rExtent = d3.extent(this.data, d => d.count);\n\n            if(!yExtent[0] || !yExtent[1] || !rExtent[0] || !rExtent[1]) {\n                return;\n            }\n\n            this.x.domain(this.data.map(d => d.category));\n            this.x_inner\n                .domain([0, 1])\n                .range([0, this.x.bandwidth()]);\n            this.y.domain(yExtent);\n            this.r.domain(rExtent);\n            this.c.domain(this.data.map(d => d.currency));\n\n            this.categories = this.x.domain();\n\n        }\n\n    }\n\n    public updateSelectedItems() {\n        this.selectedItems = new Set();\n        this.selectionService.getSelectedItems().forEach(r => {\n            r[this.moneyValueColumn]?.forEach((item: ValueItem) => {\n                this.selectedItems.add(item.value as string);\n            });\n        });\n    }\n    \n    /**\n     * Update the x and y axes\n     */\n    protected updateAxes(){\n        this.drawXAxis();\n        this.drawYAxis();\n    }\n\n    /**\n     * Draws the X axis\n     */\n     protected drawXAxis() {\n        const xAxis = d3.axisBottom(this.x);\n        this.xAxis$.call(xAxis);\n        //this.xAxis$.selectAll(\".domain\").remove(); // Remove the axis line\n    }\n\n    /**\n     * Draws the Y axis\n     */\n    protected drawYAxis() {\n        const yAxisTicks = this.y.ticks(5)\n            .filter(tick => Number.isInteger(tick)); // Keep only integer ticks https://stackoverflow.com/questions/13576906/d3-tick-marks-on-integers-only/56821215\n\n        const yAxis = d3.axisLeft(this.y)\n            .tickSizeInner(-this.innerWidth)\n            .tickValues(yAxisTicks)\n            .tickFormat(this.formatService.moneyFormatter); //https://github.com/d3/d3-format\n        this.yAxis$.call(yAxis);\n        //this.yAxis$.selectAll(\".domain\").remove(); // Remove the axis line\n    }\n\n    \n    /**\n     * Redraw the simple tooltip (vertical line)\n     */\n    onMousemove() {\n        this.tooltipItem = undefined;\n    }\n\n    filterDatum(datum: MoneyCloudDatum) {\n        const expr = this.exprBuilder.makeExpr(this.moneyValueColumn, datum.rawvalue)\n        this.searchService.query.addSelect(expr, this.name);\n        this.searchService.search();\n    }\n\n    onMouseEnterDatum(datum: MoneyCloudDatum) {\n\n        this.tooltipItem = datum;\n\n        const x = this.x(datum.category)! + this.x_inner(datum.i)!;\n        const y = this.y(datum.value);\n        const r = this.r(datum.count);\n\n        // Since we use viewBox to auto-adjust the SVG to the container size, we have to\n        // convert from the SVG coordinate system to the HTML coordinate system\n        const actualWidth = (this.el.nativeElement as HTMLElement).offsetWidth;\n        const scale = actualWidth / this.width;\n        const relativeX = x! / this.width;\n\n        // Tooltip to the right\n        if(relativeX  {\n        if(this.tooltipItem) {\n            this.tooltipItem = undefined;\n        }\n    }\n}\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/MoneyDatum.html":{"url":"interfaces/MoneyDatum.html","title":"interface - MoneyDatum","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  MoneyDatum\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            finance/money-timeline/money-timeline.component.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        count\n                                \n                                \n                                        currency\n                                \n                                \n                                        date\n                                \n                                \n                                        rawvalue\n                                \n                                \n                                        record\n                                \n                                \n                                        value\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        count\n                                    \n                                \n                                \n                                    \n                                        count:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        currency\n                                    \n                                \n                                \n                                    \n                                        currency:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        date\n                                    \n                                \n                                \n                                    \n                                        date:         Date\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Date\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        rawvalue\n                                    \n                                \n                                \n                                    \n                                        rawvalue:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        record\n                                    \n                                \n                                \n                                    \n                                        record:     Record\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Record\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        value\n                                    \n                                \n                                \n                                    \n                                        value:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { AfterViewInit, ChangeDetectorRef, Component, ElementRef, EventEmitter, Input, OnChanges, Output, SimpleChanges, ViewChild } from \"@angular/core\";\nimport { Action } from \"@sinequa/components/action\";\nimport { AbstractFacet } from \"@sinequa/components/facet\";\nimport { SearchService } from \"@sinequa/components/search\";\nimport { ExprBuilder } from \"@sinequa/core/app-utils\";\nimport { Utils } from \"@sinequa/core/base\";\nimport { Results, Record } from \"@sinequa/core/web-services\";\nimport { FormatService } from \"@sinequa/core/app-utils\";\n\nimport * as d3 from 'd3';\n\nexport interface MoneyDatum {\n    value: number;\n    currency: string;\n    count: number;\n    date: Date;\n    rawvalue: string;\n    record: Record;\n}\n\n@Component({\n    selector: 'sq-money-timeline',\n    templateUrl: './money-timeline.component.html',\n    styleUrls: ['./money-timeline.component.scss']\n})\nexport class MoneyTimelineComponent extends AbstractFacet implements OnChanges,AfterViewInit {\n    @Input() name = \"money-timeline\"\n\n    @Input() results: Results;\n    /** The \"money\" column stores an entity in the form \" \", for example \"USD 69420\" */\n    @Input() moneyColumn = \"money\";\n    /** The \"Money\" aggregation must be computed over the money column */\n    @Input() moneyAggregation = \"Money\";\n\n    @Input() width = 600;\n    @Input() height = 200;\n    @Input() margin = {top: 15, bottom: 30, left: 40, right: 15};\n\n    /** Displays a tooltip showing the current date */\n    @Input() showTooltip = true;\n    @Input() theme: \"light\" | \"dark\" = \"light\";\n\n    @Output() recordClicked = new EventEmitter();\n\n    data: MoneyDatum[];\n\n    // Scales\n    x: d3.ScaleTime; // Read/Write\n    y: d3.ScaleLogarithmic; // Read-only / domain updated\n    r: d3.ScaleLogarithmic;\n    c: d3.ScaleOrdinal;\n\n    // Elements\n    @ViewChild(\"overlay\") overlay: ElementRef;\n    @ViewChild(\"xAxis\") gx: ElementRef;\n    @ViewChild(\"yAxis\") gy: ElementRef;\n\n    // Selections\n    xAxis$: d3.Selection;\n    yAxis$: d3.Selection;\n    \n    // Tooltips\n    tooltipX: number | undefined;\n    tooltipItem: MoneyDatum | undefined;\n    tooltipOrientation: \"left\" | \"right\";\n    tooltipTop: number;\n    tooltipRight: number;\n    tooltipLeft: number;\n\n    viewInit: boolean;\n    \n    clearFilters: Action;\n\n    constructor(\n        private el: ElementRef,\n        protected cdRef: ChangeDetectorRef,\n        public searchService: SearchService,\n        public exprBuilder: ExprBuilder,\n        public formatService: FormatService\n    ){\n        super();\n\n        // Clear the current filters\n        this.clearFilters = new Action({\n            icon: \"far fa-minus-square\",\n            title: \"msg#facet.clearSelects\",\n            action: () => {\n                this.searchService.query.removeSelect(this.name, true);\n                this.searchService.search();\n            }\n        });\n    }\n\n    get actions(): Action[] {\n        const actions: Action[] = [];\n        if(this.searchService.query.findSelect(this.name)){\n            actions.push(this.clearFilters);\n        }\n        return actions;\n    }\n\n    get innerWidth(): number {\n        return this.width - this.margin.left - this.margin.right;\n    }\n\n    get innerHeight(): number {\n        return this.height - this.margin.top - this.margin.bottom;\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n\n        if(!this.x) {\n            \n            // Scales\n            this.x = d3.scaleUtc()\n                .range([0, this.innerWidth]);\n\n            this.y = d3.scaleLog()\n                .range([this.innerHeight, 0]);\n\n            this.r = d3.scaleLog()\n                .range([4, 10]);\n\n            this.c = d3.scaleOrdinal()\n                .range(d3.schemeCategory10);\n                \n        }\n        \n        // Resize handling\n\n        if(changes[\"height\"]) {\n            this.y.range([this.innerHeight, 0]);\n            if(this.viewInit) {\n                this.drawYAxis();\n            }\n        }\n\n        if(changes[\"width\"]) {\n            this.x.range([0, this.innerWidth]);\n            if(this.viewInit) {\n                this.drawXAxis();\n            }\n        }\n\n        if(this.viewInit && changes[\"results\"] && this.results){\n            this.updateChart();\n        }\n    }\n\n    ngAfterViewInit() {\n        \n        // Get native elements\n        this.xAxis$ = d3.select(this.gx.nativeElement);\n        this.yAxis$ = d3.select(this.gy.nativeElement);\n\n        d3.select(this.overlay.nativeElement)        \n            .on(\"mousemove\", () => this.onMousemove())\n            .on(\"mouseout\", () => this.onMouseout());\n        \n        this.viewInit = true;\n\n        this.updateChart();\n        \n        // This is necessary to prevent \"Expression has changed after check\" errors\n        // caused by calling updateChart inside ngAfterViewInit().\n        // Unfortunately this is necessary because we need the DOM to be rendered in order fill the DOM\n        // (for example gAxis needs to exist so we can draw the axis)\n        this.cdRef.detectChanges();\n    }\n\n    /**\n     * Recomputes the data to display and update the chart's primitives\n     */\n    updateChart() {\n\n        this.turnoffTooltip();\n\n        if(this.results) {\n            \n            this.updateData();\n\n            // Update scales\n            this.updateScales();\n\n            // Update Axes\n            this.updateAxes();\n\n        }\n    }\n\n    /**\n     * Computes the data displayed in the chart in function of the raw data provided as input\n     */\n    updateData() {\n        \n        // Extract number of occurrences from the aggregation\n        const counts = new Map();\n        this.results.aggregations\n            ?.find(a => Utils.eqNC(a.name, this.moneyAggregation))\n            ?.items\n            ?.forEach(item => counts.set(item.value.toString(), item.count));\n\n        this.data = [];\n        this.results.records?.forEach(record =>\n            record?.[this.moneyColumn]?.forEach(money => {\n                const datum = this.parseEntity(money.value, record, counts.get(money.value) || 1);\n                if(datum) {\n                    this.data.push(datum);\n                }\n            })\n        );\n\n    }\n\n    /**\n     * Parse the entity stored in the \"money\" column and returns a datum (incl. numerical value and currency)\n     */\n    @Input()\n    parseEntity = (rawvalue: string, record: Record, count): MoneyDatum | undefined => {\n        const val = rawvalue.split(\" \"); // Split \"USD 1000\"\n        // Check the data is valid\n        if(!record.modified || isNaN(val[1] as any) || parseFloat(val[1]) (this.data, d => d.date);\n            const yExtent = d3.extent(this.data, d => d.value);\n            const rExtent = d3.extent(this.data, d => d.count);\n\n            if(!xExtent[0] || !xExtent[1] || !yExtent[0] || !yExtent[1] || !rExtent[0] || !rExtent[1]) {\n                return;\n            }\n\n            this.x.domain(xExtent);\n            this.y.domain(yExtent);\n            this.r.domain(rExtent);\n            this.c.domain(this.data.map(d => d.record.id));\n        }\n\n    }\n    \n    /**\n     * Update the x and y axes\n     */\n    protected updateAxes(){\n        this.drawXAxis();\n        this.drawYAxis();\n    }\n\n    /**\n     * Draws the X axis\n     */\n     protected drawXAxis() {\n        const xAxis = d3.axisBottom(this.x)\n            .ticks(5);\n        this.xAxis$.call(xAxis);\n        //this.xAxis$.selectAll(\".domain\").remove(); // Remove the axis line\n    }\n\n    /**\n     * Draws the Y axis\n     */\n    protected drawYAxis() {\n        const yAxisTicks = this.y.ticks(5)\n            .filter(tick => Number.isInteger(tick)); // Keep only integer ticks https://stackoverflow.com/questions/13576906/d3-tick-marks-on-integers-only/56821215\n\n        const yAxis = d3.axisLeft(this.y)\n            .tickValues(yAxisTicks)\n            .tickFormat(this.formatService.moneyFormatter); //https://github.com/d3/d3-format\n        this.yAxis$.call(yAxis);\n        //this.yAxis$.selectAll(\".domain\").remove(); // Remove the axis line\n    }\n\n    \n    /**\n     * Redraw the simple tooltip (vertical line)\n     */\n    onMousemove() {\n        if(!this.tooltipItem && this.showTooltip) {\n            this.tooltipX = d3.mouse(this.overlay.nativeElement)[0];\n        }\n        this.tooltipItem = undefined;\n    }\n\n    /**\n     * Notify parent component that a record was clicked\n     * @param datum\n     */\n    onRecordClicked(datum: MoneyDatum) {\n        this.recordClicked.next(datum.record);\n    }\n\n    /**\n     * Filter the search results with the clicked amount of money\n     * @param datum \n     */\n    filterDatum(datum: MoneyDatum) {\n        const expr = this.exprBuilder.makeExpr(this.moneyColumn, datum.rawvalue, `${datum.currency} ${this.formatService.moneyFormatter(datum.value)}`)\n        this.searchService.query.addSelect(expr, this.name);\n        this.searchService.search();\n    }\n\n    /**\n     * Remove the simple tooltip (vertical line)\n     */\n    onMouseout() {\n        if(!this.tooltipItem) {\n            this.tooltipX = undefined;\n        }\n    }\n\n    /**\n     * Compute the tooltip position when an amount of money is hovered\n     * @param datum \n     */\n    onMouseEnterDatum(datum: MoneyDatum) {\n\n        if(!this.showTooltip) {\n            return;\n        }\n\n        this.tooltipItem = datum;\n\n        const x = this.x(datum.date);\n        const y = this.y(datum.value);\n        const r = this.r(datum.count);\n\n        // Since we use viewBox to auto-adjust the SVG to the container size, we have to\n        // convert from the SVG coordinate system to the HTML coordinate system\n        const actualWidth = (this.el.nativeElement as HTMLElement).offsetWidth;\n        const scale = actualWidth / this.width;\n        const relativeX = x / this.width;\n\n        // Tooltip to the right\n        if(relativeX  {\n        if(this.tooltipItem) {\n            this.tooltipItem = undefined;\n            this.tooltipX = undefined;\n        }\n    }\n}\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/NetworkContext.html":{"url":"interfaces/NetworkContext.html","title":"interface - NetworkContext","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  NetworkContext\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            network/network-models.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        appService\n                                \n                                \n                                        edges\n                                \n                                \n                                        exprBuilder\n                                \n                                \n                                        intlService\n                                \n                                \n                                        name\n                                \n                                \n                                        networkService\n                                \n                                \n                                        nodes\n                                \n                                \n                                        searchService\n                                \n                            \n                        \n                    \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    select\n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            select\n                        \n                        \n                    \n                \n            \n            \n                \nselect(node?: Node, edge?: Edge)\n                \n            \n\n\n            \n                \n                    Defined in network/network-models.ts:128\n                \n            \n\n\n            \n                \n                    Interactions \n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    node\n                                    \n                                                Node\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    edge\n                                    \n                                                Edge\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        appService\n                                    \n                                \n                                \n                                    \n                                        appService:     AppService\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     AppService\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        edges\n                                    \n                                \n                                \n                                    \n                                        edges:         DataSet\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         DataSet\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        exprBuilder\n                                    \n                                \n                                \n                                    \n                                        exprBuilder:     ExprBuilder\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     ExprBuilder\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        intlService\n                                    \n                                \n                                \n                                    \n                                        intlService:     IntlService\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     IntlService\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        name\n                                    \n                                \n                                \n                                    \n                                        name:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Name of this network, for use in selections \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        networkService\n                                    \n                                \n                                \n                                    \n                                        networkService:     VisNetworkService\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     VisNetworkService\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        nodes\n                                    \n                                \n                                \n                                    \n                                        nodes:         DataSet\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         DataSet\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Vis.js data structures \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        searchService\n                                    \n                                \n                                \n                                    \n                                        searchService:     SearchService\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     SearchService\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Useful services \n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { Subject } from 'rxjs';\nimport { Action } from '@sinequa/components/action';\nimport { Utils } from '@sinequa/core/base';\nimport { DataSet } from \"vis-data/peer/esm/vis-data\";\nimport { SearchService } from '@sinequa/components/search';\nimport { VisNetworkService } from 'ngx-vis';\nimport { AppService, ExprBuilder } from '@sinequa/core/app-utils';\nimport { IntlService } from '@sinequa/core/intl';\n\n// TYPES (configuration)\n\nexport interface NodeType {\n    name: string;\n    /** Vis Node options (merged in the Node objects). See https://visjs.github.io/vis-network/docs/network/nodes.html */\n    nodeOptions: {[key: string]: any} | ((node: Node, type: NodeType) => {[key: string]: any} );\n    /** If a field is provided, it can be used to filter the node value (and access the label, formatter, etc.) */\n    field?: string;\n}\n\nexport interface EdgeType {\n    /** Node types attached to this edge type. Should typically be 2 items, but cooccurrence aggregation might return more */\n    nodeTypes: NodeType[];\n    /** Vis Edge options (merged in the Edge objects). See https://visjs.github.io/vis-network/docs/network/edges.html */\n    edgeOptions: {[key: string]: any} | ((nodes: Node[], edge: Edge, type: EdgeType) => {[key: string]: any} );\n    /** If a field is provided, it can be used to filter the node value (and access the label, formatter, etc.) */\n    field?: string;\n}\n\n\n// DATA\n\n// Nodes (based on Vis Node interface)\n\nexport interface Node {\n    id: string;\n    label: string;\n\n    // Custom properties\n    type: NodeType;\n    provider: NetworkProvider;\n    visible: boolean;\n    /** count is a mutable property used to scale the node size in function of the size of adjacent edges*/\n    count: number;\n    /** the precedence of a node determines which node object is kept when merging two dataset (the highest precedence node is kept) */\n    precedence?: number;\n    // Context\n    context: NetworkContext;\n}\n\n// Edge (based on Vis Edge interface)\n\nexport interface Edge {\n    id: string;\n    from: string;\n    to: string;\n\n    // Custom properties\n    type: EdgeType;\n    provider: NetworkProvider;\n    visible: boolean;    \n    /** count is a property representing the strength of an edge, which scales the count of adjacent nodes*/\n    count: number;\n    /** A field value may be provided to filter search based on the edge field type */\n    fieldValue?: string;\n    // Context\n    context: NetworkContext;\n}\n\n\nexport interface NetworkProvider {\n    /** Whether or not the provider is active (if inactive, it will not provide empty datasets of nodes and edges) */\n    active: boolean;\n\n    /** Readable name of this provider */\n    name: string;\n\n    /** Dataset of this provider */\n    dataset: NetworkDataset;\n\n    /** Context (wrapper for general data about the network and services) */\n    context: NetworkContext;\n\n    /** Returns the Subject of this provider */\n    getProvider(): Subject;\n\n    /** Asynchronously provide data via it's provider Subject */\n    getData(context: NetworkContext); // skip/count handled internally\n\n    /** Called after the datasets provided by all providers have been merged into a single dataset */\n    onDatasetsMerged(dataset: NetworkDataset);\n\n    /** Called after the dataset is filtered and passed to Vis for rendering */\n    onNodesInserted(nodes: Node[]);\n\n    /** Called when ANY node is clicked in the rendered view of the network */\n    onNodeClicked(node: Node | undefined);\n\n    /** Called when ANY edge is clicked in the rendered view of the network */\n    onEdgeClicked(edge: Edge | undefined);\n\n    /** Retrieve the list of action for this provider. */\n    getProviderActions(): Action[];\n\n    /** Retrieve the list of action for a given node, and this provider. */\n    getNodeActions(node: Node): Action[];\n    \n    /** Retrieve the list of action for a given edge, and this provider. */\n    getEdgeActions(edge: Edge): Action[];\n\n    /** Called when the providers are discarded. Can be use to cancel subscriptions */\n    onDestroy();\n}\n\nexport interface NetworkContext {\n    /** Name of this network, for use in selections */\n    name: string;\n    /** Vis.js data structures */\n    nodes: DataSet;\n    edges: DataSet;\n    /** Useful services */\n    searchService: SearchService;\n    networkService: VisNetworkService;\n    appService: AppService;\n    intlService: IntlService;\n    exprBuilder: ExprBuilder;\n    /** Interactions */\n    select(node?: Node, edge?: Edge): void;\n}\n\n\nexport class NetworkDataset {\n\n    // Node index\n    private readonly nodeIdx: Map = new Map();\n\n    // Edge index\n    private readonly edgeIdx: Map = new Map();\n\n\n    /** Returns whether this node exists */\n    public hasNode(id: string): boolean {\n        return this.nodeIdx.has(id);\n    }\n    \n    /** Returns whether this edge exists */\n    public hasEdge(id: string): boolean {\n        return this.edgeIdx.has(id);\n    }\n\n    /** Returns the node with given id */\n    public getNode(id: string): Node | undefined {\n        return this.nodeIdx.get(id);\n    }\n\n    /** Returns the edge with given id */\n    public getEdge(id: string): Edge | undefined {\n        return this.edgeIdx.get(id);\n    }\n\n    /** Get the list of nodes */\n    public getNodes(): Node[] {\n        return Array.from(this.nodeIdx.values());\n    }\n\n    /** Get the list of edges */\n    public getEdges(): Edge[] {\n        return Array.from(this.edgeIdx.values());\n    }    \n\n    /** Get the list of visible nodes */\n    public getVisibleNodes(): Node[] {\n        return this.getNodes().filter(n => n.visible);\n    }\n\n    /** Get the list of visible edges */\n    public getVisibleEdges(): Edge[] {\n        return this.getEdges().filter(e => e.visible);\n    }\n\n    /** Get the list of node ids */\n    public getNodeIds(): string[] {\n        return Array.from(this.nodeIdx.keys());\n    }\n\n    /** Get the list of edge ids */\n    public getEdgeIds(): string[] {\n        return Array.from(this.edgeIdx.keys());\n    }\n    \n    /** Clears this dataset */\n    public clear() {\n        this.nodeIdx.clear();\n        this.edgeIdx.clear();\n    }\n\n    /** Add one or multiple nodes */\n    public addNodes(nodes: Node | Node[]) {\n        Array.isArray(nodes)? nodes.forEach(node => this.addNode(node)) : this.addNode(nodes);\n    }\n\n    /** Add one or multiple edges. */\n    public addEdges(edges: Edge | Edge[]) {\n        Array.isArray(edges)? edges.forEach(edge => this.addEdge(edge)) : this.addEdge(edges);\n    }\n\n    /** Remove one or multiple nodes. /!\\ Connected edges MUST be removed as well (use cleanRemoveNode() to do so) */\n    private removeNodes(ids: string | string[]) {\n        Array.isArray(ids)? ids.forEach(id => this.removeNode(id)) : this.removeNode(ids);\n    }\n\n    /** Remove one or multiple edges. */\n    public removeEdges(ids: string | string[]) {\n        Array.isArray(ids)? ids.forEach(id => this.removeEdge(id)) : this.removeEdge(ids);\n    }\n\n    /** Remove a node and its adjacent edges. keepDanglingNodes = false (default) removes the remaining nodes with no neighbor */\n    public cleanRemoveNode(nodeId: string, keepDanglingNodes?: boolean) {\n        this.getAdjacentEdges(nodeId).forEach(edge => {\n            const neighbor = this.getNode(edge.from === nodeId ? edge.to : edge.from) as Node;\n            this.removeEdges(edge.id);\n            neighbor.count -= edge.count;\n            if(!keepDanglingNodes && this.getAdjacentEdges(neighbor.id).length === 0) {\n                this.removeNodes(neighbor.id);\n            }\n        });\n    }\n\n    /** Get the edges adjacent to a node (O(n) method) */\n    public getAdjacentEdges(nodeId: string): Edge[] {\n        return this.getEdges().filter(e => e.from === nodeId || e.to === nodeId);\n    }\n\n    /** Get the nodes connected to a node via a single node (0(n) method) */\n    public getConnectedNodes(nodeId: string): Node[] {\n        return this.getAdjacentEdges(nodeId)\n                    .map(e => this.getNode(e.from === nodeId ? e.to : e.from) as Node);\n    }\n\n    /**\n     * Merge this dataset with another one. \n     * \n     * When duplicates nodes or edges are found:\n     * - The existing item is kept and updated\n     * - Their 'count' properties are added\n     * - Their 'visible' properties are ORed\n     * - Their nodeOptions and edgeOptions are updated\n     * \n     * @param dataset \n     */\n    public merge(dataset: NetworkDataset): NetworkDataset {\n\n        dataset.getNodes().forEach(node => {\n            node = Object.assign({}, node); // Avoid modifying the original datasets\n            if(!this.hasNode(node.id)) {\n                this.addNode(node);\n            }\n            else {\n                // Merge the new node with the existing one (which takes precedence by default)\n                let existingNode = this.getNode(node.id) as Node;\n                if((node.precedence || 0) > (existingNode.precedence || 0)) {\n                    // Set the new node in the node index\n                    this.nodeIdx.set(node.id, node);\n                    // swap existingNode and node for the merging of count, visible and node options\n                    const temp = node;\n                    node = existingNode;\n                    existingNode = temp;\n                }\n                existingNode.count += node.count;\n                existingNode.visible = existingNode.visible || node.visible;\n                let options: {[key: string]: any};\n                if(typeof existingNode.type.nodeOptions === \"function\") {\n                    options = existingNode.type.nodeOptions(existingNode, existingNode.type);\n                }\n                else {\n                    options = existingNode.type.nodeOptions;\n                }\n                Utils.extend(existingNode, options);\n            }\n        });\n\n        dataset.getEdges().forEach(edge => {\n            edge = Object.assign({}, edge); // Avoid modifying the original datasets\n            if(!this.hasEdge(edge.id)) {\n                this.addEdge(edge);\n            }\n            else {\n                // Merge the new edge with the existing one (which takes precedence)\n                // eg. statistical and semantic edges\n                const existingEdge = this.getEdge(edge.id) as Edge;\n                existingEdge.count += edge.count;\n                existingEdge.visible = existingEdge.visible || edge.visible;\n                // Merge edge labels (taking duplicates into account)\n                if(!!existingEdge[\"label\"] && !!edge[\"label\"]){\n                    edge[\"labels\"].forEach(label => {\n                        if(existingEdge[\"labels\"].indexOf(label) === -1) {\n                            existingEdge[\"label\"] += \", \"+label;\n                            existingEdge[\"labels\"].push(label);\n                        }\n                    });\n                }\n                let options: {[key: string]: any};\n                if(typeof existingEdge.type.edgeOptions === \"function\") {\n                    const nodes = [existingEdge.from, existingEdge.to].map(id => this.nodeIdx[id]);\n                    options = existingEdge.type.edgeOptions(nodes, existingEdge, existingEdge.type);\n                }\n                else {\n                    options = existingEdge.type.edgeOptions;\n                }\n                Utils.extend(existingEdge, options);\n            }\n        });\n\n        return this;\n    }\n\n    /** Transfer nodes and edges to the Vis nodes and edges DataSets */\n    updateDatasets(nodes: DataSet, edges: DataSet) {\n        nodes.remove(nodes.get().filter(n => !this.getNode(n.id)?.visible));\n        edges.remove(edges.get().filter(e => !this.getEdge(e.id)?.visible));\n        nodes.update(this.getVisibleNodes());\n        edges.update(this.getVisibleEdges());\n    }\n\n    \n    private addNode(node: Node) {\n        if(this.hasNode(node.id)) {\n            throw new Error(`Node '${node.id}' already in dataset`);\n        }\n        this.nodeIdx.set(node.id, node);\n    }\n    \n    private addEdge(edge: Edge) {\n        if(this.hasEdge(edge.id)) {\n            throw new Error(`Edge '${edge.id}' already in dataset`);\n        }\n        if(!this.hasNode(edge.from) || !this.hasNode(edge.to)) {\n            throw new Error(`Edge '${edge.id}' cannot be added as one of the nodes is missing from the dataset`)\n        }\n        this.edgeIdx.set(edge.id, edge);\n    }\n\n    private removeNode(id: string) {\n        this.nodeIdx.delete(id);\n    }\n\n    private removeEdge(id: string) {\n        this.edgeIdx.delete(id);\n    }\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/NetworkDataset.html":{"url":"classes/NetworkDataset.html","title":"class - NetworkDataset","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  NetworkDataset\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            network/network-models.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                addEdges\n                            \n                            \n                                    Public\n                                addNodes\n                            \n                            \n                                    Public\n                                cleanRemoveNode\n                            \n                            \n                                    Public\n                                clear\n                            \n                            \n                                    Public\n                                getAdjacentEdges\n                            \n                            \n                                    Public\n                                getConnectedNodes\n                            \n                            \n                                    Public\n                                getEdge\n                            \n                            \n                                    Public\n                                getEdgeIds\n                            \n                            \n                                    Public\n                                getEdges\n                            \n                            \n                                    Public\n                                getNode\n                            \n                            \n                                    Public\n                                getNodeIds\n                            \n                            \n                                    Public\n                                getNodes\n                            \n                            \n                                    Public\n                                getVisibleEdges\n                            \n                            \n                                    Public\n                                getVisibleNodes\n                            \n                            \n                                    Public\n                                hasEdge\n                            \n                            \n                                    Public\n                                hasNode\n                            \n                            \n                                    Public\n                                merge\n                            \n                            \n                                    Public\n                                removeEdges\n                            \n                            \n                                updateDatasets\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            addEdges\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    addEdges(edges: Edge | Edge[])\n                \n            \n\n\n            \n                \n                    Defined in network/network-models.ts:203\n                \n            \n\n\n            \n                \n                    Add one or multiple edges. \n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    edges\n                                    \n                                                Edge | Edge[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            addNodes\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    addNodes(nodes: Node | Node[])\n                \n            \n\n\n            \n                \n                    Defined in network/network-models.ts:198\n                \n            \n\n\n            \n                \n                    Add one or multiple nodes \n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    nodes\n                                    \n                                                Node | Node[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            cleanRemoveNode\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    cleanRemoveNode(nodeId: string, keepDanglingNodes?: boolean)\n                \n            \n\n\n            \n                \n                    Defined in network/network-models.ts:218\n                \n            \n\n\n            \n                \n                    Remove a node and its adjacent edges. keepDanglingNodes = false (default) removes the remaining nodes with no neighbor \n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    nodeId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    keepDanglingNodes\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            clear\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    clear()\n                \n            \n\n\n            \n                \n                    Defined in network/network-models.ts:192\n                \n            \n\n\n            \n                \n                    Clears this dataset \n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getAdjacentEdges\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getAdjacentEdges(nodeId: string)\n                \n            \n\n\n            \n                \n                    Defined in network/network-models.ts:230\n                \n            \n\n\n            \n                \n                    Get the edges adjacent to a node (O(n) method) \n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    nodeId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Edge[]\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getConnectedNodes\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getConnectedNodes(nodeId: string)\n                \n            \n\n\n            \n                \n                    Defined in network/network-models.ts:235\n                \n            \n\n\n            \n                \n                    Get the nodes connected to a node via a single node (0(n) method) \n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    nodeId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Node[]\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getEdge\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getEdge(id: string)\n                \n            \n\n\n            \n                \n                    Defined in network/network-models.ts:157\n                \n            \n\n\n            \n                \n                    Returns the edge with given id \n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Edge | undefined\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getEdgeIds\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getEdgeIds()\n                \n            \n\n\n            \n                \n                    Defined in network/network-models.ts:187\n                \n            \n\n\n            \n                \n                    Get the list of edge ids \n\n\n                    \n                        Returns :     string[]\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getEdges\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getEdges()\n                \n            \n\n\n            \n                \n                    Defined in network/network-models.ts:167\n                \n            \n\n\n            \n                \n                    Get the list of edges \n\n\n                    \n                        Returns :         Edge[]\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getNode\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getNode(id: string)\n                \n            \n\n\n            \n                \n                    Defined in network/network-models.ts:152\n                \n            \n\n\n            \n                \n                    Returns the node with given id \n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Node | undefined\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getNodeIds\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getNodeIds()\n                \n            \n\n\n            \n                \n                    Defined in network/network-models.ts:182\n                \n            \n\n\n            \n                \n                    Get the list of node ids \n\n\n                    \n                        Returns :     string[]\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getNodes\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getNodes()\n                \n            \n\n\n            \n                \n                    Defined in network/network-models.ts:162\n                \n            \n\n\n            \n                \n                    Get the list of nodes \n\n\n                    \n                        Returns :         Node[]\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getVisibleEdges\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getVisibleEdges()\n                \n            \n\n\n            \n                \n                    Defined in network/network-models.ts:177\n                \n            \n\n\n            \n                \n                    Get the list of visible edges \n\n\n                    \n                        Returns :         Edge[]\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getVisibleNodes\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getVisibleNodes()\n                \n            \n\n\n            \n                \n                    Defined in network/network-models.ts:172\n                \n            \n\n\n            \n                \n                    Get the list of visible nodes \n\n\n                    \n                        Returns :         Node[]\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            hasEdge\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    hasEdge(id: string)\n                \n            \n\n\n            \n                \n                    Defined in network/network-models.ts:147\n                \n            \n\n\n            \n                \n                    Returns whether this edge exists \n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            hasNode\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    hasNode(id: string)\n                \n            \n\n\n            \n                \n                    Defined in network/network-models.ts:142\n                \n            \n\n\n            \n                \n                    Returns whether this node exists \n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            merge\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    merge(dataset: NetworkDataset)\n                \n            \n\n\n            \n                \n                    Defined in network/network-models.ts:251\n                \n            \n\n\n            \n                \n                    Merge this dataset with another one. \nWhen duplicates nodes or edges are found:\n\nThe existing item is kept and updated\nTheir 'count' properties are added\nTheir 'visible' properties are ORed\nTheir nodeOptions and edgeOptions are updated\n\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dataset\n                                    \n                                                NetworkDataset\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         NetworkDataset\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            removeEdges\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    removeEdges(ids: string | string[])\n                \n            \n\n\n            \n                \n                    Defined in network/network-models.ts:213\n                \n            \n\n\n            \n                \n                    Remove one or multiple edges. \n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    ids\n                                    \n                                            string | string[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            updateDatasets\n                        \n                        \n                    \n                \n            \n            \n                \nupdateDatasets(nodes: DataSet, edges: DataSet)\n                \n            \n\n\n            \n                \n                    Defined in network/network-models.ts:318\n                \n            \n\n\n            \n                \n                    Transfer nodes and edges to the Vis nodes and edges DataSets \n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    nodes\n                                    \n                                                DataSet\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    edges\n                                    \n                                                DataSet\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Subject } from 'rxjs';\nimport { Action } from '@sinequa/components/action';\nimport { Utils } from '@sinequa/core/base';\nimport { DataSet } from \"vis-data/peer/esm/vis-data\";\nimport { SearchService } from '@sinequa/components/search';\nimport { VisNetworkService } from 'ngx-vis';\nimport { AppService, ExprBuilder } from '@sinequa/core/app-utils';\nimport { IntlService } from '@sinequa/core/intl';\n\n// TYPES (configuration)\n\nexport interface NodeType {\n    name: string;\n    /** Vis Node options (merged in the Node objects). See https://visjs.github.io/vis-network/docs/network/nodes.html */\n    nodeOptions: {[key: string]: any} | ((node: Node, type: NodeType) => {[key: string]: any} );\n    /** If a field is provided, it can be used to filter the node value (and access the label, formatter, etc.) */\n    field?: string;\n}\n\nexport interface EdgeType {\n    /** Node types attached to this edge type. Should typically be 2 items, but cooccurrence aggregation might return more */\n    nodeTypes: NodeType[];\n    /** Vis Edge options (merged in the Edge objects). See https://visjs.github.io/vis-network/docs/network/edges.html */\n    edgeOptions: {[key: string]: any} | ((nodes: Node[], edge: Edge, type: EdgeType) => {[key: string]: any} );\n    /** If a field is provided, it can be used to filter the node value (and access the label, formatter, etc.) */\n    field?: string;\n}\n\n\n// DATA\n\n// Nodes (based on Vis Node interface)\n\nexport interface Node {\n    id: string;\n    label: string;\n\n    // Custom properties\n    type: NodeType;\n    provider: NetworkProvider;\n    visible: boolean;\n    /** count is a mutable property used to scale the node size in function of the size of adjacent edges*/\n    count: number;\n    /** the precedence of a node determines which node object is kept when merging two dataset (the highest precedence node is kept) */\n    precedence?: number;\n    // Context\n    context: NetworkContext;\n}\n\n// Edge (based on Vis Edge interface)\n\nexport interface Edge {\n    id: string;\n    from: string;\n    to: string;\n\n    // Custom properties\n    type: EdgeType;\n    provider: NetworkProvider;\n    visible: boolean;    \n    /** count is a property representing the strength of an edge, which scales the count of adjacent nodes*/\n    count: number;\n    /** A field value may be provided to filter search based on the edge field type */\n    fieldValue?: string;\n    // Context\n    context: NetworkContext;\n}\n\n\nexport interface NetworkProvider {\n    /** Whether or not the provider is active (if inactive, it will not provide empty datasets of nodes and edges) */\n    active: boolean;\n\n    /** Readable name of this provider */\n    name: string;\n\n    /** Dataset of this provider */\n    dataset: NetworkDataset;\n\n    /** Context (wrapper for general data about the network and services) */\n    context: NetworkContext;\n\n    /** Returns the Subject of this provider */\n    getProvider(): Subject;\n\n    /** Asynchronously provide data via it's provider Subject */\n    getData(context: NetworkContext); // skip/count handled internally\n\n    /** Called after the datasets provided by all providers have been merged into a single dataset */\n    onDatasetsMerged(dataset: NetworkDataset);\n\n    /** Called after the dataset is filtered and passed to Vis for rendering */\n    onNodesInserted(nodes: Node[]);\n\n    /** Called when ANY node is clicked in the rendered view of the network */\n    onNodeClicked(node: Node | undefined);\n\n    /** Called when ANY edge is clicked in the rendered view of the network */\n    onEdgeClicked(edge: Edge | undefined);\n\n    /** Retrieve the list of action for this provider. */\n    getProviderActions(): Action[];\n\n    /** Retrieve the list of action for a given node, and this provider. */\n    getNodeActions(node: Node): Action[];\n    \n    /** Retrieve the list of action for a given edge, and this provider. */\n    getEdgeActions(edge: Edge): Action[];\n\n    /** Called when the providers are discarded. Can be use to cancel subscriptions */\n    onDestroy();\n}\n\nexport interface NetworkContext {\n    /** Name of this network, for use in selections */\n    name: string;\n    /** Vis.js data structures */\n    nodes: DataSet;\n    edges: DataSet;\n    /** Useful services */\n    searchService: SearchService;\n    networkService: VisNetworkService;\n    appService: AppService;\n    intlService: IntlService;\n    exprBuilder: ExprBuilder;\n    /** Interactions */\n    select(node?: Node, edge?: Edge): void;\n}\n\n\nexport class NetworkDataset {\n\n    // Node index\n    private readonly nodeIdx: Map = new Map();\n\n    // Edge index\n    private readonly edgeIdx: Map = new Map();\n\n\n    /** Returns whether this node exists */\n    public hasNode(id: string): boolean {\n        return this.nodeIdx.has(id);\n    }\n    \n    /** Returns whether this edge exists */\n    public hasEdge(id: string): boolean {\n        return this.edgeIdx.has(id);\n    }\n\n    /** Returns the node with given id */\n    public getNode(id: string): Node | undefined {\n        return this.nodeIdx.get(id);\n    }\n\n    /** Returns the edge with given id */\n    public getEdge(id: string): Edge | undefined {\n        return this.edgeIdx.get(id);\n    }\n\n    /** Get the list of nodes */\n    public getNodes(): Node[] {\n        return Array.from(this.nodeIdx.values());\n    }\n\n    /** Get the list of edges */\n    public getEdges(): Edge[] {\n        return Array.from(this.edgeIdx.values());\n    }    \n\n    /** Get the list of visible nodes */\n    public getVisibleNodes(): Node[] {\n        return this.getNodes().filter(n => n.visible);\n    }\n\n    /** Get the list of visible edges */\n    public getVisibleEdges(): Edge[] {\n        return this.getEdges().filter(e => e.visible);\n    }\n\n    /** Get the list of node ids */\n    public getNodeIds(): string[] {\n        return Array.from(this.nodeIdx.keys());\n    }\n\n    /** Get the list of edge ids */\n    public getEdgeIds(): string[] {\n        return Array.from(this.edgeIdx.keys());\n    }\n    \n    /** Clears this dataset */\n    public clear() {\n        this.nodeIdx.clear();\n        this.edgeIdx.clear();\n    }\n\n    /** Add one or multiple nodes */\n    public addNodes(nodes: Node | Node[]) {\n        Array.isArray(nodes)? nodes.forEach(node => this.addNode(node)) : this.addNode(nodes);\n    }\n\n    /** Add one or multiple edges. */\n    public addEdges(edges: Edge | Edge[]) {\n        Array.isArray(edges)? edges.forEach(edge => this.addEdge(edge)) : this.addEdge(edges);\n    }\n\n    /** Remove one or multiple nodes. /!\\ Connected edges MUST be removed as well (use cleanRemoveNode() to do so) */\n    private removeNodes(ids: string | string[]) {\n        Array.isArray(ids)? ids.forEach(id => this.removeNode(id)) : this.removeNode(ids);\n    }\n\n    /** Remove one or multiple edges. */\n    public removeEdges(ids: string | string[]) {\n        Array.isArray(ids)? ids.forEach(id => this.removeEdge(id)) : this.removeEdge(ids);\n    }\n\n    /** Remove a node and its adjacent edges. keepDanglingNodes = false (default) removes the remaining nodes with no neighbor */\n    public cleanRemoveNode(nodeId: string, keepDanglingNodes?: boolean) {\n        this.getAdjacentEdges(nodeId).forEach(edge => {\n            const neighbor = this.getNode(edge.from === nodeId ? edge.to : edge.from) as Node;\n            this.removeEdges(edge.id);\n            neighbor.count -= edge.count;\n            if(!keepDanglingNodes && this.getAdjacentEdges(neighbor.id).length === 0) {\n                this.removeNodes(neighbor.id);\n            }\n        });\n    }\n\n    /** Get the edges adjacent to a node (O(n) method) */\n    public getAdjacentEdges(nodeId: string): Edge[] {\n        return this.getEdges().filter(e => e.from === nodeId || e.to === nodeId);\n    }\n\n    /** Get the nodes connected to a node via a single node (0(n) method) */\n    public getConnectedNodes(nodeId: string): Node[] {\n        return this.getAdjacentEdges(nodeId)\n                    .map(e => this.getNode(e.from === nodeId ? e.to : e.from) as Node);\n    }\n\n    /**\n     * Merge this dataset with another one. \n     * \n     * When duplicates nodes or edges are found:\n     * - The existing item is kept and updated\n     * - Their 'count' properties are added\n     * - Their 'visible' properties are ORed\n     * - Their nodeOptions and edgeOptions are updated\n     * \n     * @param dataset \n     */\n    public merge(dataset: NetworkDataset): NetworkDataset {\n\n        dataset.getNodes().forEach(node => {\n            node = Object.assign({}, node); // Avoid modifying the original datasets\n            if(!this.hasNode(node.id)) {\n                this.addNode(node);\n            }\n            else {\n                // Merge the new node with the existing one (which takes precedence by default)\n                let existingNode = this.getNode(node.id) as Node;\n                if((node.precedence || 0) > (existingNode.precedence || 0)) {\n                    // Set the new node in the node index\n                    this.nodeIdx.set(node.id, node);\n                    // swap existingNode and node for the merging of count, visible and node options\n                    const temp = node;\n                    node = existingNode;\n                    existingNode = temp;\n                }\n                existingNode.count += node.count;\n                existingNode.visible = existingNode.visible || node.visible;\n                let options: {[key: string]: any};\n                if(typeof existingNode.type.nodeOptions === \"function\") {\n                    options = existingNode.type.nodeOptions(existingNode, existingNode.type);\n                }\n                else {\n                    options = existingNode.type.nodeOptions;\n                }\n                Utils.extend(existingNode, options);\n            }\n        });\n\n        dataset.getEdges().forEach(edge => {\n            edge = Object.assign({}, edge); // Avoid modifying the original datasets\n            if(!this.hasEdge(edge.id)) {\n                this.addEdge(edge);\n            }\n            else {\n                // Merge the new edge with the existing one (which takes precedence)\n                // eg. statistical and semantic edges\n                const existingEdge = this.getEdge(edge.id) as Edge;\n                existingEdge.count += edge.count;\n                existingEdge.visible = existingEdge.visible || edge.visible;\n                // Merge edge labels (taking duplicates into account)\n                if(!!existingEdge[\"label\"] && !!edge[\"label\"]){\n                    edge[\"labels\"].forEach(label => {\n                        if(existingEdge[\"labels\"].indexOf(label) === -1) {\n                            existingEdge[\"label\"] += \", \"+label;\n                            existingEdge[\"labels\"].push(label);\n                        }\n                    });\n                }\n                let options: {[key: string]: any};\n                if(typeof existingEdge.type.edgeOptions === \"function\") {\n                    const nodes = [existingEdge.from, existingEdge.to].map(id => this.nodeIdx[id]);\n                    options = existingEdge.type.edgeOptions(nodes, existingEdge, existingEdge.type);\n                }\n                else {\n                    options = existingEdge.type.edgeOptions;\n                }\n                Utils.extend(existingEdge, options);\n            }\n        });\n\n        return this;\n    }\n\n    /** Transfer nodes and edges to the Vis nodes and edges DataSets */\n    updateDatasets(nodes: DataSet, edges: DataSet) {\n        nodes.remove(nodes.get().filter(n => !this.getNode(n.id)?.visible));\n        edges.remove(edges.get().filter(e => !this.getEdge(e.id)?.visible));\n        nodes.update(this.getVisibleNodes());\n        edges.update(this.getVisibleEdges());\n    }\n\n    \n    private addNode(node: Node) {\n        if(this.hasNode(node.id)) {\n            throw new Error(`Node '${node.id}' already in dataset`);\n        }\n        this.nodeIdx.set(node.id, node);\n    }\n    \n    private addEdge(edge: Edge) {\n        if(this.hasEdge(edge.id)) {\n            throw new Error(`Edge '${edge.id}' already in dataset`);\n        }\n        if(!this.hasNode(edge.from) || !this.hasNode(edge.to)) {\n            throw new Error(`Edge '${edge.id}' cannot be added as one of the nodes is missing from the dataset`)\n        }\n        this.edgeIdx.set(edge.id, edge);\n    }\n\n    private removeNode(id: string) {\n        this.nodeIdx.delete(id);\n    }\n\n    private removeEdge(id: string) {\n        this.edgeIdx.delete(id);\n    }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/NetworkModule.html":{"url":"modules/NetworkModule.html","title":"module - NetworkModule","body":"\n                   \n\n\n\n\n    Modules\n    NetworkModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_NetworkModule\n\n\n\ncluster_NetworkModule_declarations\n\n\n\ncluster_NetworkModule_exports\n\n\n\n\nBsEdgeInfoCard\n\nBsEdgeInfoCard\n\n\n\nNetworkModule\n\nNetworkModule\n\nNetworkModule -->\n\nBsEdgeInfoCard->NetworkModule\n\n\n\n\n\nBsNodeInfoCard\n\nBsNodeInfoCard\n\nNetworkModule -->\n\nBsNodeInfoCard->NetworkModule\n\n\n\n\n\nNetworkComponent\n\nNetworkComponent\n\nNetworkModule -->\n\nNetworkComponent->NetworkModule\n\n\n\n\n\nBsEdgeInfoCard \n\nBsEdgeInfoCard \n\nBsEdgeInfoCard  -->\n\nNetworkModule->BsEdgeInfoCard \n\n\n\n\n\nBsNodeInfoCard \n\nBsNodeInfoCard \n\nBsNodeInfoCard  -->\n\nNetworkModule->BsNodeInfoCard \n\n\n\n\n\nNetworkComponent \n\nNetworkComponent \n\nNetworkComponent  -->\n\nNetworkModule->NetworkComponent \n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            network/network.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Declarations\n                    \n                        \n                            BsEdgeInfoCard\n                        \n                        \n                            BsNodeInfoCard\n                        \n                        \n                            NetworkComponent\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            BsEdgeInfoCard\n                        \n                        \n                            BsNodeInfoCard\n                        \n                        \n                            NetworkComponent\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { NgModule } from \"@angular/core\";\nimport { CommonModule } from \"@angular/common\";\nimport { FormsModule, ReactiveFormsModule } from \"@angular/forms\";\n\n\nimport { IntlModule } from \"@sinequa/core/intl\";\nimport { UtilsModule } from \"@sinequa/components/utils\";\nimport { CollapseModule } from \"@sinequa/components/collapse\";\nimport { BsActionModule } from \"@sinequa/components/action\";\nimport { BsFacetModule } from \"@sinequa/components/facet\";\n\nimport { VisModule } from 'ngx-vis';\nimport { NetworkComponent } from \"./network.component\";\nimport { BsNodeInfoCard } from \"./node-info-card.component\";\nimport { BsEdgeInfoCard } from \"./edge-info-card.component\";\n\n@NgModule({\n    imports: [\n        CommonModule,\n        FormsModule, ReactiveFormsModule, \n\n        IntlModule,\n        UtilsModule,\n        CollapseModule,\n        BsActionModule,\n        BsFacetModule,\n        \n        VisModule\n    ],\n    declarations: [\n        NetworkComponent,\n        BsNodeInfoCard,\n        BsEdgeInfoCard\n    ],\n    exports: [\n        NetworkComponent,\n        BsNodeInfoCard,\n        BsEdgeInfoCard\n    ],\n})\nexport class NetworkModule {\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/NetworkProvider.html":{"url":"interfaces/NetworkProvider.html","title":"interface - NetworkProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  NetworkProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            network/network-models.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        active\n                                \n                                \n                                        context\n                                \n                                \n                                        dataset\n                                \n                                \n                                        name\n                                \n                            \n                        \n                    \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    getData\n                                \n                                \n                                    getEdgeActions\n                                \n                                \n                                    getNodeActions\n                                \n                                \n                                    getProvider\n                                \n                                \n                                    getProviderActions\n                                \n                                \n                                    onDatasetsMerged\n                                \n                                \n                                    onDestroy\n                                \n                                \n                                    onEdgeClicked\n                                \n                                \n                                    onNodeClicked\n                                \n                                \n                                    onNodesInserted\n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getData\n                        \n                        \n                    \n                \n            \n            \n                \ngetData(context: NetworkContext)\n                \n            \n\n\n            \n                \n                    Defined in network/network-models.ts:88\n                \n            \n\n\n            \n                \n                    Asynchronously provide data via it's provider Subject \n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                                NetworkContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getEdgeActions\n                        \n                        \n                    \n                \n            \n            \n                \ngetEdgeActions(edge: Edge)\n                \n            \n\n\n            \n                \n                    Defined in network/network-models.ts:109\n                \n            \n\n\n            \n                \n                    Retrieve the list of action for a given edge, and this provider. \n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    edge\n                                    \n                                                Edge\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Action[]\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getNodeActions\n                        \n                        \n                    \n                \n            \n            \n                \ngetNodeActions(node: Node)\n                \n            \n\n\n            \n                \n                    Defined in network/network-models.ts:106\n                \n            \n\n\n            \n                \n                    Retrieve the list of action for a given node, and this provider. \n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    node\n                                    \n                                                Node\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Action[]\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getProvider\n                        \n                        \n                    \n                \n            \n            \n                \ngetProvider()\n                \n            \n\n\n            \n                \n                    Defined in network/network-models.ts:85\n                \n            \n\n\n            \n                \n                    Returns the Subject of this provider \n\n\n                    \n                        Returns :         Subject\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getProviderActions\n                        \n                        \n                    \n                \n            \n            \n                \ngetProviderActions()\n                \n            \n\n\n            \n                \n                    Defined in network/network-models.ts:103\n                \n            \n\n\n            \n                \n                    Retrieve the list of action for this provider. \n\n\n                    \n                        Returns :     Action[]\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            onDatasetsMerged\n                        \n                        \n                    \n                \n            \n            \n                \nonDatasetsMerged(dataset: NetworkDataset)\n                \n            \n\n\n            \n                \n                    Defined in network/network-models.ts:91\n                \n            \n\n\n            \n                \n                    Called after the datasets provided by all providers have been merged into a single dataset \n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dataset\n                                    \n                                                NetworkDataset\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            onDestroy\n                        \n                        \n                    \n                \n            \n            \n                \nonDestroy()\n                \n            \n\n\n            \n                \n                    Defined in network/network-models.ts:112\n                \n            \n\n\n            \n                \n                    Called when the providers are discarded. Can be use to cancel subscriptions \n\n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            onEdgeClicked\n                        \n                        \n                    \n                \n            \n            \n                \nonEdgeClicked(edge: Edge | undefined)\n                \n            \n\n\n            \n                \n                    Defined in network/network-models.ts:100\n                \n            \n\n\n            \n                \n                    Called when ANY edge is clicked in the rendered view of the network \n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    edge\n                                    \n                                                Edge | undefined\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            onNodeClicked\n                        \n                        \n                    \n                \n            \n            \n                \nonNodeClicked(node: Node | undefined)\n                \n            \n\n\n            \n                \n                    Defined in network/network-models.ts:97\n                \n            \n\n\n            \n                \n                    Called when ANY node is clicked in the rendered view of the network \n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    node\n                                    \n                                                Node | undefined\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            onNodesInserted\n                        \n                        \n                    \n                \n            \n            \n                \nonNodesInserted(nodes: Node[])\n                \n            \n\n\n            \n                \n                    Defined in network/network-models.ts:94\n                \n            \n\n\n            \n                \n                    Called after the dataset is filtered and passed to Vis for rendering \n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    nodes\n                                    \n                                                Node[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        active\n                                    \n                                \n                                \n                                    \n                                        active:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Whether or not the provider is active (if inactive, it will not provide empty datasets of nodes and edges) \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        context\n                                    \n                                \n                                \n                                    \n                                        context:         NetworkContext\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         NetworkContext\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Context (wrapper for general data about the network and services) \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        dataset\n                                    \n                                \n                                \n                                    \n                                        dataset:         NetworkDataset\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         NetworkDataset\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Dataset of this provider \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        name\n                                    \n                                \n                                \n                                    \n                                        name:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Readable name of this provider \n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { Subject } from 'rxjs';\nimport { Action } from '@sinequa/components/action';\nimport { Utils } from '@sinequa/core/base';\nimport { DataSet } from \"vis-data/peer/esm/vis-data\";\nimport { SearchService } from '@sinequa/components/search';\nimport { VisNetworkService } from 'ngx-vis';\nimport { AppService, ExprBuilder } from '@sinequa/core/app-utils';\nimport { IntlService } from '@sinequa/core/intl';\n\n// TYPES (configuration)\n\nexport interface NodeType {\n    name: string;\n    /** Vis Node options (merged in the Node objects). See https://visjs.github.io/vis-network/docs/network/nodes.html */\n    nodeOptions: {[key: string]: any} | ((node: Node, type: NodeType) => {[key: string]: any} );\n    /** If a field is provided, it can be used to filter the node value (and access the label, formatter, etc.) */\n    field?: string;\n}\n\nexport interface EdgeType {\n    /** Node types attached to this edge type. Should typically be 2 items, but cooccurrence aggregation might return more */\n    nodeTypes: NodeType[];\n    /** Vis Edge options (merged in the Edge objects). See https://visjs.github.io/vis-network/docs/network/edges.html */\n    edgeOptions: {[key: string]: any} | ((nodes: Node[], edge: Edge, type: EdgeType) => {[key: string]: any} );\n    /** If a field is provided, it can be used to filter the node value (and access the label, formatter, etc.) */\n    field?: string;\n}\n\n\n// DATA\n\n// Nodes (based on Vis Node interface)\n\nexport interface Node {\n    id: string;\n    label: string;\n\n    // Custom properties\n    type: NodeType;\n    provider: NetworkProvider;\n    visible: boolean;\n    /** count is a mutable property used to scale the node size in function of the size of adjacent edges*/\n    count: number;\n    /** the precedence of a node determines which node object is kept when merging two dataset (the highest precedence node is kept) */\n    precedence?: number;\n    // Context\n    context: NetworkContext;\n}\n\n// Edge (based on Vis Edge interface)\n\nexport interface Edge {\n    id: string;\n    from: string;\n    to: string;\n\n    // Custom properties\n    type: EdgeType;\n    provider: NetworkProvider;\n    visible: boolean;    \n    /** count is a property representing the strength of an edge, which scales the count of adjacent nodes*/\n    count: number;\n    /** A field value may be provided to filter search based on the edge field type */\n    fieldValue?: string;\n    // Context\n    context: NetworkContext;\n}\n\n\nexport interface NetworkProvider {\n    /** Whether or not the provider is active (if inactive, it will not provide empty datasets of nodes and edges) */\n    active: boolean;\n\n    /** Readable name of this provider */\n    name: string;\n\n    /** Dataset of this provider */\n    dataset: NetworkDataset;\n\n    /** Context (wrapper for general data about the network and services) */\n    context: NetworkContext;\n\n    /** Returns the Subject of this provider */\n    getProvider(): Subject;\n\n    /** Asynchronously provide data via it's provider Subject */\n    getData(context: NetworkContext); // skip/count handled internally\n\n    /** Called after the datasets provided by all providers have been merged into a single dataset */\n    onDatasetsMerged(dataset: NetworkDataset);\n\n    /** Called after the dataset is filtered and passed to Vis for rendering */\n    onNodesInserted(nodes: Node[]);\n\n    /** Called when ANY node is clicked in the rendered view of the network */\n    onNodeClicked(node: Node | undefined);\n\n    /** Called when ANY edge is clicked in the rendered view of the network */\n    onEdgeClicked(edge: Edge | undefined);\n\n    /** Retrieve the list of action for this provider. */\n    getProviderActions(): Action[];\n\n    /** Retrieve the list of action for a given node, and this provider. */\n    getNodeActions(node: Node): Action[];\n    \n    /** Retrieve the list of action for a given edge, and this provider. */\n    getEdgeActions(edge: Edge): Action[];\n\n    /** Called when the providers are discarded. Can be use to cancel subscriptions */\n    onDestroy();\n}\n\nexport interface NetworkContext {\n    /** Name of this network, for use in selections */\n    name: string;\n    /** Vis.js data structures */\n    nodes: DataSet;\n    edges: DataSet;\n    /** Useful services */\n    searchService: SearchService;\n    networkService: VisNetworkService;\n    appService: AppService;\n    intlService: IntlService;\n    exprBuilder: ExprBuilder;\n    /** Interactions */\n    select(node?: Node, edge?: Edge): void;\n}\n\n\nexport class NetworkDataset {\n\n    // Node index\n    private readonly nodeIdx: Map = new Map();\n\n    // Edge index\n    private readonly edgeIdx: Map = new Map();\n\n\n    /** Returns whether this node exists */\n    public hasNode(id: string): boolean {\n        return this.nodeIdx.has(id);\n    }\n    \n    /** Returns whether this edge exists */\n    public hasEdge(id: string): boolean {\n        return this.edgeIdx.has(id);\n    }\n\n    /** Returns the node with given id */\n    public getNode(id: string): Node | undefined {\n        return this.nodeIdx.get(id);\n    }\n\n    /** Returns the edge with given id */\n    public getEdge(id: string): Edge | undefined {\n        return this.edgeIdx.get(id);\n    }\n\n    /** Get the list of nodes */\n    public getNodes(): Node[] {\n        return Array.from(this.nodeIdx.values());\n    }\n\n    /** Get the list of edges */\n    public getEdges(): Edge[] {\n        return Array.from(this.edgeIdx.values());\n    }    \n\n    /** Get the list of visible nodes */\n    public getVisibleNodes(): Node[] {\n        return this.getNodes().filter(n => n.visible);\n    }\n\n    /** Get the list of visible edges */\n    public getVisibleEdges(): Edge[] {\n        return this.getEdges().filter(e => e.visible);\n    }\n\n    /** Get the list of node ids */\n    public getNodeIds(): string[] {\n        return Array.from(this.nodeIdx.keys());\n    }\n\n    /** Get the list of edge ids */\n    public getEdgeIds(): string[] {\n        return Array.from(this.edgeIdx.keys());\n    }\n    \n    /** Clears this dataset */\n    public clear() {\n        this.nodeIdx.clear();\n        this.edgeIdx.clear();\n    }\n\n    /** Add one or multiple nodes */\n    public addNodes(nodes: Node | Node[]) {\n        Array.isArray(nodes)? nodes.forEach(node => this.addNode(node)) : this.addNode(nodes);\n    }\n\n    /** Add one or multiple edges. */\n    public addEdges(edges: Edge | Edge[]) {\n        Array.isArray(edges)? edges.forEach(edge => this.addEdge(edge)) : this.addEdge(edges);\n    }\n\n    /** Remove one or multiple nodes. /!\\ Connected edges MUST be removed as well (use cleanRemoveNode() to do so) */\n    private removeNodes(ids: string | string[]) {\n        Array.isArray(ids)? ids.forEach(id => this.removeNode(id)) : this.removeNode(ids);\n    }\n\n    /** Remove one or multiple edges. */\n    public removeEdges(ids: string | string[]) {\n        Array.isArray(ids)? ids.forEach(id => this.removeEdge(id)) : this.removeEdge(ids);\n    }\n\n    /** Remove a node and its adjacent edges. keepDanglingNodes = false (default) removes the remaining nodes with no neighbor */\n    public cleanRemoveNode(nodeId: string, keepDanglingNodes?: boolean) {\n        this.getAdjacentEdges(nodeId).forEach(edge => {\n            const neighbor = this.getNode(edge.from === nodeId ? edge.to : edge.from) as Node;\n            this.removeEdges(edge.id);\n            neighbor.count -= edge.count;\n            if(!keepDanglingNodes && this.getAdjacentEdges(neighbor.id).length === 0) {\n                this.removeNodes(neighbor.id);\n            }\n        });\n    }\n\n    /** Get the edges adjacent to a node (O(n) method) */\n    public getAdjacentEdges(nodeId: string): Edge[] {\n        return this.getEdges().filter(e => e.from === nodeId || e.to === nodeId);\n    }\n\n    /** Get the nodes connected to a node via a single node (0(n) method) */\n    public getConnectedNodes(nodeId: string): Node[] {\n        return this.getAdjacentEdges(nodeId)\n                    .map(e => this.getNode(e.from === nodeId ? e.to : e.from) as Node);\n    }\n\n    /**\n     * Merge this dataset with another one. \n     * \n     * When duplicates nodes or edges are found:\n     * - The existing item is kept and updated\n     * - Their 'count' properties are added\n     * - Their 'visible' properties are ORed\n     * - Their nodeOptions and edgeOptions are updated\n     * \n     * @param dataset \n     */\n    public merge(dataset: NetworkDataset): NetworkDataset {\n\n        dataset.getNodes().forEach(node => {\n            node = Object.assign({}, node); // Avoid modifying the original datasets\n            if(!this.hasNode(node.id)) {\n                this.addNode(node);\n            }\n            else {\n                // Merge the new node with the existing one (which takes precedence by default)\n                let existingNode = this.getNode(node.id) as Node;\n                if((node.precedence || 0) > (existingNode.precedence || 0)) {\n                    // Set the new node in the node index\n                    this.nodeIdx.set(node.id, node);\n                    // swap existingNode and node for the merging of count, visible and node options\n                    const temp = node;\n                    node = existingNode;\n                    existingNode = temp;\n                }\n                existingNode.count += node.count;\n                existingNode.visible = existingNode.visible || node.visible;\n                let options: {[key: string]: any};\n                if(typeof existingNode.type.nodeOptions === \"function\") {\n                    options = existingNode.type.nodeOptions(existingNode, existingNode.type);\n                }\n                else {\n                    options = existingNode.type.nodeOptions;\n                }\n                Utils.extend(existingNode, options);\n            }\n        });\n\n        dataset.getEdges().forEach(edge => {\n            edge = Object.assign({}, edge); // Avoid modifying the original datasets\n            if(!this.hasEdge(edge.id)) {\n                this.addEdge(edge);\n            }\n            else {\n                // Merge the new edge with the existing one (which takes precedence)\n                // eg. statistical and semantic edges\n                const existingEdge = this.getEdge(edge.id) as Edge;\n                existingEdge.count += edge.count;\n                existingEdge.visible = existingEdge.visible || edge.visible;\n                // Merge edge labels (taking duplicates into account)\n                if(!!existingEdge[\"label\"] && !!edge[\"label\"]){\n                    edge[\"labels\"].forEach(label => {\n                        if(existingEdge[\"labels\"].indexOf(label) === -1) {\n                            existingEdge[\"label\"] += \", \"+label;\n                            existingEdge[\"labels\"].push(label);\n                        }\n                    });\n                }\n                let options: {[key: string]: any};\n                if(typeof existingEdge.type.edgeOptions === \"function\") {\n                    const nodes = [existingEdge.from, existingEdge.to].map(id => this.nodeIdx[id]);\n                    options = existingEdge.type.edgeOptions(nodes, existingEdge, existingEdge.type);\n                }\n                else {\n                    options = existingEdge.type.edgeOptions;\n                }\n                Utils.extend(existingEdge, options);\n            }\n        });\n\n        return this;\n    }\n\n    /** Transfer nodes and edges to the Vis nodes and edges DataSets */\n    updateDatasets(nodes: DataSet, edges: DataSet) {\n        nodes.remove(nodes.get().filter(n => !this.getNode(n.id)?.visible));\n        edges.remove(edges.get().filter(e => !this.getEdge(e.id)?.visible));\n        nodes.update(this.getVisibleNodes());\n        edges.update(this.getVisibleEdges());\n    }\n\n    \n    private addNode(node: Node) {\n        if(this.hasNode(node.id)) {\n            throw new Error(`Node '${node.id}' already in dataset`);\n        }\n        this.nodeIdx.set(node.id, node);\n    }\n    \n    private addEdge(edge: Edge) {\n        if(this.hasEdge(edge.id)) {\n            throw new Error(`Edge '${edge.id}' already in dataset`);\n        }\n        if(!this.hasNode(edge.from) || !this.hasNode(edge.to)) {\n            throw new Error(`Edge '${edge.id}' cannot be added as one of the nodes is missing from the dataset`)\n        }\n        this.edgeIdx.set(edge.id, edge);\n    }\n\n    private removeNode(id: string) {\n        this.nodeIdx.delete(id);\n    }\n\n    private removeEdge(id: string) {\n        this.edgeIdx.delete(id);\n    }\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/NgxChart.html":{"url":"components/NgxChart.html","title":"component - NgxChart","body":"\n                   \n\n\n\n\n\n  Components\n  NgxChart\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    ngx-charts/chart/chart.ts\n\n\n\n\n    \n        Implements\n    \n    \n                    OnInit\n                    OnDestroy\n                    OnChanges\n                    DoCheck\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                sq-ngx-chart\n            \n\n            \n                styleUrls\n                ./chart.scss\n            \n\n\n\n            \n                templateUrl\n                ./chart.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                attached\n                            \n                            \n                                chart\n                            \n                            \n                                localeChange\n                            \n                            \n                                select\n                            \n                            \n                                tooltipTemplate\n                            \n                            \n                                wrapper\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                chartComponent\n                            \n                            \n                                ngDoCheck\n                            \n                            \n                                ngOnChanges\n                            \n                            \n                                ngOnDestroy\n                            \n                            \n                                ngOnInit\n                            \n                            \n                                updateChart\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                data\n                            \n                            \n                                options\n                            \n                        \n                    \n                \n\n                \n                    \n                        Outputs\n                    \n                \n                \n                    \n                        \n                            \n                                item-click\n                            \n                        \n                    \n                \n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    chartType\n                                \n                                \n                                    colorScheme\n                                \n                            \n                        \n                    \n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(intlService: IntlService, uiService: UIService)\n                    \n                \n                        \n                            \n                                Defined in ngx-charts/chart/chart.ts:35\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        intlService\n                                                  \n                                                        \n                                                                    IntlService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        uiService\n                                                  \n                                                        \n                                                                    UIService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        data\n                    \n                \n                \n                    \n                        Type :         ChartDataPoint[]\n\n                    \n                \n                        \n                            \n                                    Defined in ngx-charts/chart/chart.ts:29\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        options\n                    \n                \n                \n                    \n                        Type :         ChartOptions\n\n                    \n                \n                        \n                            \n                                    Defined in ngx-charts/chart/chart.ts:28\n                            \n                        \n            \n        \n\n    \n    Outputs\n        \n            \n                \n                    \n                        \n                        item-click\n                    \n                \n                \n                    \n                        Type :         EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in ngx-charts/chart/chart.ts:30\n                            \n                        \n            \n        \n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            chartComponent\n                        \n                        \n                    \n                \n            \n            \n                \nchartComponent(type: string)\n                \n            \n\n\n            \n                \n                    Defined in ngx-charts/chart/chart.ts:66\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    type\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Type\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            ngDoCheck\n                        \n                        \n                    \n                \n            \n            \n                \nngDoCheck()\n                \n            \n\n\n            \n                \n                    Defined in ngx-charts/chart/chart.ts:83\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            ngOnChanges\n                        \n                        \n                    \n                \n            \n            \n                \nngOnChanges(changes: SimpleChanges)\n                \n            \n\n\n            \n                \n                    Defined in ngx-charts/chart/chart.ts:79\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    changes\n                                    \n                                                SimpleChanges\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            ngOnDestroy\n                        \n                        \n                    \n                \n            \n            \n                \nngOnDestroy()\n                \n            \n\n\n            \n                \n                    Defined in ngx-charts/chart/chart.ts:57\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            ngOnInit\n                        \n                        \n                    \n                \n            \n            \n                \nngOnInit()\n                \n            \n\n\n            \n                \n                    Defined in ngx-charts/chart/chart.ts:49\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            updateChart\n                        \n                        \n                    \n                \n            \n            \n                \nupdateChart()\n                \n            \n\n\n            \n                \n                    Defined in ngx-charts/chart/chart.ts:43\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n    \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            attached\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                        \n                            \n                                    Defined in ngx-charts/chart/chart.ts:35\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            chart\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     BaseChartComponent\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ViewChild('chart', {static: false})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in ngx-charts/chart/chart.ts:33\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            localeChange\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Subscription\n\n                        \n                    \n                        \n                            \n                                    Defined in ngx-charts/chart/chart.ts:34\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            select\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : () => {...}\n                        \n                    \n                        \n                            \n                                    Defined in ngx-charts/chart/chart.ts:92\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            tooltipTemplate\n                            \n                        \n                    \n                \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ViewChild('tooltipTemplate', {static: false})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in ngx-charts/chart/chart.ts:32\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            wrapper\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         ElementRef\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ViewChild('wrapper', {static: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in ngx-charts/chart/chart.ts:31\n                            \n                        \n\n\n            \n        \n\n\n    \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        chartType\n                    \n                \n\n                \n                    \n                        getchartType()\n                    \n                \n                            \n                                \n                                    Defined in ngx-charts/chart/chart.ts:62\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        colorScheme\n                    \n                \n\n                \n                    \n                        getcolorScheme()\n                    \n                \n                            \n                                \n                                    Defined in ngx-charts/chart/chart.ts:75\n                                \n                            \n\n            \n        \n\n\n\n\n    \n        import {Component, Input, Output, EventEmitter, OnInit, OnDestroy, OnChanges, DoCheck, SimpleChanges, ViewChild, ElementRef, Type} from \"@angular/core\";\nimport {Subscription} from \"rxjs\";\nimport {Utils} from \"@sinequa/core/base\";\nimport {IntlService} from \"@sinequa/core/intl\";\nimport {BaseChartComponent, BarVerticalComponent, BarHorizontalComponent} from \"@swimlane/ngx-charts\";\nimport {UIService} from \"@sinequa/components/utils\";\n\n\nexport interface ChartOptions {\n    type: string;\n    colorScheme?: string;\n    getItemColor?: (value: string) => string;\n    tickFormatter?: (value: any) => string;\n}\n\nexport interface ChartDataPoint {\n    name: string;\n    value: number;\n}\n\n@Component({\n    selector: \"sq-ngx-chart\",\n    templateUrl: \"./chart.html\",\n    styleUrls: [\"./chart.scss\"]\n})\nexport class NgxChart implements OnInit, OnDestroy, OnChanges, DoCheck {\n    @Input() options: ChartOptions;\n    @Input() data: ChartDataPoint[];\n    @Output(\"item-click\") itemClickEvent: EventEmitter;\n    @ViewChild(\"wrapper\", {static: true}) wrapper: ElementRef;\n    @ViewChild(\"tooltipTemplate\", {static: false}) tooltipTemplate;\n    @ViewChild(\"chart\", {static: false}) chart: BaseChartComponent;\n    localeChange: Subscription;\n    attached: boolean;\n\n    constructor(\n        protected intlService: IntlService,\n        private uiService: UIService) {\n        this.itemClickEvent = new EventEmitter();\n    }\n\n    updateChart() {\n        if (!!this.chart) this.chart.update();\n    }\n\n    private onResize = () => this.updateChart();\n\n    ngOnInit() {\n        this.uiService.addElementResizeListener(this.wrapper.nativeElement, this.onResize);\n        this.localeChange = Utils.subscribe(this.intlService.events,\n            (value) => {\n                this.updateChart();\n            });\n    }\n\n    ngOnDestroy() {\n        this.uiService.removeElementResizeListener(this.wrapper.nativeElement, this.onResize);\n        this.localeChange.unsubscribe();\n    }\n\n    get chartType(): string {\n        return Utils.toLowerCase(this.options.type);\n    }\n\n    chartComponent(type:string) : Type {\n        switch(type){\n            case \"horizontalbar\": return BarHorizontalComponent;\n            case \"verticaltalbar\": return BarVerticalComponent;\n            default: return BarVerticalComponent;\n        }\n    }\n\n    // so we don't end up with no color scheme if the color scheme is not set\n    get colorScheme(): string {\n        return this.options.colorScheme || \"cool\";\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n    }\n\n    // This is a clunky way of avoiding (briefly) seeing ngx-charts rendering with the default 600x400 dimensions\n    ngDoCheck() {\n        if (!this.attached && !!this.wrapper) {\n            if (document.body.contains(this.wrapper.nativeElement)) {\n                this.updateChart();\n                this.attached = true;\n            }\n        }\n    }\n\n    select = (dataPoint: ChartDataPoint): void => {\n        this.itemClickEvent.emit(dataPoint);\n    }\n}\n    \n\n    \n        \n    \n        \n            \n                \n            \n        \n        \n            \n                \n            \n        \n        \n            \n                \n            \n        \n        \n            \n                \n            \n        \n        \n            \n                \n            \n        \n        \n            \n                \n            \n        \n        \n            \n                \n            \n        \n        \n            \n                \n            \n        \n    \n    \n        {{model.name}}\n        {{model.value | sqValue}}\n    \n\n    \n\n    \n                \n                    ./chart.scss\n                \n                .sq-chart-wrapper {\n    visibility: hidden;\n    width: 100%;\n    height: 16rem;\n    overflow: hidden;\n    &.sq-attached {\n        visibility: visible;\n    }\n}\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    {{model.name}}        {{model.value | sqValue}}    '\n    var COMPONENTS = [{'name': 'BsEdgeInfoCard', 'selector': 'sq-edge-info-card'},{'name': 'BsFacetHeatmapComponent', 'selector': 'sq-facet-heatmap'},{'name': 'BsFacetTimelineComponent', 'selector': 'sq-facet-timeline'},{'name': 'BsHeatmapComponent', 'selector': 'sq-heatmap'},{'name': 'BsNodeInfoCard', 'selector': 'sq-node-info-card'},{'name': 'BsResultsHeatmapView', 'selector': 'sq-results-heatmap-view'},{'name': 'BsTimelineComponent', 'selector': 'sq-timeline'},{'name': 'BsTooltipComponent', 'selector': 'sq-tooltip'},{'name': 'FacetNgxChart', 'selector': 'sq-facet-ngx-chart'},{'name': 'FusionChart', 'selector': 'sq-fusion-chart'},{'name': 'MapComponent', 'selector': 'sq-googlemaps'},{'name': 'MoneyCloudComponent', 'selector': 'sq-money-cloud'},{'name': 'MoneyTimelineComponent', 'selector': 'sq-money-timeline'},{'name': 'NetworkComponent', 'selector': 'sq-network'},{'name': 'NgxChart', 'selector': 'sq-ngx-chart'},{'name': 'ResultTimeline', 'selector': 'sq-result-timeline'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'NgxChart'};\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/NgxChartsModule.html":{"url":"modules/NgxChartsModule.html","title":"module - NgxChartsModule","body":"\n                   \n\n\n\n\n    Modules\n    NgxChartsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_NgxChartsModule\n\n\n\ncluster_NgxChartsModule_declarations\n\n\n\ncluster_NgxChartsModule_exports\n\n\n\n\nFacetNgxChart\n\nFacetNgxChart\n\n\n\nNgxChartsModule\n\nNgxChartsModule\n\nNgxChartsModule -->\n\nFacetNgxChart->NgxChartsModule\n\n\n\n\n\nNgxChart\n\nNgxChart\n\nNgxChartsModule -->\n\nNgxChart->NgxChartsModule\n\n\n\n\n\nFacetNgxChart \n\nFacetNgxChart \n\nFacetNgxChart  -->\n\nNgxChartsModule->FacetNgxChart \n\n\n\n\n\nNgxChart \n\nNgxChart \n\nNgxChart  -->\n\nNgxChartsModule->NgxChart \n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            ngx-charts/ngx-charts.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Declarations\n                    \n                        \n                            FacetNgxChart\n                        \n                        \n                            NgxChart\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            FacetNgxChart\n                        \n                        \n                            NgxChart\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { NgModule } from \"@angular/core\";\nimport { CommonModule } from \"@angular/common\";\nimport {\n    AreaChartModule,\n    BarChartModule,\n    PieChartModule,\n    TreeMapModule,\n    NumberCardModule,\n    GaugeModule } from \"@swimlane/ngx-charts\";\n\nimport { IntlModule } from '@sinequa/core/intl';\nimport { UtilsModule } from \"@sinequa/components/utils\";\nimport { BsSelectionModule } from \"@sinequa/components/selection\";\n\nimport { NgxChart } from \"./chart/chart\";\nimport { FacetNgxChart } from \"./facet-chart/facet-chart\";\n\n@NgModule({\n\n    imports: [\n        CommonModule,\n        IntlModule,\n        UtilsModule,\n        BsSelectionModule,\n        \n        // ngx-charts modules\n        AreaChartModule,\n        BarChartModule,\n        PieChartModule,\n        TreeMapModule,\n        NumberCardModule,\n        GaugeModule\n    ],\n    declarations: [\n        NgxChart, FacetNgxChart\n    ],\n    exports: [\n        NgxChart, FacetNgxChart\n    ],\n})\nexport class NgxChartsModule {}\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Node.html":{"url":"interfaces/Node.html","title":"interface - Node","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  Node\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            network/network-models.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        context\n                                \n                                \n                                        count\n                                \n                                \n                                        id\n                                \n                                \n                                        label\n                                \n                                \n                                            Optional\n                                        precedence\n                                \n                                \n                                        provider\n                                \n                                \n                                        type\n                                \n                                \n                                        visible\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        context\n                                    \n                                \n                                \n                                    \n                                        context:         NetworkContext\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         NetworkContext\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        count\n                                    \n                                \n                                \n                                    \n                                        count:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    count is a mutable property used to scale the node size in function of the size of adjacent edges\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                    \n                                \n                                \n                                    \n                                        id:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        label\n                                    \n                                \n                                \n                                    \n                                        label:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        precedence\n                                    \n                                \n                                \n                                    \n                                        precedence:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    the precedence of a node determines which node object is kept when merging two dataset (the highest precedence node is kept) \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        provider\n                                    \n                                \n                                \n                                    \n                                        provider:         NetworkProvider\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         NetworkProvider\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        type\n                                    \n                                \n                                \n                                    \n                                        type:         NodeType\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         NodeType\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        visible\n                                    \n                                \n                                \n                                    \n                                        visible:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Subject } from 'rxjs';\nimport { Action } from '@sinequa/components/action';\nimport { Utils } from '@sinequa/core/base';\nimport { DataSet } from \"vis-data/peer/esm/vis-data\";\nimport { SearchService } from '@sinequa/components/search';\nimport { VisNetworkService } from 'ngx-vis';\nimport { AppService, ExprBuilder } from '@sinequa/core/app-utils';\nimport { IntlService } from '@sinequa/core/intl';\n\n// TYPES (configuration)\n\nexport interface NodeType {\n    name: string;\n    /** Vis Node options (merged in the Node objects). See https://visjs.github.io/vis-network/docs/network/nodes.html */\n    nodeOptions: {[key: string]: any} | ((node: Node, type: NodeType) => {[key: string]: any} );\n    /** If a field is provided, it can be used to filter the node value (and access the label, formatter, etc.) */\n    field?: string;\n}\n\nexport interface EdgeType {\n    /** Node types attached to this edge type. Should typically be 2 items, but cooccurrence aggregation might return more */\n    nodeTypes: NodeType[];\n    /** Vis Edge options (merged in the Edge objects). See https://visjs.github.io/vis-network/docs/network/edges.html */\n    edgeOptions: {[key: string]: any} | ((nodes: Node[], edge: Edge, type: EdgeType) => {[key: string]: any} );\n    /** If a field is provided, it can be used to filter the node value (and access the label, formatter, etc.) */\n    field?: string;\n}\n\n\n// DATA\n\n// Nodes (based on Vis Node interface)\n\nexport interface Node {\n    id: string;\n    label: string;\n\n    // Custom properties\n    type: NodeType;\n    provider: NetworkProvider;\n    visible: boolean;\n    /** count is a mutable property used to scale the node size in function of the size of adjacent edges*/\n    count: number;\n    /** the precedence of a node determines which node object is kept when merging two dataset (the highest precedence node is kept) */\n    precedence?: number;\n    // Context\n    context: NetworkContext;\n}\n\n// Edge (based on Vis Edge interface)\n\nexport interface Edge {\n    id: string;\n    from: string;\n    to: string;\n\n    // Custom properties\n    type: EdgeType;\n    provider: NetworkProvider;\n    visible: boolean;    \n    /** count is a property representing the strength of an edge, which scales the count of adjacent nodes*/\n    count: number;\n    /** A field value may be provided to filter search based on the edge field type */\n    fieldValue?: string;\n    // Context\n    context: NetworkContext;\n}\n\n\nexport interface NetworkProvider {\n    /** Whether or not the provider is active (if inactive, it will not provide empty datasets of nodes and edges) */\n    active: boolean;\n\n    /** Readable name of this provider */\n    name: string;\n\n    /** Dataset of this provider */\n    dataset: NetworkDataset;\n\n    /** Context (wrapper for general data about the network and services) */\n    context: NetworkContext;\n\n    /** Returns the Subject of this provider */\n    getProvider(): Subject;\n\n    /** Asynchronously provide data via it's provider Subject */\n    getData(context: NetworkContext); // skip/count handled internally\n\n    /** Called after the datasets provided by all providers have been merged into a single dataset */\n    onDatasetsMerged(dataset: NetworkDataset);\n\n    /** Called after the dataset is filtered and passed to Vis for rendering */\n    onNodesInserted(nodes: Node[]);\n\n    /** Called when ANY node is clicked in the rendered view of the network */\n    onNodeClicked(node: Node | undefined);\n\n    /** Called when ANY edge is clicked in the rendered view of the network */\n    onEdgeClicked(edge: Edge | undefined);\n\n    /** Retrieve the list of action for this provider. */\n    getProviderActions(): Action[];\n\n    /** Retrieve the list of action for a given node, and this provider. */\n    getNodeActions(node: Node): Action[];\n    \n    /** Retrieve the list of action for a given edge, and this provider. */\n    getEdgeActions(edge: Edge): Action[];\n\n    /** Called when the providers are discarded. Can be use to cancel subscriptions */\n    onDestroy();\n}\n\nexport interface NetworkContext {\n    /** Name of this network, for use in selections */\n    name: string;\n    /** Vis.js data structures */\n    nodes: DataSet;\n    edges: DataSet;\n    /** Useful services */\n    searchService: SearchService;\n    networkService: VisNetworkService;\n    appService: AppService;\n    intlService: IntlService;\n    exprBuilder: ExprBuilder;\n    /** Interactions */\n    select(node?: Node, edge?: Edge): void;\n}\n\n\nexport class NetworkDataset {\n\n    // Node index\n    private readonly nodeIdx: Map = new Map();\n\n    // Edge index\n    private readonly edgeIdx: Map = new Map();\n\n\n    /** Returns whether this node exists */\n    public hasNode(id: string): boolean {\n        return this.nodeIdx.has(id);\n    }\n    \n    /** Returns whether this edge exists */\n    public hasEdge(id: string): boolean {\n        return this.edgeIdx.has(id);\n    }\n\n    /** Returns the node with given id */\n    public getNode(id: string): Node | undefined {\n        return this.nodeIdx.get(id);\n    }\n\n    /** Returns the edge with given id */\n    public getEdge(id: string): Edge | undefined {\n        return this.edgeIdx.get(id);\n    }\n\n    /** Get the list of nodes */\n    public getNodes(): Node[] {\n        return Array.from(this.nodeIdx.values());\n    }\n\n    /** Get the list of edges */\n    public getEdges(): Edge[] {\n        return Array.from(this.edgeIdx.values());\n    }    \n\n    /** Get the list of visible nodes */\n    public getVisibleNodes(): Node[] {\n        return this.getNodes().filter(n => n.visible);\n    }\n\n    /** Get the list of visible edges */\n    public getVisibleEdges(): Edge[] {\n        return this.getEdges().filter(e => e.visible);\n    }\n\n    /** Get the list of node ids */\n    public getNodeIds(): string[] {\n        return Array.from(this.nodeIdx.keys());\n    }\n\n    /** Get the list of edge ids */\n    public getEdgeIds(): string[] {\n        return Array.from(this.edgeIdx.keys());\n    }\n    \n    /** Clears this dataset */\n    public clear() {\n        this.nodeIdx.clear();\n        this.edgeIdx.clear();\n    }\n\n    /** Add one or multiple nodes */\n    public addNodes(nodes: Node | Node[]) {\n        Array.isArray(nodes)? nodes.forEach(node => this.addNode(node)) : this.addNode(nodes);\n    }\n\n    /** Add one or multiple edges. */\n    public addEdges(edges: Edge | Edge[]) {\n        Array.isArray(edges)? edges.forEach(edge => this.addEdge(edge)) : this.addEdge(edges);\n    }\n\n    /** Remove one or multiple nodes. /!\\ Connected edges MUST be removed as well (use cleanRemoveNode() to do so) */\n    private removeNodes(ids: string | string[]) {\n        Array.isArray(ids)? ids.forEach(id => this.removeNode(id)) : this.removeNode(ids);\n    }\n\n    /** Remove one or multiple edges. */\n    public removeEdges(ids: string | string[]) {\n        Array.isArray(ids)? ids.forEach(id => this.removeEdge(id)) : this.removeEdge(ids);\n    }\n\n    /** Remove a node and its adjacent edges. keepDanglingNodes = false (default) removes the remaining nodes with no neighbor */\n    public cleanRemoveNode(nodeId: string, keepDanglingNodes?: boolean) {\n        this.getAdjacentEdges(nodeId).forEach(edge => {\n            const neighbor = this.getNode(edge.from === nodeId ? edge.to : edge.from) as Node;\n            this.removeEdges(edge.id);\n            neighbor.count -= edge.count;\n            if(!keepDanglingNodes && this.getAdjacentEdges(neighbor.id).length === 0) {\n                this.removeNodes(neighbor.id);\n            }\n        });\n    }\n\n    /** Get the edges adjacent to a node (O(n) method) */\n    public getAdjacentEdges(nodeId: string): Edge[] {\n        return this.getEdges().filter(e => e.from === nodeId || e.to === nodeId);\n    }\n\n    /** Get the nodes connected to a node via a single node (0(n) method) */\n    public getConnectedNodes(nodeId: string): Node[] {\n        return this.getAdjacentEdges(nodeId)\n                    .map(e => this.getNode(e.from === nodeId ? e.to : e.from) as Node);\n    }\n\n    /**\n     * Merge this dataset with another one. \n     * \n     * When duplicates nodes or edges are found:\n     * - The existing item is kept and updated\n     * - Their 'count' properties are added\n     * - Their 'visible' properties are ORed\n     * - Their nodeOptions and edgeOptions are updated\n     * \n     * @param dataset \n     */\n    public merge(dataset: NetworkDataset): NetworkDataset {\n\n        dataset.getNodes().forEach(node => {\n            node = Object.assign({}, node); // Avoid modifying the original datasets\n            if(!this.hasNode(node.id)) {\n                this.addNode(node);\n            }\n            else {\n                // Merge the new node with the existing one (which takes precedence by default)\n                let existingNode = this.getNode(node.id) as Node;\n                if((node.precedence || 0) > (existingNode.precedence || 0)) {\n                    // Set the new node in the node index\n                    this.nodeIdx.set(node.id, node);\n                    // swap existingNode and node for the merging of count, visible and node options\n                    const temp = node;\n                    node = existingNode;\n                    existingNode = temp;\n                }\n                existingNode.count += node.count;\n                existingNode.visible = existingNode.visible || node.visible;\n                let options: {[key: string]: any};\n                if(typeof existingNode.type.nodeOptions === \"function\") {\n                    options = existingNode.type.nodeOptions(existingNode, existingNode.type);\n                }\n                else {\n                    options = existingNode.type.nodeOptions;\n                }\n                Utils.extend(existingNode, options);\n            }\n        });\n\n        dataset.getEdges().forEach(edge => {\n            edge = Object.assign({}, edge); // Avoid modifying the original datasets\n            if(!this.hasEdge(edge.id)) {\n                this.addEdge(edge);\n            }\n            else {\n                // Merge the new edge with the existing one (which takes precedence)\n                // eg. statistical and semantic edges\n                const existingEdge = this.getEdge(edge.id) as Edge;\n                existingEdge.count += edge.count;\n                existingEdge.visible = existingEdge.visible || edge.visible;\n                // Merge edge labels (taking duplicates into account)\n                if(!!existingEdge[\"label\"] && !!edge[\"label\"]){\n                    edge[\"labels\"].forEach(label => {\n                        if(existingEdge[\"labels\"].indexOf(label) === -1) {\n                            existingEdge[\"label\"] += \", \"+label;\n                            existingEdge[\"labels\"].push(label);\n                        }\n                    });\n                }\n                let options: {[key: string]: any};\n                if(typeof existingEdge.type.edgeOptions === \"function\") {\n                    const nodes = [existingEdge.from, existingEdge.to].map(id => this.nodeIdx[id]);\n                    options = existingEdge.type.edgeOptions(nodes, existingEdge, existingEdge.type);\n                }\n                else {\n                    options = existingEdge.type.edgeOptions;\n                }\n                Utils.extend(existingEdge, options);\n            }\n        });\n\n        return this;\n    }\n\n    /** Transfer nodes and edges to the Vis nodes and edges DataSets */\n    updateDatasets(nodes: DataSet, edges: DataSet) {\n        nodes.remove(nodes.get().filter(n => !this.getNode(n.id)?.visible));\n        edges.remove(edges.get().filter(e => !this.getEdge(e.id)?.visible));\n        nodes.update(this.getVisibleNodes());\n        edges.update(this.getVisibleEdges());\n    }\n\n    \n    private addNode(node: Node) {\n        if(this.hasNode(node.id)) {\n            throw new Error(`Node '${node.id}' already in dataset`);\n        }\n        this.nodeIdx.set(node.id, node);\n    }\n    \n    private addEdge(edge: Edge) {\n        if(this.hasEdge(edge.id)) {\n            throw new Error(`Edge '${edge.id}' already in dataset`);\n        }\n        if(!this.hasNode(edge.from) || !this.hasNode(edge.to)) {\n            throw new Error(`Edge '${edge.id}' cannot be added as one of the nodes is missing from the dataset`)\n        }\n        this.edgeIdx.set(edge.id, edge);\n    }\n\n    private removeNode(id: string) {\n        this.nodeIdx.delete(id);\n    }\n\n    private removeEdge(id: string) {\n        this.edgeIdx.delete(id);\n    }\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/NodeData.html":{"url":"interfaces/NodeData.html","title":"interface - NodeData","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  NodeData\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            network/node-info-card.component.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        count\n                                \n                                \n                                        node\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        count\n                                    \n                                \n                                \n                                    \n                                        count:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        node\n                                    \n                                \n                                \n                                    \n                                        node:         Node\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Node\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Component, Input, OnChanges } from \"@angular/core\";\nimport { Node } from './network-models';\n\n\nexport interface NodeData {\n    node: Node;\n    count?: number; // The count displayed may be different from the node count (for edges)\n}\n\n@Component({\n    selector: \"sq-node-info-card\",\n    templateUrl: \"node-info-card.component.html\",\n    styles: [`\n.card {\n    top: 5px;\n    left: 0;\n    right: 0;\n    width: 80%;\n}\n.circular-image {\n    width: 1.5em;\n    height: 1.5em;\n    border-radius: 50%;\n    object-fit: cover;\n}\n    `]\n})\nexport class BsNodeInfoCard implements OnChanges {\n    @Input() node: Node;\n\n    closed: boolean;\n    expanded: boolean;\n\n    nodeData: NodeData;\n\n    neighbors: {[type: string]: NodeData[]};\n\n    ngOnChanges() {\n        this.closed = false;\n        this.expanded = false;\n        this.nodeData = { node: this.node, count: this.node.count };\n\n        this.neighbors = {};\n        this.node.context.edges\n            .stream()\n            .filter(e => e.from === this.node.id || e.to === this.node.id) // Filter edges\n            .map(e => {\n                const id = e.from === this.node.id ? e.to : e.from\n                const node = this.node.context.nodes.get(id);\n                return {node, count: e.count};\n            }) // get node and edge count\n            .forEach(item => {\n                if(item.node) {\n                    const type = item.node.type.field ?\n                        item.node.context.appService.getPluralLabel(item.node.type.field) : // Try to get the \"pretty label\"\n                        item.node.type.name; // Or just use the node type's name\n                    if(!this.neighbors[type]) {\n                        this.neighbors[type] = []; // Initialize the neighbor array\n                    }\n                    // Create the node data\n                    this.neighbors[type].push({ node: item.node, count: item.count } as NodeData);\n                }\n                return true;\n            });\n        // Sort the neighbors by decreasing count number\n        Object.values(this.neighbors)\n            .forEach(list => list.sort((a,b) => (b.count || 0) - (a.count || 0)));\n    }\n\n    focusNode(node: Node) {\n        // Hack to gain access to the network instance (networkService does not have the focus() method)\n        const networkInstance = node.context.networkService['networks'][node.context.name];\n        networkInstance.focus(node.id, {animation: true}); // Move the view to this node with animation\n        networkInstance.selectNodes([node.id], true); // Warning: does not trigger events...\n        node.context.select(node, undefined); // Select the node to update info cards, actions\n        return false;\n    }\n}\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/NodeType.html":{"url":"interfaces/NodeType.html","title":"interface - NodeType","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  NodeType\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            network/network-models.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        field\n                                \n                                \n                                        name\n                                \n                                \n                                        nodeOptions\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        field\n                                    \n                                \n                                \n                                    \n                                        field:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    If a field is provided, it can be used to filter the node value (and access the label, formatter, etc.) \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        name\n                                    \n                                \n                                \n                                    \n                                        name:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        nodeOptions\n                                    \n                                \n                                \n                                    \n                                        nodeOptions:     literal type | \n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type | \n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Vis Node options (merged in the Node objects). See https://visjs.github.io/vis-network/docs/network/nodes.html \n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { Subject } from 'rxjs';\nimport { Action } from '@sinequa/components/action';\nimport { Utils } from '@sinequa/core/base';\nimport { DataSet } from \"vis-data/peer/esm/vis-data\";\nimport { SearchService } from '@sinequa/components/search';\nimport { VisNetworkService } from 'ngx-vis';\nimport { AppService, ExprBuilder } from '@sinequa/core/app-utils';\nimport { IntlService } from '@sinequa/core/intl';\n\n// TYPES (configuration)\n\nexport interface NodeType {\n    name: string;\n    /** Vis Node options (merged in the Node objects). See https://visjs.github.io/vis-network/docs/network/nodes.html */\n    nodeOptions: {[key: string]: any} | ((node: Node, type: NodeType) => {[key: string]: any} );\n    /** If a field is provided, it can be used to filter the node value (and access the label, formatter, etc.) */\n    field?: string;\n}\n\nexport interface EdgeType {\n    /** Node types attached to this edge type. Should typically be 2 items, but cooccurrence aggregation might return more */\n    nodeTypes: NodeType[];\n    /** Vis Edge options (merged in the Edge objects). See https://visjs.github.io/vis-network/docs/network/edges.html */\n    edgeOptions: {[key: string]: any} | ((nodes: Node[], edge: Edge, type: EdgeType) => {[key: string]: any} );\n    /** If a field is provided, it can be used to filter the node value (and access the label, formatter, etc.) */\n    field?: string;\n}\n\n\n// DATA\n\n// Nodes (based on Vis Node interface)\n\nexport interface Node {\n    id: string;\n    label: string;\n\n    // Custom properties\n    type: NodeType;\n    provider: NetworkProvider;\n    visible: boolean;\n    /** count is a mutable property used to scale the node size in function of the size of adjacent edges*/\n    count: number;\n    /** the precedence of a node determines which node object is kept when merging two dataset (the highest precedence node is kept) */\n    precedence?: number;\n    // Context\n    context: NetworkContext;\n}\n\n// Edge (based on Vis Edge interface)\n\nexport interface Edge {\n    id: string;\n    from: string;\n    to: string;\n\n    // Custom properties\n    type: EdgeType;\n    provider: NetworkProvider;\n    visible: boolean;    \n    /** count is a property representing the strength of an edge, which scales the count of adjacent nodes*/\n    count: number;\n    /** A field value may be provided to filter search based on the edge field type */\n    fieldValue?: string;\n    // Context\n    context: NetworkContext;\n}\n\n\nexport interface NetworkProvider {\n    /** Whether or not the provider is active (if inactive, it will not provide empty datasets of nodes and edges) */\n    active: boolean;\n\n    /** Readable name of this provider */\n    name: string;\n\n    /** Dataset of this provider */\n    dataset: NetworkDataset;\n\n    /** Context (wrapper for general data about the network and services) */\n    context: NetworkContext;\n\n    /** Returns the Subject of this provider */\n    getProvider(): Subject;\n\n    /** Asynchronously provide data via it's provider Subject */\n    getData(context: NetworkContext); // skip/count handled internally\n\n    /** Called after the datasets provided by all providers have been merged into a single dataset */\n    onDatasetsMerged(dataset: NetworkDataset);\n\n    /** Called after the dataset is filtered and passed to Vis for rendering */\n    onNodesInserted(nodes: Node[]);\n\n    /** Called when ANY node is clicked in the rendered view of the network */\n    onNodeClicked(node: Node | undefined);\n\n    /** Called when ANY edge is clicked in the rendered view of the network */\n    onEdgeClicked(edge: Edge | undefined);\n\n    /** Retrieve the list of action for this provider. */\n    getProviderActions(): Action[];\n\n    /** Retrieve the list of action for a given node, and this provider. */\n    getNodeActions(node: Node): Action[];\n    \n    /** Retrieve the list of action for a given edge, and this provider. */\n    getEdgeActions(edge: Edge): Action[];\n\n    /** Called when the providers are discarded. Can be use to cancel subscriptions */\n    onDestroy();\n}\n\nexport interface NetworkContext {\n    /** Name of this network, for use in selections */\n    name: string;\n    /** Vis.js data structures */\n    nodes: DataSet;\n    edges: DataSet;\n    /** Useful services */\n    searchService: SearchService;\n    networkService: VisNetworkService;\n    appService: AppService;\n    intlService: IntlService;\n    exprBuilder: ExprBuilder;\n    /** Interactions */\n    select(node?: Node, edge?: Edge): void;\n}\n\n\nexport class NetworkDataset {\n\n    // Node index\n    private readonly nodeIdx: Map = new Map();\n\n    // Edge index\n    private readonly edgeIdx: Map = new Map();\n\n\n    /** Returns whether this node exists */\n    public hasNode(id: string): boolean {\n        return this.nodeIdx.has(id);\n    }\n    \n    /** Returns whether this edge exists */\n    public hasEdge(id: string): boolean {\n        return this.edgeIdx.has(id);\n    }\n\n    /** Returns the node with given id */\n    public getNode(id: string): Node | undefined {\n        return this.nodeIdx.get(id);\n    }\n\n    /** Returns the edge with given id */\n    public getEdge(id: string): Edge | undefined {\n        return this.edgeIdx.get(id);\n    }\n\n    /** Get the list of nodes */\n    public getNodes(): Node[] {\n        return Array.from(this.nodeIdx.values());\n    }\n\n    /** Get the list of edges */\n    public getEdges(): Edge[] {\n        return Array.from(this.edgeIdx.values());\n    }    \n\n    /** Get the list of visible nodes */\n    public getVisibleNodes(): Node[] {\n        return this.getNodes().filter(n => n.visible);\n    }\n\n    /** Get the list of visible edges */\n    public getVisibleEdges(): Edge[] {\n        return this.getEdges().filter(e => e.visible);\n    }\n\n    /** Get the list of node ids */\n    public getNodeIds(): string[] {\n        return Array.from(this.nodeIdx.keys());\n    }\n\n    /** Get the list of edge ids */\n    public getEdgeIds(): string[] {\n        return Array.from(this.edgeIdx.keys());\n    }\n    \n    /** Clears this dataset */\n    public clear() {\n        this.nodeIdx.clear();\n        this.edgeIdx.clear();\n    }\n\n    /** Add one or multiple nodes */\n    public addNodes(nodes: Node | Node[]) {\n        Array.isArray(nodes)? nodes.forEach(node => this.addNode(node)) : this.addNode(nodes);\n    }\n\n    /** Add one or multiple edges. */\n    public addEdges(edges: Edge | Edge[]) {\n        Array.isArray(edges)? edges.forEach(edge => this.addEdge(edge)) : this.addEdge(edges);\n    }\n\n    /** Remove one or multiple nodes. /!\\ Connected edges MUST be removed as well (use cleanRemoveNode() to do so) */\n    private removeNodes(ids: string | string[]) {\n        Array.isArray(ids)? ids.forEach(id => this.removeNode(id)) : this.removeNode(ids);\n    }\n\n    /** Remove one or multiple edges. */\n    public removeEdges(ids: string | string[]) {\n        Array.isArray(ids)? ids.forEach(id => this.removeEdge(id)) : this.removeEdge(ids);\n    }\n\n    /** Remove a node and its adjacent edges. keepDanglingNodes = false (default) removes the remaining nodes with no neighbor */\n    public cleanRemoveNode(nodeId: string, keepDanglingNodes?: boolean) {\n        this.getAdjacentEdges(nodeId).forEach(edge => {\n            const neighbor = this.getNode(edge.from === nodeId ? edge.to : edge.from) as Node;\n            this.removeEdges(edge.id);\n            neighbor.count -= edge.count;\n            if(!keepDanglingNodes && this.getAdjacentEdges(neighbor.id).length === 0) {\n                this.removeNodes(neighbor.id);\n            }\n        });\n    }\n\n    /** Get the edges adjacent to a node (O(n) method) */\n    public getAdjacentEdges(nodeId: string): Edge[] {\n        return this.getEdges().filter(e => e.from === nodeId || e.to === nodeId);\n    }\n\n    /** Get the nodes connected to a node via a single node (0(n) method) */\n    public getConnectedNodes(nodeId: string): Node[] {\n        return this.getAdjacentEdges(nodeId)\n                    .map(e => this.getNode(e.from === nodeId ? e.to : e.from) as Node);\n    }\n\n    /**\n     * Merge this dataset with another one. \n     * \n     * When duplicates nodes or edges are found:\n     * - The existing item is kept and updated\n     * - Their 'count' properties are added\n     * - Their 'visible' properties are ORed\n     * - Their nodeOptions and edgeOptions are updated\n     * \n     * @param dataset \n     */\n    public merge(dataset: NetworkDataset): NetworkDataset {\n\n        dataset.getNodes().forEach(node => {\n            node = Object.assign({}, node); // Avoid modifying the original datasets\n            if(!this.hasNode(node.id)) {\n                this.addNode(node);\n            }\n            else {\n                // Merge the new node with the existing one (which takes precedence by default)\n                let existingNode = this.getNode(node.id) as Node;\n                if((node.precedence || 0) > (existingNode.precedence || 0)) {\n                    // Set the new node in the node index\n                    this.nodeIdx.set(node.id, node);\n                    // swap existingNode and node for the merging of count, visible and node options\n                    const temp = node;\n                    node = existingNode;\n                    existingNode = temp;\n                }\n                existingNode.count += node.count;\n                existingNode.visible = existingNode.visible || node.visible;\n                let options: {[key: string]: any};\n                if(typeof existingNode.type.nodeOptions === \"function\") {\n                    options = existingNode.type.nodeOptions(existingNode, existingNode.type);\n                }\n                else {\n                    options = existingNode.type.nodeOptions;\n                }\n                Utils.extend(existingNode, options);\n            }\n        });\n\n        dataset.getEdges().forEach(edge => {\n            edge = Object.assign({}, edge); // Avoid modifying the original datasets\n            if(!this.hasEdge(edge.id)) {\n                this.addEdge(edge);\n            }\n            else {\n                // Merge the new edge with the existing one (which takes precedence)\n                // eg. statistical and semantic edges\n                const existingEdge = this.getEdge(edge.id) as Edge;\n                existingEdge.count += edge.count;\n                existingEdge.visible = existingEdge.visible || edge.visible;\n                // Merge edge labels (taking duplicates into account)\n                if(!!existingEdge[\"label\"] && !!edge[\"label\"]){\n                    edge[\"labels\"].forEach(label => {\n                        if(existingEdge[\"labels\"].indexOf(label) === -1) {\n                            existingEdge[\"label\"] += \", \"+label;\n                            existingEdge[\"labels\"].push(label);\n                        }\n                    });\n                }\n                let options: {[key: string]: any};\n                if(typeof existingEdge.type.edgeOptions === \"function\") {\n                    const nodes = [existingEdge.from, existingEdge.to].map(id => this.nodeIdx[id]);\n                    options = existingEdge.type.edgeOptions(nodes, existingEdge, existingEdge.type);\n                }\n                else {\n                    options = existingEdge.type.edgeOptions;\n                }\n                Utils.extend(existingEdge, options);\n            }\n        });\n\n        return this;\n    }\n\n    /** Transfer nodes and edges to the Vis nodes and edges DataSets */\n    updateDatasets(nodes: DataSet, edges: DataSet) {\n        nodes.remove(nodes.get().filter(n => !this.getNode(n.id)?.visible));\n        edges.remove(edges.get().filter(e => !this.getEdge(e.id)?.visible));\n        nodes.update(this.getVisibleNodes());\n        edges.update(this.getVisibleEdges());\n    }\n\n    \n    private addNode(node: Node) {\n        if(this.hasNode(node.id)) {\n            throw new Error(`Node '${node.id}' already in dataset`);\n        }\n        this.nodeIdx.set(node.id, node);\n    }\n    \n    private addEdge(edge: Edge) {\n        if(this.hasEdge(edge.id)) {\n            throw new Error(`Edge '${edge.id}' already in dataset`);\n        }\n        if(!this.hasNode(edge.from) || !this.hasNode(edge.to)) {\n            throw new Error(`Edge '${edge.id}' cannot be added as one of the nodes is missing from the dataset`)\n        }\n        this.edgeIdx.set(edge.id, edge);\n    }\n\n    private removeNode(id: string) {\n        this.nodeIdx.delete(id);\n    }\n\n    private removeEdge(id: string) {\n        this.edgeIdx.delete(id);\n    }\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/RecordNode.html":{"url":"interfaces/RecordNode.html","title":"interface - RecordNode","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  RecordNode\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            network/providers/records-provider.ts\n        \n\n            \n                Description\n            \n            \n                Extension of the Node interface, to include the Record object\nfrom which the node is generated\n\n            \n\n            \n                Extends\n            \n            \n                        Node\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        record\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        record\n                                    \n                                \n                                \n                                    \n                                        record:     Record\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Record\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Utils } from '@sinequa/core/base';\nimport { Record } from '@sinequa/core/web-services';\nimport { Action } from '@sinequa/components/action';\nimport { Node, NetworkDataset, NodeType, EdgeType, NetworkContext } from '../network-models';\nimport { BaseProvider } from './base-provider';\n\n/**\n * Extension of the Node interface, to include the Record object\n * from which the node is generated\n */\nexport interface RecordNode extends Node {\n    record: Record;\n}\n\n\n/**\n * An extension of the EdgeType interface to include properties specific to\n * structural edges (edge between a record and its metadata).\n */\nexport interface StructuralEdgeType extends EdgeType {\n    /** Name of the field in the record */\n    field: string;\n    /** count limits the number of values displayed and allows for pagination. Use 0 for unlimited values */\n    count?: number;\n    /** Defines when the edge should be displayed */\n    trigger: StructuralTriggerType;\n    /** showall: display all values from the field / paginate: display all value with pagination / existingnodes: only link to existing nodes / manual: only show if manual action (activated programmatically) */\n    display: StructuralDisplayType;\n    /** A function to parse metadata from a record node in a custom way */\n    parse?: (value: any, record: Record, type: StructuralEdgeType) => CustomData;\n}\n\nexport type StructuralTriggerType = \"oninsert\" | \"onclick\" | \"manual\";\nexport type StructuralDisplayType = \"all\" | \"paginate\" | \"existingnodes\" | ((node: Node, recordNode: RecordNode, index: number) => boolean);\n\n/**\n * Data structure returned by the optional parse() function of a structural edge\n * type. Contains the parsed values of a property that can be turned into one or\n * multiple nodes and edges.\n */\nexport interface CustomData {\n    values: string[]; // eg. LARRY PAGE, GOOGLE\n    displays: string[]; // eg. Larry Page, Google\n    relations?: string[]; // eg. Works At\n    directed?: boolean[]; // eg. true\n    fieldValue?: string; // A value on which to filter the data\n}\n\n/**\n * Tests whether the given edge type is a structural edge type\n * @param et an edge type\n */\nexport function isStructuralEdgeType(et: EdgeType): et is StructuralEdgeType {\n    return !!(et as StructuralEdgeType).field;\n}\n\n\n/**\n * A network provider generating nodes from records.\n * Additionally, the provider can generate the \"structural edges\" of that\n * node. Structural edges are edges between a record and the fields of\n * that record (eg. the wikipedia page of Microsoft is a record that probably\n * contains the fields \"Microsoft\" and \"Bill Gates\").\n */\nexport class RecordsProvider extends BaseProvider {\n\n    constructor(\n        public name = \"Documents\",\n        protected nodeType: NodeType,\n        protected edgeTypes: StructuralEdgeType[],\n        protected records: Record[],\n        protected hideRecordNode = false\n    ){\n        super(name);\n    }\n\n    /**\n     * Clears the dataset and generates new record nodes\n     * @param records the list of records of this provider\n     */\n    protected updateDataset(records?: Record[]) {\n        this.dataset.clear();\n        if(!this.active || !records || records.length === 0) {\n            return; \n        }\n        this.addRecordNodes(records);\n    }\n    \n    // Record nodes\n\n    /**\n     * Generates the nodes for a list of records, including their structural\n     * edges, and adds them to the dataset.\n     * Returns the list of record nodes.\n     * @param records \n     */\n    protected addRecordNodes(records: Record[]): RecordNode[] {\n        return records.map(record => {\n            let node = this.dataset.getNode(this.getNodeId(this.nodeType, record.id));\n            if(!node) {\n                node = this.createNode(this.nodeType, record.id, record.title, !this.hideRecordNode, {record});\n                this.dataset.addNodes(node);\n                this.edgeTypes.forEach(type => {\n                    this.addStructuralEdges(node as RecordNode, type);\n                });\n            }\n            return node as RecordNode;\n        });\n    }\n\n    \n    // Structural edges\n\n    /**\n     * Generates the metadata nodes and structural edges from the given node,\n     * and merge them into the dataset.\n     * This function will automatically parse the metadata contained in the record,\n     * but it is possible to manage custom types of metadata by providing a\n     * custom parse() function via the structural edge type.\n     * @param node The record node\n     * @param type The edge type for which we want to create edges\n     */\n    protected addStructuralEdges(node: RecordNode, type: StructuralEdgeType) {\n\n        if(type.nodeTypes[0] !== this.nodeType){\n            throw new Error(`Inconsistent node type: '${type.nodeTypes[0].name}' instead of '${this.nodeType.name}'`);\n        }\n        \n        const recorddata = node.record[type.field];\n\n        if(recorddata === undefined){\n            return;\n        }\n\n        // Custom parse for mono or multi valued data\n        if(type.parse) {\n            if(Utils.isArray(recorddata)) {\n                recorddata.forEach((value,i) => { \n                    this.addCustomEdge(node, type, type.parse!(value, node.record, type));\n                });\n            }\n            else {\n                this.addCustomEdge(node, type, type.parse!(recorddata, node.record, type));\n            }\n        }\n        // Default handling for standard Sinequa Metadata\n        else {\n            const data = new NetworkDataset();\n            data.addNodes(node);\n    \n            // sourcestr\n            if(Utils.isString(recorddata)) {\n                this.addStructuralEdge(data, node, type, recorddata, recorddata, 0);\n            }\n            else if(Utils.isArray(recorddata)) {\n                recorddata.forEach((value,i) => {\n                    // sourcecsv\n                    if(Utils.isString(value)) {\n                        this.addStructuralEdge(data, node, type, value, value, i);\n                    }\n                    // entity\n                    else if(value[\"value\"]) {\n                        this.addStructuralEdge(data, node, type, value[\"value\"], value[\"display\"] || value[\"value\"], i);\n                    }\n                });\n            }\n    \n            this.dataset.merge(data);\n        }\n    }\n\n    /**\n     * Add a structural edge to a record node and adds that edge\n     * (and corresponding metadata node) to the given dataset.\n     * @param dataset The target dataset\n     * @param recordNode The record node\n     * @param type The edge type of the structural edge\n     * @param value The \"value\" property of the metadata node\n     * @param display The \"display\" property of the metadata node\n     * @param index The index of the metadata within the record, which may influence its visibility when using display=paginate\n     */\n    protected addStructuralEdge(dataset: NetworkDataset, recordNode: RecordNode, type: StructuralEdgeType, value: string, display: string, index: number) {\n        // Create the metadata node\n        const node = this.createNode(type.nodeTypes[1], value, display, true);\n        // Sets its visibility\n        node.visible = type.trigger === \"oninsert\" && this.isEdgeVisible(type, node, recordNode, index);\n        if(recordNode.id !== node.id){ // Special case of hybrid nodes, where the recordNode might contain itself...!\n            if(!dataset.hasNode(node.id)) { // Duplicate nodes/edges are possible when the same node type is present in multiple fields of a record (eg. \"email\" in msgfrom and msgto)\n                dataset.addNodes(node);\n            }\n            const edge = this.createEdge(type, recordNode, node, value, node.visible, {record: recordNode.record});\n            if(!dataset.hasEdge(edge.id)) {\n                dataset.addEdges(edge);\n            }\n        }\n    }\n\n    /**\n     * Add a custom structural edge to a record node and merges that edge\n     * (and corresponding metadata node) into the global dataset.\n     * @param recordNode The record node\n     * @param type The edge type of the structural edge\n     * @param data A CustomData object containing the properties of the metadata nodes we want to created\n     */\n    protected addCustomEdge(recordNode: RecordNode, type: StructuralEdgeType, data: CustomData) {\n        if(type.nodeTypes.length !== data.values.length + 1) {\n            throw new Error(`Wrong number of values for this custom edge ${type.nodeTypes.length}, ${data.values.length}`);\n        }\n        // Create a dataset only for this data, to avoid duplicate conflicts\n        const dataset = new NetworkDataset();\n        dataset.addNodes(recordNode);\n        // For each value contained in \"data\", create a node, and edges in between them (in addition to the edges between the record and each metadata node)\n        let lastNode: Node;\n        for(let i=0; i 0){\n                const relation = data.relations? data.relations[i-1] : undefined;\n                const directed = data.directed? data.directed[i-1] : false;\n                dataset.addEdges(this.createEdge(type, lastNode!, node, data.fieldValue, true, {}, 1, directed, relation));\n            }\n            lastNode = node;\n        }\n        this.dataset.merge(dataset);\n    }\n\n    /**\n     * Returns the visibility of a structural edge, depending on the type.display property\n     * @param type The structural edge type\n     * @param node The metadata node of this edge\n     * @param recordNode The record node of this edge\n     * @param index The index of the metadata in the list of metadata of the record\n     */\n    protected isEdgeVisible(type: StructuralEdgeType, node: Node, recordNode: RecordNode, index: number): boolean {\n        if(type.display === \"all\") {\n            return true;\n        }\n        else if(type.display === \"existingnodes\") {\n            return false;\n        }\n        else if(type.display === \"paginate\") {\n            return index  node.type === this.nodeType)\n            .forEach(node => {\n                dataset.getAdjacentEdges(node.id)\n                    .filter(edge => (edge.type as StructuralEdgeType).display === 'existingnodes')\n                    .forEach(edge => {\n                        const neighbor = dataset.getNode(node.id === edge.to ? edge.from : edge.to);\n                        if(!neighbor) {\n                            throw new Error(`Missing node from edge ${edge.id}`);\n                        }\n                        const neighborsneighbors = dataset.getAdjacentEdges(neighbor.id);\n                        if(neighborsneighbors.length > 1) {\n                            neighbor.visible = true;\n                            edge.visible = true;\n                        }\n                    });\n            });\n    }\n\n    /**\n     * Adjust visibility of nodes and edges, for structural edges with\n     * type.trigger = onclick. These nodes will only be shown once their\n     * record node is clicked on.\n     * @param node A node that was clicked\n     */\n    onNodeClicked(node?: Node) {\n        if(this.active && node && node.type === this.nodeType) { // Note: we cannot test the provider property, since this node might have been merged with one from a different provider. However the node type should be a unique instance\n            let update = false;\n            this.dataset.getAdjacentEdges(node.id)\n                .filter(edge => edge.type['trigger'] === 'onclick')\n                .forEach(edge => {\n                    const neighbor = this.dataset.getNode(node.id === edge.to ? edge.from : edge.to);\n                    if(!neighbor) {\n                        throw new Error(`Missing node from edge ${edge.id}`);\n                    }\n                    if(!neighbor.visible || !edge.visible) {\n                        edge.visible = true;\n                        neighbor.visible = true;\n                        update = true;\n                    }\n                    // TODO \"propagate\" visibility (ie. if 2 nodes are visible but an edge in between is invisible, make it visible)\n                });\n            if(update) {\n                this.provider.next(this.dataset);\n            }\n        }\n    }\n\n    getProviderActions(): Action[] {\n        return super.getProviderActions();\n    }\n\n    /**\n     * Creates actions for expanding and/or collapsing a record node that was clicked.\n     * expanding and collapsing will act on the visibility of the structural edges\n     * attached to this node.\n     * Both actions might be displayed at the same time, if the node is in an intermediate\n     * state.\n     * @param node \n     */\n    getNodeActions(node: Node): Action[] {\n        const actions = super.getNodeActions(node);\n        \n        // Actions for exanding / collapsing a record node\n        if(this.active && node.type === this.nodeType && this.edgeTypes.length > 0) {\n            let hasExpandedEdge = false;\n            let hasCollapsedEdge = false;\n            this.dataset.getAdjacentEdges(node.id).forEach(e => {\n                hasCollapsedEdge = hasCollapsedEdge || !e.visible;\n                hasExpandedEdge = hasExpandedEdge || e.visible;\n            });\n\n            if(hasCollapsedEdge) {\n                actions.push(new Action({\n                    icon: \"fas fa-expand-arrows-alt\",\n                    title: \"msg#network.actions.expandMeta\",\n                    action: () => {\n                        let update = false;\n                        this.dataset.getAdjacentEdges(node.id)\n                            .forEach(edge => {\n                                const neighbor = this.dataset.getNode(node.id === edge.to ? edge.from : edge.to);\n                                if(!neighbor) {\n                                    throw new Error(`Missing node from edge ${edge.id}`);\n                                }\n                                if(!neighbor.visible || !edge.visible) {\n                                    edge.visible = true;\n                                    neighbor.visible = true;\n                                    update = true;\n                                }\n                                // TODO \"propagate\" visibility (ie. if 2 nodes are visible but an edge in between is invisible, make it visible)\n                            });\n                        if(update) {\n                            this.provider.next(this.dataset);\n                        }\n                    }\n                }));\n            }\n            \n            if(hasExpandedEdge) {\n                actions.push(new Action({\n                    icon: \"fas fa-compress-arrows-alt\",\n                    title: \"msg#network.actions.collapseMeta\",\n                    action: () => {\n                        let update = false;\n                        this.dataset.getAdjacentEdges(node.id)\n                            .forEach(edge => {\n                                const neighbor = this.dataset.getNode(node.id === edge.to ? edge.from : edge.to);\n                                if(!neighbor) {\n                                    throw new Error(`Missing node from edge ${edge.id}`);\n                                }\n                                if((neighbor.visible || edge.visible) && !(neighbor as RecordNode).record) { // Prevent collapsing links between 2 record nodes (alternatively, we could count the number of neighbors of the neighbors, and close only the isoltated ones)\n                                    edge.visible = false;\n                                    neighbor.visible = false;\n                                    update = true;\n                                }\n                            });\n                        if(update) {\n                            this.provider.next(this.dataset);\n                        }\n                    }\n                }));\n            }\n        }\n        return actions;\n    }\n\n}\n    \n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/ResultTimeline.html":{"url":"components/ResultTimeline.html","title":"component - ResultTimeline","body":"\n                   \n\n\n\n\n\n  Components\n  ResultTimeline\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    vis-timeline/result-timeline/result-timeline.ts\n\n\n\n\n    \n        Implements\n    \n    \n                    OnChanges\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                sq-result-timeline\n            \n\n\n\n\n            \n                templateUrl\n                ./result-timeline.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                initDone\n                            \n                            \n                                items\n                            \n                            \n                                    Public\n                                visTimelineService\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                ngOnChanges\n                            \n                            \n                                timelineInitialized\n                            \n                            \n                                updateTimeline\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                dates\n                            \n                            \n                                events\n                            \n                            \n                                max_dates\n                            \n                            \n                                max_year\n                            \n                            \n                                min_dates\n                            \n                            \n                                min_year\n                            \n                            \n                                name\n                            \n                            \n                                options\n                            \n                            \n                                record\n                            \n                        \n                    \n                \n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(visTimelineService: VisTimelineService)\n                    \n                \n                        \n                            \n                                Defined in vis-timeline/result-timeline/result-timeline.ts:32\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        visTimelineService\n                                                  \n                                                        \n                                                                    VisTimelineService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        dates\n                    \n                \n                \n                    \n                        Type :     EntityItem[]\n\n                    \n                \n                        \n                            \n                                    Defined in vis-timeline/result-timeline/result-timeline.ts:23\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        events\n                    \n                \n                \n                    \n                        Type :     EntityItem[]\n\n                    \n                \n                        \n                            \n                                    Defined in vis-timeline/result-timeline/result-timeline.ts:24\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        max_dates\n                    \n                \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 100\n                    \n                \n                        \n                            \n                                    Defined in vis-timeline/result-timeline/result-timeline.ts:28\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        max_year\n                    \n                \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 10000\n                    \n                \n                        \n                            \n                                    Defined in vis-timeline/result-timeline/result-timeline.ts:26\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        min_dates\n                    \n                \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 1\n                    \n                \n                        \n                            \n                                    Defined in vis-timeline/result-timeline/result-timeline.ts:27\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        min_year\n                    \n                \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 0\n                    \n                \n                        \n                            \n                                    Defined in vis-timeline/result-timeline/result-timeline.ts:25\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        name\n                    \n                \n                \n                    \n                        Default value : \"vis-timeline\"\n                    \n                \n                        \n                            \n                                    Defined in vis-timeline/result-timeline/result-timeline.ts:21\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        options\n                    \n                \n                \n                    \n                        Type :     TimelineOptions\n\n                    \n                \n                \n                    \n                        Default value : defaultOptions\n                    \n                \n                        \n                            \n                                    Defined in vis-timeline/result-timeline/result-timeline.ts:29\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        record\n                    \n                \n                \n                    \n                        Type :     Record\n\n                    \n                \n                        \n                            \n                                    Defined in vis-timeline/result-timeline/result-timeline.ts:22\n                            \n                        \n            \n        \n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            ngOnChanges\n                        \n                        \n                    \n                \n            \n            \n                \nngOnChanges(changes: SimpleChanges)\n                \n            \n\n\n            \n                \n                    Defined in vis-timeline/result-timeline/result-timeline.ts:37\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    changes\n                                    \n                                                SimpleChanges\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            timelineInitialized\n                        \n                        \n                    \n                \n            \n            \n                \ntimelineInitialized()\n                \n            \n\n\n            \n                \n                    Defined in vis-timeline/result-timeline/result-timeline.ts:122\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            updateTimeline\n                        \n                        \n                    \n                \n            \n            \n                \nupdateTimeline()\n                \n            \n\n\n            \n                \n                    Defined in vis-timeline/result-timeline/result-timeline.ts:43\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n    \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            initDone\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : false\n                        \n                    \n                        \n                            \n                                    Defined in vis-timeline/result-timeline/result-timeline.ts:31\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            items\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     DataItem[]\n\n                        \n                    \n                    \n                        \n                            Default value : []\n                        \n                    \n                        \n                            \n                                    Defined in vis-timeline/result-timeline/result-timeline.ts:32\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            visTimelineService\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     VisTimelineService\n\n                        \n                    \n                        \n                            \n                                    Defined in vis-timeline/result-timeline/result-timeline.ts:34\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n    \n        import {Component, Input, OnChanges, SimpleChanges} from \"@angular/core\";\nimport {Record, EntityItem} from \"@sinequa/core/web-services\";\nimport {TimelineOptions, DataItem, VisTimelineService} from \"ngx-vis\";\n\nimport moment from \"moment\";\n\nexport const defaultOptions : TimelineOptions = {\n    minHeight : '150px',\n    maxHeight : '350px',\n    margin: {\n        axis: 5,\n        item: 5\n    }\n};\n\n@Component({\n    selector: \"sq-result-timeline\",\n    templateUrl: \"./result-timeline.html\"\n})\nexport class ResultTimeline implements OnChanges {\n    @Input() name = \"vis-timeline\";\n    @Input() record: Record;\n    @Input() dates: EntityItem[];\n    @Input() events: EntityItem[];\n    @Input() min_year: number = 0;\n    @Input() max_year: number = 10000;\n    @Input() min_dates: number = 1;\n    @Input() max_dates: number = 100;\n    @Input() options: TimelineOptions = defaultOptions;\n\n    initDone = false;\n    items : DataItem[] = [];\n\n    constructor(public visTimelineService: VisTimelineService){\n    }\n\n    ngOnChanges(changes:SimpleChanges) {\n        if(!!changes['record'] || !!changes['dates'] || !!changes['events']){\n            this.updateTimeline();\n        }\n    }\n\n    updateTimeline(){\n\n        this.items.splice(0);\n\n        const dates = this.dates || [];\n        const events = this.events || [];\n\n        const all_ids: string[] = [];\n        const all_dates: string[] = [];\n\n        events.forEach(event => {\n            const data_date = event.display;\n            const cooc = data_date.substring(1,data_date.length-1).split(\")#(\");\n            const date = new Date(cooc[1]);\n            //console.log(\"cooc1:\",data_date[i+2]);\n            //const pos = event.locations.split(\",\")[0];\n            //console.log(cooc);\n            const year = date.getFullYear();\n            //console.log(year);\n            //console.log(regdate.test(date) );\n            //console.log( year  1950);\n            const id = this.record.id + \"#\" + data_date;\n            if(year  this.min_year && all_ids.indexOf(id)===-1){\n                this.items.push({id: id, content: cooc[0], start: date});\n                all_dates.push(cooc[1]);\n                all_ids.push(id);\n            }\n        });\n\n        dates.forEach(dateobj => {\n            const date: Date = moment(dateobj.display).toDate();\n            //console.log(\"date:\",data_date[i+1]);\n            //const pos = dateobj.locations.split(\",\")[0];\n            const year = date.getFullYear();\n            const id = this.record.id + \"#\" + dateobj.display;\n            if(year  this.min_year && all_dates.indexOf(dateobj.display)===-1 && all_ids.indexOf(id)===-1){\n                this.items.push({id: id, content: moment(date).format('ll'), start: date});\n                all_ids.push(id);\n            }\n        });\n\n        if(this.items.length >= this.min_dates){\n\n            if(this.items.length> this.max_dates )\n                this.items.splice(0, this.max_dates);\n\n            //console.log(data);\n\n            //try{\n            //    this.timeline.removeCustomTime(\"date-modified\");\n            //}catch{\n                // No date-modified\n            //}\n\n            //if(Utils.isString(this.record.modified) && this.record.modified.length>=10){\n            //    this.timeline.addCustomTime(this.record.modified.substring(0,10), \"date-modified\");\n            //}\n\n            /*this.timeline.on('select', properties => {\n                //console.log('selected items: ' + properties.items);\n                //console.log('event: ', properties.event);\n                //console.log(properties);\n                if(properties.items.length>0){\n                    //var id = properties.items[0].split(\"#\");\n                    console.log(this.items.get(properties.items[0]));\n                    //var date = items._data[properties.items[0]].start;\n                    //var url = \"search?action=select&resultid=\"+RESULTID+\"&item=%22Tag%3B\"+settings.date_column+\"%3B\"+date+\"%3B\"+date+\"%22\"\n                    //popup_extract(id[0], parseInt(id[1]), properties.event.target,url);\n                }\n            });*/\n\n        }else{\n            console.log(\"no timeline for this doc...\");\n        }\n        if(this.initDone) {\n            this.visTimelineService.setItems(this.name, this.items);\n        }\n    }\n\n    timelineInitialized() {\n        this.initDone = true;\n    }\n}\n\n    \n\n    \n        \n\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = ''\n    var COMPONENTS = [{'name': 'BsEdgeInfoCard', 'selector': 'sq-edge-info-card'},{'name': 'BsFacetHeatmapComponent', 'selector': 'sq-facet-heatmap'},{'name': 'BsFacetTimelineComponent', 'selector': 'sq-facet-timeline'},{'name': 'BsHeatmapComponent', 'selector': 'sq-heatmap'},{'name': 'BsNodeInfoCard', 'selector': 'sq-node-info-card'},{'name': 'BsResultsHeatmapView', 'selector': 'sq-results-heatmap-view'},{'name': 'BsTimelineComponent', 'selector': 'sq-timeline'},{'name': 'BsTooltipComponent', 'selector': 'sq-tooltip'},{'name': 'FacetNgxChart', 'selector': 'sq-facet-ngx-chart'},{'name': 'FusionChart', 'selector': 'sq-fusion-chart'},{'name': 'MapComponent', 'selector': 'sq-googlemaps'},{'name': 'MoneyCloudComponent', 'selector': 'sq-money-cloud'},{'name': 'MoneyTimelineComponent', 'selector': 'sq-money-timeline'},{'name': 'NetworkComponent', 'selector': 'sq-network'},{'name': 'NgxChart', 'selector': 'sq-ngx-chart'},{'name': 'ResultTimeline', 'selector': 'sq-result-timeline'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'ResultTimeline'};\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/StructuralEdgeType.html":{"url":"interfaces/StructuralEdgeType.html","title":"interface - StructuralEdgeType","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  StructuralEdgeType\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            network/providers/records-provider.ts\n        \n\n            \n                Description\n            \n            \n                An extension of the EdgeType interface to include properties specific to\nstructural edges (edge between a record and its metadata).\n\n            \n\n            \n                Extends\n            \n            \n                        EdgeType\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        count\n                                \n                                \n                                        display\n                                \n                                \n                                        field\n                                \n                                \n                                            Optional\n                                        parse\n                                \n                                \n                                        trigger\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        count\n                                    \n                                \n                                \n                                    \n                                        count:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    count limits the number of values displayed and allows for pagination. Use 0 for unlimited values \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        display\n                                    \n                                \n                                \n                                    \n                                        display:         StructuralDisplayType\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         StructuralDisplayType\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    showall: display all values from the field / paginate: display all value with pagination / existingnodes: only link to existing nodes / manual: only show if manual action (activated programmatically) \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        field\n                                    \n                                \n                                \n                                    \n                                        field:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Name of the field in the record \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        parse\n                                    \n                                \n                                \n                                    \n                                        parse:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    A function to parse metadata from a record node in a custom way \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        trigger\n                                    \n                                \n                                \n                                    \n                                        trigger:         StructuralTriggerType\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         StructuralTriggerType\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Defines when the edge should be displayed \n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { Utils } from '@sinequa/core/base';\nimport { Record } from '@sinequa/core/web-services';\nimport { Action } from '@sinequa/components/action';\nimport { Node, NetworkDataset, NodeType, EdgeType, NetworkContext } from '../network-models';\nimport { BaseProvider } from './base-provider';\n\n/**\n * Extension of the Node interface, to include the Record object\n * from which the node is generated\n */\nexport interface RecordNode extends Node {\n    record: Record;\n}\n\n\n/**\n * An extension of the EdgeType interface to include properties specific to\n * structural edges (edge between a record and its metadata).\n */\nexport interface StructuralEdgeType extends EdgeType {\n    /** Name of the field in the record */\n    field: string;\n    /** count limits the number of values displayed and allows for pagination. Use 0 for unlimited values */\n    count?: number;\n    /** Defines when the edge should be displayed */\n    trigger: StructuralTriggerType;\n    /** showall: display all values from the field / paginate: display all value with pagination / existingnodes: only link to existing nodes / manual: only show if manual action (activated programmatically) */\n    display: StructuralDisplayType;\n    /** A function to parse metadata from a record node in a custom way */\n    parse?: (value: any, record: Record, type: StructuralEdgeType) => CustomData;\n}\n\nexport type StructuralTriggerType = \"oninsert\" | \"onclick\" | \"manual\";\nexport type StructuralDisplayType = \"all\" | \"paginate\" | \"existingnodes\" | ((node: Node, recordNode: RecordNode, index: number) => boolean);\n\n/**\n * Data structure returned by the optional parse() function of a structural edge\n * type. Contains the parsed values of a property that can be turned into one or\n * multiple nodes and edges.\n */\nexport interface CustomData {\n    values: string[]; // eg. LARRY PAGE, GOOGLE\n    displays: string[]; // eg. Larry Page, Google\n    relations?: string[]; // eg. Works At\n    directed?: boolean[]; // eg. true\n    fieldValue?: string; // A value on which to filter the data\n}\n\n/**\n * Tests whether the given edge type is a structural edge type\n * @param et an edge type\n */\nexport function isStructuralEdgeType(et: EdgeType): et is StructuralEdgeType {\n    return !!(et as StructuralEdgeType).field;\n}\n\n\n/**\n * A network provider generating nodes from records.\n * Additionally, the provider can generate the \"structural edges\" of that\n * node. Structural edges are edges between a record and the fields of\n * that record (eg. the wikipedia page of Microsoft is a record that probably\n * contains the fields \"Microsoft\" and \"Bill Gates\").\n */\nexport class RecordsProvider extends BaseProvider {\n\n    constructor(\n        public name = \"Documents\",\n        protected nodeType: NodeType,\n        protected edgeTypes: StructuralEdgeType[],\n        protected records: Record[],\n        protected hideRecordNode = false\n    ){\n        super(name);\n    }\n\n    /**\n     * Clears the dataset and generates new record nodes\n     * @param records the list of records of this provider\n     */\n    protected updateDataset(records?: Record[]) {\n        this.dataset.clear();\n        if(!this.active || !records || records.length === 0) {\n            return; \n        }\n        this.addRecordNodes(records);\n    }\n    \n    // Record nodes\n\n    /**\n     * Generates the nodes for a list of records, including their structural\n     * edges, and adds them to the dataset.\n     * Returns the list of record nodes.\n     * @param records \n     */\n    protected addRecordNodes(records: Record[]): RecordNode[] {\n        return records.map(record => {\n            let node = this.dataset.getNode(this.getNodeId(this.nodeType, record.id));\n            if(!node) {\n                node = this.createNode(this.nodeType, record.id, record.title, !this.hideRecordNode, {record});\n                this.dataset.addNodes(node);\n                this.edgeTypes.forEach(type => {\n                    this.addStructuralEdges(node as RecordNode, type);\n                });\n            }\n            return node as RecordNode;\n        });\n    }\n\n    \n    // Structural edges\n\n    /**\n     * Generates the metadata nodes and structural edges from the given node,\n     * and merge them into the dataset.\n     * This function will automatically parse the metadata contained in the record,\n     * but it is possible to manage custom types of metadata by providing a\n     * custom parse() function via the structural edge type.\n     * @param node The record node\n     * @param type The edge type for which we want to create edges\n     */\n    protected addStructuralEdges(node: RecordNode, type: StructuralEdgeType) {\n\n        if(type.nodeTypes[0] !== this.nodeType){\n            throw new Error(`Inconsistent node type: '${type.nodeTypes[0].name}' instead of '${this.nodeType.name}'`);\n        }\n        \n        const recorddata = node.record[type.field];\n\n        if(recorddata === undefined){\n            return;\n        }\n\n        // Custom parse for mono or multi valued data\n        if(type.parse) {\n            if(Utils.isArray(recorddata)) {\n                recorddata.forEach((value,i) => { \n                    this.addCustomEdge(node, type, type.parse!(value, node.record, type));\n                });\n            }\n            else {\n                this.addCustomEdge(node, type, type.parse!(recorddata, node.record, type));\n            }\n        }\n        // Default handling for standard Sinequa Metadata\n        else {\n            const data = new NetworkDataset();\n            data.addNodes(node);\n    \n            // sourcestr\n            if(Utils.isString(recorddata)) {\n                this.addStructuralEdge(data, node, type, recorddata, recorddata, 0);\n            }\n            else if(Utils.isArray(recorddata)) {\n                recorddata.forEach((value,i) => {\n                    // sourcecsv\n                    if(Utils.isString(value)) {\n                        this.addStructuralEdge(data, node, type, value, value, i);\n                    }\n                    // entity\n                    else if(value[\"value\"]) {\n                        this.addStructuralEdge(data, node, type, value[\"value\"], value[\"display\"] || value[\"value\"], i);\n                    }\n                });\n            }\n    \n            this.dataset.merge(data);\n        }\n    }\n\n    /**\n     * Add a structural edge to a record node and adds that edge\n     * (and corresponding metadata node) to the given dataset.\n     * @param dataset The target dataset\n     * @param recordNode The record node\n     * @param type The edge type of the structural edge\n     * @param value The \"value\" property of the metadata node\n     * @param display The \"display\" property of the metadata node\n     * @param index The index of the metadata within the record, which may influence its visibility when using display=paginate\n     */\n    protected addStructuralEdge(dataset: NetworkDataset, recordNode: RecordNode, type: StructuralEdgeType, value: string, display: string, index: number) {\n        // Create the metadata node\n        const node = this.createNode(type.nodeTypes[1], value, display, true);\n        // Sets its visibility\n        node.visible = type.trigger === \"oninsert\" && this.isEdgeVisible(type, node, recordNode, index);\n        if(recordNode.id !== node.id){ // Special case of hybrid nodes, where the recordNode might contain itself...!\n            if(!dataset.hasNode(node.id)) { // Duplicate nodes/edges are possible when the same node type is present in multiple fields of a record (eg. \"email\" in msgfrom and msgto)\n                dataset.addNodes(node);\n            }\n            const edge = this.createEdge(type, recordNode, node, value, node.visible, {record: recordNode.record});\n            if(!dataset.hasEdge(edge.id)) {\n                dataset.addEdges(edge);\n            }\n        }\n    }\n\n    /**\n     * Add a custom structural edge to a record node and merges that edge\n     * (and corresponding metadata node) into the global dataset.\n     * @param recordNode The record node\n     * @param type The edge type of the structural edge\n     * @param data A CustomData object containing the properties of the metadata nodes we want to created\n     */\n    protected addCustomEdge(recordNode: RecordNode, type: StructuralEdgeType, data: CustomData) {\n        if(type.nodeTypes.length !== data.values.length + 1) {\n            throw new Error(`Wrong number of values for this custom edge ${type.nodeTypes.length}, ${data.values.length}`);\n        }\n        // Create a dataset only for this data, to avoid duplicate conflicts\n        const dataset = new NetworkDataset();\n        dataset.addNodes(recordNode);\n        // For each value contained in \"data\", create a node, and edges in between them (in addition to the edges between the record and each metadata node)\n        let lastNode: Node;\n        for(let i=0; i 0){\n                const relation = data.relations? data.relations[i-1] : undefined;\n                const directed = data.directed? data.directed[i-1] : false;\n                dataset.addEdges(this.createEdge(type, lastNode!, node, data.fieldValue, true, {}, 1, directed, relation));\n            }\n            lastNode = node;\n        }\n        this.dataset.merge(dataset);\n    }\n\n    /**\n     * Returns the visibility of a structural edge, depending on the type.display property\n     * @param type The structural edge type\n     * @param node The metadata node of this edge\n     * @param recordNode The record node of this edge\n     * @param index The index of the metadata in the list of metadata of the record\n     */\n    protected isEdgeVisible(type: StructuralEdgeType, node: Node, recordNode: RecordNode, index: number): boolean {\n        if(type.display === \"all\") {\n            return true;\n        }\n        else if(type.display === \"existingnodes\") {\n            return false;\n        }\n        else if(type.display === \"paginate\") {\n            return index  node.type === this.nodeType)\n            .forEach(node => {\n                dataset.getAdjacentEdges(node.id)\n                    .filter(edge => (edge.type as StructuralEdgeType).display === 'existingnodes')\n                    .forEach(edge => {\n                        const neighbor = dataset.getNode(node.id === edge.to ? edge.from : edge.to);\n                        if(!neighbor) {\n                            throw new Error(`Missing node from edge ${edge.id}`);\n                        }\n                        const neighborsneighbors = dataset.getAdjacentEdges(neighbor.id);\n                        if(neighborsneighbors.length > 1) {\n                            neighbor.visible = true;\n                            edge.visible = true;\n                        }\n                    });\n            });\n    }\n\n    /**\n     * Adjust visibility of nodes and edges, for structural edges with\n     * type.trigger = onclick. These nodes will only be shown once their\n     * record node is clicked on.\n     * @param node A node that was clicked\n     */\n    onNodeClicked(node?: Node) {\n        if(this.active && node && node.type === this.nodeType) { // Note: we cannot test the provider property, since this node might have been merged with one from a different provider. However the node type should be a unique instance\n            let update = false;\n            this.dataset.getAdjacentEdges(node.id)\n                .filter(edge => edge.type['trigger'] === 'onclick')\n                .forEach(edge => {\n                    const neighbor = this.dataset.getNode(node.id === edge.to ? edge.from : edge.to);\n                    if(!neighbor) {\n                        throw new Error(`Missing node from edge ${edge.id}`);\n                    }\n                    if(!neighbor.visible || !edge.visible) {\n                        edge.visible = true;\n                        neighbor.visible = true;\n                        update = true;\n                    }\n                    // TODO \"propagate\" visibility (ie. if 2 nodes are visible but an edge in between is invisible, make it visible)\n                });\n            if(update) {\n                this.provider.next(this.dataset);\n            }\n        }\n    }\n\n    getProviderActions(): Action[] {\n        return super.getProviderActions();\n    }\n\n    /**\n     * Creates actions for expanding and/or collapsing a record node that was clicked.\n     * expanding and collapsing will act on the visibility of the structural edges\n     * attached to this node.\n     * Both actions might be displayed at the same time, if the node is in an intermediate\n     * state.\n     * @param node \n     */\n    getNodeActions(node: Node): Action[] {\n        const actions = super.getNodeActions(node);\n        \n        // Actions for exanding / collapsing a record node\n        if(this.active && node.type === this.nodeType && this.edgeTypes.length > 0) {\n            let hasExpandedEdge = false;\n            let hasCollapsedEdge = false;\n            this.dataset.getAdjacentEdges(node.id).forEach(e => {\n                hasCollapsedEdge = hasCollapsedEdge || !e.visible;\n                hasExpandedEdge = hasExpandedEdge || e.visible;\n            });\n\n            if(hasCollapsedEdge) {\n                actions.push(new Action({\n                    icon: \"fas fa-expand-arrows-alt\",\n                    title: \"msg#network.actions.expandMeta\",\n                    action: () => {\n                        let update = false;\n                        this.dataset.getAdjacentEdges(node.id)\n                            .forEach(edge => {\n                                const neighbor = this.dataset.getNode(node.id === edge.to ? edge.from : edge.to);\n                                if(!neighbor) {\n                                    throw new Error(`Missing node from edge ${edge.id}`);\n                                }\n                                if(!neighbor.visible || !edge.visible) {\n                                    edge.visible = true;\n                                    neighbor.visible = true;\n                                    update = true;\n                                }\n                                // TODO \"propagate\" visibility (ie. if 2 nodes are visible but an edge in between is invisible, make it visible)\n                            });\n                        if(update) {\n                            this.provider.next(this.dataset);\n                        }\n                    }\n                }));\n            }\n            \n            if(hasExpandedEdge) {\n                actions.push(new Action({\n                    icon: \"fas fa-compress-arrows-alt\",\n                    title: \"msg#network.actions.collapseMeta\",\n                    action: () => {\n                        let update = false;\n                        this.dataset.getAdjacentEdges(node.id)\n                            .forEach(edge => {\n                                const neighbor = this.dataset.getNode(node.id === edge.to ? edge.from : edge.to);\n                                if(!neighbor) {\n                                    throw new Error(`Missing node from edge ${edge.id}`);\n                                }\n                                if((neighbor.visible || edge.visible) && !(neighbor as RecordNode).record) { // Prevent collapsing links between 2 record nodes (alternatively, we could count the number of neighbors of the neighbors, and close only the isoltated ones)\n                                    edge.visible = false;\n                                    neighbor.visible = false;\n                                    update = true;\n                                }\n                            });\n                        if(update) {\n                            this.provider.next(this.dataset);\n                        }\n                    }\n                }));\n            }\n        }\n        return actions;\n    }\n\n}\n    \n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/TimelineAggregation.html":{"url":"interfaces/TimelineAggregation.html","title":"interface - TimelineAggregation","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  TimelineAggregation\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            timeline/bootstrap/facet-timeline.component.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        aggregation\n                                \n                                \n                                            Optional\n                                        areaStyles\n                                \n                                \n                                            Optional\n                                        lineStyles\n                                \n                                \n                                            Optional\n                                        name\n                                \n                                \n                                        primary\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        aggregation\n                                    \n                                \n                                \n                                    \n                                        aggregation:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        areaStyles\n                                    \n                                \n                                \n                                    \n                                        areaStyles:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        lineStyles\n                                    \n                                \n                                \n                                    \n                                        lineStyles:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        name\n                                    \n                                \n                                \n                                    \n                                        name:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        primary\n                                    \n                                \n                                \n                                    \n                                        primary:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Component, Input, OnChanges, ChangeDetectorRef, SimpleChanges, Output, EventEmitter } from '@angular/core';\nimport { Observable, of, combineLatest, ReplaySubject } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { Results, AggregationItem, Aggregation, CCAggregation, Record, AuditWebService, AuditEventType } from '@sinequa/core/web-services';\nimport { AppService, Expr, ExprBuilder } from '@sinequa/core/app-utils';\nimport { Utils } from '@sinequa/core/base';\nimport { AbstractFacet, FacetService } from '@sinequa/components/facet';\nimport { SearchService } from '@sinequa/components/search';\nimport { SelectionService } from '@sinequa/components/selection';\nimport { Action } from '@sinequa/components/action';\nimport { TimelineSeries, TimelineDate, TimelineEvent } from './timeline.component';\nimport moment from 'moment';\nimport * as d3 from 'd3';\n\nexport interface TimelineAggregation {\n    name?: string;\n    aggregation: string;\n    primary: boolean;\n    areaStyles?: {[key: string]: any};\n    lineStyles?: {[key: string]: any};\n}\n\nexport interface TimelineCombinedAggregations {\n    aggregations: TimelineAggregation[];\n    maxNMonths: number[]; // Maximum number of months for which to use this aggregation\n    default: TimelineAggregation; // Aggregation to use by default \n    current?: TimelineAggregation; // (this field is overriden by the component when switching aggregation)\n}\n\nexport interface TimelineRecords {\n    field: string;\n    size?: number | ((record: Record, selected: boolean) => number);\n    styles?: {[key: string]: any} | ((record: Record, selected: boolean) => {[key: string]: any});\n    display?: (record: Record) => string;\n}\n\nexport interface TimelineEventAggregation {\n    aggregation: string;\n    getDate: ((item: AggregationItem) => Date);\n    getDisplay: ((item: AggregationItem) => string);\n    size?: number | ((item: AggregationItem) => number);\n    styles?: {[key: string]: any} | ((item: AggregationItem) => {[key: string]: any});\n}\n\nexport type TimelineData = TimelineSeries | TimelineAggregation | TimelineCombinedAggregations;\n\nexport type TimelineEventData = TimelineEvent[] | TimelineRecords | TimelineEventAggregation;\n\n@Component({\n    selector: 'sq-facet-timeline',\n    templateUrl: './facet-timeline.component.html',\n    styleUrls: ['./facet-timeline.component.scss']\n})\nexport class BsFacetTimelineComponent extends AbstractFacet implements OnChanges {\n    @Input() name = 'Timeline';\n    @Input() results: Results;\n    \n    // By default, we show the standard Timeline aggregation and the list of current records\n    @Input() timeseries: TimelineData[] = [{aggregation: 'Timeline', primary: true}];\n    @Input() events: TimelineEventData[] = [{field: 'modified'}];\n\n    // Initial scale (prior to any zoom)\n    @Input() minDate?: Date;\n    @Input() maxDate?: Date;\n    // Date range to filter aggregations (ignored when combined aggregations are recomputed based on zoomed range)\n    @Input() minAggregationDate?: Date;\n    @Input() maxAggregationDate?: Date;\n    \n    @Input() zoomable = true;\n    @Input() minZoomDays = 1; // Max 1 day scale\n    @Input() maxZoomDays = 365 * 100; // Max 100 years scale\n\n    @Input() width = 600;\n    @Input() height = 200;\n    @Input() margin = {top: 15, bottom: 30, left: 40, right: 15};\n\n    @Input() curveType = \"curveMonotoneX\";\n\n    @Input() showTooltip = true;\n    @Input() theme: \"light\" | \"dark\" = \"light\";\n\n    @Output() eventClicked = new EventEmitter();\n\n    // List of observables (one per timeseries / event type)\n    timeseries$: ReplaySubject[];\n    events$: ReplaySubject[];\n\n    // Combination (combineLastest) of the timeline observables\n    mergedTimeseries$: Observable;\n    mergedEvents$: Observable;\n\n    // Current timeline selection\n    selection?: [Date, Date];\n\n    // Current range (undefined if no zoom / auto-scaling)\n    currentRange?: [Date, Date];\n\n    // Formating method for search queries\n    formatDayRequest = d3.timeFormat(\"%Y-%m-%d\");\n\n    // Actions\n    clearFilters: Action;\n\n    constructor(\n        public facetService: FacetService,\n        public searchService: SearchService,\n        public appService: AppService,\n        public selectionService: SelectionService,\n        public exprBuilder: ExprBuilder,\n        public cdRef: ChangeDetectorRef,\n        public audit: AuditWebService\n    ){\n        super();\n\n        // Update the events when the selection of records changes\n        this.selectionService.events.subscribe(event => {\n            const i = this.events.findIndex(e => (e as TimelineRecords).field);\n            if(i !== -1) {\n                this.events$[i].next(this.getRecordsAsEvents(this.events[i] as TimelineRecords));\n            }\n        });\n        \n        // Clear the current filters\n        this.clearFilters = new Action({\n            icon: \"far fa-minus-square\",\n            title: \"msg#facet.clearSelects\",\n            action: () => {\n                this.selection = undefined;\n                this.searchService.query.removeSelect(this.name);\n                this.searchService.search();\n            }\n        });\n\n    }\n\n    getMinDate(): Date | undefined {\n        return this.currentRange? this.currentRange[0] : this.minDate;\n    }\n\n    getMaxDate(): Date | undefined {\n        return this.currentRange? this.currentRange[1] : this.maxDate;\n    }\n\n    get actions(): Action[] {\n        const actions: Action[] = [];\n        if(this.facetService.hasFiltered(this.name)){\n            actions.push(this.clearFilters);\n        }\n        return actions;\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n\n        // Retrieve the current active selection for this timeline (if any)\n        const select = this.searchService.query.findSelect(this.name);\n\n        // Update the selection if it is not already set (which is the case on a page refresh)\n        if(select && !this.selection) {\n            let parsedexpr = this.appService.parseExpr(select.expression) as Expr;\n            if(!Utils.isString(parsedexpr)){\n                while(!parsedexpr.isLeaf){ // The select might over multiple fields (modified between [...] AND created between [...])\n                    parsedexpr = parsedexpr.operands[0];\n                }\n                if(parsedexpr.values){\n                    this.selection = [new Date(parsedexpr.values[0]), new Date(parsedexpr.values[1])];\n                }\n            }\n        }\n        // If no active selection we remove the selection from the timeline, along with the current zoomed range\n        else if(!select) {\n            this.selection = undefined; // If no select, it was possibly removed by the user, we need to update our selection\n            this.currentRange = undefined; // current range is set by zoom events, we want to reset it only if there are no select (ie. no user interaction)\n        }\n\n        // Initialize timeseries\n        if(!this.timeseries$ || changes[\"timeseries\"]) {\n            // Create one observable per timeline\n            this.timeseries$ = this.timeseries.map(_ => new ReplaySubject(1));\n            this.mergedTimeseries$ = combineLatest(this.timeseries$);\n        }\n\n        this.updateTimeseries();\n\n        // Initialize events\n        if(!this.events$ || changes[\"events\"]) {\n            this.events$ = this.events.map(_ => new ReplaySubject(1));\n            this.mergedEvents$ = combineLatest(this.events$).pipe(\n                map(events => ([] as TimelineEvent[]).concat(...events))\n            );\n        }\n\n        this.updateEvents();\n        \n    }\n\n    /**\n     * For each timeseries configuration given as an input,\n     * update the data via the list of observables (timelines$)\n     */\n    updateTimeseries() {\n        this.timeseries.forEach((config, i) => {\n\n            const subject = this.timeseries$[i];\n\n            if((config as TimelineSeries).dates !== undefined) {\n                subject.next(config as TimelineSeries);\n            }\n\n            else {\n                let agg = config as TimelineAggregation;\n                if(agg.aggregation === undefined){\n                    \n                    config = config as TimelineCombinedAggregations;\n                    // We want to set the default scale if it hasn't been set before\n                    // or if no zoom/selection has been made (so current scale may not be adapted to the new results)\n                    if(!this.currentRange || !config.current){\n                        config.current = config.default;\n                    }\n\n                    agg = config.current;\n                }\n                \n                const range: [Date, Date] | undefined = !!this.minAggregationDate && !!this.maxAggregationDate ?\n                    [this.minAggregationDate, this.maxAggregationDate] : undefined;\n\n                this.getTimeseries(agg, range).subscribe({\n                    next: d => subject.next(d),\n                    error: err => subject.error(err)\n                });\n            }\n\n        });\n    }\n\n    /**\n     * For each event configuration given as an input, \n     * update the data via the list of observables (events$)\n     */\n    updateEvents() {\n        this.events.forEach((config, i) => {\n            const subject = this.events$[i];\n\n            if((config as TimelineRecords).field) {\n                subject.next(this.getRecordsAsEvents(config as TimelineRecords));\n            }\n            else if((config as TimelineEventAggregation).aggregation){\n                this.getEventAggregation(config as TimelineEventAggregation).subscribe({\n                    next: t => subject.next(t),\n                    error: err => subject.error(err)\n                });\n            }\n            else if(Array.isArray(config)){\n                subject.next(config as TimelineEvent[]);\n            }\n        });\n    }\n\n    /**\n     * Get a timeseries aggregation via the getAggregation method.\n     * @param config \n     * @param subject \n     * @param range \n     */\n    getTimeseries(config: TimelineAggregation, range?: [Date, Date]): Observable {\n        return this.getAggregation(config.aggregation, range).pipe(\n            map(d => BsFacetTimelineComponent.createTimeseries(config, d.aggregation, d.ccaggregation, range))\n        );\n    }\n\n    /**\n     * Get an aggregation of events via the getAggregation method\n     * @param config \n     * @param subject \n     */\n    getEventAggregation(config: TimelineEventAggregation): Observable {\n        return this.getAggregation(config.aggregation).pipe(\n            map(d => BsFacetTimelineComponent.createAggregationEvents(config, d.aggregation, d.ccaggregation))\n        );\n    }\n\n    /**\n     * Returns the list of records from the results as a list of TimelineEvent when they have a\n     * modified date. The size and styles of the events are determined from the given configuration (TimelineRecords)\n     * @param config \n     */\n    getRecordsAsEvents(config: TimelineRecords): TimelineEvent[] {\n        if(this.results) {\n            return this.results.records\n                .filter(r => !!Utils.toDate(r[config.field]))\n                .map(r => {\n                    return {\n                        id: r.id,\n                        date: Utils.toDate(r[config.field])!,\n                        size: !config.size? 6 : typeof config.size === 'function'? config.size(r, r.$selected) : config.size,\n                        styles: !config.styles? BsFacetTimelineComponent.defaultRecordStyle(r.$selected) :\n                                typeof config.styles === 'function'? config.styles(r, r.$selected) : \n                                config.styles,\n                        display: config.display? config.display(r) : r.title,\n                        // Custom property for click action\n                        record: r\n                    }\n                });\n        }\n        return [];\n    }\n\n\n    /**\n     * returns an aggregation and its configuration either directly from the facet service of\n     * by fetching it from the server.\n     * @param aggregationName \n     * @param range \n     */\n    getAggregation(aggregationName: string, range?: [Date, Date]): Observable {\n        \n        const ccaggregation = this.appService.getCCAggregation(aggregationName);\n        const aggregation = this.facetService.getAggregation(aggregationName, this.results);\n        \n        if(aggregation && ccaggregation) {\n            return of({aggregation: aggregation, ccaggregation: ccaggregation});\n        }\n\n        else if(ccaggregation) {\n            return this.fetchAggregation(aggregationName, ccaggregation, range).pipe(\n                map(agg => {return {aggregation: agg, ccaggregation: ccaggregation} })\n            );\n        }\n\n        else {\n            throw new Error(`Aggregation ${aggregationName} does not exist in the Query web service`);\n        }\n    }\n\n    /**\n     * Get an aggregation from the server, filtering by range if provided\n     * @param aggregation \n     * @param ccaggregation \n     * @param range \n     */\n    fetchAggregation(aggregation: string, ccaggregation: CCAggregation, range?: [Date, Date]): Observable {\n        const query = Utils.copy(this.searchService.query);\n        query.action = \"aggregate\";\n        query.aggregations = [aggregation];\n\n        if(range){\n            query.addSelect(`${ccaggregation.column}:[${this.formatDayRequest(range[0])}..${this.formatDayRequest(range[1])}]`);\n        }\n\n        return this.searchService.getResults(query, undefined, {searchInactive: true}).pipe(\n            map(results => results.aggregations[0])\n        );\n    }\n\n    /**\n     * Given a combined aggregation configuration and a range, this method searches for the most \n     * adapted aggregation scale (years, months, weeks or days) and updates the data if necessary.\n     * @param config \n     * @param range \n     * @param iTimeseries \n     */\n    updateCombinedAggregation(config: TimelineCombinedAggregations, range: [Date, Date], timeseries$: ReplaySubject) {\n        const nmonths = d3.timeMonth.count(range[0], range[1]);\n\n        if(!config.maxNMonths || config.maxNMonths.length !== config.aggregations.length) {\n            console.error(config);\n            throw new Error(\"maxNMonths and aggregations must have the same number of items\");\n        }\n\n        // Find the aggregation with min maxNMonths with maxNMonths >= nmonths\n        let jMin;\n        config.maxNMonths.forEach((maxNMonths, j) => {\n            if(maxNMonths >= nmonths && (jMin === undefined || maxNMonths  this.currentRange[1])) {\n\n            config.current = bestAggregation;\n            this.getTimeseries(bestAggregation, range).subscribe({\n                next: d => timeseries$.next(d),\n                error: err => timeseries$.error(err)\n            });\n        }\n\n    }\n\n\n    // Interaction callbacks\n\n    /**\n     * On selection is triggered when the user selects a range of dates on the timeline.\n     * This has the effect of updating the query.select (either remove it or add/replace it)\n     * and it updates the search.\n     * @param selection \n     */\n    onSelectionChange(selection: [Date, Date] | undefined) {\n        this.selection = selection;\n        if(selection) {\n            const from = this.formatDayRequest(selection[0]);\n            const to = this.formatDayRequest(selection[1]);\n\n            const exprs: string[] = [];\n            this.searchService.query.removeSelect(this.name);\n\n            this.timeseries.forEach((config) => {\n                    \n                if((config as TimelineAggregation).aggregation !== undefined \n                || (config as TimelineCombinedAggregations).default !== undefined) {\n\n                    const aggregation = (config as TimelineAggregation).aggregation || (config as TimelineCombinedAggregations).default.aggregation;\n                    const ccaggregation = this.appService.getCCAggregation(aggregation);\n                    if(ccaggregation) {\n                        exprs.push(this.exprBuilder.makeRangeExpr(ccaggregation.column, from, to));\n                    }\n                }\n\n            });\n\n            if(exprs.length > 0) {\n                const expr = this.exprBuilder.concatOrExpr(exprs);\n                this.searchService.query.addSelect(expr, this.name);\n                this.searchService.search(undefined, {type:AuditEventType.Search_Timeline_Usage, detail: { from, to }});\n            }            \n        }\n\n        else if(this.searchService.query.findSelect(this.name)) {\n            this.searchService.query.removeSelect(this.name);\n            this.searchService.search();\n        }\n    }\n\n    /**\n     * On range is triggered when the user zooms in our out on the timeline,\n     * which triggers a dynamic update of the combined aggregation timelines.\n     * @param range \n     */\n    onRangeChange(range: [Date, Date]) {\n\n        this.timeseries.forEach((config, i) => {\n            if((config as TimelineCombinedAggregations).aggregations !== undefined) {\n                this.updateCombinedAggregation(config as TimelineCombinedAggregations, range, this.timeseries$[i]);\n            }\n        });\n\n        // Note: updateCombinedAggregation() compares currentRange and range\n        // So this update must be kept after the forEach\n        this.currentRange = range;        \n    }\n\n    /**\n     * When an event is clicked, the event is propagated to the parent, and the tooltip is closed\n     * @param event \n     * @param closeTooltip \n     */\n    onEventClicked(event: TimelineEvent, closeTooltip: () => void) {\n        this.eventClicked.next(event);\n        closeTooltip();\n        return false;\n    }\n\n\n    // Static utility methods\n    \n    \n    /**\n     * Create a time series object from its config, data (aggregation) and configuration (ccaggregation)\n     * @param config \n     * @param aggregation \n     * @param ccaggregation \n     */\n    static createTimeseries(config: TimelineAggregation, aggregation: Aggregation, ccaggregation: CCAggregation, range?: [Date, Date]): TimelineSeries {\n        return {\n            name: config.name || aggregation.name,\n            primary: config.primary,\n            dates: this.createDatapoints(aggregation.items, ccaggregation?.mask, range),\n            lineStyles: config.lineStyles,\n            areaStyles: config.areaStyles\n        }\n    }\n\n    /**\n     * Create a list of events from its config, data (aggregation) and configuration (ccaggregation)\n     * @param config \n     * @param aggregation \n     * @param ccaggregation \n     */\n    static createAggregationEvents(config: TimelineEventAggregation, aggregation: Aggregation, ccaggregation: CCAggregation): TimelineEvent[] {\n        return !aggregation.items? [] : aggregation.items.map(item => {\n            return {\n                id: config.getDate(item).toUTCString()+\"|\"+config.getDisplay(item),\n                date: config.getDate(item),\n                size: !config.size? 6 : typeof config.size === 'function'? config.size(item) : config.size,\n                styles: !config.styles? undefined :\n                        typeof config.styles === 'function'? config.styles(item) : \n                        config.styles,                \n                display: config.getDisplay(item),\n\n                // Custom params for click action\n                item: item,\n                aggregation: aggregation,\n                ccaggregation: ccaggregation\n            }\n        });\n    }\n\n    /**\n     * This methods transforms a raw list of aggregation items into\n     * a time series completed with zeros, following the below scheme:\n     * Aggregation:  [    # #         # # #   #     # #       # # #    ]\n     * Series:       [  0 # # 0     0 # # # 0 # 0 0 # # 0   0 # # # 0  ]\n     * @param items \n     * @param resolution \n     */\n    static createDatapoints(items: AggregationItem[] | undefined, resolution: string, range?: [Date, Date]): TimelineDate[] {\n\n        if(!items) {\n            return [];\n        }\n\n        const timeInterval = this.getD3TimeInterval(resolution);\n        \n        const series: TimelineDate[] = [];\n\n        const _items = items\n            .map(item => {\n                if(!!item.value && !(item.value instanceof Date)){\n                    const val = item.value.toString();\n                    item.value = moment(val.length  undefined; // So it gets filtered out\n                    }\n                }\n                return item;\n            })\n            .filter(item => !!item.value && (!range || ((item.value as Date) >= range[0] && (item.value as Date)  {\n            const date = item.value as Date;\n            \n            if(i === 0 || timeInterval.offset(series[series.length-1].date, 1)  item.date = this.shiftDate(item.date, resolution));\n\n        return series;\n    }\n\n    \n    /**\n     * Shift the date to the middle of their time bracket (2020 = middle of the year, April = middle of the month, etc.)\n     * @param date \n     * @param resolution \n     */\n    static shiftDate(date: Date, resolution: string): Date {\n        switch(resolution){\n            case \"YYYY-MM-DD\": return d3.timeHour.offset(date, 12);\n            case \"YYYY-WW\": return d3.timeHour.offset(date, 84); // 3*24 + 12\n            case \"YYYY-MM\": return d3.timeDay.offset(date, 15);\n            case \"YYYY\": return d3.timeMonth.offset(date, 6);\n        }\n        return date;\n    }\n\n\n    static getD3TimeInterval(resolution: string): d3.CountableTimeInterval {\n        switch(resolution){\n            case \"YYYY-MM-DD\": return d3.timeDay;\n            case \"YYYY-WW\": return d3.timeWeek;\n            case \"YYYY-MM\": return d3.timeMonth;\n            case \"YYYY\": return d3.timeYear;\n        }\n        return d3.timeDay;\n    }\n\n    static defaultRecordStyle(selected: boolean): {[key: string]: any} {\n        return {\n            'fill': selected? 'red' : 'green',\n            'stroke': selected? 'red' : undefined,\n            'stroke-width': selected? '2px' : undefined\n        };\n    }\n}\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/TimelineCombinedAggregations.html":{"url":"interfaces/TimelineCombinedAggregations.html","title":"interface - TimelineCombinedAggregations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  TimelineCombinedAggregations\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            timeline/bootstrap/facet-timeline.component.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        aggregations\n                                \n                                \n                                            Optional\n                                        current\n                                \n                                \n                                        default\n                                \n                                \n                                        maxNMonths\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        aggregations\n                                    \n                                \n                                \n                                    \n                                        aggregations:         TimelineAggregation[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         TimelineAggregation[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        current\n                                    \n                                \n                                \n                                    \n                                        current:         TimelineAggregation\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         TimelineAggregation\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        default\n                                    \n                                \n                                \n                                    \n                                        default:         TimelineAggregation\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         TimelineAggregation\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        maxNMonths\n                                    \n                                \n                                \n                                    \n                                        maxNMonths:     number[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     number[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Component, Input, OnChanges, ChangeDetectorRef, SimpleChanges, Output, EventEmitter } from '@angular/core';\nimport { Observable, of, combineLatest, ReplaySubject } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { Results, AggregationItem, Aggregation, CCAggregation, Record, AuditWebService, AuditEventType } from '@sinequa/core/web-services';\nimport { AppService, Expr, ExprBuilder } from '@sinequa/core/app-utils';\nimport { Utils } from '@sinequa/core/base';\nimport { AbstractFacet, FacetService } from '@sinequa/components/facet';\nimport { SearchService } from '@sinequa/components/search';\nimport { SelectionService } from '@sinequa/components/selection';\nimport { Action } from '@sinequa/components/action';\nimport { TimelineSeries, TimelineDate, TimelineEvent } from './timeline.component';\nimport moment from 'moment';\nimport * as d3 from 'd3';\n\nexport interface TimelineAggregation {\n    name?: string;\n    aggregation: string;\n    primary: boolean;\n    areaStyles?: {[key: string]: any};\n    lineStyles?: {[key: string]: any};\n}\n\nexport interface TimelineCombinedAggregations {\n    aggregations: TimelineAggregation[];\n    maxNMonths: number[]; // Maximum number of months for which to use this aggregation\n    default: TimelineAggregation; // Aggregation to use by default \n    current?: TimelineAggregation; // (this field is overriden by the component when switching aggregation)\n}\n\nexport interface TimelineRecords {\n    field: string;\n    size?: number | ((record: Record, selected: boolean) => number);\n    styles?: {[key: string]: any} | ((record: Record, selected: boolean) => {[key: string]: any});\n    display?: (record: Record) => string;\n}\n\nexport interface TimelineEventAggregation {\n    aggregation: string;\n    getDate: ((item: AggregationItem) => Date);\n    getDisplay: ((item: AggregationItem) => string);\n    size?: number | ((item: AggregationItem) => number);\n    styles?: {[key: string]: any} | ((item: AggregationItem) => {[key: string]: any});\n}\n\nexport type TimelineData = TimelineSeries | TimelineAggregation | TimelineCombinedAggregations;\n\nexport type TimelineEventData = TimelineEvent[] | TimelineRecords | TimelineEventAggregation;\n\n@Component({\n    selector: 'sq-facet-timeline',\n    templateUrl: './facet-timeline.component.html',\n    styleUrls: ['./facet-timeline.component.scss']\n})\nexport class BsFacetTimelineComponent extends AbstractFacet implements OnChanges {\n    @Input() name = 'Timeline';\n    @Input() results: Results;\n    \n    // By default, we show the standard Timeline aggregation and the list of current records\n    @Input() timeseries: TimelineData[] = [{aggregation: 'Timeline', primary: true}];\n    @Input() events: TimelineEventData[] = [{field: 'modified'}];\n\n    // Initial scale (prior to any zoom)\n    @Input() minDate?: Date;\n    @Input() maxDate?: Date;\n    // Date range to filter aggregations (ignored when combined aggregations are recomputed based on zoomed range)\n    @Input() minAggregationDate?: Date;\n    @Input() maxAggregationDate?: Date;\n    \n    @Input() zoomable = true;\n    @Input() minZoomDays = 1; // Max 1 day scale\n    @Input() maxZoomDays = 365 * 100; // Max 100 years scale\n\n    @Input() width = 600;\n    @Input() height = 200;\n    @Input() margin = {top: 15, bottom: 30, left: 40, right: 15};\n\n    @Input() curveType = \"curveMonotoneX\";\n\n    @Input() showTooltip = true;\n    @Input() theme: \"light\" | \"dark\" = \"light\";\n\n    @Output() eventClicked = new EventEmitter();\n\n    // List of observables (one per timeseries / event type)\n    timeseries$: ReplaySubject[];\n    events$: ReplaySubject[];\n\n    // Combination (combineLastest) of the timeline observables\n    mergedTimeseries$: Observable;\n    mergedEvents$: Observable;\n\n    // Current timeline selection\n    selection?: [Date, Date];\n\n    // Current range (undefined if no zoom / auto-scaling)\n    currentRange?: [Date, Date];\n\n    // Formating method for search queries\n    formatDayRequest = d3.timeFormat(\"%Y-%m-%d\");\n\n    // Actions\n    clearFilters: Action;\n\n    constructor(\n        public facetService: FacetService,\n        public searchService: SearchService,\n        public appService: AppService,\n        public selectionService: SelectionService,\n        public exprBuilder: ExprBuilder,\n        public cdRef: ChangeDetectorRef,\n        public audit: AuditWebService\n    ){\n        super();\n\n        // Update the events when the selection of records changes\n        this.selectionService.events.subscribe(event => {\n            const i = this.events.findIndex(e => (e as TimelineRecords).field);\n            if(i !== -1) {\n                this.events$[i].next(this.getRecordsAsEvents(this.events[i] as TimelineRecords));\n            }\n        });\n        \n        // Clear the current filters\n        this.clearFilters = new Action({\n            icon: \"far fa-minus-square\",\n            title: \"msg#facet.clearSelects\",\n            action: () => {\n                this.selection = undefined;\n                this.searchService.query.removeSelect(this.name);\n                this.searchService.search();\n            }\n        });\n\n    }\n\n    getMinDate(): Date | undefined {\n        return this.currentRange? this.currentRange[0] : this.minDate;\n    }\n\n    getMaxDate(): Date | undefined {\n        return this.currentRange? this.currentRange[1] : this.maxDate;\n    }\n\n    get actions(): Action[] {\n        const actions: Action[] = [];\n        if(this.facetService.hasFiltered(this.name)){\n            actions.push(this.clearFilters);\n        }\n        return actions;\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n\n        // Retrieve the current active selection for this timeline (if any)\n        const select = this.searchService.query.findSelect(this.name);\n\n        // Update the selection if it is not already set (which is the case on a page refresh)\n        if(select && !this.selection) {\n            let parsedexpr = this.appService.parseExpr(select.expression) as Expr;\n            if(!Utils.isString(parsedexpr)){\n                while(!parsedexpr.isLeaf){ // The select might over multiple fields (modified between [...] AND created between [...])\n                    parsedexpr = parsedexpr.operands[0];\n                }\n                if(parsedexpr.values){\n                    this.selection = [new Date(parsedexpr.values[0]), new Date(parsedexpr.values[1])];\n                }\n            }\n        }\n        // If no active selection we remove the selection from the timeline, along with the current zoomed range\n        else if(!select) {\n            this.selection = undefined; // If no select, it was possibly removed by the user, we need to update our selection\n            this.currentRange = undefined; // current range is set by zoom events, we want to reset it only if there are no select (ie. no user interaction)\n        }\n\n        // Initialize timeseries\n        if(!this.timeseries$ || changes[\"timeseries\"]) {\n            // Create one observable per timeline\n            this.timeseries$ = this.timeseries.map(_ => new ReplaySubject(1));\n            this.mergedTimeseries$ = combineLatest(this.timeseries$);\n        }\n\n        this.updateTimeseries();\n\n        // Initialize events\n        if(!this.events$ || changes[\"events\"]) {\n            this.events$ = this.events.map(_ => new ReplaySubject(1));\n            this.mergedEvents$ = combineLatest(this.events$).pipe(\n                map(events => ([] as TimelineEvent[]).concat(...events))\n            );\n        }\n\n        this.updateEvents();\n        \n    }\n\n    /**\n     * For each timeseries configuration given as an input,\n     * update the data via the list of observables (timelines$)\n     */\n    updateTimeseries() {\n        this.timeseries.forEach((config, i) => {\n\n            const subject = this.timeseries$[i];\n\n            if((config as TimelineSeries).dates !== undefined) {\n                subject.next(config as TimelineSeries);\n            }\n\n            else {\n                let agg = config as TimelineAggregation;\n                if(agg.aggregation === undefined){\n                    \n                    config = config as TimelineCombinedAggregations;\n                    // We want to set the default scale if it hasn't been set before\n                    // or if no zoom/selection has been made (so current scale may not be adapted to the new results)\n                    if(!this.currentRange || !config.current){\n                        config.current = config.default;\n                    }\n\n                    agg = config.current;\n                }\n                \n                const range: [Date, Date] | undefined = !!this.minAggregationDate && !!this.maxAggregationDate ?\n                    [this.minAggregationDate, this.maxAggregationDate] : undefined;\n\n                this.getTimeseries(agg, range).subscribe({\n                    next: d => subject.next(d),\n                    error: err => subject.error(err)\n                });\n            }\n\n        });\n    }\n\n    /**\n     * For each event configuration given as an input, \n     * update the data via the list of observables (events$)\n     */\n    updateEvents() {\n        this.events.forEach((config, i) => {\n            const subject = this.events$[i];\n\n            if((config as TimelineRecords).field) {\n                subject.next(this.getRecordsAsEvents(config as TimelineRecords));\n            }\n            else if((config as TimelineEventAggregation).aggregation){\n                this.getEventAggregation(config as TimelineEventAggregation).subscribe({\n                    next: t => subject.next(t),\n                    error: err => subject.error(err)\n                });\n            }\n            else if(Array.isArray(config)){\n                subject.next(config as TimelineEvent[]);\n            }\n        });\n    }\n\n    /**\n     * Get a timeseries aggregation via the getAggregation method.\n     * @param config \n     * @param subject \n     * @param range \n     */\n    getTimeseries(config: TimelineAggregation, range?: [Date, Date]): Observable {\n        return this.getAggregation(config.aggregation, range).pipe(\n            map(d => BsFacetTimelineComponent.createTimeseries(config, d.aggregation, d.ccaggregation, range))\n        );\n    }\n\n    /**\n     * Get an aggregation of events via the getAggregation method\n     * @param config \n     * @param subject \n     */\n    getEventAggregation(config: TimelineEventAggregation): Observable {\n        return this.getAggregation(config.aggregation).pipe(\n            map(d => BsFacetTimelineComponent.createAggregationEvents(config, d.aggregation, d.ccaggregation))\n        );\n    }\n\n    /**\n     * Returns the list of records from the results as a list of TimelineEvent when they have a\n     * modified date. The size and styles of the events are determined from the given configuration (TimelineRecords)\n     * @param config \n     */\n    getRecordsAsEvents(config: TimelineRecords): TimelineEvent[] {\n        if(this.results) {\n            return this.results.records\n                .filter(r => !!Utils.toDate(r[config.field]))\n                .map(r => {\n                    return {\n                        id: r.id,\n                        date: Utils.toDate(r[config.field])!,\n                        size: !config.size? 6 : typeof config.size === 'function'? config.size(r, r.$selected) : config.size,\n                        styles: !config.styles? BsFacetTimelineComponent.defaultRecordStyle(r.$selected) :\n                                typeof config.styles === 'function'? config.styles(r, r.$selected) : \n                                config.styles,\n                        display: config.display? config.display(r) : r.title,\n                        // Custom property for click action\n                        record: r\n                    }\n                });\n        }\n        return [];\n    }\n\n\n    /**\n     * returns an aggregation and its configuration either directly from the facet service of\n     * by fetching it from the server.\n     * @param aggregationName \n     * @param range \n     */\n    getAggregation(aggregationName: string, range?: [Date, Date]): Observable {\n        \n        const ccaggregation = this.appService.getCCAggregation(aggregationName);\n        const aggregation = this.facetService.getAggregation(aggregationName, this.results);\n        \n        if(aggregation && ccaggregation) {\n            return of({aggregation: aggregation, ccaggregation: ccaggregation});\n        }\n\n        else if(ccaggregation) {\n            return this.fetchAggregation(aggregationName, ccaggregation, range).pipe(\n                map(agg => {return {aggregation: agg, ccaggregation: ccaggregation} })\n            );\n        }\n\n        else {\n            throw new Error(`Aggregation ${aggregationName} does not exist in the Query web service`);\n        }\n    }\n\n    /**\n     * Get an aggregation from the server, filtering by range if provided\n     * @param aggregation \n     * @param ccaggregation \n     * @param range \n     */\n    fetchAggregation(aggregation: string, ccaggregation: CCAggregation, range?: [Date, Date]): Observable {\n        const query = Utils.copy(this.searchService.query);\n        query.action = \"aggregate\";\n        query.aggregations = [aggregation];\n\n        if(range){\n            query.addSelect(`${ccaggregation.column}:[${this.formatDayRequest(range[0])}..${this.formatDayRequest(range[1])}]`);\n        }\n\n        return this.searchService.getResults(query, undefined, {searchInactive: true}).pipe(\n            map(results => results.aggregations[0])\n        );\n    }\n\n    /**\n     * Given a combined aggregation configuration and a range, this method searches for the most \n     * adapted aggregation scale (years, months, weeks or days) and updates the data if necessary.\n     * @param config \n     * @param range \n     * @param iTimeseries \n     */\n    updateCombinedAggregation(config: TimelineCombinedAggregations, range: [Date, Date], timeseries$: ReplaySubject) {\n        const nmonths = d3.timeMonth.count(range[0], range[1]);\n\n        if(!config.maxNMonths || config.maxNMonths.length !== config.aggregations.length) {\n            console.error(config);\n            throw new Error(\"maxNMonths and aggregations must have the same number of items\");\n        }\n\n        // Find the aggregation with min maxNMonths with maxNMonths >= nmonths\n        let jMin;\n        config.maxNMonths.forEach((maxNMonths, j) => {\n            if(maxNMonths >= nmonths && (jMin === undefined || maxNMonths  this.currentRange[1])) {\n\n            config.current = bestAggregation;\n            this.getTimeseries(bestAggregation, range).subscribe({\n                next: d => timeseries$.next(d),\n                error: err => timeseries$.error(err)\n            });\n        }\n\n    }\n\n\n    // Interaction callbacks\n\n    /**\n     * On selection is triggered when the user selects a range of dates on the timeline.\n     * This has the effect of updating the query.select (either remove it or add/replace it)\n     * and it updates the search.\n     * @param selection \n     */\n    onSelectionChange(selection: [Date, Date] | undefined) {\n        this.selection = selection;\n        if(selection) {\n            const from = this.formatDayRequest(selection[0]);\n            const to = this.formatDayRequest(selection[1]);\n\n            const exprs: string[] = [];\n            this.searchService.query.removeSelect(this.name);\n\n            this.timeseries.forEach((config) => {\n                    \n                if((config as TimelineAggregation).aggregation !== undefined \n                || (config as TimelineCombinedAggregations).default !== undefined) {\n\n                    const aggregation = (config as TimelineAggregation).aggregation || (config as TimelineCombinedAggregations).default.aggregation;\n                    const ccaggregation = this.appService.getCCAggregation(aggregation);\n                    if(ccaggregation) {\n                        exprs.push(this.exprBuilder.makeRangeExpr(ccaggregation.column, from, to));\n                    }\n                }\n\n            });\n\n            if(exprs.length > 0) {\n                const expr = this.exprBuilder.concatOrExpr(exprs);\n                this.searchService.query.addSelect(expr, this.name);\n                this.searchService.search(undefined, {type:AuditEventType.Search_Timeline_Usage, detail: { from, to }});\n            }            \n        }\n\n        else if(this.searchService.query.findSelect(this.name)) {\n            this.searchService.query.removeSelect(this.name);\n            this.searchService.search();\n        }\n    }\n\n    /**\n     * On range is triggered when the user zooms in our out on the timeline,\n     * which triggers a dynamic update of the combined aggregation timelines.\n     * @param range \n     */\n    onRangeChange(range: [Date, Date]) {\n\n        this.timeseries.forEach((config, i) => {\n            if((config as TimelineCombinedAggregations).aggregations !== undefined) {\n                this.updateCombinedAggregation(config as TimelineCombinedAggregations, range, this.timeseries$[i]);\n            }\n        });\n\n        // Note: updateCombinedAggregation() compares currentRange and range\n        // So this update must be kept after the forEach\n        this.currentRange = range;        \n    }\n\n    /**\n     * When an event is clicked, the event is propagated to the parent, and the tooltip is closed\n     * @param event \n     * @param closeTooltip \n     */\n    onEventClicked(event: TimelineEvent, closeTooltip: () => void) {\n        this.eventClicked.next(event);\n        closeTooltip();\n        return false;\n    }\n\n\n    // Static utility methods\n    \n    \n    /**\n     * Create a time series object from its config, data (aggregation) and configuration (ccaggregation)\n     * @param config \n     * @param aggregation \n     * @param ccaggregation \n     */\n    static createTimeseries(config: TimelineAggregation, aggregation: Aggregation, ccaggregation: CCAggregation, range?: [Date, Date]): TimelineSeries {\n        return {\n            name: config.name || aggregation.name,\n            primary: config.primary,\n            dates: this.createDatapoints(aggregation.items, ccaggregation?.mask, range),\n            lineStyles: config.lineStyles,\n            areaStyles: config.areaStyles\n        }\n    }\n\n    /**\n     * Create a list of events from its config, data (aggregation) and configuration (ccaggregation)\n     * @param config \n     * @param aggregation \n     * @param ccaggregation \n     */\n    static createAggregationEvents(config: TimelineEventAggregation, aggregation: Aggregation, ccaggregation: CCAggregation): TimelineEvent[] {\n        return !aggregation.items? [] : aggregation.items.map(item => {\n            return {\n                id: config.getDate(item).toUTCString()+\"|\"+config.getDisplay(item),\n                date: config.getDate(item),\n                size: !config.size? 6 : typeof config.size === 'function'? config.size(item) : config.size,\n                styles: !config.styles? undefined :\n                        typeof config.styles === 'function'? config.styles(item) : \n                        config.styles,                \n                display: config.getDisplay(item),\n\n                // Custom params for click action\n                item: item,\n                aggregation: aggregation,\n                ccaggregation: ccaggregation\n            }\n        });\n    }\n\n    /**\n     * This methods transforms a raw list of aggregation items into\n     * a time series completed with zeros, following the below scheme:\n     * Aggregation:  [    # #         # # #   #     # #       # # #    ]\n     * Series:       [  0 # # 0     0 # # # 0 # 0 0 # # 0   0 # # # 0  ]\n     * @param items \n     * @param resolution \n     */\n    static createDatapoints(items: AggregationItem[] | undefined, resolution: string, range?: [Date, Date]): TimelineDate[] {\n\n        if(!items) {\n            return [];\n        }\n\n        const timeInterval = this.getD3TimeInterval(resolution);\n        \n        const series: TimelineDate[] = [];\n\n        const _items = items\n            .map(item => {\n                if(!!item.value && !(item.value instanceof Date)){\n                    const val = item.value.toString();\n                    item.value = moment(val.length  undefined; // So it gets filtered out\n                    }\n                }\n                return item;\n            })\n            .filter(item => !!item.value && (!range || ((item.value as Date) >= range[0] && (item.value as Date)  {\n            const date = item.value as Date;\n            \n            if(i === 0 || timeInterval.offset(series[series.length-1].date, 1)  item.date = this.shiftDate(item.date, resolution));\n\n        return series;\n    }\n\n    \n    /**\n     * Shift the date to the middle of their time bracket (2020 = middle of the year, April = middle of the month, etc.)\n     * @param date \n     * @param resolution \n     */\n    static shiftDate(date: Date, resolution: string): Date {\n        switch(resolution){\n            case \"YYYY-MM-DD\": return d3.timeHour.offset(date, 12);\n            case \"YYYY-WW\": return d3.timeHour.offset(date, 84); // 3*24 + 12\n            case \"YYYY-MM\": return d3.timeDay.offset(date, 15);\n            case \"YYYY\": return d3.timeMonth.offset(date, 6);\n        }\n        return date;\n    }\n\n\n    static getD3TimeInterval(resolution: string): d3.CountableTimeInterval {\n        switch(resolution){\n            case \"YYYY-MM-DD\": return d3.timeDay;\n            case \"YYYY-WW\": return d3.timeWeek;\n            case \"YYYY-MM\": return d3.timeMonth;\n            case \"YYYY\": return d3.timeYear;\n        }\n        return d3.timeDay;\n    }\n\n    static defaultRecordStyle(selected: boolean): {[key: string]: any} {\n        return {\n            'fill': selected? 'red' : 'green',\n            'stroke': selected? 'red' : undefined,\n            'stroke-width': selected? '2px' : undefined\n        };\n    }\n}\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/TimelineDate.html":{"url":"interfaces/TimelineDate.html","title":"interface - TimelineDate","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  TimelineDate\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            timeline/bootstrap/timeline.component.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        date\n                                \n                                \n                                        value\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        date\n                                    \n                                \n                                \n                                    \n                                        date:         Date\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Date\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        value\n                                    \n                                \n                                \n                                    \n                                        value:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Component, Input, Output, ElementRef, ViewChild, OnChanges, AfterViewInit, EventEmitter, SimpleChanges, OnDestroy, SimpleChange, ContentChild, TemplateRef, ChangeDetectorRef } from '@angular/core';\nimport { Subscription } from 'rxjs';\nimport * as d3 from 'd3';\n\nimport { IntlService } from '@sinequa/core/intl';\nimport {Record} from '@sinequa/core/web-services';\n\n\nexport interface TimelineDate {\n    date: Date;\n    value: number;\n}\n\nexport interface TimelineSeries {\n    name: string;\n    dates: TimelineDate[];\n    primary: boolean;\n    lineStyles?: {[key:string]: any};\n    areaStyles?:  {[key:string]: any};\n}\n\nexport interface TimelineEvent {\n    date: Date;\n    id: string;\n    display: string;\n    size?: number;\n    sizeOpened?: number;\n    styles?: {[key:string]: any};\n    record?: Record;\n}\n\n@Component({\n    selector: 'sq-timeline',\n    templateUrl: './timeline.component.html',\n    styleUrls: ['./timeline.component.scss']\n})\nexport class BsTimelineComponent implements OnChanges, AfterViewInit, OnDestroy {\n\n    @Input() data?: TimelineSeries[];\n    @Input() events?: TimelineEvent[];\n\n    @Input() selection?: [Date, Date];\n\n    // Initial scale (prior to any zoom)\n    @Input() minDate?: Date;\n    @Input() maxDate?: Date;\n\n    @Input() zoomable = true;\n    @Input() minZoomDays = 1; // Max 1 day scale\n    @Input() maxZoomDays = 365 * 100; // Max 100 years scale\n\n    @Input() width = 600;\n    @Input() height = 200;\n    @Input() margin = {top: 15, bottom: 30, left: 40, right: 15};\n\n    @Input() curveType = \"curveMonotoneX\";\n\n    @Input() showTooltip = true;\n    @Input() theme: \"light\" | \"dark\" = \"light\";\n\n    @Output() selectionChange = new EventEmitter();\n    @Output() rangeChange = new EventEmitter();\n\n    @ContentChild(\"tooltipTpl\", {static: false}) tooltipTpl: TemplateRef;\n\n    // Data\n    groupedEvents: TimelineEvent[][] = [];\n\n    // Scales\n    x: d3.ScaleTime; // Read/Write\n    xt: d3.ScaleTime; // Transformed X axis due to Zoom\n    y: d3.ScaleLinear; // Read-only / domain updated\n\n    // Shapes\n    area: d3.Area; // Read only\n    line: d3.Line; // Read only\n\n    // Behaviors\n    brushBehavior: d3.BrushBehavior; // Read only\n    zoomBehavior: d3.ZoomBehavior; // Read/Write\n    brushSelection: [number, number] | null;\n    currentSelection?: Date[]; // Read/Write\n\n    // Elements\n    @ViewChild(\"xAxis\") gx: ElementRef;\n    @ViewChild(\"yAxis\") gy: ElementRef;\n    @ViewChild(\"brush\") gbrush: ElementRef;\n    \n    // Selections\n    xAxis$: d3.Selection;\n    yAxis$: d3.Selection;\n    brush$: d3.Selection;\n    grips$: d3.Selection;\n        \n    // Tooltip\n    tooltipItem: TimelineEvent[] | undefined;\n    tooltipX: number | undefined;\n    tooltipOrientation: \"left\" | \"right\";\n    tooltipTop: number;\n    tooltipRight: number;\n    tooltipLeft: number;\n\n    // Misc\n    viewInit: boolean;\n    intlSubscription: Subscription;\n    static counter = 0;\n    instance: number;\n    \n    zooming: boolean;\n    brushing: boolean;\n\n    constructor(\n        protected el: ElementRef,\n        protected intlService: IntlService,\n        protected cdRef: ChangeDetectorRef\n    ){\n        // When the locale changes, we rebuild the X scale and axis\n        this.intlSubscription = this.intlService.events.subscribe(e => this.updateXAxis());\n        \n        this.instance = BsTimelineComponent.counter++;\n        \n    }\n\n    get innerWidth(): number {\n        return this.width - this.margin.left - this.margin.right;\n    }\n\n    get innerHeight(): number {\n        return this.height - this.margin.top - this.margin.bottom;\n    }\n\n    // Note: ngOnChanges is always called once before ngAfterViewInit\n    ngOnChanges(changes: SimpleChanges) {\n\n        if(!this.x) {\n            \n            // Scales\n            this.x = d3.scaleUtc()\n                .range([0, this.innerWidth]);\n            this.xt = this.x;\n\n            this.y = d3.scaleLinear()\n                .range([this.innerHeight, 0]);\n                \n            // Shapes\n            this.area = d3.area()\n                .curve(d3[this.curveType])\n                .x(d => this.xt(d.date))\n                .y0(this.y(0))\n                .y1(d => this.y(d.value));\n                \n            this.line = d3.line()\n                .curve(d3[this.curveType])\n                .x(d => this.xt(d.date))\n                .y(d => this.y(d.value));\n                \n            // Behaviors\n            this.brushBehavior = d3.brushX()\n                .extent([[0, 0], [this.innerWidth, this.innerHeight]])\n                .on(\"start\", () => this.brushing = true)\n                .on('brush', () => this.onBrush())\n                .on('end', () => this.onBrushEnd());\n        }\n\n        // Resize handling\n\n        if(changes[\"height\"]) {\n            this.y.range([this.innerHeight, 0]);\n            this.area.y0(this.y(0));\n            this.brushBehavior.extent([[0, 0], [this.innerWidth, this.innerHeight]]);\n            if(this.viewInit) {\n                this.drawYAxis();\n                this.brush$.call(this.brushBehavior);\n                this.grips$.selectAll(\"path\").attr(\"d\", this.drawGrips);\n            }\n        }\n\n        if(changes[\"width\"]) {\n            this.x.range([0, this.innerWidth]);\n            this.brushBehavior.extent([[0, 0], [this.innerWidth, this.innerHeight]]);\n            if(this.viewInit) {\n                this.drawXAxis();\n                if(!changes[\"height\"]) {\n                    this.brush$.call(this.brushBehavior);\n                    this.grips$.selectAll(\"path\").attr(\"d\", this.drawGrips);\n                }\n            }\n        }\n\n        // If the parent changes the selection, we want to update it\n        // If not, we keep the current selection as is\n        // (Important to keep this statement outside of the if bellow since \n        // the change of selection can be combined with a change of data)\n        const selectionChanged = changes[\"selection\"] && this.updateSelection();\n\n        // Only changes in data result in redrawing the chart\n        // (other input, except selection, are expected to be static)\n        if(this.viewInit && changes[\"data\"] && this.checkDataChanges(changes[\"data\"])){\n            this.updateChart();\n        }\n\n        // If the parent changes the selection (even though the data hasn't changed), \n        // we want to update the brush.\n        // If not, we keep the current selection as is.\n        // We can update the brush only if the view is initialized (viewInit).\n        else if(this.viewInit && ((changes[\"selection\"] && selectionChanged) || changes[\"width\"])) {\n            this.updateBrush();\n        }\n\n        if(changes[\"events\"]) {\n            this.updateEvents();\n        }\n        \n    }\n\n    // Note: In onAfterViewInit we can access gx, gy, etc., obtained with @ViewChild.\n    // At this point we can initialize all the primitives and call updateChart()\n    ngAfterViewInit() {\n\n        // Get native elements\n        this.xAxis$ = d3.select(this.gx.nativeElement);\n        this.yAxis$ = d3.select(this.gy.nativeElement);\n        this.brush$ = d3.select(this.gbrush.nativeElement);\n\n        this.brush$\n            .call(this.brushBehavior)\n            .on(\"mousemove\", () => this.onMousemove())\n            .on(\"mouseout\", () => this.onMouseout());\n                        \n        // Add 2 \"grips\" to the brush goup, on each side of the rectangle\n        // Grips are inserted programmatically to appear on top the brush selection\n        this.grips$ = this.brush$.selectAll(\".grip\")\n            .data([{type: \"w\"}, {type: \"e\"}])\n            .enter()\n            .append(\"g\")\n            .attr(\"class\", \"grip\")\n            .attr(\"display\", \"none\");\n            \n        this.grips$.append(\"path\")\n            .attr(\"d\", this.drawGrips);\n\n        this.grips$.append(\"text\")\n            .attr(\"class\", \"grip-text\")\n            .attr(\"text-anchor\", d => d.type === \"w\"? 'end' : 'start')\n            .attr(\"x\", d => d.type === \"w\"? -5 : 5)\n            .attr(\"y\", 10);\n\n        this.viewInit = true;\n\n        this.updateChart();\n\n        // This is necessary to prevent \"Expression has changed after check\" errors\n        // caused by calling updateChart inside ngAfterViewInit().\n        // Unfortunately this is necessary because we need the DOM to be rendered in order fill the DOM\n        // (for example gAxis needs to exist so we can draw the axis)\n        this.cdRef.detectChanges();\n    }\n\n    /**\n     * Redraw the graph (needs to be called after ngAfterViewInit so that the DOM elements\n     * are accessible)\n     */\n    updateChart() {\n\n        this.turnoffTooltip();\n\n        if(this.data && this.data.length) {\n\n            // Update scales\n            // Note: does not stop the update process even if the data is invalid/empty\n            this.updateScales(this.data);\n\n            // Update Axes\n            this.updateAxes();\n            \n            // Update Zoom\n            this.updateZoom();\n\n            // Update brush\n            this.updateBrush();\n\n        }\n        \n    }\n\n\n    /**\n     * Update the x & y scales, based on the input data\n     * @param data \n     */\n    protected updateScales(data: TimelineSeries[]) {\n\n        // Set x and y scales with the primary series (or first one)\n        const primarySeries = data.filter(s => s.primary) || [data[0]];\n        const allPrimaryDates = ([] as TimelineDate[]).concat(...primarySeries.map(s => s.dates));\n\n        const xExtent = d3.extent(allPrimaryDates, d => d.date);\n        const yMax = d3.max(data, \n            s => d3.max(s.dates, d => d.value));\n\n        if(!xExtent[0] || !xExtent[1] || !yMax) {\n            if (allPrimaryDates.length !== 0) {\n                console.error('Invalid timeseries', primarySeries);\n            }\n            this.x.domain(this.xt.domain());\n            this.xt = this.x;\n            return;\n        }\n\n        if(this.minDate) {\n            xExtent[0] = this.minDate;\n        }\n\n        if(this.maxDate) {\n            xExtent[1] = this.maxDate;\n        }\n\n        this.x.domain(xExtent);\n        this.xt = this.x;\n        this.y.domain([0, yMax*1.1]);\n    }\n\n    /**\n     * Update the x and y axes\n     */\n    protected updateAxes(){\n        this.drawXAxis();\n        this.drawYAxis();\n    }\n\n    /**\n     * The events are drawn in the template directly. This method simply\n     * updates the grouping of events (when they are close to each other)\n     */\n    protected updateEvents() {\n        this.groupedEvents = this.groupEvents(5);\n    }\n\n    /**\n     * Update/reset the zoom behavior when new data comes in (and new scales, axes...)\n     */\n    protected updateZoom() {\n        \n        if(!this.zoomable) {\n            return;\n        }\n\n        // Reset the previous zoom !\n        if(this.zoomBehavior){\n            this.zoomBehavior.on(\"zoom\", null);\n            this.zoomBehavior.on(\"end\", null);\n            this.zoomBehavior.transform(this.brush$, d3.zoomIdentity);\n        }\n        \n        // Compute the minimum and maximum zoom\n        const xDomain = this.x.domain();\n        const scaleExtent = (xDomain[1].getTime() - xDomain[0].getTime()) / 86400000; // current number of days on the scale\n\n        // Create the behavior\n        this.zoomBehavior = d3.zoom()\n            .extent([[0, 0], [this.innerWidth, this.innerHeight]])\n            .scaleExtent([scaleExtent/this.maxZoomDays, scaleExtent/this.minZoomDays])\n            .on(\"zoom\", () => this.onZoom())\n            .on(\"end\", () => this.onZoomEnd());\n        \n        // Apply on to the brush element\n        this.brush$\n            .call(this.zoomBehavior)\n            .on(\"mousedown.zoom\", null) // Deactivate mouse event (taken by brush)\n            .on(\"touchstart.zoom\", null)\n            .on(\"touchmove.zoom\", null)\n            .on(\"touchend.zoom\", null);\n        \n    }\n\n    /**\n     * Updates the brush (or hides it if no currentSelection),\n     * following a change of x scale.\n     */\n    protected updateBrush() {\n        if(this.currentSelection) {\n            const selection: [number, number] = [this.xt(this.currentSelection[0]), this.xt(this.currentSelection[1])];\n            this.brush$.call(this.brushBehavior.move, selection);\n        }\n        else {\n            this.brush$.call(this.brushBehavior.move, null);\n        }\n    }\n\n    /**\n     * This method tests whether the input selection is different from the currentSelection\n     * and updates it. It returns true if there is actually a change.\n     */\n    protected updateSelection(): boolean {\n        const change = this.checkSelectionChange(this.selection, this.currentSelection);\n        this.currentSelection = this.selection;\n        return change;\n    }\n\n    /**\n     * Recreate the x scale and axes (in the event of a language change)\n     */\n    protected updateXAxis(){        \n        this.x = d3.scaleUtc()\n            .domain(this.x.domain())\n            .range(this.x.range());\n        \n        this.xt = d3.scaleUtc()\n            .domain(this.xt.domain())\n            .range(this.xt.range());\n\n        this.drawXAxis();\n    }\n\n    /**\n     * Draws the X axis\n     */\n    protected drawXAxis() {        \n        this.xAxis$.call(d3.axisBottom(this.xt));\n        this.xAxis$.selectAll(\".domain\").remove(); // Remove the axis line\n    }\n\n    /**\n     * Draws the Y axis\n     */\n    protected drawYAxis() {\n        const yAxisTicks = this.y.ticks()\n            .filter(tick => Number.isInteger(tick)); // Keep only integer ticks https://stackoverflow.com/questions/13576906/d3-tick-marks-on-integers-only/56821215\n\n        const yAxis = d3.axisLeft(this.y)\n            .tickValues(yAxisTicks)\n            .tickFormat(d3.format(\"~s\")); //https://github.com/d3/d3-format\n        this.yAxis$.call(yAxis);\n        this.yAxis$.selectAll(\".domain\").remove(); // Remove the axis line\n    }\n    \n    /**\n     * Updates the display of the brush's grips when the brush has moved\n     * @param selection \n     */\n    protected updateGrips(selection: [number, number] | null) {\n        if (!selection) {\n            this.grips$.attr(\"display\", \"none\");\n        }\n        else {\n            this.grips$\n                .attr(\"display\", null)\n                .attr(\"transform\", (d, i) => \"translate(\" + selection[i] + \")\");\n            this.grips$.selectAll('.grip-text')\n                .text(d => this.intlService.formatDate(this.xt.invert(selection[d.type === 'w'? 0 : 1])));\n        }\n    }\n\n\n    // Interaction callbacks\n\n    onBrush() {\n        this.turnoffTooltip();\n        this.brushSelection = d3.brushSelection(this.gbrush.nativeElement) as [number, number] | null;\n        this.updateGrips(this.brushSelection);\n    }\n\n    onBrushEnd(){\n        this.brushing = false;\n        this.onBrush();\n        const newSelection = this.brushSelection?.sort((a,b)=>a-b).map(this.xt.invert);\n        if(this.checkSelectionChange(this.currentSelection, newSelection)) {\n            this.currentSelection = newSelection;\n            this.selectionChange.next(this.currentSelection);\n        }\n    }    \n\n    onZoom(){\n\n        this.turnoffTooltip();\n\n        this.zooming = true;\n\n        // Create a transformed scale without modifying the original (to enforce the limit of scaleExtent)\n        const transform = d3.zoomTransform(this.brush$.node() as Element);\n        this.xt = transform.rescaleX(this.x);\n\n        // Redraw the axis\n        this.drawXAxis();\n            \n        // Update the brush position\n        if(this.currentSelection){\n            const selection: [number, number] = [this.xt(this.currentSelection[0]), this.xt(this.currentSelection[1])];\n            this.brushBehavior.move(this.brush$, selection);\n        }\n\n    }\n\n    onZoomEnd(){\n        this.zooming = false;\n\n        // At the end of a zoom, we need to reorganize the grouping of events\n        this.updateEvents();\n\n        // Fire an event\n        this.rangeChange.next(this.xt.domain());\n    }\n\n    /**\n     * Redraw the simple tooltip (vertical line)\n     */\n    onMousemove() {\n        if(!this.tooltipItem && this.showTooltip) {\n            this.tooltipX = d3.mouse(this.gbrush.nativeElement)[0];\n        }\n    }\n\n    /**\n     * Remove the simple tooltip (vertical line)\n     */\n    onMouseout() {\n        if(!this.tooltipItem) {\n            this.tooltipX = undefined\n        }\n    }\n\n    /**\n     * Responds to a click on an event (triangle) by essentially turning tooltip on/off\n     * @param event \n     */\n    onEventClick(event: TimelineEvent[]) {\n\n        if(this.tooltipItem === event) {\n            this.turnoffTooltip();\n        }\n\n        else {\n\n            if(this.tooltipItem) {\n                this.turnoffTooltip();\n            }\n\n            this.tooltipItem = event;\n            this.tooltipX = this.xt(event[0].date);\n\n            // Since we use viewBox to auto-adjust the SVG to the container size, we have to\n            // convert from the SVG coordinate system to the HTML coordinate system\n            const x = this.margin.left + this.tooltipX;\n            const actualWidth = (this.el.nativeElement as HTMLElement).offsetWidth;\n            const scale = actualWidth / this.width;\n            const relativeX = x / this.width;\n\n            // Tooltip to the right\n            if(relativeX  {\n        if(this.tooltipItem) {\n            this.tooltipItem = undefined;\n            this.tooltipX = undefined;\n        }\n    }\n\n    ngOnDestroy(){\n        this.intlSubscription.unsubscribe();\n    }\n\n    // Utilities\n\n    /**\n     * Transforms the input list of events into a list of list, by grouping events within a bin\n     * when their dates are close together. This closeness is measured in \"pixel per event\".\n     * Note: this currently uses a histogram-like algorithm, which could probably be improved (clustering?)\n     * @param pixPerEvent \n     */\n    protected groupEvents(pixPerEvent: number): TimelineEvent[][] {\n        const events: TimelineEvent[][] = [];\n\n        if(this.events) {\n            const nbins = Math.floor(this.innerWidth / pixPerEvent);\n            const domain = this.xt.domain();\n            const timeinterval = (domain[1].getTime() - domain[0].getTime()) / nbins;\n            this.events.concat()\n                .sort((a,b) => a.date.getTime() - b.date.getTime())\n                .forEach(event => {\n                    if(events.length === 0) {\n                        events.push([event]);\n                    }\n                    else {\n                        const last = events[events.length-1];\n                        const lastbin = Math.floor(last[0].date.getTime() / timeinterval);\n                        const bin = Math.floor(event.date.getTime() / timeinterval);\n                        if(bin === lastbin) {\n                            last.push(event);\n                        }\n                        else {\n                            events.push([event]);\n                        }\n                    }\n                });\n        }\n\n        return events;\n    }\n\n    /**\n     * Return true if there are actual changes in the data\n     * (in particular will ignore data refresh which change nothing)\n     * @param change \n     */\n    protected checkDataChanges(change: SimpleChange): boolean {\n        const previousValue = change.previousValue as TimelineSeries[] | undefined;\n        const currentValue = change.currentValue as TimelineSeries[] | undefined;\n        \n        // Ignore null/undefined difference cause by | async\n        // See: https://github.com/angular/angular/issues/16982\n        if(currentValue === null && previousValue === undefined || currentValue === undefined && previousValue === null)\n            return false;\n\n        // Else, if one of them is null/undefined (or difference in length), there's clearly a change\n        if(!previousValue || !currentValue || previousValue.length !== currentValue.length)\n            return true;\n        \n        // If both defined and same size, we need to compare the data piece by piece\n        for(let i=0; i {\n        const gripHeight = Math.min(10, Math.max((this.innerHeight) / 8, 4));\n        const gripWidth = gripHeight;\n\n        const x = -gripWidth / 2;\n        const y = this.innerHeight / 2 - gripHeight / 2;\n\n        const path =\n            'M ' + x + ' ' + y +\n            ' l ' + -gripWidth + ' ' + gripHeight / 2 +\n            ' l ' + gripWidth + ' ' + gripHeight / 2 + ' z ' +\n            'M ' + -x + ' ' + y +\n            ' l ' + gripWidth + ' ' + gripHeight / 2 +\n            ' l ' + -gripWidth + ' ' + gripHeight / 2 + ' z ' +\n            'M 0 ' + 0 + ' l 0 ' + this.innerHeight + ' z ';\n        return path;\n    }\n\n    /**\n     * Returns the size of the triangle drawn for one event (or a group of events)\n     * @param events \n     */\n    eventSize(events: TimelineEvent[]): number {\n        if(events!==this.tooltipItem) {\n            return events[0].size || 6;\n        }\n        else {\n            return events[0].sizeOpened || (events[0].size || 6)*2;\n        }\n    }\n\n    /**\n     * Return a string containing the path coordinates of a triangle for a given event (or group of events)\n     * @param events \n     * @param size \n     */\n    drawEvents(events: TimelineEvent[], size: number): string {\n        const x = this.xt(events[0].date);\n        return 'M ' + x + ' ' + (this.innerHeight - 3*size/2) +\n            ' l ' + -size + ' ' + (3*size/2) +\n            ' l ' + (2*size) + ' ' + 0 + ' z ';\n    }\n}\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/TimelineEvent.html":{"url":"interfaces/TimelineEvent.html","title":"interface - TimelineEvent","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  TimelineEvent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            timeline/bootstrap/timeline.component.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        date\n                                \n                                \n                                        display\n                                \n                                \n                                        id\n                                \n                                \n                                            Optional\n                                        record\n                                \n                                \n                                            Optional\n                                        size\n                                \n                                \n                                            Optional\n                                        sizeOpened\n                                \n                                \n                                            Optional\n                                        styles\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        date\n                                    \n                                \n                                \n                                    \n                                        date:         Date\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Date\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        display\n                                    \n                                \n                                \n                                    \n                                        display:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                    \n                                \n                                \n                                    \n                                        id:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        record\n                                    \n                                \n                                \n                                    \n                                        record:     Record\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Record\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        size\n                                    \n                                \n                                \n                                    \n                                        size:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        sizeOpened\n                                    \n                                \n                                \n                                    \n                                        sizeOpened:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        styles\n                                    \n                                \n                                \n                                    \n                                        styles:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Component, Input, Output, ElementRef, ViewChild, OnChanges, AfterViewInit, EventEmitter, SimpleChanges, OnDestroy, SimpleChange, ContentChild, TemplateRef, ChangeDetectorRef } from '@angular/core';\nimport { Subscription } from 'rxjs';\nimport * as d3 from 'd3';\n\nimport { IntlService } from '@sinequa/core/intl';\nimport {Record} from '@sinequa/core/web-services';\n\n\nexport interface TimelineDate {\n    date: Date;\n    value: number;\n}\n\nexport interface TimelineSeries {\n    name: string;\n    dates: TimelineDate[];\n    primary: boolean;\n    lineStyles?: {[key:string]: any};\n    areaStyles?:  {[key:string]: any};\n}\n\nexport interface TimelineEvent {\n    date: Date;\n    id: string;\n    display: string;\n    size?: number;\n    sizeOpened?: number;\n    styles?: {[key:string]: any};\n    record?: Record;\n}\n\n@Component({\n    selector: 'sq-timeline',\n    templateUrl: './timeline.component.html',\n    styleUrls: ['./timeline.component.scss']\n})\nexport class BsTimelineComponent implements OnChanges, AfterViewInit, OnDestroy {\n\n    @Input() data?: TimelineSeries[];\n    @Input() events?: TimelineEvent[];\n\n    @Input() selection?: [Date, Date];\n\n    // Initial scale (prior to any zoom)\n    @Input() minDate?: Date;\n    @Input() maxDate?: Date;\n\n    @Input() zoomable = true;\n    @Input() minZoomDays = 1; // Max 1 day scale\n    @Input() maxZoomDays = 365 * 100; // Max 100 years scale\n\n    @Input() width = 600;\n    @Input() height = 200;\n    @Input() margin = {top: 15, bottom: 30, left: 40, right: 15};\n\n    @Input() curveType = \"curveMonotoneX\";\n\n    @Input() showTooltip = true;\n    @Input() theme: \"light\" | \"dark\" = \"light\";\n\n    @Output() selectionChange = new EventEmitter();\n    @Output() rangeChange = new EventEmitter();\n\n    @ContentChild(\"tooltipTpl\", {static: false}) tooltipTpl: TemplateRef;\n\n    // Data\n    groupedEvents: TimelineEvent[][] = [];\n\n    // Scales\n    x: d3.ScaleTime; // Read/Write\n    xt: d3.ScaleTime; // Transformed X axis due to Zoom\n    y: d3.ScaleLinear; // Read-only / domain updated\n\n    // Shapes\n    area: d3.Area; // Read only\n    line: d3.Line; // Read only\n\n    // Behaviors\n    brushBehavior: d3.BrushBehavior; // Read only\n    zoomBehavior: d3.ZoomBehavior; // Read/Write\n    brushSelection: [number, number] | null;\n    currentSelection?: Date[]; // Read/Write\n\n    // Elements\n    @ViewChild(\"xAxis\") gx: ElementRef;\n    @ViewChild(\"yAxis\") gy: ElementRef;\n    @ViewChild(\"brush\") gbrush: ElementRef;\n    \n    // Selections\n    xAxis$: d3.Selection;\n    yAxis$: d3.Selection;\n    brush$: d3.Selection;\n    grips$: d3.Selection;\n        \n    // Tooltip\n    tooltipItem: TimelineEvent[] | undefined;\n    tooltipX: number | undefined;\n    tooltipOrientation: \"left\" | \"right\";\n    tooltipTop: number;\n    tooltipRight: number;\n    tooltipLeft: number;\n\n    // Misc\n    viewInit: boolean;\n    intlSubscription: Subscription;\n    static counter = 0;\n    instance: number;\n    \n    zooming: boolean;\n    brushing: boolean;\n\n    constructor(\n        protected el: ElementRef,\n        protected intlService: IntlService,\n        protected cdRef: ChangeDetectorRef\n    ){\n        // When the locale changes, we rebuild the X scale and axis\n        this.intlSubscription = this.intlService.events.subscribe(e => this.updateXAxis());\n        \n        this.instance = BsTimelineComponent.counter++;\n        \n    }\n\n    get innerWidth(): number {\n        return this.width - this.margin.left - this.margin.right;\n    }\n\n    get innerHeight(): number {\n        return this.height - this.margin.top - this.margin.bottom;\n    }\n\n    // Note: ngOnChanges is always called once before ngAfterViewInit\n    ngOnChanges(changes: SimpleChanges) {\n\n        if(!this.x) {\n            \n            // Scales\n            this.x = d3.scaleUtc()\n                .range([0, this.innerWidth]);\n            this.xt = this.x;\n\n            this.y = d3.scaleLinear()\n                .range([this.innerHeight, 0]);\n                \n            // Shapes\n            this.area = d3.area()\n                .curve(d3[this.curveType])\n                .x(d => this.xt(d.date))\n                .y0(this.y(0))\n                .y1(d => this.y(d.value));\n                \n            this.line = d3.line()\n                .curve(d3[this.curveType])\n                .x(d => this.xt(d.date))\n                .y(d => this.y(d.value));\n                \n            // Behaviors\n            this.brushBehavior = d3.brushX()\n                .extent([[0, 0], [this.innerWidth, this.innerHeight]])\n                .on(\"start\", () => this.brushing = true)\n                .on('brush', () => this.onBrush())\n                .on('end', () => this.onBrushEnd());\n        }\n\n        // Resize handling\n\n        if(changes[\"height\"]) {\n            this.y.range([this.innerHeight, 0]);\n            this.area.y0(this.y(0));\n            this.brushBehavior.extent([[0, 0], [this.innerWidth, this.innerHeight]]);\n            if(this.viewInit) {\n                this.drawYAxis();\n                this.brush$.call(this.brushBehavior);\n                this.grips$.selectAll(\"path\").attr(\"d\", this.drawGrips);\n            }\n        }\n\n        if(changes[\"width\"]) {\n            this.x.range([0, this.innerWidth]);\n            this.brushBehavior.extent([[0, 0], [this.innerWidth, this.innerHeight]]);\n            if(this.viewInit) {\n                this.drawXAxis();\n                if(!changes[\"height\"]) {\n                    this.brush$.call(this.brushBehavior);\n                    this.grips$.selectAll(\"path\").attr(\"d\", this.drawGrips);\n                }\n            }\n        }\n\n        // If the parent changes the selection, we want to update it\n        // If not, we keep the current selection as is\n        // (Important to keep this statement outside of the if bellow since \n        // the change of selection can be combined with a change of data)\n        const selectionChanged = changes[\"selection\"] && this.updateSelection();\n\n        // Only changes in data result in redrawing the chart\n        // (other input, except selection, are expected to be static)\n        if(this.viewInit && changes[\"data\"] && this.checkDataChanges(changes[\"data\"])){\n            this.updateChart();\n        }\n\n        // If the parent changes the selection (even though the data hasn't changed), \n        // we want to update the brush.\n        // If not, we keep the current selection as is.\n        // We can update the brush only if the view is initialized (viewInit).\n        else if(this.viewInit && ((changes[\"selection\"] && selectionChanged) || changes[\"width\"])) {\n            this.updateBrush();\n        }\n\n        if(changes[\"events\"]) {\n            this.updateEvents();\n        }\n        \n    }\n\n    // Note: In onAfterViewInit we can access gx, gy, etc., obtained with @ViewChild.\n    // At this point we can initialize all the primitives and call updateChart()\n    ngAfterViewInit() {\n\n        // Get native elements\n        this.xAxis$ = d3.select(this.gx.nativeElement);\n        this.yAxis$ = d3.select(this.gy.nativeElement);\n        this.brush$ = d3.select(this.gbrush.nativeElement);\n\n        this.brush$\n            .call(this.brushBehavior)\n            .on(\"mousemove\", () => this.onMousemove())\n            .on(\"mouseout\", () => this.onMouseout());\n                        \n        // Add 2 \"grips\" to the brush goup, on each side of the rectangle\n        // Grips are inserted programmatically to appear on top the brush selection\n        this.grips$ = this.brush$.selectAll(\".grip\")\n            .data([{type: \"w\"}, {type: \"e\"}])\n            .enter()\n            .append(\"g\")\n            .attr(\"class\", \"grip\")\n            .attr(\"display\", \"none\");\n            \n        this.grips$.append(\"path\")\n            .attr(\"d\", this.drawGrips);\n\n        this.grips$.append(\"text\")\n            .attr(\"class\", \"grip-text\")\n            .attr(\"text-anchor\", d => d.type === \"w\"? 'end' : 'start')\n            .attr(\"x\", d => d.type === \"w\"? -5 : 5)\n            .attr(\"y\", 10);\n\n        this.viewInit = true;\n\n        this.updateChart();\n\n        // This is necessary to prevent \"Expression has changed after check\" errors\n        // caused by calling updateChart inside ngAfterViewInit().\n        // Unfortunately this is necessary because we need the DOM to be rendered in order fill the DOM\n        // (for example gAxis needs to exist so we can draw the axis)\n        this.cdRef.detectChanges();\n    }\n\n    /**\n     * Redraw the graph (needs to be called after ngAfterViewInit so that the DOM elements\n     * are accessible)\n     */\n    updateChart() {\n\n        this.turnoffTooltip();\n\n        if(this.data && this.data.length) {\n\n            // Update scales\n            // Note: does not stop the update process even if the data is invalid/empty\n            this.updateScales(this.data);\n\n            // Update Axes\n            this.updateAxes();\n            \n            // Update Zoom\n            this.updateZoom();\n\n            // Update brush\n            this.updateBrush();\n\n        }\n        \n    }\n\n\n    /**\n     * Update the x & y scales, based on the input data\n     * @param data \n     */\n    protected updateScales(data: TimelineSeries[]) {\n\n        // Set x and y scales with the primary series (or first one)\n        const primarySeries = data.filter(s => s.primary) || [data[0]];\n        const allPrimaryDates = ([] as TimelineDate[]).concat(...primarySeries.map(s => s.dates));\n\n        const xExtent = d3.extent(allPrimaryDates, d => d.date);\n        const yMax = d3.max(data, \n            s => d3.max(s.dates, d => d.value));\n\n        if(!xExtent[0] || !xExtent[1] || !yMax) {\n            if (allPrimaryDates.length !== 0) {\n                console.error('Invalid timeseries', primarySeries);\n            }\n            this.x.domain(this.xt.domain());\n            this.xt = this.x;\n            return;\n        }\n\n        if(this.minDate) {\n            xExtent[0] = this.minDate;\n        }\n\n        if(this.maxDate) {\n            xExtent[1] = this.maxDate;\n        }\n\n        this.x.domain(xExtent);\n        this.xt = this.x;\n        this.y.domain([0, yMax*1.1]);\n    }\n\n    /**\n     * Update the x and y axes\n     */\n    protected updateAxes(){\n        this.drawXAxis();\n        this.drawYAxis();\n    }\n\n    /**\n     * The events are drawn in the template directly. This method simply\n     * updates the grouping of events (when they are close to each other)\n     */\n    protected updateEvents() {\n        this.groupedEvents = this.groupEvents(5);\n    }\n\n    /**\n     * Update/reset the zoom behavior when new data comes in (and new scales, axes...)\n     */\n    protected updateZoom() {\n        \n        if(!this.zoomable) {\n            return;\n        }\n\n        // Reset the previous zoom !\n        if(this.zoomBehavior){\n            this.zoomBehavior.on(\"zoom\", null);\n            this.zoomBehavior.on(\"end\", null);\n            this.zoomBehavior.transform(this.brush$, d3.zoomIdentity);\n        }\n        \n        // Compute the minimum and maximum zoom\n        const xDomain = this.x.domain();\n        const scaleExtent = (xDomain[1].getTime() - xDomain[0].getTime()) / 86400000; // current number of days on the scale\n\n        // Create the behavior\n        this.zoomBehavior = d3.zoom()\n            .extent([[0, 0], [this.innerWidth, this.innerHeight]])\n            .scaleExtent([scaleExtent/this.maxZoomDays, scaleExtent/this.minZoomDays])\n            .on(\"zoom\", () => this.onZoom())\n            .on(\"end\", () => this.onZoomEnd());\n        \n        // Apply on to the brush element\n        this.brush$\n            .call(this.zoomBehavior)\n            .on(\"mousedown.zoom\", null) // Deactivate mouse event (taken by brush)\n            .on(\"touchstart.zoom\", null)\n            .on(\"touchmove.zoom\", null)\n            .on(\"touchend.zoom\", null);\n        \n    }\n\n    /**\n     * Updates the brush (or hides it if no currentSelection),\n     * following a change of x scale.\n     */\n    protected updateBrush() {\n        if(this.currentSelection) {\n            const selection: [number, number] = [this.xt(this.currentSelection[0]), this.xt(this.currentSelection[1])];\n            this.brush$.call(this.brushBehavior.move, selection);\n        }\n        else {\n            this.brush$.call(this.brushBehavior.move, null);\n        }\n    }\n\n    /**\n     * This method tests whether the input selection is different from the currentSelection\n     * and updates it. It returns true if there is actually a change.\n     */\n    protected updateSelection(): boolean {\n        const change = this.checkSelectionChange(this.selection, this.currentSelection);\n        this.currentSelection = this.selection;\n        return change;\n    }\n\n    /**\n     * Recreate the x scale and axes (in the event of a language change)\n     */\n    protected updateXAxis(){        \n        this.x = d3.scaleUtc()\n            .domain(this.x.domain())\n            .range(this.x.range());\n        \n        this.xt = d3.scaleUtc()\n            .domain(this.xt.domain())\n            .range(this.xt.range());\n\n        this.drawXAxis();\n    }\n\n    /**\n     * Draws the X axis\n     */\n    protected drawXAxis() {        \n        this.xAxis$.call(d3.axisBottom(this.xt));\n        this.xAxis$.selectAll(\".domain\").remove(); // Remove the axis line\n    }\n\n    /**\n     * Draws the Y axis\n     */\n    protected drawYAxis() {\n        const yAxisTicks = this.y.ticks()\n            .filter(tick => Number.isInteger(tick)); // Keep only integer ticks https://stackoverflow.com/questions/13576906/d3-tick-marks-on-integers-only/56821215\n\n        const yAxis = d3.axisLeft(this.y)\n            .tickValues(yAxisTicks)\n            .tickFormat(d3.format(\"~s\")); //https://github.com/d3/d3-format\n        this.yAxis$.call(yAxis);\n        this.yAxis$.selectAll(\".domain\").remove(); // Remove the axis line\n    }\n    \n    /**\n     * Updates the display of the brush's grips when the brush has moved\n     * @param selection \n     */\n    protected updateGrips(selection: [number, number] | null) {\n        if (!selection) {\n            this.grips$.attr(\"display\", \"none\");\n        }\n        else {\n            this.grips$\n                .attr(\"display\", null)\n                .attr(\"transform\", (d, i) => \"translate(\" + selection[i] + \")\");\n            this.grips$.selectAll('.grip-text')\n                .text(d => this.intlService.formatDate(this.xt.invert(selection[d.type === 'w'? 0 : 1])));\n        }\n    }\n\n\n    // Interaction callbacks\n\n    onBrush() {\n        this.turnoffTooltip();\n        this.brushSelection = d3.brushSelection(this.gbrush.nativeElement) as [number, number] | null;\n        this.updateGrips(this.brushSelection);\n    }\n\n    onBrushEnd(){\n        this.brushing = false;\n        this.onBrush();\n        const newSelection = this.brushSelection?.sort((a,b)=>a-b).map(this.xt.invert);\n        if(this.checkSelectionChange(this.currentSelection, newSelection)) {\n            this.currentSelection = newSelection;\n            this.selectionChange.next(this.currentSelection);\n        }\n    }    \n\n    onZoom(){\n\n        this.turnoffTooltip();\n\n        this.zooming = true;\n\n        // Create a transformed scale without modifying the original (to enforce the limit of scaleExtent)\n        const transform = d3.zoomTransform(this.brush$.node() as Element);\n        this.xt = transform.rescaleX(this.x);\n\n        // Redraw the axis\n        this.drawXAxis();\n            \n        // Update the brush position\n        if(this.currentSelection){\n            const selection: [number, number] = [this.xt(this.currentSelection[0]), this.xt(this.currentSelection[1])];\n            this.brushBehavior.move(this.brush$, selection);\n        }\n\n    }\n\n    onZoomEnd(){\n        this.zooming = false;\n\n        // At the end of a zoom, we need to reorganize the grouping of events\n        this.updateEvents();\n\n        // Fire an event\n        this.rangeChange.next(this.xt.domain());\n    }\n\n    /**\n     * Redraw the simple tooltip (vertical line)\n     */\n    onMousemove() {\n        if(!this.tooltipItem && this.showTooltip) {\n            this.tooltipX = d3.mouse(this.gbrush.nativeElement)[0];\n        }\n    }\n\n    /**\n     * Remove the simple tooltip (vertical line)\n     */\n    onMouseout() {\n        if(!this.tooltipItem) {\n            this.tooltipX = undefined\n        }\n    }\n\n    /**\n     * Responds to a click on an event (triangle) by essentially turning tooltip on/off\n     * @param event \n     */\n    onEventClick(event: TimelineEvent[]) {\n\n        if(this.tooltipItem === event) {\n            this.turnoffTooltip();\n        }\n\n        else {\n\n            if(this.tooltipItem) {\n                this.turnoffTooltip();\n            }\n\n            this.tooltipItem = event;\n            this.tooltipX = this.xt(event[0].date);\n\n            // Since we use viewBox to auto-adjust the SVG to the container size, we have to\n            // convert from the SVG coordinate system to the HTML coordinate system\n            const x = this.margin.left + this.tooltipX;\n            const actualWidth = (this.el.nativeElement as HTMLElement).offsetWidth;\n            const scale = actualWidth / this.width;\n            const relativeX = x / this.width;\n\n            // Tooltip to the right\n            if(relativeX  {\n        if(this.tooltipItem) {\n            this.tooltipItem = undefined;\n            this.tooltipX = undefined;\n        }\n    }\n\n    ngOnDestroy(){\n        this.intlSubscription.unsubscribe();\n    }\n\n    // Utilities\n\n    /**\n     * Transforms the input list of events into a list of list, by grouping events within a bin\n     * when their dates are close together. This closeness is measured in \"pixel per event\".\n     * Note: this currently uses a histogram-like algorithm, which could probably be improved (clustering?)\n     * @param pixPerEvent \n     */\n    protected groupEvents(pixPerEvent: number): TimelineEvent[][] {\n        const events: TimelineEvent[][] = [];\n\n        if(this.events) {\n            const nbins = Math.floor(this.innerWidth / pixPerEvent);\n            const domain = this.xt.domain();\n            const timeinterval = (domain[1].getTime() - domain[0].getTime()) / nbins;\n            this.events.concat()\n                .sort((a,b) => a.date.getTime() - b.date.getTime())\n                .forEach(event => {\n                    if(events.length === 0) {\n                        events.push([event]);\n                    }\n                    else {\n                        const last = events[events.length-1];\n                        const lastbin = Math.floor(last[0].date.getTime() / timeinterval);\n                        const bin = Math.floor(event.date.getTime() / timeinterval);\n                        if(bin === lastbin) {\n                            last.push(event);\n                        }\n                        else {\n                            events.push([event]);\n                        }\n                    }\n                });\n        }\n\n        return events;\n    }\n\n    /**\n     * Return true if there are actual changes in the data\n     * (in particular will ignore data refresh which change nothing)\n     * @param change \n     */\n    protected checkDataChanges(change: SimpleChange): boolean {\n        const previousValue = change.previousValue as TimelineSeries[] | undefined;\n        const currentValue = change.currentValue as TimelineSeries[] | undefined;\n        \n        // Ignore null/undefined difference cause by | async\n        // See: https://github.com/angular/angular/issues/16982\n        if(currentValue === null && previousValue === undefined || currentValue === undefined && previousValue === null)\n            return false;\n\n        // Else, if one of them is null/undefined (or difference in length), there's clearly a change\n        if(!previousValue || !currentValue || previousValue.length !== currentValue.length)\n            return true;\n        \n        // If both defined and same size, we need to compare the data piece by piece\n        for(let i=0; i {\n        const gripHeight = Math.min(10, Math.max((this.innerHeight) / 8, 4));\n        const gripWidth = gripHeight;\n\n        const x = -gripWidth / 2;\n        const y = this.innerHeight / 2 - gripHeight / 2;\n\n        const path =\n            'M ' + x + ' ' + y +\n            ' l ' + -gripWidth + ' ' + gripHeight / 2 +\n            ' l ' + gripWidth + ' ' + gripHeight / 2 + ' z ' +\n            'M ' + -x + ' ' + y +\n            ' l ' + gripWidth + ' ' + gripHeight / 2 +\n            ' l ' + -gripWidth + ' ' + gripHeight / 2 + ' z ' +\n            'M 0 ' + 0 + ' l 0 ' + this.innerHeight + ' z ';\n        return path;\n    }\n\n    /**\n     * Returns the size of the triangle drawn for one event (or a group of events)\n     * @param events \n     */\n    eventSize(events: TimelineEvent[]): number {\n        if(events!==this.tooltipItem) {\n            return events[0].size || 6;\n        }\n        else {\n            return events[0].sizeOpened || (events[0].size || 6)*2;\n        }\n    }\n\n    /**\n     * Return a string containing the path coordinates of a triangle for a given event (or group of events)\n     * @param events \n     * @param size \n     */\n    drawEvents(events: TimelineEvent[], size: number): string {\n        const x = this.xt(events[0].date);\n        return 'M ' + x + ' ' + (this.innerHeight - 3*size/2) +\n            ' l ' + -size + ' ' + (3*size/2) +\n            ' l ' + (2*size) + ' ' + 0 + ' z ';\n    }\n}\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/TimelineEventAggregation.html":{"url":"interfaces/TimelineEventAggregation.html","title":"interface - TimelineEventAggregation","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  TimelineEventAggregation\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            timeline/bootstrap/facet-timeline.component.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        aggregation\n                                \n                                \n                                        getDate\n                                \n                                \n                                        getDisplay\n                                \n                                \n                                            Optional\n                                        size\n                                \n                                \n                                            Optional\n                                        styles\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        aggregation\n                                    \n                                \n                                \n                                    \n                                        aggregation:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        getDate\n                                    \n                                \n                                \n                                    \n                                        getDate:     \n\n                                    \n                                \n\n\n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        getDisplay\n                                    \n                                \n                                \n                                    \n                                        getDisplay:     \n\n                                    \n                                \n\n\n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        size\n                                    \n                                \n                                \n                                    \n                                        size:     number | \n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     number | \n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        styles\n                                    \n                                \n                                \n                                    \n                                        styles:     literal type | \n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type | \n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Component, Input, OnChanges, ChangeDetectorRef, SimpleChanges, Output, EventEmitter } from '@angular/core';\nimport { Observable, of, combineLatest, ReplaySubject } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { Results, AggregationItem, Aggregation, CCAggregation, Record, AuditWebService, AuditEventType } from '@sinequa/core/web-services';\nimport { AppService, Expr, ExprBuilder } from '@sinequa/core/app-utils';\nimport { Utils } from '@sinequa/core/base';\nimport { AbstractFacet, FacetService } from '@sinequa/components/facet';\nimport { SearchService } from '@sinequa/components/search';\nimport { SelectionService } from '@sinequa/components/selection';\nimport { Action } from '@sinequa/components/action';\nimport { TimelineSeries, TimelineDate, TimelineEvent } from './timeline.component';\nimport moment from 'moment';\nimport * as d3 from 'd3';\n\nexport interface TimelineAggregation {\n    name?: string;\n    aggregation: string;\n    primary: boolean;\n    areaStyles?: {[key: string]: any};\n    lineStyles?: {[key: string]: any};\n}\n\nexport interface TimelineCombinedAggregations {\n    aggregations: TimelineAggregation[];\n    maxNMonths: number[]; // Maximum number of months for which to use this aggregation\n    default: TimelineAggregation; // Aggregation to use by default \n    current?: TimelineAggregation; // (this field is overriden by the component when switching aggregation)\n}\n\nexport interface TimelineRecords {\n    field: string;\n    size?: number | ((record: Record, selected: boolean) => number);\n    styles?: {[key: string]: any} | ((record: Record, selected: boolean) => {[key: string]: any});\n    display?: (record: Record) => string;\n}\n\nexport interface TimelineEventAggregation {\n    aggregation: string;\n    getDate: ((item: AggregationItem) => Date);\n    getDisplay: ((item: AggregationItem) => string);\n    size?: number | ((item: AggregationItem) => number);\n    styles?: {[key: string]: any} | ((item: AggregationItem) => {[key: string]: any});\n}\n\nexport type TimelineData = TimelineSeries | TimelineAggregation | TimelineCombinedAggregations;\n\nexport type TimelineEventData = TimelineEvent[] | TimelineRecords | TimelineEventAggregation;\n\n@Component({\n    selector: 'sq-facet-timeline',\n    templateUrl: './facet-timeline.component.html',\n    styleUrls: ['./facet-timeline.component.scss']\n})\nexport class BsFacetTimelineComponent extends AbstractFacet implements OnChanges {\n    @Input() name = 'Timeline';\n    @Input() results: Results;\n    \n    // By default, we show the standard Timeline aggregation and the list of current records\n    @Input() timeseries: TimelineData[] = [{aggregation: 'Timeline', primary: true}];\n    @Input() events: TimelineEventData[] = [{field: 'modified'}];\n\n    // Initial scale (prior to any zoom)\n    @Input() minDate?: Date;\n    @Input() maxDate?: Date;\n    // Date range to filter aggregations (ignored when combined aggregations are recomputed based on zoomed range)\n    @Input() minAggregationDate?: Date;\n    @Input() maxAggregationDate?: Date;\n    \n    @Input() zoomable = true;\n    @Input() minZoomDays = 1; // Max 1 day scale\n    @Input() maxZoomDays = 365 * 100; // Max 100 years scale\n\n    @Input() width = 600;\n    @Input() height = 200;\n    @Input() margin = {top: 15, bottom: 30, left: 40, right: 15};\n\n    @Input() curveType = \"curveMonotoneX\";\n\n    @Input() showTooltip = true;\n    @Input() theme: \"light\" | \"dark\" = \"light\";\n\n    @Output() eventClicked = new EventEmitter();\n\n    // List of observables (one per timeseries / event type)\n    timeseries$: ReplaySubject[];\n    events$: ReplaySubject[];\n\n    // Combination (combineLastest) of the timeline observables\n    mergedTimeseries$: Observable;\n    mergedEvents$: Observable;\n\n    // Current timeline selection\n    selection?: [Date, Date];\n\n    // Current range (undefined if no zoom / auto-scaling)\n    currentRange?: [Date, Date];\n\n    // Formating method for search queries\n    formatDayRequest = d3.timeFormat(\"%Y-%m-%d\");\n\n    // Actions\n    clearFilters: Action;\n\n    constructor(\n        public facetService: FacetService,\n        public searchService: SearchService,\n        public appService: AppService,\n        public selectionService: SelectionService,\n        public exprBuilder: ExprBuilder,\n        public cdRef: ChangeDetectorRef,\n        public audit: AuditWebService\n    ){\n        super();\n\n        // Update the events when the selection of records changes\n        this.selectionService.events.subscribe(event => {\n            const i = this.events.findIndex(e => (e as TimelineRecords).field);\n            if(i !== -1) {\n                this.events$[i].next(this.getRecordsAsEvents(this.events[i] as TimelineRecords));\n            }\n        });\n        \n        // Clear the current filters\n        this.clearFilters = new Action({\n            icon: \"far fa-minus-square\",\n            title: \"msg#facet.clearSelects\",\n            action: () => {\n                this.selection = undefined;\n                this.searchService.query.removeSelect(this.name);\n                this.searchService.search();\n            }\n        });\n\n    }\n\n    getMinDate(): Date | undefined {\n        return this.currentRange? this.currentRange[0] : this.minDate;\n    }\n\n    getMaxDate(): Date | undefined {\n        return this.currentRange? this.currentRange[1] : this.maxDate;\n    }\n\n    get actions(): Action[] {\n        const actions: Action[] = [];\n        if(this.facetService.hasFiltered(this.name)){\n            actions.push(this.clearFilters);\n        }\n        return actions;\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n\n        // Retrieve the current active selection for this timeline (if any)\n        const select = this.searchService.query.findSelect(this.name);\n\n        // Update the selection if it is not already set (which is the case on a page refresh)\n        if(select && !this.selection) {\n            let parsedexpr = this.appService.parseExpr(select.expression) as Expr;\n            if(!Utils.isString(parsedexpr)){\n                while(!parsedexpr.isLeaf){ // The select might over multiple fields (modified between [...] AND created between [...])\n                    parsedexpr = parsedexpr.operands[0];\n                }\n                if(parsedexpr.values){\n                    this.selection = [new Date(parsedexpr.values[0]), new Date(parsedexpr.values[1])];\n                }\n            }\n        }\n        // If no active selection we remove the selection from the timeline, along with the current zoomed range\n        else if(!select) {\n            this.selection = undefined; // If no select, it was possibly removed by the user, we need to update our selection\n            this.currentRange = undefined; // current range is set by zoom events, we want to reset it only if there are no select (ie. no user interaction)\n        }\n\n        // Initialize timeseries\n        if(!this.timeseries$ || changes[\"timeseries\"]) {\n            // Create one observable per timeline\n            this.timeseries$ = this.timeseries.map(_ => new ReplaySubject(1));\n            this.mergedTimeseries$ = combineLatest(this.timeseries$);\n        }\n\n        this.updateTimeseries();\n\n        // Initialize events\n        if(!this.events$ || changes[\"events\"]) {\n            this.events$ = this.events.map(_ => new ReplaySubject(1));\n            this.mergedEvents$ = combineLatest(this.events$).pipe(\n                map(events => ([] as TimelineEvent[]).concat(...events))\n            );\n        }\n\n        this.updateEvents();\n        \n    }\n\n    /**\n     * For each timeseries configuration given as an input,\n     * update the data via the list of observables (timelines$)\n     */\n    updateTimeseries() {\n        this.timeseries.forEach((config, i) => {\n\n            const subject = this.timeseries$[i];\n\n            if((config as TimelineSeries).dates !== undefined) {\n                subject.next(config as TimelineSeries);\n            }\n\n            else {\n                let agg = config as TimelineAggregation;\n                if(agg.aggregation === undefined){\n                    \n                    config = config as TimelineCombinedAggregations;\n                    // We want to set the default scale if it hasn't been set before\n                    // or if no zoom/selection has been made (so current scale may not be adapted to the new results)\n                    if(!this.currentRange || !config.current){\n                        config.current = config.default;\n                    }\n\n                    agg = config.current;\n                }\n                \n                const range: [Date, Date] | undefined = !!this.minAggregationDate && !!this.maxAggregationDate ?\n                    [this.minAggregationDate, this.maxAggregationDate] : undefined;\n\n                this.getTimeseries(agg, range).subscribe({\n                    next: d => subject.next(d),\n                    error: err => subject.error(err)\n                });\n            }\n\n        });\n    }\n\n    /**\n     * For each event configuration given as an input, \n     * update the data via the list of observables (events$)\n     */\n    updateEvents() {\n        this.events.forEach((config, i) => {\n            const subject = this.events$[i];\n\n            if((config as TimelineRecords).field) {\n                subject.next(this.getRecordsAsEvents(config as TimelineRecords));\n            }\n            else if((config as TimelineEventAggregation).aggregation){\n                this.getEventAggregation(config as TimelineEventAggregation).subscribe({\n                    next: t => subject.next(t),\n                    error: err => subject.error(err)\n                });\n            }\n            else if(Array.isArray(config)){\n                subject.next(config as TimelineEvent[]);\n            }\n        });\n    }\n\n    /**\n     * Get a timeseries aggregation via the getAggregation method.\n     * @param config \n     * @param subject \n     * @param range \n     */\n    getTimeseries(config: TimelineAggregation, range?: [Date, Date]): Observable {\n        return this.getAggregation(config.aggregation, range).pipe(\n            map(d => BsFacetTimelineComponent.createTimeseries(config, d.aggregation, d.ccaggregation, range))\n        );\n    }\n\n    /**\n     * Get an aggregation of events via the getAggregation method\n     * @param config \n     * @param subject \n     */\n    getEventAggregation(config: TimelineEventAggregation): Observable {\n        return this.getAggregation(config.aggregation).pipe(\n            map(d => BsFacetTimelineComponent.createAggregationEvents(config, d.aggregation, d.ccaggregation))\n        );\n    }\n\n    /**\n     * Returns the list of records from the results as a list of TimelineEvent when they have a\n     * modified date. The size and styles of the events are determined from the given configuration (TimelineRecords)\n     * @param config \n     */\n    getRecordsAsEvents(config: TimelineRecords): TimelineEvent[] {\n        if(this.results) {\n            return this.results.records\n                .filter(r => !!Utils.toDate(r[config.field]))\n                .map(r => {\n                    return {\n                        id: r.id,\n                        date: Utils.toDate(r[config.field])!,\n                        size: !config.size? 6 : typeof config.size === 'function'? config.size(r, r.$selected) : config.size,\n                        styles: !config.styles? BsFacetTimelineComponent.defaultRecordStyle(r.$selected) :\n                                typeof config.styles === 'function'? config.styles(r, r.$selected) : \n                                config.styles,\n                        display: config.display? config.display(r) : r.title,\n                        // Custom property for click action\n                        record: r\n                    }\n                });\n        }\n        return [];\n    }\n\n\n    /**\n     * returns an aggregation and its configuration either directly from the facet service of\n     * by fetching it from the server.\n     * @param aggregationName \n     * @param range \n     */\n    getAggregation(aggregationName: string, range?: [Date, Date]): Observable {\n        \n        const ccaggregation = this.appService.getCCAggregation(aggregationName);\n        const aggregation = this.facetService.getAggregation(aggregationName, this.results);\n        \n        if(aggregation && ccaggregation) {\n            return of({aggregation: aggregation, ccaggregation: ccaggregation});\n        }\n\n        else if(ccaggregation) {\n            return this.fetchAggregation(aggregationName, ccaggregation, range).pipe(\n                map(agg => {return {aggregation: agg, ccaggregation: ccaggregation} })\n            );\n        }\n\n        else {\n            throw new Error(`Aggregation ${aggregationName} does not exist in the Query web service`);\n        }\n    }\n\n    /**\n     * Get an aggregation from the server, filtering by range if provided\n     * @param aggregation \n     * @param ccaggregation \n     * @param range \n     */\n    fetchAggregation(aggregation: string, ccaggregation: CCAggregation, range?: [Date, Date]): Observable {\n        const query = Utils.copy(this.searchService.query);\n        query.action = \"aggregate\";\n        query.aggregations = [aggregation];\n\n        if(range){\n            query.addSelect(`${ccaggregation.column}:[${this.formatDayRequest(range[0])}..${this.formatDayRequest(range[1])}]`);\n        }\n\n        return this.searchService.getResults(query, undefined, {searchInactive: true}).pipe(\n            map(results => results.aggregations[0])\n        );\n    }\n\n    /**\n     * Given a combined aggregation configuration and a range, this method searches for the most \n     * adapted aggregation scale (years, months, weeks or days) and updates the data if necessary.\n     * @param config \n     * @param range \n     * @param iTimeseries \n     */\n    updateCombinedAggregation(config: TimelineCombinedAggregations, range: [Date, Date], timeseries$: ReplaySubject) {\n        const nmonths = d3.timeMonth.count(range[0], range[1]);\n\n        if(!config.maxNMonths || config.maxNMonths.length !== config.aggregations.length) {\n            console.error(config);\n            throw new Error(\"maxNMonths and aggregations must have the same number of items\");\n        }\n\n        // Find the aggregation with min maxNMonths with maxNMonths >= nmonths\n        let jMin;\n        config.maxNMonths.forEach((maxNMonths, j) => {\n            if(maxNMonths >= nmonths && (jMin === undefined || maxNMonths  this.currentRange[1])) {\n\n            config.current = bestAggregation;\n            this.getTimeseries(bestAggregation, range).subscribe({\n                next: d => timeseries$.next(d),\n                error: err => timeseries$.error(err)\n            });\n        }\n\n    }\n\n\n    // Interaction callbacks\n\n    /**\n     * On selection is triggered when the user selects a range of dates on the timeline.\n     * This has the effect of updating the query.select (either remove it or add/replace it)\n     * and it updates the search.\n     * @param selection \n     */\n    onSelectionChange(selection: [Date, Date] | undefined) {\n        this.selection = selection;\n        if(selection) {\n            const from = this.formatDayRequest(selection[0]);\n            const to = this.formatDayRequest(selection[1]);\n\n            const exprs: string[] = [];\n            this.searchService.query.removeSelect(this.name);\n\n            this.timeseries.forEach((config) => {\n                    \n                if((config as TimelineAggregation).aggregation !== undefined \n                || (config as TimelineCombinedAggregations).default !== undefined) {\n\n                    const aggregation = (config as TimelineAggregation).aggregation || (config as TimelineCombinedAggregations).default.aggregation;\n                    const ccaggregation = this.appService.getCCAggregation(aggregation);\n                    if(ccaggregation) {\n                        exprs.push(this.exprBuilder.makeRangeExpr(ccaggregation.column, from, to));\n                    }\n                }\n\n            });\n\n            if(exprs.length > 0) {\n                const expr = this.exprBuilder.concatOrExpr(exprs);\n                this.searchService.query.addSelect(expr, this.name);\n                this.searchService.search(undefined, {type:AuditEventType.Search_Timeline_Usage, detail: { from, to }});\n            }            \n        }\n\n        else if(this.searchService.query.findSelect(this.name)) {\n            this.searchService.query.removeSelect(this.name);\n            this.searchService.search();\n        }\n    }\n\n    /**\n     * On range is triggered when the user zooms in our out on the timeline,\n     * which triggers a dynamic update of the combined aggregation timelines.\n     * @param range \n     */\n    onRangeChange(range: [Date, Date]) {\n\n        this.timeseries.forEach((config, i) => {\n            if((config as TimelineCombinedAggregations).aggregations !== undefined) {\n                this.updateCombinedAggregation(config as TimelineCombinedAggregations, range, this.timeseries$[i]);\n            }\n        });\n\n        // Note: updateCombinedAggregation() compares currentRange and range\n        // So this update must be kept after the forEach\n        this.currentRange = range;        \n    }\n\n    /**\n     * When an event is clicked, the event is propagated to the parent, and the tooltip is closed\n     * @param event \n     * @param closeTooltip \n     */\n    onEventClicked(event: TimelineEvent, closeTooltip: () => void) {\n        this.eventClicked.next(event);\n        closeTooltip();\n        return false;\n    }\n\n\n    // Static utility methods\n    \n    \n    /**\n     * Create a time series object from its config, data (aggregation) and configuration (ccaggregation)\n     * @param config \n     * @param aggregation \n     * @param ccaggregation \n     */\n    static createTimeseries(config: TimelineAggregation, aggregation: Aggregation, ccaggregation: CCAggregation, range?: [Date, Date]): TimelineSeries {\n        return {\n            name: config.name || aggregation.name,\n            primary: config.primary,\n            dates: this.createDatapoints(aggregation.items, ccaggregation?.mask, range),\n            lineStyles: config.lineStyles,\n            areaStyles: config.areaStyles\n        }\n    }\n\n    /**\n     * Create a list of events from its config, data (aggregation) and configuration (ccaggregation)\n     * @param config \n     * @param aggregation \n     * @param ccaggregation \n     */\n    static createAggregationEvents(config: TimelineEventAggregation, aggregation: Aggregation, ccaggregation: CCAggregation): TimelineEvent[] {\n        return !aggregation.items? [] : aggregation.items.map(item => {\n            return {\n                id: config.getDate(item).toUTCString()+\"|\"+config.getDisplay(item),\n                date: config.getDate(item),\n                size: !config.size? 6 : typeof config.size === 'function'? config.size(item) : config.size,\n                styles: !config.styles? undefined :\n                        typeof config.styles === 'function'? config.styles(item) : \n                        config.styles,                \n                display: config.getDisplay(item),\n\n                // Custom params for click action\n                item: item,\n                aggregation: aggregation,\n                ccaggregation: ccaggregation\n            }\n        });\n    }\n\n    /**\n     * This methods transforms a raw list of aggregation items into\n     * a time series completed with zeros, following the below scheme:\n     * Aggregation:  [    # #         # # #   #     # #       # # #    ]\n     * Series:       [  0 # # 0     0 # # # 0 # 0 0 # # 0   0 # # # 0  ]\n     * @param items \n     * @param resolution \n     */\n    static createDatapoints(items: AggregationItem[] | undefined, resolution: string, range?: [Date, Date]): TimelineDate[] {\n\n        if(!items) {\n            return [];\n        }\n\n        const timeInterval = this.getD3TimeInterval(resolution);\n        \n        const series: TimelineDate[] = [];\n\n        const _items = items\n            .map(item => {\n                if(!!item.value && !(item.value instanceof Date)){\n                    const val = item.value.toString();\n                    item.value = moment(val.length  undefined; // So it gets filtered out\n                    }\n                }\n                return item;\n            })\n            .filter(item => !!item.value && (!range || ((item.value as Date) >= range[0] && (item.value as Date)  {\n            const date = item.value as Date;\n            \n            if(i === 0 || timeInterval.offset(series[series.length-1].date, 1)  item.date = this.shiftDate(item.date, resolution));\n\n        return series;\n    }\n\n    \n    /**\n     * Shift the date to the middle of their time bracket (2020 = middle of the year, April = middle of the month, etc.)\n     * @param date \n     * @param resolution \n     */\n    static shiftDate(date: Date, resolution: string): Date {\n        switch(resolution){\n            case \"YYYY-MM-DD\": return d3.timeHour.offset(date, 12);\n            case \"YYYY-WW\": return d3.timeHour.offset(date, 84); // 3*24 + 12\n            case \"YYYY-MM\": return d3.timeDay.offset(date, 15);\n            case \"YYYY\": return d3.timeMonth.offset(date, 6);\n        }\n        return date;\n    }\n\n\n    static getD3TimeInterval(resolution: string): d3.CountableTimeInterval {\n        switch(resolution){\n            case \"YYYY-MM-DD\": return d3.timeDay;\n            case \"YYYY-WW\": return d3.timeWeek;\n            case \"YYYY-MM\": return d3.timeMonth;\n            case \"YYYY\": return d3.timeYear;\n        }\n        return d3.timeDay;\n    }\n\n    static defaultRecordStyle(selected: boolean): {[key: string]: any} {\n        return {\n            'fill': selected? 'red' : 'green',\n            'stroke': selected? 'red' : undefined,\n            'stroke-width': selected? '2px' : undefined\n        };\n    }\n}\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/TimelineRecords.html":{"url":"interfaces/TimelineRecords.html","title":"interface - TimelineRecords","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  TimelineRecords\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            timeline/bootstrap/facet-timeline.component.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        display\n                                \n                                \n                                        field\n                                \n                                \n                                            Optional\n                                        size\n                                \n                                \n                                            Optional\n                                        styles\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        display\n                                    \n                                \n                                \n                                    \n                                        display:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        field\n                                    \n                                \n                                \n                                    \n                                        field:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        size\n                                    \n                                \n                                \n                                    \n                                        size:     number | \n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     number | \n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        styles\n                                    \n                                \n                                \n                                    \n                                        styles:     literal type | \n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type | \n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Component, Input, OnChanges, ChangeDetectorRef, SimpleChanges, Output, EventEmitter } from '@angular/core';\nimport { Observable, of, combineLatest, ReplaySubject } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { Results, AggregationItem, Aggregation, CCAggregation, Record, AuditWebService, AuditEventType } from '@sinequa/core/web-services';\nimport { AppService, Expr, ExprBuilder } from '@sinequa/core/app-utils';\nimport { Utils } from '@sinequa/core/base';\nimport { AbstractFacet, FacetService } from '@sinequa/components/facet';\nimport { SearchService } from '@sinequa/components/search';\nimport { SelectionService } from '@sinequa/components/selection';\nimport { Action } from '@sinequa/components/action';\nimport { TimelineSeries, TimelineDate, TimelineEvent } from './timeline.component';\nimport moment from 'moment';\nimport * as d3 from 'd3';\n\nexport interface TimelineAggregation {\n    name?: string;\n    aggregation: string;\n    primary: boolean;\n    areaStyles?: {[key: string]: any};\n    lineStyles?: {[key: string]: any};\n}\n\nexport interface TimelineCombinedAggregations {\n    aggregations: TimelineAggregation[];\n    maxNMonths: number[]; // Maximum number of months for which to use this aggregation\n    default: TimelineAggregation; // Aggregation to use by default \n    current?: TimelineAggregation; // (this field is overriden by the component when switching aggregation)\n}\n\nexport interface TimelineRecords {\n    field: string;\n    size?: number | ((record: Record, selected: boolean) => number);\n    styles?: {[key: string]: any} | ((record: Record, selected: boolean) => {[key: string]: any});\n    display?: (record: Record) => string;\n}\n\nexport interface TimelineEventAggregation {\n    aggregation: string;\n    getDate: ((item: AggregationItem) => Date);\n    getDisplay: ((item: AggregationItem) => string);\n    size?: number | ((item: AggregationItem) => number);\n    styles?: {[key: string]: any} | ((item: AggregationItem) => {[key: string]: any});\n}\n\nexport type TimelineData = TimelineSeries | TimelineAggregation | TimelineCombinedAggregations;\n\nexport type TimelineEventData = TimelineEvent[] | TimelineRecords | TimelineEventAggregation;\n\n@Component({\n    selector: 'sq-facet-timeline',\n    templateUrl: './facet-timeline.component.html',\n    styleUrls: ['./facet-timeline.component.scss']\n})\nexport class BsFacetTimelineComponent extends AbstractFacet implements OnChanges {\n    @Input() name = 'Timeline';\n    @Input() results: Results;\n    \n    // By default, we show the standard Timeline aggregation and the list of current records\n    @Input() timeseries: TimelineData[] = [{aggregation: 'Timeline', primary: true}];\n    @Input() events: TimelineEventData[] = [{field: 'modified'}];\n\n    // Initial scale (prior to any zoom)\n    @Input() minDate?: Date;\n    @Input() maxDate?: Date;\n    // Date range to filter aggregations (ignored when combined aggregations are recomputed based on zoomed range)\n    @Input() minAggregationDate?: Date;\n    @Input() maxAggregationDate?: Date;\n    \n    @Input() zoomable = true;\n    @Input() minZoomDays = 1; // Max 1 day scale\n    @Input() maxZoomDays = 365 * 100; // Max 100 years scale\n\n    @Input() width = 600;\n    @Input() height = 200;\n    @Input() margin = {top: 15, bottom: 30, left: 40, right: 15};\n\n    @Input() curveType = \"curveMonotoneX\";\n\n    @Input() showTooltip = true;\n    @Input() theme: \"light\" | \"dark\" = \"light\";\n\n    @Output() eventClicked = new EventEmitter();\n\n    // List of observables (one per timeseries / event type)\n    timeseries$: ReplaySubject[];\n    events$: ReplaySubject[];\n\n    // Combination (combineLastest) of the timeline observables\n    mergedTimeseries$: Observable;\n    mergedEvents$: Observable;\n\n    // Current timeline selection\n    selection?: [Date, Date];\n\n    // Current range (undefined if no zoom / auto-scaling)\n    currentRange?: [Date, Date];\n\n    // Formating method for search queries\n    formatDayRequest = d3.timeFormat(\"%Y-%m-%d\");\n\n    // Actions\n    clearFilters: Action;\n\n    constructor(\n        public facetService: FacetService,\n        public searchService: SearchService,\n        public appService: AppService,\n        public selectionService: SelectionService,\n        public exprBuilder: ExprBuilder,\n        public cdRef: ChangeDetectorRef,\n        public audit: AuditWebService\n    ){\n        super();\n\n        // Update the events when the selection of records changes\n        this.selectionService.events.subscribe(event => {\n            const i = this.events.findIndex(e => (e as TimelineRecords).field);\n            if(i !== -1) {\n                this.events$[i].next(this.getRecordsAsEvents(this.events[i] as TimelineRecords));\n            }\n        });\n        \n        // Clear the current filters\n        this.clearFilters = new Action({\n            icon: \"far fa-minus-square\",\n            title: \"msg#facet.clearSelects\",\n            action: () => {\n                this.selection = undefined;\n                this.searchService.query.removeSelect(this.name);\n                this.searchService.search();\n            }\n        });\n\n    }\n\n    getMinDate(): Date | undefined {\n        return this.currentRange? this.currentRange[0] : this.minDate;\n    }\n\n    getMaxDate(): Date | undefined {\n        return this.currentRange? this.currentRange[1] : this.maxDate;\n    }\n\n    get actions(): Action[] {\n        const actions: Action[] = [];\n        if(this.facetService.hasFiltered(this.name)){\n            actions.push(this.clearFilters);\n        }\n        return actions;\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n\n        // Retrieve the current active selection for this timeline (if any)\n        const select = this.searchService.query.findSelect(this.name);\n\n        // Update the selection if it is not already set (which is the case on a page refresh)\n        if(select && !this.selection) {\n            let parsedexpr = this.appService.parseExpr(select.expression) as Expr;\n            if(!Utils.isString(parsedexpr)){\n                while(!parsedexpr.isLeaf){ // The select might over multiple fields (modified between [...] AND created between [...])\n                    parsedexpr = parsedexpr.operands[0];\n                }\n                if(parsedexpr.values){\n                    this.selection = [new Date(parsedexpr.values[0]), new Date(parsedexpr.values[1])];\n                }\n            }\n        }\n        // If no active selection we remove the selection from the timeline, along with the current zoomed range\n        else if(!select) {\n            this.selection = undefined; // If no select, it was possibly removed by the user, we need to update our selection\n            this.currentRange = undefined; // current range is set by zoom events, we want to reset it only if there are no select (ie. no user interaction)\n        }\n\n        // Initialize timeseries\n        if(!this.timeseries$ || changes[\"timeseries\"]) {\n            // Create one observable per timeline\n            this.timeseries$ = this.timeseries.map(_ => new ReplaySubject(1));\n            this.mergedTimeseries$ = combineLatest(this.timeseries$);\n        }\n\n        this.updateTimeseries();\n\n        // Initialize events\n        if(!this.events$ || changes[\"events\"]) {\n            this.events$ = this.events.map(_ => new ReplaySubject(1));\n            this.mergedEvents$ = combineLatest(this.events$).pipe(\n                map(events => ([] as TimelineEvent[]).concat(...events))\n            );\n        }\n\n        this.updateEvents();\n        \n    }\n\n    /**\n     * For each timeseries configuration given as an input,\n     * update the data via the list of observables (timelines$)\n     */\n    updateTimeseries() {\n        this.timeseries.forEach((config, i) => {\n\n            const subject = this.timeseries$[i];\n\n            if((config as TimelineSeries).dates !== undefined) {\n                subject.next(config as TimelineSeries);\n            }\n\n            else {\n                let agg = config as TimelineAggregation;\n                if(agg.aggregation === undefined){\n                    \n                    config = config as TimelineCombinedAggregations;\n                    // We want to set the default scale if it hasn't been set before\n                    // or if no zoom/selection has been made (so current scale may not be adapted to the new results)\n                    if(!this.currentRange || !config.current){\n                        config.current = config.default;\n                    }\n\n                    agg = config.current;\n                }\n                \n                const range: [Date, Date] | undefined = !!this.minAggregationDate && !!this.maxAggregationDate ?\n                    [this.minAggregationDate, this.maxAggregationDate] : undefined;\n\n                this.getTimeseries(agg, range).subscribe({\n                    next: d => subject.next(d),\n                    error: err => subject.error(err)\n                });\n            }\n\n        });\n    }\n\n    /**\n     * For each event configuration given as an input, \n     * update the data via the list of observables (events$)\n     */\n    updateEvents() {\n        this.events.forEach((config, i) => {\n            const subject = this.events$[i];\n\n            if((config as TimelineRecords).field) {\n                subject.next(this.getRecordsAsEvents(config as TimelineRecords));\n            }\n            else if((config as TimelineEventAggregation).aggregation){\n                this.getEventAggregation(config as TimelineEventAggregation).subscribe({\n                    next: t => subject.next(t),\n                    error: err => subject.error(err)\n                });\n            }\n            else if(Array.isArray(config)){\n                subject.next(config as TimelineEvent[]);\n            }\n        });\n    }\n\n    /**\n     * Get a timeseries aggregation via the getAggregation method.\n     * @param config \n     * @param subject \n     * @param range \n     */\n    getTimeseries(config: TimelineAggregation, range?: [Date, Date]): Observable {\n        return this.getAggregation(config.aggregation, range).pipe(\n            map(d => BsFacetTimelineComponent.createTimeseries(config, d.aggregation, d.ccaggregation, range))\n        );\n    }\n\n    /**\n     * Get an aggregation of events via the getAggregation method\n     * @param config \n     * @param subject \n     */\n    getEventAggregation(config: TimelineEventAggregation): Observable {\n        return this.getAggregation(config.aggregation).pipe(\n            map(d => BsFacetTimelineComponent.createAggregationEvents(config, d.aggregation, d.ccaggregation))\n        );\n    }\n\n    /**\n     * Returns the list of records from the results as a list of TimelineEvent when they have a\n     * modified date. The size and styles of the events are determined from the given configuration (TimelineRecords)\n     * @param config \n     */\n    getRecordsAsEvents(config: TimelineRecords): TimelineEvent[] {\n        if(this.results) {\n            return this.results.records\n                .filter(r => !!Utils.toDate(r[config.field]))\n                .map(r => {\n                    return {\n                        id: r.id,\n                        date: Utils.toDate(r[config.field])!,\n                        size: !config.size? 6 : typeof config.size === 'function'? config.size(r, r.$selected) : config.size,\n                        styles: !config.styles? BsFacetTimelineComponent.defaultRecordStyle(r.$selected) :\n                                typeof config.styles === 'function'? config.styles(r, r.$selected) : \n                                config.styles,\n                        display: config.display? config.display(r) : r.title,\n                        // Custom property for click action\n                        record: r\n                    }\n                });\n        }\n        return [];\n    }\n\n\n    /**\n     * returns an aggregation and its configuration either directly from the facet service of\n     * by fetching it from the server.\n     * @param aggregationName \n     * @param range \n     */\n    getAggregation(aggregationName: string, range?: [Date, Date]): Observable {\n        \n        const ccaggregation = this.appService.getCCAggregation(aggregationName);\n        const aggregation = this.facetService.getAggregation(aggregationName, this.results);\n        \n        if(aggregation && ccaggregation) {\n            return of({aggregation: aggregation, ccaggregation: ccaggregation});\n        }\n\n        else if(ccaggregation) {\n            return this.fetchAggregation(aggregationName, ccaggregation, range).pipe(\n                map(agg => {return {aggregation: agg, ccaggregation: ccaggregation} })\n            );\n        }\n\n        else {\n            throw new Error(`Aggregation ${aggregationName} does not exist in the Query web service`);\n        }\n    }\n\n    /**\n     * Get an aggregation from the server, filtering by range if provided\n     * @param aggregation \n     * @param ccaggregation \n     * @param range \n     */\n    fetchAggregation(aggregation: string, ccaggregation: CCAggregation, range?: [Date, Date]): Observable {\n        const query = Utils.copy(this.searchService.query);\n        query.action = \"aggregate\";\n        query.aggregations = [aggregation];\n\n        if(range){\n            query.addSelect(`${ccaggregation.column}:[${this.formatDayRequest(range[0])}..${this.formatDayRequest(range[1])}]`);\n        }\n\n        return this.searchService.getResults(query, undefined, {searchInactive: true}).pipe(\n            map(results => results.aggregations[0])\n        );\n    }\n\n    /**\n     * Given a combined aggregation configuration and a range, this method searches for the most \n     * adapted aggregation scale (years, months, weeks or days) and updates the data if necessary.\n     * @param config \n     * @param range \n     * @param iTimeseries \n     */\n    updateCombinedAggregation(config: TimelineCombinedAggregations, range: [Date, Date], timeseries$: ReplaySubject) {\n        const nmonths = d3.timeMonth.count(range[0], range[1]);\n\n        if(!config.maxNMonths || config.maxNMonths.length !== config.aggregations.length) {\n            console.error(config);\n            throw new Error(\"maxNMonths and aggregations must have the same number of items\");\n        }\n\n        // Find the aggregation with min maxNMonths with maxNMonths >= nmonths\n        let jMin;\n        config.maxNMonths.forEach((maxNMonths, j) => {\n            if(maxNMonths >= nmonths && (jMin === undefined || maxNMonths  this.currentRange[1])) {\n\n            config.current = bestAggregation;\n            this.getTimeseries(bestAggregation, range).subscribe({\n                next: d => timeseries$.next(d),\n                error: err => timeseries$.error(err)\n            });\n        }\n\n    }\n\n\n    // Interaction callbacks\n\n    /**\n     * On selection is triggered when the user selects a range of dates on the timeline.\n     * This has the effect of updating the query.select (either remove it or add/replace it)\n     * and it updates the search.\n     * @param selection \n     */\n    onSelectionChange(selection: [Date, Date] | undefined) {\n        this.selection = selection;\n        if(selection) {\n            const from = this.formatDayRequest(selection[0]);\n            const to = this.formatDayRequest(selection[1]);\n\n            const exprs: string[] = [];\n            this.searchService.query.removeSelect(this.name);\n\n            this.timeseries.forEach((config) => {\n                    \n                if((config as TimelineAggregation).aggregation !== undefined \n                || (config as TimelineCombinedAggregations).default !== undefined) {\n\n                    const aggregation = (config as TimelineAggregation).aggregation || (config as TimelineCombinedAggregations).default.aggregation;\n                    const ccaggregation = this.appService.getCCAggregation(aggregation);\n                    if(ccaggregation) {\n                        exprs.push(this.exprBuilder.makeRangeExpr(ccaggregation.column, from, to));\n                    }\n                }\n\n            });\n\n            if(exprs.length > 0) {\n                const expr = this.exprBuilder.concatOrExpr(exprs);\n                this.searchService.query.addSelect(expr, this.name);\n                this.searchService.search(undefined, {type:AuditEventType.Search_Timeline_Usage, detail: { from, to }});\n            }            \n        }\n\n        else if(this.searchService.query.findSelect(this.name)) {\n            this.searchService.query.removeSelect(this.name);\n            this.searchService.search();\n        }\n    }\n\n    /**\n     * On range is triggered when the user zooms in our out on the timeline,\n     * which triggers a dynamic update of the combined aggregation timelines.\n     * @param range \n     */\n    onRangeChange(range: [Date, Date]) {\n\n        this.timeseries.forEach((config, i) => {\n            if((config as TimelineCombinedAggregations).aggregations !== undefined) {\n                this.updateCombinedAggregation(config as TimelineCombinedAggregations, range, this.timeseries$[i]);\n            }\n        });\n\n        // Note: updateCombinedAggregation() compares currentRange and range\n        // So this update must be kept after the forEach\n        this.currentRange = range;        \n    }\n\n    /**\n     * When an event is clicked, the event is propagated to the parent, and the tooltip is closed\n     * @param event \n     * @param closeTooltip \n     */\n    onEventClicked(event: TimelineEvent, closeTooltip: () => void) {\n        this.eventClicked.next(event);\n        closeTooltip();\n        return false;\n    }\n\n\n    // Static utility methods\n    \n    \n    /**\n     * Create a time series object from its config, data (aggregation) and configuration (ccaggregation)\n     * @param config \n     * @param aggregation \n     * @param ccaggregation \n     */\n    static createTimeseries(config: TimelineAggregation, aggregation: Aggregation, ccaggregation: CCAggregation, range?: [Date, Date]): TimelineSeries {\n        return {\n            name: config.name || aggregation.name,\n            primary: config.primary,\n            dates: this.createDatapoints(aggregation.items, ccaggregation?.mask, range),\n            lineStyles: config.lineStyles,\n            areaStyles: config.areaStyles\n        }\n    }\n\n    /**\n     * Create a list of events from its config, data (aggregation) and configuration (ccaggregation)\n     * @param config \n     * @param aggregation \n     * @param ccaggregation \n     */\n    static createAggregationEvents(config: TimelineEventAggregation, aggregation: Aggregation, ccaggregation: CCAggregation): TimelineEvent[] {\n        return !aggregation.items? [] : aggregation.items.map(item => {\n            return {\n                id: config.getDate(item).toUTCString()+\"|\"+config.getDisplay(item),\n                date: config.getDate(item),\n                size: !config.size? 6 : typeof config.size === 'function'? config.size(item) : config.size,\n                styles: !config.styles? undefined :\n                        typeof config.styles === 'function'? config.styles(item) : \n                        config.styles,                \n                display: config.getDisplay(item),\n\n                // Custom params for click action\n                item: item,\n                aggregation: aggregation,\n                ccaggregation: ccaggregation\n            }\n        });\n    }\n\n    /**\n     * This methods transforms a raw list of aggregation items into\n     * a time series completed with zeros, following the below scheme:\n     * Aggregation:  [    # #         # # #   #     # #       # # #    ]\n     * Series:       [  0 # # 0     0 # # # 0 # 0 0 # # 0   0 # # # 0  ]\n     * @param items \n     * @param resolution \n     */\n    static createDatapoints(items: AggregationItem[] | undefined, resolution: string, range?: [Date, Date]): TimelineDate[] {\n\n        if(!items) {\n            return [];\n        }\n\n        const timeInterval = this.getD3TimeInterval(resolution);\n        \n        const series: TimelineDate[] = [];\n\n        const _items = items\n            .map(item => {\n                if(!!item.value && !(item.value instanceof Date)){\n                    const val = item.value.toString();\n                    item.value = moment(val.length  undefined; // So it gets filtered out\n                    }\n                }\n                return item;\n            })\n            .filter(item => !!item.value && (!range || ((item.value as Date) >= range[0] && (item.value as Date)  {\n            const date = item.value as Date;\n            \n            if(i === 0 || timeInterval.offset(series[series.length-1].date, 1)  item.date = this.shiftDate(item.date, resolution));\n\n        return series;\n    }\n\n    \n    /**\n     * Shift the date to the middle of their time bracket (2020 = middle of the year, April = middle of the month, etc.)\n     * @param date \n     * @param resolution \n     */\n    static shiftDate(date: Date, resolution: string): Date {\n        switch(resolution){\n            case \"YYYY-MM-DD\": return d3.timeHour.offset(date, 12);\n            case \"YYYY-WW\": return d3.timeHour.offset(date, 84); // 3*24 + 12\n            case \"YYYY-MM\": return d3.timeDay.offset(date, 15);\n            case \"YYYY\": return d3.timeMonth.offset(date, 6);\n        }\n        return date;\n    }\n\n\n    static getD3TimeInterval(resolution: string): d3.CountableTimeInterval {\n        switch(resolution){\n            case \"YYYY-MM-DD\": return d3.timeDay;\n            case \"YYYY-WW\": return d3.timeWeek;\n            case \"YYYY-MM\": return d3.timeMonth;\n            case \"YYYY\": return d3.timeYear;\n        }\n        return d3.timeDay;\n    }\n\n    static defaultRecordStyle(selected: boolean): {[key: string]: any} {\n        return {\n            'fill': selected? 'red' : 'green',\n            'stroke': selected? 'red' : undefined,\n            'stroke-width': selected? '2px' : undefined\n        };\n    }\n}\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/TimelineSeries.html":{"url":"interfaces/TimelineSeries.html","title":"interface - TimelineSeries","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  TimelineSeries\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            timeline/bootstrap/timeline.component.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        areaStyles\n                                \n                                \n                                        dates\n                                \n                                \n                                            Optional\n                                        lineStyles\n                                \n                                \n                                        name\n                                \n                                \n                                        primary\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        areaStyles\n                                    \n                                \n                                \n                                    \n                                        areaStyles:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        dates\n                                    \n                                \n                                \n                                    \n                                        dates:         TimelineDate[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         TimelineDate[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        lineStyles\n                                    \n                                \n                                \n                                    \n                                        lineStyles:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        name\n                                    \n                                \n                                \n                                    \n                                        name:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        primary\n                                    \n                                \n                                \n                                    \n                                        primary:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Component, Input, Output, ElementRef, ViewChild, OnChanges, AfterViewInit, EventEmitter, SimpleChanges, OnDestroy, SimpleChange, ContentChild, TemplateRef, ChangeDetectorRef } from '@angular/core';\nimport { Subscription } from 'rxjs';\nimport * as d3 from 'd3';\n\nimport { IntlService } from '@sinequa/core/intl';\nimport {Record} from '@sinequa/core/web-services';\n\n\nexport interface TimelineDate {\n    date: Date;\n    value: number;\n}\n\nexport interface TimelineSeries {\n    name: string;\n    dates: TimelineDate[];\n    primary: boolean;\n    lineStyles?: {[key:string]: any};\n    areaStyles?:  {[key:string]: any};\n}\n\nexport interface TimelineEvent {\n    date: Date;\n    id: string;\n    display: string;\n    size?: number;\n    sizeOpened?: number;\n    styles?: {[key:string]: any};\n    record?: Record;\n}\n\n@Component({\n    selector: 'sq-timeline',\n    templateUrl: './timeline.component.html',\n    styleUrls: ['./timeline.component.scss']\n})\nexport class BsTimelineComponent implements OnChanges, AfterViewInit, OnDestroy {\n\n    @Input() data?: TimelineSeries[];\n    @Input() events?: TimelineEvent[];\n\n    @Input() selection?: [Date, Date];\n\n    // Initial scale (prior to any zoom)\n    @Input() minDate?: Date;\n    @Input() maxDate?: Date;\n\n    @Input() zoomable = true;\n    @Input() minZoomDays = 1; // Max 1 day scale\n    @Input() maxZoomDays = 365 * 100; // Max 100 years scale\n\n    @Input() width = 600;\n    @Input() height = 200;\n    @Input() margin = {top: 15, bottom: 30, left: 40, right: 15};\n\n    @Input() curveType = \"curveMonotoneX\";\n\n    @Input() showTooltip = true;\n    @Input() theme: \"light\" | \"dark\" = \"light\";\n\n    @Output() selectionChange = new EventEmitter();\n    @Output() rangeChange = new EventEmitter();\n\n    @ContentChild(\"tooltipTpl\", {static: false}) tooltipTpl: TemplateRef;\n\n    // Data\n    groupedEvents: TimelineEvent[][] = [];\n\n    // Scales\n    x: d3.ScaleTime; // Read/Write\n    xt: d3.ScaleTime; // Transformed X axis due to Zoom\n    y: d3.ScaleLinear; // Read-only / domain updated\n\n    // Shapes\n    area: d3.Area; // Read only\n    line: d3.Line; // Read only\n\n    // Behaviors\n    brushBehavior: d3.BrushBehavior; // Read only\n    zoomBehavior: d3.ZoomBehavior; // Read/Write\n    brushSelection: [number, number] | null;\n    currentSelection?: Date[]; // Read/Write\n\n    // Elements\n    @ViewChild(\"xAxis\") gx: ElementRef;\n    @ViewChild(\"yAxis\") gy: ElementRef;\n    @ViewChild(\"brush\") gbrush: ElementRef;\n    \n    // Selections\n    xAxis$: d3.Selection;\n    yAxis$: d3.Selection;\n    brush$: d3.Selection;\n    grips$: d3.Selection;\n        \n    // Tooltip\n    tooltipItem: TimelineEvent[] | undefined;\n    tooltipX: number | undefined;\n    tooltipOrientation: \"left\" | \"right\";\n    tooltipTop: number;\n    tooltipRight: number;\n    tooltipLeft: number;\n\n    // Misc\n    viewInit: boolean;\n    intlSubscription: Subscription;\n    static counter = 0;\n    instance: number;\n    \n    zooming: boolean;\n    brushing: boolean;\n\n    constructor(\n        protected el: ElementRef,\n        protected intlService: IntlService,\n        protected cdRef: ChangeDetectorRef\n    ){\n        // When the locale changes, we rebuild the X scale and axis\n        this.intlSubscription = this.intlService.events.subscribe(e => this.updateXAxis());\n        \n        this.instance = BsTimelineComponent.counter++;\n        \n    }\n\n    get innerWidth(): number {\n        return this.width - this.margin.left - this.margin.right;\n    }\n\n    get innerHeight(): number {\n        return this.height - this.margin.top - this.margin.bottom;\n    }\n\n    // Note: ngOnChanges is always called once before ngAfterViewInit\n    ngOnChanges(changes: SimpleChanges) {\n\n        if(!this.x) {\n            \n            // Scales\n            this.x = d3.scaleUtc()\n                .range([0, this.innerWidth]);\n            this.xt = this.x;\n\n            this.y = d3.scaleLinear()\n                .range([this.innerHeight, 0]);\n                \n            // Shapes\n            this.area = d3.area()\n                .curve(d3[this.curveType])\n                .x(d => this.xt(d.date))\n                .y0(this.y(0))\n                .y1(d => this.y(d.value));\n                \n            this.line = d3.line()\n                .curve(d3[this.curveType])\n                .x(d => this.xt(d.date))\n                .y(d => this.y(d.value));\n                \n            // Behaviors\n            this.brushBehavior = d3.brushX()\n                .extent([[0, 0], [this.innerWidth, this.innerHeight]])\n                .on(\"start\", () => this.brushing = true)\n                .on('brush', () => this.onBrush())\n                .on('end', () => this.onBrushEnd());\n        }\n\n        // Resize handling\n\n        if(changes[\"height\"]) {\n            this.y.range([this.innerHeight, 0]);\n            this.area.y0(this.y(0));\n            this.brushBehavior.extent([[0, 0], [this.innerWidth, this.innerHeight]]);\n            if(this.viewInit) {\n                this.drawYAxis();\n                this.brush$.call(this.brushBehavior);\n                this.grips$.selectAll(\"path\").attr(\"d\", this.drawGrips);\n            }\n        }\n\n        if(changes[\"width\"]) {\n            this.x.range([0, this.innerWidth]);\n            this.brushBehavior.extent([[0, 0], [this.innerWidth, this.innerHeight]]);\n            if(this.viewInit) {\n                this.drawXAxis();\n                if(!changes[\"height\"]) {\n                    this.brush$.call(this.brushBehavior);\n                    this.grips$.selectAll(\"path\").attr(\"d\", this.drawGrips);\n                }\n            }\n        }\n\n        // If the parent changes the selection, we want to update it\n        // If not, we keep the current selection as is\n        // (Important to keep this statement outside of the if bellow since \n        // the change of selection can be combined with a change of data)\n        const selectionChanged = changes[\"selection\"] && this.updateSelection();\n\n        // Only changes in data result in redrawing the chart\n        // (other input, except selection, are expected to be static)\n        if(this.viewInit && changes[\"data\"] && this.checkDataChanges(changes[\"data\"])){\n            this.updateChart();\n        }\n\n        // If the parent changes the selection (even though the data hasn't changed), \n        // we want to update the brush.\n        // If not, we keep the current selection as is.\n        // We can update the brush only if the view is initialized (viewInit).\n        else if(this.viewInit && ((changes[\"selection\"] && selectionChanged) || changes[\"width\"])) {\n            this.updateBrush();\n        }\n\n        if(changes[\"events\"]) {\n            this.updateEvents();\n        }\n        \n    }\n\n    // Note: In onAfterViewInit we can access gx, gy, etc., obtained with @ViewChild.\n    // At this point we can initialize all the primitives and call updateChart()\n    ngAfterViewInit() {\n\n        // Get native elements\n        this.xAxis$ = d3.select(this.gx.nativeElement);\n        this.yAxis$ = d3.select(this.gy.nativeElement);\n        this.brush$ = d3.select(this.gbrush.nativeElement);\n\n        this.brush$\n            .call(this.brushBehavior)\n            .on(\"mousemove\", () => this.onMousemove())\n            .on(\"mouseout\", () => this.onMouseout());\n                        \n        // Add 2 \"grips\" to the brush goup, on each side of the rectangle\n        // Grips are inserted programmatically to appear on top the brush selection\n        this.grips$ = this.brush$.selectAll(\".grip\")\n            .data([{type: \"w\"}, {type: \"e\"}])\n            .enter()\n            .append(\"g\")\n            .attr(\"class\", \"grip\")\n            .attr(\"display\", \"none\");\n            \n        this.grips$.append(\"path\")\n            .attr(\"d\", this.drawGrips);\n\n        this.grips$.append(\"text\")\n            .attr(\"class\", \"grip-text\")\n            .attr(\"text-anchor\", d => d.type === \"w\"? 'end' : 'start')\n            .attr(\"x\", d => d.type === \"w\"? -5 : 5)\n            .attr(\"y\", 10);\n\n        this.viewInit = true;\n\n        this.updateChart();\n\n        // This is necessary to prevent \"Expression has changed after check\" errors\n        // caused by calling updateChart inside ngAfterViewInit().\n        // Unfortunately this is necessary because we need the DOM to be rendered in order fill the DOM\n        // (for example gAxis needs to exist so we can draw the axis)\n        this.cdRef.detectChanges();\n    }\n\n    /**\n     * Redraw the graph (needs to be called after ngAfterViewInit so that the DOM elements\n     * are accessible)\n     */\n    updateChart() {\n\n        this.turnoffTooltip();\n\n        if(this.data && this.data.length) {\n\n            // Update scales\n            // Note: does not stop the update process even if the data is invalid/empty\n            this.updateScales(this.data);\n\n            // Update Axes\n            this.updateAxes();\n            \n            // Update Zoom\n            this.updateZoom();\n\n            // Update brush\n            this.updateBrush();\n\n        }\n        \n    }\n\n\n    /**\n     * Update the x & y scales, based on the input data\n     * @param data \n     */\n    protected updateScales(data: TimelineSeries[]) {\n\n        // Set x and y scales with the primary series (or first one)\n        const primarySeries = data.filter(s => s.primary) || [data[0]];\n        const allPrimaryDates = ([] as TimelineDate[]).concat(...primarySeries.map(s => s.dates));\n\n        const xExtent = d3.extent(allPrimaryDates, d => d.date);\n        const yMax = d3.max(data, \n            s => d3.max(s.dates, d => d.value));\n\n        if(!xExtent[0] || !xExtent[1] || !yMax) {\n            if (allPrimaryDates.length !== 0) {\n                console.error('Invalid timeseries', primarySeries);\n            }\n            this.x.domain(this.xt.domain());\n            this.xt = this.x;\n            return;\n        }\n\n        if(this.minDate) {\n            xExtent[0] = this.minDate;\n        }\n\n        if(this.maxDate) {\n            xExtent[1] = this.maxDate;\n        }\n\n        this.x.domain(xExtent);\n        this.xt = this.x;\n        this.y.domain([0, yMax*1.1]);\n    }\n\n    /**\n     * Update the x and y axes\n     */\n    protected updateAxes(){\n        this.drawXAxis();\n        this.drawYAxis();\n    }\n\n    /**\n     * The events are drawn in the template directly. This method simply\n     * updates the grouping of events (when they are close to each other)\n     */\n    protected updateEvents() {\n        this.groupedEvents = this.groupEvents(5);\n    }\n\n    /**\n     * Update/reset the zoom behavior when new data comes in (and new scales, axes...)\n     */\n    protected updateZoom() {\n        \n        if(!this.zoomable) {\n            return;\n        }\n\n        // Reset the previous zoom !\n        if(this.zoomBehavior){\n            this.zoomBehavior.on(\"zoom\", null);\n            this.zoomBehavior.on(\"end\", null);\n            this.zoomBehavior.transform(this.brush$, d3.zoomIdentity);\n        }\n        \n        // Compute the minimum and maximum zoom\n        const xDomain = this.x.domain();\n        const scaleExtent = (xDomain[1].getTime() - xDomain[0].getTime()) / 86400000; // current number of days on the scale\n\n        // Create the behavior\n        this.zoomBehavior = d3.zoom()\n            .extent([[0, 0], [this.innerWidth, this.innerHeight]])\n            .scaleExtent([scaleExtent/this.maxZoomDays, scaleExtent/this.minZoomDays])\n            .on(\"zoom\", () => this.onZoom())\n            .on(\"end\", () => this.onZoomEnd());\n        \n        // Apply on to the brush element\n        this.brush$\n            .call(this.zoomBehavior)\n            .on(\"mousedown.zoom\", null) // Deactivate mouse event (taken by brush)\n            .on(\"touchstart.zoom\", null)\n            .on(\"touchmove.zoom\", null)\n            .on(\"touchend.zoom\", null);\n        \n    }\n\n    /**\n     * Updates the brush (or hides it if no currentSelection),\n     * following a change of x scale.\n     */\n    protected updateBrush() {\n        if(this.currentSelection) {\n            const selection: [number, number] = [this.xt(this.currentSelection[0]), this.xt(this.currentSelection[1])];\n            this.brush$.call(this.brushBehavior.move, selection);\n        }\n        else {\n            this.brush$.call(this.brushBehavior.move, null);\n        }\n    }\n\n    /**\n     * This method tests whether the input selection is different from the currentSelection\n     * and updates it. It returns true if there is actually a change.\n     */\n    protected updateSelection(): boolean {\n        const change = this.checkSelectionChange(this.selection, this.currentSelection);\n        this.currentSelection = this.selection;\n        return change;\n    }\n\n    /**\n     * Recreate the x scale and axes (in the event of a language change)\n     */\n    protected updateXAxis(){        \n        this.x = d3.scaleUtc()\n            .domain(this.x.domain())\n            .range(this.x.range());\n        \n        this.xt = d3.scaleUtc()\n            .domain(this.xt.domain())\n            .range(this.xt.range());\n\n        this.drawXAxis();\n    }\n\n    /**\n     * Draws the X axis\n     */\n    protected drawXAxis() {        \n        this.xAxis$.call(d3.axisBottom(this.xt));\n        this.xAxis$.selectAll(\".domain\").remove(); // Remove the axis line\n    }\n\n    /**\n     * Draws the Y axis\n     */\n    protected drawYAxis() {\n        const yAxisTicks = this.y.ticks()\n            .filter(tick => Number.isInteger(tick)); // Keep only integer ticks https://stackoverflow.com/questions/13576906/d3-tick-marks-on-integers-only/56821215\n\n        const yAxis = d3.axisLeft(this.y)\n            .tickValues(yAxisTicks)\n            .tickFormat(d3.format(\"~s\")); //https://github.com/d3/d3-format\n        this.yAxis$.call(yAxis);\n        this.yAxis$.selectAll(\".domain\").remove(); // Remove the axis line\n    }\n    \n    /**\n     * Updates the display of the brush's grips when the brush has moved\n     * @param selection \n     */\n    protected updateGrips(selection: [number, number] | null) {\n        if (!selection) {\n            this.grips$.attr(\"display\", \"none\");\n        }\n        else {\n            this.grips$\n                .attr(\"display\", null)\n                .attr(\"transform\", (d, i) => \"translate(\" + selection[i] + \")\");\n            this.grips$.selectAll('.grip-text')\n                .text(d => this.intlService.formatDate(this.xt.invert(selection[d.type === 'w'? 0 : 1])));\n        }\n    }\n\n\n    // Interaction callbacks\n\n    onBrush() {\n        this.turnoffTooltip();\n        this.brushSelection = d3.brushSelection(this.gbrush.nativeElement) as [number, number] | null;\n        this.updateGrips(this.brushSelection);\n    }\n\n    onBrushEnd(){\n        this.brushing = false;\n        this.onBrush();\n        const newSelection = this.brushSelection?.sort((a,b)=>a-b).map(this.xt.invert);\n        if(this.checkSelectionChange(this.currentSelection, newSelection)) {\n            this.currentSelection = newSelection;\n            this.selectionChange.next(this.currentSelection);\n        }\n    }    \n\n    onZoom(){\n\n        this.turnoffTooltip();\n\n        this.zooming = true;\n\n        // Create a transformed scale without modifying the original (to enforce the limit of scaleExtent)\n        const transform = d3.zoomTransform(this.brush$.node() as Element);\n        this.xt = transform.rescaleX(this.x);\n\n        // Redraw the axis\n        this.drawXAxis();\n            \n        // Update the brush position\n        if(this.currentSelection){\n            const selection: [number, number] = [this.xt(this.currentSelection[0]), this.xt(this.currentSelection[1])];\n            this.brushBehavior.move(this.brush$, selection);\n        }\n\n    }\n\n    onZoomEnd(){\n        this.zooming = false;\n\n        // At the end of a zoom, we need to reorganize the grouping of events\n        this.updateEvents();\n\n        // Fire an event\n        this.rangeChange.next(this.xt.domain());\n    }\n\n    /**\n     * Redraw the simple tooltip (vertical line)\n     */\n    onMousemove() {\n        if(!this.tooltipItem && this.showTooltip) {\n            this.tooltipX = d3.mouse(this.gbrush.nativeElement)[0];\n        }\n    }\n\n    /**\n     * Remove the simple tooltip (vertical line)\n     */\n    onMouseout() {\n        if(!this.tooltipItem) {\n            this.tooltipX = undefined\n        }\n    }\n\n    /**\n     * Responds to a click on an event (triangle) by essentially turning tooltip on/off\n     * @param event \n     */\n    onEventClick(event: TimelineEvent[]) {\n\n        if(this.tooltipItem === event) {\n            this.turnoffTooltip();\n        }\n\n        else {\n\n            if(this.tooltipItem) {\n                this.turnoffTooltip();\n            }\n\n            this.tooltipItem = event;\n            this.tooltipX = this.xt(event[0].date);\n\n            // Since we use viewBox to auto-adjust the SVG to the container size, we have to\n            // convert from the SVG coordinate system to the HTML coordinate system\n            const x = this.margin.left + this.tooltipX;\n            const actualWidth = (this.el.nativeElement as HTMLElement).offsetWidth;\n            const scale = actualWidth / this.width;\n            const relativeX = x / this.width;\n\n            // Tooltip to the right\n            if(relativeX  {\n        if(this.tooltipItem) {\n            this.tooltipItem = undefined;\n            this.tooltipX = undefined;\n        }\n    }\n\n    ngOnDestroy(){\n        this.intlSubscription.unsubscribe();\n    }\n\n    // Utilities\n\n    /**\n     * Transforms the input list of events into a list of list, by grouping events within a bin\n     * when their dates are close together. This closeness is measured in \"pixel per event\".\n     * Note: this currently uses a histogram-like algorithm, which could probably be improved (clustering?)\n     * @param pixPerEvent \n     */\n    protected groupEvents(pixPerEvent: number): TimelineEvent[][] {\n        const events: TimelineEvent[][] = [];\n\n        if(this.events) {\n            const nbins = Math.floor(this.innerWidth / pixPerEvent);\n            const domain = this.xt.domain();\n            const timeinterval = (domain[1].getTime() - domain[0].getTime()) / nbins;\n            this.events.concat()\n                .sort((a,b) => a.date.getTime() - b.date.getTime())\n                .forEach(event => {\n                    if(events.length === 0) {\n                        events.push([event]);\n                    }\n                    else {\n                        const last = events[events.length-1];\n                        const lastbin = Math.floor(last[0].date.getTime() / timeinterval);\n                        const bin = Math.floor(event.date.getTime() / timeinterval);\n                        if(bin === lastbin) {\n                            last.push(event);\n                        }\n                        else {\n                            events.push([event]);\n                        }\n                    }\n                });\n        }\n\n        return events;\n    }\n\n    /**\n     * Return true if there are actual changes in the data\n     * (in particular will ignore data refresh which change nothing)\n     * @param change \n     */\n    protected checkDataChanges(change: SimpleChange): boolean {\n        const previousValue = change.previousValue as TimelineSeries[] | undefined;\n        const currentValue = change.currentValue as TimelineSeries[] | undefined;\n        \n        // Ignore null/undefined difference cause by | async\n        // See: https://github.com/angular/angular/issues/16982\n        if(currentValue === null && previousValue === undefined || currentValue === undefined && previousValue === null)\n            return false;\n\n        // Else, if one of them is null/undefined (or difference in length), there's clearly a change\n        if(!previousValue || !currentValue || previousValue.length !== currentValue.length)\n            return true;\n        \n        // If both defined and same size, we need to compare the data piece by piece\n        for(let i=0; i {\n        const gripHeight = Math.min(10, Math.max((this.innerHeight) / 8, 4));\n        const gripWidth = gripHeight;\n\n        const x = -gripWidth / 2;\n        const y = this.innerHeight / 2 - gripHeight / 2;\n\n        const path =\n            'M ' + x + ' ' + y +\n            ' l ' + -gripWidth + ' ' + gripHeight / 2 +\n            ' l ' + gripWidth + ' ' + gripHeight / 2 + ' z ' +\n            'M ' + -x + ' ' + y +\n            ' l ' + gripWidth + ' ' + gripHeight / 2 +\n            ' l ' + -gripWidth + ' ' + gripHeight / 2 + ' z ' +\n            'M 0 ' + 0 + ' l 0 ' + this.innerHeight + ' z ';\n        return path;\n    }\n\n    /**\n     * Returns the size of the triangle drawn for one event (or a group of events)\n     * @param events \n     */\n    eventSize(events: TimelineEvent[]): number {\n        if(events!==this.tooltipItem) {\n            return events[0].size || 6;\n        }\n        else {\n            return events[0].sizeOpened || (events[0].size || 6)*2;\n        }\n    }\n\n    /**\n     * Return a string containing the path coordinates of a triangle for a given event (or group of events)\n     * @param events \n     * @param size \n     */\n    drawEvents(events: TimelineEvent[], size: number): string {\n        const x = this.xt(events[0].date);\n        return 'M ' + x + ' ' + (this.innerHeight - 3*size/2) +\n            ' l ' + -size + ' ' + (3*size/2) +\n            ' l ' + (2*size) + ' ' + 0 + ' z ';\n    }\n}\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/VisEvent.html":{"url":"interfaces/VisEvent.html","title":"interface - VisEvent","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  VisEvent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            network/network.component.ts\n        \n\n            \n                Description\n            \n            \n                Structure of the events emitted by the Vis.js network\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        edges\n                                \n                                \n                                        event\n                                \n                                \n                                        items\n                                \n                                \n                                        nodes\n                                \n                                \n                                        pointer\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        edges\n                                    \n                                \n                                \n                                    \n                                        edges:     string[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        event\n                                    \n                                \n                                \n                                    \n                                        event:         any\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         any\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        items\n                                    \n                                \n                                \n                                    \n                                        items:     any[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     any[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        nodes\n                                    \n                                \n                                \n                                    \n                                        nodes:     string[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        pointer\n                                    \n                                \n                                \n                                    \n                                        pointer:         any\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         any\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Component, Input, OnChanges, SimpleChanges, OnDestroy, Output, EventEmitter, ContentChild, TemplateRef } from '@angular/core';\nimport { FormGroup, FormControl, FormBuilder } from '@angular/forms';\nimport { Subscription, combineLatest } from 'rxjs';\n\nimport { Results } from '@sinequa/core/web-services';\nimport { AppService, ExprBuilder } from '@sinequa/core/app-utils';\nimport { Utils } from '@sinequa/core/base';\nimport { UserPreferences } from '@sinequa/components/user-settings';\nimport { AbstractFacet } from '@sinequa/components/facet';\nimport { Action } from '@sinequa/components/action';\nimport { SearchService } from '@sinequa/components/search';\n\nimport { Options, VisNetworkService } from 'ngx-vis';\nimport { DataSet } from \"vis-data/peer/esm/vis-data\";\n\nimport { Node, Edge, NetworkDataset, NetworkProvider, NetworkContext } from './network-models';\nimport { IntlService } from '@sinequa/core/intl';\n\n/**\n * Default options of the Vis.js network.\n * See: https://visjs.github.io/vis-network/docs/network/\n */\nexport const defaultOptions: Options = {\n    height: '500px'\n};\n\n/**\n * Structure of the events emitted by the Vis.js network\n */\nexport interface VisEvent {\n    nodes: string[];\n    edges: string[];\n    event: any;\n    items: any[];\n    pointer: any;\n}\n\n@Component({\n    selector: 'sq-network',\n    templateUrl: './network.component.html'\n})\nexport class NetworkComponent extends AbstractFacet implements OnChanges, OnDestroy {\n\n    /** Name of the network - should be unique within the app */\n    @Input() name = \"Network\";\n\n    /** Input results - used to produce a OnChange event when  */\n    @Input() results: Results;\n\n    @Input() providers: NetworkProvider[];\n\n    /** General Vis options passed to the network (https://visjs.github.io/vis-network/docs/network/) */\n    @Input() options: Options = defaultOptions;\n\n    optionsPrefs: Options;\n\n    @Output() nodeClicked = new EventEmitter();\n    @Output() edgeClicked = new EventEmitter();\n\n    // Settings form\n    form: FormGroup;\n\n    // State\n    _networkInitialized: boolean;\n    _selectedNode?: Node;\n    _selectedEdge?: Edge;\n\n    // Actions\n    _actions: Action[] = [];\n    refreshAction: Action;\n    clearFilters: Action;\n\n    // Info cards\n    @ContentChild(\"nodeTpl\", {static: false}) nodeTpl: TemplateRef;\n    @ContentChild(\"edgeTpl\", {static: false}) edgeTpl: TemplateRef;\n\n    readonly context: NetworkContext;\n\n    providersSubscription: Subscription;\n\n    constructor(\n        public networkService: VisNetworkService,\n        public searchService: SearchService,\n        public appService: AppService,\n        public intlService: IntlService,\n        public formBuilder: FormBuilder,\n        public prefs: UserPreferences,\n        public exprBuilder: ExprBuilder\n    ) {\n        super();\n\n        // Notify providers when a node is clicked (this may trigger new data, or a node mutation)\n        this.nodeClicked.subscribe((node?: Node) => {\n            this.providers.forEach(p => p.onNodeClicked(node));\n        });\n\n        // Notify providers when a node is clicked (this may trigger new data, or a node mutation)\n        this.edgeClicked.subscribe((edge?: Edge) => {\n            this.providers.forEach(p => p.onEdgeClicked(edge));\n        });\n\n        // Refresh the network\n        this.refreshAction = new Action({\n            icon: \"fas fa-sync-alt\",\n            title: \"msg#network.actions.refresh\",\n            action: () => {\n                this.updateData();\n                this.updateActions();\n            }\n        });\n\n        // Clear the current filters\n        this.clearFilters = new Action({\n            icon: \"far fa-minus-square\",\n            title: \"msg#facet.clearSelects\",\n            action: () => {\n                this.searchService.query.removeSelect(this.name);\n                this.searchService.search();\n            }\n        });\n\n        this.context = {\n            name: this.name,\n            nodes: new DataSet(),\n            edges: new DataSet(),\n            searchService: searchService,\n            appService: appService,\n            networkService: networkService,\n            intlService: intlService,\n            exprBuilder: exprBuilder,\n            select: (node?: Node, edge?: Edge) => this.select(node, edge),\n        };\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n\n        if(changes['results'] || changes['providers']) {\n            // Update the context\n            this.context.name = this.name;\n\n            // Update selections\n            this.selectEdge();\n            this.selectNode();\n\n            // Update options from the preferences\n            this.updateOptions();\n\n            // Update data from the providers (async)\n            this.updateData();\n\n            // Update the actions of the facet\n            this.updateActions();\n        }\n        else if(changes['options']) {\n            this.updateOptions();\n        }\n\n    }\n\n    /**\n     * Resets the nodes and edges, create a new listener for the providers and\n     * call getData() on these providers to refresh the data\n     */\n    protected updateData() {\n\n        this.context.nodes.clear();\n        this.context.edges.clear();\n\n        if(this.providersSubscription){\n            this.providersSubscription.unsubscribe();\n        }\n\n        this.providersSubscription = combineLatest(\n            this.providers.map(p => p.getProvider())\n        ).subscribe(datasets =>\n            this.mergeDatasets(datasets.filter(d => !!d) as NetworkDataset[])\n        );\n\n        this.providers.forEach(p => p.getData(this.context));\n    }\n\n    /**\n     * Take in the datasets produced by each provider and merges them into\n     * a single one\n     * @param datasets\n     */\n    protected mergeDatasets(datasets: NetworkDataset[]) {\n        const dataset = datasets.reduce((prev, cur) => prev.merge(cur), new NetworkDataset());\n\n        // Notify providers that nodes were inserted (which could trigger an update of the data)\n        this.providers.forEach(p => p.onDatasetsMerged(dataset));\n\n        // TODO: Post process the dataset somehow to adjust visibility (or other properties)\n        dataset.updateDatasets(this.context.nodes, this.context.edges);\n\n        // Fit the nodes and edges\n        if(this._networkInitialized) {\n            this.fitNetwork();\n        }\n\n        // Notify providers that nodes were inserted (which could trigger an update of the data)\n        this.providers.forEach(p => p.onNodesInserted(this.context.nodes.get()));\n\n        this.updateActions();\n    }\n\n    get actions(): Action[] {\n        return this._actions;\n    }\n\n    /**\n     * Updates the actions displayed in the facet frame (_action variable).\n     * Actions may come from this component or from its providers\n     */\n    protected updateActions() {\n        this._actions = [];\n\n        // Clear the active filters\n        if(this.searchService.breadcrumbs && !!this.searchService.breadcrumbs.findSelect(this.name)) {\n            this._actions.push(this.clearFilters);\n        }\n\n        // Selected node actions\n        if(this._selectedNode) {\n            this.providers.forEach(p => {\n                const actions = p.getNodeActions(this._selectedNode!);\n                if(actions.length){\n                    this._actions = this._actions.concat(actions);\n                }\n            });\n        }\n\n        // Selected edge actions\n        if(this._selectedEdge) {\n            this.providers.forEach(p => {\n                const actions = p.getEdgeActions(this._selectedEdge!);\n                if(actions.length){\n                    this._actions = this._actions.concat(actions);\n                }\n            });\n        }\n\n        // Actions specific to each provider\n        const providersActionList = new Action({\n            icon: \"fas fa-tasks\",\n            title: \"msg#network.actions.providers\",\n            children: this.providers.map(p => new Action({\n                text: this.intlService.formatMessage(p.name),\n                title: this.intlService.formatMessage(p.name),\n                children: p.getProviderActions()\n            }))\n        });\n        this._actions.push(providersActionList);\n\n        // Action to refresh the network\n        this._actions.push(this.refreshAction);\n\n    }\n\n    /**\n     * Fit the network view (zoom and position) to its content, with a delay\n     * to avoid some elusive bugs in the Vis library\n     */\n    fitNetwork() {\n        this.networkService.fit(this.name);\n    }\n\n\n    // Event handling\n\n    /**\n     * Called from the template by ngx-vis, when the network is initialized,\n     * and the NetworkService can be used.\n     */\n    networkInitialized() {\n        this._networkInitialized = true;\n\n        // now we can use the service to register on events\n        this.networkService.on(this.name, 'click');\n\n        this.networkService.click.subscribe((eventData: any[]) => this.onNetworkClick(eventData));\n\n        this.networkService.setOptions(this.name, this.optionsPrefs);\n\n    }\n\n    /**\n     * Method called when a node or edge in the network is clicked.\n     * The method generates appropriate nodeClicked and edgeClicked events,\n     * and updates the state of _selectedEdge and _selectedNode.\n     * @param eventData\n     */\n    protected onNetworkClick(eventData: any[]) {\n        if (eventData[0] === this.name) {\n            const event = eventData[1] as VisEvent;\n\n            if(event.event.type === \"tap\") {\n\n                if(event.edges.length === 1 && event.nodes.length === 0) {\n                    this.selectEdge(this.context.edges.get(event.edges[0]) as Edge);\n                    this.selectNode();\n                }\n                else {\n                    this.selectEdge();\n                    if(event.nodes.length === 1) {\n                        this.selectNode(this.context.nodes.get(event.nodes[0]) as Node);\n                    }\n                    else {\n                        this.selectNode();\n                    }\n                }\n\n            }\n            else {\n                this.selectNode();\n                this.selectEdge();\n            }\n\n            this.updateActions();\n        }\n    }\n\n    select(node?: Node, edge?: Edge) {\n        this.selectNode(node);\n        this.selectEdge(edge);\n        this.updateActions();\n    }\n\n    selectNode(node?: Node) {\n        this._selectedNode = node;\n        this.nodeClicked.next(node);\n    }\n\n    selectEdge(edge?: Edge) {\n        this._selectedEdge = edge;\n        this.edgeClicked.next();\n    }\n\n    ngOnDestroy() {\n        this.networkService.off(this.name, 'click');\n        if(this.providersSubscription){\n            this.providersSubscription.unsubscribe();\n        }\n    }\n\n\n    // Settings\n\n    /**\n     * Sets the options values either to the user preferences (stored in user settings)\n     * or the default values.\n     */\n    updateOptions() {\n        this.optionsPrefs = Utils.copy(this.options);\n        if(!this.optionsPrefs.physics){\n            this.optionsPrefs.physics = {};\n        }\n        if(!this.optionsPrefs.physics.barnesHut){\n            this.optionsPrefs.physics.barnesHut = {};\n        }\n        this.optionsPrefs.physics.barnesHut.springLength = this.springLengthPref;\n        this.optionsPrefs.physics.barnesHut.springConstant = this.springConstantPref / 100;\n        this.optionsPrefs.physics.barnesHut.damping = this.dampingPref / 100;\n        this.optionsPrefs.physics.barnesHut.gravitationalConstant = -this.repulsionPref;\n        this.optionsPrefs.physics.barnesHut.centralGravity = this.gravityPref / 10;\n\n        if(this._networkInitialized) {\n            this.networkService.setOptions(this.name, this.optionsPrefs);\n            this.fitNetwork();\n        }\n    }\n\n    /**\n     * Method from the AbstractFacet interface called when the settings\n     * panel is opened or closed\n     * @param opened whether settings are opened or closed\n     */\n    onOpenSettings(opened: boolean){\n        if(opened) {\n            const springLengthControl = new FormControl(this.springLengthPref);\n            const springConstantControl = new FormControl(this.springConstantPref);\n            const dampingControl = new FormControl(this.dampingPref);\n            const repulsionControl = new FormControl(this.repulsionPref);\n            const gravityControl = new FormControl(this.gravityPref);\n\n            this.form = this.formBuilder.group({\n                springLength: springLengthControl,\n                springConstant: springConstantControl,\n                damping: dampingControl,\n                repulsion: repulsionControl,\n                gravity: gravityControl\n            });\n\n            this.form.valueChanges.subscribe(_ => {\n                this.prefs.set(this.name+'-spring-length', springLengthControl.value, true);\n                this.prefs.set(this.name+'-spring-constant', springConstantControl.value, true);\n                this.prefs.set(this.name+'-damping', dampingControl.value, true);\n                this.prefs.set(this.name+'-repulsion', repulsionControl.value, true);\n                this.prefs.set(this.name+'-gravity', gravityControl.value, true);\n                this.debounceSync();\n            });\n        }\n        else {\n            this.updateOptions();\n            this.updateData();\n        }\n    }\n\n    // Debounce syncing to avoid many calls to the user settings web service\n    debounceSync = Utils.debounce(() => {\n        this.prefs.sync();\n    }, 1000);\n\n    /**\n     * This method resets all the user preferences and rebuilds the settings form,\n     * so that the values displayed are up-to-date\n     */\n    setDefaults() {\n        this.prefs.delete(this.name+'-spring-length', true);\n        this.prefs.delete(this.name+'-spring-constant',true);\n        this.prefs.delete(this.name+'-damping', true);\n        this.prefs.delete(this.name+'-repulsion', true);\n        this.prefs.delete(this.name+'-gravity', true);\n        this.prefs.sync();\n        this.onOpenSettings(true);\n    }\n\n    // Accessor method for each of the settings.\n    // Return either the saved user preference or the default value.\n\n    get springLengthPref(): number {\n        return this.prefs.get(this.name+'-spring-length') || 100;\n    }\n\n    get springConstantPref(): number {\n        return this.prefs.get(this.name+'-spring-constant') || 4;\n    }\n\n    get dampingPref(): number {\n        return this.prefs.get(this.name+'-damping') || 50;\n    }\n\n    get repulsionPref(): number {\n        return this.prefs.get(this.name+'-repulsion') || 2000;\n    }\n\n    get gravityPref(): number {\n        return this.prefs.get(this.name+'-gravity') || 3;\n    }\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/VisTimelineModule.html":{"url":"modules/VisTimelineModule.html","title":"module - VisTimelineModule","body":"\n                   \n\n\n\n\n    Modules\n    VisTimelineModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_VisTimelineModule\n\n\n\ncluster_VisTimelineModule_declarations\n\n\n\ncluster_VisTimelineModule_exports\n\n\n\n\nResultTimeline\n\nResultTimeline\n\n\n\nVisTimelineModule\n\nVisTimelineModule\n\nVisTimelineModule -->\n\nResultTimeline->VisTimelineModule\n\n\n\n\n\nResultTimeline \n\nResultTimeline \n\nResultTimeline  -->\n\nVisTimelineModule->ResultTimeline \n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            vis-timeline/vis-timeline-module.ts\n        \n\n\n\n\n        \n            \n                \n                    Declarations\n                    \n                        \n                            ResultTimeline\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            ResultTimeline\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import {NgModule} from \"@angular/core\";\nimport {CommonModule} from \"@angular/common\";\n\nimport {IntlModule} from \"@sinequa/core/intl\";\n\nimport {VisModule} from \"ngx-vis\";\n\nimport {ResultTimeline} from \"./result-timeline/result-timeline\";\n\n@NgModule({\n    imports: [\n        CommonModule,\n\n        IntlModule,\n\n        VisModule\n    ],\n    declarations: [\n        ResultTimeline\n    ],\n    exports: [\n        ResultTimeline\n    ]\n})\nexport class VisTimelineModule {\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                finance/messages/index.ts\n            \n            variable\n            deFinance\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                finance/messages/index.ts\n            \n            variable\n            enFinance\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                finance/messages/index.ts\n            \n            variable\n            frFinance\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                finance/money-cloud/money-cloud.component.ts\n            \n            component\n            MoneyCloudComponent\n            \n                10 %\n                (5/46)\n            \n        \n        \n            \n                \n                finance/money-cloud/money-cloud.component.ts\n            \n            interface\n            MoneyCloudDatum\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                finance/money-timeline/money-timeline.component.ts\n            \n            component\n            MoneyTimelineComponent\n            \n                28 %\n                (13/45)\n            \n        \n        \n            \n                \n                finance/money-timeline/money-timeline.component.ts\n            \n            interface\n            MoneyDatum\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                fusioncharts/chart/chart.ts\n            \n            component\n            FusionChart\n            \n                23 %\n                (9/38)\n            \n        \n        \n            \n                \n                fusioncharts/chart/chart.ts\n            \n            variable\n            defaultChart\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                googlemaps/dark-style.ts\n            \n            variable\n            darkStyle\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                googlemaps/map.component.ts\n            \n            component\n            MapComponent\n            \n                50 %\n                (12/24)\n            \n        \n        \n            \n                \n                googlemaps/messages/index.ts\n            \n            variable\n            deGooglemaps\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                googlemaps/messages/index.ts\n            \n            variable\n            enGooglemaps\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                googlemaps/messages/index.ts\n            \n            variable\n            frGooglemaps\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                heatmap/bootstrap/facet-heatmap.component.ts\n            \n            component\n            BsFacetHeatmapComponent\n            \n                24 %\n                (13/54)\n            \n        \n        \n            \n                \n                heatmap/bootstrap/heatmap.component.ts\n            \n            component\n            BsHeatmapComponent\n            \n                20 %\n                (8/39)\n            \n        \n        \n            \n                \n                heatmap/bootstrap/heatmap.component.ts\n            \n            interface\n            HeatmapItem\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                heatmap/bootstrap/results-heatmap-view.ts\n            \n            component\n            BsResultsHeatmapView\n            \n                19 %\n                (13/68)\n            \n        \n        \n            \n                \n                heatmap/bootstrap/tooltip.component.ts\n            \n            component\n            BsTooltipComponent\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                heatmap/messages/index.ts\n            \n            variable\n            deHeatmap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                heatmap/messages/index.ts\n            \n            variable\n            enHeatmap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                heatmap/messages/index.ts\n            \n            variable\n            frHeatmap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                network/edge-info-card.component.ts\n            \n            component\n            BsEdgeInfoCard\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                network/network-models.ts\n            \n            class\n            NetworkDataset\n            \n                95 %\n                (19/20)\n            \n        \n        \n            \n                \n                network/network-models.ts\n            \n            interface\n            Edge\n            \n                20 %\n                (2/10)\n            \n        \n        \n            \n                \n                network/network-models.ts\n            \n            interface\n            EdgeType\n            \n                75 %\n                (3/4)\n            \n        \n        \n            \n                \n                network/network-models.ts\n            \n            interface\n            NetworkContext\n            \n                40 %\n                (4/10)\n            \n        \n        \n            \n                \n                network/network-models.ts\n            \n            interface\n            NetworkProvider\n            \n                93 %\n                (14/15)\n            \n        \n        \n            \n                \n                network/network-models.ts\n            \n            interface\n            Node\n            \n                22 %\n                (2/9)\n            \n        \n        \n            \n                \n                network/network-models.ts\n            \n            interface\n            NodeType\n            \n                50 %\n                (2/4)\n            \n        \n        \n            \n                \n                network/network-sample-configs.ts\n            \n            function\n            asyncRecordsProviderDemo\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                network/network-sample-configs.ts\n            \n            function\n            coocAggregationDemo\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                network/network-sample-configs.ts\n            \n            function\n            coocRecordDemo\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                network/network-sample-configs.ts\n            \n            function\n            crossAggregationDemo\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                network/network-sample-configs.ts\n            \n            function\n            crossAggregationExpandDemo\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                network/network-sample-configs.ts\n            \n            function\n            oOTBConfig\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                network/network-sample-configs.ts\n            \n            function\n            recordsProviderDemo\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                network/network-sample-configs.ts\n            \n            function\n            selectedRecordsProviderDemo\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                network/network-sample-configs.ts\n            \n            function\n            typedCoocAggregationDemo\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                network/network-sample-configs.ts\n            \n            function\n            typedCoocRecordDemo\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                network/network-sample-configs.ts\n            \n            function\n            wikiAsyncConfig\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                network/network-sample-configs.ts\n            \n            function\n            wikiDynConfig\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                network/network-sample-configs.ts\n            \n            function\n            wikiDynEdgeConfig\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                network/network-sample-configs.ts\n            \n            function\n            wikiMultiDynConfig\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                network/network.component.ts\n            \n            component\n            NetworkComponent\n            \n                21 %\n                (8/38)\n            \n        \n        \n            \n                \n                network/network.component.ts\n            \n            interface\n            VisEvent\n            \n                16 %\n                (1/6)\n            \n        \n        \n            \n                \n                network/network.component.ts\n            \n            variable\n            defaultOptions\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                network/node-info-card.component.ts\n            \n            component\n            BsNodeInfoCard\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                network/node-info-card.component.ts\n            \n            interface\n            NodeData\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                network/providers/aggregation-provider.ts\n            \n            class\n            AggregationProvider\n            \n                46 %\n                (12/26)\n            \n        \n        \n            \n                \n                network/providers/aggregation-provider.ts\n            \n            interface\n            AggregationData\n            \n                16 %\n                (1/6)\n            \n        \n        \n            \n                \n                network/providers/aggregation-provider.ts\n            \n            interface\n            AggregationEdge\n            \n                33 %\n                (1/3)\n            \n        \n        \n            \n                \n                network/providers/aggregation-provider.ts\n            \n            interface\n            AggregationEdgeType\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                network/providers/aggregation-provider.ts\n            \n            function\n            isAggregationEdgeType\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                network/providers/async-records-provider.ts\n            \n            class\n            AsyncRecordsProvider\n            \n                39 %\n                (11/28)\n            \n        \n        \n            \n                \n                network/providers/base-provider.ts\n            \n            class\n            BaseProvider\n            \n                31 %\n                (6/19)\n            \n        \n        \n            \n                \n                network/providers/dynamic-edge-provider.ts\n            \n            class\n            DynamicEdgeProvider\n            \n                39 %\n                (11/28)\n            \n        \n        \n            \n                \n                network/providers/dynamic-edge-provider.ts\n            \n            interface\n            DynamicEdge\n            \n                50 %\n                (1/2)\n            \n        \n        \n            \n                \n                network/providers/dynamic-edge-provider.ts\n            \n            interface\n            DynamicEdgeType\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                network/providers/dynamic-edge-provider.ts\n            \n            function\n            isDynamicEdgeType\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                network/providers/dynamic-node-provider.ts\n            \n            class\n            DynamicNodeProvider\n            \n                39 %\n                (11/28)\n            \n        \n        \n            \n                \n                network/providers/dynamic-node-provider.ts\n            \n            interface\n            DynamicNodeType\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                network/providers/provider-factory.ts\n            \n            injectable\n            ProviderFactory\n            \n                90 %\n                (30/33)\n            \n        \n        \n            \n                \n                network/providers/records-provider.ts\n            \n            class\n            RecordsProvider\n            \n                36 %\n                (9/25)\n            \n        \n        \n            \n                \n                network/providers/records-provider.ts\n            \n            interface\n            CustomData\n            \n                16 %\n                (1/6)\n            \n        \n        \n            \n                \n                network/providers/records-provider.ts\n            \n            interface\n            RecordNode\n            \n                50 %\n                (1/2)\n            \n        \n        \n            \n                \n                network/providers/records-provider.ts\n            \n            interface\n            StructuralEdgeType\n            \n                100 %\n                (6/6)\n            \n        \n        \n            \n                \n                network/providers/records-provider.ts\n            \n            function\n            isStructuralEdgeType\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                network/providers/selected-records-provider.ts\n            \n            class\n            SelectedRecordsProvider\n            \n                30 %\n                (14/46)\n            \n        \n        \n            \n                \n                ngx-charts/chart/chart.ts\n            \n            component\n            NgxChart\n            \n                0 %\n                (0/17)\n            \n        \n        \n            \n                \n                ngx-charts/chart/chart.ts\n            \n            interface\n            ChartDataPoint\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                ngx-charts/chart/chart.ts\n            \n            interface\n            ChartOptions\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                ngx-charts/facet-chart/facet-chart.ts\n            \n            component\n            FacetNgxChart\n            \n                17 %\n                (4/23)\n            \n        \n        \n            \n                \n                ngx-charts/facet-chart/facet-chart.ts\n            \n            interface\n            FacetChartDataPoint\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                public-api.ts\n            \n            variable\n            sinequaComponentsModule\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                timeline/bootstrap/facet-timeline.component.ts\n            \n            component\n            BsFacetTimelineComponent\n            \n                27 %\n                (15/55)\n            \n        \n        \n            \n                \n                timeline/bootstrap/facet-timeline.component.ts\n            \n            interface\n            TimelineAggregation\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                timeline/bootstrap/facet-timeline.component.ts\n            \n            interface\n            TimelineCombinedAggregations\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                timeline/bootstrap/facet-timeline.component.ts\n            \n            interface\n            TimelineEventAggregation\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                timeline/bootstrap/facet-timeline.component.ts\n            \n            interface\n            TimelineRecords\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                timeline/bootstrap/timeline.component.ts\n            \n            component\n            BsTimelineComponent\n            \n                11 %\n                (7/62)\n            \n        \n        \n            \n                \n                timeline/bootstrap/timeline.component.ts\n            \n            interface\n            TimelineDate\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                timeline/bootstrap/timeline.component.ts\n            \n            interface\n            TimelineEvent\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                timeline/bootstrap/timeline.component.ts\n            \n            interface\n            TimelineSeries\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                vis-timeline/result-timeline/result-timeline.ts\n            \n            component\n            ResultTimeline\n            \n                0 %\n                (0/17)\n            \n        \n        \n            \n                \n                vis-timeline/result-timeline/result-timeline.ts\n            \n            variable\n            defaultOptions\n            \n                0 %\n                (0/1)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @sinequa/components : ^0.0.1\n    \n\n\n    \n    \n        Peer dependencies\n    \n    \n        \n            @agm/core : ^3.0.0-beta.0\n        \n            @swimlane/ngx-charts : ^14.0.0\n        \n            angular-fusioncharts : ^3.0.4\n        \n            fusioncharts : ^3.15.1-sr.1\n        \n            ngx-vis : ^3.1.0\n        \n            vis-data : ^6.5.1\n        \n            vis-network : ^7.3.4\n        \n            vis-timeline : ^7.3.4\n        \n            vis-util : ^4.0.0\n    \n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            asyncRecordsProviderDemo   (network/.../network-sample-configs.ts)\n                        \n                        \n                            coocAggregationDemo   (network/.../network-sample-configs.ts)\n                        \n                        \n                            coocRecordDemo   (network/.../network-sample-configs.ts)\n                        \n                        \n                            crossAggregationDemo   (network/.../network-sample-configs.ts)\n                        \n                        \n                            crossAggregationExpandDemo   (network/.../network-sample-configs.ts)\n                        \n                        \n                            isAggregationEdgeType   (network/.../aggregation-provider.ts)\n                        \n                        \n                            isDynamicEdgeType   (network/.../dynamic-edge-provider.ts)\n                        \n                        \n                            isStructuralEdgeType   (network/.../records-provider.ts)\n                        \n                        \n                            oOTBConfig   (network/.../network-sample-configs.ts)\n                        \n                        \n                            recordsProviderDemo   (network/.../network-sample-configs.ts)\n                        \n                        \n                            selectedRecordsProviderDemo   (network/.../network-sample-configs.ts)\n                        \n                        \n                            typedCoocAggregationDemo   (network/.../network-sample-configs.ts)\n                        \n                        \n                            typedCoocRecordDemo   (network/.../network-sample-configs.ts)\n                        \n                        \n                            wikiAsyncConfig   (network/.../network-sample-configs.ts)\n                        \n                        \n                            wikiDynConfig   (network/.../network-sample-configs.ts)\n                        \n                        \n                            wikiDynEdgeConfig   (network/.../network-sample-configs.ts)\n                        \n                        \n                            wikiMultiDynConfig   (network/.../network-sample-configs.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    network/network-sample-configs.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        \n                            asyncRecordsProviderDemo\n                        \n                        \n                    \n                \n            \n            \n                \nasyncRecordsProviderDemo(providerFactory, searchService)\n                \n            \n\n\n\n\n            \n                \n                    Creates a network for a list of records fetched with a query. The query\nspecifically returns 5 wikipedia documents about \"human\" and containing the text \"google\".\nThe record nodes are rendered with the wikipedia thumbnail rather than a generic icon.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    providerFactory\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The provider factory\n\n                                    \n                                \n                                \n                                    searchService\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The search service\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         NetworkProvider[]\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            coocAggregationDemo\n                        \n                        \n                    \n                \n            \n            \n                \ncoocAggregationDemo(providerFactory)\n                \n            \n\n\n\n\n            \n                \n                    Creates a network from a cooccurrence distribution between person and company\nentities.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    providerFactory\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The provider factory\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         NetworkProvider[]\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            coocRecordDemo\n                        \n                        \n                    \n                \n            \n            \n                \ncoocRecordDemo(providerFactory)\n                \n            \n\n\n\n\n            \n                \n                    Creates a network from the list of selected records and displays the cooccurrence entities\ncontained in these records. The record nodes themselves are actually hidden (hideRecordNode=true).\nThe cooccurrence entities are each displayed as two nodes linked by an edge.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    providerFactory\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The provider factory\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         NetworkProvider[]\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            crossAggregationDemo\n                        \n                        \n                    \n                \n            \n            \n                \ncrossAggregationDemo(providerFactory)\n                \n            \n\n\n\n\n            \n                \n                    Creates a network from a cross-aggregation between person and company entities.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    providerFactory\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The provider factory\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         NetworkProvider[]\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            crossAggregationExpandDemo\n                        \n                        \n                    \n                \n            \n            \n                \ncrossAggregationExpandDemo(providerFactory)\n                \n            \n\n\n\n\n            \n                \n                    Creates a network from a cross-aggregation between person and company entities.\nAdditionally, the company and person nodes can be expanded to other company, person\nand geo entities.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    providerFactory\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The provider factory\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         NetworkProvider[]\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            oOTBConfig\n                        \n                        \n                    \n                \n            \n            \n                \noOTBConfig(providerFactory)\n                \n            \n\n\n\n\n            \n                \n                    Creates a network from the list of selected record and three cross-distributions between geo, \nperson and company entities.\nAdditionally, the metadata nodes are expandable to other metadata nodes, via cross-distributions.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    providerFactory\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The provider factory\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         NetworkProvider[]\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            recordsProviderDemo\n                        \n                        \n                    \n                \n            \n            \n                \nrecordsProviderDemo(providerFactory, records)\n                \n            \n\n\n\n\n            \n                \n                    Creates a network from a list of records, with record and person nodes.\nThe person nodes are attached to a record if that record contains them.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    providerFactory\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The provider factory\n\n                                    \n                                \n                                \n                                    records\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        A given list of records\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         NetworkProvider[]\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            selectedRecordsProviderDemo\n                        \n                        \n                    \n                \n            \n            \n                \nselectedRecordsProviderDemo(providerFactory)\n                \n            \n\n\n\n\n            \n                \n                    Creates a network from the selected records, with record and person nodes.\nThe person nodes are attached to a record if that record contains them.\nThe network is refreshed every time documents are selected or unselected.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    providerFactory\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The provider factory\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         NetworkProvider[]\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            typedCoocAggregationDemo\n                        \n                        \n                    \n                \n            \n            \n                \ntypedCoocAggregationDemo(providerFactory)\n                \n            \n\n\n\n\n            \n                \n                    Creates a network from a triple-cooccurrence between person, companies and in-between\na \"job\" entity ('(BILL GATES)#(CEO)#(MICROSOFT)').\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    providerFactory\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The provider factory\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         NetworkProvider[]\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            typedCoocRecordDemo\n                        \n                        \n                    \n                \n            \n            \n                \ntypedCoocRecordDemo(providerFactory)\n                \n            \n\n\n\n\n            \n                \n                    Creates a network from the list of selected records and displays the triple-cooccurrence entities\nbetween person, companies and in-between a \"job\" entity ('(BILL GATES)#(CEO)#(MICROSOFT)') contained\nin these records.\nThe cooccurrence entities are each displayed as two nodes linked by a typed edge (with a label showing the \"job\").\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    providerFactory\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The provider factory\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         NetworkProvider[]\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            wikiAsyncConfig\n                        \n                        \n                    \n                \n            \n            \n                \nwikiAsyncConfig(providerFactory, searchService)\n                \n            \n\n\n\n\n            \n                \n                    Creates a network from a list of records fetched via a query asynchronously, and cross-distributions\nbetween the geo, company and person nodes.\nThe query specifically asks for 3 wikipedia documents about \"Barack Obama\".\nThe network will contain relations between the records and the metadata displayed among the aggregation\nedges.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    providerFactory\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The provider factory\n\n                                    \n                                \n                                \n                                    searchService\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The search service\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         NetworkProvider[]\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            wikiDynConfig\n                        \n                        \n                    \n                \n            \n            \n                \nwikiDynConfig(providerFactory, searchService)\n                \n            \n\n\n\n\n            \n                \n                    Creates a network from cross distribution between Company and Person entities.\nAdditionally, the person nodes are \"dynamic nodes\", meaning they become enriched (when clicked on,\nby default) with a record fetched from the server. When this happens, the display of the node\nchanges (in this case we display the wikipedia thumbnail of that person, instead of a generic icon),\nand \"structural edges\" are added to the nodes (in this case we display the \"company\" entities\ncontained in the wikipedia pages of the person).\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    providerFactory\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The provider factory\n\n                                    \n                                \n                                \n                                    searchService\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The search service\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         NetworkProvider[]\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            wikiDynEdgeConfig\n                        \n                        \n                    \n                \n            \n            \n                \nwikiDynEdgeConfig(providerFactory, searchService)\n                \n            \n\n\n\n\n            \n                \n                    Creates a network from the list of selected records. Additionally, when these records\nare inserted, fetches additional records from the server, which gets attached to the record\nnodes (\"dynamic edges\"). Specifically these new records are 5 wikipedia articles about humans\nand talking about whatever the original node's label is. (if the original node is \"Microsoft\",\nthe dynamic edges will likely include Bill Gates, Steve Ballmer, Paul Allen, etc.)\nThe nodes of these new records (with the \"people\" type) are displayed with the wikipedia thumbnail.\nAdditionally we display the company entities contained in these people nodes (structural edges).\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    providerFactory\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The provider factory\n\n                                    \n                                \n                                \n                                    searchService\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The search service\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         NetworkProvider[]\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            wikiMultiDynConfig\n                        \n                        \n                    \n                \n            \n            \n                \nwikiMultiDynConfig(providerFactory, searchService)\n                \n            \n\n\n\n\n            \n                \n                    Creates a network from 3 cross distribution between Company, Geo and Person entities.\nAdditionally, the person nodes are \"dynamic nodes\", meaning they become enriched (when inserted) \nwith a record fetched from the server. When this happens, the display of the node\nchanges (in this case we display the wikipedia thumbnail of that person, instead of a generic icon).\nAdditionally, the company nodes are manually expandable to display relations with other people nodes.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    providerFactory\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The provider factory\n\n                                    \n                                \n                                \n                                    searchService\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The search service\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         NetworkProvider[]\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    network/providers/aggregation-provider.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        \n                            isAggregationEdgeType\n                        \n                        \n                    \n                \n            \n            \n                \nisAggregationEdgeType(et)\n                \n            \n\n\n\n\n            \n                \n                    Tests whether an EdgeType is an AggregationEdgeType\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    et\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        an edge type\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         AggregationEdgeType\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    network/providers/dynamic-edge-provider.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        \n                            isDynamicEdgeType\n                        \n                        \n                    \n                \n            \n            \n                \nisDynamicEdgeType(et)\n                \n            \n\n\n\n\n            \n                \n                    Tests whether a given edge type is a DynamicEdgeType\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    et\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        an edge type\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         DynamicEdgeType\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    network/providers/records-provider.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        \n                            isStructuralEdgeType\n                        \n                        \n                    \n                \n            \n            \n                \nisStructuralEdgeType(et)\n                \n            \n\n\n\n\n            \n                \n                    Tests whether the given edge type is a structural edge type\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    et\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        an edge type\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         StructuralEdgeType\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"overview - index","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_BsHeatmapModule\n\n\n\ncluster_BsHeatmapModule_declarations\n\n\n\ncluster_BsHeatmapModule_exports\n\n\n\ncluster_BsTimelineModule\n\n\n\ncluster_BsTimelineModule_declarations\n\n\n\ncluster_BsTimelineModule_exports\n\n\n\ncluster_FinanceModule\n\n\n\ncluster_FinanceModule_declarations\n\n\n\ncluster_FinanceModule_exports\n\n\n\ncluster_FusionChartsModule\n\n\n\ncluster_FusionChartsModule_declarations\n\n\n\ncluster_FusionChartsModule_exports\n\n\n\ncluster_GoogleMapsModule\n\n\n\ncluster_GoogleMapsModule_declarations\n\n\n\ncluster_GoogleMapsModule_exports\n\n\n\ncluster_NetworkModule\n\n\n\ncluster_NetworkModule_declarations\n\n\n\ncluster_NetworkModule_exports\n\n\n\ncluster_NgxChartsModule\n\n\n\ncluster_NgxChartsModule_declarations\n\n\n\ncluster_NgxChartsModule_exports\n\n\n\ncluster_VisTimelineModule\n\n\n\ncluster_VisTimelineModule_declarations\n\n\n\ncluster_VisTimelineModule_exports\n\n\n\n\nBsFacetHeatmapComponent\n\nBsFacetHeatmapComponent\n\n\n\nBsHeatmapModule\n\nBsHeatmapModule\n\nBsHeatmapModule -->\n\nBsFacetHeatmapComponent->BsHeatmapModule\n\n\n\n\n\nBsHeatmapComponent\n\nBsHeatmapComponent\n\nBsHeatmapModule -->\n\nBsHeatmapComponent->BsHeatmapModule\n\n\n\n\n\nBsResultsHeatmapView\n\nBsResultsHeatmapView\n\nBsHeatmapModule -->\n\nBsResultsHeatmapView->BsHeatmapModule\n\n\n\n\n\nBsTooltipComponent\n\nBsTooltipComponent\n\nBsHeatmapModule -->\n\nBsTooltipComponent->BsHeatmapModule\n\n\n\n\n\nBsFacetHeatmapComponent \n\nBsFacetHeatmapComponent \n\nBsFacetHeatmapComponent  -->\n\nBsHeatmapModule->BsFacetHeatmapComponent \n\n\n\n\n\nBsHeatmapComponent \n\nBsHeatmapComponent \n\nBsHeatmapComponent  -->\n\nBsHeatmapModule->BsHeatmapComponent \n\n\n\n\n\nBsResultsHeatmapView \n\nBsResultsHeatmapView \n\nBsResultsHeatmapView  -->\n\nBsHeatmapModule->BsResultsHeatmapView \n\n\n\n\n\nBsTooltipComponent \n\nBsTooltipComponent \n\nBsTooltipComponent  -->\n\nBsHeatmapModule->BsTooltipComponent \n\n\n\n\n\nBsTimelineModule\n\nBsTimelineModule\n\nBsTimelineModule -->\n\nBsHeatmapModule->BsTimelineModule\n\n\n\n\n\nFinanceModule\n\nFinanceModule\n\nFinanceModule -->\n\nBsHeatmapModule->FinanceModule\n\n\n\n\n\nBsFacetTimelineComponent\n\nBsFacetTimelineComponent\n\nBsTimelineModule -->\n\nBsFacetTimelineComponent->BsTimelineModule\n\n\n\n\n\nBsTimelineComponent\n\nBsTimelineComponent\n\nBsTimelineModule -->\n\nBsTimelineComponent->BsTimelineModule\n\n\n\n\n\nBsFacetTimelineComponent \n\nBsFacetTimelineComponent \n\nBsFacetTimelineComponent  -->\n\nBsTimelineModule->BsFacetTimelineComponent \n\n\n\n\n\nBsTimelineComponent \n\nBsTimelineComponent \n\nBsTimelineComponent  -->\n\nBsTimelineModule->BsTimelineComponent \n\n\n\n\n\nMoneyCloudComponent\n\nMoneyCloudComponent\n\nFinanceModule -->\n\nMoneyCloudComponent->FinanceModule\n\n\n\n\n\nMoneyTimelineComponent\n\nMoneyTimelineComponent\n\nFinanceModule -->\n\nMoneyTimelineComponent->FinanceModule\n\n\n\n\n\nMoneyCloudComponent \n\nMoneyCloudComponent \n\nMoneyCloudComponent  -->\n\nFinanceModule->MoneyCloudComponent \n\n\n\n\n\nMoneyTimelineComponent \n\nMoneyTimelineComponent \n\nMoneyTimelineComponent  -->\n\nFinanceModule->MoneyTimelineComponent \n\n\n\n\n\nFusionChart\n\nFusionChart\n\n\n\nFusionChartsModule\n\nFusionChartsModule\n\nFusionChartsModule -->\n\nFusionChart->FusionChartsModule\n\n\n\n\n\nFusionChart \n\nFusionChart \n\nFusionChart  -->\n\nFusionChartsModule->FusionChart \n\n\n\n\n\nMapComponent\n\nMapComponent\n\n\n\nGoogleMapsModule\n\nGoogleMapsModule\n\nGoogleMapsModule -->\n\nMapComponent->GoogleMapsModule\n\n\n\n\n\nMapComponent \n\nMapComponent \n\nMapComponent  -->\n\nGoogleMapsModule->MapComponent \n\n\n\n\n\nBsEdgeInfoCard\n\nBsEdgeInfoCard\n\n\n\nNetworkModule\n\nNetworkModule\n\nNetworkModule -->\n\nBsEdgeInfoCard->NetworkModule\n\n\n\n\n\nBsNodeInfoCard\n\nBsNodeInfoCard\n\nNetworkModule -->\n\nBsNodeInfoCard->NetworkModule\n\n\n\n\n\nNetworkComponent\n\nNetworkComponent\n\nNetworkModule -->\n\nNetworkComponent->NetworkModule\n\n\n\n\n\nBsEdgeInfoCard \n\nBsEdgeInfoCard \n\nBsEdgeInfoCard  -->\n\nNetworkModule->BsEdgeInfoCard \n\n\n\n\n\nBsNodeInfoCard \n\nBsNodeInfoCard \n\nBsNodeInfoCard  -->\n\nNetworkModule->BsNodeInfoCard \n\n\n\n\n\nNetworkComponent \n\nNetworkComponent \n\nNetworkComponent  -->\n\nNetworkModule->NetworkComponent \n\n\n\n\n\nFacetNgxChart\n\nFacetNgxChart\n\n\n\nNgxChartsModule\n\nNgxChartsModule\n\nNgxChartsModule -->\n\nFacetNgxChart->NgxChartsModule\n\n\n\n\n\nNgxChart\n\nNgxChart\n\nNgxChartsModule -->\n\nNgxChart->NgxChartsModule\n\n\n\n\n\nFacetNgxChart \n\nFacetNgxChart \n\nFacetNgxChart  -->\n\nNgxChartsModule->FacetNgxChart \n\n\n\n\n\nNgxChart \n\nNgxChart \n\nNgxChart  -->\n\nNgxChartsModule->NgxChart \n\n\n\n\n\nResultTimeline\n\nResultTimeline\n\n\n\nVisTimelineModule\n\nVisTimelineModule\n\nVisTimelineModule -->\n\nResultTimeline->VisTimelineModule\n\n\n\n\n\nResultTimeline \n\nResultTimeline \n\nResultTimeline  -->\n\nVisTimelineModule->ResultTimeline \n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        8 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    16 Components\n                \n            \n        \n        \n            \n                \n                    \n                    1 Injectable\n                \n            \n        \n        \n            \n                \n                    \n                    8 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    30 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        BsHeatmapModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        BsTimelineModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        FinanceModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        FusionChartsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        GoogleMapsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        NetworkModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        NgxChartsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        VisTimelineModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            AggregationTriggerType   (network/.../aggregation-provider.ts)\n                        \n                        \n                            StructuralDisplayType   (network/.../records-provider.ts)\n                        \n                        \n                            StructuralTriggerType   (network/.../records-provider.ts)\n                        \n                        \n                            TimelineData   (timeline/.../facet-timeline.component.ts)\n                        \n                        \n                            TimelineEventData   (timeline/.../facet-timeline.component.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    network/providers/aggregation-provider.ts\n    \n    \n        \n            \n                \n                    \n                    AggregationTriggerType\n                \n            \n            \n                \n                    Mode \"source\" means node are fetched and added systematically on getData() / other modes allow expanding an existing node\n\n                \n            \n            \n                \n                        \"source\" | \"onclick\" | \"manual\"\n\n                \n            \n        \n    \n    network/providers/records-provider.ts\n    \n    \n        \n            \n                \n                    \n                    StructuralDisplayType\n                \n            \n            \n                \n                        \"all\" | \"paginate\" | \"existingnodes\" | \n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    StructuralTriggerType\n                \n            \n            \n                \n                        \"oninsert\" | \"onclick\" | \"manual\"\n\n                \n            \n        \n    \n    timeline/bootstrap/facet-timeline.component.ts\n    \n    \n        \n            \n                \n                    \n                    TimelineData\n                \n            \n            \n                \n                        TimelineSeries | TimelineAggregation | TimelineCombinedAggregations\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    TimelineEventData\n                \n            \n            \n                \n                        TimelineEvent[] | TimelineRecords | TimelineEventAggregation\n\n                \n            \n        \n    \n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            darkStyle   (googlemaps/.../dark-style.ts)\n                        \n                        \n                            defaultChart   (fusioncharts/.../chart.ts)\n                        \n                        \n                            defaultOptions   (vis-timeline/.../result-timeline.ts)\n                        \n                        \n                            defaultOptions   (network/.../network.component.ts)\n                        \n                        \n                            deFinance   (finance/.../index.ts)\n                        \n                        \n                            deGooglemaps   (googlemaps/.../index.ts)\n                        \n                        \n                            deHeatmap   (heatmap/.../index.ts)\n                        \n                        \n                            enFinance   (finance/.../index.ts)\n                        \n                        \n                            enGooglemaps   (googlemaps/.../index.ts)\n                        \n                        \n                            enHeatmap   (heatmap/.../index.ts)\n                        \n                        \n                            frFinance   (finance/.../index.ts)\n                        \n                        \n                            frGooglemaps   (googlemaps/.../index.ts)\n                        \n                        \n                            frHeatmap   (heatmap/.../index.ts)\n                        \n                        \n                            sinequaComponentsModule   (public-api.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    googlemaps/dark-style.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            darkStyle\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     []\n\n                        \n                    \n                    \n                        \n                            Default value : [\n    {\n      \"elementType\": \"geometry\",\n      \"stylers\": [\n        {\n          \"color\": \"#1d2c4d\"\n        }\n      ]\n    },\n    {\n      \"elementType\": \"labels.text.fill\",\n      \"stylers\": [\n        {\n          \"color\": \"#8ec3b9\"\n        }\n      ]\n    },\n    {\n      \"elementType\": \"labels.text.stroke\",\n      \"stylers\": [\n        {\n          \"color\": \"#1a3646\"\n        }\n      ]\n    },\n    {\n      \"featureType\": \"administrative.country\",\n      \"elementType\": \"geometry.stroke\",\n      \"stylers\": [\n        {\n          \"color\": \"#4b6878\"\n        }\n      ]\n    },\n    {\n      \"featureType\": \"administrative.land_parcel\",\n      \"elementType\": \"labels.text.fill\",\n      \"stylers\": [\n        {\n          \"color\": \"#64779e\"\n        }\n      ]\n    },\n    {\n      \"featureType\": \"administrative.province\",\n      \"elementType\": \"geometry.stroke\",\n      \"stylers\": [\n        {\n          \"color\": \"#4b6878\"\n        }\n      ]\n    },\n    {\n      \"featureType\": \"landscape.man_made\",\n      \"elementType\": \"geometry.stroke\",\n      \"stylers\": [\n        {\n          \"color\": \"#334e87\"\n        }\n      ]\n    },\n    {\n      \"featureType\": \"landscape.natural\",\n      \"elementType\": \"geometry\",\n      \"stylers\": [\n        {\n          \"color\": \"#023e58\"\n        }\n      ]\n    },\n    {\n      \"featureType\": \"poi\",\n      \"elementType\": \"geometry\",\n      \"stylers\": [\n        {\n          \"color\": \"#283d6a\"\n        }\n      ]\n    },\n    {\n      \"featureType\": \"poi\",\n      \"elementType\": \"labels.text.fill\",\n      \"stylers\": [\n        {\n          \"color\": \"#6f9ba5\"\n        }\n      ]\n    },\n    {\n      \"featureType\": \"poi\",\n      \"elementType\": \"labels.text.stroke\",\n      \"stylers\": [\n        {\n          \"color\": \"#1d2c4d\"\n        }\n      ]\n    },\n    {\n      \"featureType\": \"poi.park\",\n      \"elementType\": \"geometry.fill\",\n      \"stylers\": [\n        {\n          \"color\": \"#023e58\"\n        }\n      ]\n    },\n    {\n      \"featureType\": \"poi.park\",\n      \"elementType\": \"labels.text.fill\",\n      \"stylers\": [\n        {\n          \"color\": \"#3C7680\"\n        }\n      ]\n    },\n    {\n      \"featureType\": \"road\",\n      \"elementType\": \"geometry\",\n      \"stylers\": [\n        {\n          \"color\": \"#304a7d\"\n        }\n      ]\n    },\n    {\n      \"featureType\": \"road\",\n      \"elementType\": \"labels.text.fill\",\n      \"stylers\": [\n        {\n          \"color\": \"#98a5be\"\n        }\n      ]\n    },\n    {\n      \"featureType\": \"road\",\n      \"elementType\": \"labels.text.stroke\",\n      \"stylers\": [\n        {\n          \"color\": \"#1d2c4d\"\n        }\n      ]\n    },\n    {\n      \"featureType\": \"road.highway\",\n      \"elementType\": \"geometry\",\n      \"stylers\": [\n        {\n          \"color\": \"#2c6675\"\n        }\n      ]\n    },\n    {\n      \"featureType\": \"road.highway\",\n      \"elementType\": \"geometry.stroke\",\n      \"stylers\": [\n        {\n          \"color\": \"#255763\"\n        }\n      ]\n    },\n    {\n      \"featureType\": \"road.highway\",\n      \"elementType\": \"labels.text.fill\",\n      \"stylers\": [\n        {\n          \"color\": \"#b0d5ce\"\n        }\n      ]\n    },\n    {\n      \"featureType\": \"road.highway\",\n      \"elementType\": \"labels.text.stroke\",\n      \"stylers\": [\n        {\n          \"color\": \"#023e58\"\n        }\n      ]\n    },\n    {\n      \"featureType\": \"transit\",\n      \"elementType\": \"labels.text.fill\",\n      \"stylers\": [\n        {\n          \"color\": \"#98a5be\"\n        }\n      ]\n    },\n    {\n      \"featureType\": \"transit\",\n      \"elementType\": \"labels.text.stroke\",\n      \"stylers\": [\n        {\n          \"color\": \"#1d2c4d\"\n        }\n      ]\n    },\n    {\n      \"featureType\": \"transit.line\",\n      \"elementType\": \"geometry.fill\",\n      \"stylers\": [\n        {\n          \"color\": \"#283d6a\"\n        }\n      ]\n    },\n    {\n      \"featureType\": \"transit.station\",\n      \"elementType\": \"geometry\",\n      \"stylers\": [\n        {\n          \"color\": \"#3a4762\"\n        }\n      ]\n    },\n    {\n      \"featureType\": \"water\",\n      \"elementType\": \"geometry\",\n      \"stylers\": [\n        {\n          \"color\": \"#222222\"\n        }\n      ]\n    },\n    {\n      \"featureType\": \"water\",\n      \"elementType\": \"labels.text.fill\",\n      \"stylers\": [\n        {\n          \"color\": \"#4e6d70\"\n        }\n      ]\n    }\n  ]\n                        \n                    \n\n\n            \n        \n\n    fusioncharts/chart/chart.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            defaultChart\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         object\n\n                        \n                    \n                    \n                        \n                            Default value : {\n    \"theme\": \"fusion\",\n    \"labelDisplay\": \"rotate\",\n    \"slantLabel\": \"1\"\n}\n                        \n                    \n\n\n            \n        \n\n    vis-timeline/result-timeline/result-timeline.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            defaultOptions\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     TimelineOptions\n\n                        \n                    \n                    \n                        \n                            Default value : {\n    minHeight : '150px',\n    maxHeight : '350px',\n    margin: {\n        axis: 5,\n        item: 5\n    }\n}\n                        \n                    \n\n\n            \n        \n\n    network/network.component.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            defaultOptions\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Options\n\n                        \n                    \n                    \n                        \n                            Default value : {\n    height: '500px'\n}\n                        \n                    \n\n                \n                    \n                        Default options of the Vis.js network.\nSee: https://visjs.github.io/vis-network/docs/network/\n\n                    \n                \n\n            \n        \n\n    finance/messages/index.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            deFinance\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : Utils.merge({}, _deFinance, deFacet)\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            enFinance\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : Utils.merge({}, _enFinance, enFacet)\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            frFinance\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : Utils.merge({}, _frFinance, frFacet)\n                        \n                    \n\n\n            \n        \n\n    googlemaps/messages/index.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            deGooglemaps\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : Utils.merge({}, _deGooglemaps, deFacet)\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            enGooglemaps\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : Utils.merge({}, _enGooglemaps, enFacet)\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            frGooglemaps\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : Utils.merge({}, _frGooglemaps, frFacet)\n                        \n                    \n\n\n            \n        \n\n    heatmap/messages/index.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            deHeatmap\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : Utils.merge({}, _deHeatmap, deResultsView, deSearch)\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            enHeatmap\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : Utils.merge({}, _enHeatmap, enResultsView, enSearch)\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            frHeatmap\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : Utils.merge({}, _frHeatmap, frResultsView, frSearch)\n                        \n                    \n\n\n            \n        \n\n    public-api.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            sinequaComponentsModule\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : undefined\n                        \n                    \n\n\n            \n        \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
