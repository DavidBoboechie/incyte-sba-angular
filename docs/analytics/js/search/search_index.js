var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.8","fields":["title","body"],"fieldVectors":[["title/interfaces/AggregationData.html",[0,0.155,1,2.389]],["body/interfaces/AggregationData.htmltitle/interfaces/AggregationEdge.html",[0,0.155,60,2.389]],["body/interfaces/AggregationEdge.html",[0,0.279,1,3.799,2,0.547,3,0.106,4,0.231,5,0.106,6,1.96,7,1.181,8,1.241,9,3.253,10,1.831,11,2.514,12,1.387,13,1.125,14,2.693,15,2.059,16,2.289,17,1.719,18,3.097,19,1.001,20,4.203,21,0.198,22,0.426,24,3.029,25,2.444,26,1.125,27,1.831,28,2.303,29,0.555,30,0.44,31,0.019,32,0.699,33,0.245,34,2.314,35,3.32,36,0.772,37,0.547,38,1.092,39,1.168,40,1.857,41,0.848,42,1.387,43,0.997,44,1.125,45,1.347,46,0.519,47,2.614,48,2.396,49,0.772,50,0.777,51,0.701,52,2.059,53,1.62,54,1.469,55,2.396,56,2.603,57,1.772,58,3.573,59,0.245,60,2.998,61,1.6,62,2.362,63,2.785,64,2.059,65,2.603,66,1.96,67,0.885,68,0.769,69,0.772,70,0.619,71,1.96,72,2.289,73,2.917,74,1.953,75,2.289,76,1.62,77,3.253,78,2.289,79,2.303,80,1.241,81,3.253,82,2.273,83,2.531,84,2.603,85,1.614,86,2.289,87,1.53,88,2.289,89,3.488,90,2.514,91,2.514,92,1.454,93,2.917,94,1.735,95,0.931,96,0.396,97,2.844,98,2.053,99,2.053,100,1.54,101,0.612,102,1.879,103,1.719,104,2.514,105,1.96,106,2.514,107,1.724,108,0.914,109,0.789,110,2.109,111,0.889,112,2.109,113,2.514,114,2.351,115,0.858,116,0.769,117,3.253,118,1.205,119,1.53,120,1.831,121,1.374,122,1.263,123,1.216,124,2.679,125,2.289,126,2.514,127,1.62,128,3.082,129,1.953,130,0.039,131,2.289,132,2.109,133,2.289,134,1.21,135,1.125,136,2.514,137,0.547,138,0.575,139,1.691,140,1.62,141,1.449,142,2.289,143,1.271,144,1.953,145,1.841,146,5.225,147,2.603,148,1.023,149,1.374,150,2.514,151,2.514,152,0.879,153,2.514,154,2.514,155,1.831,156,1.831,157,1.831,158,4.157,159,2.514,160,4.157,161,3.573,162,2.514,163,1.449,164,2.514,165,2.514,166,2.514,167,2.514,168,2.514,169,2.514,170,2.514,171,2.109,172,1.241,173,2.514,174,1.374,175,1.96,176,1.449,177,2.514,178,0.011,179,2.514,180,2.514,181,3.029,182,2.289,183,1.953,184,1.692,185,2.514,186,2.514,187,1.831,188,1.831,189,2.514,190,2.514,191,1.831,192,2.514,193,2.514,194,2.514,195,2.514,196,2.303,197,0.889,198,1.96,199,2.514,200,3.253,201,3.785,202,2.514,203,1.62,204,2.514,205,1.96,206,2.514,207,0.836,208,3.573,209,1.96,210,2.514,211,3.573,212,1.96,213,2.514,214,2.289,215,1.374,216,2.514,217,2.514,218,1.073,219,1.831,220,1.719,221,1.54,222,2.514,223,2.514,224,1.719,225,2.514,226,2.514,227,2.514,228,2.514,229,2.514,230,2.514,231,2.514,232,0.743,233,2.603,234,2.514,235,2.514,236,2.514,237,2.514,238,0.415,239,2.514,240,2.785,241,2.514,242,1.53,243,1.96,244,0.931,245,2.289,246,2.109,247,1.241,248,1.305,249,1.831,250,1.125,251,1.53,252,1.374,253,1.831,254,1.96,255,2.514,256,4.528,257,3.097,258,2.531,259,2.514,260,4.157,261,0.931,262,1.861,263,1.271,264,0.736,265,2.514,266,3.097,267,0.976,268,3.573,269,2.917,270,4.528,271,3.573,272,1.855,273,1.525,274,2.175,275,3.573,276,3.573,277,3.573,278,3.573,279,3.573,280,3.573,281,1.529,282,2.175,283,1.96,284,1.305,285,2.514,286,1.125,287,1.96,288,2.917,289,1.691,290,2.475,291,1.894,292,4.528,293,4.528,294,3.785,295,1.724,296,2.514,297,2.128,298,2.514,299,3.573,300,3.253,301,2.514,302,2.514,303,2.603,304,4.157,305,3.573,306,0.889,307,0.976,308,1.62,309,2.514,310,1.96,311,1.073,312,1.719,313,2.289,314,2.514,315,2.514,316,0.889,317,2.514,318,4.157,319,2.514,320,2.514,321,0.008,322,0.011]],["title/interfaces/AggregationEdgeType.html",[0,0.155,20,2.219]],["body/interfaces/AggregationEdgeType.html",[0,0.277,1,3.765,2,0.536,3,0.104,4,0.23,5,0.104,6,1.922,7,1.159,8,1.217,9,3.208,10,1.796,11,2.465,12,1.368,13,1.104,14,2.683,15,2.031,16,2.244,17,1.686,18,3.556,19,1.143,20,4.235,21,0.194,22,0.42,23,0.877,24,2.996,25,2.41,26,1.104,27,1.796,28,2.271,29,0.547,30,0.444,31,0.019,32,0.724,33,0.244,34,2.309,35,3.006,36,0.757,37,0.536,38,1.09,39,1.142,40,1.974,41,0.831,42,1.368,43,0.983,44,1.104,45,1.343,46,0.509,47,2.595,48,2.37,49,0.757,50,0.766,51,0.688,52,2.031,53,1.588,54,1.454,55,2.37,56,1.796,57,1.758,58,2.465,59,0.244,60,2.068,61,1.586,62,2.344,63,2.747,64,2.031,65,2.567,66,1.922,67,0.877,68,0.83,69,0.757,70,0.614,71,1.922,72,2.244,73,3.059,74,2.248,75,2.244,76,1.588,77,3.208,78,2.244,79,2.271,80,1.217,81,4.086,82,2.248,83,2.503,84,2.567,85,1.597,86,2.244,87,1.501,88,2.244,89,3.765,90,2.465,91,3.524,92,1.826,93,3.059,94,1.766,95,1.305,96,0.455,97,3.069,98,2.216,99,2.216,100,1.662,101,0.632,102,1.94,103,2.41,104,3.524,105,2.747,106,3.524,107,1.714,108,0.909,109,0.783,110,2.068,111,0.871,112,2.957,113,3.524,114,2.639,115,0.926,116,0.914,117,3.745,118,1.601,119,1.501,120,1.796,121,1.347,122,1.246,123,1.213,124,2.65,125,2.244,126,2.465,127,1.588,128,3.059,129,1.926,130,0.039,131,2.244,132,2.068,133,2.244,134,1.201,135,1.104,136,2.465,137,0.536,138,0.564,139,1.678,140,1.588,141,1.421,142,2.244,143,1.262,144,1.926,145,1.829,146,5.198,147,2.567,148,1.003,149,1.347,150,2.465,151,2.465,152,0.877,153,2.465,154,2.465,155,1.796,156,1.796,157,1.796,158,4.113,159,2.465,160,4.113,161,3.524,162,2.465,163,1.421,164,2.465,165,2.465,166,2.465,167,2.465,168,2.465,169,2.465,170,2.465,171,2.068,172,1.217,173,2.465,174,1.347,175,1.922,176,1.421,177,2.465,178,0.011,179,2.465,180,2.465,181,2.996,182,2.244,183,1.926,184,1.674,185,2.465,186,2.465,187,1.796,188,1.796,189,2.465,190,2.465,191,1.796,192,2.465,193,2.465,194,2.465,195,2.465,196,2.271,197,0.871,198,1.922,199,2.465,200,3.208,201,3.745,202,2.465,203,1.588,204,2.465,205,1.922,206,2.465,207,0.83,208,3.524,209,1.922,210,2.465,211,3.524,212,1.922,213,2.465,214,2.244,215,1.347,216,2.465,217,2.465,218,1.052,219,1.796,220,1.686,221,1.523,222,2.465,223,2.465,224,1.686,225,2.465,226,2.465,227,2.465,228,2.465,229,2.465,230,2.465,231,2.465,232,0.737,233,2.567,234,2.465,235,2.465,236,2.465,237,2.465,238,0.407,239,2.465,240,2.747,241,2.465,242,1.501,243,1.922,244,0.913,245,2.244,246,2.068,247,1.217,248,1.28,249,1.796,250,1.104,251,1.501,252,1.347,253,1.796,254,1.922,255,2.465,256,4.488,257,3.069,258,2.503,259,2.465,260,4.113,261,0.913,262,1.841,263,1.262,264,0.721,265,2.465,266,3.069,267,0.957,268,3.524,269,2.892,270,4.488,271,3.524,272,1.83,273,1.504,274,2.145,275,3.524,276,3.524,277,3.524,278,3.524,279,3.524,280,3.524,281,1.522,282,2.145,283,1.922,284,1.28,285,2.465,286,1.104,287,1.922,288,2.892,289,1.678,290,2.453,291,1.883,292,4.488,293,4.488,294,3.745,295,1.714,296,2.465,297,2.109,298,2.465,299,3.524,300,3.208,301,2.465,302,2.465,303,2.567,304,4.113,305,3.524,306,0.871,307,0.957,308,1.588,309,2.465,310,1.922,311,1.052,312,1.686,313,2.244,314,2.465,315,2.465,316,0.871,317,2.465,318,4.113,319,2.465,320,2.465,321,0.008,322,0.011]],["title/classes/AsyncRecordsProvider.html",[130,0.045,323,2.847]],["body/classes/AsyncRecordsProvider.html",[0,0.162,3,0.126,4,0.126,5,0.126,7,1.4,8,2.587,19,0.717,21,0.235,22,0.479,23,1.122,26,1.334,30,0.464,31,0.019,32,0.733,33,0.224,38,1.087,39,1.138,41,1.715,42,2.143,43,0.831,44,1.334,45,1.381,47,3.204,49,0.914,50,0.648,52,3.348,53,2.931,54,1.925,55,2.317,59,0.147,61,1.421,67,0.786,68,0.901,69,1.234,70,0.408,71,2.322,73,2.59,76,3.509,79,2.59,82,1.629,92,1.636,94,1.464,96,0.652,100,1.489,101,0.582,102,1.852,108,0.889,111,1.053,115,1.105,117,3.66,119,2.965,123,0.648,129,2.197,130,0.047,134,1.017,135,2.346,137,0.874,138,1.348,139,1.721,140,3.138,141,1.717,144,2.197,145,1.984,149,1.629,176,1.717,178,0.009,196,1.92,238,0.491,244,1.104,248,2.529,249,2.171,250,2.346,257,2.038,263,1.424,264,0.872,267,1.561,281,1.177,284,1.547,286,2.346,306,1.053,307,1.561,321,0.009,322,0.012,323,4.02,324,2.5,325,5.695,326,2.696,327,5.233,328,2.317,329,2.749,330,1.561,331,1.359,332,3.556,333,4.02,334,1.716,335,4.02,336,4.02,337,1.636,338,5.233,339,4.434,340,4.434,341,4.434,342,3.66,343,2.769,344,1.766,345,3.66,346,3.66,347,2.979,348,2.438,349,2.807,350,4.086,351,2.535,352,3.878,353,2.696,354,3.878,355,6.609,356,3.336,357,3.336,358,4.02,359,3.336,360,3.336,361,3.336,362,3.336,363,3.336,364,3.336,365,1.561,366,3.878,367,6.34,368,3.548,369,1.985,370,1.075,371,1.811,372,5.233,373,3.336,374,2.929,375,1.356,376,3.373,377,1.985,378,1.177,379,3.336,380,3.336,381,2.038,382,2.5,383,3.373,384,1.561,385,2.5,386,2.59,387,1.157,388,2.59,389,1.4,390,1.629,391,2.5,392,2.322,393,3.336,394,2.447,395,3.336,396,3.336,397,1.92,398,1.471,399,2.979,400,1.889,401,3.336,402,3.336,403,1.547,404,3.336,405,1.547,406,2.322,407,2.322,408,3.336,409,1.814,410,3.336,411,4.549,412,1.561,413,2.979,414,1.766,415,2.322,416,1.814,417,1.814,418,1.157,419,1.814,420,1.489,421,3.336,422,3.336,423,1.471,424,3.336,425,3.336,426,3.336,427,1.814,428,3.336,429,3.336,430,1.814,431,3.336,432,3.878,433,3.878,434,2.979,435,3.878]],["title/classes/BaseProvider.html",[52,1.641,130,0.045]],["body/classes/BaseProvider.html",[0,0.222,3,0.103,4,0.103,5,0.103,7,1.138,8,2.01,9,3.167,12,1.351,19,0.838,21,0.191,22,0.531,23,1.03,24,2.966,26,2.197,30,0.451,31,0.019,32,0.761,33,0.22,38,1.097,39,1.214,40,1.581,41,1.655,42,1.905,43,1.136,44,1.084,45,1.43,46,0.499,48,2.347,50,0.526,51,0.675,52,2.005,53,3.334,54,2.001,59,0.119,62,1.718,67,1.011,68,1.029,69,1.588,70,0.476,76,2.242,85,1.351,94,1.31,95,1.916,96,0.606,100,1.289,101,0.647,102,1.787,108,0.935,109,0.869,111,1.23,115,1.187,118,1.804,122,1.439,123,1.231,130,0.038,134,0.88,135,2.394,137,0.756,138,1.317,139,1.735,145,1.649,148,0.985,152,0.85,178,0.007,197,1.439,203,2.242,207,0.778,215,1.324,221,1.508,233,3.435,238,0.574,244,1.818,245,2.205,248,1.806,249,2.966,250,2.264,251,1.474,258,2.118,263,1.375,267,1.351,281,1.303,286,1.993,288,2.624,289,1.666,290,2.828,291,2.044,294,4.292,295,1.59,297,1.635,300,4.469,306,0.856,307,1.351,311,2.249,312,2.379,321,0.007,322,0.011,324,2.031,331,1.315,333,4.072,334,1.738,335,4.072,336,4.072,337,1.811,339,3.167,340,3.167,341,3.167,342,3.167,343,2.709,344,1.728,345,3.167,346,3.167,347,2.421,348,1.993,351,2.427,353,2.432,358,4.451,365,1.728,370,1.012,371,1.579,373,2.711,375,1.173,381,2.379,387,1.351,388,2.242,394,2.118,409,2.118,411,4.908,412,1.83,413,4.072,414,2.076,415,2.712,416,2.118,417,2.118,418,1.351,419,2.118,420,1.649,423,2.198,427,2.118,430,2.118,436,6.395,437,5.3,438,4.529,439,3.707,440,1.119,441,4.529,442,3.152,443,3.152,444,3.152,445,3.152,446,3.152,447,3.152,448,3.152,449,3.152,450,3.152,451,3.152,452,3.152,453,3.152,454,3.152,455,3.152,456,3.152,457,0.709,458,4.529,459,5.794,460,4.529,461,4.529,462,3.152,463,3.152,464,2.421,465,4.529,466,4.529,467,3.152,468,1.764,469,3.152,470,3.152,471,2.379,472,1.666,473,1.474,474,3.152,475,3.152,476,3.152,477,3.152,478,3.152,479,3.152,480,3.152,481,3.152,482,3.152,483,2.712,484,2.828,485,6.389,486,4.529,487,1.581,488,4.529,489,1.485,490,4.529,491,2.005,492,3.152,493,1.656,494,3.152,495,4.529,496,3.152,497,3.152,498,3.152,499,3.152,500,3.896,501,2.242,502,4.529,503,3.152,504,3.896,505,4.984,506,1.887,507,3.152,508,2.711,509,2.205,510,2.919,511,3.152,512,3.152,513,3.152,514,3.152,515,4.529,516,3.152,517,3.152,518,3.152,519,3.152,520,3.152,521,3.152,522,1.656,523,3.152,524,3.152,525,1.764,526,1.395,527,3.152,528,1.324,529,4.529,530,3.152,531,3.152,532,3.152,533,3.152,534,4.529,535,3.152,536,3.152,537,3.152,538,3.152,539,3.152,540,3.152,541,3.152,542,4.529,543,3.152,544,3.152,545,3.152,546,5.3,547,3.152,548,4.529,549,4.529,550,4.529,551,3.152,552,3.152,553,3.152,554,3.152,555,3.152,556,4.529,557,3.152,558,4.529,559,3.152,560,3.152,561,3.152,562,4.529,563,3.152,564,3.152,565,3.152]],["title/components/BsEdgeInfoCard.html",[566,0.557,567,1.556]],["body/components/BsEdgeInfoCard.html",[3,0.249,4,0.147,5,0.147,13,1.555,21,0.273,22,0.53,23,0.679,29,0.83,30,0.43,31,0.019,33,0.219,38,1.083,39,1.19,43,1.24,44,1.555,59,0.171,67,0.869,96,0.543,108,0.607,109,0.573,111,1.571,114,1.803,130,0.054,148,1.413,152,0.539,178,0.014,232,0.874,238,0.809,281,1.016,295,1.499,297,2.089,312,3.041,316,1.227,321,0.014,322,0.014,331,1.368,337,1.809,351,2.372,353,1.632,370,0.823,371,1.117,440,1.43,504,5.491,505,5.491,566,0.959,567,2.826,568,2.865,569,1.803,570,2.421,571,1.803,572,2.375,573,6.303,574,3.161,575,1.654,576,1.905,577,1.905,578,5.344,579,2.305,580,4.904,581,2.305,582,1.996,583,2.448,584,4.904,585,4.904,586,4.904,587,5.467,588,1.996,589,4.465,590,4.465,591,4.114,592,4.114,593,4.904,594,1.499,595,4.446,596,3.16,597,4.465,598,4.978,599,2.826,600,2.706,601,4.52,602,4.446,603,4.52,604,3.888,605,4.52,606,4.52,607,3.888,608,4.52,609,1.43,610,0.755,611,3.472,612,3.472,613,4.52,614,4.52,615,4.52,616,4.52,617,3.472,618,3.472,619,1.632,620,2.237,621,2.001,622,3.472,623,3.472,624,3.472,625,3.472,626,4.446,627,3.472,628,1.555,629,3.472,630,2.707,631,1.714,632,3.472,633,1.117,634,3.161,635,5.79,636,6.303,637,3.041,638,5.787,639,4.52,640,5.787,641,4.52,642,4.52,643,4.978,644,4.978,645,3.041,646,1.482,647,2.195,648,2.562,649,2.375,650,3.536,651,2.375,652,4.52,653,4.52,654,4.52,655,3.041,656,2.001,657,2.093,658,3.041,659,1.632,660,3.354,661,1.803,662,1.803,663,2.001,664,1.898,665,2.375,666,1.714,667,1.898,668,2.375,669,1.803,670,1.364,671,3.354,672,2.001,673,2.114,674,1.898,675,2.375,676,1.898,677,2.562,678,2.375,679,1.898,680,1.898,681,2.375,682,1.714,683,1.898,684,1.413,685,2.375,686,2.375]],["title/components/BsHeatmapComponent.html",[566,0.557,661,1.478]],["body/components/BsHeatmapComponent.html",[0,0.13,3,0.171,4,0.101,5,0.101,13,1.064,19,0.827,21,0.187,22,0.409,23,0.983,29,0.758,30,0.456,31,0.019,32,0.667,33,0.169,38,0.44,39,0.49,57,1.493,59,0.169,67,0.915,68,1.033,70,0.718,88,2.164,92,1.397,96,0.557,101,0.439,103,2.348,107,1.579,112,2.88,115,1.135,116,1.018,118,1.359,123,0.876,130,0.037,137,0.746,143,0.632,152,0.827,178,0.011,183,1.299,197,0.84,207,0.6,221,1.635,232,0.685,242,1.447,261,0.881,262,2.096,284,1.234,297,2.2,306,0.84,321,0.011,322,0.011,337,1.397,351,2.53,353,2.503,368,1.732,370,0.93,371,1.569,378,0.696,390,1.299,405,1.234,406,2.676,407,1.853,418,1.333,440,1.105,487,1.564,489,1.72,526,2.697,566,0.788,567,1.299,568,2.212,569,2.092,570,1.174,571,1.234,572,1.626,575,1.359,576,1.825,577,1.84,579,1.613,581,2.074,582,1.905,583,1.976,588,1.64,592,1.994,594,1.158,599,2.749,600,2.09,609,1.77,610,0.517,619,1.117,631,1.695,633,1.105,646,1.883,647,1.99,648,1.978,649,1.626,650,3.019,651,1.626,655,2.348,656,1.37,657,1.72,658,2.348,659,1.117,660,2.756,661,2.291,662,1.234,663,1.37,664,2.666,665,1.626,666,1.174,667,1.299,668,1.626,669,1.234,670,1.054,671,2.756,672,1.37,673,1.447,674,1.299,675,1.626,676,1.299,677,1.978,678,1.626,679,1.299,680,1.299,681,1.626,682,1.174,683,1.299,684,0.967,685,1.626,686,1.626,687,2.377,688,2.936,689,1.695,690,4.513,691,3.844,692,4.513,693,3.215,694,3.215,695,4.513,696,2.936,697,2.936,698,2.936,699,2.936,700,2.936,701,2.936,702,4.469,703,3.88,704,2.936,705,3.821,706,2.936,707,5.241,708,5.246,709,3.41,710,4.469,711,4.469,712,4.469,713,4.513,714,4.942,715,2.936,716,4.513,717,2.092,718,5.241,719,5.241,720,1.99,721,5.241,722,3.433,723,4.513,724,4.513,725,3.094,726,3.134,727,4.469,728,2.501,729,3.094,730,3.844,731,3.094,732,3.844,733,3.094,734,4.963,735,3.094,736,2.501,737,2.543,738,3.094,739,3.094,740,2.291,741,2.322,742,4.877,743,1.877,744,3.094,745,3.094,746,3.094,747,2.179,748,1.695,749,3.094,750,3.126,751,3.094,752,3.094,753,2.2,754,3.094,755,3.094,756,3.844,757,3.094,758,3.141,759,4.513,760,2.936,761,2.291,762,3.844,763,4.942,764,3.126,765,3.844,766,3.317,767,2.348,768,2.967,769,2.501,770,3.844,771,3.844,772,4.513,773,3.094,774,3.094,775,3.094,776,3.844,777,1.613,778,3.094,779,3.094,780,2.849,781,3.126,782,3.094,783,3.094,784,4.942,785,3.844,786,2.291,787,4.513,788,3.094,789,3.844,790,2.88,791,2.348,792,4.513,793,3.094,794,3.094,795,3.844,796,3.094,797,3.094,798,3.094,799,3.094,800,3.094,801,3.094,802,3.094,803,3.094,804,3.094,805,3.094,806,3.094,807,3.094,808,3.094,809,1.853,810,3.094,811,4.877,812,3.094,813,3.215,814,3.094,815,3.094,816,3.094,817,1.894,818,2.09,819,1.299,820,2.662,821,2.662,822,1.447,823,2.662,824,1.37,825,2.212,826,1.447,827,1.695,828,1.732,829,1.732,830,2.43,831,1.994,832,1.064,833,2.676,834,2.662,835,2.662,836,3.844,837,3.844,838,2.662,839,2.662,840,2.662,841,2.662,842,2.662,843,2.662,844,2.662,845,2.662,846,2.662,847,1.732,848,2.662,849,2.501,850,2.936,851,1.732,852,1.732,853,1.732,854,2.662,855,1.732,856,1.732,857,1.732,858,2.662,859,2.662,860,2.662,861,1.732,862,1.532,863,1.732,864,2.662,865,1.994,866,1.732,867,1.994,868,1.732,869,1.732,870,1.732,871,1.732,872,1.732,873,2.662,874,1.994,875,1.853,876,2.662,877,2.662,878,2.662,879,2.662,880,2.88,881,2.662,882,2.662,883,2.662,884,2.662,885,2.662,886,2.662,887,2.662,888,1.213,889,2.501,890,2.662,891,2.662,892,1.994,893,2.377,894,2.662,895,2.662,896,2.88,897,1.853,898,3.844,899,3.844,900,1.877,901,3.844,902,2.662,903,2.662,904,1.732,905,2.662,906,2.662,907,1.732,908,1.37,909,2.348,910,1.732,911,1.732,912,2.501,913,2.501,914,2.501,915,1.732,916,1.732,917,0.923,918,1.732,919,1.732,920,2.662,921,2.662,922,4.513,923,3.844,924,3.844,925,2.662,926,2.377,927,2.662,928,2.662,929,2.662,930,2.662,931,4.469,932,4.469,933,4.469,934,5.745,935,4.469,936,4.469,937,4.469,938,4.469,939,4.469,940,4.469,941,4.469,942,2.501,943,3.094,944,3.094,945,3.094,946,3.094,947,5.246,948,5.246,949,3.094,950,1.626,951,3.094,952,3.094,953,3.094,954,3.094,955,3.094,956,3.094,957,4.469,958,4.513,959,6.349,960,4.469,961,3.094,962,3.094,963,3.094,964,3.094,965,3.094,966,2.662,967,4.469,968,4.469,969,2.09,970,4.469,971,3.094,972,1.732,973,2.164,974,3.094]],["title/modules/BsHeatmapModule.html",[975,1.215,976,2.219]],["body/modules/BsHeatmapModule.html",[3,0.179,4,0.179,5,0.179,31,0.019,33,0.291,46,0.874,59,0.209,130,0.066,178,0.015,321,0.013,322,0.015,365,1.644,375,1.429,610,0.921,628,1.897,646,1.808,656,3.429,657,1.808,661,3.089,663,3.429,664,2.315,667,3.252,975,1.808,976,4.681,977,2.441,978,2.441,979,3.453,980,2.729,981,3.453,982,4.744,983,4.744,984,4.744,985,2.145,986,2.199,987,5.514,988,3.437,989,3.437,990,2.897,991,5.025,992,5.025,993,3.857,994,3.437,995,1.3,996,4.216,997,2.199,998,4.216,999,5.514,1000,6.542,1001,2.897]],["title/components/BsNodeInfoCard.html",[566,0.557,662,1.478]],["body/components/BsNodeInfoCard.html",[0,0.179,3,0.248,4,0.139,5,0.139,13,1.472,21,0.259,22,0.512,23,0.643,29,0.816,30,0.443,31,0.019,32,0.45,33,0.212,38,1.107,39,0.885,43,1.197,44,1.472,59,0.212,67,0.934,69,1.009,70,0.45,94,1.381,96,0.561,108,0.575,109,0.788,111,1.517,114,1.707,116,0.794,118,1.877,130,0.052,148,1.338,152,0.787,172,1.623,178,0.013,197,1.162,232,0.882,238,0.788,242,2.001,252,1.797,281,0.962,295,1.447,297,2.017,306,1.162,311,1.403,316,1.162,321,0.013,322,0.013,331,1.333,337,1.746,351,2.342,353,1.545,370,0.794,371,1.058,378,0.962,398,1.623,440,1.381,472,1.162,566,0.934,567,1.797,568,2.765,569,1.707,570,2.359,571,1.707,572,2.248,574,2.993,575,1.611,576,1.895,577,1.895,578,5.253,579,2.245,580,4.777,581,2.245,582,1.944,583,2.412,584,4.777,585,4.777,586,4.777,587,5.388,588,1.944,589,4.349,590,4.349,591,4.008,592,4.008,593,4.777,594,1.447,595,4.291,596,3.078,597,4.349,598,4.805,599,2.768,600,2.612,602,4.291,604,3.681,607,3.681,609,1.381,610,0.715,611,3.287,612,3.287,617,3.287,618,3.287,619,1.545,620,2.118,621,1.894,622,3.287,623,3.287,624,3.287,625,3.287,626,4.291,627,3.287,628,1.472,629,3.287,630,2.562,631,1.623,632,3.287,633,1.058,634,2.993,635,4.805,636,5.671,643,4.805,644,4.805,646,1.403,647,2.119,648,2.473,649,2.248,650,3.464,651,2.248,655,2.935,656,1.894,657,2.039,658,2.935,659,1.545,660,3.267,661,1.707,662,2.629,663,1.894,664,1.797,665,2.248,666,1.623,667,1.797,668,2.248,669,1.707,670,1.317,671,3.267,672,1.894,673,2.001,674,1.797,675,2.248,676,1.797,677,2.473,678,2.248,679,1.797,680,1.797,681,2.248,682,1.623,683,1.797,684,1.338,685,2.248,686,2.248,1002,5.565,1003,4.249,1004,5.067,1005,4.279,1006,4.279,1007,4.279,1008,2.248,1009,4.279,1010,4.279,1011,3.681,1012,3.681,1013,3.681,1014,3.681,1015,3.681,1016,3.681,1017,3.681,1018,3.078,1019,5.349,1020,2.765,1021,2.118,1022,3.681,1023,3.681,1024,2.993,1025,3.681,1026,3.681,1027,3.681,1028,3.287,1029,3.681,1030,3.681,1031,3.287,1032,3.681,1033,3.681,1034,3.681,1035,3.681,1036,3.681,1037,3.681,1038,3.681,1039,3.681,1040,3.681,1041,3.681,1042,3.681,1043,3.681,1044,5.586,1045,4.279,1046,5.586,1047,5.586,1048,4.279]],["title/modules/BsTimelineModule.html",[975,1.215,1049,2.592]],["body/modules/BsTimelineModule.html",[3,0.182,4,0.182,5,0.182,31,0.019,33,0.292,46,0.885,59,0.212,130,0.067,178,0.013,272,2.227,321,0.013,322,0.016,365,1.665,375,1.446,566,0.838,610,0.932,646,1.83,657,1.83,659,2.8,664,2.344,666,2.942,830,2.227,975,2.16,976,4.486,977,2.472,978,2.472,979,3.471,980,2.763,981,3.471,985,2.16,986,2.227,988,3.463,989,3.463,990,2.933,991,5.062,992,5.062,993,3.905,994,3.463,995,1.316,996,4.247,997,2.227,998,4.247,1001,3.463,1049,5.425,1050,4.803,1051,4.803,1052,5.583,1053,4.803,1054,5.583,1055,4.247,1056,2.933,1057,4.803,1058,3.946]],["title/components/BsTooltipComponent.html",[566,0.557,667,1.556]],["body/components/BsTooltipComponent.html",[3,0.21,4,0.151,5,0.151,13,1.593,21,0.411,30,0.355,31,0.019,33,0.176,38,0.658,39,0.734,59,0.176,68,0.996,96,0.5,109,0.745,115,1.111,130,0.056,163,2.859,178,0.014,232,0.855,321,0.014,322,0.014,351,2.348,508,5.057,526,3.171,566,0.97,567,1.945,568,2.91,569,2.345,570,2.449,571,1.848,572,2.434,576,1.91,577,1.94,579,2.586,581,2.659,582,2.356,583,2.221,589,5.299,600,2.749,609,1.77,610,0.774,646,1.519,647,2.23,648,2.603,649,2.434,650,3.569,651,2.434,655,3.089,656,2.051,657,2.117,658,3.089,659,1.673,660,3.393,661,1.848,662,1.848,663,2.051,664,1.945,665,2.434,666,1.757,667,2.852,668,2.434,669,1.848,670,1.386,671,3.393,672,2.051,673,2.166,674,1.945,675,2.434,676,1.945,677,2.603,678,2.434,679,1.945,680,1.945,681,2.434,682,1.757,683,1.945,684,1.448,685,2.434,686,2.434,720,2.449,747,2.576,748,2.23,830,2.902,942,3.614,1059,3.985,1060,4.516,1061,6.457,1062,4.96,1063,6.457,1064,6.457,1065,6.457,1066,6.162,1067,6.457,1068,6.457,1069,7.163,1070,7.725,1071,7.163,1072,6.457,1073,6.457,1074,4.112,1075,4.633,1076,4.633,1077,4.633,1078,4.633,1079,4.633,1080,4.633,1081,4.633,1082,4.633,1083,4.633,1084,4.633,1085,5.879,1086,5.879,1087,5.879,1088,5.057,1089,5.879,1090,4.633,1091,4.633]],["title/interfaces/ChartDataPoint.html",[0,0.155,1092,2.074]],["body/interfaces/ChartDataPoint.html",[0,0.262,2,0.853,3,0.166,4,0.166,5,0.166,21,0.309,22,0.572,29,0.609,30,0.436,31,0.019,32,0.799,33,0.278,50,0.853,51,1.094,59,0.256,67,0.938,68,1.056,70,0.536,95,1.452,96,0.598,101,0.502,109,0.914,115,0.99,116,0.959,130,0.062,137,0.853,139,1.386,148,1.596,178,0.012,238,0.791,321,0.012,322,0.015,344,1.862,371,1.262,387,1.522,440,1.262,457,1.148,526,2.765,566,0.938,575,1.618,576,1.262,577,1.262,594,1.322,609,1.668,610,0.853,670,1.591,682,1.936,689,1.936,715,3.495,726,2.92,753,2.436,761,2.491,817,1.843,818,2.387,824,2.765,832,2.148,972,2.857,995,1.203,1056,2.682,1092,3.934,1093,3.57,1094,4.025,1095,4.797,1096,2.047,1097,2.92,1098,2.321,1099,4.797,1100,5.183,1101,4.797,1102,3.29,1103,3.281,1104,5.183,1105,3.495,1106,3.921,1107,3.29,1108,3.29,1109,3.921,1110,3.921,1111,2.143,1112,3.921,1113,3.921,1114,2.987,1115,2.387,1116,3.921,1117,3.921,1118,3.921,1119,3.29,1120,3.921,1121,2.682,1122,3.921,1123,3.921,1124,3.921,1125,3.545,1126,3.29,1127,3.921,1128,4.797,1129,3.29,1130,3.29,1131,2.527,1132,3.921,1133,3.29,1134,3.29,1135,3.921,1136,3.921,1137,3.921,1138,2.369,1139,3.921,1140,3.921,1141,3.921,1142,3.57,1143,1.322,1144,3.921,1145,3.921,1146,1.673,1147,3.921,1148,3.057,1149,3.921,1150,3.921,1151,3.921,1152,2.387,1153,3.921,1154,3.921,1155,3.921,1156,4.797,1157,3.921,1158,3.921,1159,3.57,1160,3.921]],["title/interfaces/ChartOptions.html",[0,0.155,1105,2.074]],["body/interfaces/ChartOptions.html",[0,0.259,2,0.841,3,0.164,4,0.164,5,0.164,19,1.294,21,0.305,22,0.567,23,1.098,29,0.601,30,0.459,31,0.019,32,0.805,33,0.277,50,0.841,51,1.079,59,0.254,67,0.93,68,0.995,70,0.529,95,1.433,96,0.428,101,0.495,109,0.91,115,0.982,116,0.716,130,0.061,137,0.841,139,1.368,148,1.575,178,0.012,238,0.785,321,0.012,322,0.015,344,1.847,371,1.245,387,1.502,440,1.245,457,1.132,526,2.742,566,0.93,575,1.605,576,1.245,577,1.245,594,1.305,609,1.658,610,0.841,670,1.581,682,1.91,689,1.91,715,4.021,726,2.896,753,2.422,761,2.47,817,1.819,818,2.355,824,2.742,832,2.13,972,2.819,995,1.188,1056,2.646,1092,3.754,1093,3.523,1094,3.992,1095,4.758,1096,2.031,1097,2.896,1098,2.307,1099,4.758,1100,5.153,1101,4.758,1102,3.246,1103,3.254,1104,5.153,1105,3.754,1106,5.375,1107,4.51,1108,3.246,1109,3.869,1110,3.869,1111,2.115,1112,3.869,1113,3.869,1114,2.969,1115,2.355,1116,3.869,1117,3.869,1118,3.869,1119,3.246,1120,3.869,1121,2.646,1122,3.869,1123,3.869,1124,3.869,1125,3.524,1126,3.246,1127,3.869,1128,4.758,1129,3.246,1130,3.246,1131,2.493,1132,3.869,1133,3.246,1134,3.246,1135,3.869,1136,3.869,1137,3.869,1138,2.349,1139,3.869,1140,3.869,1141,3.869,1142,3.523,1143,1.305,1144,3.869,1145,3.869,1146,1.651,1147,3.869,1148,3.016,1149,3.869,1150,3.869,1151,3.869,1152,2.355,1153,3.869,1154,3.869,1155,3.869,1156,4.758,1157,3.869,1158,3.869,1159,3.523,1160,3.869]],["title/interfaces/CustomData.html",[0,0.155,1161,2.389]],["body/interfaces/CustomData.html",[0,0.248,2,0.482,3,0.094,4,0.094,5,0.094,7,1.042,8,1.095,10,2.378,12,1.848,13,2.503,14,1.095,17,2.232,18,3.366,19,1.146,21,0.413,22,0.509,23,0.987,24,3.468,25,2.921,26,1.912,27,3.111,28,3.377,29,0.707,30,0.463,31,0.019,32,0.755,33,0.224,36,0.681,37,0.482,38,1.109,39,1.2,40,1.658,41,1.44,42,0.861,43,0.911,44,0.993,45,1.216,46,0.457,50,0.482,51,0.619,52,1.881,53,1.429,54,1.683,55,1.881,59,0.243,61,1.369,62,2.35,63,2.544,64,2.232,65,2.378,66,1.729,67,1.062,68,0.983,69,0.681,70,0.705,79,2.103,80,1.095,82,2.117,83,2.357,84,2.378,85,1.267,87,1.987,93,1.429,94,1.776,96,0.361,101,0.659,102,1.964,103,1.517,105,1.729,108,0.571,109,0.865,111,1.369,114,1.151,115,0.457,116,0.911,118,1.306,119,2.996,120,3.111,121,1.212,122,0.784,123,1.233,124,2.495,127,2.495,130,0.035,134,0.98,137,0.482,138,0.508,139,1.853,140,1.429,141,1.278,143,1.135,145,1.909,149,1.212,152,0.844,172,1.095,178,0.007,181,2.378,184,1.328,196,2.495,197,1.51,198,2.544,203,1.429,207,0.796,212,1.729,218,2.032,221,1.823,232,0.707,233,2.378,238,0.865,240,3.019,243,1.729,251,1.35,254,1.729,257,2.232,258,1.987,261,0.821,263,1.029,264,1.133,266,1.517,267,0.861,269,2.495,281,1.332,282,1.35,284,1.151,286,0.993,287,1.729,288,2.103,289,1.154,290,1.784,291,1.209,295,1.101,306,1.369,307,0.861,308,1.429,321,0.007,322,0.01,326,2.313,329,1.517,330,0.861,331,0.911,332,1.429,348,1.734,349,2.91,350,1.861,370,0.604,374,1.616,377,1.611,378,0.649,381,1.517,382,1.861,383,3.583,384,2.282,385,1.861,386,3.621,387,0.861,388,1.429,389,1.534,390,1.212,391,1.861,392,1.729,398,2.247,400,1.042,405,1.151,406,1.729,414,1.848,415,1.729,416,1.35,419,1.987,420,1.434,468,2.378,471,1.517,473,2.996,483,1.729,484,2.334,489,0.946,491,1.278,506,1.729,620,1.429,633,1.532,767,1.517,874,3.249,1003,2.738,1138,1.095,1148,1.729,1161,3.819,1162,1.729,1163,3.526,1164,3.264,1165,3.264,1166,1.576,1167,2.544,1168,1.729,1169,3.844,1170,1.861,1171,2.738,1172,2.218,1173,1.729,1174,2.972,1175,2.218,1176,3.526,1177,2.218,1178,1.616,1179,2.218,1180,2.972,1181,2.019,1182,2.218,1183,2.218,1184,2.019,1185,2.821,1186,1.861,1187,2.972,1188,1.729,1189,1.35,1190,2.218,1191,2.218,1192,2.218,1193,2.218,1194,1.861,1195,2.218,1196,2.218,1197,2.218,1198,3.264,1199,2.218,1200,2.218,1201,2.218,1202,2.218,1203,2.218,1204,2.019,1205,2.738,1206,2.972,1207,2.019,1208,2.218,1209,2.218,1210,2.218,1211,3.888,1212,2.218,1213,2.218,1214,2.218,1215,3.872,1216,2.218,1217,2.218,1218,2.218,1219,2.218,1220,2.218,1221,3.264,1222,3.264,1223,3.264,1224,2.218,1225,3.264,1226,2.218,1227,1.429,1228,2.218,1229,2.218,1230,1.861,1231,2.218,1232,3.872,1233,1.861,1234,2.218,1235,1.517,1236,2.218,1237,3.264,1238,2.218,1239,2.218,1240,1.616,1241,2.218,1242,2.218,1243,2.218,1244,2.218,1245,1.784,1246,2.218,1247,2.218,1248,1.151,1249,2.218,1250,2.218,1251,2.019,1252,2.218,1253,2.218,1254,3.264,1255,2.218,1256,2.218,1257,2.218,1258,2.218,1259,2.218,1260,2.218,1261,2.218,1262,2.218,1263,2.218,1264,2.218,1265,2.019,1266,2.218,1267,1.616,1268,2.218,1269,2.218,1270,3.264,1271,2.218,1272,2.218,1273,2.218,1274,2.218,1275,2.218,1276,1.429,1277,1.729,1278,2.218,1279,2.218,1280,2.218,1281,2.218,1282,2.218,1283,2.218,1284,2.218,1285,2.218,1286,2.218,1287,2.218,1288,3.872,1289,2.218,1290,2.218,1291,3.264,1292,2.218,1293,2.218,1294,4.271,1295,2.218,1296,3.074,1297,2.6,1298,4.271,1299,4.271,1300,2.6,1301,2.218,1302,2.218,1303,2.218,1304,4.271,1305,2.996,1306,2.218,1307,2.019,1308,3.872,1309,2.218,1310,3.872,1311,3.264,1312,3.264,1313,3.264,1314,3.264,1315,2.218,1316,2.218,1317,3.872,1318,3.872,1319,2.218,1320,1.987,1321,2.218,1322,2.738,1323,2.218,1324,2.218,1325,2.218,1326,2.218,1327,2.218,1328,2.019,1329,1.517,1330,2.218,1331,1.729,1332,2.218,1333,2.218]],["title/interfaces/DynamicEdge.html",[0,0.155,1334,2.592]],["body/interfaces/DynamicEdge.html",[0,0.284,2,0.632,3,0.123,4,0.247,5,0.123,7,1.366,8,1.435,17,1.987,19,0.952,21,0.229,22,0.535,29,0.451,30,0.419,31,0.019,32,0.541,33,0.256,36,0.892,37,0.632,38,1.106,39,1.179,40,1.957,41,1.333,43,1.103,44,1.301,45,1.252,46,0.599,47,3.087,49,0.892,50,0.632,54,1.782,55,2.778,56,2.117,59,0.238,61,1.704,67,0.568,70,0.69,73,2.546,82,2.635,83,2.734,85,1.128,87,3.069,93,1.872,94,1.767,96,0.322,98,1.435,100,1.464,101,0.574,102,2.055,108,0.843,109,0.652,114,2.332,116,0.731,118,1.333,121,1.588,122,1.027,123,1.177,124,2.894,129,2.455,130,0.046,134,1.276,137,0.632,138,0.665,139,1.94,141,1.674,143,1.439,145,1.664,152,0.783,172,1.435,175,2.265,176,1.674,178,0.017,183,3.035,184,1.828,207,0.508,209,3.081,232,0.698,238,0.479,244,1.464,246,3.316,247,1.951,251,2.406,258,2.734,261,1.076,263,1.439,264,1.157,266,1.987,267,1.128,269,2.894,273,1.24,281,1.315,282,2.406,283,2.265,288,1.872,289,1.027,290,1.588,291,1.076,295,0.98,306,1.027,307,1.128,308,1.872,310,2.265,311,1.24,312,1.987,321,0.009,322,0.012,326,2.111,328,2.278,329,1.987,330,1.534,331,1.103,332,2.894,349,2.278,370,0.831,374,2.117,375,1.333,377,2.38,384,2.207,386,1.872,387,1.128,389,1.366,400,1.366,403,1.509,412,1.128,414,1.534,434,2.905,457,0.85,468,2.117,472,1.027,489,1.24,506,2.265,582,1.182,630,2.265,633,1.272,780,2.406,781,4.089,866,2.117,888,1.704,950,1.987,1138,1.435,1143,1.333,1166,1.608,1167,3.501,1168,3.501,1169,1.987,1170,2.438,1171,2.438,1173,2.265,1245,1.588,1248,1.509,1276,1.872,1322,2.438,1334,4.089,1335,2.438,1336,1.987,1337,3.797,1338,2.265,1339,4.364,1340,2.905,1341,2.905,1342,2.905,1343,2.905,1344,2.905,1345,3.945,1346,2.905,1347,3.254,1348,3.254,1349,2.546,1350,3.254,1351,3.254,1352,2.117,1353,3.254,1354,2.645,1355,1.588,1356,2.905,1357,2.905,1358,2.905,1359,4.82,1360,3.952,1361,2.879,1362,2.905,1363,1.769,1364,4.491,1365,2.905,1366,2.057,1367,4.426,1368,2.905,1369,2.905,1370,3.254,1371,2.905,1372,2.905,1373,2.905,1374,1.769,1375,2.905,1376,5.029,1377,2.905,1378,2.905,1379,2.905,1380,4.491,1381,2.905,1382,2.265,1383,2.905,1384,1.435,1385,2.905,1386,3.254,1387,2.905,1388,2.905,1389,2.905,1390,2.905,1391,2.905,1392,2.905,1393,2.905,1394,2.905,1395,2.905,1396,4.426,1397,4.426,1398,2.905,1399,2.905,1400,2.905,1401,2.905,1402,2.905,1403,2.905,1404,4.426,1405,3.254,1406,2.438,1407,4.426,1408,3.254,1409,2.905,1410,2.117,1411,3.254,1412,3.254,1413,3.254,1414,2.905,1415,2.905,1416,2.905,1417,2.905,1418,3.952,1419,3.952,1420,3.952,1421,3.952,1422,4.426,1423,4.426,1424,4.426,1425,4.426,1426,3.952]],["title/interfaces/DynamicEdgeType.html",[0,0.155,1339,2.389]],["body/interfaces/DynamicEdgeType.html",[0,0.281,2,0.614,3,0.12,4,0.247,5,0.12,7,1.327,8,1.394,17,2.65,19,1.202,21,0.222,22,0.568,23,0.758,29,0.438,30,0.429,31,0.019,32,0.53,33,0.254,36,0.866,37,0.614,38,1.106,39,1.159,40,2.05,41,1.307,43,1.081,44,1.264,45,1.241,46,0.582,47,3.129,49,0.866,50,0.614,54,1.764,55,2.745,56,2.057,59,0.235,61,1.683,67,0.552,70,0.683,73,2.497,82,2.818,83,3.038,85,1.096,87,3.274,93,2.497,94,1.794,96,0.313,98,1.913,100,1.435,101,0.566,102,2.048,108,0.833,109,0.639,114,2.677,116,0.923,118,1.739,121,1.543,122,0.998,123,1.169,124,2.851,129,2.418,130,0.044,134,1.305,137,0.614,138,0.646,139,1.929,141,1.627,143,1.429,145,1.639,152,0.775,172,1.394,175,2.2,176,1.627,178,0.017,183,3.018,184,1.801,207,0.494,209,3.021,232,0.687,238,0.466,244,1.435,246,3.251,247,1.913,251,2.359,258,2.693,261,1.046,263,1.429,264,1.134,266,1.931,267,1.096,269,2.851,273,1.205,281,1.295,282,2.693,283,2.2,288,1.819,289,0.998,290,1.543,291,1.046,295,0.952,306,0.998,307,1.096,308,1.819,310,2.2,311,1.205,312,1.931,321,0.009,322,0.012,326,2.238,328,2.233,329,1.931,330,1.504,331,1.329,332,2.851,349,2.233,370,0.923,374,2.057,375,1.307,377,2.351,384,2.05,386,1.819,387,1.096,389,1.327,400,1.327,403,1.466,412,1.096,414,1.096,434,2.823,457,0.826,468,2.057,472,0.998,489,1.205,506,3.021,582,1.149,630,3.021,633,1.247,780,2.359,781,4.028,866,2.057,888,1.683,950,1.931,1138,1.394,1143,1.307,1166,1.801,1167,3.449,1168,3.021,1169,1.931,1170,3.251,1171,3.251,1173,3.021,1245,1.543,1248,1.466,1276,1.819,1322,2.368,1334,3.528,1335,2.368,1336,1.931,1337,3.871,1338,3.021,1339,4.43,1340,3.875,1341,3.875,1342,4.762,1343,3.875,1344,3.875,1345,3.975,1346,2.823,1347,3.161,1348,3.161,1349,2.497,1350,3.161,1351,3.161,1352,2.057,1353,3.161,1354,2.57,1355,1.543,1356,2.823,1357,2.823,1358,2.823,1359,4.762,1360,3.875,1361,2.823,1362,2.823,1363,1.718,1364,4.424,1365,2.823,1366,2.032,1367,4.339,1368,2.823,1369,2.823,1370,3.161,1371,2.823,1372,2.823,1373,2.823,1374,1.718,1375,2.823,1376,4.955,1377,2.823,1378,2.823,1379,2.823,1380,4.424,1381,2.823,1382,2.2,1383,2.823,1384,1.394,1385,2.823,1386,3.161,1387,2.823,1388,2.823,1389,2.823,1390,2.823,1391,2.823,1392,2.823,1393,2.823,1394,2.823,1395,2.823,1396,4.339,1397,4.339,1398,2.823,1399,2.823,1400,2.823,1401,2.823,1402,2.823,1403,2.823,1404,4.339,1405,3.161,1406,2.368,1407,4.339,1408,3.161,1409,2.823,1410,2.057,1411,3.161,1412,3.161,1413,3.161,1414,2.823,1415,2.823,1416,2.823,1417,2.823,1418,3.875,1419,3.875,1420,3.875,1421,3.875,1422,4.339,1423,4.339,1424,4.339,1425,4.339,1426,3.875]],["title/interfaces/DynamicNodeType.html",[0,0.155,1427,2.847]],["body/interfaces/DynamicNodeType.html",[0,0.263,2,0.634,3,0.123,4,0.235,5,0.123,7,1.37,8,1.44,13,1.305,14,2.222,19,1.254,21,0.229,22,0.576,29,0.453,30,0.354,31,0.019,32,0.542,33,0.263,36,0.895,37,0.634,38,1.114,41,1.336,43,1.105,44,1.305,45,1.215,46,0.601,47,3.088,49,0.895,50,0.861,51,0.813,54,1.706,55,2.593,56,2.124,59,0.195,61,1.59,64,1.68,68,0.539,70,0.616,73,2.553,82,2.759,83,3.073,87,3.242,89,3.324,92,1.187,93,2.553,94,1.275,95,1.87,96,0.323,101,0.576,102,2.048,108,0.787,109,0.653,114,2.703,123,1.178,129,2.165,130,0.046,134,1.277,137,0.634,138,0.667,139,1.964,140,2.553,141,1.68,143,1.477,145,1.667,152,0.784,172,1.44,175,2.273,176,1.68,178,0.012,181,2.124,183,3.003,184,1.831,196,2.553,203,3.11,207,0.787,209,2.273,232,0.784,238,0.481,244,1.467,247,1.44,251,1.775,258,2.739,261,1.08,263,1.342,267,1.132,269,2.899,273,1.244,281,1.317,282,2.411,289,1.031,290,1.594,291,1.08,295,0.983,307,1.132,308,1.879,310,2.273,311,1.244,312,1.994,321,0.009,322,0.012,326,2.447,330,1.747,331,1.105,332,2.899,348,2.385,349,2.283,370,0.893,375,1.336,377,2.383,381,1.994,384,2.104,386,1.879,389,1.37,400,1.37,403,1.514,457,0.853,472,1.031,483,3.507,489,1.244,500,3.265,501,1.879,600,1.775,630,3.088,633,1.275,781,2.655,888,1.4,950,1.994,1031,2.916,1138,1.44,1166,1.831,1168,2.273,1169,3.643,1173,3.088,1186,2.446,1204,2.655,1211,4.395,1248,1.514,1276,1.879,1328,2.655,1335,2.446,1336,1.994,1337,3.758,1338,3.088,1340,3.961,1341,3.961,1342,5.326,1343,3.961,1344,3.961,1345,4.047,1354,2.655,1355,1.594,1356,2.916,1357,2.916,1359,4.499,1360,3.961,1361,2.124,1362,2.916,1363,2.411,1364,4.499,1365,2.916,1366,2.06,1368,2.916,1369,2.916,1371,2.916,1372,2.916,1373,2.916,1374,1.775,1375,2.916,1377,2.916,1378,2.916,1380,3.961,1381,2.916,1382,3.088,1383,2.916,1384,1.44,1385,2.916,1387,2.916,1388,2.916,1389,2.916,1390,2.916,1391,2.916,1392,2.916,1393,4.499,1394,2.916,1395,2.916,1398,2.916,1399,2.916,1400,2.916,1401,2.916,1402,2.916,1403,2.916,1409,3.961,1410,2.124,1414,2.916,1415,2.916,1416,2.916,1417,2.916,1418,2.916,1419,2.916,1420,2.916,1421,2.916,1426,3.961,1427,4.499,1428,5.157,1429,2.655,1430,3.795,1431,2.165,1432,3.088,1433,2.273,1434,3.265,1435,3.795,1436,1.994,1437,3.795,1438,3.795,1439,3.795,1440,3.265,1441,3.795,1442,5.157,1443,5.157,1444,3.795,1445,3.795,1446,3.795,1447,3.795,1448,3.265,1449,5.857,1450,3.795,1451,5.157,1452,3.795,1453,3.795,1454,3.795,1455,3.795,1456,3.795,1457,3.795,1458,3.795,1459,3.795,1460,3.265,1461,3.265,1462,3.795,1463,5.157,1464,3.795,1465,5.157,1466,3.795,1467,3.795,1468,3.795]],["title/interfaces/Edge.html",[0,0.155,39,0.587]],["body/interfaces/Edge.html",[0,0.281,2,0.52,3,0.101,4,0.101,5,0.101,12,1.338,14,1.702,15,1.378,19,0.973,21,0.348,22,0.583,23,0.674,26,1.981,29,0.801,30,0.449,31,0.019,32,0.813,33,0.254,34,0.928,37,0.749,38,1.107,39,1.221,40,1.821,41,1.582,42,1.956,43,1.234,45,1.213,46,0.493,49,0.734,50,0.749,51,0.667,54,1.946,57,0.886,59,0.248,62,1.18,68,0.819,69,1.358,70,0.642,74,1.884,80,1.996,85,1.338,92,1.645,94,1.798,95,2,96,0.52,99,1.18,100,1.738,101,0.66,102,1.997,107,0.806,108,0.774,109,0.915,111,0.845,115,0.711,116,0.868,118,1.84,122,1.429,123,0.52,130,0.038,134,1.12,135,1.543,138,1.3,143,1.396,145,2.082,152,0.687,178,0.007,207,0.418,215,1.307,218,1.725,232,0.628,238,0.394,244,1.738,247,1.18,248,1.241,250,2.352,261,1.277,262,2.1,263,0.916,264,1.509,267,0.928,273,1.471,274,2.098,286,1.07,307,0.928,311,1.888,316,1.218,321,0.007,322,0.011,330,1.338,331,0.667,334,1.471,343,1.455,344,0.928,348,1.981,369,1.996,370,0.868,371,0.769,375,1.163,378,1.183,387,0.928,394,1.455,397,2.851,398,1.702,400,2.08,403,2.436,409,1.455,412,1.338,414,1.569,417,2.855,418,0.928,420,1.91,423,2.185,427,1.455,430,1.455,457,0.7,472,1.78,484,2.871,487,1.338,491,2.33,493,2.358,501,2.221,522,1.635,528,2.671,619,1.62,621,1.378,628,1.543,637,2.358,645,1.635,670,0.734,826,1.455,827,1.702,832,2.255,888,1.429,917,0.928,995,0.734,1018,2.221,1020,2.221,1021,1.54,1098,1.81,1115,1.455,1143,0.806,1152,1.455,1166,1.801,1189,1.455,1245,1.307,1248,1.241,1296,1.455,1297,1.455,1300,2.098,1305,1.455,1320,1.455,1349,1.54,1363,2.098,1366,1.888,1374,1.455,1384,1.18,1431,1.884,1436,2.358,1469,1.54,1470,1.635,1471,2.511,1472,2.511,1473,2.185,1474,2.546,1475,1.635,1476,1.81,1477,1.124,1478,2.358,1479,1.996,1480,1.9,1481,1.79,1482,2.221,1483,1.742,1484,2.511,1485,1.62,1486,1.742,1487,1.742,1488,1.742,1489,2.511,1490,1.742,1491,3.418,1492,1.742,1493,2.33,1494,2.511,1495,1.742,1496,1.742,1497,1.742,1498,1.742,1499,1.635,1500,1.742,1501,1.742,1502,1.742,1503,1.742,1504,1.987,1505,1.635,1506,1.79,1507,1.742,1508,1.742,1509,1.54,1510,1.124,1511,1.54,1512,1.742,1513,1.742,1514,1.635,1515,1.742,1516,1.742,1517,2.511,1518,1.742,1519,1.742,1520,1.742,1521,1.742,1522,1.742,1523,1.742,1524,1.742,1525,1.742,1526,1.742,1527,1.742,1528,1.742,1529,1.742,1530,1.742,1531,1.742,1532,1.742,1533,1.742,1534,2.511,1535,2.358,1536,1.742,1537,1.742,1538,1.742,1539,1.742,1540,1.02,1541,1.742,1542,1.742,1543,1.742,1544,1.742,1545,1.742,1546,2.511,1547,1.742,1548,1.742,1549,1.742,1550,1.742,1551,2.511,1552,1.742,1553,1.742,1554,1.742,1555,1.742,1556,2.511,1557,2.511,1558,1.742,1559,1.742,1560,1.742,1561,1.742,1562,1.742,1563,2.511,1564,1.742,1565,1.742,1566,1.742,1567,1.742,1568,1.742,1569,3.224,1570,1.742,1571,1.742,1572,1.742,1573,1.742,1574,1.742,1575,1.742,1576,1.742,1577,1.742,1578,1.742,1579,1.742,1580,1.742,1581,1.635,1582,2.511,1583,1.742,1584,1.79,1585,1.742,1586,1.742,1587,2.511,1588,2.098,1589,1.742,1590,2.511,1591,1.742,1592,1.742,1593,1.742,1594,2.511,1595,1.742,1596,2.511,1597,1.742,1598,2.511,1599,2.511,1600,1.742,1601,1.742,1602,1.742,1603,1.742,1604,1.742,1605,1.742,1606,1.742,1607,2.511,1608,1.742,1609,1.742,1610,2.511,1611,1.742,1612,1.742,1613,1.742,1614,1.742,1615,1.742,1616,1.742,1617,1.742,1618,1.742,1619,2.511,1620,1.742,1621,1.742,1622,1.742,1623,1.742,1624,1.742,1625,1.742,1626,1.742,1627,1.742,1628,1.742,1629,1.742,1630,1.742,1631,1.742,1632,1.742,1633,1.742,1634,1.742,1635,1.742,1636,1.742,1637,1.742,1638,1.742,1639,2.511,1640,1.742,1641,1.742,1642,1.742,1643,1.742,1644,1.742,1645,1.742,1646,1.742,1647,1.742]],["title/interfaces/EdgeType.html",[0,0.155,40,1.105]],["body/interfaces/EdgeType.html",[0,0.282,2,0.524,3,0.102,4,0.102,5,0.102,12,1.346,14,2.005,15,1.998,19,0.978,21,0.35,22,0.584,23,0.678,26,1.079,29,0.761,30,0.43,31,0.019,32,0.808,33,0.255,34,1.346,37,0.754,38,1.109,39,1.221,40,1.724,41,1.587,42,1.827,43,1.239,45,1.216,46,0.497,49,0.74,50,0.754,51,0.672,54,1.888,57,1.284,59,0.249,62,1.19,68,0.822,69,1.363,70,0.644,74,1.895,80,2.005,85,1.346,92,1.807,94,1.8,95,2.024,96,0.521,99,1.19,100,1.743,101,0.661,102,1.989,107,0.813,108,0.776,109,0.923,111,1.225,115,0.715,116,0.751,118,1.703,122,1.435,123,0.524,130,0.038,134,1.124,135,1.552,138,1.301,143,1.399,145,2.084,152,0.69,178,0.007,207,0.421,215,1.317,218,1.733,232,0.631,238,0.397,244,1.504,247,1.19,248,1.251,250,2.194,261,1.284,262,2.107,263,0.921,264,1.512,267,0.935,273,1.479,274,2.11,286,1.079,307,0.935,311,2.008,316,1.225,321,0.007,322,0.011,330,1.346,331,0.672,334,1.479,343,1.467,344,0.935,348,2.194,369,2.005,370,0.871,371,0.775,375,1.169,378,1.188,387,1.346,394,1.467,397,2.861,398,1.712,400,2.087,403,2.443,409,1.467,412,0.935,414,1.346,417,2.703,418,0.935,420,1.979,423,2.193,427,1.467,430,1.467,457,0.705,472,1.57,484,2.678,487,1.346,491,2.559,493,2.777,501,2.234,522,1.648,528,2.678,619,1.908,621,1.389,628,1.552,637,2.371,645,1.648,670,0.74,826,1.467,827,1.19,832,2.261,888,1.435,917,0.935,995,0.74,1008,2.371,1018,2.234,1020,2.234,1021,1.552,1098,1.818,1115,1.467,1143,0.813,1152,1.467,1166,1.807,1189,1.467,1245,1.317,1248,1.251,1296,1.467,1297,1.467,1300,2.11,1305,1.467,1320,1.467,1349,2.234,1363,2.472,1366,1.895,1374,1.467,1384,1.19,1431,1.895,1436,2.371,1469,1.552,1470,1.648,1471,1.755,1472,1.755,1473,2.005,1474,2.598,1475,1.648,1476,1.818,1477,1.132,1478,2.371,1479,2.005,1480,1.908,1481,2.108,1482,2.616,1483,1.755,1484,2.526,1485,1.908,1486,2.526,1487,3.235,1488,2.526,1489,3.428,1490,1.755,1491,3.428,1492,1.755,1493,2.34,1494,2.526,1495,1.755,1496,1.755,1497,1.755,1498,1.755,1499,1.648,1500,1.755,1501,1.755,1502,1.755,1503,1.755,1504,1.998,1505,1.648,1506,1.8,1507,1.755,1508,1.755,1509,1.552,1510,1.132,1511,1.552,1512,1.755,1513,1.755,1514,1.648,1515,1.755,1516,1.755,1517,2.526,1518,1.755,1519,1.755,1520,1.755,1521,1.755,1522,1.755,1523,1.755,1524,1.755,1525,1.755,1526,1.755,1527,1.755,1528,1.755,1529,1.755,1530,1.755,1531,1.755,1532,1.755,1533,1.755,1534,2.526,1535,2.371,1536,1.755,1537,1.755,1538,1.755,1539,1.755,1540,1.028,1541,1.755,1542,1.755,1543,1.755,1544,1.755,1545,1.755,1546,2.526,1547,1.755,1548,1.755,1549,1.755,1550,1.755,1551,2.526,1552,1.755,1553,1.755,1554,1.755,1555,1.755,1556,2.526,1557,2.526,1558,1.755,1559,1.755,1560,1.755,1561,1.755,1562,1.755,1563,2.526,1564,1.755,1565,1.755,1566,1.755,1567,1.755,1568,1.755,1569,3.235,1570,1.755,1571,1.755,1572,1.755,1573,1.755,1574,1.755,1575,1.755,1576,1.755,1577,1.755,1578,1.755,1579,1.755,1580,1.755,1581,1.648,1582,2.526,1583,1.755,1584,1.8,1585,1.755,1586,1.755,1587,2.526,1588,2.11,1589,1.755,1590,2.526,1591,1.755,1592,1.755,1593,1.755,1594,2.526,1595,1.755,1596,2.526,1597,1.755,1598,2.526,1599,2.526,1600,1.755,1601,1.755,1602,1.755,1603,1.755,1604,1.755,1605,1.755,1606,1.755,1607,2.526,1608,1.755,1609,1.755,1610,2.526,1611,1.755,1612,1.755,1613,1.755,1614,1.755,1615,1.755,1616,1.755,1617,1.755,1618,1.755,1619,2.526,1620,1.755,1621,1.755,1622,1.755,1623,1.755,1624,1.755,1625,1.755,1626,1.755,1627,1.755,1628,1.755,1629,1.755,1630,1.755,1631,1.755,1632,1.755,1633,1.755,1634,1.755,1635,1.755,1636,1.755,1637,1.755,1638,1.755,1639,2.526,1640,1.755,1641,1.755,1642,1.755,1643,1.755,1644,1.755,1645,1.755,1646,1.755,1647,1.755]],["title/interfaces/FacetChartDataPoint.html",[0,0.155,1648,2.592]],["body/interfaces/FacetChartDataPoint.html",[0,0.168,2,0.67,3,0.131,4,0.131,5,0.131,21,0.364,22,0.49,28,1.986,29,0.719,30,0.324,31,0.019,32,0.774,33,0.277,34,1.997,35,3.288,36,0.946,37,0.67,45,1.363,46,0.636,49,0.946,50,0.894,51,0.86,59,0.203,61,1.636,67,1.006,68,1.015,70,0.676,92,1.255,95,1.524,96,0.513,98,1.522,101,0.632,107,1.96,108,0.809,109,0.955,115,0.636,123,0.67,127,1.986,128,1.986,130,0.048,134,0.78,135,2.072,137,0.894,148,1.255,149,1.685,152,0.839,171,2.587,178,0.017,197,1.454,207,0.719,221,1.142,232,0.639,242,1.877,250,1.38,253,2.246,281,1.549,289,1.09,291,1.142,295,1.387,297,1.449,306,1.09,321,0.01,322,0.013,331,0.86,334,1.316,337,1.255,344,1.597,369,1.522,370,0.856,418,1.197,420,1.142,440,0.992,457,0.902,464,3.083,526,1.777,566,0.804,575,1.387,576,0.992,577,1.489,594,1.04,600,1.877,609,1.806,610,0.67,633,0.992,657,2.258,669,1.601,670,1.262,715,2.997,761,2.564,777,1.933,786,1.601,819,2.53,824,1.777,832,2.552,833,4.211,861,2.246,995,0.946,997,1.601,1092,3.748,1094,3.451,1096,1.755,1097,2.817,1098,2.072,1103,2.109,1105,2.997,1107,3.451,1108,2.587,1119,2.587,1126,2.587,1129,2.587,1130,2.587,1131,1.986,1133,2.587,1134,2.587,1143,1.04,1146,1.316,1194,2.587,1230,2.587,1233,2.587,1235,2.109,1479,2.285,1504,1.777,1509,1.986,1510,1.449,1540,1.316,1648,4.214,1649,3.083,1650,2.807,1651,3.083,1652,3.166,1653,2.807,1654,3.372,1655,2.817,1656,1.685,1657,4.606,1658,3.452,1659,3.452,1660,3.452,1661,3.452,1662,3.452,1663,3.452,1664,3.452,1665,3.452,1666,3.452,1667,3.452,1668,1.877,1669,3.452,1670,2.587,1671,1.877,1672,2.135,1673,1.877,1674,1.877,1675,1.877,1676,1.877,1677,1.877,1678,1.877,1679,3.452,1680,3.452,1681,3.452,1682,3.452,1683,3.452,1684,5.53,1685,3.452,1686,4.606,1687,3.452,1688,3.452,1689,3.452,1690,4.606,1691,3.452,1692,3.452,1693,3.452,1694,3.452,1695,2.109,1696,3.452,1697,3.452,1698,2.504,1699,3.452,1700,3.452,1701,3.452,1702,3.452,1703,3.452,1704,4.606,1705,3.451,1706,4.606,1707,3.452,1708,3.452,1709,3.083,1710,3.452,1711,3.452,1712,2.403,1713,3.452,1714,3.452,1715,3.452,1716,2.246,1717,3.452,1718,3.452,1719,3.452,1720,3.452,1721,3.452,1722,3.452,1723,3.452,1724,3.452,1725,3.452,1726,3.452,1727,3.452,1728,3.452,1729,3.452,1730,3.452,1731,3.452,1732,4.606,1733,3.452,1734,3.452,1735,4.606,1736,3.452,1737,3.452,1738,3.452,1739,3.452,1740,3.452,1741,3.452,1742,3.452,1743,3.452,1744,3.452,1745,3.452,1746,3.452,1747,4.606,1748,2.587,1749,2.997,1750,3.452,1751,3.452,1752,3.452,1753,4.606,1754,3.452,1755,2.403,1756,3.452,1757,2.807,1758,2.587,1759,3.452,1760,2.109,1761,3.452,1762,3.452,1763,3.452,1764,3.452,1765,3.452,1766,3.452,1767,3.452,1768,3.452,1769,3.452,1770,3.452,1771,3.452,1772,3.452,1773,3.452,1774,4.606,1775,3.452,1776,3.452,1777,3.452,1778,3.452,1779,4.606,1780,3.452,1781,3.452,1782,3.452]],["title/components/FacetNgxChart.html",[566,0.557,669,1.478]],["body/components/FacetNgxChart.html",[0,0.135,3,0.175,4,0.105,5,0.105,13,1.108,21,0.324,22,0.421,23,0.93,28,1.595,29,0.768,30,0.447,31,0.019,32,0.783,33,0.265,34,2.02,35,3.224,36,0.76,37,0.538,38,0.458,39,0.511,45,1.323,46,0.511,49,0.76,50,0.768,51,0.691,59,0.174,61,1.457,67,0.995,68,1.016,70,0.696,92,1.438,95,1.665,96,0.602,98,1.745,101,0.575,107,1.882,108,0.831,109,0.927,115,0.981,123,0.538,127,1.595,128,2.656,130,0.039,134,0.894,135,1.846,137,0.896,148,1.007,149,1.932,152,0.791,171,2.077,178,0.017,197,1.457,207,0.618,221,0.917,232,0.549,242,1.507,250,1.583,253,1.804,281,1.55,289,0.875,291,0.917,295,1.192,297,1.163,306,0.875,321,0.011,322,0.011,331,0.691,334,1.508,337,1.678,344,1.6,351,2.475,353,2.235,369,1.745,370,1.045,371,1.447,418,1.372,420,0.917,440,1.137,457,0.725,464,2.476,526,1.427,566,0.806,567,1.353,568,2.277,569,1.285,571,1.285,572,1.693,575,1.39,576,1.835,577,1.849,594,1.192,599,1.932,600,2.509,609,1.729,610,0.538,633,0.797,646,1.056,647,1.745,648,2.037,649,1.693,650,3.075,651,1.693,655,2.418,656,1.427,657,2.382,658,2.418,659,1.163,660,2.82,661,1.285,662,1.285,663,1.427,664,1.353,665,1.693,666,1.222,667,1.353,668,1.693,669,2.334,670,1.8,671,2.82,672,1.427,673,1.507,674,1.353,675,1.693,676,1.353,677,2.037,678,1.693,679,1.353,680,1.353,681,1.693,682,1.222,683,1.353,684,1.007,685,1.693,686,1.693,715,3.276,761,2.469,777,2.235,786,1.285,819,2.458,824,1.427,832,2.459,833,3.968,861,1.804,995,0.76,997,1.285,1074,3.218,1092,3.792,1094,3.459,1096,1.919,1097,2.509,1098,2.279,1103,1.693,1105,3.003,1107,3.772,1108,2.966,1111,1.932,1119,2.077,1126,3.772,1129,2.077,1130,2.077,1131,2.897,1133,2.077,1134,3.459,1143,0.835,1146,1.508,1159,3.218,1194,2.077,1230,2.077,1233,2.077,1235,1.693,1479,2.513,1504,1.427,1509,1.595,1510,1.661,1540,1.056,1648,3.753,1649,5.815,1650,5.294,1651,2.476,1652,3.481,1653,2.254,1654,3.602,1655,2.737,1656,1.353,1657,5.035,1658,3.958,1659,2.772,1660,4.616,1661,3.958,1662,4.616,1663,3.958,1664,4.616,1665,2.772,1666,2.772,1667,2.772,1668,1.507,1669,2.772,1670,2.077,1671,1.507,1672,2.14,1673,1.507,1674,1.507,1675,1.507,1676,1.507,1677,1.507,1678,1.507,1679,2.772,1680,2.772,1681,2.772,1682,2.772,1683,2.772,1684,5.035,1685,2.772,1686,3.958,1687,2.772,1688,2.772,1689,2.772,1690,3.958,1691,3.958,1692,5.035,1693,3.958,1694,2.772,1695,1.693,1696,2.772,1697,2.772,1698,2.737,1699,3.958,1700,5.035,1701,2.772,1702,2.772,1703,2.772,1704,3.958,1705,2.966,1706,3.958,1707,2.772,1708,2.772,1709,2.476,1710,2.772,1711,2.772,1712,1.93,1713,2.772,1714,2.772,1715,2.772,1716,1.804,1717,2.772,1718,2.772,1719,2.772,1720,2.772,1721,2.772,1722,2.772,1723,2.772,1724,2.772,1725,2.772,1726,2.772,1727,2.772,1728,2.772,1729,2.772,1730,2.772,1731,2.772,1732,3.958,1733,2.772,1734,2.772,1735,3.958,1736,2.772,1737,2.772,1738,2.772,1739,2.772,1740,2.772,1741,2.772,1742,2.772,1743,2.772,1744,2.772,1745,2.772,1746,2.772,1747,5.035,1748,2.966,1749,3.276,1750,3.958,1751,3.958,1752,3.958,1753,3.958,1754,2.772,1755,1.93,1756,2.772,1757,2.254,1758,2.077,1759,2.772,1760,1.693,1761,2.772,1762,2.772,1763,2.772,1764,2.772,1765,2.772,1766,3.958,1767,2.772,1768,2.772,1769,2.772,1770,2.772,1771,3.958,1772,2.772,1773,3.958,1774,3.958,1775,2.772,1776,2.772,1777,2.772,1778,2.772,1779,3.958,1780,2.772,1781,5.035,1782,2.772,1783,4.601,1784,4.601,1785,3.223,1786,3.223,1787,3.223,1788,3.223,1789,3.223,1790,3.223,1791,3.223,1792,3.223,1793,3.223,1794,3.223,1795,3.223,1796,3.223,1797,3.223,1798,3.223,1799,3.223,1800,3.223,1801,3.223,1802,3.223,1803,3.223,1804,3.223,1805,3.223,1806,3.223,1807,3.223,1808,2.772,1809,3.223]],["title/modules/FinanceModule.html",[975,1.215,1810,2.592]],["body/modules/FinanceModule.html",[3,0.181,4,0.181,5,0.181,31,0.019,33,0.289,46,0.883,59,0.211,130,0.067,178,0.013,321,0.013,322,0.016,365,1.663,375,1.444,610,0.931,646,1.828,676,3.256,677,2.915,679,3.256,975,1.828,976,4.484,977,2.468,978,2.468,979,3.469,980,2.759,981,3.469,985,2.159,986,2.223,988,3.46,989,3.46,990,2.929,994,3.46,995,1.314,998,4.244,1001,3.46,1055,4.244,1056,2.929,1057,4.796,1058,3.338,1810,5.424,1811,4.796,1812,4.796,1813,5.575,1814,4.796,1815,5.575,1816,4.282,1817,4.282,1818,5.575]],["title/modules/FusionChartsModule.html",[975,1.215,1819,2.592]],["body/modules/FusionChartsModule.html",[3,0.181,4,0.181,5,0.181,31,0.019,33,0.294,59,0.211,130,0.067,178,0.013,238,0.704,321,0.013,322,0.016,365,1.658,375,1.44,610,0.928,646,1.822,672,3.432,673,2.599,720,2.493,747,2.108,748,2.108,761,2.217,764,3.888,975,1.822,977,2.91,978,2.461,979,3.464,980,2.751,981,3.464,985,2.155,986,2.217,988,3.454,989,3.454,990,2.92,994,3.454,995,1.311,996,4.236,997,2.217,1001,2.92,1055,4.236,1056,2.92,1103,3.454,1653,3.888,1819,5.327,1820,4.782,1821,4.782,1822,4.782,1823,5.558,1824,6.573,1825,6.222,1826,4.782,1827,5.558,1828,6.573,1829,5.558,1830,6.573,1831,5.558,1832,5.558,1833,5.558,1834,5.558]],["title/modules/GoogleMapsModule.html",[975,1.215,1835,2.592]],["body/modules/GoogleMapsModule.html",[3,0.185,4,0.185,5,0.185,31,0.019,33,0.29,46,0.902,59,0.216,130,0.069,178,0.013,321,0.013,322,0.016,365,1.697,375,1.474,610,0.951,646,1.866,674,3.264,975,1.866,977,2.52,978,2.52,979,3.499,980,2.817,981,3.499,985,2.185,986,2.27,988,3.502,989,3.502,990,2.99,994,3.502,995,1.342,996,4.296,997,2.27,998,4.296,1001,2.99,1656,2.39,1835,5.311,1836,4.896,1837,4.896,1838,4.896,1839,5.691,1840,5.734,1841,6.665,1842,4.372,1843,5.691]],["title/interfaces/HeatmapItem.html",[0,0.155,734,2.592]],["body/interfaces/HeatmapItem.html",[0,0.176,2,0.703,3,0.137,4,0.137,5,0.137,19,0.778,21,0.254,22,0.506,23,0.83,29,0.812,30,0.422,31,0.019,32,0.785,33,0.209,57,1.572,59,0.209,67,0.926,68,0.931,70,0.715,92,1.316,101,0.543,103,2.211,107,1.431,112,2.712,116,1.038,118,1.697,123,1.03,130,0.051,137,0.703,152,0.879,178,0.01,183,1.767,197,1.143,207,0.565,221,1.935,232,0.659,242,1.968,261,1.197,262,1.9,284,1.678,297,2.227,306,1.143,321,0.01,322,0.013,353,2.365,368,2.355,378,0.946,390,1.767,405,1.678,418,1.255,440,1.04,487,1.255,489,1.811,526,2.731,566,0.83,569,1.678,575,1.431,576,1.04,577,1.04,579,1.519,581,1.995,582,1.928,583,1.447,588,1.316,594,1.09,599,2.59,609,1.857,610,0.703,619,1.519,631,1.596,633,1.04,647,1.596,661,1.678,664,2.32,687,3.233,688,3.092,689,1.596,690,3.62,691,3.62,692,3.62,693,3.092,694,3.092,695,3.62,696,2.355,697,2.355,698,2.355,699,2.355,700,2.355,701,2.355,703,4.087,704,2.355,705,4.04,706,2.355,707,4.753,709,3.092,713,3.62,714,4.753,715,2.355,716,3.62,717,1.678,718,4.753,719,4.753,720,1.596,721,4.753,723,3.62,724,3.62,726,3.063,728,2.355,730,3.62,732,3.62,734,4.883,736,2.355,737,2.446,740,2.204,741,1.863,742,4.738,743,1.767,747,2.096,748,1.596,750,2.943,753,2.227,756,3.62,758,3.308,759,3.62,760,3.092,761,2.204,762,3.62,763,4.753,764,2.943,765,3.62,766,3.053,767,2.211,768,3.091,769,2.355,770,3.62,771,3.62,772,4.753,776,3.62,777,1.519,780,2.583,784,3.62,785,3.62,786,2.204,787,3.62,789,3.62,790,2.712,791,2.211,792,4.753,811,5.031,813,3.092,817,2.227,818,2.583,819,2.75,820,3.62,821,3.62,822,1.968,823,3.62,824,1.863,825,2.735,826,1.968,827,2.096,828,2.355,829,2.355,830,2.204,831,2.712,832,1.447,833,3.308,834,3.62,835,3.62,836,4.753,837,4.753,838,3.62,839,3.62,840,3.62,841,3.62,842,3.62,843,3.62,844,3.62,845,3.62,846,3.62,847,2.355,848,3.62,849,3.092,850,3.452,851,2.355,852,2.355,853,2.355,854,3.62,855,2.355,856,2.355,857,2.355,858,3.62,859,3.62,860,3.62,861,2.355,862,2.083,863,2.355,864,3.62,865,2.712,866,2.355,867,2.712,868,2.355,869,2.355,870,2.355,871,2.355,872,2.355,873,3.62,874,2.712,875,2.52,876,3.62,877,3.62,878,3.62,879,3.62,880,3.561,881,3.62,882,3.62,883,3.62,884,3.62,885,3.62,886,3.62,887,3.62,888,1.5,889,3.092,890,3.62,891,3.62,892,2.712,893,3.233,894,3.62,895,3.62,896,2.712,897,2.52,898,4.753,899,4.753,900,2.32,901,4.753,902,3.62,903,3.62,904,2.355,905,3.62,906,3.62,907,2.355,908,1.863,909,2.903,910,2.355,911,2.355,912,3.092,913,3.092,914,3.092,915,2.355,916,2.355,917,1.255,918,2.355,919,2.355,920,3.62,921,3.62,922,5.306,923,4.753,924,4.753,925,3.62,926,3.233,927,3.62,928,3.62,929,3.62,930,3.62]],["title/components/MapComponent.html",[566,0.557,674,1.556]],["body/components/MapComponent.html",[3,0.217,4,0.118,5,0.118,12,1.081,13,1.246,21,0.219,22,0.458,23,1.028,29,0.596,30,0.454,31,0.019,33,0.264,36,0.854,37,0.605,38,0.515,39,0.574,45,1.31,46,0.574,48,1.604,49,0.854,50,0.605,59,0.137,61,1.357,67,0.544,68,0.95,69,0.854,71,2.992,92,1.562,96,0.636,101,0.562,108,0.671,115,1.085,116,0.876,130,0.044,137,0.834,138,1.245,143,1.258,149,1.522,152,0.771,178,0.017,182,3.494,207,0.487,232,0.432,238,0.459,261,1.031,263,1.02,281,1.286,289,1.357,290,1.522,291,1.422,295,1.294,306,1.357,321,0.012,322,0.012,326,2.225,331,1.071,337,1.562,351,2.509,353,2.334,370,0.919,371,1.598,384,2.206,407,2.17,412,1.081,418,1.49,420,1.754,440,1.235,566,0.859,567,1.522,568,2.473,569,1.445,570,1.895,571,1.445,572,1.904,575,1.481,576,1.862,577,1.862,582,1.133,588,2.021,594,1.294,596,3.051,599,2.098,600,2.336,609,1.693,610,0.605,628,1.718,646,1.188,647,1.895,648,2.212,649,1.904,650,3.238,651,1.904,655,2.625,656,1.604,657,2.119,658,2.625,659,1.308,660,3.004,661,1.445,662,1.445,663,1.604,664,1.522,665,1.904,666,1.375,667,1.522,668,1.904,669,1.445,670,1.178,671,3.004,672,1.604,673,1.695,674,2.588,675,1.904,676,1.522,677,2.212,678,1.904,679,1.522,680,1.522,681,1.904,682,1.375,683,1.522,684,1.133,685,1.904,686,1.904,722,3.838,747,2.338,748,2.338,753,2.064,769,2.796,777,1.308,780,2.882,786,2.859,817,1.804,819,1.522,822,2.336,826,1.695,917,1.081,950,3.004,1066,5.749,1074,3.494,1096,1.875,1146,1.188,1166,1.562,1205,3.22,1206,3.494,1207,2.535,1366,2.469,1476,2.436,1477,1.308,1480,2.588,1504,1.604,1540,1.188,1581,2.625,1584,1.993,1654,4.011,1655,2.674,1656,1.522,1668,2.674,1671,1.695,1672,1.445,1673,1.695,1674,1.695,1675,1.695,1676,1.695,1677,1.695,1678,1.695,1698,1.695,1709,2.784,1808,3.118,1842,2.784,1844,3.118,1845,4.996,1846,4.996,1847,6.978,1848,5.718,1849,5.718,1850,5.718,1851,5.718,1852,5.718,1853,6.163,1854,4.996,1855,4.996,1856,4.996,1857,5.718,1858,5.718,1859,4.919,1860,3.624,1861,4.996,1862,4.996,1863,3.624,1864,4.996,1865,6.465,1866,3.624,1867,6.163,1868,6.163,1869,6.465,1870,3.624,1871,3.624,1872,4.298,1873,4.996,1874,3.624,1875,3.624,1876,4.996,1877,3.624,1878,4.996,1879,4.996,1880,3.624,1881,3.624,1882,4.996,1883,6.465,1884,3.624,1885,4.996,1886,3.624,1887,4.996,1888,6.163,1889,6.683,1890,3.624,1891,3.624,1892,4.996,1893,3.624,1894,3.624,1895,3.624,1896,3.624,1897,4.996,1898,3.624,1899,4.996,1900,4.996,1901,3.624,1902,4.996,1903,4.996,1904,3.624,1905,4.919,1906,6.163,1907,3.624,1908,3.624,1909,3.838,1910,3.624,1911,3.494,1912,3.624,1913,2.625,1914,1.904,1915,3.624,1916,3.624,1917,2.336,1918,4.996,1919,3.624,1920,3.624,1921,3.624,1922,4.996,1923,3.624,1924,3.624,1925,3.624,1926,3.624,1927,4.996,1928,3.624,1929,3.624,1930,5.718,1931,3.624,1932,3.624,1933,3.624,1934,3.624,1935,4.996,1936,5.718,1937,4.996,1938,4.996,1939,3.118,1940,3.624,1941,4.996,1942,6.163,1943,3.624,1944,4.996,1945,3.624,1946,3.624,1947,3.624,1948,3.624,1949,4.996,1950,3.624,1951,3.624,1952,3.624,1953,3.624,1954,3.624]],["title/interfaces/MoneyCloudDatum.html",[0,0.155,1955,2.847]],["body/interfaces/MoneyCloudDatum.html",[0,0.156,2,0.621,3,0.121,4,0.121,5,0.121,18,1.954,19,0.688,21,0.225,22,0.466,29,0.444,30,0.407,31,0.019,32,0.771,33,0.266,34,1.517,35,2.378,36,0.877,37,0.621,45,1.246,46,0.589,48,1.647,49,0.877,50,0.621,57,1.058,59,0.193,61,1.01,67,0.87,68,1.034,70,0.535,96,0.316,101,0.57,107,0.964,108,0.837,109,0.79,116,1.061,118,1.614,130,0.045,132,2.397,137,0.621,138,1.147,139,1.692,152,0.901,163,1.647,174,1.562,178,0.015,207,0.683,220,1.954,224,1.954,232,0.692,253,3.487,272,1.483,281,1.303,289,1.01,291,1.058,295,0.964,321,0.009,322,0.012,370,0.529,378,0.836,405,1.483,440,0.919,473,1.739,487,1.109,526,1.647,566,0.764,571,2.029,575,0.964,576,0.919,577,0.919,579,1.343,581,1.836,582,1.812,583,1.279,588,1.163,590,2.601,594,0.964,609,1.798,610,0.621,633,1.433,647,1.411,676,1.562,677,3.108,688,2.082,689,1.411,693,2.082,694,2.082,696,2.082,697,2.082,698,2.082,699,2.082,700,2.082,701,2.082,703,3.652,704,2.847,705,3.487,706,2.847,709,2.847,717,1.483,720,1.411,726,3.051,728,2.082,737,1.647,741,1.647,743,1.562,747,1.929,748,1.411,760,2.847,766,3.23,768,2.252,791,1.954,809,2.227,811,3.907,813,2.847,818,1.739,827,2.198,828,2.082,829,2.082,830,2.029,832,1.279,833,3.046,847,2.082,849,2.847,850,3.244,851,2.082,852,2.082,853,2.082,855,2.082,856,2.082,857,2.082,863,3.244,868,2.082,869,2.082,870,2.082,871,2.082,872,2.082,888,1.381,889,3.244,900,2.136,904,3.244,907,2.082,908,1.647,909,2.672,910,2.082,911,2.082,912,2.847,913,2.847,914,2.847,915,2.082,916,2.082,917,1.109,918,2.082,919,2.082,966,3.2,969,1.739,997,1.483,1024,2.601,1096,1.667,1121,2.672,1125,2.672,1143,1.318,1146,1.219,1227,1.841,1235,2.672,1329,1.954,1355,2.136,1366,1.667,1406,2.397,1432,3.046,1433,2.227,1476,1.994,1477,1.343,1480,2.093,1506,1.483,1510,1.343,1540,1.219,1584,1.483,1652,3.045,1655,2.378,1656,1.562,1668,1.739,1671,1.739,1672,1.483,1673,1.739,1674,1.739,1675,1.739,1676,1.739,1677,1.739,1678,1.739,1695,1.954,1749,2.082,1757,2.601,1760,1.954,1817,2.857,1913,1.954,1914,2.672,1955,5.298,1956,2.857,1957,3.2,1958,6.525,1959,5.795,1960,5.613,1961,2.518,1962,4.986,1963,5.086,1964,5.086,1965,3.719,1966,3.719,1967,3.2,1968,4.986,1969,2.857,1970,3.719,1971,3.719,1972,3.2,1973,3.719,1974,3.719,1975,3.2,1976,3.2,1977,3.719,1978,1.841,1979,2.518,1980,1.739,1981,1.841,1982,3.719,1983,3.719,1984,3.278,1985,3.719,1986,3.557,1987,4.375,1988,2.397,1989,2.397,1990,3.046,1991,3.2,1992,4.375,1993,3.278,1994,3.2,1995,3.2,1996,3.2,1997,1.841,1998,3.719,1999,5.086,2000,2.227,2001,2.397,2002,2.397,2003,2.397,2004,3.736,2005,5.086,2006,4.375,2007,2.397,2008,3.2,2009,3.2,2010,3.2,2011,3.2,2012,2.397,2013,2.397,2014,2.397,2015,3.278,2016,2.397,2017,2.397,2018,3.278,2019,2.397,2020,3.2,2021,2.397,2022,2.397,2023,2.397,2024,2.397,2025,3.278,2026,2.397,2027,2.397,2028,2.397,2029,2.397,2030,2.397,2031,2.397,2032,2.397,2033,2.397,2034,2.397,2035,2.227,2036,2.857,2037,3.2,2038,2.397,2039,2.857,2040,3.2,2041,3.2,2042,3.2,2043,3.2,2044,3.719,2045,3.2,2046,4.986,2047,3.719,2048,3.2,2049,3.2,2050,3.719,2051,5.086,2052,3.719,2053,3.719,2054,3.2,2055,3.2,2056,3.2,2057,3.2,2058,3.719,2059,3.719,2060,3.719,2061,3.719,2062,3.719,2063,3.719,2064,3.2,2065,3.719,2066,2.397,2067,3.2,2068,3.2,2069,3.2,2070,3.719,2071,3.2,2072,3.2,2073,3.2,2074,3.719,2075,3.719,2076,3.719,2077,3.719,2078,3.2,2079,3.2,2080,3.2,2081,3.719,2082,3.719,2083,2.601,2084,3.719,2085,3.719,2086,3.719,2087,3.719,2088,3.719,2089,2.397,2090,3.278,2091,2.397,2092,3.2,2093,3.2,2094,2.397,2095,2.397,2096,2.397,2097,3.2,2098,2.397,2099,2.397,2100,2.397,2101,2.397,2102,2.397,2103,2.397,2104,2.397,2105,2.397,2106,2.397,2107,2.397,2108,2.397,2109,3.719,2110,2.397,2111,3.2,2112,2.397,2113,2.397,2114,2.397,2115,2.397,2116,2.397,2117,2.397,2118,3.2,2119,3.719,2120,3.2,2121,2.227,2122,2.082,2123,3.2,2124,3.719,2125,3.719,2126,3.2,2127,3.2,2128,2.397]],["title/interfaces/MoneyDatum.html",[0,0.155,2129,2.847]],["body/interfaces/MoneyDatum.html",[0,0.151,2,0.603,3,0.117,4,0.117,5,0.117,18,1.897,19,0.668,21,0.218,22,0.456,25,1.897,29,0.431,30,0.404,31,0.019,32,0.719,33,0.268,34,1.486,36,0.851,37,0.603,45,1.235,46,0.572,48,1.598,49,1.175,50,0.953,51,0.774,57,1.027,59,0.189,61,0.98,67,0.857,68,0.918,69,0.851,70,0.679,96,0.307,100,1.027,101,0.561,108,0.919,109,0.818,116,1.044,118,1.673,123,0.953,130,0.044,132,2.327,137,0.603,138,1.003,139,1.671,147,2.021,152,0.891,163,1.598,174,1.516,178,0.015,207,0.485,221,1.027,224,1.897,232,0.595,242,1.688,253,2.021,263,1.017,272,1.44,281,1.283,289,0.98,291,1.027,295,0.935,306,0.98,321,0.009,322,0.012,370,0.513,378,0.812,384,2.176,405,1.44,412,1.077,440,0.892,487,1.077,566,0.857,571,1.987,575,0.935,576,0.892,577,0.892,579,1.303,581,1.799,582,1.784,583,1.242,588,1.129,594,0.935,609,1.803,610,0.603,633,1.521,647,1.369,677,3.23,679,1.516,684,1.558,688,2.021,689,1.369,693,2.021,694,2.021,696,2.021,697,2.021,698,2.021,699,2.021,700,2.021,701,2.021,703,3.613,704,2.789,705,3.444,706,2.789,709,2.789,717,1.44,720,1.369,726,3.019,728,2.021,736,2.021,737,1.598,741,1.598,743,1.516,747,1.89,748,1.369,750,2.525,753,1.799,760,2.789,761,1.44,766,3.196,768,2.206,791,1.897,809,2.162,813,2.789,817,1.799,818,1.688,827,2.164,828,2.021,829,2.021,830,2.575,832,1.242,833,2.984,847,2.021,849,2.021,850,3.194,851,2.021,852,2.021,853,2.021,855,2.021,856,2.021,857,2.021,863,3.194,868,2.021,869,2.021,870,2.021,871,2.021,872,2.021,888,1.549,889,3.444,900,2.396,904,3.194,907,2.021,908,1.598,909,2.618,910,2.021,911,2.021,912,2.789,913,2.789,914,2.789,915,2.021,916,2.021,917,1.077,918,2.021,919,2.021,942,2.021,969,1.688,1024,2.525,1096,1.634,1121,2.618,1125,2.618,1146,1.184,1227,1.787,1235,2.618,1329,1.897,1355,2.092,1366,1.184,1406,2.327,1432,2.984,1433,2.984,1460,3.106,1476,1.963,1477,1.303,1480,2.06,1506,1.44,1510,1.303,1540,1.184,1584,1.44,1655,2.33,1656,1.516,1668,1.688,1671,1.688,1672,1.987,1673,1.688,1674,1.688,1675,1.688,1676,1.688,1677,1.688,1678,1.688,1695,1.897,1716,2.021,1749,2.021,1757,2.525,1760,1.897,1816,2.773,1859,3.106,1913,1.897,1914,2.618,1956,2.773,1959,5.554,1960,5.554,1961,2.467,1962,4.909,1967,3.106,1968,4.909,1969,2.773,1972,3.106,1975,3.106,1976,3.106,1978,1.787,1979,2.467,1980,1.688,1981,1.787,1984,2.327,1987,4.287,1988,2.327,1989,2.327,1990,2.984,1991,3.106,1992,4.287,1993,3.212,1994,3.106,1995,3.106,1996,3.106,1997,1.787,2000,2.162,2001,2.327,2002,2.327,2003,2.327,2004,3.212,2006,4.287,2007,2.327,2008,3.106,2009,3.106,2010,3.106,2011,3.106,2012,2.327,2013,2.327,2014,2.327,2015,3.212,2016,2.327,2017,2.327,2018,3.212,2019,2.327,2020,3.106,2021,2.327,2022,2.327,2023,2.327,2024,2.327,2025,3.212,2026,2.327,2027,2.327,2028,2.327,2029,2.327,2030,2.327,2031,2.327,2032,2.327,2033,2.327,2034,2.327,2035,2.162,2036,2.773,2037,3.106,2038,2.327,2039,2.773,2040,3.106,2041,3.106,2042,3.106,2043,3.106,2045,3.106,2046,5.743,2048,3.106,2049,3.106,2054,3.106,2055,3.106,2056,3.106,2057,4.287,2064,3.106,2066,2.327,2067,3.106,2068,4.287,2069,3.106,2071,3.106,2072,3.106,2073,3.106,2078,3.106,2079,3.106,2080,3.106,2089,2.327,2090,3.212,2091,2.327,2092,3.106,2093,3.106,2094,2.327,2095,2.327,2096,2.327,2097,3.106,2098,2.327,2099,2.327,2100,2.327,2101,2.327,2102,2.327,2103,2.327,2104,2.327,2105,2.327,2106,2.327,2107,2.327,2108,2.327,2110,2.327,2111,3.106,2112,2.327,2113,2.327,2114,2.327,2115,2.327,2116,3.212,2117,2.327,2118,3.106,2120,3.106,2121,2.162,2122,2.021,2123,3.106,2126,3.106,2127,3.106,2128,2.327,2129,5.355,2130,2.021,2131,3.26,2132,1.897,2133,1.897,2134,4.983,2135,3.61,2136,3.106,2137,2.525,2138,2.525,2139,2.525,2140,2.525,2141,2.525,2142,3.61,2143,3.61,2144,2.525,2145,3.61,2146,3.61,2147,3.61,2148,3.61,2149,3.61,2150,3.61,2151,3.61,2152,3.61,2153,3.61,2154,3.61,2155,3.61,2156,2.525,2157,3.61,2158,2.525,2159,2.525,2160,3.61,2161,2.525,2162,3.61,2163,3.61,2164,3.485,2165,2.525,2166,3.991,2167,3.61,2168,3.106,2169,1.897,2170,3.61,2171,3.61,2172,3.61,2173,3.61,2174,3.61,2175,2.525,2176,3.61,2177,3.61,2178,3.61]],["title/interfaces/NetworkContext.html",[0,0.155,42,1.105]],["body/interfaces/NetworkContext.html",[0,0.281,2,0.517,3,0.101,4,0.101,5,0.101,12,1.333,14,1.695,15,1.37,19,0.97,21,0.347,22,0.582,23,0.465,26,1.064,29,0.758,30,0.439,31,0.019,32,0.807,33,0.254,34,0.923,37,0.876,38,1.109,39,1.221,40,1.564,41,1.579,42,1.894,43,1.306,45,1.211,46,0.49,49,0.73,50,0.746,51,0.663,54,1.882,57,0.881,59,0.248,62,1.174,68,0.746,69,1.237,70,0.667,74,1.877,80,1.99,85,1.333,92,1.64,94,1.825,95,1.998,96,0.59,99,1.174,100,1.635,101,0.659,102,2.014,107,0.802,108,0.772,109,0.914,111,0.84,115,0.708,116,0.746,118,1.696,122,1.424,123,0.517,130,0.037,134,1.117,135,1.537,138,1.299,143,1.394,145,2.119,148,1.397,152,0.685,178,0.007,207,0.416,215,1.299,218,1.72,232,0.626,238,0.392,244,1.493,247,1.174,248,1.234,250,2.184,261,1.272,262,2.096,263,0.912,264,1.507,267,0.923,273,1.465,274,2.09,286,1.064,307,0.923,311,1.883,316,1.213,321,0.007,322,0.011,330,1.333,331,0.663,334,1.465,337,1.397,343,1.447,344,0.923,348,1.976,351,1.014,353,1.117,369,1.99,370,0.902,371,1.105,375,1.158,378,1.292,387,0.923,394,1.447,397,2.844,398,1.695,400,2.074,403,2.43,407,2.676,409,1.447,412,0.923,414,1.333,417,2.686,418,0.923,420,1.807,423,2.179,427,1.447,430,1.447,457,0.696,472,1.56,484,2.666,487,1.333,491,2.322,493,2.348,501,2.212,522,1.626,528,2.666,619,1.613,621,2.543,628,1.537,637,2.348,645,1.626,670,0.73,826,2.09,827,1.174,832,2.251,888,1.424,917,0.923,995,0.73,1018,2.212,1020,2.212,1021,1.532,1098,2.305,1115,1.447,1143,0.802,1152,1.447,1166,1.796,1189,1.447,1245,1.299,1248,1.234,1296,1.447,1297,1.447,1300,2.09,1305,1.447,1320,1.447,1349,1.532,1363,2.09,1366,1.883,1374,1.447,1384,1.174,1431,1.877,1436,2.348,1469,2.212,1470,1.626,1471,1.732,1472,1.732,1473,1.99,1474,2.542,1475,1.626,1476,2.305,1477,1.117,1478,3.019,1479,2.542,1480,2.42,1481,1.782,1482,2.212,1483,1.732,1484,2.501,1485,1.613,1486,1.732,1487,1.732,1488,1.732,1489,2.501,1490,1.732,1491,3.41,1492,1.732,1493,2.322,1494,2.501,1495,1.732,1496,1.732,1497,1.732,1498,1.732,1499,1.626,1500,1.732,1501,1.732,1502,1.732,1503,1.732,1504,1.978,1505,1.626,1506,1.782,1507,1.732,1508,1.732,1509,1.532,1510,1.613,1511,2.212,1512,2.501,1513,2.501,1514,2.348,1515,1.732,1516,1.732,1517,2.501,1518,1.732,1519,1.732,1520,1.732,1521,1.732,1522,1.732,1523,1.732,1524,1.732,1525,1.732,1526,1.732,1527,1.732,1528,1.732,1529,1.732,1530,1.732,1531,1.732,1532,1.732,1533,1.732,1534,2.501,1535,2.348,1536,1.732,1537,1.732,1538,1.732,1539,1.732,1540,1.014,1541,1.732,1542,1.732,1543,1.732,1544,1.732,1545,1.732,1546,2.501,1547,1.732,1548,1.732,1549,1.732,1550,1.732,1551,2.501,1552,1.732,1553,1.732,1554,1.732,1555,1.732,1556,2.501,1557,2.501,1558,1.732,1559,1.732,1560,1.732,1561,1.732,1562,1.732,1563,2.501,1564,1.732,1565,1.732,1566,1.732,1567,1.732,1568,1.732,1569,3.215,1570,1.732,1571,1.732,1572,1.732,1573,1.732,1574,1.732,1575,1.732,1576,1.732,1577,1.732,1578,1.732,1579,1.732,1580,1.732,1581,1.626,1582,2.501,1583,1.732,1584,1.782,1585,1.732,1586,1.732,1587,2.501,1588,2.09,1589,1.732,1590,2.501,1591,1.732,1592,1.732,1593,1.732,1594,2.501,1595,1.732,1596,2.501,1597,1.732,1598,2.501,1599,2.501,1600,1.732,1601,1.732,1602,1.732,1603,1.732,1604,1.732,1605,1.732,1606,1.732,1607,2.501,1608,1.732,1609,1.732,1610,2.501,1611,1.732,1612,1.732,1613,1.732,1614,1.732,1615,1.732,1616,1.732,1617,1.732,1618,1.732,1619,2.501,1620,1.732,1621,1.732,1622,1.732,1623,1.732,1624,1.732,1625,1.732,1626,1.732,1627,1.732,1628,1.732,1629,1.732,1630,1.732,1631,1.732,1632,1.732,1633,1.732,1634,1.732,1635,1.732,1636,1.732,1637,1.732,1638,1.732,1639,2.501,1640,1.732,1641,1.732,1642,1.732,1643,1.732,1644,1.732,1645,1.732,1646,1.732,1647,1.732,2179,3.094]],["title/classes/NetworkDataset.html",[41,0.96,130,0.045]],["body/classes/NetworkDataset.html",[0,0.271,3,0.089,4,0.089,5,0.089,12,1.213,14,1.543,15,1.205,19,0.901,21,0.327,22,0.556,23,1.039,26,0.937,29,0.803,30,0.439,31,0.019,32,0.815,33,0.245,34,0.812,37,0.679,38,1.109,39,1.22,40,1.452,41,1.712,42,1.724,43,1.158,45,1.163,46,0.432,49,0.642,50,0.679,51,0.584,54,1.827,57,0.775,59,0.238,62,1.033,68,0.692,69,1.148,70,0.608,74,2.045,80,2.049,85,1.611,92,1.523,94,1.854,95,1.943,96,0.614,99,1.033,100,1.537,101,0.635,102,2.031,107,1.054,108,0.815,109,0.894,111,0.739,115,0.772,116,0.692,118,1.674,122,1.57,123,0.455,130,0.033,134,1.179,135,1.399,138,1.365,143,1.453,145,2.109,152,0.645,178,0.006,207,0.366,215,1.143,218,1.597,232,0.581,238,0.516,244,1.386,247,1.033,248,1.086,250,2.086,261,1.158,262,1.989,263,0.831,264,1.555,267,0.812,273,1.334,274,2.277,286,0.937,307,0.812,311,1.771,316,1.467,321,0.006,322,0.01,324,1.755,330,1.452,331,0.584,334,1.334,337,1.272,343,1.273,344,0.812,348,1.858,351,2.39,353,2.497,369,1.847,370,1.068,371,1.554,375,1.054,378,1.095,387,0.812,394,1.273,397,2.674,398,1.847,400,2.27,403,2.42,407,1.631,409,1.273,412,0.812,414,1.213,417,2.837,418,0.812,420,1.726,423,2.049,427,1.273,430,1.273,457,0.612,472,1.827,484,2.774,487,1.213,491,2.156,493,2.138,501,2.014,522,1.431,528,2.547,619,1.469,621,1.205,628,1.399,637,2.138,645,1.431,670,0.642,826,1.273,827,1.033,832,2.162,888,1.57,917,0.812,995,0.642,1018,2.014,1020,2.014,1021,1.348,1098,1.675,1115,1.273,1143,0.705,1152,1.273,1166,1.966,1189,1.902,1245,1.143,1248,1.086,1296,1.273,1297,1.273,1300,1.902,1305,1.273,1320,1.273,1349,1.348,1363,1.902,1366,1.771,1374,1.273,1384,1.033,1431,1.708,1436,2.138,1469,3.626,1470,1.431,1471,1.524,1472,1.524,1473,1.847,1474,2.506,1475,1.431,1476,1.675,1477,0.983,1478,2.138,1479,1.847,1480,1.758,1481,1.623,1482,2.014,1483,1.524,1484,2.726,1485,1.469,1486,1.524,1487,1.524,1488,1.524,1489,2.726,1490,1.524,1491,3.236,1492,1.524,1493,2.392,1494,2.277,1495,1.524,1496,1.524,1497,1.524,1498,1.524,1499,1.431,1500,1.524,1501,1.524,1502,1.524,1503,1.524,1504,2.156,1505,1.431,1506,1.623,1507,1.524,1508,1.524,1509,1.348,1510,0.983,1511,1.348,1512,1.524,1513,1.524,1514,1.431,1515,1.524,1516,1.524,1517,3.024,1518,2.277,1519,1.524,1520,2.277,1521,1.524,1522,2.277,1523,1.524,1524,2.277,1525,1.524,1526,3.024,1527,1.524,1528,3.024,1529,1.524,1530,3.024,1531,1.524,1532,1.524,1533,3.024,1534,2.277,1535,3.038,1536,3.024,1537,1.524,1538,3.024,1539,1.524,1540,1.771,1541,1.524,1542,1.524,1543,2.277,1544,1.524,1545,1.524,1546,2.277,1547,1.524,1548,2.277,1549,1.524,1550,1.524,1551,2.277,1552,1.524,1553,1.524,1554,2.726,1555,1.524,1556,2.277,1557,2.277,1558,1.524,1559,1.524,1560,2.277,1561,1.524,1562,1.524,1563,3.236,1564,2.277,1565,2.277,1566,2.277,1567,1.524,1568,1.524,1569,3.519,1570,1.524,1571,1.524,1572,1.524,1573,1.524,1574,1.524,1575,2.277,1576,2.277,1577,2.277,1578,2.277,1579,1.524,1580,1.524,1581,2.138,1582,2.726,1583,2.277,1584,2.155,1585,2.277,1586,2.277,1587,2.277,1588,1.902,1589,1.524,1590,2.277,1591,1.524,1592,1.524,1593,1.524,1594,2.277,1595,1.524,1596,2.277,1597,1.524,1598,2.277,1599,2.277,1600,1.524,1601,1.524,1602,1.524,1603,1.524,1604,1.524,1605,1.524,1606,1.524,1607,2.277,1608,1.524,1609,1.524,1610,2.277,1611,1.524,1612,1.524,1613,1.524,1614,1.524,1615,1.524,1616,1.524,1617,1.524,1618,1.524,1619,2.277,1620,1.524,1621,1.524,1622,1.524,1623,1.524,1624,1.524,1625,1.524,1626,2.277,1627,2.277,1628,1.524,1629,1.524,1630,1.524,1631,1.524,1632,1.524,1633,1.524,1634,1.524,1635,1.524,1636,1.524,1637,1.524,1638,1.524,1639,2.277,1640,1.524,1641,1.524,1642,1.524,1643,1.524,1644,1.524,1645,1.524,1646,1.524,1647,1.524,2180,4.068,2181,4.068,2182,4.068,2183,4.068,2184,4.068,2185,4.068,2186,4.068,2187,4.068,2188,4.068,2189,4.068,2190,2.723,2191,2.723,2192,2.723,2193,2.723,2194,2.723,2195,2.723,2196,2.723,2197,2.723,2198,2.723,2199,2.723,2200,2.723,2201,2.723,2202,2.723,2203,2.723,2204,2.723,2205,2.723,2206,2.723,2207,2.723,2208,2.723]],["title/modules/NetworkModule.html",[975,1.215,2209,2.592]],["body/modules/NetworkModule.html",[3,0.226,4,0.177,5,0.177,31,0.019,33,0.293,38,0.773,39,0.862,46,0.862,59,0.206,130,0.066,178,0.013,321,0.013,322,0.015,365,1.622,375,1.409,567,3.247,610,0.908,646,1.783,662,3.084,670,1.283,680,3.247,975,1.783,977,2.408,978,2.408,979,3.433,980,2.692,981,3.433,985,2.127,986,2.169,988,3.409,989,3.409,990,2.858,991,4.985,992,4.985,993,3.804,994,3.409,995,1.283,998,4.182,1001,2.858,1055,4.182,1056,2.858,1474,2.063,1656,2.284,1840,5.582,2209,5.424,2210,4.679,2211,4.679,2212,4.679,2213,5.439,2214,6.489,2215,5.439,2216,5.582,2217,5.439,2218,6.489]],["title/interfaces/NetworkProvider.html",[0,0.155,244,1.055]],["body/interfaces/NetworkProvider.html",[0,0.276,2,0.485,3,0.094,4,0.094,5,0.094,12,1.272,14,1.617,15,1.284,19,0.935,21,0.337,22,0.569,23,0.964,26,0.998,29,0.785,30,0.44,31,0.019,32,0.803,33,0.249,34,0.865,37,0.844,38,1.11,39,1.221,40,1.508,41,1.741,42,2.004,43,1.375,45,1.309,46,0.46,49,0.684,50,0.712,51,0.622,54,1.988,57,0.826,59,0.243,62,1.1,68,0.719,69,1.192,70,0.674,74,1.79,76,2.111,80,1.918,85,1.272,92,1.581,94,1.789,95,1.971,96,0.616,99,1.1,100,1.689,101,0.647,102,1.988,107,0.752,108,0.884,109,0.904,111,0.788,115,0.676,116,0.719,118,1.662,122,1.513,123,0.485,130,0.035,134,1.207,135,1.467,138,1.287,143,1.431,145,2.124,152,0.665,178,0.007,207,0.39,215,1.218,218,1.657,232,0.603,238,0.368,244,1.586,247,1.617,248,1.701,250,2.382,261,1.213,262,2.349,263,1.138,264,1.48,267,1.272,273,1.398,274,1.994,286,1.917,307,1.272,311,1.827,316,1.158,321,0.007,322,0.01,330,1.508,331,0.622,334,2.035,337,1.333,339,2.982,340,2.982,341,2.982,342,2.982,343,2.606,344,1.662,345,2.982,346,2.982,348,1.917,351,2.239,353,2.317,369,2.355,370,1.029,371,0.717,375,1.444,378,1.253,387,0.865,394,1.994,397,2.758,398,1.617,400,2.012,403,2.559,409,1.994,412,0.865,414,1.272,417,2.606,418,1.272,420,1.766,423,2.434,427,1.994,430,1.994,457,0.652,472,1.513,484,2.607,487,1.272,491,2.467,493,2.24,501,2.111,522,1.524,528,2.607,619,1.539,621,1.284,628,1.917,637,2.24,645,1.524,670,0.684,826,1.357,827,1.1,832,2.207,888,1.373,917,0.865,995,0.684,1018,2.111,1020,2.111,1021,1.436,1098,1.739,1115,1.994,1143,0.752,1152,1.994,1166,1.742,1189,1.357,1245,1.218,1248,1.157,1296,1.357,1297,1.357,1300,1.994,1305,1.357,1320,1.357,1349,1.436,1363,1.994,1366,1.827,1374,1.357,1384,1.1,1431,1.79,1436,2.928,1469,3.428,1470,1.524,1471,1.624,1472,1.624,1473,1.918,1474,2.548,1475,1.524,1476,1.739,1477,1.047,1478,2.24,1479,1.918,1480,1.825,1481,1.701,1482,2.111,1483,1.624,1484,2.386,1485,1.539,1486,1.624,1487,1.624,1488,1.624,1489,2.386,1490,1.624,1491,3.323,1492,1.624,1493,2.238,1494,2.386,1495,1.624,1496,2.386,1497,2.386,1498,2.386,1499,2.24,1500,2.386,1501,1.624,1502,1.624,1503,1.624,1504,2.238,1505,2.24,1506,2.223,1507,2.386,1508,2.386,1509,2.111,1510,1.047,1511,1.436,1512,1.624,1513,1.624,1514,1.524,1515,1.624,1516,1.624,1517,2.386,1518,1.624,1519,1.624,1520,1.624,1521,1.624,1522,1.624,1523,1.624,1524,1.624,1525,1.624,1526,1.624,1527,1.624,1528,1.624,1529,1.624,1530,1.624,1531,1.624,1532,1.624,1533,1.624,1534,2.386,1535,2.24,1536,1.624,1537,1.624,1538,1.624,1539,1.624,1540,0.951,1541,1.624,1542,1.624,1543,1.624,1544,1.624,1545,1.624,1546,2.386,1547,1.624,1548,1.624,1549,1.624,1550,1.624,1551,2.386,1552,1.624,1553,1.624,1554,1.624,1555,1.624,1556,2.386,1557,2.386,1558,1.624,1559,1.624,1560,1.624,1561,1.624,1562,1.624,1563,2.386,1564,1.624,1565,1.624,1566,1.624,1567,1.624,1568,1.624,1569,3.119,1570,1.624,1571,1.624,1572,1.624,1573,1.624,1574,1.624,1575,1.624,1576,1.624,1577,1.624,1578,1.624,1579,1.624,1580,1.624,1581,1.524,1582,2.386,1583,1.624,1584,1.701,1585,1.624,1586,1.624,1587,2.386,1588,1.994,1589,1.624,1590,2.386,1591,1.624,1592,1.624,1593,1.624,1594,2.386,1595,1.624,1596,2.386,1597,1.624,1598,2.386,1599,2.386,1600,1.624,1601,1.624,1602,1.624,1603,1.624,1604,1.624,1605,1.624,1606,1.624,1607,2.386,1608,1.624,1609,1.624,1610,2.386,1611,1.624,1612,1.624,1613,1.624,1614,1.624,1615,1.624,1616,1.624,1617,1.624,1618,1.624,1619,2.386,1620,1.624,1621,1.624,1622,1.624,1623,1.624,1624,1.624,1625,1.624,1626,1.624,1627,1.624,1628,1.624,1629,1.624,1630,1.624,1631,1.624,1632,1.624,1633,1.624,1634,1.624,1635,1.624,1636,1.624,1637,1.624,1638,1.624,1639,2.386,1640,1.624,1641,1.624,1642,1.624,1643,1.624,1644,1.624,1645,1.624,1646,1.624,1647,1.624,2219,2.901,2220,2.901,2221,2.901,2222,2.901,2223,2.901,2224,2.901,2225,2.901,2226,2.901,2227,2.901,2228,2.901]],["title/components/NgxChart.html",[566,0.557,682,1.406]],["body/components/NgxChart.html",[0,0.23,3,0.2,4,0.136,5,0.136,13,1.436,21,0.252,22,0.503,23,0.923,29,0.656,30,0.458,31,0.019,32,0.774,33,0.264,38,0.594,39,0.662,50,0.697,51,0.895,59,0.233,67,0.923,68,0.964,70,0.646,95,1.749,96,0.593,101,0.41,107,1.424,109,0.86,115,0.974,116,0.594,119,2.57,130,0.05,137,0.918,139,1.134,148,1.921,178,0.013,238,0.827,321,0.013,322,0.013,337,1.719,344,1.833,351,2.507,353,2.219,370,0.99,371,1.722,387,1.947,440,1.359,457,0.939,484,1.753,526,2.434,566,0.923,567,1.753,568,2.721,569,1.666,570,1.584,571,1.666,572,2.194,575,1.592,576,1.89,577,1.9,583,1.436,588,1.306,594,1.424,599,2.308,600,2.57,609,1.519,610,0.697,646,1.369,647,2.085,648,2.434,649,2.194,650,3.431,651,2.194,655,2.888,656,1.849,657,2.015,658,2.888,659,1.508,660,3.229,661,1.666,662,1.666,663,1.849,664,1.753,665,2.194,666,1.584,667,1.753,668,2.194,669,1.666,670,1.825,671,3.229,672,1.849,673,1.953,674,1.753,675,2.194,676,1.753,677,2.434,678,2.194,679,1.753,680,1.753,681,2.194,682,2.477,683,1.753,684,1.306,685,2.194,686,2.194,689,2.085,715,3.655,722,4.223,726,2.873,740,1.666,753,2.358,761,2.778,777,1.508,795,5.286,817,1.508,818,1.953,824,2.434,832,1.891,972,2.337,995,0.985,1056,2.194,1074,3.845,1092,3.655,1093,2.921,1094,3.961,1095,4.721,1096,2.141,1097,2.873,1098,2.396,1099,4.721,1100,4.721,1101,4.223,1102,2.691,1103,2.888,1104,5.456,1105,3.439,1106,3.208,1107,2.691,1108,3.543,1109,4.721,1110,3.208,1111,2.58,1112,3.208,1113,3.208,1114,3.084,1115,3.053,1116,3.208,1117,4.721,1118,3.208,1119,3.961,1120,3.208,1121,3.431,1122,3.208,1123,3.208,1124,3.208,1125,3.229,1126,4.209,1127,3.208,1128,4.223,1129,2.691,1130,2.691,1131,3.232,1132,3.208,1133,2.691,1134,3.961,1135,3.208,1136,3.208,1137,3.208,1138,2.085,1139,3.208,1140,3.208,1141,3.208,1142,2.921,1143,1.082,1144,3.208,1145,3.208,1146,1.802,1147,3.208,1148,2.501,1149,3.208,1150,3.208,1151,3.208,1152,1.953,1153,3.208,1154,3.208,1155,5.016,1156,4.223,1157,3.208,1158,3.208,1159,2.921,1160,3.208,2229,5.497,2230,4.176,2231,5.497,2232,4.176,2233,4.176,2234,4.176,2235,4.176,2236,4.176,2237,4.176,2238,4.176,2239,4.176,2240,4.176,2241,4.176,2242,4.176,2243,4.176,2244,4.176,2245,4.176,2246,4.176,2247,4.176,2248,4.176,2249,4.176,2250,4.176,2251,4.176,2252,4.176,2253,4.176,2254,5.497,2255,5.497,2256,5.497,2257,4.729,2258,4.176,2259,4.176]],["title/modules/NgxChartsModule.html",[975,1.215,2260,2.592]],["body/modules/NgxChartsModule.html",[3,0.18,4,0.18,5,0.18,31,0.019,33,0.288,59,0.21,130,0.067,178,0.013,321,0.013,322,0.016,365,1.655,375,1.438,610,0.927,646,1.82,657,1.82,669,3.091,670,1.548,682,2.94,761,2.214,975,1.82,977,2.907,978,2.457,979,3.462,980,2.747,981,3.462,985,2.153,986,2.214,988,3.451,989,3.451,990,2.916,994,3.451,995,1.309,996,4.233,997,2.214,1001,2.916,1055,4.233,1056,2.916,1102,3.577,1103,3.451,1650,3.882,1653,3.882,2260,5.382,2261,4.775,2262,4.775,2263,4.775,2264,5.55,2265,5.55,2266,6.567,2267,6.567,2268,6.567,2269,6.567,2270,6.567,2271,6.567]],["title/interfaces/Node.html",[0,0.155,38,0.527]],["body/interfaces/Node.html",[0,0.281,2,0.519,3,0.101,4,0.101,5,0.101,12,1.336,14,1.7,15,1.375,19,1.064,21,0.348,22,0.582,23,0.673,26,1.068,29,0.8,30,0.445,31,0.019,32,0.809,33,0.254,34,0.926,37,0.748,38,1.11,39,1.216,40,1.568,41,1.581,42,1.954,43,1.233,45,1.212,46,0.492,49,0.732,50,0.748,51,0.666,54,1.945,57,0.884,59,0.248,62,1.178,68,0.747,69,1.239,70,0.641,74,1.881,80,1.994,85,1.336,92,1.799,94,1.808,95,1.999,96,0.519,99,1.178,100,1.638,101,0.659,102,1.986,107,0.805,108,0.773,109,0.915,111,0.843,115,0.71,116,0.931,118,1.82,122,1.427,123,0.519,130,0.037,134,1.119,135,1.541,138,1.299,143,1.395,145,2.092,152,0.687,178,0.007,207,0.417,215,1.881,218,1.723,232,0.627,238,0.394,244,1.736,247,1.178,248,1.239,250,2.351,261,1.275,262,2.099,263,0.915,264,1.508,267,0.926,273,1.469,274,2.095,286,1.068,307,0.926,311,2.148,316,1.217,321,0.007,322,0.011,330,1.336,331,0.96,334,1.469,343,1.452,344,0.926,348,2.186,369,1.994,370,0.867,371,0.768,375,1.161,378,1.182,387,0.926,394,1.452,397,2.849,398,1.7,400,2.078,403,2.434,409,1.452,412,0.926,414,1.568,417,2.853,418,0.926,420,1.809,423,2.183,427,1.452,430,1.452,457,0.698,472,1.779,484,2.87,487,1.716,491,2.327,493,2.354,501,2.218,522,1.632,528,2.669,619,1.618,621,1.375,628,1.541,637,2.354,645,1.632,670,0.732,826,1.452,827,1.178,832,2.254,888,1.427,917,1.336,995,0.732,1018,2.218,1020,2.218,1021,1.537,1098,1.808,1115,1.452,1143,0.805,1152,1.452,1166,1.799,1189,1.452,1245,1.304,1248,1.239,1296,1.452,1297,1.452,1300,2.095,1305,1.452,1320,1.452,1349,1.537,1363,2.095,1366,1.887,1374,1.452,1384,1.178,1431,1.881,1436,2.354,1469,1.537,1470,1.632,1471,1.738,1472,1.738,1473,1.994,1474,2.544,1475,1.632,1476,1.808,1477,1.121,1478,2.354,1479,1.994,1480,1.898,1481,1.787,1482,2.218,1483,1.738,1484,2.508,1485,1.618,1486,1.738,1487,1.738,1488,1.738,1489,2.508,1490,2.508,1491,3.883,1492,2.508,1493,2.701,1494,2.942,1495,2.508,1496,1.738,1497,1.738,1498,1.738,1499,1.632,1500,1.738,1501,1.738,1502,1.738,1503,1.738,1504,1.984,1505,1.632,1506,1.787,1507,1.738,1508,1.738,1509,1.537,1510,1.121,1511,1.537,1512,1.738,1513,1.738,1514,1.632,1515,1.738,1516,1.738,1517,2.508,1518,1.738,1519,1.738,1520,1.738,1521,1.738,1522,1.738,1523,1.738,1524,1.738,1525,1.738,1526,1.738,1527,1.738,1528,1.738,1529,1.738,1530,1.738,1531,1.738,1532,1.738,1533,1.738,1534,2.508,1535,2.354,1536,1.738,1537,1.738,1538,1.738,1539,1.738,1540,1.018,1541,1.738,1542,1.738,1543,1.738,1544,1.738,1545,1.738,1546,2.508,1547,1.738,1548,1.738,1549,1.738,1550,1.738,1551,2.508,1552,1.738,1553,1.738,1554,1.738,1555,1.738,1556,2.508,1557,2.508,1558,1.738,1559,1.738,1560,1.738,1561,1.738,1562,1.738,1563,2.508,1564,1.738,1565,1.738,1566,1.738,1567,1.738,1568,1.738,1569,3.221,1570,1.738,1571,1.738,1572,1.738,1573,1.738,1574,1.738,1575,1.738,1576,1.738,1577,1.738,1578,1.738,1579,1.738,1580,1.738,1581,1.632,1582,2.508,1583,1.738,1584,1.787,1585,1.738,1586,1.738,1587,2.508,1588,2.095,1589,1.738,1590,2.508,1591,1.738,1592,1.738,1593,1.738,1594,2.508,1595,1.738,1596,2.508,1597,1.738,1598,2.508,1599,2.508,1600,1.738,1601,1.738,1602,1.738,1603,1.738,1604,1.738,1605,1.738,1606,1.738,1607,2.508,1608,1.738,1609,1.738,1610,2.508,1611,1.738,1612,1.738,1613,1.738,1614,1.738,1615,1.738,1616,1.738,1617,1.738,1618,1.738,1619,2.508,1620,1.738,1621,1.738,1622,1.738,1623,1.738,1624,1.738,1625,1.738,1626,1.738,1627,1.738,1628,1.738,1629,1.738,1630,1.738,1631,1.738,1632,1.738,1633,1.738,1634,1.738,1635,1.738,1636,1.738,1637,1.738,1638,1.738,1639,2.508,1640,1.738,1641,1.738,1642,1.738,1643,1.738,1644,1.738,1645,1.738,1646,1.738,1647,1.738]],["title/interfaces/NodeData.html",[0,0.155,1004,2.592]],["body/interfaces/NodeData.html",[0,0.21,2,0.838,3,0.233,4,0.163,5,0.163,21,0.303,22,0.566,23,0.928,29,0.737,30,0.423,31,0.019,32,0.527,33,0.234,38,1.114,39,0.795,43,1.324,44,1.726,59,0.234,67,1.006,69,1.183,70,0.527,94,1.527,96,0.427,108,0.674,109,0.848,114,2.001,116,0.993,118,1.975,130,0.06,148,1.568,152,0.834,172,1.903,178,0.012,197,1.362,232,0.834,238,0.848,242,2.346,252,2.107,281,1.128,306,1.362,311,1.645,316,1.362,321,0.012,322,0.015,331,1.075,378,1.128,398,1.903,440,1.24,472,1.362,566,0.928,570,1.903,574,3.509,575,1.601,576,1.24,577,1.24,578,4.746,579,1.811,580,3.854,581,1.811,582,1.568,583,2.125,584,3.854,585,3.854,586,3.854,587,4.746,588,1.568,589,3.509,590,3.509,591,3.234,592,3.234,593,3.854,594,1.3,595,3.854,596,2.483,597,3.509,599,2.107,602,3.854,609,1.527,610,0.838,611,3.854,612,3.854,617,3.854,618,3.854,619,1.811,620,2.483,621,2.221,622,3.854,623,3.854,624,3.854,625,3.854,626,4.746,627,3.854,628,1.726,629,3.854,630,3.004,631,1.903,632,3.854,633,1.24,634,3.509,662,2.001,1002,3.854,1003,3.982,1004,5.111,1011,4.316,1012,4.316,1013,4.316,1014,4.316,1015,4.316,1016,4.316,1017,4.316,1018,3.314,1019,5.76,1020,3.058,1021,2.483,1022,4.316,1023,4.316,1024,3.509,1025,4.316,1026,4.316,1027,4.316,1028,3.854,1029,4.316,1030,4.316,1031,3.854,1032,4.316,1033,4.316,1034,4.316,1035,4.316,1036,4.316,1037,4.316,1038,4.316,1039,4.316,1040,4.316,1041,4.316,1042,4.316,1043,4.316]],["title/interfaces/NodeType.html",[0,0.155,348,1.275]],["body/interfaces/NodeType.html",[0,0.282,2,0.526,3,0.103,4,0.103,5,0.103,12,1.351,14,1.718,15,1.395,19,0.98,21,0.35,22,0.585,23,0.68,26,1.084,29,0.762,30,0.426,31,0.019,32,0.81,33,0.255,34,0.94,37,0.756,38,1.11,39,1.217,40,1.581,41,1.59,42,1.83,43,1.242,45,1.218,46,0.499,49,0.743,50,0.756,51,0.675,54,1.89,57,0.897,59,0.249,62,1.196,68,0.824,69,1.366,70,0.645,74,1.902,80,2.01,85,1.351,92,1.811,94,1.801,95,2.026,96,0.573,99,1.196,100,1.746,101,0.662,102,1.99,107,0.817,108,0.778,109,0.917,111,0.856,115,0.718,116,0.753,118,1.705,122,1.439,123,0.526,130,0.038,134,1.126,135,1.558,138,1.302,143,1.4,145,2.086,152,0.691,178,0.007,207,0.423,215,1.324,218,1.738,232,0.632,238,0.399,244,1.508,247,1.196,248,1.257,250,2.197,261,1.289,262,2.111,263,0.925,264,1.514,267,0.94,273,1.485,274,2.118,286,1.084,307,0.94,311,2.012,316,1.23,321,0.007,322,0.011,330,1.351,331,0.675,334,1.485,343,1.474,344,0.94,348,2.111,369,2.01,370,0.872,371,0.779,375,1.173,378,1.192,387,0.94,394,1.474,397,2.868,398,1.718,400,2.092,403,2.448,409,1.474,412,0.94,414,1.351,417,2.709,418,0.94,420,1.981,423,2.198,427,1.474,430,1.474,457,0.709,472,1.573,484,2.683,487,1.351,491,2.565,493,2.785,501,2.242,522,1.656,528,2.683,619,1.914,621,1.395,628,1.558,637,2.379,645,1.656,670,0.743,826,1.474,827,1.196,832,2.264,888,1.439,917,0.94,995,0.743,1008,2.379,1018,2.242,1020,2.242,1021,1.56,1098,1.823,1115,1.474,1143,0.817,1152,1.474,1166,1.811,1189,1.474,1245,1.324,1248,1.257,1296,1.474,1297,1.474,1300,2.118,1305,1.474,1320,1.474,1349,1.56,1363,2.478,1366,1.9,1374,1.474,1384,1.196,1431,1.902,1436,2.379,1469,1.56,1470,1.656,1471,1.764,1472,1.764,1473,2.01,1474,2.601,1475,1.656,1476,1.823,1477,1.138,1478,2.379,1479,2.01,1480,1.914,1481,2.114,1482,2.624,1483,2.535,1484,3.435,1485,1.914,1486,1.764,1487,1.764,1488,1.764,1489,2.535,1490,1.764,1491,3.435,1492,1.764,1493,2.347,1494,2.535,1495,1.764,1496,1.764,1497,1.764,1498,1.764,1499,1.656,1500,1.764,1501,1.764,1502,1.764,1503,1.764,1504,2.005,1505,1.656,1506,1.806,1507,1.764,1508,1.764,1509,1.56,1510,1.138,1511,1.56,1512,1.764,1513,1.764,1514,1.656,1515,1.764,1516,1.764,1517,2.535,1518,1.764,1519,1.764,1520,1.764,1521,1.764,1522,1.764,1523,1.764,1524,1.764,1525,1.764,1526,1.764,1527,1.764,1528,1.764,1529,1.764,1530,1.764,1531,1.764,1532,1.764,1533,1.764,1534,2.535,1535,2.379,1536,1.764,1537,1.764,1538,1.764,1539,1.764,1540,1.033,1541,1.764,1542,1.764,1543,1.764,1544,1.764,1545,1.764,1546,2.535,1547,1.764,1548,1.764,1549,1.764,1550,1.764,1551,2.535,1552,1.764,1553,1.764,1554,1.764,1555,1.764,1556,2.535,1557,2.535,1558,1.764,1559,1.764,1560,1.764,1561,1.764,1562,1.764,1563,2.535,1564,1.764,1565,1.764,1566,1.764,1567,1.764,1568,1.764,1569,3.243,1570,1.764,1571,1.764,1572,1.764,1573,1.764,1574,1.764,1575,1.764,1576,1.764,1577,1.764,1578,1.764,1579,1.764,1580,1.764,1581,1.656,1582,2.535,1583,1.764,1584,1.806,1585,1.764,1586,1.764,1587,2.535,1588,2.118,1589,1.764,1590,2.535,1591,1.764,1592,1.764,1593,1.764,1594,2.535,1595,1.764,1596,2.535,1597,1.764,1598,2.535,1599,2.535,1600,1.764,1601,1.764,1602,1.764,1603,1.764,1604,1.764,1605,1.764,1606,1.764,1607,2.535,1608,1.764,1609,1.764,1610,2.535,1611,1.764,1612,1.764,1613,1.764,1614,1.764,1615,1.764,1616,1.764,1617,1.764,1618,1.764,1619,2.535,1620,1.764,1621,1.764,1622,1.764,1623,1.764,1624,1.764,1625,1.764,1626,1.764,1627,1.764,1628,1.764,1629,1.764,1630,1.764,1631,1.764,1632,1.764,1633,1.764,1634,1.764,1635,1.764,1636,1.764,1637,1.764,1638,1.764,1639,2.535,1640,1.764,1641,1.764,1642,1.764,1643,1.764,1644,1.764,1645,1.764,1646,1.764,1647,1.764]],["title/interfaces/RecordNode.html",[0,0.155,1169,1.947]],["body/interfaces/RecordNode.html",[0,0.261,2,0.49,3,0.095,4,0.095,5,0.095,7,1.059,8,1.113,10,1.642,12,1.859,13,2.509,14,1.113,17,1.541,18,3.275,19,1.103,21,0.414,22,0.513,23,0.441,24,2.848,25,1.541,26,1.009,27,1.642,28,3.085,29,0.607,30,0.46,31,0.019,32,0.677,33,0.226,36,0.692,37,0.49,38,1.111,39,1.2,40,1.671,41,1.451,42,0.875,43,0.921,44,1.009,45,1.221,46,0.465,50,0.49,51,0.629,52,1.903,53,1.452,54,1.692,55,2.253,59,0.244,61,1.521,62,2.364,63,2.574,64,2.253,65,2.406,66,1.757,67,1.065,68,0.987,69,0.692,70,0.694,79,2.128,80,1.113,82,2.137,83,2.379,84,2.406,85,1.282,87,2.01,93,1.452,94,1.768,96,0.366,101,0.662,102,1.956,103,1.541,105,1.757,108,0.577,109,0.868,111,1.382,114,1.17,115,0.465,116,0.915,118,1.318,119,3.011,120,3.135,121,1.232,122,0.797,123,1.235,124,2.519,127,2.519,130,0.035,134,0.989,137,0.49,138,0.516,139,1.86,140,1.452,141,1.299,143,1.144,145,1.917,149,1.232,152,0.846,172,1.113,178,0.007,181,2.406,184,1.344,196,2.519,197,1.521,198,2.574,203,1.452,207,0.801,212,1.757,218,2.043,221,1.832,232,0.712,233,2.406,238,0.868,240,3.047,243,1.757,251,1.372,254,1.757,257,2.259,258,2.01,261,0.835,263,1.039,264,0.967,266,1.541,267,0.875,269,2.519,281,1.341,282,1.372,284,1.17,286,1.009,287,1.757,288,2.128,289,1.167,290,1.805,291,1.223,295,1.114,306,1.382,307,0.875,308,1.452,321,0.007,322,0.01,326,2.325,329,1.541,330,0.875,331,1.09,332,1.452,348,1.75,349,2.924,350,1.891,370,0.611,374,1.642,377,1.631,378,0.66,381,1.541,382,1.891,383,3.611,384,2.3,385,1.891,386,3.61,387,0.875,388,1.452,389,1.552,390,1.232,391,1.891,392,1.757,398,2.262,400,1.059,405,1.17,406,1.757,414,1.779,415,1.757,416,1.372,419,2.01,420,1.448,468,2.406,471,1.541,473,3.011,483,1.757,484,2.352,489,0.962,491,1.299,506,1.757,620,1.452,633,1.541,767,1.541,874,3.279,1003,2.771,1138,1.113,1148,1.757,1161,3.611,1162,1.757,1163,3.007,1164,2.254,1165,2.254,1166,1.344,1167,3.047,1168,2.574,1169,3.87,1170,1.891,1171,2.771,1172,2.254,1173,1.757,1174,3.007,1175,2.254,1176,3.559,1177,2.254,1178,1.642,1179,2.254,1180,3.007,1181,2.052,1182,2.254,1183,2.254,1184,2.052,1185,2.848,1186,1.891,1187,3.007,1188,1.757,1189,1.372,1190,2.254,1191,2.254,1192,2.254,1193,2.254,1194,1.891,1195,2.254,1196,2.254,1197,2.254,1198,3.302,1199,2.254,1200,2.254,1201,2.254,1202,2.254,1203,2.254,1204,2.052,1205,2.771,1206,3.007,1207,2.052,1208,2.254,1209,2.254,1210,2.254,1211,3.919,1212,2.254,1213,2.254,1214,2.254,1215,3.909,1216,2.254,1217,2.254,1218,2.254,1219,2.254,1220,2.254,1221,3.302,1222,3.302,1223,3.302,1224,2.254,1225,3.302,1226,2.254,1227,1.452,1228,2.254,1229,2.254,1230,1.891,1231,2.254,1232,3.909,1233,1.891,1234,2.254,1235,1.541,1236,2.254,1237,3.302,1238,2.254,1239,2.254,1240,1.642,1241,2.254,1242,2.254,1243,2.254,1244,2.254,1245,1.805,1246,2.254,1247,2.254,1248,1.17,1249,2.254,1250,2.254,1251,2.052,1252,2.254,1253,2.254,1254,3.302,1255,2.254,1256,2.254,1257,2.254,1258,2.254,1259,2.254,1260,2.254,1261,2.254,1262,2.254,1263,2.254,1264,2.254,1265,2.052,1266,2.254,1267,1.642,1268,2.254,1269,2.254,1270,3.302,1271,2.254,1272,2.254,1273,2.254,1274,2.254,1275,2.254,1276,1.452,1277,1.757,1278,2.254,1279,2.254,1280,2.254,1281,2.254,1282,2.254,1283,2.254,1284,2.254,1285,2.254,1286,2.254,1287,2.254,1288,3.909,1289,2.254,1290,2.254,1291,3.302,1292,2.254,1293,2.254,1294,4.304,1295,2.254,1296,3.088,1297,2.62,1298,4.304,1299,4.304,1300,2.62,1301,2.254,1302,2.254,1303,2.254,1304,4.304,1305,3.011,1306,2.254,1307,2.052,1308,3.909,1309,2.254,1310,3.909,1311,3.302,1312,3.302,1313,3.302,1314,3.302,1315,2.254,1316,2.254,1317,3.909,1318,3.909,1319,2.254,1320,2.01,1321,2.254,1322,2.771,1323,2.254,1324,2.254,1325,2.254,1326,2.254,1327,2.254,1328,2.052,1329,1.541,1330,2.254,1331,1.757,1332,2.254,1333,2.254]],["title/components/ResultTimeline.html",[566,0.557,683,1.556]],["body/components/ResultTimeline.html",[3,0.196,4,0.131,5,0.131,13,1.388,21,0.244,22,0.553,23,0.807,30,0.449,31,0.019,32,0.565,33,0.244,36,0.951,37,0.674,38,0.573,39,0.639,57,1.833,59,0.204,67,0.606,68,1.017,95,1.719,96,0.599,101,0.396,107,1.045,115,1.134,116,1.017,130,0.049,137,0.674,138,0.945,152,0.9,178,0.013,207,0.901,232,0.641,238,0.681,321,0.016,322,0.013,337,1.68,351,2.482,353,1.94,370,0.859,371,1.493,384,2.058,440,1.328,472,1.821,525,3.007,566,0.907,567,1.694,568,2.66,569,1.609,571,1.609,572,2.12,575,1.565,576,1.884,577,1.884,594,1.392,599,2.256,600,2.512,609,1.808,610,0.674,631,2.443,646,1.323,647,2.038,648,2.379,649,2.12,650,3.7,651,2.12,655,2.823,656,1.786,657,1.981,658,2.823,659,1.457,660,3.174,661,1.609,662,1.609,663,1.786,664,1.694,665,2.12,666,1.53,667,1.694,668,2.12,669,1.609,670,1.424,671,3.174,672,1.786,673,1.887,674,1.694,675,2.12,676,1.694,677,2.379,678,2.12,679,1.694,680,1.694,681,2.12,682,1.53,683,2.705,684,2.157,685,2.12,686,2.12,717,1.609,740,2.143,766,1.997,777,1.457,897,3.217,1028,3.099,1062,4.127,1096,1.981,1146,1.323,1474,2.906,2131,3.345,2272,5.464,2273,3.099,2274,5.373,2275,6.041,2276,7.242,2277,6.442,2278,6.442,2279,3.385,2280,6.041,2281,6.041,2282,6.041,2283,6.041,2284,4.034,2285,5.373,2286,6.709,2287,4.034,2288,4.034,2289,4.034,2290,5.373,2291,4.034,2292,4.034,2293,4.034,2294,4.034,2295,5.541,2296,4.225,2297,4.034,2298,4.034,2299,4.034,2300,4.034,2301,4.034,2302,4.034,2303,6.041,2304,4.034,2305,3.463,2306,3.471,2307,3.471,2308,3.471,2309,3.471,2310,4.034,2311,4.034,2312,4.034,2313,4.034,2314,4.034,2315,4.034,2316,5.373,2317,4.034,2318,2.6,2319,4.034,2320,4.034,2321,4.034,2322,5.373,2323,4.034,2324,4.034,2325,4.034,2326,4.034,2327,4.034,2328,4.034,2329,5.373,2330,4.034,2331,4.034,2332,3.894,2333,5.373,2334,4.034,2335,4.034,2336,4.034,2337,4.034,2338,5.373,2339,5.373,2340,5.373,2341,5.373,2342,5.373,2343,4.034,2344,4.034,2345,5.373,2346,4.034,2347,4.034,2348,4.034,2349,4.034,2350,4.034,2351,4.034,2352,4.034,2353,5.373,2354,4.034,2355,5.373,2356,4.034,2357,4.034,2358,3.894,2359,4.034,2360,4.034,2361,4.034,2362,4.034,2363,4.034,2364,4.034,2365,4.034,2366,4.034,2367,4.034,2368,4.034,2369,4.034,2370,4.034,2371,4.034,2372,4.034,2373,4.034,2374,4.034,2375,4.034,2376,4.034,2377,4.034,2378,4.034,2379,4.034,2380,4.034,2381,4.034,2382,4.034,2383,4.034]],["title/classes/SelectedRecordsProvider.html",[130,0.045,2384,2.847]],["body/classes/SelectedRecordsProvider.html",[0,0.162,3,0.125,4,0.125,5,0.125,7,1.393,8,2.507,19,0.714,21,0.233,22,0.478,23,1.115,26,1.327,30,0.463,31,0.019,32,0.716,33,0.25,36,0.91,37,0.645,38,1.091,39,1.137,41,1.712,42,2.14,43,0.827,44,1.327,45,1.38,52,3.346,53,2.924,54,1.923,55,2.309,56,2.919,59,0.146,61,1.416,67,0.58,68,0.939,69,1.23,70,0.406,76,3.371,79,2.581,82,1.62,94,1.46,96,0.65,98,1.978,100,1.484,101,0.379,102,1.849,108,0.85,111,1.048,115,1.122,119,2.958,130,0.047,135,2.342,137,0.871,138,1.338,139,1.718,140,3.132,141,1.708,143,0.788,145,1.88,149,2.48,152,0.46,178,0.009,196,2.581,238,0.489,244,1.098,248,2.523,249,2.16,250,2.342,257,2.027,263,1.422,264,0.868,267,1.555,281,1.173,283,2.311,284,1.539,286,2.342,306,1.048,307,1.555,321,0.009,322,0.012,324,2.487,326,2.708,328,2.309,329,3.324,332,3.623,333,4.006,334,1.71,335,4.006,336,4.006,337,1.63,339,4.425,340,4.425,341,4.425,342,3.647,343,2.762,344,2.077,345,3.647,346,3.647,347,2.964,348,2.436,349,2.801,350,4.078,351,2.538,353,2.68,355,6.606,356,3.32,357,3.32,358,4.006,359,3.32,360,3.32,361,3.32,362,3.32,363,3.32,364,3.32,365,1.555,370,1.074,371,1.809,379,3.32,380,3.32,381,2.027,382,2.487,383,3.361,384,2.031,385,2.487,386,2.581,387,1.151,388,2.581,389,1.393,390,2.48,391,2.487,392,2.311,393,3.32,394,2.439,395,3.32,396,3.32,397,1.91,398,1.464,399,2.964,400,1.883,401,3.32,402,3.32,403,1.539,404,3.32,405,1.539,406,2.311,407,2.311,408,3.32,409,1.804,410,3.32,411,4.538,412,1.555,413,2.964,414,1.762,415,2.311,416,1.804,417,1.804,418,1.151,419,1.804,420,1.484,421,3.32,422,3.32,423,1.464,424,3.32,425,3.32,426,3.32,427,1.804,428,3.32,429,3.32,430,1.804,431,3.32,457,0.868,489,1.71,819,2.657,997,1.539,1097,2.958,1481,2.08,1535,2.74,1652,3.875,2384,4.006,2385,5.859,2386,3.647,2387,4.486,2388,4.486,2389,5.215,2390,5.215,2391,5.215,2392,5.907,2393,5.215,2394,3.859,2395,3.859,2396,3.859,2397,3.859,2398,1.91,2399,5.215,2400,3.859,2401,3.859,2402,3.859,2403,3.859,2404,3.859,2405,3.859,2406,3.859,2407,3.859]],["title/interfaces/StructuralEdgeType.html",[0,0.155,349,1.641]],["body/interfaces/StructuralEdgeType.html",[0,0.258,2,0.475,3,0.093,4,0.093,5,0.093,7,1.027,8,1.079,10,1.592,12,1.902,13,2.523,14,1.079,17,1.495,18,3.572,19,1.211,21,0.411,22,0.539,23,0.884,24,2.797,25,1.495,26,0.978,27,1.592,28,3.309,29,0.596,30,0.462,31,0.019,32,0.703,33,0.223,36,0.671,37,0.475,38,1.109,39,1.201,40,1.838,41,1.43,42,0.848,43,0.901,44,0.978,45,1.236,46,0.451,50,0.475,51,0.61,52,1.861,53,1.408,54,1.674,55,2.213,59,0.242,61,1.499,62,2.338,63,2.517,64,2.213,65,2.352,66,1.704,67,1.059,68,0.992,69,0.671,70,0.688,79,2.08,80,1.594,82,2.099,83,2.754,84,2.352,85,1.253,87,1.965,93,1.408,94,1.772,96,0.425,101,0.657,102,1.96,103,1.495,105,1.704,108,0.564,109,0.862,111,1.357,114,2.202,115,0.451,116,0.966,118,1.652,119,2.982,120,3.296,121,1.195,122,0.772,123,1.231,124,2.474,127,2.474,130,0.034,134,0.972,137,0.475,138,0.5,139,1.846,140,1.408,141,1.259,143,1.127,145,1.902,149,1.195,152,0.841,172,1.079,178,0.007,181,2.352,184,1.314,196,2.474,197,1.499,198,2.517,203,1.408,207,0.791,212,1.704,218,2.021,221,1.986,232,0.736,233,2.352,238,0.862,240,2.993,243,1.704,251,1.33,254,1.704,257,2.208,258,1.965,261,0.81,263,1.02,264,0.945,266,1.495,267,0.848,269,2.474,281,1.324,282,1.965,284,1.135,286,0.978,287,1.704,288,2.08,289,1.141,290,1.765,291,1.196,295,1.089,306,1.599,307,0.848,308,1.408,321,0.007,322,0.01,326,2.302,329,1.495,330,0.848,331,0.901,332,1.408,348,1.719,349,2.959,350,1.834,370,0.597,374,1.592,377,1.594,378,0.945,381,1.495,382,1.834,383,3.558,384,2.288,385,1.834,386,3.613,387,0.848,388,1.408,389,1.517,390,1.195,391,1.834,392,1.704,398,2.234,400,1.027,405,1.135,406,1.704,414,1.756,415,1.704,416,1.33,419,1.965,420,1.863,468,2.352,471,1.495,473,3.061,483,1.704,484,2.318,489,0.933,491,1.259,506,2.517,620,1.408,633,1.524,767,2.208,874,3.221,1003,2.709,1138,1.079,1148,2.517,1161,3.558,1162,1.704,1163,2.94,1164,2.185,1165,2.185,1166,1.314,1167,2.993,1168,1.704,1169,3.836,1170,2.709,1171,3.558,1172,3.229,1173,2.517,1174,3.861,1175,3.229,1176,3.861,1177,3.229,1178,2.352,1179,3.229,1180,3.861,1181,1.99,1182,2.185,1183,2.185,1184,1.99,1185,2.797,1186,1.834,1187,2.94,1188,1.704,1189,1.33,1190,2.185,1191,2.185,1192,2.185,1193,2.185,1194,1.834,1195,2.185,1196,2.185,1197,2.185,1198,3.229,1199,2.185,1200,2.185,1201,2.185,1202,2.185,1203,2.185,1204,1.99,1205,2.709,1206,2.94,1207,1.99,1208,2.185,1209,2.185,1210,2.185,1211,3.861,1212,2.185,1213,2.185,1214,2.185,1215,3.839,1216,2.185,1217,2.185,1218,2.185,1219,2.185,1220,2.185,1221,3.229,1222,3.229,1223,3.229,1224,2.185,1225,3.229,1226,2.185,1227,1.408,1228,2.185,1229,2.185,1230,1.834,1231,2.185,1232,3.839,1233,1.834,1234,2.185,1235,1.495,1236,2.185,1237,3.229,1238,2.185,1239,2.185,1240,1.592,1241,2.185,1242,2.185,1243,2.185,1244,2.185,1245,1.765,1246,2.185,1247,2.185,1248,1.135,1249,2.185,1250,2.185,1251,1.99,1252,2.185,1253,2.185,1254,3.229,1255,2.185,1256,2.185,1257,2.185,1258,2.185,1259,2.185,1260,2.185,1261,2.185,1262,2.185,1263,2.185,1264,2.185,1265,1.99,1266,2.185,1267,1.592,1268,2.185,1269,2.185,1270,3.229,1271,2.185,1272,2.185,1273,2.185,1274,2.185,1275,2.185,1276,1.408,1277,1.704,1278,2.185,1279,2.185,1280,2.185,1281,2.185,1282,2.185,1283,2.185,1284,2.185,1285,2.185,1286,2.185,1287,2.185,1288,3.839,1289,2.185,1290,2.185,1291,3.229,1292,2.185,1293,2.185,1294,4.241,1295,2.185,1296,3.061,1297,2.581,1298,4.241,1299,4.241,1300,2.581,1301,2.185,1302,2.185,1303,2.185,1304,4.241,1305,2.982,1306,2.185,1307,1.99,1308,3.839,1309,2.185,1310,3.839,1311,3.229,1312,3.229,1313,3.229,1314,3.229,1315,2.185,1316,2.185,1317,3.839,1318,3.839,1319,2.185,1320,1.965,1321,2.185,1322,2.709,1323,2.185,1324,2.185,1325,2.185,1326,2.185,1327,2.185,1328,1.99,1329,1.495,1330,2.185,1331,1.704,1332,2.185,1333,2.185]],["title/interfaces/TimelineAggregation.html",[0,0.155,2408,2.074]],["body/interfaces/TimelineAggregation.html",[0,0.217,2,0.417,3,0.081,4,0.081,5,0.081,12,1.136,19,0.956,21,0.151,22,0.349,23,0.881,29,0.7,30,0.41,31,0.019,32,0.771,33,0.26,34,2.262,35,2.744,36,0.588,37,0.417,45,1.164,46,0.395,47,1.599,48,2.045,49,0.588,50,0.636,51,0.535,57,1.471,59,0.231,61,0.678,64,1.105,67,0.694,69,0.588,70,0.585,96,0.499,97,1.311,98,1.445,99,2.315,100,0.71,101,0.634,107,1.581,108,0.977,109,0.949,115,0.819,116,0.867,123,1.244,128,2.559,129,1.599,130,0.03,134,1.005,137,0.417,138,1.073,143,1.285,144,1.599,148,1.616,152,0.868,155,1.397,156,1.397,157,1.397,174,1.048,176,1.105,178,0.014,184,1.191,187,1.397,188,1.397,191,1.397,197,1.254,207,0.694,218,1.249,219,1.397,220,3.083,221,1.314,232,0.798,238,0.316,252,1.599,263,0.51,264,0.856,272,0.995,273,0.818,281,1.162,289,0.678,291,0.71,295,0.647,303,2.585,316,1.404,321,0.006,322,0.009,326,1.668,328,1.105,330,1.542,331,0.535,334,1.249,337,1.191,365,0.744,369,0.947,370,0.541,371,0.617,376,2.977,377,1.445,378,0.856,384,1.877,389,0.901,390,1.94,412,1.136,414,0.744,416,1.167,418,0.744,419,1.167,420,1.314,423,1.961,440,0.617,457,0.561,471,1.311,472,1.034,473,1.781,487,1.66,489,0.818,510,2.977,528,2.563,566,0.694,570,2.111,575,0.987,576,0.617,577,0.617,579,0.901,581,0.901,582,0.78,583,1.31,588,0.78,594,0.647,596,1.235,609,1.789,610,0.417,631,2.446,633,1.509,657,1.695,659,0.901,684,2.091,689,0.947,717,0.995,720,0.947,736,1.397,737,1.105,740,1.519,741,1.105,743,1.048,747,1.445,748,0.947,753,1.375,768,1.686,769,1.397,777,0.901,780,2.417,786,2.22,791,1.311,817,1.375,819,2.338,822,1.781,824,1.105,825,1.885,830,0.995,862,1.235,875,1.494,888,1.034,900,1.94,908,1.105,917,1.75,969,1.167,985,1.514,986,1.519,997,0.995,1008,2.716,1058,1.494,1096,1.249,1111,1.599,1114,2.702,1138,2.446,1143,1.339,1146,0.818,1166,0.78,1178,1.397,1185,1.397,1336,1.311,1337,1.311,1345,1.397,1355,1.048,1361,1.397,1366,0.818,1384,0.947,1410,1.397,1473,0.947,1476,1.589,1477,0.901,1479,1.752,1480,1.668,1485,0.901,1493,1.105,1540,0.818,1652,2.427,1654,2.585,1655,1.781,1656,1.048,1668,1.167,1671,1.167,1672,2.572,1673,1.167,1674,1.167,1675,1.167,1676,1.167,1677,1.167,1678,1.167,1695,1.311,1698,3.128,1712,1.494,1716,1.397,1755,1.494,1760,1.311,1913,2.427,1914,2.001,1917,1.608,1961,1.885,1978,1.235,1979,2.287,1980,1.167,1981,1.235,1990,1.494,1997,1.235,2000,1.494,2035,1.494,2121,1.494,2122,1.397,2130,1.397,2131,3.575,2132,1.311,2133,1.311,2169,1.311,2279,2.001,2305,2.455,2318,1.608,2332,1.608,2358,2.977,2398,1.235,2408,3.609,2409,1.494,2410,3.116,2411,3.116,2412,3.284,2413,4.401,2414,3.616,2415,1.746,2416,5.108,2417,2.664,2418,1.746,2419,2.417,2420,2.287,2421,2.854,2422,3.116,2423,3.616,2424,1.397,2425,2.664,2426,1.746,2427,1.746,2428,3.284,2429,2.893,2430,1.746,2431,1.746,2432,2.455,2433,2.455,2434,3.416,2435,1.397,2436,1.397,2437,1.397,2438,1.397,2439,5.196,2440,1.746,2441,2.585,2442,1.746,2443,2.664,2444,1.746,2445,1.746,2446,1.397,2447,1.397,2448,1.397,2449,1.397,2450,1.397,2451,2.132,2452,1.397,2453,1.397,2454,1.746,2455,3.616,2456,2.132,2457,1.746,2458,1.746,2459,1.746,2460,1.746,2461,1.746,2462,2.664,2463,1.746,2464,1.746,2465,1.746,2466,1.397,2467,1.746,2468,1.746,2469,1.397,2470,2.664,2471,2.664,2472,1.746,2473,3.116,2474,1.746,2475,3.616,2476,1.746,2477,1.397,2478,1.746,2479,2.664,2480,1.397,2481,1.746,2482,1.746,2483,2.664,2484,1.746,2485,1.746,2486,1.746,2487,1.746,2488,1.746,2489,1.746,2490,1.746,2491,1.746,2492,1.746,2493,1.746,2494,1.746,2495,1.746,2496,1.746,2497,1.746,2498,2.664,2499,1.746,2500,1.746,2501,1.746,2502,1.746,2503,1.746,2504,1.746,2505,1.746,2506,1.746,2507,1.746,2508,1.746,2509,1.397,2510,2.664,2511,1.746,2512,3.231,2513,2.664,2514,3.894,2515,1.746,2516,2.664,2517,4.854,2518,1.746,2519,1.397,2520,1.746,2521,1.746,2522,2.664,2523,1.746,2524,3.616,2525,1.746,2526,2.664,2527,2.664,2528,1.746,2529,2.664,2530,1.746,2531,3.231,2532,3.231,2533,2.664,2534,1.397,2535,1.746,2536,1.746,2537,1.746,2538,1.746,2539,1.746,2540,1.746,2541,1.746,2542,1.746,2543,2.664,2544,1.746,2545,1.746,2546,2.664,2547,2.664,2548,1.746,2549,2.664,2550,2.664,2551,1.746,2552,1.746,2553,1.746,2554,1.746,2555,1.746,2556,1.746,2557,2.664,2558,1.746,2559,1.746,2560,4.104,2561,2.585,2562,3.616,2563,1.746,2564,2.664,2565,4.104,2566,1.746,2567,1.746,2568,1.746,2569,1.746,2570,1.746,2571,2.664,2572,1.746,2573,1.746,2574,1.746,2575,1.746,2576,2.664,2577,1.746,2578,1.746,2579,1.746,2580,1.746,2581,1.746,2582,1.746,2583,1.746,2584,1.746,2585,1.746,2586,1.746,2587,1.746,2588,1.746,2589,1.746,2590,1.397,2591,1.746,2592,1.746,2593,3.231,2594,1.746,2595,1.746,2596,1.746,2597,1.746,2598,1.746,2599,1.746,2600,1.746,2601,1.746,2602,1.746,2603,2.664,2604,1.746,2605,1.746,2606,1.746,2607,1.746,2608,1.746,2609,1.746,2610,1.397,2611,2.664,2612,1.746,2613,1.746,2614,1.746,2615,1.746,2616,1.746,2617,1.746,2618,1.746,2619,1.746,2620,1.746,2621,2.664,2622,1.746,2623,1.746,2624,1.746,2625,1.746,2626,1.746,2627,1.746,2628,1.746,2629,1.746,2630,1.746,2631,1.746,2632,1.746,2633,1.746,2634,1.746,2635,1.746,2636,1.746,2637,1.746,2638,1.746,2639,1.746,2640,3.231,2641,1.746,2642,1.746,2643,1.746,2644,3.116,2645,1.746,2646,1.746,2647,1.746,2648,1.746,2649,1.746,2650,1.746,2651,1.746,2652,1.746,2653,1.746,2654,1.746,2655,1.746,2656,1.746,2657,1.746,2658,1.746,2659,1.746,2660,1.397,2661,1.746,2662,1.746,2663,1.397,2664,1.746,2665,3.894,2666,1.746,2667,1.746,2668,1.397,2669,1.746,2670,1.746,2671,1.746,2672,1.746,2673,1.746,2674,1.746,2675,1.746,2676,1.608,2677,1.746,2678,1.746,2679,1.746,2680,1.746,2681,1.746,2682,1.746,2683,1.746,2684,1.746,2685,1.746,2686,1.746,2687,1.746,2688,1.746,2689,2.664,2690,4.401,2691,3.616,2692,2.664,2693,2.664,2694,2.664,2695,2.664,2696,1.746,2697,1.746,2698,1.746,2699,1.746,2700,1.746,2701,1.746,2702,2.664,2703,1.746,2704,1.746,2705,1.746,2706,1.746,2707,2.664,2708,1.746,2709,2.664,2710,1.746]],["title/interfaces/TimelineCombinedAggregations.html",[0,0.155,2422,2.074]],["body/interfaces/TimelineCombinedAggregations.html",[0,0.217,2,0.419,3,0.082,4,0.082,5,0.082,12,1.14,19,0.959,21,0.152,22,0.35,23,0.574,29,0.618,30,0.37,31,0.019,32,0.757,33,0.26,34,2.252,35,2.749,36,0.591,37,0.419,45,1.166,46,0.397,47,1.605,48,2.051,49,0.591,50,0.639,51,0.537,57,1.475,59,0.232,61,0.681,64,1.11,67,0.696,69,0.591,70,0.586,96,0.394,97,1.318,98,1.45,99,2.319,100,0.714,101,0.635,107,1.584,108,0.977,109,0.949,115,0.969,116,0.918,123,1.245,128,3.026,129,1.605,130,0.03,134,1.008,137,0.419,138,1.075,143,1.287,144,1.605,148,1.62,152,0.868,155,1.404,156,1.404,157,1.404,174,1.053,176,1.11,178,0.014,184,1.195,187,1.404,188,1.404,191,1.404,197,1.258,207,0.696,218,1.253,219,1.404,220,3.089,221,1.318,232,0.799,238,0.318,252,1.605,263,0.512,264,0.86,272,1,273,0.822,281,1.165,289,0.681,291,0.714,295,0.65,303,2.593,316,1.407,321,0.006,322,0.009,326,1.673,328,1.11,330,1.546,331,0.537,334,1.253,337,1.195,365,0.748,369,0.951,370,0.543,371,0.62,376,2.986,377,1.45,378,0.86,384,1.88,389,0.905,390,1.946,412,1.14,414,0.748,416,1.173,418,0.748,419,1.173,420,1.318,423,1.966,440,0.62,457,0.564,471,1.318,472,1.038,473,1.788,487,1.664,489,0.822,510,2.986,528,2.567,566,0.696,570,2.116,575,0.991,576,0.62,577,0.62,579,0.905,581,0.905,582,0.784,583,1.315,588,0.784,594,0.65,596,1.241,609,1.79,610,0.419,631,2.449,633,1.511,657,1.699,659,0.905,684,2.094,689,0.951,717,1,720,0.951,736,1.404,737,1.11,740,1.525,741,1.11,743,1.053,747,1.45,748,0.951,753,1.38,768,1.693,769,1.404,777,0.905,780,2.423,786,2.225,791,1.318,817,1.38,819,2.343,822,1.788,824,1.11,825,1.893,830,1,862,1.241,875,1.502,888,1.038,900,1.946,908,1.11,917,1.753,969,1.173,985,1.519,986,1.525,997,1,1058,1.502,1096,1.253,1111,1.605,1114,2.707,1138,2.449,1143,1.343,1146,0.822,1166,0.784,1178,1.404,1185,1.404,1336,1.318,1337,1.318,1345,1.404,1355,1.053,1361,1.404,1366,0.822,1384,0.951,1410,1.404,1473,0.951,1476,1.594,1477,0.905,1479,1.757,1480,1.673,1485,0.905,1493,1.11,1540,0.822,1652,2.435,1654,2.593,1655,1.788,1656,1.053,1668,1.173,1671,1.173,1672,2.709,1673,1.173,1674,1.173,1675,1.173,1676,1.173,1677,1.173,1678,1.173,1695,1.318,1698,3.132,1712,1.502,1716,1.404,1755,1.502,1760,1.318,1913,2.435,1914,2.009,1917,1.616,1961,1.893,1978,1.241,1979,2.294,1980,1.173,1981,1.241,1990,1.502,1997,1.241,2000,1.502,2035,1.502,2121,1.502,2122,1.404,2130,1.404,2131,3.576,2132,1.318,2133,1.318,2169,1.318,2279,2.009,2305,2.464,2318,1.616,2332,1.616,2358,2.986,2398,1.241,2408,3.888,2409,1.502,2410,2.14,2411,2.14,2412,2.593,2413,4.408,2414,3.625,2415,1.754,2416,5.111,2417,2.674,2418,1.754,2419,2.423,2420,2.294,2421,2.859,2422,3.29,2423,4.276,2424,1.404,2425,2.674,2426,1.754,2427,1.754,2428,3.29,2429,2.9,2430,1.754,2431,1.754,2432,2.464,2433,2.464,2434,3.422,2435,1.404,2436,1.404,2437,1.404,2438,1.404,2439,5.199,2440,1.754,2441,2.593,2442,1.754,2443,2.674,2444,1.754,2445,1.754,2446,1.404,2447,1.404,2448,1.404,2449,1.404,2450,1.404,2451,2.14,2452,1.404,2453,1.404,2454,1.754,2455,3.625,2456,2.14,2457,1.754,2458,1.754,2459,1.754,2460,1.754,2461,1.754,2462,2.674,2463,1.754,2464,1.754,2465,1.754,2466,1.404,2467,1.754,2468,1.754,2469,1.404,2470,2.674,2471,2.674,2472,1.754,2473,3.122,2474,1.754,2475,3.625,2476,1.754,2477,1.404,2478,1.754,2479,2.674,2480,1.404,2481,1.754,2482,1.754,2483,2.674,2484,1.754,2485,1.754,2486,1.754,2487,1.754,2488,1.754,2489,1.754,2490,1.754,2491,1.754,2492,1.754,2493,1.754,2494,1.754,2495,1.754,2496,1.754,2497,1.754,2498,2.674,2499,1.754,2500,1.754,2501,1.754,2502,1.754,2503,1.754,2504,1.754,2505,1.754,2506,1.754,2507,1.754,2508,1.754,2509,1.404,2510,2.674,2511,1.754,2512,3.241,2513,2.674,2514,3.902,2515,1.754,2516,2.674,2517,4.858,2518,1.754,2519,1.404,2520,1.754,2521,1.754,2522,2.674,2523,1.754,2524,3.625,2525,1.754,2526,2.674,2527,2.674,2528,1.754,2529,2.674,2530,1.754,2531,3.241,2532,3.241,2533,2.674,2534,1.404,2535,1.754,2536,1.754,2537,1.754,2538,1.754,2539,1.754,2540,1.754,2541,1.754,2542,1.754,2543,2.674,2544,1.754,2545,1.754,2546,2.674,2547,2.674,2548,1.754,2549,2.674,2550,2.674,2551,1.754,2552,1.754,2553,1.754,2554,1.754,2555,1.754,2556,1.754,2557,2.674,2558,1.754,2559,1.754,2560,4.112,2561,2.593,2562,3.625,2563,1.754,2564,2.674,2565,4.112,2566,1.754,2567,1.754,2568,1.754,2569,1.754,2570,1.754,2571,2.674,2572,1.754,2573,1.754,2574,1.754,2575,1.754,2576,2.674,2577,1.754,2578,1.754,2579,1.754,2580,1.754,2581,1.754,2582,1.754,2583,1.754,2584,1.754,2585,1.754,2586,1.754,2587,1.754,2588,1.754,2589,1.754,2590,1.404,2591,1.754,2592,1.754,2593,3.241,2594,1.754,2595,1.754,2596,1.754,2597,1.754,2598,1.754,2599,1.754,2600,1.754,2601,1.754,2602,1.754,2603,2.674,2604,1.754,2605,1.754,2606,1.754,2607,1.754,2608,1.754,2609,1.754,2610,1.404,2611,2.674,2612,1.754,2613,1.754,2614,1.754,2615,1.754,2616,1.754,2617,1.754,2618,1.754,2619,1.754,2620,1.754,2621,2.674,2622,1.754,2623,1.754,2624,1.754,2625,1.754,2626,1.754,2627,1.754,2628,1.754,2629,1.754,2630,1.754,2631,1.754,2632,1.754,2633,1.754,2634,1.754,2635,1.754,2636,1.754,2637,1.754,2638,1.754,2639,1.754,2640,3.241,2641,1.754,2642,1.754,2643,1.754,2644,3.122,2645,1.754,2646,1.754,2647,1.754,2648,1.754,2649,1.754,2650,1.754,2651,1.754,2652,1.754,2653,1.754,2654,1.754,2655,1.754,2656,1.754,2657,1.754,2658,1.754,2659,1.754,2660,1.404,2661,1.754,2662,1.754,2663,1.404,2664,1.754,2665,3.902,2666,1.754,2667,1.754,2668,1.404,2669,1.754,2670,1.754,2671,1.754,2672,1.754,2673,1.754,2674,1.754,2675,1.754,2676,1.616,2677,1.754,2678,1.754,2679,1.754,2680,1.754,2681,1.754,2682,1.754,2683,1.754,2684,1.754,2685,1.754,2686,1.754,2687,1.754,2688,1.754,2689,2.674,2690,4.408,2691,3.625,2692,2.674,2693,2.674,2694,2.674,2695,2.674,2696,1.754,2697,1.754,2698,1.754,2699,1.754,2700,1.754,2701,1.754,2702,2.674,2703,1.754,2704,1.754,2705,1.754,2706,1.754,2707,2.674,2708,1.754,2709,2.674,2710,1.754]],["title/interfaces/TimelineDate.html",[0,0.155,2420,1.835]],["body/interfaces/TimelineDate.html",[0,0.193,2,0.416,3,0.081,4,0.081,5,0.081,21,0.151,22,0.349,29,0.7,30,0.279,31,0.019,32,0.585,33,0.211,36,0.588,37,0.416,59,0.196,67,0.945,68,0.734,70,0.713,85,0.743,96,0.212,101,0.508,108,0.866,109,0.879,111,1.708,116,1.053,121,1.047,122,0.677,123,1.051,130,0.03,134,0.485,137,0.416,139,1.901,143,0.942,144,2.169,147,1.395,152,0.899,163,1.103,172,0.945,174,1.047,178,0.006,183,1.047,184,1.19,197,1.033,205,1.492,207,0.694,221,1.083,224,1.31,232,0.828,238,0.655,252,1.047,262,1.309,264,1.038,272,1.841,284,0.994,297,1.374,316,1.033,321,0.009,322,0.009,328,1.103,344,1.135,351,0.817,365,0.743,368,1.395,370,0.541,377,1.443,378,0.56,384,1.377,388,1.234,389,0.9,405,0.994,439,1.743,440,0.616,457,0.56,472,0.677,487,1.819,489,1.694,509,2.661,525,2.13,566,0.571,569,0.994,570,0.945,571,1.841,575,0.986,576,0.616,577,0.616,579,1.374,581,1.374,582,1.443,583,0.857,588,0.779,594,0.646,599,1.047,609,1.779,610,0.416,619,0.9,620,1.234,628,0.857,631,2.573,633,1.653,647,0.945,648,1.685,666,0.945,684,0.779,688,2.13,689,0.945,693,2.13,694,2.13,696,1.395,697,1.395,698,1.395,699,1.395,700,1.395,701,2.13,703,3.951,704,1.395,705,3.521,706,2.13,709,2.891,717,0.994,720,0.945,726,2.602,728,1.395,737,1.103,740,1.518,741,1.103,743,1.047,747,1.443,748,0.945,753,1.666,758,1.492,760,2.891,761,0.994,766,3.114,767,1.31,768,1.685,777,2.009,786,2.623,790,1.606,809,1.492,813,2.891,817,1.666,818,1.779,822,1.165,825,1.884,827,2.224,828,1.395,829,1.395,830,2.219,831,1.606,847,3.114,849,1.395,850,2.583,851,2.13,852,1.395,853,1.395,855,1.395,856,1.395,857,1.395,861,1.395,862,1.234,863,2.891,865,1.606,866,1.395,867,1.606,868,1.395,869,1.395,870,1.395,871,1.395,872,1.395,880,1.606,888,1.253,889,3.114,892,1.606,896,1.606,897,1.492,900,2.336,904,2.13,907,1.395,908,1.103,909,1.999,910,1.395,911,1.395,912,2.13,913,2.13,914,2.13,915,1.395,916,1.395,917,1.923,918,1.395,919,1.395,942,1.395,950,1.31,969,1.165,972,2.13,973,2.661,985,2,995,0.588,1060,3.613,1096,1.248,1097,1.779,1098,1.588,1111,1.047,1114,2.043,1121,2.425,1125,1.999,1131,1.234,1143,0.646,1146,0.817,1188,1.492,1227,1.234,1240,1.395,1267,1.395,1276,1.234,1277,1.492,1329,1.31,1331,2.279,1338,1.492,1352,1.395,1355,1.598,1382,1.492,1429,2.661,1431,1.047,1432,1.492,1433,2.279,1473,0.945,1481,0.994,1485,0.9,1506,0.994,1510,0.9,1584,0.994,1588,1.165,1670,1.606,1672,1.841,1698,3.274,1705,1.606,1748,1.606,1749,1.395,1758,4.425,1911,1.743,1961,1.884,1978,1.234,1979,1.884,1980,1.165,1981,1.234,1984,2.975,1986,2.661,1988,3.329,1989,2.453,1993,2.975,1997,1.234,2001,1.606,2002,1.606,2003,1.606,2004,3.78,2007,1.606,2012,1.606,2013,1.606,2014,1.606,2015,2.453,2016,1.606,2017,1.606,2018,3.329,2019,1.606,2021,1.606,2022,1.606,2023,1.606,2024,2.453,2025,1.606,2026,1.606,2027,1.606,2028,1.606,2029,1.606,2030,1.606,2031,2.453,2032,1.606,2033,1.606,2034,3.586,2038,1.606,2066,1.606,2083,1.743,2089,1.606,2090,2.453,2091,1.606,2094,1.606,2095,1.606,2096,1.606,2098,1.606,2099,1.606,2100,3.329,2101,1.606,2102,1.606,2103,1.606,2104,1.606,2105,1.606,2106,1.606,2107,1.606,2108,1.606,2110,1.606,2112,1.606,2113,1.606,2114,1.606,2115,2.975,2116,2.453,2117,1.606,2128,2.975,2131,3.244,2132,1.31,2133,1.31,2137,2.661,2138,1.743,2139,3.228,2140,1.743,2141,1.743,2144,1.743,2156,1.743,2158,1.743,2159,2.661,2161,1.743,2164,2.661,2165,1.743,2166,3.891,2169,1.999,2175,1.743,2279,1.999,2386,1.743,2398,1.234,2410,1.395,2411,1.395,2412,2.13,2419,2.602,2420,2.285,2421,3.014,2424,1.395,2434,1.395,2435,1.395,2436,1.395,2437,1.395,2438,1.395,2441,1.395,2446,1.395,2447,1.395,2448,1.395,2449,1.395,2450,1.395,2451,1.395,2452,1.395,2453,1.395,2456,1.395,2466,2.891,2469,1.395,2473,1.395,2477,1.395,2480,1.395,2509,2.13,2519,1.395,2534,1.395,2561,1.395,2590,1.395,2610,1.395,2644,1.395,2660,1.395,2663,1.395,2668,2.583,2711,1.743,2712,2.923,2713,1.743,2714,2.661,2715,3.546,2716,1.915,2717,1.915,2718,1.915,2719,1.915,2720,1.915,2721,1.915,2722,1.915,2723,2.923,2724,2.923,2725,2.923,2726,2.923,2727,1.915,2728,1.915,2729,1.915,2730,1.915,2731,1.915,2732,3.546,2733,1.915,2734,1.915,2735,5.137,2736,3.968,2737,1.915,2738,1.915,2739,1.915,2740,1.915,2741,1.915,2742,1.915,2743,1.915,2744,1.915,2745,1.915,2746,1.915,2747,4.274,2748,1.915,2749,2.923,2750,2.923,2751,2.923,2752,1.915,2753,1.915,2754,2.923,2755,1.915,2756,1.915,2757,1.915,2758,1.915,2759,2.923,2760,4.686,2761,1.915,2762,2.923,2763,1.915,2764,2.923,2765,1.915,2766,1.915,2767,1.915,2768,2.923,2769,2.923,2770,2.923,2771,3.546,2772,1.915,2773,1.915,2774,1.915,2775,1.915,2776,1.915,2777,5.052,2778,2.923,2779,2.923,2780,1.915,2781,1.915,2782,1.915,2783,1.915,2784,1.915,2785,1.915,2786,2.923,2787,1.915,2788,1.743,2789,1.915,2790,2.923,2791,1.915,2792,3.546,2793,1.915,2794,1.915,2795,1.915,2796,1.915,2797,1.915,2798,1.915,2799,2.923,2800,1.915,2801,1.915,2802,3.968,2803,1.915,2804,1.915,2805,2.923,2806,2.923,2807,2.923,2808,1.915,2809,1.915,2810,1.915,2811,1.915,2812,2.923,2813,1.915,2814,1.915,2815,1.915,2816,1.915,2817,1.915,2818,1.915,2819,1.915,2820,1.915,2821,1.915,2822,1.915,2823,1.915,2824,2.923,2825,1.915,2826,1.915,2827,1.915,2828,1.915,2829,1.915,2830,1.915,2831,1.915,2832,1.915,2833,2.923,2834,1.915,2835,1.915,2836,1.915,2837,1.915,2838,1.915,2839,1.915,2840,1.915,2841,1.915,2842,1.915,2843,1.915,2844,1.915,2845,1.915,2846,3.546,2847,1.915,2848,1.915,2849,1.915,2850,2.923,2851,1.915,2852,1.915,2853,1.915,2854,1.915,2855,1.915,2856,1.915,2857,1.915,2858,1.915,2859,1.915,2860,1.915,2861,2.923,2862,1.915,2863,1.915,2864,1.915,2865,1.915,2866,1.915,2867,1.915,2868,1.915,2869,1.915,2870,1.915,2871,1.915,2872,1.915,2873,1.915,2874,1.915,2875,1.915,2876,1.915,2877,1.915,2878,1.915,2879,1.915,2880,2.923,2881,2.923,2882,2.923,2883,2.923,2884,1.915,2885,1.915,2886,3.546,2887,1.915,2888,1.915,2889,1.915,2890,1.915,2891,1.915,2892,1.915,2893,1.915,2894,1.915,2895,1.915,2896,1.915,2897,1.915,2898,1.915,2899,1.915,2900,1.915,2901,1.915,2902,1.915,2903,1.915,2904,1.915,2905,1.915,2906,1.915,2907,1.915,2908,1.915,2909,1.915,2910,3.546,2911,1.915,2912,1.915,2913,1.915,2914,1.915,2915,1.915,2916,2.923,2917,1.915,2918,1.915,2919,1.915,2920,1.915,2921,1.915,2922,1.915,2923,1.915,2924,1.915,2925,1.915,2926,1.915,2927,1.915,2928,1.915,2929,1.915,2930,3.546,2931,1.915,2932,1.915,2933,1.915,2934,1.915,2935,1.915,2936,1.915,2937,1.915,2938,2.923,2939,1.915,2940,1.915,2941,1.915,2942,1.915,2943,1.915,2944,1.915,2945,1.915,2946,1.915,2947,1.915,2948,2.923,2949,1.915,2950,1.915,2951,2.923,2952,1.915,2953,1.915,2954,1.915,2955,1.915,2956,1.915,2957,1.915,2958,1.915,2959,1.915,2960,1.915,2961,1.915,2962,2.923,2963,1.915,2964,1.915,2965,2.923,2966,1.915,2967,1.915,2968,1.915,2969,1.915,2970,1.915,2971,2.923,2972,1.915,2973,1.915,2974,3.546,2975,1.915,2976,3.546,2977,1.915,2978,2.923,2979,2.923,2980,1.915,2981,1.743,2982,1.915,2983,1.915,2984,1.743,2985,1.915,2986,1.915,2987,1.915,2988,1.915,2989,1.915,2990,1.915,2991,2.923,2992,4.686,2993,1.915,2994,1.915,2995,1.743,2996,1.743,2997,4.505,2998,3.546,2999,4.686,3000,2.923,3001,1.915,3002,1.915,3003,2.923,3004,1.915,3005,1.915,3006,1.915,3007,1.915,3008,1.915,3009,2.923,3010,1.915]],["title/interfaces/TimelineEvent.html",[0,0.155,2421,1.733]],["body/interfaces/TimelineEvent.html",[0,0.192,2,0.41,3,0.08,4,0.08,5,0.08,21,0.149,22,0.345,23,0.94,29,0.696,30,0.396,31,0.019,32,0.675,33,0.209,36,0.579,37,0.41,59,0.194,67,0.94,68,0.349,70,0.71,85,0.733,96,0.209,101,0.504,108,0.862,109,0.877,111,1.7,116,1.057,121,1.031,122,0.667,123,1.046,130,0.03,134,0.478,137,0.41,139,1.896,143,0.934,144,2.153,147,1.375,152,0.898,163,1.087,172,0.932,174,1.031,178,0.006,183,1.031,184,1.176,197,1.022,205,1.471,207,0.689,221,1.573,224,1.291,232,0.825,238,0.65,252,1.031,262,1.294,264,1.028,272,1.824,284,0.98,297,1.359,316,1.022,321,0.009,322,0.009,328,1.087,344,1.122,351,0.805,365,0.733,368,1.375,370,0.535,377,1.427,378,0.552,384,1.867,388,1.216,389,0.887,405,0.98,439,1.718,440,0.607,457,0.552,472,1.392,487,1.954,489,1.681,509,2.632,525,2.106,566,0.565,569,0.98,570,1.945,571,1.824,575,0.975,576,0.607,577,0.607,579,1.359,581,1.359,582,1.43,583,0.845,588,0.768,594,0.636,599,1.031,609,1.775,610,0.41,619,0.887,620,1.216,628,0.845,631,2.564,633,1.647,647,0.932,648,1.666,666,0.932,684,0.768,688,2.106,689,0.932,693,2.106,694,2.106,696,1.375,697,1.375,698,1.375,699,1.375,700,1.375,701,2.106,703,3.94,704,1.375,705,3.504,706,2.106,709,2.869,717,0.98,720,0.932,726,2.585,728,1.375,737,1.087,740,1.501,741,1.087,743,1.031,747,1.427,748,0.932,753,1.651,758,1.471,760,2.869,761,0.98,766,3.099,767,1.291,768,1.666,777,1.996,786,2.613,790,1.583,809,1.471,813,2.869,817,1.651,818,1.76,822,1.149,825,1.863,827,2.212,828,1.375,829,1.375,830,2.205,831,1.583,847,3.093,849,1.375,850,2.56,851,2.106,852,1.375,853,1.375,855,1.375,856,1.375,857,1.375,861,1.375,862,1.216,863,2.869,865,1.583,866,1.375,867,1.583,868,1.375,869,1.375,870,1.375,871,1.375,872,1.375,880,1.583,888,1.242,889,3.093,892,1.583,896,1.583,897,1.471,900,2.321,904,2.106,907,1.375,908,1.087,909,1.977,910,1.375,911,1.375,912,2.106,913,2.106,914,2.106,915,1.375,916,1.375,917,1.914,918,1.375,919,1.375,942,1.375,950,1.291,969,1.149,972,2.106,973,2.632,985,1.99,995,0.579,1008,1.977,1060,3.586,1096,1.234,1097,1.76,1098,1.573,1111,1.031,1114,2.025,1121,2.403,1125,1.977,1131,1.216,1143,0.636,1146,0.805,1188,1.471,1227,1.216,1240,1.375,1267,1.375,1276,1.216,1277,1.471,1329,1.291,1331,2.253,1338,1.471,1352,1.375,1355,1.58,1382,1.471,1429,2.632,1431,1.031,1432,1.471,1433,2.253,1473,0.932,1481,0.98,1485,0.887,1506,0.98,1510,0.887,1584,0.98,1588,1.149,1670,1.583,1672,1.824,1698,3.265,1705,1.583,1748,1.583,1749,1.375,1758,4.411,1911,1.718,1961,1.863,1978,1.216,1979,1.863,1980,1.149,1981,1.216,1984,2.948,1986,2.632,1988,3.304,1989,2.425,1993,2.948,1997,1.216,2001,1.583,2002,1.583,2003,1.583,2004,3.758,2007,1.583,2012,1.583,2013,1.583,2014,1.583,2015,2.425,2016,1.583,2017,1.583,2018,3.304,2019,1.583,2021,1.583,2022,1.583,2023,1.583,2024,2.425,2025,1.583,2026,1.583,2027,1.583,2028,1.583,2029,1.583,2030,1.583,2031,2.425,2032,1.583,2033,1.583,2034,3.563,2038,1.583,2066,1.583,2083,1.718,2089,1.583,2090,2.425,2091,1.583,2094,1.583,2095,1.583,2096,1.583,2098,1.583,2099,1.583,2100,3.304,2101,1.583,2102,1.583,2103,1.583,2104,1.583,2105,1.583,2106,1.583,2107,1.583,2108,1.583,2110,1.583,2112,1.583,2113,1.583,2114,1.583,2115,2.948,2116,2.425,2117,1.583,2128,2.948,2131,3.235,2132,1.291,2133,1.291,2137,2.632,2138,1.718,2139,3.199,2140,1.718,2141,1.718,2144,1.718,2156,1.718,2158,1.718,2159,2.632,2161,1.718,2164,2.632,2165,1.718,2166,3.866,2169,1.977,2175,1.718,2279,1.977,2386,1.718,2398,1.216,2410,1.375,2411,1.375,2412,2.106,2419,2.585,2420,1.863,2421,3.063,2424,1.375,2434,1.375,2435,1.375,2436,1.375,2437,1.375,2438,1.375,2441,1.375,2446,1.375,2447,1.375,2448,1.375,2449,1.375,2450,1.375,2451,1.375,2452,1.375,2453,1.375,2456,1.375,2466,2.869,2469,1.375,2473,1.375,2477,1.375,2480,1.375,2509,2.106,2519,1.375,2534,1.375,2561,1.375,2590,1.375,2610,1.375,2644,1.375,2660,1.375,2663,1.375,2668,2.56,2711,1.718,2712,2.891,2713,1.718,2714,2.632,2715,3.514,2716,3.938,2717,1.887,2718,1.887,2719,1.887,2720,1.887,2721,1.887,2722,1.887,2723,2.891,2724,2.891,2725,2.891,2726,2.891,2727,1.887,2728,1.887,2729,1.887,2730,1.887,2731,1.887,2732,3.514,2733,1.887,2734,1.887,2735,5.119,2736,3.938,2737,1.887,2738,1.887,2739,1.887,2740,1.887,2741,1.887,2742,1.887,2743,1.887,2744,1.887,2745,1.887,2746,1.887,2747,4.246,2748,1.887,2749,2.891,2750,2.891,2751,2.891,2752,1.887,2753,1.887,2754,2.891,2755,1.887,2756,1.887,2757,1.887,2758,1.887,2759,2.891,2760,4.662,2761,1.887,2762,2.891,2763,1.887,2764,2.891,2765,1.887,2766,1.887,2767,1.887,2768,2.891,2769,2.891,2770,2.891,2771,3.514,2772,1.887,2773,1.887,2774,1.887,2775,1.887,2776,1.887,2777,5.033,2778,2.891,2779,2.891,2780,1.887,2781,1.887,2782,1.887,2783,1.887,2784,1.887,2785,1.887,2786,2.891,2787,1.887,2788,1.718,2789,1.887,2790,2.891,2791,1.887,2792,3.514,2793,1.887,2794,1.887,2795,1.887,2796,1.887,2797,1.887,2798,1.887,2799,2.891,2800,1.887,2801,1.887,2802,3.938,2803,1.887,2804,1.887,2805,2.891,2806,2.891,2807,2.891,2808,1.887,2809,1.887,2810,1.887,2811,1.887,2812,2.891,2813,1.887,2814,1.887,2815,1.887,2816,1.887,2817,1.887,2818,1.887,2819,1.887,2820,1.887,2821,1.887,2822,1.887,2823,1.887,2824,2.891,2825,1.887,2826,1.887,2827,1.887,2828,1.887,2829,1.887,2830,1.887,2831,1.887,2832,1.887,2833,2.891,2834,1.887,2835,1.887,2836,1.887,2837,1.887,2838,1.887,2839,1.887,2840,1.887,2841,1.887,2842,1.887,2843,1.887,2844,1.887,2845,1.887,2846,3.514,2847,1.887,2848,1.887,2849,1.887,2850,2.891,2851,1.887,2852,1.887,2853,1.887,2854,1.887,2855,1.887,2856,1.887,2857,1.887,2858,1.887,2859,1.887,2860,1.887,2861,2.891,2862,1.887,2863,1.887,2864,1.887,2865,1.887,2866,1.887,2867,1.887,2868,1.887,2869,1.887,2870,1.887,2871,1.887,2872,1.887,2873,1.887,2874,1.887,2875,1.887,2876,1.887,2877,1.887,2878,1.887,2879,1.887,2880,2.891,2881,2.891,2882,2.891,2883,2.891,2884,1.887,2885,1.887,2886,3.514,2887,1.887,2888,1.887,2889,1.887,2890,1.887,2891,1.887,2892,1.887,2893,1.887,2894,1.887,2895,1.887,2896,1.887,2897,1.887,2898,1.887,2899,1.887,2900,1.887,2901,1.887,2902,1.887,2903,1.887,2904,1.887,2905,1.887,2906,1.887,2907,1.887,2908,1.887,2909,1.887,2910,3.514,2911,1.887,2912,1.887,2913,1.887,2914,1.887,2915,1.887,2916,2.891,2917,1.887,2918,1.887,2919,1.887,2920,1.887,2921,1.887,2922,1.887,2923,1.887,2924,1.887,2925,1.887,2926,1.887,2927,1.887,2928,1.887,2929,1.887,2930,3.514,2931,1.887,2932,1.887,2933,1.887,2934,1.887,2935,1.887,2936,1.887,2937,1.887,2938,2.891,2939,1.887,2940,1.887,2941,1.887,2942,1.887,2943,1.887,2944,1.887,2945,1.887,2946,1.887,2947,1.887,2948,2.891,2949,1.887,2950,1.887,2951,2.891,2952,1.887,2953,1.887,2954,1.887,2955,1.887,2956,1.887,2957,1.887,2958,1.887,2959,1.887,2960,1.887,2961,1.887,2962,2.891,2963,1.887,2964,1.887,2965,2.891,2966,1.887,2967,1.887,2968,1.887,2969,1.887,2970,1.887,2971,2.891,2972,1.887,2973,1.887,2974,3.514,2975,1.887,2976,3.514,2977,1.887,2978,2.891,2979,2.891,2980,1.887,2981,1.718,2982,1.887,2983,1.887,2984,1.718,2985,1.887,2986,1.887,2987,1.887,2988,1.887,2989,1.887,2990,1.887,2991,2.891,2992,4.662,2993,1.887,2994,1.887,2995,1.718,2996,1.718,2997,4.479,2998,3.514,2999,4.662,3000,2.891,3001,1.887,3002,1.887,3003,2.891,3004,1.887,3005,1.887,3006,1.887,3007,1.887,3008,1.887,3009,2.891,3010,1.887]],["title/interfaces/TimelineEventAggregation.html",[0,0.155,2429,2.074]],["body/interfaces/TimelineEventAggregation.html",[0,0.217,2,0.418,3,0.081,4,0.081,5,0.081,12,1.138,19,0.957,21,0.151,22,0.35,23,0.777,29,0.618,30,0.381,31,0.019,32,0.765,33,0.26,34,2.263,35,2.747,36,0.59,37,0.418,45,1.165,46,0.397,47,1.603,48,2.048,49,0.59,50,0.637,51,0.536,57,1.473,59,0.231,61,0.679,64,1.108,67,0.695,69,0.59,70,0.586,96,0.394,97,1.315,98,1.448,99,2.317,100,0.712,101,0.634,107,1.583,108,0.977,109,0.949,115,0.82,116,0.917,123,1.245,128,2.562,129,1.603,130,0.03,134,1.006,137,0.418,138,1.074,143,1.286,144,1.603,148,1.618,152,0.868,155,1.4,156,1.4,157,1.4,174,1.051,176,1.108,178,0.014,184,1.193,187,1.4,188,1.4,191,1.4,197,1.256,207,0.695,218,1.251,219,1.4,220,3.086,221,1.317,232,0.799,238,0.317,252,1.603,263,0.511,264,0.858,272,0.998,273,0.82,281,1.164,289,0.679,291,0.712,295,0.648,303,2.59,316,1.405,321,0.006,322,0.009,326,1.671,328,1.108,330,1.544,331,0.536,334,1.251,337,1.193,365,0.746,369,0.949,370,0.542,371,0.618,376,2.982,377,1.448,378,0.858,384,1.878,389,0.903,390,1.943,412,1.138,414,0.746,416,1.17,418,0.746,419,1.17,420,1.317,423,1.963,440,0.618,457,0.563,471,1.315,472,1.036,473,1.785,487,1.878,489,0.82,510,2.982,528,2.565,566,0.695,570,2.389,575,0.989,576,0.618,577,0.618,579,0.903,581,0.903,582,0.782,583,1.313,588,0.782,594,0.648,596,1.239,609,1.79,610,0.418,631,2.448,633,1.51,657,1.697,659,0.903,684,2.093,689,0.949,717,0.998,720,0.949,736,1.4,737,1.108,740,1.522,741,1.108,743,1.051,747,1.448,748,0.949,753,1.378,768,1.69,769,1.4,777,0.903,780,2.42,786,2.223,791,1.315,817,1.378,819,2.34,822,1.785,824,1.108,825,1.889,830,0.998,862,1.239,875,1.498,888,1.036,900,1.943,908,1.108,917,1.752,969,1.17,985,1.517,986,1.522,997,0.998,1008,2.005,1058,1.498,1096,1.251,1111,1.603,1114,2.705,1138,2.448,1143,1.341,1146,0.82,1166,0.782,1178,1.4,1185,1.4,1336,1.315,1337,1.315,1345,1.4,1355,1.051,1361,1.4,1366,0.82,1384,0.949,1410,1.4,1473,0.949,1476,1.591,1477,0.903,1479,1.755,1480,1.671,1485,0.903,1493,1.108,1540,0.82,1652,2.431,1654,2.59,1655,1.785,1656,1.051,1668,1.17,1671,1.17,1672,2.574,1673,1.17,1674,1.17,1675,1.17,1676,1.17,1677,1.17,1678,1.17,1695,1.315,1698,3.13,1712,1.498,1716,1.4,1755,1.498,1760,1.315,1913,2.431,1914,2.005,1917,1.613,1961,1.889,1978,1.239,1979,2.29,1980,1.17,1981,1.239,1990,1.498,1997,1.239,2000,1.498,2035,1.498,2121,1.498,2122,1.4,2130,1.4,2131,3.576,2132,1.315,2133,1.315,2169,1.315,2279,2.005,2305,2.46,2318,1.613,2332,1.613,2358,2.982,2398,1.239,2408,3.525,2409,1.498,2410,2.136,2411,2.136,2412,2.59,2413,4.405,2414,3.62,2415,1.75,2416,5.11,2417,2.669,2418,1.75,2419,2.42,2420,2.29,2421,2.857,2422,3.119,2423,3.62,2424,1.4,2425,2.669,2426,1.75,2427,1.75,2428,3.287,2429,3.119,2430,3.62,2431,3.62,2432,2.46,2433,2.46,2434,3.419,2435,1.4,2436,1.4,2437,1.4,2438,1.4,2439,5.198,2440,1.75,2441,2.59,2442,1.75,2443,2.669,2444,1.75,2445,1.75,2446,1.4,2447,1.4,2448,1.4,2449,1.4,2450,1.4,2451,2.136,2452,1.4,2453,1.4,2454,1.75,2455,3.62,2456,2.136,2457,1.75,2458,1.75,2459,1.75,2460,1.75,2461,1.75,2462,2.669,2463,1.75,2464,1.75,2465,1.75,2466,1.4,2467,1.75,2468,1.75,2469,1.4,2470,2.669,2471,2.669,2472,1.75,2473,3.119,2474,1.75,2475,3.62,2476,1.75,2477,1.4,2478,1.75,2479,2.669,2480,1.4,2481,1.75,2482,1.75,2483,2.669,2484,1.75,2485,1.75,2486,1.75,2487,1.75,2488,1.75,2489,1.75,2490,1.75,2491,1.75,2492,1.75,2493,1.75,2494,1.75,2495,1.75,2496,1.75,2497,1.75,2498,2.669,2499,1.75,2500,1.75,2501,1.75,2502,1.75,2503,1.75,2504,1.75,2505,1.75,2506,1.75,2507,1.75,2508,1.75,2509,1.4,2510,2.669,2511,1.75,2512,3.236,2513,2.669,2514,3.898,2515,1.75,2516,2.669,2517,4.856,2518,1.75,2519,1.4,2520,1.75,2521,1.75,2522,2.669,2523,1.75,2524,3.62,2525,1.75,2526,2.669,2527,2.669,2528,1.75,2529,2.669,2530,1.75,2531,3.236,2532,3.236,2533,2.669,2534,1.4,2535,1.75,2536,1.75,2537,1.75,2538,1.75,2539,1.75,2540,1.75,2541,1.75,2542,1.75,2543,2.669,2544,1.75,2545,1.75,2546,2.669,2547,2.669,2548,1.75,2549,2.669,2550,2.669,2551,1.75,2552,1.75,2553,1.75,2554,1.75,2555,1.75,2556,1.75,2557,2.669,2558,1.75,2559,1.75,2560,4.108,2561,2.59,2562,3.62,2563,1.75,2564,2.669,2565,4.108,2566,1.75,2567,1.75,2568,1.75,2569,1.75,2570,1.75,2571,2.669,2572,1.75,2573,1.75,2574,1.75,2575,1.75,2576,2.669,2577,1.75,2578,1.75,2579,1.75,2580,1.75,2581,1.75,2582,1.75,2583,1.75,2584,1.75,2585,1.75,2586,1.75,2587,1.75,2588,1.75,2589,1.75,2590,1.4,2591,1.75,2592,1.75,2593,3.236,2594,1.75,2595,1.75,2596,1.75,2597,1.75,2598,1.75,2599,1.75,2600,1.75,2601,1.75,2602,1.75,2603,2.669,2604,1.75,2605,1.75,2606,1.75,2607,1.75,2608,1.75,2609,1.75,2610,1.4,2611,2.669,2612,1.75,2613,1.75,2614,1.75,2615,1.75,2616,1.75,2617,1.75,2618,1.75,2619,1.75,2620,1.75,2621,2.669,2622,1.75,2623,1.75,2624,1.75,2625,1.75,2626,1.75,2627,1.75,2628,1.75,2629,1.75,2630,1.75,2631,1.75,2632,1.75,2633,1.75,2634,1.75,2635,1.75,2636,1.75,2637,1.75,2638,1.75,2639,1.75,2640,3.236,2641,1.75,2642,1.75,2643,1.75,2644,3.119,2645,1.75,2646,1.75,2647,1.75,2648,1.75,2649,1.75,2650,1.75,2651,1.75,2652,1.75,2653,1.75,2654,1.75,2655,1.75,2656,1.75,2657,1.75,2658,1.75,2659,1.75,2660,1.4,2661,1.75,2662,1.75,2663,1.4,2664,1.75,2665,3.898,2666,1.75,2667,1.75,2668,1.4,2669,1.75,2670,1.75,2671,1.75,2672,1.75,2673,1.75,2674,1.75,2675,1.75,2676,1.613,2677,1.75,2678,1.75,2679,1.75,2680,1.75,2681,1.75,2682,1.75,2683,1.75,2684,1.75,2685,1.75,2686,1.75,2687,1.75,2688,1.75,2689,2.669,2690,4.405,2691,3.62,2692,2.669,2693,2.669,2694,2.669,2695,2.669,2696,1.75,2697,1.75,2698,1.75,2699,1.75,2700,1.75,2701,1.75,2702,2.669,2703,1.75,2704,1.75,2705,1.75,2706,1.75,2707,2.669,2708,1.75,2709,2.669,2710,1.75]],["title/interfaces/TimelineRecords.html",[0,0.155,2428,2.074]],["body/interfaces/TimelineRecords.html",[0,0.217,2,0.418,3,0.081,4,0.081,5,0.081,12,1.137,19,1.086,21,0.151,22,0.349,23,0.882,29,0.617,30,0.39,31,0.019,32,0.764,33,0.26,34,2.251,35,2.746,36,0.589,37,0.418,45,1.165,46,0.396,47,1.601,48,2.047,49,0.589,50,0.637,51,0.536,57,1.472,59,0.231,61,0.679,64,1.107,67,0.694,69,0.589,70,0.586,96,0.393,97,1.313,98,1.447,99,2.316,100,0.711,101,0.634,107,1.582,108,0.977,109,0.949,115,0.82,116,0.917,123,1.244,128,2.561,129,1.601,130,0.03,134,1.006,137,0.418,138,1.074,143,1.286,144,1.601,148,1.617,152,0.868,155,1.399,156,1.399,157,1.399,174,1.05,176,1.107,178,0.014,184,1.192,187,1.399,188,1.399,191,1.399,197,1.256,207,0.695,218,1.25,219,1.399,220,3.085,221,1.671,232,0.799,238,0.317,252,1.601,263,0.51,264,0.857,272,0.997,273,0.82,281,1.163,289,0.679,291,0.711,295,0.648,303,2.588,316,1.405,321,0.006,322,0.009,326,1.67,328,1.107,330,1.543,331,0.536,334,1.25,337,1.192,365,0.745,369,0.948,370,0.542,371,0.618,376,2.98,377,1.447,378,0.857,384,1.878,389,0.903,390,1.942,412,1.137,414,0.745,416,1.169,418,0.745,419,1.169,420,1.671,423,1.962,440,0.618,457,0.562,471,1.313,472,1.036,473,1.783,487,1.878,489,0.82,510,2.98,528,2.564,566,0.694,570,2.388,575,0.988,576,0.618,577,0.618,579,0.903,581,0.903,582,0.782,583,1.312,588,0.782,594,0.648,596,1.237,609,1.789,610,0.418,631,2.447,633,1.51,657,1.696,659,0.903,684,2.092,689,0.948,717,0.997,720,0.948,736,1.399,737,1.107,740,1.521,741,1.107,743,1.05,747,1.447,748,0.948,753,1.377,768,1.688,769,1.399,777,0.903,780,2.419,786,2.222,791,1.313,817,1.377,819,2.339,822,1.783,824,1.107,825,1.888,830,0.997,862,1.237,875,1.497,888,1.036,900,1.942,908,1.107,917,1.751,969,1.169,985,1.516,986,1.521,997,0.997,1008,2.004,1058,1.497,1096,1.25,1111,1.601,1114,2.704,1138,2.447,1143,1.34,1146,0.82,1166,0.782,1178,1.399,1185,1.399,1336,1.313,1337,1.313,1345,1.399,1355,1.05,1361,1.399,1366,0.82,1384,0.948,1410,1.399,1473,0.948,1476,1.59,1477,0.903,1479,1.754,1480,1.67,1485,0.903,1493,1.107,1540,0.82,1652,2.43,1654,2.588,1655,1.783,1656,1.05,1668,1.169,1671,1.169,1672,2.573,1673,1.169,1674,1.169,1675,1.169,1676,1.169,1677,1.169,1678,1.169,1695,1.313,1698,3.129,1712,1.497,1716,1.399,1755,1.497,1760,1.313,1913,2.43,1914,2.004,1917,1.611,1961,1.888,1978,1.237,1979,2.289,1980,1.169,1981,1.237,1990,1.497,1997,1.237,2000,1.497,2035,1.497,2121,1.497,2122,1.399,2130,1.399,2131,3.576,2132,1.313,2133,1.313,2169,1.313,2279,2.004,2305,2.458,2318,1.611,2332,1.611,2358,2.98,2398,1.237,2408,3.524,2409,1.497,2410,2.134,2411,2.134,2412,2.588,2413,4.404,2414,3.619,2415,1.748,2416,5.109,2417,2.667,2418,1.748,2419,2.419,2420,2.289,2421,2.856,2422,3.118,2423,3.619,2424,1.399,2425,2.667,2426,1.748,2427,1.748,2428,3.418,2429,2.896,2430,1.748,2431,1.748,2432,2.458,2433,2.458,2434,3.418,2435,1.399,2436,1.399,2437,1.399,2438,1.399,2439,5.197,2440,1.748,2441,2.588,2442,1.748,2443,2.667,2444,1.748,2445,1.748,2446,1.399,2447,1.399,2448,1.399,2449,1.399,2450,1.399,2451,2.134,2452,1.399,2453,1.399,2454,1.748,2455,3.619,2456,2.134,2457,1.748,2458,1.748,2459,1.748,2460,1.748,2461,1.748,2462,2.667,2463,1.748,2464,1.748,2465,1.748,2466,1.399,2467,1.748,2468,1.748,2469,1.399,2470,2.667,2471,2.667,2472,1.748,2473,3.118,2474,1.748,2475,3.619,2476,1.748,2477,1.399,2478,1.748,2479,2.667,2480,1.399,2481,1.748,2482,1.748,2483,2.667,2484,1.748,2485,1.748,2486,1.748,2487,1.748,2488,1.748,2489,1.748,2490,1.748,2491,1.748,2492,1.748,2493,1.748,2494,1.748,2495,1.748,2496,1.748,2497,1.748,2498,2.667,2499,1.748,2500,1.748,2501,1.748,2502,1.748,2503,1.748,2504,1.748,2505,1.748,2506,1.748,2507,1.748,2508,1.748,2509,1.399,2510,2.667,2511,1.748,2512,3.234,2513,2.667,2514,3.897,2515,1.748,2516,2.667,2517,4.855,2518,1.748,2519,1.399,2520,1.748,2521,1.748,2522,2.667,2523,1.748,2524,3.619,2525,1.748,2526,2.667,2527,2.667,2528,1.748,2529,2.667,2530,1.748,2531,3.234,2532,3.234,2533,2.667,2534,1.399,2535,1.748,2536,1.748,2537,1.748,2538,1.748,2539,1.748,2540,1.748,2541,1.748,2542,1.748,2543,2.667,2544,1.748,2545,1.748,2546,2.667,2547,2.667,2548,1.748,2549,2.667,2550,2.667,2551,1.748,2552,1.748,2553,1.748,2554,1.748,2555,1.748,2556,1.748,2557,2.667,2558,1.748,2559,1.748,2560,4.107,2561,2.588,2562,3.619,2563,1.748,2564,2.667,2565,4.107,2566,1.748,2567,1.748,2568,1.748,2569,1.748,2570,1.748,2571,2.667,2572,1.748,2573,1.748,2574,1.748,2575,1.748,2576,2.667,2577,1.748,2578,1.748,2579,1.748,2580,1.748,2581,1.748,2582,1.748,2583,1.748,2584,1.748,2585,1.748,2586,1.748,2587,1.748,2588,1.748,2589,1.748,2590,1.399,2591,1.748,2592,1.748,2593,3.234,2594,1.748,2595,1.748,2596,1.748,2597,1.748,2598,1.748,2599,1.748,2600,1.748,2601,1.748,2602,1.748,2603,2.667,2604,1.748,2605,1.748,2606,1.748,2607,1.748,2608,1.748,2609,1.748,2610,1.399,2611,2.667,2612,1.748,2613,1.748,2614,1.748,2615,1.748,2616,1.748,2617,1.748,2618,1.748,2619,1.748,2620,1.748,2621,2.667,2622,1.748,2623,1.748,2624,1.748,2625,1.748,2626,1.748,2627,1.748,2628,1.748,2629,1.748,2630,1.748,2631,1.748,2632,1.748,2633,1.748,2634,1.748,2635,1.748,2636,1.748,2637,1.748,2638,1.748,2639,1.748,2640,3.234,2641,1.748,2642,1.748,2643,1.748,2644,3.118,2645,1.748,2646,1.748,2647,1.748,2648,1.748,2649,1.748,2650,1.748,2651,1.748,2652,1.748,2653,1.748,2654,1.748,2655,1.748,2656,1.748,2657,1.748,2658,1.748,2659,1.748,2660,1.399,2661,1.748,2662,1.748,2663,1.399,2664,1.748,2665,3.897,2666,1.748,2667,1.748,2668,1.399,2669,1.748,2670,1.748,2671,1.748,2672,1.748,2673,1.748,2674,1.748,2675,1.748,2676,1.611,2677,1.748,2678,1.748,2679,1.748,2680,1.748,2681,1.748,2682,1.748,2683,1.748,2684,1.748,2685,1.748,2686,1.748,2687,1.748,2688,1.748,2689,2.667,2690,4.404,2691,3.619,2692,2.667,2693,2.667,2694,2.667,2695,2.667,2696,1.748,2697,1.748,2698,1.748,2699,1.748,2700,1.748,2701,1.748,2702,2.667,2703,1.748,2704,1.748,2705,1.748,2706,1.748,2707,2.667,2708,1.748,2709,2.667,2710,1.748]],["title/interfaces/TimelineSeries.html",[0,0.155,2419,1.733]],["body/interfaces/TimelineSeries.html",[0,0.192,2,0.412,3,0.08,4,0.08,5,0.08,21,0.149,22,0.346,23,0.772,29,0.748,30,0.397,31,0.019,32,0.639,33,0.21,36,0.582,37,0.412,59,0.195,67,0.942,68,0.351,70,0.711,85,0.736,96,0.437,101,0.505,108,0.863,109,0.877,111,1.703,116,1.045,121,1.037,122,0.67,123,1.048,130,0.03,134,0.48,137,0.412,139,1.898,143,0.937,144,2.159,147,1.382,152,0.898,163,1.093,172,0.936,174,1.037,178,0.006,183,1.037,184,1.181,197,1.026,205,1.478,207,0.69,221,1.075,224,1.297,232,0.826,238,0.651,252,1.037,262,1.299,264,1.032,272,1.83,284,0.985,297,1.364,316,1.026,321,0.009,322,0.009,328,1.093,344,1.127,351,0.809,365,0.736,368,1.382,370,0.537,377,1.433,378,0.555,384,1.369,388,1.222,389,0.891,405,0.985,439,1.727,440,0.61,457,0.555,472,0.67,487,1.813,489,1.685,509,2.642,525,2.114,566,0.567,569,0.985,570,0.936,571,1.83,575,0.979,576,0.61,577,0.61,579,1.364,581,1.364,582,1.435,583,0.849,588,0.772,594,0.64,599,1.037,609,1.777,610,0.412,619,0.891,620,1.222,628,0.849,631,2.567,633,1.649,647,0.936,648,1.673,666,0.936,684,0.772,688,2.114,689,0.936,693,2.114,694,2.114,696,1.382,697,1.382,698,1.382,699,1.382,700,1.382,701,2.114,703,3.944,704,1.382,705,3.51,706,2.114,709,2.877,717,0.985,720,0.936,726,2.591,728,1.382,737,1.093,740,1.507,741,1.093,743,1.037,747,1.433,748,0.936,753,1.657,758,1.478,760,2.877,761,0.985,766,3.104,767,1.297,768,1.673,777,2,786,2.617,790,1.591,809,1.478,813,2.877,817,1.657,818,1.767,822,1.154,825,1.87,827,2.216,828,1.382,829,1.382,830,2.21,831,1.591,847,3.101,849,1.382,850,2.568,851,2.114,852,1.382,853,1.382,855,1.382,856,1.382,857,1.382,861,1.382,862,1.222,863,2.877,865,1.591,866,1.382,867,1.591,868,1.382,869,1.382,870,1.382,871,1.382,872,1.382,880,1.591,888,1.246,889,3.101,892,1.591,896,1.591,897,1.478,900,2.326,904,2.114,907,1.382,908,1.093,909,1.985,910,1.382,911,1.382,912,2.114,913,2.114,914,2.114,915,1.382,916,1.382,917,1.917,918,1.382,919,1.382,942,1.382,950,1.297,969,1.154,972,2.114,973,2.642,985,1.993,995,0.582,1008,2.701,1060,3.595,1096,1.239,1097,1.767,1098,1.578,1111,1.037,1114,2.032,1121,2.411,1125,1.985,1131,1.222,1143,0.64,1146,0.809,1188,1.478,1227,1.222,1240,1.382,1267,1.382,1276,1.222,1277,1.478,1329,1.297,1331,2.262,1338,1.478,1352,1.382,1355,1.586,1382,1.478,1429,2.642,1431,1.037,1432,1.478,1433,2.262,1473,0.936,1481,0.985,1485,0.891,1506,0.985,1510,0.891,1584,0.985,1588,1.154,1670,1.591,1672,1.83,1698,3.268,1705,1.591,1748,1.591,1749,1.382,1758,4.416,1911,1.727,1961,1.87,1978,1.222,1979,1.87,1980,1.154,1981,1.222,1984,2.958,1986,2.642,1988,3.313,1989,2.435,1993,2.958,1997,1.222,2001,1.591,2002,1.591,2003,1.591,2004,3.766,2007,1.591,2012,1.591,2013,1.591,2014,1.591,2015,2.435,2016,1.591,2017,1.591,2018,3.313,2019,1.591,2021,1.591,2022,1.591,2023,1.591,2024,2.435,2025,1.591,2026,1.591,2027,1.591,2028,1.591,2029,1.591,2030,1.591,2031,2.435,2032,1.591,2033,1.591,2034,3.571,2038,1.591,2066,1.591,2083,1.727,2089,1.591,2090,2.435,2091,1.591,2094,1.591,2095,1.591,2096,1.591,2098,1.591,2099,1.591,2100,3.313,2101,1.591,2102,1.591,2103,1.591,2104,1.591,2105,1.591,2106,1.591,2107,1.591,2108,1.591,2110,1.591,2112,1.591,2113,1.591,2114,1.591,2115,2.958,2116,2.435,2117,1.591,2128,2.958,2131,3.006,2132,1.297,2133,1.297,2137,2.642,2138,1.727,2139,3.21,2140,1.727,2141,1.727,2144,1.727,2156,1.727,2158,1.727,2159,2.642,2161,1.727,2164,2.642,2165,1.727,2166,3.875,2169,1.985,2175,1.727,2279,2.911,2386,1.727,2398,1.222,2410,2.877,2411,2.877,2412,3.101,2419,2.732,2420,2.545,2421,3.006,2424,1.382,2434,1.382,2435,1.382,2436,1.382,2437,1.382,2438,1.382,2441,1.382,2446,1.382,2447,1.382,2448,1.382,2449,1.382,2450,1.382,2451,1.382,2452,1.382,2453,1.382,2456,1.382,2466,2.877,2469,1.382,2473,1.382,2477,1.382,2480,1.382,2509,2.114,2519,1.382,2534,1.382,2561,1.382,2590,1.382,2610,1.382,2644,1.382,2660,1.382,2663,1.382,2668,2.568,2711,1.727,2712,2.902,2713,1.727,2714,2.642,2715,3.525,2716,1.897,2717,1.897,2718,1.897,2719,1.897,2720,1.897,2721,1.897,2722,1.897,2723,2.902,2724,2.902,2725,2.902,2726,2.902,2727,1.897,2728,1.897,2729,1.897,2730,1.897,2731,1.897,2732,3.525,2733,1.897,2734,1.897,2735,5.125,2736,3.949,2737,1.897,2738,1.897,2739,1.897,2740,1.897,2741,1.897,2742,1.897,2743,1.897,2744,1.897,2745,1.897,2746,1.897,2747,4.256,2748,1.897,2749,2.902,2750,2.902,2751,2.902,2752,1.897,2753,1.897,2754,2.902,2755,1.897,2756,1.897,2757,1.897,2758,1.897,2759,2.902,2760,4.671,2761,1.897,2762,2.902,2763,1.897,2764,2.902,2765,1.897,2766,1.897,2767,1.897,2768,2.902,2769,2.902,2770,2.902,2771,3.525,2772,1.897,2773,1.897,2774,1.897,2775,1.897,2776,1.897,2777,5.04,2778,2.902,2779,2.902,2780,1.897,2781,1.897,2782,1.897,2783,1.897,2784,1.897,2785,1.897,2786,2.902,2787,1.897,2788,1.727,2789,1.897,2790,2.902,2791,1.897,2792,3.525,2793,1.897,2794,1.897,2795,1.897,2796,1.897,2797,1.897,2798,1.897,2799,2.902,2800,1.897,2801,1.897,2802,3.949,2803,1.897,2804,1.897,2805,2.902,2806,2.902,2807,2.902,2808,1.897,2809,1.897,2810,1.897,2811,1.897,2812,2.902,2813,1.897,2814,1.897,2815,1.897,2816,1.897,2817,1.897,2818,1.897,2819,1.897,2820,1.897,2821,1.897,2822,1.897,2823,1.897,2824,2.902,2825,1.897,2826,1.897,2827,1.897,2828,1.897,2829,1.897,2830,1.897,2831,1.897,2832,1.897,2833,2.902,2834,1.897,2835,1.897,2836,1.897,2837,1.897,2838,1.897,2839,1.897,2840,1.897,2841,1.897,2842,1.897,2843,1.897,2844,1.897,2845,1.897,2846,3.525,2847,1.897,2848,1.897,2849,1.897,2850,2.902,2851,1.897,2852,1.897,2853,1.897,2854,1.897,2855,1.897,2856,1.897,2857,1.897,2858,1.897,2859,1.897,2860,1.897,2861,2.902,2862,1.897,2863,1.897,2864,1.897,2865,1.897,2866,1.897,2867,1.897,2868,1.897,2869,1.897,2870,1.897,2871,1.897,2872,1.897,2873,1.897,2874,1.897,2875,1.897,2876,1.897,2877,1.897,2878,1.897,2879,1.897,2880,2.902,2881,2.902,2882,2.902,2883,2.902,2884,1.897,2885,1.897,2886,3.525,2887,1.897,2888,1.897,2889,1.897,2890,1.897,2891,1.897,2892,1.897,2893,1.897,2894,1.897,2895,1.897,2896,1.897,2897,1.897,2898,1.897,2899,1.897,2900,1.897,2901,1.897,2902,1.897,2903,1.897,2904,1.897,2905,1.897,2906,1.897,2907,1.897,2908,1.897,2909,1.897,2910,3.525,2911,1.897,2912,1.897,2913,1.897,2914,1.897,2915,1.897,2916,2.902,2917,1.897,2918,1.897,2919,1.897,2920,1.897,2921,1.897,2922,1.897,2923,1.897,2924,1.897,2925,1.897,2926,1.897,2927,1.897,2928,1.897,2929,1.897,2930,3.525,2931,1.897,2932,1.897,2933,1.897,2934,1.897,2935,1.897,2936,1.897,2937,1.897,2938,2.902,2939,1.897,2940,1.897,2941,1.897,2942,1.897,2943,1.897,2944,1.897,2945,1.897,2946,1.897,2947,1.897,2948,2.902,2949,1.897,2950,1.897,2951,2.902,2952,1.897,2953,1.897,2954,1.897,2955,1.897,2956,1.897,2957,1.897,2958,1.897,2959,1.897,2960,1.897,2961,1.897,2962,2.902,2963,1.897,2964,1.897,2965,2.902,2966,1.897,2967,1.897,2968,1.897,2969,1.897,2970,1.897,2971,2.902,2972,1.897,2973,1.897,2974,3.525,2975,1.897,2976,3.525,2977,1.897,2978,2.902,2979,2.902,2980,1.897,2981,1.727,2982,1.897,2983,1.897,2984,1.727,2985,1.897,2986,1.897,2987,1.897,2988,1.897,2989,1.897,2990,1.897,2991,2.902,2992,4.671,2993,1.897,2994,1.897,2995,1.727,2996,1.727,2997,4.489,2998,3.525,2999,4.671,3000,2.902,3001,1.897,3002,1.897,3003,2.902,3004,1.897,3005,1.897,3006,1.897,3007,1.897,3008,1.897,3009,2.902,3010,1.897]],["title/interfaces/VisEvent.html",[0,0.155,3011,2.847]],["body/interfaces/VisEvent.html",[0,0.193,2,0.541,3,0.15,4,0.105,5,0.105,8,1.228,10,2.584,21,0.196,22,0.493,28,2.663,29,0.551,30,0.375,31,0.019,32,0.678,33,0.275,36,0.763,37,0.541,38,1.04,39,1.144,41,1.52,42,1.377,43,1.547,44,1.114,45,1.324,46,0.513,49,0.763,50,0.771,51,0.694,54,1.253,57,1.669,59,0.204,61,0.879,67,1.052,68,0.46,70,0.697,76,1.603,84,1.812,92,1.443,94,1.64,95,1.964,96,0.458,97,1.701,98,1.751,101,0.727,102,1.874,109,0.841,110,2.087,114,2.339,115,0.853,116,0.881,119,1.514,122,0.879,123,0.899,127,1.603,130,0.039,133,2.264,135,1.114,137,0.541,138,1.167,139,1.593,144,1.938,145,1.764,148,1.012,152,0.845,163,1.433,178,0.015,183,1.359,184,1.682,197,0.879,207,0.62,232,0.386,238,0.585,244,1.314,249,1.812,250,1.588,261,1.314,262,1.85,263,1.099,264,0.728,281,1.574,282,1.514,289,1.461,290,1.938,291,1.531,295,1.52,297,1.169,306,1.253,313,3.229,316,1.684,321,0.008,322,0.011,334,1.061,344,1.377,368,1.812,374,1.812,375,1.788,378,0.728,392,2.764,399,2.487,403,1.841,405,1.291,440,0.8,457,0.728,468,1.812,566,0.808,569,1.291,575,1.196,576,0.8,577,0.8,588,1.012,591,2.087,592,2.975,594,0.839,596,2.285,609,1.594,610,0.541,621,2.597,628,1.114,631,2.225,633,1.64,634,2.264,657,1.513,670,1.088,680,1.359,740,2.146,750,2.264,753,1.943,780,2.9,786,2.646,817,1.943,819,1.938,900,1.359,942,1.812,958,5.046,985,1.061,993,2.264,995,0.763,1062,2.487,1096,1.513,1097,2.159,1098,2.133,1111,1.938,1114,2.044,1131,1.603,1142,2.264,1146,1.061,1227,1.603,1240,1.812,1265,2.264,1307,2.264,1336,2.426,1352,2.584,1354,2.264,1379,2.487,1406,2.087,1448,2.785,1461,3.971,1474,2.352,1475,1.701,1476,2.133,1477,1.169,1478,2.426,1479,2.352,1480,2.239,1481,1.291,1482,2.285,1499,1.701,1504,1.433,1505,1.701,1510,1.169,1511,2.663,1514,1.701,1540,1.513,1655,2.516,1656,1.359,1668,1.514,1671,1.514,1672,1.291,1673,2.159,1674,1.514,1675,1.514,1676,1.514,1677,1.514,1678,1.514,1826,2.785,1905,4.628,1913,1.701,1914,1.701,1969,4.133,2036,4.133,2039,2.487,2122,3.011,2131,1.514,2168,5.046,2296,3.229,2398,2.663,2713,2.264,2714,3.763,2788,2.264,2981,2.264,2984,3.763,2996,2.264,3011,4.133,3012,2.487,3013,4.616,3014,4.616,3015,3.238,3016,5.38,3017,4.616,3018,3.238,3019,6.903,3020,3.971,3021,2.785,3022,3.238,3023,3.238,3024,3.238,3025,3.238,3026,3.238,3027,4.616,3028,4.616,3029,3.238,3030,4.616,3031,4.616,3032,3.238,3033,3.238,3034,3.238,3035,3.238,3036,3.238,3037,3.238,3038,3.238,3039,3.238,3040,3.238,3041,6.635,3042,3.238,3043,3.238,3044,3.238,3045,3.238,3046,3.238,3047,3.238,3048,6.201,3049,3.238,3050,3.238,3051,3.238,3052,3.238,3053,5.38,3054,5.865,3055,5.38,3056,5.38,3057,3.238,3058,4.616,3059,3.238,3060,3.238,3061,3.238,3062,4.616,3063,4.616,3064,3.238,3065,4.616,3066,3.238,3067,3.238,3068,3.238,3069,3.238,3070,3.238,3071,3.238,3072,3.238,3073,3.238,3074,3.238,3075,3.238,3076,3.238,3077,3.238,3078,3.238,3079,4.616,3080,4.616,3081,3.238,3082,5.865,3083,3.238,3084,3.238,3085,2.785,3086,3.238,3087,3.238,3088,3.238,3089,3.238,3090,3.238,3091,3.238,3092,4.616,3093,4.616,3094,3.238,3095,3.238,3096,3.238,3097,3.238,3098,3.238,3099,4.616,3100,3.238,3101,3.238,3102,3.238,3103,3.238,3104,3.238,3105,3.238,3106,3.238,3107,3.238,3108,3.238,3109,3.238,3110,3.238,3111,3.238,3112,3.238,3113,3.238,3114,3.238,3115,4.616,3116,5.38,3117,3.238,3118,3.238,3119,3.238,3120,3.238,3121,3.238,3122,3.238,3123,3.238,3124,3.238,3125,3.238,3126,3.238,3127,3.238,3128,3.238,3129,3.238,3130,3.238,3131,3.238,3132,3.238,3133,3.238,3134,3.238,3135,3.238,3136,3.238,3137,3.238,3138,3.238,3139,3.238,3140,3.238,3141,3.238,3142,3.238,3143,3.238,3144,3.238,3145,3.238,3146,3.238,3147,3.238,3148,3.238,3149,3.238,3150,3.238,3151,3.238,3152,3.238,3153,3.238,3154,3.238,3155,3.238,3156,3.238,3157,4.616,3158,3.238,3159,4.616,3160,3.238,3161,4.616,3162,3.238,3163,4.616,3164,3.238,3165,4.616,3166,3.238,3167,3.238,3168,3.238,3169,3.238,3170,3.238,3171,5.865,3172,5.865,3173,5.865,3174,3.238,3175,6.201,3176,6.447,3177,3.238,3178,4.616,3179,3.238,3180,3.238,3181,3.238,3182,3.238,3183,3.238,3184,3.238,3185,3.238,3186,3.238,3187,3.238,3188,3.238,3189,4.616,3190,3.238,3191,6.201,3192,3.238,3193,3.238,3194,3.238,3195,3.238,3196,3.238,3197,3.238,3198,6.201,3199,3.238,3200,3.238,3201,3.238,3202,3.238,3203,3.238]],["title/modules/VisTimelineModule.html",[975,1.215,3204,2.592]],["body/modules/VisTimelineModule.html",[3,0.188,4,0.188,5,0.188,31,0.018,33,0.283,59,0.219,130,0.07,178,0.014,321,0.016,322,0.016,365,1.724,375,1.498,610,0.966,646,1.896,670,1.363,683,3.27,684,2.103,975,1.896,977,2.56,978,2.56,979,3.521,980,2.862,981,3.521,985,2.205,986,2.306,988,3.534,989,3.534,990,3.038,994,3.534,995,1.363,1001,3.038,1474,2.551,2216,5.787,2272,4.044,3204,5.327,3205,4.974,3206,4.974,3207,4.974,3208,5.782,3209,5.782]],["title/coverage.html",[3210,4.365]],["body/coverage.html",[0,0.326,1,2.634,3,0.198,5,0.133,6,4.034,7,2.762,19,1.407,20,2.447,30,0.247,31,0.019,38,0.864,39,1.068,40,1.219,41,1.059,42,1.219,52,1.809,60,2.634,101,0.402,130,0.086,131,2.858,138,0.719,163,1.809,178,0.01,232,0.931,244,1.163,321,0.01,322,0.013,323,3.139,325,3.515,326,1.956,332,2.023,348,1.405,349,1.809,436,3.515,566,1.139,567,1.716,573,3.515,574,4.252,591,4.173,656,1.809,659,1.475,661,1.63,662,1.63,663,1.809,664,1.716,666,1.55,667,1.716,669,1.63,670,1.588,672,1.809,674,1.716,676,1.716,679,1.716,680,1.716,682,1.55,683,1.716,687,4.163,734,2.858,740,3.072,742,4.163,743,1.716,926,3.139,1002,4.163,1004,2.858,1059,3.515,1088,3.515,1092,2.287,1093,4.252,1105,2.287,1161,2.634,1162,4.034,1169,2.147,1334,2.858,1335,4.463,1339,2.634,1358,3.139,1427,3.139,1440,3.515,1469,3.805,1470,3.712,1474,2.055,1648,2.858,1649,4.163,1650,3.79,1651,4.163,1816,4.163,1817,4.163,1844,3.515,1872,3.515,1909,3.139,1955,3.139,1956,4.974,1957,4.662,2129,3.139,2130,3.954,2272,4.528,2273,4.163,2296,3.79,2384,3.139,2385,3.515,2408,2.287,2409,4.034,2419,1.911,2420,2.023,2421,1.911,2422,2.287,2428,2.287,2429,2.287,2711,4.528,3011,3.139,3012,4.67,3085,6.47,3210,3.515,3211,4.086,3212,4.086,3213,5.23,3214,3.515,3215,7.484,3216,3.515,3217,3.515,3218,4.086,3219,6.08,3220,4.086,3221,4.086,3222,4.662,3223,4.086,3224,4.086,3225,3.515,3226,3.515,3227,3.515,3228,4.086,3229,5.23,3230,3.515,3231,3.515,3232,3.515,3233,4.086,3234,4.086,3235,4.086,3236,4.086,3237,4.086,3238,4.086,3239,4.086,3240,4.086,3241,4.086,3242,6.475,3243,5.23,3244,3.515,3245,3.515,3246,3.515,3247,6.08,3248,4.086,3249,4.086,3250,4.086,3251,4.086,3252,4.086,3253,4.086,3254,4.086,3255,4.086,3256,4.086,3257,4.086,3258,4.086,3259,6.47,3260,6.47,3261,3.515,3262,7.631,3263,3.515,3264,3.515,3265,3.515,3266,3.515,3267,3.515,3268,3.515,3269,3.515,3270,3.515,3271,3.515,3272,3.515,3273,3.515,3274,3.515,3275,3.515,3276,4.086,3277,5.23,3278,6.08,3279,6.08,3280,4.086,3281,4.086,3282,4.086,3283,4.086,3284,4.086,3285,3.515,3286,6.08,3287,6.08,3288,5.419,3289,4.086,3290,5.419,3291,4.086,3292,3.515,3293,4.086,3294,4.086,3295,4.086,3296,3.515,3297,3.515,3298,4.086,3299,4.086,3300,4.086,3301,4.086,3302,3.515,3303,4.086,3304,5.419,3305,6.08,3306,4.086,3307,4.086,3308,4.086,3309,3.515,3310,3.515,3311,4.086,3312,4.086,3313,4.086,3314,4.086,3315,4.086,3316,4.086]],["title/dependencies.html",[978,1.975,3317,3.088]],["body/dependencies.html",[31,0.019,43,1.276,70,0.626,178,0.014,321,0.014,322,0.016,670,1.404,684,1.861,764,4.164,978,3.029,1102,3.837,1103,3.128,1474,2.85,1825,5.885,1842,4.573,3318,5.953,3319,5.953,3320,5.953,3321,5.953,3322,5.953,3323,5.953,3324,5.953,3325,5.953,3326,5.953,3327,5.953,3328,5.953,3329,6.842,3330,5.953,3331,5.953]],["title/miscellaneous/functions.html",[3332,1.849,3333,3.838]],["body/miscellaneous/functions.html",[6,2.355,7,2.473,8,2.873,13,2.051,15,3.032,16,5.206,20,3.163,21,0.238,23,1.138,25,2.775,27,2.956,30,0.423,31,0.019,34,1.779,38,0.848,39,1.154,40,1.173,43,1.618,47,2.677,54,2.032,65,2.201,73,3.156,74,1.651,89,2.535,94,1.644,96,0.644,98,2.523,101,0.519,102,2.084,110,3.404,115,0.623,121,2.504,122,1.619,124,2.952,125,2.75,129,2.504,134,1.159,142,2.75,143,1.452,149,2.504,178,0.009,184,1.651,200,4.894,201,4.171,203,2.952,214,4.171,215,2.218,221,1.991,244,2.129,247,1.492,263,0.803,289,1.619,297,1.42,306,1.731,311,1.732,321,0.009,322,0.013,326,2.735,329,2.775,330,1.575,349,1.741,353,2.735,370,1.08,381,3.931,384,2.206,386,2.952,387,1.779,390,1.651,412,1.984,473,3.459,483,2.355,525,2.956,597,2.75,758,2.355,777,1.907,819,2.876,1138,2.262,1162,2.355,1163,3.694,1167,2.355,1181,2.75,1184,4.894,1186,4.584,1187,2.75,1205,4.109,1235,2.775,1251,2.75,1267,2.201,1335,2.535,1337,3.35,1339,3.404,1346,3.021,1352,2.956,1431,2.218,1434,4.544,1469,1.947,1476,2.504,1485,1.42,1506,1.568,1939,5.485,2136,3.383,2257,3.383,2387,3.383,2388,3.383,2676,2.535,3259,6.467,3260,6.467,3261,4.544,3263,4.544,3264,4.544,3265,4.544,3266,4.544,3267,4.544,3268,4.544,3269,4.544,3270,4.544,3271,4.544,3272,4.544,3273,4.544,3274,4.544,3275,4.544,3285,4.544,3292,4.544,3297,6.437,3302,4.544,3332,2.355,3333,3.383,3334,7.483,3335,3.383,3336,3.932,3337,3.383,3338,3.932,3339,5.964,3340,3.932,3341,6.376,3342,5.964,3343,7.483,3344,3.932,3345,7.642,3346,7.397,3347,3.932,3348,3.932,3349,3.932,3350,5.282,3351,3.932,3352,3.932,3353,3.932,3354,3.932,3355,5.282,3356,3.932,3357,3.932,3358,3.932,3359,5.282,3360,5.282,3361,5.964,3362,5.282,3363,3.932,3364,3.932,3365,3.932,3366,3.932,3367,3.932,3368,3.932,3369,3.932,3370,5.282,3371,5.282,3372,5.282,3373,3.932,3374,3.932,3375,3.932,3376,3.932,3377,3.932,3378,3.932,3379,3.932,3380,3.932,3381,3.932,3382,3.932,3383,3.932,3384,5.964,3385,3.932,3386,3.932]],["title/index.html",[21,0.224,3387,3.188]],["body/index.html",[2,0.849,31,0.019,178,0.012,207,0.682,321,0.012,322,0.015,324,3.274,365,1.515,375,1.316,567,3.117,568,2.515,646,1.666,656,3.286,659,2.68,661,2.961,662,2.961,663,3.286,666,2.815,667,3.117,669,2.961,672,3.286,674,3.117,676,3.117,679,3.117,680,3.117,682,2.815,683,3.117,975,1.666,976,4.646,977,2.249,978,2.249,979,2.515,980,2.515,981,2.515,982,4.37,983,4.37,984,4.37,985,2.041,986,2.026,1049,5.314,1050,4.37,1051,4.37,1053,4.37,1810,5.314,1811,4.37,1812,4.37,1814,4.37,1819,5.037,1820,4.37,1821,4.37,1822,4.37,1835,5.037,1836,4.37,1837,4.37,1838,4.37,1980,2.376,2209,5.341,2210,4.37,2211,4.37,2212,4.37,2260,5.242,2261,4.37,2262,4.37,2263,4.37,2995,4.355,3204,5.037,3205,4.37,3206,4.37,3207,4.37,3277,4.37,3296,4.37,3387,4.37]],["title/modules.html",[977,2.246]],["body/modules.html",[31,0.016,86,5.389,178,0.014,321,0.014,322,0.016,909,4.048,976,3.568,977,2.638,1049,4.167,1810,4.167,1819,4.167,1835,4.167,2209,4.167,2260,4.167,3204,4.167,3388,7.704,3389,7.704]],["title/miscellaneous/typealiases.html",[3332,1.849,3390,4.462]],["body/miscellaneous/typealiases.html",[4,0.22,6,3.491,7,2.699,21,0.353,30,0.353,31,0.019,38,0.961,71,3.491,72,4.078,73,2.886,74,2.448,75,4.078,76,2.886,77,4.078,78,4.078,79,2.886,80,2.211,81,4.728,82,2.838,83,3.161,87,2.726,120,3.263,178,0.014,321,0.014,322,0.016,1162,3.491,1174,4.728,1176,4.078,1180,4.728,2130,3.995,2408,3.263,2409,3.491,2419,2.726,2421,2.726,2422,3.263,2428,3.263,2429,3.263,2432,4.357,2433,4.357,3332,3.491,3335,5.016,3337,5.815,3391,5.831,3392,6.76]],["title/miscellaneous/variables.html",[3332,1.849,3393,3.838]],["body/miscellaneous/variables.html",[21,0.263,30,0.401,31,0.019,43,0.932,68,1.077,95,1.606,107,1.126,108,0.584,115,1.206,138,0.992,178,0.01,207,0.584,321,0.01,322,0.013,331,0.932,525,3.158,526,3.447,588,1.359,673,2.033,717,1.734,720,1.649,766,2.152,893,3.34,1474,2.141,1481,1.734,1482,2.152,1511,2.152,1909,4.335,2272,3.947,2273,4.335,2295,3.74,2296,4.639,2306,3.74,2307,3.74,2308,3.74,2309,3.74,3012,3.34,3020,3.74,3021,3.74,3213,3.74,3214,4.855,3216,4.855,3217,4.855,3222,3.74,3225,4.855,3226,3.74,3227,4.855,3229,3.74,3230,4.855,3231,4.855,3232,4.855,3243,3.74,3244,4.855,3245,4.855,3246,4.855,3309,4.855,3310,4.855,3332,2.603,3393,3.74,3394,4.347,3395,4.347,3396,4.347,3397,4.347,3398,6.266,3399,6.266,3400,6.266,3401,7.787,3402,7.171,3403,7.787,3404,6.632,3405,7.269,3406,4.347,3407,6.873,3408,4.347,3409,7.755,3410,4.347,3411,6.632,3412,5.644,3413,4.347,3414,4.347,3415,4.347,3416,4.347,3417,4.347,3418,4.347,3419,6.266,3420,6.266,3421,5.644,3422,4.347,3423,5.644,3424,5.644,3425,4.347,3426,6.266,3427,4.347,3428,5.644,3429,6.632,3430,4.347,3431,4.347,3432,4.347,3433,5.644,3434,4.347,3435,4.347,3436,4.347,3437,5.644,3438,4.347,3439,4.347,3440,4.347,3441,4.347,3442,7.347,3443,4.347,3444,5.644,3445,4.347,3446,5.644,3447,4.347,3448,5.644,3449,4.347,3450,4.347,3451,4.347,3452,4.347,3453,4.347,3454,4.347,3455,4.347,3456,4.347,3457,4.347,3458,4.347,3459,4.347,3460,4.347]]],"invertedIndex":[["",{"_index":31,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"components/BsEdgeInfoCard.html":{},"components/BsHeatmapComponent.html":{},"modules/BsHeatmapModule.html":{},"components/BsNodeInfoCard.html":{},"modules/BsTimelineModule.html":{},"components/BsTooltipComponent.html":{},"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"modules/FinanceModule.html":{},"modules/FusionChartsModule.html":{},"modules/GoogleMapsModule.html":{},"interfaces/HeatmapItem.html":{},"components/MapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"modules/NetworkModule.html":{},"interfaces/NetworkProvider.html":{},"components/NgxChart.html":{},"modules/NgxChartsModule.html":{},"interfaces/Node.html":{},"interfaces/NodeData.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"components/ResultTimeline.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{},"modules/VisTimelineModule.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":232,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"components/BsEdgeInfoCard.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"components/BsTooltipComponent.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"interfaces/HeatmapItem.html":{},"components/MapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeData.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"components/ResultTimeline.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{},"coverage.html":{}}}],["0(n",{"_index":1577,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["0.0.1",{"_index":3319,"title":{},"body":{"dependencies.html":{}}}],["0.02",{"_index":1942,"title":{},"body":{"components/MapComponent.html":{}}}],["0.2s",{"_index":962,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["0.3",{"_index":519,"title":{},"body":{"classes/BaseProvider.html":{}}}],["0.5",{"_index":966,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/MoneyCloudDatum.html":{}}}],["0.8",{"_index":974,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["0.9",{"_index":960,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["0/1",{"_index":3215,"title":{},"body":{"coverage.html":{}}}],["0/17",{"_index":3304,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":3308,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":3279,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":3305,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":3242,"title":{},"body":{"coverage.html":{}}}],["0/7",{"_index":3219,"title":{},"body":{"coverage.html":{}}}],["0/8",{"_index":3247,"title":{},"body":{"coverage.html":{}}}],["023e58",{"_index":3419,"title":{},"body":{"miscellaneous/variables.html":{}}}],["0s",{"_index":964,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["1",{"_index":207,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/BaseProvider.html":{},"components/BsHeatmapComponent.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"interfaces/HeatmapItem.html":{},"components/MapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"components/ResultTimeline.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["1).split",{"_index":2326,"title":{},"body":{"components/ResultTimeline.html":{}}}],["1.0",{"_index":932,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["1.5em",{"_index":587,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsNodeInfoCard.html":{},"interfaces/NodeData.html":{}}}],["1/1",{"_index":3262,"title":{},"body":{"coverage.html":{}}}],["1/2",{"_index":3290,"title":{},"body":{"coverage.html":{}}}],["1/3",{"_index":3283,"title":{},"body":{"coverage.html":{}}}],["1/6",{"_index":3278,"title":{},"body":{"coverage.html":{}}}],["10",{"_index":163,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"components/BsTooltipComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{},"coverage.html":{}}}],["100",{"_index":740,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{},"components/NgxChart.html":{},"components/ResultTimeline.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{},"coverage.html":{}}}],["1000",{"_index":750,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyDatum.html":{},"interfaces/VisEvent.html":{}}}],["10000",{"_index":2290,"title":{},"body":{"components/ResultTimeline.html":{}}}],["10px",{"_index":968,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["11",{"_index":3313,"title":{},"body":{"coverage.html":{}}}],["11/28",{"_index":3287,"title":{},"body":{"coverage.html":{}}}],["12",{"_index":2694,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["12/24",{"_index":3228,"title":{},"body":{"coverage.html":{}}}],["12/26",{"_index":3281,"title":{},"body":{"coverage.html":{}}}],["12px",{"_index":1064,"title":{},"body":{"components/BsTooltipComponent.html":{}}}],["13/45",{"_index":3221,"title":{},"body":{"coverage.html":{}}}],["13/54",{"_index":3236,"title":{},"body":{"coverage.html":{}}}],["13/68",{"_index":3241,"title":{},"body":{"coverage.html":{}}}],["14.0.0",{"_index":3323,"title":{},"body":{"dependencies.html":{}}}],["14/15",{"_index":3255,"title":{},"body":{"coverage.html":{}}}],["15",{"_index":1979,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{}}}],["15/55",{"_index":3312,"title":{},"body":{"coverage.html":{}}}],["150px",{"_index":2307,"title":{},"body":{"components/ResultTimeline.html":{},"miscellaneous/variables.html":{}}}],["16",{"_index":3277,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["16rem",{"_index":2258,"title":{},"body":{"components/NgxChart.html":{}}}],["17",{"_index":3306,"title":{},"body":{"coverage.html":{}}}],["17px",{"_index":1069,"title":{},"body":{"components/BsTooltipComponent.html":{}}}],["19",{"_index":3240,"title":{},"body":{"coverage.html":{}}}],["19/20",{"_index":3249,"title":{},"body":{"coverage.html":{}}}],["1950",{"_index":2337,"title":{},"body":{"components/ResultTimeline.html":{}}}],["1].date",{"_index":2680,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["1a3646",{"_index":3408,"title":{},"body":{"miscellaneous/variables.html":{}}}],["1d2c4d",{"_index":3404,"title":{},"body":{"miscellaneous/variables.html":{}}}],["2",{"_index":111,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"components/BsEdgeInfoCard.html":{},"components/BsNodeInfoCard.html":{},"interfaces/CustomData.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["2).split",{"_index":2060,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{}}}],["2*size",{"_index":3010,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["2/10",{"_index":3250,"title":{},"body":{"coverage.html":{}}}],["2/4",{"_index":3258,"title":{},"body":{"coverage.html":{}}}],["2/9",{"_index":3257,"title":{},"body":{"coverage.html":{}}}],["20",{"_index":742,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{},"coverage.html":{}}}],["200",{"_index":1978,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{}}}],["2000",{"_index":3202,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["2020",{"_index":2685,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["21",{"_index":1088,"title":{},"body":{"components/BsTooltipComponent.html":{},"coverage.html":{}}}],["22",{"_index":3256,"title":{},"body":{"coverage.html":{}}}],["222222",{"_index":3438,"title":{},"body":{"miscellaneous/variables.html":{}}}],["23",{"_index":3223,"title":{},"body":{"coverage.html":{}}}],["24",{"_index":3235,"title":{},"body":{"coverage.html":{}}}],["255763",{"_index":3431,"title":{},"body":{"miscellaneous/variables.html":{}}}],["27",{"_index":3311,"title":{},"body":{"coverage.html":{}}}],["28",{"_index":3220,"title":{},"body":{"coverage.html":{}}}],["283d6a",{"_index":3421,"title":{},"body":{"miscellaneous/variables.html":{}}}],["2c6675",{"_index":3430,"title":{},"body":{"miscellaneous/variables.html":{}}}],["2px",{"_index":2710,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["3",{"_index":110,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"interfaces/VisEvent.html":{},"miscellaneous/functions.html":{}}}],["3*24",{"_index":2697,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["3*size/2",{"_index":3009,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["3.0.0",{"_index":3321,"title":{},"body":{"dependencies.html":{}}}],["3.0.4",{"_index":3324,"title":{},"body":{"dependencies.html":{}}}],["3.1.0",{"_index":3327,"title":{},"body":{"dependencies.html":{}}}],["3.15.1",{"_index":3325,"title":{},"body":{"dependencies.html":{}}}],["3/3",{"_index":3293,"title":{},"body":{"coverage.html":{}}}],["3/4",{"_index":3252,"title":{},"body":{"coverage.html":{}}}],["30",{"_index":1980,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"index.html":{}}}],["30/33",{"_index":3298,"title":{},"body":{"coverage.html":{}}}],["300",{"_index":1862,"title":{},"body":{"components/MapComponent.html":{}}}],["304a7d",{"_index":3427,"title":{},"body":{"miscellaneous/variables.html":{}}}],["31",{"_index":3288,"title":{},"body":{"coverage.html":{}}}],["33",{"_index":3282,"title":{},"body":{"coverage.html":{}}}],["334e87",{"_index":3417,"title":{},"body":{"miscellaneous/variables.html":{}}}],["35",{"_index":894,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["350px",{"_index":2309,"title":{},"body":{"components/ResultTimeline.html":{},"miscellaneous/variables.html":{}}}],["36",{"_index":3299,"title":{},"body":{"coverage.html":{}}}],["365",{"_index":2450,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{}}}],["39",{"_index":3286,"title":{},"body":{"coverage.html":{}}}],["3a4762",{"_index":3436,"title":{},"body":{"miscellaneous/variables.html":{}}}],["3c7680",{"_index":3425,"title":{},"body":{"miscellaneous/variables.html":{}}}],["4",{"_index":2996,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{}}}],["4.0.0",{"_index":3331,"title":{},"body":{"dependencies.html":{}}}],["4/10",{"_index":3253,"title":{},"body":{"coverage.html":{}}}],["4/23",{"_index":3307,"title":{},"body":{"coverage.html":{}}}],["4/4",{"_index":3291,"title":{},"body":{"coverage.html":{}}}],["40",{"_index":743,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"coverage.html":{}}}],["46",{"_index":3280,"title":{},"body":{"coverage.html":{}}}],["4b6878",{"_index":3412,"title":{},"body":{"miscellaneous/variables.html":{}}}],["4e6d70",{"_index":3439,"title":{},"body":{"miscellaneous/variables.html":{}}}],["5",{"_index":525,"title":{},"body":{"classes/BaseProvider.html":{},"components/ResultTimeline.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["5/46",{"_index":3218,"title":{},"body":{"coverage.html":{}}}],["5/5",{"_index":3284,"title":{},"body":{"coverage.html":{}}}],["50",{"_index":591,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsNodeInfoCard.html":{},"interfaces/NodeData.html":{},"interfaces/VisEvent.html":{},"coverage.html":{}}}],["500px",{"_index":3021,"title":{},"body":{"interfaces/VisEvent.html":{},"miscellaneous/variables.html":{}}}],["5px",{"_index":580,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsNodeInfoCard.html":{},"interfaces/NodeData.html":{}}}],["6",{"_index":2561,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{}}}],["6)*2",{"_index":3005,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["6.5.1",{"_index":3328,"title":{},"body":{"dependencies.html":{}}}],["6/19",{"_index":3289,"title":{},"body":{"coverage.html":{}}}],["6/6",{"_index":3301,"title":{},"body":{"coverage.html":{}}}],["600",{"_index":737,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{}}}],["600x400",{"_index":1153,"title":{},"body":{"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"components/NgxChart.html":{}}}],["64779e",{"_index":3414,"title":{},"body":{"miscellaneous/variables.html":{}}}],["69420",{"_index":1972,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{}}}],["6f9ba5",{"_index":3422,"title":{},"body":{"miscellaneous/variables.html":{}}}],["7",{"_index":1085,"title":{},"body":{"components/BsTooltipComponent.html":{}}}],["7.3.4",{"_index":3329,"title":{},"body":{"dependencies.html":{}}}],["7/62",{"_index":3314,"title":{},"body":{"coverage.html":{}}}],["75",{"_index":3251,"title":{},"body":{"coverage.html":{}}}],["7aa3e5",{"_index":1658,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["7acce5",{"_index":1663,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["8",{"_index":2995,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{},"index.html":{}}}],["8/38",{"_index":3276,"title":{},"body":{"coverage.html":{}}}],["8/39",{"_index":3237,"title":{},"body":{"coverage.html":{}}}],["80",{"_index":584,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsNodeInfoCard.html":{},"interfaces/NodeData.html":{}}}],["808080",{"_index":527,"title":{},"body":{"classes/BaseProvider.html":{}}}],["84",{"_index":2696,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["86400000",{"_index":2864,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["8ec3b9",{"_index":3406,"title":{},"body":{"miscellaneous/variables.html":{}}}],["8px",{"_index":1065,"title":{},"body":{"components/BsTooltipComponent.html":{}}}],["9",{"_index":730,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["9/25",{"_index":3300,"title":{},"body":{"coverage.html":{}}}],["9/29",{"_index":3303,"title":{},"body":{"coverage.html":{}}}],["9/38",{"_index":3224,"title":{},"body":{"coverage.html":{}}}],["90",{"_index":926,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{},"coverage.html":{}}}],["90px",{"_index":810,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["93",{"_index":3254,"title":{},"body":{"coverage.html":{}}}],["95",{"_index":3248,"title":{},"body":{"coverage.html":{}}}],["98a5be",{"_index":3428,"title":{},"body":{"miscellaneous/variables.html":{}}}],["_action",{"_index":3084,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["_actions",{"_index":3032,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["_datapoint",{"_index":1774,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["_datapoint.$item",{"_index":1779,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["_datapoint.name",{"_index":1776,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["_datapoint.value",{"_index":1777,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["_definance",{"_index":3443,"title":{},"body":{"miscellaneous/variables.html":{}}}],["_degooglemaps",{"_index":3449,"title":{},"body":{"miscellaneous/variables.html":{}}}],["_deheatmap",{"_index":3452,"title":{},"body":{"miscellaneous/variables.html":{}}}],["_enfinance",{"_index":3445,"title":{},"body":{"miscellaneous/variables.html":{}}}],["_engooglemaps",{"_index":3450,"title":{},"body":{"miscellaneous/variables.html":{}}}],["_enheatmap",{"_index":3455,"title":{},"body":{"miscellaneous/variables.html":{}}}],["_frfinance",{"_index":3447,"title":{},"body":{"miscellaneous/variables.html":{}}}],["_frgooglemaps",{"_index":3451,"title":{},"body":{"miscellaneous/variables.html":{}}}],["_frheatmap",{"_index":3458,"title":{},"body":{"miscellaneous/variables.html":{}}}],["_items",{"_index":2670,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["_networkinitialized",{"_index":3029,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["_queries",{"_index":1398,"title":{},"body":{"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/DynamicNodeType.html":{}}}],["_selectededge",{"_index":3031,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["_selectednode",{"_index":3030,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["a.count",{"_index":1043,"title":{},"body":{"components/BsNodeInfoCard.html":{},"interfaces/NodeData.html":{}}}],["a.date.gettime",{"_index":2958,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["a.name",{"_index":2044,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{}}}],["absolute",{"_index":1063,"title":{},"body":{"components/BsTooltipComponent.html":{}}}],["absolutely",{"_index":943,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["abstract",{"_index":1780,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["abstractfacet",{"_index":1655,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"components/MapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/VisEvent.html":{}}}],["abstractions",{"_index":771,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["access",{"_index":619,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/HeatmapItem.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeData.html":{},"interfaces/NodeType.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["accessible",{"_index":2816,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["accessor",{"_index":3194,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["accessors",{"_index":1074,"title":{},"body":{"components/BsTooltipComponent.html":{},"components/FacetNgxChart.html":{},"components/MapComponent.html":{},"components/NgxChart.html":{}}}],["accordingly",{"_index":1357,"title":{},"body":{"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/DynamicNodeType.html":{}}}],["account",{"_index":1613,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["accumulates",{"_index":490,"title":{},"body":{"classes/BaseProvider.html":{}}}],["act",{"_index":385,"title":{},"body":{"classes/AsyncRecordsProvider.html":{},"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["action",{"_index":45,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"components/MapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/VisEvent.html":{}}}],["action.children",{"_index":1685,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["action.icon",{"_index":463,"title":{},"body":{"classes/BaseProvider.html":{}}}],["action.name",{"_index":1683,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["action.text",{"_index":464,"title":{},"body":{"classes/BaseProvider.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["actions",{"_index":281,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"components/BsEdgeInfoCard.html":{},"components/BsNodeInfoCard.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"components/MapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/NodeData.html":{},"interfaces/RecordNode.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/VisEvent.html":{}}}],["actions.push(new",{"_index":288,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/BaseProvider.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{}}}],["actions.push(this.clearfilters",{"_index":1695,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["actions.push(this.createexpandaction(types[0",{"_index":309,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{}}}],["actions.push(this.selectfield",{"_index":1697,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["actions.unshift(new",{"_index":1466,"title":{},"body":{"interfaces/DynamicNodeType.html":{}}}],["activateaction",{"_index":333,"title":{},"body":{"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"classes/SelectedRecordsProvider.html":{}}}],["activated",{"_index":1179,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{}}}],["active",{"_index":334,"title":{},"body":{"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/VisEvent.html":{}}}],["actual",{"_index":2970,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["actual_component",{"_index":686,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"components/BsTooltipComponent.html":{},"components/FacetNgxChart.html":{},"components/MapComponent.html":{},"components/NgxChart.html":{},"components/ResultTimeline.html":{}}}],["actually",{"_index":758,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{},"miscellaneous/functions.html":{}}}],["actualwidth",{"_index":914,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["adapted",{"_index":2522,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["add",{"_index":85,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/BaseProvider.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["add/replace",{"_index":2615,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["addaggregationnodes(item",{"_index":210,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{}}}],["addcustomedge(recordnode",{"_index":1268,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{}}}],["adddynamicedges(sourcenodes",{"_index":1408,"title":{},"body":{"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{}}}],["added",{"_index":74,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["addedge(edge",{"_index":1637,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["addedges",{"_index":2180,"title":{},"body":{"classes/NetworkDataset.html":{}}}],["addedges(edges",{"_index":1548,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["addition",{"_index":1275,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{}}}],["additional",{"_index":89,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"interfaces/DynamicNodeType.html":{},"miscellaneous/functions.html":{}}}],["additionally",{"_index":1184,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{},"miscellaneous/functions.html":{}}}],["addnode(node",{"_index":1634,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["addnodes",{"_index":2181,"title":{},"body":{"classes/NetworkDataset.html":{}}}],["addnodes(nodes",{"_index":1543,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["addrecordnodes(records",{"_index":1195,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{}}}],["adds",{"_index":198,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{}}}],["addstructuraledge(dataset",{"_index":1243,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{}}}],["addstructuraledges(node",{"_index":1209,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{}}}],["adjacent",{"_index":417,"title":{},"body":{"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"classes/SelectedRecordsProvider.html":{}}}],["adjust",{"_index":405,"title":{},"body":{"classes/AsyncRecordsProvider.html":{},"components/BsHeatmapComponent.html":{},"interfaces/CustomData.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/RecordNode.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{}}}],["adjusts",{"_index":396,"title":{},"body":{"classes/AsyncRecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{}}}],["administrative.country",{"_index":3410,"title":{},"body":{"miscellaneous/variables.html":{}}}],["administrative.land_parcel",{"_index":3413,"title":{},"body":{"miscellaneous/variables.html":{}}}],["administrative.province",{"_index":3415,"title":{},"body":{"miscellaneous/variables.html":{}}}],["afterviewinit",{"_index":688,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["agg",{"_index":303,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["aggregate",{"_index":156,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["aggregation",{"_index":34,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"miscellaneous/functions.html":{}}}],["aggregation.items",{"_index":188,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["aggregation.items.foreach(item",{"_index":194,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{}}}],["aggregation.items.length",{"_index":193,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{}}}],["aggregation.items.map(item",{"_index":2653,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["aggregation.name",{"_index":191,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["aggregationdata",{"_index":1,"title":{"interfaces/AggregationData.html":{}},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"coverage.html":{}}}],["aggregationedge",{"_index":60,"title":{"interfaces/AggregationEdge.html":{}},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"coverage.html":{}}}],["aggregationedgetype",{"_index":20,"title":{"interfaces/AggregationEdgeType.html":{}},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["aggregationedgetype).aggregation",{"_index":126,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{}}}],["aggregationitem",{"_index":35,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["aggregationname",{"_index":2571,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["aggregationprovider",{"_index":131,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"coverage.html":{}}}],["aggregations",{"_index":128,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["aggregations.foreach(aggregation",{"_index":186,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{}}}],["aggregationtriggertype",{"_index":81,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"miscellaneous/typealiases.html":{}}}],["agm/core",{"_index":1842,"title":{},"body":{"modules/GoogleMapsModule.html":{},"components/MapComponent.html":{},"dependencies.html":{}}}],["agmcoremodule",{"_index":1841,"title":{},"body":{"modules/GoogleMapsModule.html":{}}}],["agminfowindow",{"_index":1889,"title":{},"body":{"components/MapComponent.html":{}}}],["algorithm",{"_index":2945,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["aliases",{"_index":3391,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["align",{"_index":1089,"title":{},"body":{"components/BsTooltipComponent.html":{}}}],["all_dates",{"_index":2320,"title":{},"body":{"components/ResultTimeline.html":{}}}],["all_dates.indexof(dateobj.display",{"_index":2351,"title":{},"body":{"components/ResultTimeline.html":{}}}],["all_dates.push(cooc[1",{"_index":2344,"title":{},"body":{"components/ResultTimeline.html":{}}}],["all_ids",{"_index":2319,"title":{},"body":{"components/ResultTimeline.html":{}}}],["all_ids.indexof(id",{"_index":2341,"title":{},"body":{"components/ResultTimeline.html":{}}}],["all_ids.push(id",{"_index":2345,"title":{},"body":{"components/ResultTimeline.html":{}}}],["allen",{"_index":3383,"title":{},"body":{"miscellaneous/functions.html":{}}}],["allow",{"_index":78,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"miscellaneous/typealiases.html":{}}}],["allowing",{"_index":283,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{},"classes/SelectedRecordsProvider.html":{}}}],["allows",{"_index":506,"title":{},"body":{"classes/BaseProvider.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{}}}],["allprimarydates",{"_index":2828,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["allprimarydates.length",{"_index":2837,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["along",{"_index":2491,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["already",{"_index":273,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["alt",{"_index":468,"title":{},"body":{"classes/BaseProvider.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/VisEvent.html":{}}}],["alternative",{"_index":952,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["alternatively",{"_index":415,"title":{},"body":{"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["always",{"_index":861,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"interfaces/HeatmapItem.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["amount",{"_index":2057,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{}}}],["amount.split",{"_index":2062,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{}}}],["anchor",{"_index":896,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["and/or",{"_index":382,"title":{},"body":{"classes/AsyncRecordsProvider.html":{},"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["angular",{"_index":764,"title":{},"body":{"components/BsHeatmapComponent.html":{},"modules/FusionChartsModule.html":{},"interfaces/HeatmapItem.html":{},"dependencies.html":{}}}],["angular/common",{"_index":990,"title":{},"body":{"modules/BsHeatmapModule.html":{},"modules/BsTimelineModule.html":{},"modules/FinanceModule.html":{},"modules/FusionChartsModule.html":{},"modules/GoogleMapsModule.html":{},"modules/NetworkModule.html":{},"modules/NgxChartsModule.html":{},"modules/VisTimelineModule.html":{}}}],["angular/core",{"_index":610,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsHeatmapComponent.html":{},"modules/BsHeatmapModule.html":{},"components/BsNodeInfoCard.html":{},"modules/BsTimelineModule.html":{},"components/BsTooltipComponent.html":{},"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"modules/FinanceModule.html":{},"modules/FusionChartsModule.html":{},"modules/GoogleMapsModule.html":{},"interfaces/HeatmapItem.html":{},"components/MapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"modules/NetworkModule.html":{},"components/NgxChart.html":{},"modules/NgxChartsModule.html":{},"interfaces/NodeData.html":{},"components/ResultTimeline.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{},"modules/VisTimelineModule.html":{}}}],["angular/forms",{"_index":993,"title":{},"body":{"modules/BsHeatmapModule.html":{},"modules/BsTimelineModule.html":{},"modules/NetworkModule.html":{},"interfaces/VisEvent.html":{}}}],["angular/modules/components/selection.html#selection",{"_index":2391,"title":{},"body":{"classes/SelectedRecordsProvider.html":{}}}],["animation",{"_index":626,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsNodeInfoCard.html":{},"interfaces/NodeData.html":{}}}],["another",{"_index":1581,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"components/MapComponent.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["anymore",{"_index":1391,"title":{},"body":{"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/DynamicNodeType.html":{}}}],["api.ts",{"_index":3309,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["app",{"_index":3023,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["appear",{"_index":2798,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["append(\"g",{"_index":2804,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["apple/steve",{"_index":225,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{}}}],["apply",{"_index":439,"title":{},"body":{"classes/BaseProvider.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["appropriate",{"_index":3117,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["appservice",{"_index":1479,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/VisEvent.html":{}}}],["april",{"_index":2686,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["area",{"_index":1911,"title":{},"body":{"components/MapComponent.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["areachartmodule",{"_index":2266,"title":{},"body":{"modules/NgxChartsModule.html":{}}}],["areastyles",{"_index":2410,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{}}}],["around",{"_index":1938,"title":{},"body":{"components/MapComponent.html":{}}}],["array",{"_index":1034,"title":{},"body":{"components/BsNodeInfoCard.html":{},"interfaces/NodeData.html":{}}}],["array.from(new",{"_index":836,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["array.from(this.edgeidx.keys",{"_index":1539,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["array.from(this.edgeidx.values",{"_index":1529,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["array.from(this.nodeidx.keys",{"_index":1537,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["array.from(this.nodeidx.values",{"_index":1527,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["array.isarray(edges",{"_index":1549,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["array.isarray(ids",{"_index":1556,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["array.isarray(nodes",{"_index":1544,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["arrow",{"_index":508,"title":{},"body":{"classes/BaseProvider.html":{},"components/BsTooltipComponent.html":{}}}],["arrows",{"_index":1322,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{}}}],["articles",{"_index":3375,"title":{},"body":{"miscellaneous/functions.html":{}}}],["asks",{"_index":3366,"title":{},"body":{"miscellaneous/functions.html":{}}}],["associate",{"_index":1873,"title":{},"body":{"components/MapComponent.html":{}}}],["assume",{"_index":206,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{}}}],["assumed",{"_index":199,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{}}}],["assuming",{"_index":223,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{}}}],["async",{"_index":2981,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{}}}],["asynchronous",{"_index":367,"title":{},"body":{"classes/AsyncRecordsProvider.html":{}}}],["asynchronously",{"_index":247,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"miscellaneous/functions.html":{}}}],["asyncrecordsprovider",{"_index":323,"title":{"classes/AsyncRecordsProvider.html":{}},"body":{"classes/AsyncRecordsProvider.html":{},"coverage.html":{}}}],["asyncrecordsproviderdemo",{"_index":3261,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["asyncrecordsproviderdemo(providerfactory",{"_index":3338,"title":{},"body":{"miscellaneous/functions.html":{}}}],["attach",{"_index":209,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/DynamicNodeType.html":{}}}],["attached",{"_index":387,"title":{},"body":{"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"components/NgxChart.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"miscellaneous/functions.html":{}}}],["attr(\"class",{"_index":2805,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["attr(\"d",{"_index":2809,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["attr(\"display",{"_index":2807,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["attr(\"text",{"_index":2811,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["attr(\"transform",{"_index":892,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["attr(\"x",{"_index":2813,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["attr(\"y",{"_index":2814,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["audit",{"_index":2467,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["auditeventtype",{"_index":2418,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["auditwebservice",{"_index":2417,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["auto",{"_index":908,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{}}}],["automatically",{"_index":103,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"components/BsHeatmapComponent.html":{},"interfaces/CustomData.html":{},"interfaces/HeatmapItem.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{}}}],["available",{"_index":1414,"title":{},"body":{"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/DynamicNodeType.html":{}}}],["avoid",{"_index":261,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"components/BsHeatmapComponent.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/HeatmapItem.html":{},"components/MapComponent.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/VisEvent.html":{}}}],["avoiding",{"_index":1149,"title":{},"body":{"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"components/NgxChart.html":{}}}],["axes",{"_index":760,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["axis",{"_index":766,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"components/ResultTimeline.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{},"miscellaneous/variables.html":{}}}],["axis.clickable",{"_index":953,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["axis/scales",{"_index":823,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["axisclickable",{"_index":713,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["axisclicked",{"_index":723,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["b).map(this.xt.invert",{"_index":2912,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["b.count",{"_index":1042,"title":{},"body":{"components/BsNodeInfoCard.html":{},"interfaces/NodeData.html":{}}}],["b.date.gettime",{"_index":2959,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["b0d5ce",{"_index":3432,"title":{},"body":{"miscellaneous/variables.html":{}}}],["ballmer",{"_index":3381,"title":{},"body":{"miscellaneous/functions.html":{}}}],["bar",{"_index":1659,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["barack",{"_index":3367,"title":{},"body":{"miscellaneous/functions.html":{}}}],["barchartmodule",{"_index":2267,"title":{},"body":{"modules/NgxChartsModule.html":{}}}],["barhorizontalcomponent",{"_index":1101,"title":{},"body":{"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"components/NgxChart.html":{}}}],["barverticalcomponent",{"_index":1100,"title":{},"body":{"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"components/NgxChart.html":{}}}],["base",{"_index":53,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["basechartcomponent",{"_index":1099,"title":{},"body":{"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"components/NgxChart.html":{}}}],["based",{"_index":1473,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{}}}],["baseprovider",{"_index":52,"title":{"classes/BaseProvider.html":{}},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"coverage.html":{}}}],["baseprovider:15",{"_index":361,"title":{},"body":{"classes/AsyncRecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{}}}],["baseprovider:151",{"_index":422,"title":{},"body":{"classes/AsyncRecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{}}}],["baseprovider:155",{"_index":408,"title":{},"body":{"classes/AsyncRecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{}}}],["baseprovider:159",{"_index":425,"title":{},"body":{"classes/AsyncRecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{}}}],["baseprovider:16",{"_index":359,"title":{},"body":{"classes/AsyncRecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{}}}],["baseprovider:163",{"_index":431,"title":{},"body":{"classes/AsyncRecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{}}}],["baseprovider:167",{"_index":429,"title":{},"body":{"classes/AsyncRecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{}}}],["baseprovider:171",{"_index":428,"title":{},"body":{"classes/AsyncRecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{}}}],["baseprovider:179",{"_index":424,"title":{},"body":{"classes/AsyncRecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{}}}],["baseprovider:18",{"_index":362,"title":{},"body":{"classes/AsyncRecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{}}}],["baseprovider:188",{"_index":421,"title":{},"body":{"classes/AsyncRecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{}}}],["baseprovider:21",{"_index":357,"title":{},"body":{"classes/AsyncRecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{}}}],["baseprovider:211",{"_index":410,"title":{},"body":{"classes/AsyncRecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{}}}],["baseprovider:23",{"_index":364,"title":{},"body":{"classes/AsyncRecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{}}}],["baseprovider:245",{"_index":426,"title":{},"body":{"classes/AsyncRecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{}}}],["baseprovider:25",{"_index":360,"title":{},"body":{"classes/AsyncRecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{}}}],["baseprovider:28",{"_index":363,"title":{},"body":{"classes/AsyncRecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{}}}],["become",{"_index":3371,"title":{},"body":{"miscellaneous/functions.html":{}}}],["before",{"_index":862,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{}}}],["behavior",{"_index":2850,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["behaviors",{"_index":2726,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["bellow",{"_index":2776,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["belong",{"_index":171,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["below",{"_index":2664,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["benefit",{"_index":770,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["bestaggregation",{"_index":2606,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["beta.0",{"_index":3322,"title":{},"body":{"dependencies.html":{}}}],["better",{"_index":951,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["between",{"_index":473,"title":{},"body":{"classes/BaseProvider.html":{},"interfaces/CustomData.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"miscellaneous/functions.html":{}}}],["bill",{"_index":203,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/BaseProvider.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{},"miscellaneous/functions.html":{}}}],["bin",{"_index":2938,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["black",{"_index":1736,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["block",{"_index":945,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["boolean",{"_index":29,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"components/BsEdgeInfoCard.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"interfaces/HeatmapItem.html":{},"components/MapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"components/NgxChart.html":{},"interfaces/Node.html":{},"interfaces/NodeData.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{}}}],["bootstrap",{"_index":980,"title":{},"body":{"modules/BsHeatmapModule.html":{},"modules/BsTimelineModule.html":{},"modules/FinanceModule.html":{},"modules/FusionChartsModule.html":{},"modules/GoogleMapsModule.html":{},"modules/NetworkModule.html":{},"modules/NgxChartsModule.html":{},"modules/VisTimelineModule.html":{},"index.html":{}}}],["border",{"_index":589,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsNodeInfoCard.html":{},"components/BsTooltipComponent.html":{},"interfaces/NodeData.html":{}}}],["both",{"_index":388,"title":{},"body":{"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["bottom",{"_index":741,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{}}}],["bounds",{"_index":1847,"title":{},"body":{"components/MapComponent.html":{}}}],["bracket",{"_index":2684,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["briefly",{"_index":1150,"title":{},"body":{"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"components/NgxChart.html":{}}}],["browse",{"_index":3389,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":3388,"title":{},"body":{"modules.html":{}}}],["brush",{"_index":2735,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["brush's",{"_index":2896,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["brushbehavior",{"_index":2727,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["brushing",{"_index":2740,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["brushselection",{"_index":2731,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["bsactionmodule",{"_index":998,"title":{},"body":{"modules/BsHeatmapModule.html":{},"modules/BsTimelineModule.html":{},"modules/FinanceModule.html":{},"modules/GoogleMapsModule.html":{},"modules/NetworkModule.html":{}}}],["bsedgeinfocard",{"_index":567,"title":{"components/BsEdgeInfoCard.html":{}},"body":{"components/BsEdgeInfoCard.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"components/BsTooltipComponent.html":{},"components/FacetNgxChart.html":{},"components/MapComponent.html":{},"modules/NetworkModule.html":{},"components/NgxChart.html":{},"components/ResultTimeline.html":{},"coverage.html":{},"index.html":{}}}],["bsfacetheatmapcomponent",{"_index":656,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsHeatmapComponent.html":{},"modules/BsHeatmapModule.html":{},"components/BsNodeInfoCard.html":{},"components/BsTooltipComponent.html":{},"components/FacetNgxChart.html":{},"components/MapComponent.html":{},"components/NgxChart.html":{},"components/ResultTimeline.html":{},"coverage.html":{},"index.html":{}}}],["bsfacetmodule",{"_index":1840,"title":{},"body":{"modules/GoogleMapsModule.html":{},"modules/NetworkModule.html":{}}}],["bsfacettimelinecomponent",{"_index":659,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"modules/BsTimelineModule.html":{},"components/BsTooltipComponent.html":{},"components/FacetNgxChart.html":{},"components/MapComponent.html":{},"components/NgxChart.html":{},"components/ResultTimeline.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"coverage.html":{},"index.html":{}}}],["bsfacettimelinecomponent.createaggregationevents(config",{"_index":2553,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["bsfacettimelinecomponent.createtimeseries(config",{"_index":2548,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["bsfacettimelinecomponent.defaultrecordstyle(r.$selected",{"_index":2566,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["bsheatmapcomponent",{"_index":661,"title":{"components/BsHeatmapComponent.html":{}},"body":{"components/BsEdgeInfoCard.html":{},"components/BsHeatmapComponent.html":{},"modules/BsHeatmapModule.html":{},"components/BsNodeInfoCard.html":{},"components/BsTooltipComponent.html":{},"components/FacetNgxChart.html":{},"interfaces/HeatmapItem.html":{},"components/MapComponent.html":{},"components/NgxChart.html":{},"components/ResultTimeline.html":{},"coverage.html":{},"index.html":{}}}],["bsheatmapmodule",{"_index":976,"title":{"modules/BsHeatmapModule.html":{}},"body":{"modules/BsHeatmapModule.html":{},"modules/BsTimelineModule.html":{},"modules/FinanceModule.html":{},"index.html":{},"modules.html":{}}}],["bsnodeinfocard",{"_index":662,"title":{"components/BsNodeInfoCard.html":{}},"body":{"components/BsEdgeInfoCard.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"components/BsTooltipComponent.html":{},"components/FacetNgxChart.html":{},"components/MapComponent.html":{},"modules/NetworkModule.html":{},"components/NgxChart.html":{},"interfaces/NodeData.html":{},"components/ResultTimeline.html":{},"coverage.html":{},"index.html":{}}}],["bsresultsheatmapview",{"_index":663,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsHeatmapComponent.html":{},"modules/BsHeatmapModule.html":{},"components/BsNodeInfoCard.html":{},"components/BsTooltipComponent.html":{},"components/FacetNgxChart.html":{},"components/MapComponent.html":{},"components/NgxChart.html":{},"components/ResultTimeline.html":{},"coverage.html":{},"index.html":{}}}],["bsselectionmodule",{"_index":996,"title":{},"body":{"modules/BsHeatmapModule.html":{},"modules/BsTimelineModule.html":{},"modules/FusionChartsModule.html":{},"modules/GoogleMapsModule.html":{},"modules/NgxChartsModule.html":{}}}],["bstimelinecomponent",{"_index":666,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"modules/BsTimelineModule.html":{},"components/BsTooltipComponent.html":{},"components/FacetNgxChart.html":{},"components/MapComponent.html":{},"components/NgxChart.html":{},"components/ResultTimeline.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{},"coverage.html":{},"index.html":{}}}],["bstimelinecomponent.counter",{"_index":2746,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["bstimelinemodule",{"_index":1049,"title":{"modules/BsTimelineModule.html":{}},"body":{"modules/BsTimelineModule.html":{},"index.html":{},"modules.html":{}}}],["bstooltipcomponent",{"_index":667,"title":{"components/BsTooltipComponent.html":{}},"body":{"components/BsEdgeInfoCard.html":{},"components/BsHeatmapComponent.html":{},"modules/BsHeatmapModule.html":{},"components/BsNodeInfoCard.html":{},"components/BsTooltipComponent.html":{},"components/FacetNgxChart.html":{},"components/MapComponent.html":{},"components/NgxChart.html":{},"components/ResultTimeline.html":{},"coverage.html":{},"index.html":{}}}],["buckets",{"_index":714,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["bugs",{"_index":3105,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["build",{"_index":763,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["buildchart",{"_index":707,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["buildchart(update",{"_index":756,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["builds",{"_index":759,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["built",{"_index":1667,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["button",{"_index":1353,"title":{},"body":{"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{}}}],["c",{"_index":1991,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{}}}],["c3e6cb",{"_index":1661,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["cache",{"_index":1364,"title":{},"body":{"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/DynamicNodeType.html":{}}}],["call",{"_index":368,"title":{},"body":{"classes/AsyncRecordsProvider.html":{},"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{}}}],["call(d3.axisleft(this.y).ticksize(0",{"_index":883,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["call(d3.axistop(this.x).ticksize(0",{"_index":879,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["call(this.brushbehavior",{"_index":2794,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["call(this.zoombehavior",{"_index":2872,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["callbacks",{"_index":2610,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{}}}],["called",{"_index":262,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"components/BsHeatmapComponent.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/HeatmapItem.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{}}}],["calling",{"_index":2028,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["calls",{"_index":3186,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["cancel",{"_index":1508,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["candy",{"_index":1833,"title":{},"body":{"modules/FusionChartsModule.html":{}}}],["candytheme",{"_index":1830,"title":{},"body":{"modules/FusionChartsModule.html":{}}}],["card",{"_index":578,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsNodeInfoCard.html":{},"interfaces/NodeData.html":{}}}],["card'},{'name",{"_index":655,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"components/BsTooltipComponent.html":{},"components/FacetNgxChart.html":{},"components/MapComponent.html":{},"components/NgxChart.html":{},"components/ResultTimeline.html":{}}}],["card.component",{"_index":2218,"title":{},"body":{"modules/NetworkModule.html":{}}}],["card.component.html",{"_index":595,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsNodeInfoCard.html":{},"interfaces/NodeData.html":{}}}],["card.component.ts",{"_index":574,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsNodeInfoCard.html":{},"interfaces/NodeData.html":{},"coverage.html":{}}}],["card.component.ts:24",{"_index":601,"title":{},"body":{"components/BsEdgeInfoCard.html":{}}}],["card.component.ts:26",{"_index":605,"title":{},"body":{"components/BsEdgeInfoCard.html":{}}}],["card.component.ts:27",{"_index":606,"title":{},"body":{"components/BsEdgeInfoCard.html":{}}}],["card.component.ts:29",{"_index":607,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsNodeInfoCard.html":{}}}],["card.component.ts:30",{"_index":608,"title":{},"body":{"components/BsEdgeInfoCard.html":{}}}],["card.component.ts:31",{"_index":1007,"title":{},"body":{"components/BsNodeInfoCard.html":{}}}],["card.component.ts:32",{"_index":604,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsNodeInfoCard.html":{}}}],["card.component.ts:34",{"_index":1010,"title":{},"body":{"components/BsNodeInfoCard.html":{}}}],["card.component.ts:36",{"_index":1009,"title":{},"body":{"components/BsNodeInfoCard.html":{}}}],["card.component.ts:38",{"_index":1006,"title":{},"body":{"components/BsNodeInfoCard.html":{}}}],["card.component.ts:40",{"_index":603,"title":{},"body":{"components/BsEdgeInfoCard.html":{}}}],["card.component.ts:70",{"_index":1005,"title":{},"body":{"components/BsNodeInfoCard.html":{}}}],["cards",{"_index":634,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsNodeInfoCard.html":{},"interfaces/NodeData.html":{},"interfaces/VisEvent.html":{}}}],["case",{"_index":1138,"title":{},"body":{"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/DynamicNodeType.html":{},"components/NgxChart.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"miscellaneous/functions.html":{}}}],["catch",{"_index":2359,"title":{},"body":{"components/ResultTimeline.html":{}}}],["categories",{"_index":1982,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{}}}],["category",{"_index":1958,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{}}}],["cause",{"_index":2980,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["caused",{"_index":2027,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["ccaggregation",{"_index":2416,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["ccaggregation?.mask",{"_index":2649,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["cdref",{"_index":1997,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{}}}],["centered",{"_index":1937,"title":{},"body":{"components/MapComponent.html":{}}}],["change",{"_index":2777,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["change.currentvalue",{"_index":2977,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["change.previousvalue",{"_index":2975,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["changed",{"_index":2024,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["changedetectorref",{"_index":1961,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{}}}],["changes",{"_index":777,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"interfaces/HeatmapItem.html":{},"components/MapComponent.html":{},"components/NgxChart.html":{},"components/ResultTimeline.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"miscellaneous/functions.html":{}}}],["changes[\"data",{"_index":2784,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["changes[\"events",{"_index":2503,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["changes[\"results",{"_index":1757,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{}}}],["changes[\"selection",{"_index":2779,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["changes[\"timeseries",{"_index":2495,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["changes[\"width",{"_index":2789,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["changes['dates",{"_index":2313,"title":{},"body":{"components/ResultTimeline.html":{}}}],["changes['events",{"_index":2314,"title":{},"body":{"components/ResultTimeline.html":{}}}],["changes['providers",{"_index":3051,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["chart",{"_index":761,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"modules/FusionChartsModule.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyDatum.html":{},"components/NgxChart.html":{},"modules/NgxChartsModule.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["chart's",{"_index":2143,"title":{},"body":{"interfaces/MoneyDatum.html":{}}}],["chart'},{'name",{"_index":671,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"components/BsTooltipComponent.html":{},"components/FacetNgxChart.html":{},"components/MapComponent.html":{},"components/NgxChart.html":{},"components/ResultTimeline.html":{}}}],["chart.html",{"_index":1108,"title":{},"body":{"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"components/NgxChart.html":{}}}],["chart.scss",{"_index":1109,"title":{},"body":{"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"components/NgxChart.html":{}}}],["chart.ts",{"_index":1651,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"coverage.html":{}}}],["chart.ts:100",{"_index":1809,"title":{},"body":{"components/FacetNgxChart.html":{}}}],["chart.ts:114",{"_index":1798,"title":{},"body":{"components/FacetNgxChart.html":{}}}],["chart.ts:191",{"_index":1807,"title":{},"body":{"components/FacetNgxChart.html":{}}}],["chart.ts:206",{"_index":1803,"title":{},"body":{"components/FacetNgxChart.html":{}}}],["chart.ts:21",{"_index":1793,"title":{},"body":{"components/FacetNgxChart.html":{}}}],["chart.ts:217",{"_index":1801,"title":{},"body":{"components/FacetNgxChart.html":{}}}],["chart.ts:22",{"_index":1787,"title":{},"body":{"components/FacetNgxChart.html":{}}}],["chart.ts:23",{"_index":1788,"title":{},"body":{"components/FacetNgxChart.html":{}}}],["chart.ts:232",{"_index":1802,"title":{},"body":{"components/FacetNgxChart.html":{}}}],["chart.ts:237",{"_index":1795,"title":{},"body":{"components/FacetNgxChart.html":{}}}],["chart.ts:24",{"_index":1789,"title":{},"body":{"components/FacetNgxChart.html":{}}}],["chart.ts:25",{"_index":1791,"title":{},"body":{"components/FacetNgxChart.html":{}}}],["chart.ts:253",{"_index":1799,"title":{},"body":{"components/FacetNgxChart.html":{}}}],["chart.ts:257",{"_index":1796,"title":{},"body":{"components/FacetNgxChart.html":{}}}],["chart.ts:26",{"_index":1790,"title":{},"body":{"components/FacetNgxChart.html":{}}}],["chart.ts:266",{"_index":1800,"title":{},"body":{"components/FacetNgxChart.html":{}}}],["chart.ts:27",{"_index":1792,"title":{},"body":{"components/FacetNgxChart.html":{}}}],["chart.ts:28",{"_index":1794,"title":{},"body":{"components/FacetNgxChart.html":{}}}],["chart.ts:31",{"_index":1804,"title":{},"body":{"components/FacetNgxChart.html":{}}}],["chart.ts:34",{"_index":1805,"title":{},"body":{"components/FacetNgxChart.html":{}}}],["chart.ts:35",{"_index":1806,"title":{},"body":{"components/FacetNgxChart.html":{}}}],["chart.ts:46",{"_index":1786,"title":{},"body":{"components/FacetNgxChart.html":{}}}],["chart.ts:93",{"_index":1797,"title":{},"body":{"components/FacetNgxChart.html":{}}}],["chart/chart",{"_index":1653,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"modules/FusionChartsModule.html":{},"modules/NgxChartsModule.html":{}}}],["chart/facet",{"_index":1650,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"modules/NgxChartsModule.html":{},"coverage.html":{}}}],["chartcomponent",{"_index":2229,"title":{},"body":{"components/NgxChart.html":{}}}],["chartcomponent(type",{"_index":2235,"title":{},"body":{"components/NgxChart.html":{}}}],["chartcomponent(type:string",{"_index":1136,"title":{},"body":{"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"components/NgxChart.html":{}}}],["chartdatapoint",{"_index":1092,"title":{"interfaces/ChartDataPoint.html":{}},"body":{"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"components/NgxChart.html":{},"coverage.html":{}}}],["chartoptions",{"_index":1105,"title":{"interfaces/ChartOptions.html":{}},"body":{"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"components/NgxChart.html":{},"coverage.html":{}}}],["charts",{"_index":1103,"title":{},"body":{"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"modules/FusionChartsModule.html":{},"components/NgxChart.html":{},"modules/NgxChartsModule.html":{},"dependencies.html":{}}}],["charts.module.ts",{"_index":2265,"title":{},"body":{"modules/NgxChartsModule.html":{}}}],["charts/chart/chart.ts",{"_index":1093,"title":{},"body":{"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"components/NgxChart.html":{},"coverage.html":{}}}],["charts/chart/chart.ts:28",{"_index":2233,"title":{},"body":{"components/NgxChart.html":{}}}],["charts/chart/chart.ts:29",{"_index":2232,"title":{},"body":{"components/NgxChart.html":{}}}],["charts/chart/chart.ts:30",{"_index":2234,"title":{},"body":{"components/NgxChart.html":{}}}],["charts/chart/chart.ts:31",{"_index":2249,"title":{},"body":{"components/NgxChart.html":{}}}],["charts/chart/chart.ts:32",{"_index":2247,"title":{},"body":{"components/NgxChart.html":{}}}],["charts/chart/chart.ts:33",{"_index":2243,"title":{},"body":{"components/NgxChart.html":{}}}],["charts/chart/chart.ts:34",{"_index":2244,"title":{},"body":{"components/NgxChart.html":{}}}],["charts/chart/chart.ts:35",{"_index":2231,"title":{},"body":{"components/NgxChart.html":{}}}],["charts/chart/chart.ts:43",{"_index":2241,"title":{},"body":{"components/NgxChart.html":{}}}],["charts/chart/chart.ts:49",{"_index":2240,"title":{},"body":{"components/NgxChart.html":{}}}],["charts/chart/chart.ts:57",{"_index":2239,"title":{},"body":{"components/NgxChart.html":{}}}],["charts/chart/chart.ts:62",{"_index":2251,"title":{},"body":{"components/NgxChart.html":{}}}],["charts/chart/chart.ts:66",{"_index":2236,"title":{},"body":{"components/NgxChart.html":{}}}],["charts/chart/chart.ts:75",{"_index":2253,"title":{},"body":{"components/NgxChart.html":{}}}],["charts/chart/chart.ts:79",{"_index":2238,"title":{},"body":{"components/NgxChart.html":{}}}],["charts/chart/chart.ts:83",{"_index":2237,"title":{},"body":{"components/NgxChart.html":{}}}],["charts/chart/chart.ts:92",{"_index":2245,"title":{},"body":{"components/NgxChart.html":{}}}],["charts/facet",{"_index":1649,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"coverage.html":{}}}],["charts/ngx",{"_index":2264,"title":{},"body":{"modules/NgxChartsModule.html":{}}}],["charttype",{"_index":1134,"title":{},"body":{"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"components/NgxChart.html":{}}}],["check",{"_index":2025,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["checkdatachanges(change",{"_index":2973,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["children",{"_index":313,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"interfaces/VisEvent.html":{}}}],["circle",{"_index":293,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{}}}],["circular",{"_index":585,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsNodeInfoCard.html":{},"interfaces/NodeData.html":{}}}],["class",{"_index":130,"title":{"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"classes/NetworkDataset.html":{},"classes/SelectedRecordsProvider.html":{}},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"components/BsEdgeInfoCard.html":{},"components/BsHeatmapComponent.html":{},"modules/BsHeatmapModule.html":{},"components/BsNodeInfoCard.html":{},"modules/BsTimelineModule.html":{},"components/BsTooltipComponent.html":{},"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"modules/FinanceModule.html":{},"modules/FusionChartsModule.html":{},"modules/GoogleMapsModule.html":{},"interfaces/HeatmapItem.html":{},"components/MapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"modules/NetworkModule.html":{},"interfaces/NetworkProvider.html":{},"components/NgxChart.html":{},"modules/NgxChartsModule.html":{},"interfaces/Node.html":{},"interfaces/NodeData.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"components/ResultTimeline.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{},"modules/VisTimelineModule.html":{},"coverage.html":{}}}],["class=\"mr",{"_index":643,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsNodeInfoCard.html":{}}}],["classes",{"_index":324,"title":{},"body":{"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"classes/NetworkDataset.html":{},"classes/SelectedRecordsProvider.html":{},"index.html":{}}}],["cleanremovenode",{"_index":1554,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["cleanremovenode(nodeid",{"_index":1566,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["clear",{"_index":1540,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"components/MapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/VisEvent.html":{}}}],["clearfilters",{"_index":1668,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"components/MapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/VisEvent.html":{}}}],["clearing",{"_index":1912,"title":{},"body":{"components/MapComponent.html":{}}}],["clearly",{"_index":2986,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["clears",{"_index":1189,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{}}}],["click",{"_index":1111,"title":{},"body":{"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"components/FacetNgxChart.html":{},"components/NgxChart.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{}}}],["click(datapoint",{"_index":1766,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["clicked",{"_index":263,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"components/MapComponent.html":{},"interfaces/MoneyDatum.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/VisEvent.html":{},"miscellaneous/functions.html":{}}}],["clicks",{"_index":781,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/DynamicNodeType.html":{}}}],["close",{"_index":1331,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["closed",{"_index":596,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsNodeInfoCard.html":{},"components/MapComponent.html":{},"interfaces/NodeData.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/VisEvent.html":{}}}],["closeness",{"_index":2940,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["closetooltip",{"_index":2640,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["closewindow",{"_index":1853,"title":{},"body":{"components/MapComponent.html":{}}}],["cloud",{"_index":1964,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{}}}],["cloud'},{'name",{"_index":678,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"components/BsTooltipComponent.html":{},"components/FacetNgxChart.html":{},"components/MapComponent.html":{},"components/NgxChart.html":{},"components/ResultTimeline.html":{}}}],["cloud.component",{"_index":1818,"title":{},"body":{"modules/FinanceModule.html":{}}}],["cloud.component.html",{"_index":1965,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{}}}],["cloud.component.scss",{"_index":1966,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{}}}],["cloud.component.ts",{"_index":1957,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"coverage.html":{}}}],["cloud/money",{"_index":1817,"title":{},"body":{"modules/FinanceModule.html":{},"interfaces/MoneyCloudDatum.html":{},"coverage.html":{}}}],["clunky",{"_index":1147,"title":{},"body":{"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"components/NgxChart.html":{}}}],["cluster_bsheatmapmodule",{"_index":982,"title":{},"body":{"modules/BsHeatmapModule.html":{},"index.html":{}}}],["cluster_bsheatmapmodule_declarations",{"_index":983,"title":{},"body":{"modules/BsHeatmapModule.html":{},"index.html":{}}}],["cluster_bsheatmapmodule_exports",{"_index":984,"title":{},"body":{"modules/BsHeatmapModule.html":{},"index.html":{}}}],["cluster_bstimelinemodule",{"_index":1050,"title":{},"body":{"modules/BsTimelineModule.html":{},"index.html":{}}}],["cluster_bstimelinemodule_declarations",{"_index":1051,"title":{},"body":{"modules/BsTimelineModule.html":{},"index.html":{}}}],["cluster_bstimelinemodule_exports",{"_index":1053,"title":{},"body":{"modules/BsTimelineModule.html":{},"index.html":{}}}],["cluster_bstimelinemodule_imports",{"_index":1052,"title":{},"body":{"modules/BsTimelineModule.html":{}}}],["cluster_financemodule",{"_index":1811,"title":{},"body":{"modules/FinanceModule.html":{},"index.html":{}}}],["cluster_financemodule_declarations",{"_index":1812,"title":{},"body":{"modules/FinanceModule.html":{},"index.html":{}}}],["cluster_financemodule_exports",{"_index":1814,"title":{},"body":{"modules/FinanceModule.html":{},"index.html":{}}}],["cluster_financemodule_imports",{"_index":1813,"title":{},"body":{"modules/FinanceModule.html":{}}}],["cluster_fusionchartsmodule",{"_index":1820,"title":{},"body":{"modules/FusionChartsModule.html":{},"index.html":{}}}],["cluster_fusionchartsmodule_declarations",{"_index":1821,"title":{},"body":{"modules/FusionChartsModule.html":{},"index.html":{}}}],["cluster_fusionchartsmodule_exports",{"_index":1822,"title":{},"body":{"modules/FusionChartsModule.html":{},"index.html":{}}}],["cluster_googlemapsmodule",{"_index":1836,"title":{},"body":{"modules/GoogleMapsModule.html":{},"index.html":{}}}],["cluster_googlemapsmodule_declarations",{"_index":1837,"title":{},"body":{"modules/GoogleMapsModule.html":{},"index.html":{}}}],["cluster_googlemapsmodule_exports",{"_index":1838,"title":{},"body":{"modules/GoogleMapsModule.html":{},"index.html":{}}}],["cluster_networkmodule",{"_index":2210,"title":{},"body":{"modules/NetworkModule.html":{},"index.html":{}}}],["cluster_networkmodule_declarations",{"_index":2211,"title":{},"body":{"modules/NetworkModule.html":{},"index.html":{}}}],["cluster_networkmodule_exports",{"_index":2212,"title":{},"body":{"modules/NetworkModule.html":{},"index.html":{}}}],["cluster_ngxchartsmodule",{"_index":2261,"title":{},"body":{"modules/NgxChartsModule.html":{},"index.html":{}}}],["cluster_ngxchartsmodule_declarations",{"_index":2262,"title":{},"body":{"modules/NgxChartsModule.html":{},"index.html":{}}}],["cluster_ngxchartsmodule_exports",{"_index":2263,"title":{},"body":{"modules/NgxChartsModule.html":{},"index.html":{}}}],["cluster_vistimelinemodule",{"_index":3205,"title":{},"body":{"modules/VisTimelineModule.html":{},"index.html":{}}}],["cluster_vistimelinemodule_declarations",{"_index":3206,"title":{},"body":{"modules/VisTimelineModule.html":{},"index.html":{}}}],["cluster_vistimelinemodule_exports",{"_index":3207,"title":{},"body":{"modules/VisTimelineModule.html":{},"index.html":{}}}],["clustering",{"_index":2947,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["col",{"_index":495,"title":{},"body":{"classes/BaseProvider.html":{}}}],["collapsed",{"_index":401,"title":{},"body":{"classes/AsyncRecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{}}}],["collapsemodule",{"_index":2214,"title":{},"body":{"modules/NetworkModule.html":{}}}],["collapsing",{"_index":383,"title":{},"body":{"classes/AsyncRecordsProvider.html":{},"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["color",{"_index":526,"title":{},"body":{"classes/BaseProvider.html":{},"components/BsHeatmapComponent.html":{},"components/BsTooltipComponent.html":{},"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"components/NgxChart.html":{},"miscellaneous/variables.html":{}}}],["colors",{"_index":1657,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["colorscheme",{"_index":715,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"interfaces/HeatmapItem.html":{},"components/NgxChart.html":{}}}],["column",{"_index":1968,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{}}}],["combination",{"_index":2457,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["combined",{"_index":2441,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{}}}],["combinelastest",{"_index":2458,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["combinelatest",{"_index":1336,"title":{},"body":{"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/VisEvent.html":{}}}],["combinelatest(sourceproviders.map(p",{"_index":1371,"title":{},"body":{"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/DynamicNodeType.html":{}}}],["combinelatest(this.events$).pipe",{"_index":2506,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["combinelatest(this.timeseries",{"_index":2500,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["come",{"_index":1354,"title":{},"body":{"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/VisEvent.html":{}}}],["comes",{"_index":205,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["commonmodule",{"_index":989,"title":{},"body":{"modules/BsHeatmapModule.html":{},"modules/BsTimelineModule.html":{},"modules/FinanceModule.html":{},"modules/FusionChartsModule.html":{},"modules/GoogleMapsModule.html":{},"modules/NetworkModule.html":{},"modules/NgxChartsModule.html":{},"modules/VisTimelineModule.html":{}}}],["companies",{"_index":3360,"title":{},"body":{"miscellaneous/functions.html":{}}}],["company",{"_index":3346,"title":{},"body":{"miscellaneous/functions.html":{}}}],["compare",{"_index":2990,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["compares",{"_index":2637,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["completed",{"_index":2661,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["complexity",{"_index":90,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{}}}],["component",{"_index":566,"title":{"components/BsEdgeInfoCard.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"components/BsTooltipComponent.html":{},"components/FacetNgxChart.html":{},"components/MapComponent.html":{},"components/NgxChart.html":{},"components/ResultTimeline.html":{}},"body":{"components/BsEdgeInfoCard.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"modules/BsTimelineModule.html":{},"components/BsTooltipComponent.html":{},"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"interfaces/HeatmapItem.html":{},"components/MapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"components/NgxChart.html":{},"interfaces/NodeData.html":{},"components/ResultTimeline.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{},"coverage.html":{}}}],["component_template",{"_index":651,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"components/BsTooltipComponent.html":{},"components/FacetNgxChart.html":{},"components/MapComponent.html":{},"components/NgxChart.html":{},"components/ResultTimeline.html":{}}}],["components",{"_index":568,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"components/BsTooltipComponent.html":{},"components/FacetNgxChart.html":{},"components/MapComponent.html":{},"components/NgxChart.html":{},"components/ResultTimeline.html":{},"index.html":{}}}],["compress",{"_index":1325,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{}}}],["compute",{"_index":147,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["computed",{"_index":1975,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{}}}],["computes",{"_index":1460,"title":{},"body":{"interfaces/DynamicNodeType.html":{},"interfaces/MoneyDatum.html":{}}}],["concretely",{"_index":1348,"title":{},"body":{"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{}}}],["config",{"_index":2517,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["config.aggregations.length",{"_index":2598,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["config.areastyles",{"_index":2651,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["config.current",{"_index":2524,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["config.default",{"_index":2525,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["config.display",{"_index":2568,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["config.display(r",{"_index":2569,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["config.getdate(item",{"_index":2655,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["config.getdate(item).toutcstring()+\"|\"+config.getdisplay(item",{"_index":2654,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["config.getdisplay(item",{"_index":2658,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["config.linestyles",{"_index":2650,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["config.maxnmonths.foreach((maxnmonths",{"_index":2604,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["config.maxnmonths.length",{"_index":2597,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["config.name",{"_index":2646,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["config.primary",{"_index":2647,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["config.size",{"_index":2560,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["config.size(item",{"_index":2656,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["config.size(r",{"_index":2563,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["config.styles",{"_index":2565,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["config.styles(item",{"_index":2657,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["config.styles(r",{"_index":2567,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["configs.ts",{"_index":3260,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["configuration",{"_index":99,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["configured",{"_index":2389,"title":{},"body":{"classes/SelectedRecordsProvider.html":{}}}],["conflicts",{"_index":1273,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{}}}],["connected",{"_index":274,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["connectednodes",{"_index":275,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{}}}],["connectednodes.length",{"_index":280,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{}}}],["console.error('invalid",{"_index":2838,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["console.error(config",{"_index":2599,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["console.log",{"_index":2336,"title":{},"body":{"components/ResultTimeline.html":{}}}],["console.log(\"cooc1:\",data_date[i+2",{"_index":2328,"title":{},"body":{"components/ResultTimeline.html":{}}}],["console.log(\"date:\",data_date[i+1",{"_index":2348,"title":{},"body":{"components/ResultTimeline.html":{}}}],["console.log(\"no",{"_index":2378,"title":{},"body":{"components/ResultTimeline.html":{}}}],["console.log('event",{"_index":2366,"title":{},"body":{"components/ResultTimeline.html":{}}}],["console.log('selected",{"_index":2364,"title":{},"body":{"components/ResultTimeline.html":{}}}],["console.log(cooc",{"_index":2331,"title":{},"body":{"components/ResultTimeline.html":{}}}],["console.log(data",{"_index":2356,"title":{},"body":{"components/ResultTimeline.html":{}}}],["console.log(properties",{"_index":2368,"title":{},"body":{"components/ResultTimeline.html":{}}}],["console.log(regdate.test(date",{"_index":2335,"title":{},"body":{"components/ResultTimeline.html":{}}}],["console.log(this.items.get(properties.items[0",{"_index":2371,"title":{},"body":{"components/ResultTimeline.html":{}}}],["console.log(year",{"_index":2334,"title":{},"body":{"components/ResultTimeline.html":{}}}],["console.warn(`aggregation",{"_index":173,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{}}}],["const",{"_index":152,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/BaseProvider.html":{},"components/BsEdgeInfoCard.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"interfaces/HeatmapItem.html":{},"components/MapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeData.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"components/ResultTimeline.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{}}}],["constant",{"_index":3178,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["constant',true",{"_index":3192,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["constructed",{"_index":58,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{}}}],["constructor",{"_index":137,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"components/BsHeatmapComponent.html":{},"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"interfaces/HeatmapItem.html":{},"components/MapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"components/NgxChart.html":{},"interfaces/RecordNode.html":{},"components/ResultTimeline.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{}}}],["constructor(el",{"_index":725,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["constructor(facetservice",{"_index":1785,"title":{},"body":{"components/FacetNgxChart.html":{}}}],["constructor(intlservice",{"_index":2230,"title":{},"body":{"components/NgxChart.html":{}}}],["constructor(name",{"_index":347,"title":{},"body":{"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"classes/SelectedRecordsProvider.html":{}}}],["constructor(public",{"_index":2310,"title":{},"body":{"components/ResultTimeline.html":{}}}],["constructor(searchservice",{"_index":1860,"title":{},"body":{"components/MapComponent.html":{}}}],["constructor(vistimelineservice",{"_index":2284,"title":{},"body":{"components/ResultTimeline.html":{}}}],["contain",{"_index":1251,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{},"miscellaneous/functions.html":{}}}],["contained",{"_index":1205,"title":{},"body":{"interfaces/CustomData.html":{},"components/MapComponent.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{},"miscellaneous/functions.html":{}}}],["container",{"_index":910,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["containing",{"_index":1267,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{},"miscellaneous/functions.html":{}}}],["contains",{"_index":1163,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{},"miscellaneous/functions.html":{}}}],["content",{"_index":1062,"title":{},"body":{"components/BsTooltipComponent.html":{},"components/ResultTimeline.html":{},"interfaces/VisEvent.html":{}}}],["contentchild",{"_index":2713,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{}}}],["contentchild(\"edgetpl",{"_index":3036,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["contentchild(\"nodetpl",{"_index":3034,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["contentchild(\"tooltiptpl",{"_index":2718,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["context",{"_index":250,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/VisEvent.html":{}}}],["convenience",{"_index":9,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/BaseProvider.html":{}}}],["convert",{"_index":911,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["converted",{"_index":104,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{}}}],["cooc",{"_index":2324,"title":{},"body":{"components/ResultTimeline.html":{}}}],["cooc[0",{"_index":2343,"title":{},"body":{"components/ResultTimeline.html":{}}}],["coocaggregationdemo",{"_index":3263,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["coocaggregationdemo(providerfactory",{"_index":3344,"title":{},"body":{"miscellaneous/functions.html":{}}}],["cooccurrence",{"_index":15,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"miscellaneous/functions.html":{}}}],["coocrecorddemo",{"_index":3264,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["coocrecorddemo(providerfactory",{"_index":3347,"title":{},"body":{"miscellaneous/functions.html":{}}}],["cool",{"_index":1145,"title":{},"body":{"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"components/NgxChart.html":{}}}],["coordinate",{"_index":912,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["coordinates",{"_index":3006,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["corresponding",{"_index":181,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{}}}],["count",{"_index":118,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/BaseProvider.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeData.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{}}}],["counter",{"_index":2738,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["counts",{"_index":253,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{}}}],["counts.get(d.category",{"_index":2052,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{}}}],["counts.get(money.value",{"_index":2150,"title":{},"body":{"interfaces/MoneyDatum.html":{}}}],["counts.set(item.value.tostring",{"_index":2146,"title":{},"body":{"interfaces/MoneyDatum.html":{}}}],["cover",{"_index":593,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsNodeInfoCard.html":{},"interfaces/NodeData.html":{}}}],["coverage",{"_index":3210,"title":{"coverage.html":{}},"body":{"coverage.html":{}}}],["create",{"_index":197,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/BaseProvider.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"interfaces/CustomData.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"interfaces/HeatmapItem.html":{},"interfaces/NodeData.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{}}}],["createaggregationevents(config",{"_index":2652,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["createchartoptions",{"_index":1726,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["created",{"_index":416,"title":{},"body":{"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["createdatapoints(items",{"_index":2666,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["createedge(type",{"_index":511,"title":{},"body":{"classes/BaseProvider.html":{}}}],["createexpandaction(type",{"_index":319,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{}}}],["createnode(type",{"_index":492,"title":{},"body":{"classes/BaseProvider.html":{}}}],["creates",{"_index":381,"title":{},"body":{"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/RecordNode.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"miscellaneous/functions.html":{}}}],["createtimeseries(config",{"_index":2645,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["cross",{"_index":200,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"miscellaneous/functions.html":{}}}],["crossaggregationdemo",{"_index":3265,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["crossaggregationdemo(providerfactory",{"_index":3351,"title":{},"body":{"miscellaneous/functions.html":{}}}],["crossaggregationexpanddemo",{"_index":3266,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["crossaggregationexpanddemo(providerfactory",{"_index":3352,"title":{},"body":{"miscellaneous/functions.html":{}}}],["cur",{"_index":3073,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["currency",{"_index":1959,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{}}}],["current",{"_index":1672,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"components/MapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{}}}],["currently",{"_index":950,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/DynamicNodeType.html":{},"components/MapComponent.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["currentrange",{"_index":2462,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["currentselection",{"_index":2732,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["currentvalue",{"_index":2976,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["currentvalue.length",{"_index":2989,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["cursor",{"_index":957,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["curve(d3[this.curvetype",{"_index":2749,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["curvemonotonex",{"_index":2453,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{}}}],["curvetype",{"_index":2452,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{}}}],["custom",{"_index":12,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/BaseProvider.html":{},"interfaces/CustomData.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"components/MapComponent.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["customdata",{"_index":1161,"title":{"interfaces/CustomData.html":{}},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{},"coverage.html":{}}}],["customprops",{"_index":485,"title":{},"body":{"classes/BaseProvider.html":{}}}],["d",{"_index":900,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{}}}],["d.aggregation",{"_index":2549,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["d.category",{"_index":2075,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{}}}],["d.ccaggregation",{"_index":2550,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["d.count",{"_index":2069,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{}}}],["d.currency",{"_index":2081,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{}}}],["d.date",{"_index":2156,"title":{},"body":{"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["d.i",{"_index":2051,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{}}}],["d.record.id",{"_index":2162,"title":{},"body":{"interfaces/MoneyDatum.html":{}}}],["d.type",{"_index":2812,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["d.value",{"_index":2066,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["d3",{"_index":768,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{}}}],["d3.area",{"_index":2724,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["d3.axisbottom(this.x",{"_index":2092,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{}}}],["d3.axisleft(this.y",{"_index":2108,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["d3.brushbehavior",{"_index":2728,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["d3.brushselection(this.gbrush.nativeelement",{"_index":2907,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["d3.brushx",{"_index":2758,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["d3.countabletimeinterval",{"_index":2701,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["d3.extent(allprimarydates",{"_index":2832,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["d3.extent(this.data",{"_index":2068,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{}}}],["d3.line",{"_index":2725,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["d3.max(data",{"_index":2834,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["d3.max(s.dates",{"_index":2836,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["d3.mouse(this.gbrush.nativeelement)[0",{"_index":2928,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["d3.mouse(this.overlay.nativeelement)[0",{"_index":2167,"title":{},"body":{"interfaces/MoneyDatum.html":{}}}],["d3.scaleband",{"_index":811,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{}}}],["d3.scalelinear",{"_index":1986,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["d3.scalelog",{"_index":2006,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{}}}],["d3.scalelogarithmic",{"_index":1987,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{}}}],["d3.scaleordinal",{"_index":1992,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{}}}],["d3.scalequantile",{"_index":792,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["d3.scaletime",{"_index":2137,"title":{},"body":{"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["d3.scaleutc",{"_index":2139,"title":{},"body":{"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["d3.select(nodes[i",{"_index":921,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["d3.select(this.gbrush.nativeelement",{"_index":2793,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["d3.select(this.gx.nativeelement",{"_index":869,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["d3.select(this.gy.nativeelement",{"_index":871,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["d3.select(this.overlay.nativeelement",{"_index":2020,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{}}}],["d3.selection",{"_index":813,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["d3.timeday",{"_index":2702,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["d3.timeday.offset(date",{"_index":2698,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["d3.timeformat(\"%y",{"_index":2465,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["d3.timehour.offset(date",{"_index":2693,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["d3.timemonth",{"_index":2704,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["d3.timemonth.count(range[0",{"_index":2594,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["d3.timemonth.offset(date",{"_index":2699,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["d3.timeweek",{"_index":2703,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["d3.timeyear",{"_index":2705,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["d3.transition",{"_index":877,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["d3.transition().duration(this.transition",{"_index":876,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["d3.zoom",{"_index":2866,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["d3.zoombehavior",{"_index":2730,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["d3.zoomidentity",{"_index":2858,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["d3.zoomtransform(this.brush$.node",{"_index":2921,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["damping",{"_index":3171,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["dampingcontrol",{"_index":3161,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["dampingcontrol.value",{"_index":3180,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["dampingpref",{"_index":3200,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["dark",{"_index":748,"title":{},"body":{"components/BsHeatmapComponent.html":{},"components/BsTooltipComponent.html":{},"modules/FusionChartsModule.html":{},"interfaces/HeatmapItem.html":{},"components/MapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{}}}],["darkgrey",{"_index":970,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["darkstyle",{"_index":1909,"title":{},"body":{"components/MapComponent.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["data",{"_index":70,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"components/NgxChart.html":{},"interfaces/Node.html":{},"interfaces/NodeData.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{},"dependencies.html":{}}}],["data([{type",{"_index":2801,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["data.addedges(this.createedge(type",{"_index":239,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{}}}],["data.addnodes(node",{"_index":1229,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{}}}],["data.directed",{"_index":1280,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{}}}],["data.directed[i",{"_index":1281,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{}}}],["data.fieldvalue",{"_index":1283,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{}}}],["data.filter(s",{"_index":2825,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["data.length",{"_index":937,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["data.relations",{"_index":1278,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{}}}],["data.relations[i",{"_index":1279,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{}}}],["data.values.length",{"_index":1270,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{}}}],["data/peer/esm/vis",{"_index":1475,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/VisEvent.html":{}}}],["data[0",{"_index":2827,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["data_date",{"_index":2322,"title":{},"body":{"components/ResultTimeline.html":{}}}],["data_date.substring(1,data_date.length",{"_index":2325,"title":{},"body":{"components/ResultTimeline.html":{}}}],["datafiltered",{"_index":692,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["datafiltered.length",{"_index":935,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["dataitem",{"_index":2303,"title":{},"body":{"components/ResultTimeline.html":{}}}],["datapoint",{"_index":1159,"title":{},"body":{"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"components/FacetNgxChart.html":{},"components/NgxChart.html":{}}}],["datapoint.name",{"_index":1735,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["datapoint.value",{"_index":1778,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["datapoints",{"_index":1664,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["dataset",{"_index":145,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/VisEvent.html":{}}}],["dataset.addedges(edge",{"_index":1264,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{}}}],["dataset.addedges(this.createedge(type",{"_index":1282,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{}}}],["dataset.addnodes(node",{"_index":1260,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{}}}],["dataset.addnodes(recordnode",{"_index":1274,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{}}}],["dataset.foreach(dataset",{"_index":1373,"title":{},"body":{"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/DynamicNodeType.html":{}}}],["dataset.getadjacentedges(neighbor.id",{"_index":1302,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{}}}],["dataset.getadjacentedges(node.id",{"_index":1290,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{}}}],["dataset.getedges().foreach(edge",{"_index":1603,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["dataset.getnode(node.id",{"_index":1295,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{}}}],["dataset.getnodes().foreach(node",{"_index":1374,"title":{},"body":{"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["dataset.updatedatasets(this.context.nodes",{"_index":3077,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["datasets",{"_index":403,"title":{},"body":{"classes/AsyncRecordsProvider.html":{},"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/VisEvent.html":{}}}],["datasets.reduce((prev",{"_index":3072,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["date",{"_index":2131,"title":{},"body":{"interfaces/MoneyDatum.html":{},"components/ResultTimeline.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{}}}],["date(cooc[1",{"_index":2327,"title":{},"body":{"components/ResultTimeline.html":{}}}],["date(parsedexpr.values[0",{"_index":2489,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["date(parsedexpr.values[1",{"_index":2490,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["date.getfullyear",{"_index":2333,"title":{},"body":{"components/ResultTimeline.html":{}}}],["dateobj.display",{"_index":2350,"title":{},"body":{"components/ResultTimeline.html":{}}}],["dateobj.locations.split(\",\")[0",{"_index":2349,"title":{},"body":{"components/ResultTimeline.html":{}}}],["dates",{"_index":2279,"title":{},"body":{"components/ResultTimeline.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{}}}],["dates.foreach(dateobj",{"_index":2346,"title":{},"body":{"components/ResultTimeline.html":{}}}],["datum",{"_index":2046,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{}}}],["datum.currency",{"_index":2173,"title":{},"body":{"interfaces/MoneyDatum.html":{}}}],["datum.rawvalue",{"_index":2120,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{}}}],["day",{"_index":2448,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{}}}],["days",{"_index":2590,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{}}}],["dd",{"_index":2692,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["deactivate",{"_index":2874,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["deal)#(usd",{"_index":1971,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{}}}],["debounce",{"_index":3184,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["debouncesync",{"_index":3187,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["decimal",{"_index":1868,"title":{},"body":{"components/MapComponent.html":{}}}],["declarations",{"_index":979,"title":{},"body":{"modules/BsHeatmapModule.html":{},"modules/BsTimelineModule.html":{},"modules/FinanceModule.html":{},"modules/FusionChartsModule.html":{},"modules/GoogleMapsModule.html":{},"modules/NetworkModule.html":{},"modules/NgxChartsModule.html":{},"modules/VisTimelineModule.html":{},"index.html":{}}}],["decoration",{"_index":955,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["decorators",{"_index":795,"title":{},"body":{"components/BsHeatmapComponent.html":{},"components/NgxChart.html":{}}}],["decreasing",{"_index":1038,"title":{},"body":{"components/BsNodeInfoCard.html":{},"interfaces/NodeData.html":{}}}],["deep",{"_index":948,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["defacet",{"_index":3444,"title":{},"body":{"miscellaneous/variables.html":{}}}],["default",{"_index":115,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"components/BsHeatmapComponent.html":{},"components/BsTooltipComponent.html":{},"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/CustomData.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"components/MapComponent.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"components/NgxChart.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"components/ResultTimeline.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/VisEvent.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["defaultchart",{"_index":3225,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["defaultoptions",{"_index":2296,"title":{},"body":{"components/ResultTimeline.html":{},"interfaces/VisEvent.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["defaultrecordstyle(selected",{"_index":2706,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["definance",{"_index":3214,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["define",{"_index":113,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{}}}],["defined",{"_index":351,"title":{},"body":{"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"components/BsEdgeInfoCard.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"components/BsTooltipComponent.html":{},"components/FacetNgxChart.html":{},"components/MapComponent.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"components/NgxChart.html":{},"components/ResultTimeline.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["defines",{"_index":1173,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{}}}],["degooglemaps",{"_index":3230,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["deheatmap",{"_index":3244,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["delay",{"_index":3103,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["dependencies",{"_index":978,"title":{"dependencies.html":{}},"body":{"modules/BsHeatmapModule.html":{},"modules/BsTimelineModule.html":{},"modules/FinanceModule.html":{},"modules/FusionChartsModule.html":{},"modules/GoogleMapsModule.html":{},"modules/NetworkModule.html":{},"modules/NgxChartsModule.html":{},"modules/VisTimelineModule.html":{},"dependencies.html":{},"index.html":{}}}],["depending",{"_index":1285,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{}}}],["deprecated",{"_index":949,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["deresultsview",{"_index":3453,"title":{},"body":{"miscellaneous/variables.html":{}}}],["description",{"_index":8,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/RecordNode.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/VisEvent.html":{},"miscellaneous/functions.html":{}}}],["desearch",{"_index":3454,"title":{},"body":{"miscellaneous/variables.html":{}}}],["desired",{"_index":1864,"title":{},"body":{"components/MapComponent.html":{}}}],["detail",{"_index":2630,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["determined",{"_index":2554,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["determines",{"_index":1492,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["difference",{"_index":2979,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["different",{"_index":172,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"components/BsNodeInfoCard.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/NodeData.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["dimensional",{"_index":208,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{}}}],["dimensions",{"_index":1154,"title":{},"body":{"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"components/NgxChart.html":{}}}],["directed",{"_index":24,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/BaseProvider.html":{},"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{}}}],["directive",{"_index":649,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"components/BsTooltipComponent.html":{},"components/FacetNgxChart.html":{},"components/MapComponent.html":{},"components/NgxChart.html":{},"components/ResultTimeline.html":{}}}],["directives",{"_index":685,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"components/BsTooltipComponent.html":{},"components/FacetNgxChart.html":{},"components/MapComponent.html":{},"components/NgxChart.html":{},"components/ResultTimeline.html":{}}}],["directly",{"_index":328,"title":{},"body":{"classes/AsyncRecordsProvider.html":{},"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{}}}],["disabled",{"_index":299,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{}}}],["discarded",{"_index":1507,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["display",{"_index":221,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/BaseProvider.html":{},"components/BsHeatmapComponent.html":{},"interfaces/CustomData.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyDatum.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"miscellaneous/functions.html":{}}}],["display=paginate",{"_index":1242,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{}}}],["displayed",{"_index":306,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"interfaces/HeatmapItem.html":{},"components/MapComponent.html":{},"interfaces/MoneyDatum.html":{},"interfaces/NodeData.html":{},"interfaces/RecordNode.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/VisEvent.html":{},"miscellaneous/functions.html":{}}}],["displays",{"_index":25,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"interfaces/CustomData.html":{},"interfaces/MoneyDatum.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{},"miscellaneous/functions.html":{}}}],["distribution",{"_index":201,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"miscellaneous/functions.html":{}}}],["distributions",{"_index":214,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"miscellaneous/functions.html":{}}}],["doc",{"_index":2379,"title":{},"body":{"components/ResultTimeline.html":{}}}],["docheck",{"_index":1095,"title":{},"body":{"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"components/NgxChart.html":{}}}],["document",{"_index":1709,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"components/MapComponent.html":{}}}],["document.body.contains(this.wrapper.nativeelement",{"_index":1158,"title":{},"body":{"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"components/NgxChart.html":{}}}],["documentation",{"_index":3211,"title":{},"body":{"coverage.html":{}}}],["documents",{"_index":149,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AsyncRecordsProvider.html":{},"interfaces/CustomData.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"components/MapComponent.html":{},"interfaces/RecordNode.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"miscellaneous/functions.html":{}}}],["dom",{"_index":571,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"components/BsTooltipComponent.html":{},"components/FacetNgxChart.html":{},"components/MapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"components/NgxChart.html":{},"components/ResultTimeline.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["domain",{"_index":1989,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["domain([0",{"_index":2076,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{}}}],["domain(this.datafiltered.map(item",{"_index":859,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["domain(this.x.domain",{"_index":2889,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["domain(this.xt.domain",{"_index":2891,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["domain(xlabels",{"_index":848,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["domain(ylabels",{"_index":854,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["domain[0].gettime",{"_index":2955,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["domain[1].gettime",{"_index":2954,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["don't",{"_index":1141,"title":{},"body":{"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"components/NgxChart.html":{}}}],["draw",{"_index":2032,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["drawevents(events",{"_index":3007,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["drawn",{"_index":509,"title":{},"body":{"classes/BaseProvider.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["draws",{"_index":2090,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["drawxaxis",{"_index":2091,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["drawyaxis",{"_index":2095,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["due",{"_index":2722,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["duplicate",{"_index":1254,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{}}}],["duplicates",{"_index":1582,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["dynamic",{"_index":1337,"title":{},"body":{"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"miscellaneous/functions.html":{}}}],["dynamicedge",{"_index":1334,"title":{"interfaces/DynamicEdge.html":{}},"body":{"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{},"coverage.html":{}}}],["dynamicedgeprovider",{"_index":1358,"title":{},"body":{"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{},"coverage.html":{}}}],["dynamicedgetype",{"_index":1339,"title":{"interfaces/DynamicEdgeType.html":{}},"body":{"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["dynamicedgetype).getquery",{"_index":1347,"title":{},"body":{"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{}}}],["dynamicnodeprovider",{"_index":1440,"title":{},"body":{"interfaces/DynamicNodeType.html":{},"coverage.html":{}}}],["dynamicnodetype",{"_index":1427,"title":{"interfaces/DynamicNodeType.html":{}},"body":{"interfaces/DynamicNodeType.html":{},"coverage.html":{}}}],["e",{"_index":2469,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{}}}],["e.count",{"_index":1023,"title":{},"body":{"components/BsNodeInfoCard.html":{},"interfaces/NodeData.html":{}}}],["e.from",{"_index":1018,"title":{},"body":{"components/BsNodeInfoCard.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeData.html":{},"interfaces/NodeType.html":{}}}],["e.to",{"_index":1020,"title":{},"body":{"components/BsNodeInfoCard.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeData.html":{},"interfaces/NodeType.html":{}}}],["e.value",{"_index":230,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{}}}],["e.visible",{"_index":1320,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{}}}],["each",{"_index":184,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{},"miscellaneous/functions.html":{}}}],["each(this.wrap",{"_index":898,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["ease",{"_index":963,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["east",{"_index":1940,"title":{},"body":{"components/MapComponent.html":{}}}],["edge",{"_index":39,"title":{"interfaces/Edge.html":{}},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"components/BsEdgeInfoCard.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"components/BsTooltipComponent.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"components/FacetNgxChart.html":{},"components/MapComponent.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"modules/NetworkModule.html":{},"interfaces/NetworkProvider.html":{},"components/NgxChart.html":{},"interfaces/Node.html":{},"interfaces/NodeData.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"components/ResultTimeline.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/VisEvent.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["edge.context.name",{"_index":549,"title":{},"body":{"classes/BaseProvider.html":{}}}],["edge.context.nodes.get(edge.from",{"_index":541,"title":{},"body":{"classes/BaseProvider.html":{}}}],["edge.context.nodes.get(edge.to",{"_index":543,"title":{},"body":{"classes/BaseProvider.html":{}}}],["edge.context.searchservice.query.addselect(expr",{"_index":548,"title":{},"body":{"classes/BaseProvider.html":{}}}],["edge.context.searchservice.search",{"_index":550,"title":{},"body":{"classes/BaseProvider.html":{}}}],["edge.count",{"_index":637,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["edge.fieldvalue",{"_index":546,"title":{},"body":{"classes/BaseProvider.html":{}}}],["edge.from",{"_index":1297,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{}}}],["edge.id",{"_index":1300,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{}}}],["edge.provider",{"_index":544,"title":{},"body":{"classes/BaseProvider.html":{}}}],["edge.to",{"_index":1296,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{}}}],["edge.type",{"_index":1292,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{}}}],["edge.type['trigger",{"_index":1309,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{}}}],["edge.visible",{"_index":1305,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{}}}],["edge[\"arrows",{"_index":517,"title":{},"body":{"classes/BaseProvider.html":{}}}],["edge[\"font",{"_index":524,"title":{},"body":{"classes/BaseProvider.html":{}}}],["edge[\"label",{"_index":522,"title":{},"body":{"classes/BaseProvider.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["edge[\"labels",{"_index":523,"title":{},"body":{"classes/BaseProvider.html":{}}}],["edge[\"labels\"].foreach(label",{"_index":1615,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["edge['aggregation'].name",{"_index":639,"title":{},"body":{"components/BsEdgeInfoCard.html":{}}}],["edge['record']['title",{"_index":641,"title":{},"body":{"components/BsEdgeInfoCard.html":{}}}],["edge[\\'aggregation\\'].name",{"_index":652,"title":{},"body":{"components/BsEdgeInfoCard.html":{}}}],["edge[\\'record\\'][\\'title",{"_index":653,"title":{},"body":{"components/BsEdgeInfoCard.html":{}}}],["edgeclicked",{"_index":3028,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["edgeidx",{"_index":1516,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["edgeoptions",{"_index":1489,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["edges",{"_index":94,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"components/BsNodeInfoCard.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeData.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/VisEvent.html":{},"miscellaneous/functions.html":{}}}],["edges.foreach(edge",{"_index":1550,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["edges.remove(edges.get().filter(e",{"_index":1630,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["edges.update(this.getvisibleedges",{"_index":1633,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["edgeseparator",{"_index":335,"title":{},"body":{"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"classes/SelectedRecordsProvider.html":{}}}],["edgetpl",{"_index":3037,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["edgetype",{"_index":40,"title":{"interfaces/EdgeType.html":{}},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/BaseProvider.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["edgetype.nodetypes[1",{"_index":1370,"title":{},"body":{"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{}}}],["edgetypes",{"_index":140,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AsyncRecordsProvider.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/RecordNode.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["effect",{"_index":2612,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["eg",{"_index":62,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/BaseProvider.html":{},"interfaces/CustomData.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{}}}],["el",{"_index":728,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["element",{"_index":648,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"components/BsTooltipComponent.html":{},"components/FacetNgxChart.html":{},"components/MapComponent.html":{},"components/NgxChart.html":{},"components/ResultTimeline.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["elementref",{"_index":726,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"components/NgxChart.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["elements",{"_index":1993,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["elementtype",{"_index":3401,"title":{},"body":{"miscellaneous/variables.html":{}}}],["elusive",{"_index":3104,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["email",{"_index":1257,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{}}}],["emits",{"_index":182,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"components/MapComponent.html":{}}}],["emitted",{"_index":3013,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["emitter",{"_index":1878,"title":{},"body":{"components/MapComponent.html":{}}}],["empty",{"_index":1497,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["enabled",{"_index":520,"title":{},"body":{"classes/BaseProvider.html":{}}}],["end",{"_index":972,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"components/NgxChart.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["enfacet",{"_index":3446,"title":{},"body":{"miscellaneous/variables.html":{}}}],["enfinance",{"_index":3216,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["enforce",{"_index":2918,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["engooglemaps",{"_index":3231,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["enheatmap",{"_index":3245,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["enresultsview",{"_index":3456,"title":{},"body":{"miscellaneous/variables.html":{}}}],["enrich",{"_index":1430,"title":{},"body":{"interfaces/DynamicNodeType.html":{}}}],["enriched",{"_index":1434,"title":{},"body":{"interfaces/DynamicNodeType.html":{},"miscellaneous/functions.html":{}}}],["ensearch",{"_index":3457,"title":{},"body":{"miscellaneous/variables.html":{}}}],["enter",{"_index":2803,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["entities",{"_index":16,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"miscellaneous/functions.html":{}}}],["entity",{"_index":1235,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{},"miscellaneous/functions.html":{}}}],["entityitem",{"_index":2286,"title":{},"body":{"components/ResultTimeline.html":{}}}],["err",{"_index":2532,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["error",{"_index":2531,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["error(\"maxnmonths",{"_index":2600,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["error(`aggregation",{"_index":219,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["error(`edge",{"_index":1639,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["error(`inconsistent",{"_index":1212,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{}}}],["error(`missing",{"_index":1299,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{}}}],["error(`node",{"_index":1636,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["error(`wrong",{"_index":1271,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{}}}],["errors",{"_index":2026,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["essentially",{"_index":2931,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["et",{"_index":124,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{},"miscellaneous/functions.html":{}}}],["etc",{"_index":1485,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"miscellaneous/functions.html":{}}}],["even",{"_index":2786,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["event",{"_index":786,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"interfaces/HeatmapItem.html":{},"components/MapComponent.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{}}}],["event.display",{"_index":2323,"title":{},"body":{"components/ResultTimeline.html":{}}}],["event.locations.split(\",\")[0",{"_index":2330,"title":{},"body":{"components/ResultTimeline.html":{}}}],["event.nodes.length",{"_index":3125,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["eventclicked",{"_index":2454,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["eventdata",{"_index":3118,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["eventdata[0",{"_index":3120,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["eventdata[1",{"_index":3121,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["eventemitter",{"_index":753,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/HeatmapItem.html":{},"components/MapComponent.html":{},"interfaces/MoneyDatum.html":{},"components/NgxChart.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{}}}],["events",{"_index":631,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"interfaces/HeatmapItem.html":{},"interfaces/NodeData.html":{},"components/ResultTimeline.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{}}}],["events.foreach(event",{"_index":2321,"title":{},"body":{"components/ResultTimeline.html":{}}}],["events.push([event",{"_index":2962,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["events[0].size",{"_index":3003,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["events[0].sizeopened",{"_index":3004,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["events[events.length",{"_index":2964,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["eventsize(events",{"_index":3001,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["example",{"_index":1432,"title":{},"body":{"interfaces/DynamicNodeType.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["exanding",{"_index":1315,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{}}}],["except",{"_index":2782,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["exclusion",{"_index":1699,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["execute",{"_index":1340,"title":{},"body":{"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/DynamicNodeType.html":{}}}],["executed",{"_index":1343,"title":{},"body":{"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/DynamicNodeType.html":{}}}],["exist",{"_index":174,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{}}}],["existing",{"_index":80,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"interfaces/CustomData.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{},"miscellaneous/typealiases.html":{}}}],["existingedge",{"_index":1607,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["existingedge.count",{"_index":1609,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["existingedge.from",{"_index":1620,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["existingedge.to].map(id",{"_index":1621,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["existingedge.type",{"_index":1624,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["existingedge.type.edgeoptions",{"_index":1619,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["existingedge.type.edgeoptions(nodes",{"_index":1623,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["existingedge.visible",{"_index":1610,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["existingedge[\"label",{"_index":1617,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["existingedge[\"labels\"].push(label",{"_index":1618,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["existingnode",{"_index":397,"title":{},"body":{"classes/AsyncRecordsProvider.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"classes/SelectedRecordsProvider.html":{}}}],["existingnode.count",{"_index":1597,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["existingnode.precedence",{"_index":1593,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["existingnode.type",{"_index":1601,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["existingnode.type.nodeoptions",{"_index":1599,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["existingnode.type.nodeoptions(existingnode",{"_index":1600,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["existingnode.visible",{"_index":1598,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["existingnodes",{"_index":120,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{},"miscellaneous/typealiases.html":{}}}],["exists",{"_index":1517,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["expand",{"_index":266,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{}}}],["expandable",{"_index":3355,"title":{},"body":{"miscellaneous/functions.html":{}}}],["expanded",{"_index":597,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsNodeInfoCard.html":{},"interfaces/NodeData.html":{},"miscellaneous/functions.html":{}}}],["expanding",{"_index":79,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AsyncRecordsProvider.html":{},"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"miscellaneous/typealiases.html":{}}}],["expected",{"_index":2783,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["export",{"_index":59,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"components/BsEdgeInfoCard.html":{},"components/BsHeatmapComponent.html":{},"modules/BsHeatmapModule.html":{},"components/BsNodeInfoCard.html":{},"modules/BsTimelineModule.html":{},"components/BsTooltipComponent.html":{},"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"modules/FinanceModule.html":{},"modules/FusionChartsModule.html":{},"modules/GoogleMapsModule.html":{},"interfaces/HeatmapItem.html":{},"components/MapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"modules/NetworkModule.html":{},"interfaces/NetworkProvider.html":{},"components/NgxChart.html":{},"modules/NgxChartsModule.html":{},"interfaces/Node.html":{},"interfaces/NodeData.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"components/ResultTimeline.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{},"modules/VisTimelineModule.html":{}}}],["exports",{"_index":981,"title":{},"body":{"modules/BsHeatmapModule.html":{},"modules/BsTimelineModule.html":{},"modules/FinanceModule.html":{},"modules/FusionChartsModule.html":{},"modules/GoogleMapsModule.html":{},"modules/NetworkModule.html":{},"modules/NgxChartsModule.html":{},"modules/VisTimelineModule.html":{},"index.html":{}}}],["expr",{"_index":48,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/BaseProvider.html":{},"components/MapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["expr.operands.map(e",{"_index":229,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{}}}],["exprbuilder",{"_index":1480,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"components/MapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/VisEvent.html":{}}}],["expression",{"_index":2023,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["exprfrom",{"_index":559,"title":{},"body":{"classes/BaseProvider.html":{}}}],["exprs",{"_index":2620,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["exprs.push(this.exprbuilder.makerangeexpr(ccaggregation.column",{"_index":2625,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["exprto",{"_index":562,"title":{},"body":{"classes/BaseProvider.html":{}}}],["extends",{"_index":61,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AsyncRecordsProvider.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"components/MapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/RecordNode.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/VisEvent.html":{}}}],["extension",{"_index":55,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AsyncRecordsProvider.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/RecordNode.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["extent([[0",{"_index":2759,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["extract",{"_index":2040,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{}}}],["fa",{"_index":291,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/BaseProvider.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"components/MapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/VisEvent.html":{}}}],["facet",{"_index":657,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsHeatmapComponent.html":{},"modules/BsHeatmapModule.html":{},"components/BsNodeInfoCard.html":{},"modules/BsTimelineModule.html":{},"components/BsTooltipComponent.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"components/MapComponent.html":{},"components/NgxChart.html":{},"modules/NgxChartsModule.html":{},"components/ResultTimeline.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/VisEvent.html":{}}}],["facetchartdatapoint",{"_index":1648,"title":{"interfaces/FacetChartDataPoint.html":{}},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"coverage.html":{}}}],["facetname",{"_index":1761,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["facetngxchart",{"_index":669,"title":{"components/FacetNgxChart.html":{}},"body":{"components/BsEdgeInfoCard.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"components/BsTooltipComponent.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"components/MapComponent.html":{},"components/NgxChart.html":{},"modules/NgxChartsModule.html":{},"components/ResultTimeline.html":{},"coverage.html":{},"index.html":{}}}],["facetservice",{"_index":1654,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"components/MapComponent.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["factory",{"_index":3343,"title":{},"body":{"miscellaneous/functions.html":{}}}],["factory.ts",{"_index":3295,"title":{},"body":{"coverage.html":{}}}],["false",{"_index":238,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"components/BsEdgeInfoCard.html":{},"components/BsNodeInfoCard.html":{},"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"modules/FusionChartsModule.html":{},"components/MapComponent.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"components/NgxChart.html":{},"interfaces/Node.html":{},"interfaces/NodeData.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"components/ResultTimeline.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{}}}],["far",{"_index":1675,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"components/MapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/VisEvent.html":{}}}],["fas",{"_index":290,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/BaseProvider.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/DynamicNodeType.html":{},"components/MapComponent.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/VisEvent.html":{}}}],["fcmodule",{"_index":1824,"title":{},"body":{"modules/FusionChartsModule.html":{}}}],["fcmodule.fcroot(fusioncharts",{"_index":1834,"title":{},"body":{"modules/FusionChartsModule.html":{}}}],["features",{"_index":438,"title":{},"body":{"classes/BaseProvider.html":{}}}],["featuretype",{"_index":3409,"title":{},"body":{"miscellaneous/variables.html":{}}}],["fetch",{"_index":117,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AsyncRecordsProvider.html":{}}}],["fetchaggregation(aggregation",{"_index":2580,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["fetchaggregations(types",{"_index":151,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{}}}],["fetched",{"_index":73,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AsyncRecordsProvider.html":{},"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/DynamicNodeType.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["fetches",{"_index":142,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"miscellaneous/functions.html":{}}}],["fetching",{"_index":1361,"title":{},"body":{"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["field",{"_index":420,"title":{},"body":{"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"interfaces/CustomData.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"components/MapComponent.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["fields",{"_index":1185,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["fieldvalue",{"_index":26,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"interfaces/CustomData.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["file",{"_index":5,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"components/BsEdgeInfoCard.html":{},"components/BsHeatmapComponent.html":{},"modules/BsHeatmapModule.html":{},"components/BsNodeInfoCard.html":{},"modules/BsTimelineModule.html":{},"components/BsTooltipComponent.html":{},"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"modules/FinanceModule.html":{},"modules/FusionChartsModule.html":{},"modules/GoogleMapsModule.html":{},"interfaces/HeatmapItem.html":{},"components/MapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"modules/NetworkModule.html":{},"interfaces/NetworkProvider.html":{},"components/NgxChart.html":{},"modules/NgxChartsModule.html":{},"interfaces/Node.html":{},"interfaces/NodeData.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"components/ResultTimeline.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{},"modules/VisTimelineModule.html":{},"coverage.html":{}}}],["fill",{"_index":969,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{}}}],["fills",{"_index":180,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{}}}],["filter",{"_index":69,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"components/BsNodeInfoCard.html":{},"interfaces/CustomData.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"components/MapComponent.html":{},"interfaces/MoneyDatum.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeData.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["filter(e",{"_index":1017,"title":{},"body":{"components/BsNodeInfoCard.html":{},"interfaces/NodeData.html":{}}}],["filter(edge",{"_index":1291,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{}}}],["filter(item",{"_index":2677,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["filter(node",{"_index":277,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{}}}],["filter(r",{"_index":2556,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["filter(record",{"_index":1713,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["filter(tick",{"_index":2098,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["filter(v",{"_index":1687,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["filterarea",{"_index":1848,"title":{},"body":{"components/MapComponent.html":{}}}],["filterdatum(datum",{"_index":2118,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{}}}],["filtered",{"_index":418,"title":{},"body":{"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"components/BsHeatmapComponent.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"interfaces/HeatmapItem.html":{},"components/MapComponent.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["filteredcolor",{"_index":1660,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["filtering",{"_index":2579,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["filters",{"_index":1673,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"components/MapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/VisEvent.html":{}}}],["finance/.../index.ts",{"_index":3398,"title":{},"body":{"miscellaneous/variables.html":{}}}],["finance/finance.module.ts",{"_index":1815,"title":{},"body":{"modules/FinanceModule.html":{}}}],["finance/messages/index.ts",{"_index":3213,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["finance/money",{"_index":1956,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"coverage.html":{}}}],["financemodule",{"_index":1810,"title":{"modules/FinanceModule.html":{}},"body":{"modules/FinanceModule.html":{},"index.html":{},"modules.html":{}}}],["find",{"_index":2601,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["find(a",{"_index":2043,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{}}}],["fire",{"_index":2926,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["first",{"_index":2823,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["fit",{"_index":592,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"interfaces/NodeData.html":{},"interfaces/VisEvent.html":{}}}],["fitbounds",{"_index":1849,"title":{},"body":{"components/MapComponent.html":{}}}],["fitnetwork",{"_index":3106,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["fitting",{"_index":1899,"title":{},"body":{"components/MapComponent.html":{}}}],["focus",{"_index":622,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsNodeInfoCard.html":{},"interfaces/NodeData.html":{}}}],["focusnode",{"_index":598,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsNodeInfoCard.html":{}}}],["focusnode(node",{"_index":602,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsNodeInfoCard.html":{},"interfaces/NodeData.html":{}}}],["following",{"_index":2663,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{}}}],["font",{"_index":967,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["for(let",{"_index":1276,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["foreach",{"_index":2638,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["foreach(edge",{"_index":1294,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{}}}],["foreach(event",{"_index":2960,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["foreach(item",{"_index":1024,"title":{},"body":{"components/BsNodeInfoCard.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/NodeData.html":{}}}],["foreach(list",{"_index":1040,"title":{},"body":{"components/BsNodeInfoCard.html":{},"interfaces/NodeData.html":{}}}],["foreach(node",{"_index":1289,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{}}}],["foreach(record",{"_index":1715,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["forget",{"_index":1390,"title":{},"body":{"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/DynamicNodeType.html":{}}}],["form",{"_index":1969,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/VisEvent.html":{}}}],["format",{"_index":224,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["formatdayrequest",{"_index":2464,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["formating",{"_index":2463,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["formatservice",{"_index":1962,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{}}}],["formatted",{"_index":202,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{}}}],["formatter",{"_index":493,"title":{},"body":{"classes/BaseProvider.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["formatting",{"_index":1702,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["formbuilder",{"_index":3016,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["formcontrol",{"_index":3015,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["formcontrol(this.dampingpref",{"_index":3162,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["formcontrol(this.gravitypref",{"_index":3166,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["formcontrol(this.repulsionpref",{"_index":3164,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["formcontrol(this.springconstantpref",{"_index":3160,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["formcontrol(this.springlengthpref",{"_index":3158,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["formgroup",{"_index":3014,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["formsmodule",{"_index":991,"title":{},"body":{"modules/BsHeatmapModule.html":{},"modules/BsTimelineModule.html":{},"modules/NetworkModule.html":{}}}],["found",{"_index":1583,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["fractional",{"_index":1745,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["frame",{"_index":3083,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["frfacet",{"_index":3448,"title":{},"body":{"miscellaneous/variables.html":{}}}],["frfinance",{"_index":3217,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["frgooglemaps",{"_index":3232,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["frheatmap",{"_index":3246,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["fromnode",{"_index":504,"title":{},"body":{"classes/BaseProvider.html":{},"components/BsEdgeInfoCard.html":{}}}],["fromnode.id",{"_index":513,"title":{},"body":{"classes/BaseProvider.html":{}}}],["frresultsview",{"_index":3459,"title":{},"body":{"miscellaneous/variables.html":{}}}],["frsearch",{"_index":3460,"title":{},"body":{"miscellaneous/variables.html":{}}}],["fulltext",{"_index":925,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["function",{"_index":19,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"components/BsHeatmapComponent.html":{},"interfaces/ChartOptions.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"coverage.html":{}}}],["functions",{"_index":3333,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["fusion",{"_index":673,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"components/BsTooltipComponent.html":{},"components/FacetNgxChart.html":{},"modules/FusionChartsModule.html":{},"components/MapComponent.html":{},"components/NgxChart.html":{},"components/ResultTimeline.html":{},"miscellaneous/variables.html":{}}}],["fusionchart",{"_index":672,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"components/BsTooltipComponent.html":{},"components/FacetNgxChart.html":{},"modules/FusionChartsModule.html":{},"components/MapComponent.html":{},"components/NgxChart.html":{},"components/ResultTimeline.html":{},"coverage.html":{},"index.html":{}}}],["fusioncharts",{"_index":1825,"title":{},"body":{"modules/FusionChartsModule.html":{},"dependencies.html":{}}}],["fusioncharts.options.creditlabel",{"_index":1832,"title":{},"body":{"modules/FusionChartsModule.html":{}}}],["fusioncharts/.../chart.ts",{"_index":3395,"title":{},"body":{"miscellaneous/variables.html":{}}}],["fusioncharts/chart/chart.ts",{"_index":3222,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["fusioncharts/fusioncharts.charts",{"_index":1827,"title":{},"body":{"modules/FusionChartsModule.html":{}}}],["fusioncharts/fusioncharts.module.ts",{"_index":1823,"title":{},"body":{"modules/FusionChartsModule.html":{}}}],["fusioncharts/themes/fusioncharts.theme.candy",{"_index":1831,"title":{},"body":{"modules/FusionChartsModule.html":{}}}],["fusioncharts/themes/fusioncharts.theme.fusion",{"_index":1829,"title":{},"body":{"modules/FusionChartsModule.html":{}}}],["fusionchartsmodule",{"_index":1819,"title":{"modules/FusionChartsModule.html":{}},"body":{"modules/FusionChartsModule.html":{},"index.html":{},"modules.html":{}}}],["fusiontheme",{"_index":1828,"title":{},"body":{"modules/FusionChartsModule.html":{}}}],["fw",{"_index":294,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/BaseProvider.html":{}}}],["gain",{"_index":618,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsNodeInfoCard.html":{},"interfaces/NodeData.html":{}}}],["gate",{"_index":1435,"title":{},"body":{"interfaces/DynamicNodeType.html":{}}}],["gates",{"_index":483,"title":{},"body":{"classes/BaseProvider.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{},"miscellaneous/functions.html":{}}}],["gates)#(ceo)#(microsoft",{"_index":3362,"title":{},"body":{"miscellaneous/functions.html":{}}}],["gates/microsoft",{"_index":204,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{}}}],["gaugemodule",{"_index":2271,"title":{},"body":{"modules/NgxChartsModule.html":{}}}],["gaxis",{"_index":2030,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["gbrush",{"_index":2734,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["general",{"_index":1499,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/VisEvent.html":{}}}],["generate",{"_index":93,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{}}}],["generated",{"_index":1168,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{}}}],["generates",{"_index":127,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"interfaces/CustomData.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/VisEvent.html":{}}}],["generating",{"_index":1183,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{}}}],["generic",{"_index":3342,"title":{},"body":{"miscellaneous/functions.html":{}}}],["geo",{"_index":1939,"title":{},"body":{"components/MapComponent.html":{},"miscellaneous/functions.html":{}}}],["geolocated",{"_index":1903,"title":{},"body":{"components/MapComponent.html":{}}}],["geometry",{"_index":3402,"title":{},"body":{"miscellaneous/variables.html":{}}}],["geometry.fill",{"_index":3424,"title":{},"body":{"miscellaneous/variables.html":{}}}],["geometry.stroke",{"_index":3411,"title":{},"body":{"miscellaneous/variables.html":{}}}],["georecords",{"_index":1850,"title":{},"body":{"components/MapComponent.html":{}}}],["getactions",{"_index":1808,"title":{},"body":{"components/FacetNgxChart.html":{},"components/MapComponent.html":{}}}],["getadjacentedges",{"_index":2182,"title":{},"body":{"classes/NetworkDataset.html":{}}}],["getadjacentedges(nodeid",{"_index":1576,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["getaggregation",{"_index":2543,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["getaggregation(aggregationname",{"_index":2572,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["getcharttype",{"_index":2250,"title":{},"body":{"components/NgxChart.html":{}}}],["getcolorscheme",{"_index":2252,"title":{},"body":{"components/NgxChart.html":{}}}],["getconnectednodes",{"_index":2183,"title":{},"body":{"classes/NetworkDataset.html":{}}}],["getconnectednodes(nodeid",{"_index":1578,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["getd3timeinterval(resolution",{"_index":2700,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["getdata",{"_index":76,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"interfaces/NetworkProvider.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/VisEvent.html":{},"miscellaneous/typealiases.html":{}}}],["getdata(context",{"_index":248,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"classes/SelectedRecordsProvider.html":{}}}],["getdate",{"_index":2430,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["getdisplay",{"_index":2431,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["getedge",{"_index":2184,"title":{},"body":{"classes/NetworkDataset.html":{}}}],["getedge(id",{"_index":1524,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["getedgeactions",{"_index":342,"title":{},"body":{"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"interfaces/NetworkProvider.html":{},"classes/SelectedRecordsProvider.html":{}}}],["getedgeactions(edge",{"_index":409,"title":{},"body":{"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"classes/SelectedRecordsProvider.html":{}}}],["getedgeid(node1",{"_index":474,"title":{},"body":{"classes/BaseProvider.html":{}}}],["getedgeids",{"_index":1538,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["getedges",{"_index":1528,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["geteventaggregation(config",{"_index":2551,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["getitem",{"_index":1783,"title":{},"body":{"components/FacetNgxChart.html":{}}}],["getitem(datapoint",{"_index":1773,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["getitemcolor",{"_index":1106,"title":{},"body":{"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"components/NgxChart.html":{}}}],["getlegend",{"_index":708,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["getmaxdate",{"_index":2478,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["getmindate",{"_index":2474,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["getname",{"_index":1692,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["getnode",{"_index":2185,"title":{},"body":{"classes/NetworkDataset.html":{}}}],["getnode(id",{"_index":1522,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["getnodeactions",{"_index":339,"title":{},"body":{"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"interfaces/NetworkProvider.html":{},"classes/SelectedRecordsProvider.html":{}}}],["getnodeactions(node",{"_index":307,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["getnodeid(type",{"_index":479,"title":{},"body":{"classes/BaseProvider.html":{}}}],["getnodeids",{"_index":1536,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["getnodes",{"_index":1526,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["getnodevalue(node",{"_index":481,"title":{},"body":{"classes/BaseProvider.html":{}}}],["getprovider",{"_index":343,"title":{},"body":{"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"classes/SelectedRecordsProvider.html":{}}}],["getprovideractions",{"_index":286,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"interfaces/CustomData.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["getquery",{"_index":1342,"title":{},"body":{"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/DynamicNodeType.html":{}}}],["getrecordsasevents(config",{"_index":2555,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["gets",{"_index":2676,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"miscellaneous/functions.html":{}}}],["getstyle",{"_index":1080,"title":{},"body":{"components/BsTooltipComponent.html":{}}}],["gettimeseries(config",{"_index":2544,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["getvisibleedges",{"_index":1533,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["getvisiblenodes",{"_index":1530,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["given",{"_index":134,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"miscellaneous/functions.html":{}}}],["global",{"_index":1266,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{}}}],["google",{"_index":65,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{},"miscellaneous/functions.html":{}}}],["google.maps.latlngbounds",{"_index":1883,"title":{},"body":{"components/MapComponent.html":{}}}],["google.maps.latlngboundsliteral",{"_index":1897,"title":{},"body":{"components/MapComponent.html":{}}}],["googlemaps",{"_index":1845,"title":{},"body":{"components/MapComponent.html":{}}}],["googlemaps'},{'name",{"_index":675,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"components/BsTooltipComponent.html":{},"components/FacetNgxChart.html":{},"components/MapComponent.html":{},"components/NgxChart.html":{},"components/ResultTimeline.html":{}}}],["googlemaps/.../dark",{"_index":3394,"title":{},"body":{"miscellaneous/variables.html":{}}}],["googlemaps/.../index.ts",{"_index":3399,"title":{},"body":{"miscellaneous/variables.html":{}}}],["googlemaps/dark",{"_index":3226,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["googlemaps/googlemaps.module.ts",{"_index":1839,"title":{},"body":{"modules/GoogleMapsModule.html":{}}}],["googlemaps/map.component.ts",{"_index":1844,"title":{},"body":{"components/MapComponent.html":{},"coverage.html":{}}}],["googlemaps/map.component.ts:102",{"_index":1881,"title":{},"body":{"components/MapComponent.html":{}}}],["googlemaps/map.component.ts:134",{"_index":1880,"title":{},"body":{"components/MapComponent.html":{}}}],["googlemaps/map.component.ts:144",{"_index":1886,"title":{},"body":{"components/MapComponent.html":{}}}],["googlemaps/map.component.ts:148",{"_index":1890,"title":{},"body":{"components/MapComponent.html":{}}}],["googlemaps/map.component.ts:154",{"_index":1884,"title":{},"body":{"components/MapComponent.html":{}}}],["googlemaps/map.component.ts:19",{"_index":1871,"title":{},"body":{"components/MapComponent.html":{}}}],["googlemaps/map.component.ts:21",{"_index":1874,"title":{},"body":{"components/MapComponent.html":{}}}],["googlemaps/map.component.ts:23",{"_index":1863,"title":{},"body":{"components/MapComponent.html":{}}}],["googlemaps/map.component.ts:25",{"_index":1866,"title":{},"body":{"components/MapComponent.html":{}}}],["googlemaps/map.component.ts:27",{"_index":1870,"title":{},"body":{"components/MapComponent.html":{}}}],["googlemaps/map.component.ts:29",{"_index":1875,"title":{},"body":{"components/MapComponent.html":{}}}],["googlemaps/map.component.ts:31",{"_index":1877,"title":{},"body":{"components/MapComponent.html":{}}}],["googlemaps/map.component.ts:34",{"_index":1901,"title":{},"body":{"components/MapComponent.html":{}}}],["googlemaps/map.component.ts:36",{"_index":1898,"title":{},"body":{"components/MapComponent.html":{}}}],["googlemaps/map.component.ts:39",{"_index":1896,"title":{},"body":{"components/MapComponent.html":{}}}],["googlemaps/map.component.ts:40",{"_index":1893,"title":{},"body":{"components/MapComponent.html":{}}}],["googlemaps/map.component.ts:43",{"_index":1891,"title":{},"body":{"components/MapComponent.html":{}}}],["googlemaps/map.component.ts:45",{"_index":1904,"title":{},"body":{"components/MapComponent.html":{}}}],["googlemaps/map.component.ts:48",{"_index":1861,"title":{},"body":{"components/MapComponent.html":{}}}],["googlemaps/map.component.ts:51",{"_index":1907,"title":{},"body":{"components/MapComponent.html":{}}}],["googlemaps/map.component.ts:52",{"_index":1895,"title":{},"body":{"components/MapComponent.html":{}}}],["googlemaps/map.component.ts:53",{"_index":1894,"title":{},"body":{"components/MapComponent.html":{}}}],["googlemaps/map.component.ts:91",{"_index":1908,"title":{},"body":{"components/MapComponent.html":{}}}],["googlemaps/messages/index.ts",{"_index":3229,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["googlemapsmodule",{"_index":1835,"title":{"modules/GoogleMapsModule.html":{}},"body":{"modules/GoogleMapsModule.html":{},"index.html":{},"modules.html":{}}}],["goup",{"_index":2795,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["graph",{"_index":2815,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["graphical",{"_index":820,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["gravity",{"_index":3173,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["gravitycontrol",{"_index":3165,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["gravitycontrol.value",{"_index":3182,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["gravitypref",{"_index":3203,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["green",{"_index":2708,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["grip",{"_index":2806,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["gripheight",{"_index":2992,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["grips",{"_index":2736,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["gripwidth",{"_index":2997,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["group",{"_index":3000,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["groupedevents",{"_index":2720,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["groupevents(pixperevent",{"_index":2949,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["grouping",{"_index":2846,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["gx",{"_index":693,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["gy",{"_index":694,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["hack",{"_index":617,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsNodeInfoCard.html":{},"interfaces/NodeData.html":{}}}],["handled",{"_index":1502,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["handling",{"_index":1227,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{}}}],["happens",{"_index":3372,"title":{},"body":{"miscellaneous/functions.html":{}}}],["hascollapsededge",{"_index":1318,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{}}}],["hasedge",{"_index":2186,"title":{},"body":{"classes/NetworkDataset.html":{}}}],["hasedge(id",{"_index":1520,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["hasexpandededge",{"_index":1317,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{}}}],["hasfiltered",{"_index":1700,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["hasn't",{"_index":2519,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{}}}],["hasnode",{"_index":2187,"title":{},"body":{"classes/NetworkDataset.html":{}}}],["hasnode(id",{"_index":1518,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["heatmap",{"_index":664,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsHeatmapComponent.html":{},"modules/BsHeatmapModule.html":{},"components/BsNodeInfoCard.html":{},"modules/BsTimelineModule.html":{},"components/BsTooltipComponent.html":{},"components/FacetNgxChart.html":{},"interfaces/HeatmapItem.html":{},"components/MapComponent.html":{},"components/NgxChart.html":{},"components/ResultTimeline.html":{},"coverage.html":{}}}],["heatmap'},{'name",{"_index":658,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"components/BsTooltipComponent.html":{},"components/FacetNgxChart.html":{},"components/MapComponent.html":{},"components/NgxChart.html":{},"components/ResultTimeline.html":{}}}],["heatmap.component",{"_index":1000,"title":{},"body":{"modules/BsHeatmapModule.html":{}}}],["heatmap.component.html",{"_index":691,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["heatmap.component.scss",{"_index":690,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["heatmap.component.ts",{"_index":3234,"title":{},"body":{"coverage.html":{}}}],["heatmap/.../index.ts",{"_index":3400,"title":{},"body":{"miscellaneous/variables.html":{}}}],["heatmap/bootstrap/facet",{"_index":3233,"title":{},"body":{"coverage.html":{}}}],["heatmap/bootstrap/heatmap.component.ts",{"_index":687,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{},"coverage.html":{}}}],["heatmap/bootstrap/heatmap.component.ts:108",{"_index":774,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["heatmap/bootstrap/heatmap.component.ts:123",{"_index":757,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["heatmap/bootstrap/heatmap.component.ts:160",{"_index":788,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["heatmap/bootstrap/heatmap.component.ts:189",{"_index":783,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["heatmap/bootstrap/heatmap.component.ts:200",{"_index":779,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["heatmap/bootstrap/heatmap.component.ts:209",{"_index":773,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["heatmap/bootstrap/heatmap.component.ts:23",{"_index":735,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["heatmap/bootstrap/heatmap.component.ts:230",{"_index":806,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["heatmap/bootstrap/heatmap.component.ts:26",{"_index":738,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["heatmap/bootstrap/heatmap.component.ts:27",{"_index":752,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["heatmap/bootstrap/heatmap.component.ts:28",{"_index":744,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["heatmap/bootstrap/heatmap.component.ts:29",{"_index":751,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["heatmap/bootstrap/heatmap.component.ts:32",{"_index":739,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["heatmap/bootstrap/heatmap.component.ts:33",{"_index":729,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["heatmap/bootstrap/heatmap.component.ts:36",{"_index":731,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["heatmap/bootstrap/heatmap.component.ts:37",{"_index":733,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["heatmap/bootstrap/heatmap.component.ts:38",{"_index":745,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["heatmap/bootstrap/heatmap.component.ts:39",{"_index":746,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["heatmap/bootstrap/heatmap.component.ts:40",{"_index":749,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["heatmap/bootstrap/heatmap.component.ts:43",{"_index":755,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["heatmap/bootstrap/heatmap.component.ts:44",{"_index":754,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["heatmap/bootstrap/heatmap.component.ts:47",{"_index":812,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["heatmap/bootstrap/heatmap.component.ts:48",{"_index":815,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["heatmap/bootstrap/heatmap.component.ts:49",{"_index":793,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["heatmap/bootstrap/heatmap.component.ts:52",{"_index":797,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["heatmap/bootstrap/heatmap.component.ts:53",{"_index":799,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["heatmap/bootstrap/heatmap.component.ts:54",{"_index":814,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["heatmap/bootstrap/heatmap.component.ts:55",{"_index":816,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["heatmap/bootstrap/heatmap.component.ts:58",{"_index":794,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["heatmap/bootstrap/heatmap.component.ts:61",{"_index":800,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["heatmap/bootstrap/heatmap.component.ts:62",{"_index":802,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["heatmap/bootstrap/heatmap.component.ts:63",{"_index":804,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["heatmap/bootstrap/heatmap.component.ts:64",{"_index":803,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["heatmap/bootstrap/heatmap.component.ts:65",{"_index":801,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["heatmap/bootstrap/heatmap.component.ts:68",{"_index":805,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["heatmap/bootstrap/heatmap.component.ts:69",{"_index":727,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["heatmap/bootstrap/heatmap.component.ts:78",{"_index":775,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["heatmap/bootstrap/heatmap.module.ts",{"_index":987,"title":{},"body":{"modules/BsHeatmapModule.html":{}}}],["heatmap/bootstrap/results",{"_index":3238,"title":{},"body":{"coverage.html":{}}}],["heatmap/bootstrap/tooltip.component.ts",{"_index":1059,"title":{},"body":{"components/BsTooltipComponent.html":{},"coverage.html":{}}}],["heatmap/bootstrap/tooltip.component.ts:37",{"_index":1076,"title":{},"body":{"components/BsTooltipComponent.html":{}}}],["heatmap/bootstrap/tooltip.component.ts:38",{"_index":1075,"title":{},"body":{"components/BsTooltipComponent.html":{}}}],["heatmap/bootstrap/tooltip.component.ts:39",{"_index":1077,"title":{},"body":{"components/BsTooltipComponent.html":{}}}],["heatmap/bootstrap/tooltip.component.ts:40",{"_index":1079,"title":{},"body":{"components/BsTooltipComponent.html":{}}}],["heatmap/bootstrap/tooltip.component.ts:41",{"_index":1078,"title":{},"body":{"components/BsTooltipComponent.html":{}}}],["heatmap/bootstrap/tooltip.component.ts:43",{"_index":1081,"title":{},"body":{"components/BsTooltipComponent.html":{}}}],["heatmap/messages/index.ts",{"_index":3243,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["heatmapitem",{"_index":734,"title":{"interfaces/HeatmapItem.html":{}},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{},"coverage.html":{}}}],["height",{"_index":588,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"interfaces/HeatmapItem.html":{},"components/MapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"components/NgxChart.html":{},"interfaces/NodeData.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{},"miscellaneous/variables.html":{}}}],["hidden",{"_index":2257,"title":{},"body":{"components/NgxChart.html":{},"miscellaneous/functions.html":{}}}],["hiderecordnode",{"_index":350,"title":{},"body":{"classes/AsyncRecordsProvider.html":{},"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["hiderecordnode=true",{"_index":3349,"title":{},"body":{"miscellaneous/functions.html":{}}}],["hides",{"_index":2878,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["highest",{"_index":1495,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["highlight",{"_index":1752,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["histogram",{"_index":2944,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["horizontalbar",{"_index":1139,"title":{},"body":{"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"components/NgxChart.html":{}}}],["host",{"_index":944,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["hovered",{"_index":2176,"title":{},"body":{"interfaces/MoneyDatum.html":{}}}],["hovers",{"_index":789,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["html",{"_index":647,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"components/BsTooltipComponent.html":{},"components/FacetNgxChart.html":{},"interfaces/HeatmapItem.html":{},"components/MapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"components/NgxChart.html":{},"components/ResultTimeline.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["htmlelement).offsetwidth",{"_index":916,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["http://localhost:4000/sba",{"_index":2390,"title":{},"body":{"classes/SelectedRecordsProvider.html":{}}}],["https://github.com/angular/angular/issues/16982",{"_index":2982,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["https://github.com/d3/d3",{"_index":2112,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["https://stackoverflow.com/questions/13576906/d3",{"_index":2103,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["https://visjs.github.io/vis",{"_index":1482,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/VisEvent.html":{},"miscellaneous/variables.html":{}}}],["human",{"_index":3340,"title":{},"body":{"miscellaneous/functions.html":{}}}],["humans",{"_index":3376,"title":{},"body":{"miscellaneous/functions.html":{}}}],["hybrid",{"_index":1250,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{}}}],["i=0",{"_index":1277,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["icon",{"_index":289,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/BaseProvider.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"components/MapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/VisEvent.html":{},"miscellaneous/functions.html":{}}}],["id",{"_index":472,"title":{},"body":{"classes/BaseProvider.html":{},"components/BsNodeInfoCard.html":{},"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeData.html":{},"interfaces/NodeType.html":{},"components/ResultTimeline.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{}}}],["identifier",{"_index":1872,"title":{},"body":{"components/MapComponent.html":{},"coverage.html":{}}}],["ids",{"_index":1535,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"classes/SelectedRecordsProvider.html":{}}}],["ids.foreach(id",{"_index":1557,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["ie",{"_index":419,"title":{},"body":{"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["if(!!changes['record",{"_index":2312,"title":{},"body":{"components/ResultTimeline.html":{}}}],["if(!!existingedge[\"label",{"_index":1614,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["if(!!item.value",{"_index":2672,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["if(!!this.selectfield.name",{"_index":1696,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["if(!changes[\"height",{"_index":2772,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["if(!config.maxnmonths",{"_index":2596,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["if(!dataset.hasedge(edge.id",{"_index":1263,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{}}}],["if(!dataset.hasnode(node.id",{"_index":1253,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{}}}],["if(!item.display",{"_index":217,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{}}}],["if(!items",{"_index":2667,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["if(!keepdanglingnodes",{"_index":1572,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["if(!neighbor",{"_index":1298,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{}}}],["if(!neighbor.visible",{"_index":1311,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{}}}],["if(!node",{"_index":1199,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{}}}],["if(!previousvalue",{"_index":2987,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["if(!record.modified",{"_index":2153,"title":{},"body":{"interfaces/MoneyDatum.html":{}}}],["if(!select",{"_index":2492,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["if(!sourcenode",{"_index":216,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{}}}],["if(!this.active",{"_index":1191,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{}}}],["if(!this.context.appservice.getccaggregation(aggregation",{"_index":169,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{}}}],["if(!this.currentrange",{"_index":2523,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["if(!this.events",{"_index":2502,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["if(!this.hasedge(edge.id",{"_index":1604,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["if(!this.hasnode(edge.from",{"_index":1640,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["if(!this.hasnode(node.id",{"_index":1589,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["if(!this.isfiltered(item",{"_index":1768,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["if(!this.neighbors[type",{"_index":1032,"title":{},"body":{"components/BsNodeInfoCard.html":{},"interfaces/NodeData.html":{}}}],["if(!this.optionsprefs.physics",{"_index":3140,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["if(!this.optionsprefs.physics.barneshut",{"_index":3142,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["if(!this.permanent",{"_index":1418,"title":{},"body":{"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/DynamicNodeType.html":{}}}],["if(!this.showtooltip",{"_index":2177,"title":{},"body":{"interfaces/MoneyDatum.html":{}}}],["if(!this.timeseries",{"_index":2494,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["if(!this.tooltipitem",{"_index":2164,"title":{},"body":{"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["if(!this.x",{"_index":2003,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["if(!this.zoomable",{"_index":2852,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["if(!utils.isstring(parsedexpr",{"_index":2485,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["if(!xextent[0",{"_index":2158,"title":{},"body":{"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["if(!yextent[0",{"_index":2070,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{}}}],["if((config",{"_index":2514,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["if((neighbor.visible",{"_index":1327,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{}}}],["if((node.precedence",{"_index":1592,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["if(_queries.length",{"_index":1401,"title":{},"body":{"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/DynamicNodeType.html":{}}}],["if(actions.length",{"_index":3092,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["if(agg.aggregation",{"_index":2518,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["if(aggregation",{"_index":187,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["if(array.isarray(config",{"_index":2542,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["if(bin",{"_index":2968,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["if(ccaggregation",{"_index":2576,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["if(changes[\"events",{"_index":2791,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["if(changes[\"height",{"_index":2013,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["if(changes[\"width",{"_index":2016,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["if(changes['options",{"_index":3057,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["if(changes['results",{"_index":3050,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["if(changes['style",{"_index":1931,"title":{},"body":{"components/MapComponent.html":{}}}],["if(col?.formatter",{"_index":497,"title":{},"body":{"classes/BaseProvider.html":{}}}],["if(currentvalue",{"_index":2983,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["if(datum",{"_index":2048,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{}}}],["if(directed",{"_index":516,"title":{},"body":{"classes/BaseProvider.html":{}}}],["if(edge.type.field",{"_index":545,"title":{},"body":{"classes/BaseProvider.html":{}}}],["if(event.edges.length",{"_index":3124,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["if(event.event.type",{"_index":3122,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["if(event.nodes.length",{"_index":3127,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["if(event.type",{"_index":2402,"title":{},"body":{"classes/SelectedRecordsProvider.html":{}}}],["if(events!==this.tooltipitem",{"_index":3002,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["if(events.length",{"_index":2961,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["if(existingedge[\"labels\"].indexof(label",{"_index":1616,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["if(exprs.length",{"_index":2626,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["if(hascollapsededge",{"_index":1321,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{}}}],["if(hasexpandededge",{"_index":1324,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{}}}],["if(i",{"_index":2471,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["if(isnan(value",{"_index":2065,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{}}}],["if(item.node",{"_index":1025,"title":{},"body":{"components/BsNodeInfoCard.html":{},"interfaces/NodeData.html":{}}}],["if(maxnmonths",{"_index":2605,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["if(neighborsneighbors.length",{"_index":1303,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{}}}],["if(node.visible",{"_index":1375,"title":{},"body":{"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/DynamicNodeType.html":{}}}],["if(nodefrom",{"_index":551,"title":{},"body":{"classes/BaseProvider.html":{}}}],["if(opened",{"_index":3156,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["if(parsedexpr.values",{"_index":2488,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["if(properties.items.length>0",{"_index":2369,"title":{},"body":{"components/ResultTimeline.html":{}}}],["if(query",{"_index":1416,"title":{},"body":{"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/DynamicNodeType.html":{}}}],["if(range",{"_index":2582,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["if(recorddata",{"_index":1217,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{}}}],["if(recordnode.id",{"_index":1247,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{}}}],["if(relation",{"_index":521,"title":{},"body":{"classes/BaseProvider.html":{}}}],["if(relativex",{"_index":919,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["if(results.records.length",{"_index":1454,"title":{},"body":{"interfaces/DynamicNodeType.html":{}}}],["if(select",{"_index":2482,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["if(selection",{"_index":2617,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["if(sourcenode",{"_index":164,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{}}}],["if(this._networkinitialized",{"_index":3079,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["if(this._selectededge",{"_index":3094,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["if(this._selectednode",{"_index":3090,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["if(this.active",{"_index":258,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/BaseProvider.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{}}}],["if(this.aggregations",{"_index":1682,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["if(this.checkselectionchange(this.currentselection",{"_index":2913,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["if(this.currentselection",{"_index":2880,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["if(this.data",{"_index":1705,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["if(this.edgetype.trigger",{"_index":1386,"title":{},"body":{"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{}}}],["if(this.events",{"_index":2950,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["if(this.facetservice.hasfiltered(this.name",{"_index":1917,"title":{},"body":{"components/MapComponent.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["if(this.georecords.length",{"_index":1935,"title":{},"body":{"components/MapComponent.html":{}}}],["if(this.hasedge(edge.id",{"_index":1638,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["if(this.hasfiltered",{"_index":1694,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["if(this.hasnode(node.id",{"_index":1635,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["if(this.initdone",{"_index":2380,"title":{},"body":{"components/ResultTimeline.html":{}}}],["if(this.items.length",{"_index":2353,"title":{},"body":{"components/ResultTimeline.html":{}}}],["if(this.maxdate",{"_index":2842,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["if(this.mindate",{"_index":2840,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["if(this.nodecache.has(node.id",{"_index":1417,"title":{},"body":{"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/DynamicNodeType.html":{}}}],["if(this.nodetype.trigger",{"_index":1441,"title":{},"body":{"interfaces/DynamicNodeType.html":{}}}],["if(this.openedwindow",{"_index":1947,"title":{},"body":{"components/MapComponent.html":{}}}],["if(this.orientation",{"_index":1082,"title":{},"body":{"components/BsTooltipComponent.html":{}}}],["if(this.providerssubscription",{"_index":3062,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["if(this.results",{"_index":2035,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["if(this.searchservice.breadcrumbs",{"_index":3087,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["if(this.searchservice.query.findselect(this.name",{"_index":2000,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["if(this.selectedvalues.has(utils.tosqlvalue(item.value).tolowercase",{"_index":1740,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["if(this.skips[type.aggregation+node.id",{"_index":271,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{}}}],["if(this.tooltipitem",{"_index":2128,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["if(this.viewinit",{"_index":863,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["if(this.zoombehavior",{"_index":2854,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["if(type",{"_index":192,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{}}}],["if(type.display",{"_index":1288,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{}}}],["if(type.field",{"_index":494,"title":{},"body":{"classes/BaseProvider.html":{}}}],["if(type.nodetypes.length",{"_index":1269,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{}}}],["if(type.nodetypes[0",{"_index":1210,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{}}}],["if(type.parse",{"_index":212,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{}}}],["if(typeof",{"_index":501,"title":{},"body":{"classes/BaseProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["if(types.length",{"_index":270,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{}}}],["if(update",{"_index":874,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/CustomData.html":{},"interfaces/HeatmapItem.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{}}}],["if(utils.isarray(recorddata",{"_index":1221,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{}}}],["if(utils.isarray(val",{"_index":1721,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["if(utils.isstring(recorddata",{"_index":1231,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{}}}],["if(utils.isstring(this.record.modified",{"_index":2360,"title":{},"body":{"components/ResultTimeline.html":{}}}],["if(utils.isstring(v",{"_index":1723,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["if(utils.isstring(val",{"_index":1719,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["if(utils.isstring(value",{"_index":1234,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{}}}],["if(val",{"_index":1718,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["if(value[\"value",{"_index":1236,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{}}}],["if(values.length",{"_index":231,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{}}}],["if(year",{"_index":2339,"title":{},"body":{"components/ResultTimeline.html":{}}}],["ignore",{"_index":2971,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["ignored",{"_index":2440,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["image",{"_index":586,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsNodeInfoCard.html":{},"interfaces/NodeData.html":{}}}],["implementation",{"_index":437,"title":{},"body":{"classes/BaseProvider.html":{}}}],["implements",{"_index":440,"title":{},"body":{"classes/BaseProvider.html":{},"components/BsEdgeInfoCard.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"interfaces/HeatmapItem.html":{},"components/MapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"components/NgxChart.html":{},"interfaces/NodeData.html":{},"components/ResultTimeline.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{}}}],["import",{"_index":33,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"components/BsEdgeInfoCard.html":{},"components/BsHeatmapComponent.html":{},"modules/BsHeatmapModule.html":{},"components/BsNodeInfoCard.html":{},"modules/BsTimelineModule.html":{},"components/BsTooltipComponent.html":{},"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"modules/FinanceModule.html":{},"modules/FusionChartsModule.html":{},"modules/GoogleMapsModule.html":{},"interfaces/HeatmapItem.html":{},"components/MapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"modules/NetworkModule.html":{},"interfaces/NetworkProvider.html":{},"components/NgxChart.html":{},"modules/NgxChartsModule.html":{},"interfaces/Node.html":{},"interfaces/NodeData.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"components/ResultTimeline.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{},"modules/VisTimelineModule.html":{}}}],["importance",{"_index":488,"title":{},"body":{"classes/BaseProvider.html":{}}}],["important",{"_index":2773,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["imports",{"_index":1001,"title":{},"body":{"modules/BsHeatmapModule.html":{},"modules/BsTimelineModule.html":{},"modules/FinanceModule.html":{},"modules/FusionChartsModule.html":{},"modules/GoogleMapsModule.html":{},"modules/NetworkModule.html":{},"modules/NgxChartsModule.html":{},"modules/VisTimelineModule.html":{}}}],["improved",{"_index":2946,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["inactive",{"_index":1496,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["incl",{"_index":2054,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{}}}],["include",{"_index":1167,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{},"miscellaneous/functions.html":{}}}],["includes",{"_index":411,"title":{},"body":{"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"classes/SelectedRecordsProvider.html":{}}}],["including",{"_index":1194,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{}}}],["index",{"_index":21,"title":{"index.html":{}},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"components/BsEdgeInfoCard.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"components/BsTooltipComponent.html":{},"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"interfaces/HeatmapItem.html":{},"components/MapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"components/NgxChart.html":{},"interfaces/Node.html":{},"interfaces/NodeData.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"components/ResultTimeline.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["individually",{"_index":285,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{}}}],["influence",{"_index":1241,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{}}}],["info",{"_index":3,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"components/BsEdgeInfoCard.html":{},"components/BsHeatmapComponent.html":{},"modules/BsHeatmapModule.html":{},"components/BsNodeInfoCard.html":{},"modules/BsTimelineModule.html":{},"components/BsTooltipComponent.html":{},"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"modules/FinanceModule.html":{},"modules/FusionChartsModule.html":{},"modules/GoogleMapsModule.html":{},"interfaces/HeatmapItem.html":{},"components/MapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"modules/NetworkModule.html":{},"interfaces/NetworkProvider.html":{},"components/NgxChart.html":{},"modules/NgxChartsModule.html":{},"interfaces/Node.html":{},"interfaces/NodeData.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"components/ResultTimeline.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{},"modules/VisTimelineModule.html":{},"coverage.html":{}}}],["information",{"_index":1439,"title":{},"body":{"interfaces/DynamicNodeType.html":{}}}],["infowindow",{"_index":1888,"title":{},"body":{"components/MapComponent.html":{}}}],["inherited",{"_index":355,"title":{},"body":{"classes/AsyncRecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{}}}],["initdone",{"_index":2275,"title":{},"body":{"components/ResultTimeline.html":{}}}],["initial",{"_index":2435,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{}}}],["initialization",{"_index":1892,"title":{},"body":{"components/MapComponent.html":{}}}],["initialize",{"_index":252,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"components/BsNodeInfoCard.html":{},"interfaces/NodeData.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{}}}],["initialized",{"_index":2788,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{}}}],["injectable",{"_index":3296,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["innerheight",{"_index":2002,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["innerwidth",{"_index":2001,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["input",{"_index":609,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"components/BsTooltipComponent.html":{},"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"interfaces/HeatmapItem.html":{},"components/MapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"components/NgxChart.html":{},"interfaces/NodeData.html":{},"components/ResultTimeline.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{}}}],["inputs",{"_index":600,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"components/BsTooltipComponent.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"components/MapComponent.html":{},"components/NgxChart.html":{},"components/ResultTimeline.html":{}}}],["insert",{"_index":1423,"title":{},"body":{"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{}}}],["inserted",{"_index":1352,"title":{},"body":{"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{},"miscellaneous/functions.html":{}}}],["inside",{"_index":809,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["instance",{"_index":620,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsNodeInfoCard.html":{},"interfaces/CustomData.html":{},"interfaces/NodeData.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["instanceof",{"_index":2673,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["instead",{"_index":329,"title":{},"body":{"classes/AsyncRecordsProvider.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/RecordNode.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"miscellaneous/functions.html":{}}}],["integer",{"_index":2101,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["integers",{"_index":2106,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["interaction",{"_index":822,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{},"components/MapComponent.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{}}}],["interactions",{"_index":826,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/HeatmapItem.html":{},"components/MapComponent.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["interface",{"_index":0,"title":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/FacetChartDataPoint.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/NetworkContext.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeData.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{}},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"components/NgxChart.html":{},"interfaces/Node.html":{},"interfaces/NodeData.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{},"coverage.html":{}}}],["interfaces",{"_index":2,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/FacetChartDataPoint.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/NetworkContext.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeData.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{},"index.html":{}}}],["intermediate",{"_index":391,"title":{},"body":{"classes/AsyncRecordsProvider.html":{},"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["internally",{"_index":1503,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["intlmodule",{"_index":994,"title":{},"body":{"modules/BsHeatmapModule.html":{},"modules/BsTimelineModule.html":{},"modules/FinanceModule.html":{},"modules/FusionChartsModule.html":{},"modules/GoogleMapsModule.html":{},"modules/NetworkModule.html":{},"modules/NgxChartsModule.html":{},"modules/VisTimelineModule.html":{}}}],["intlservice",{"_index":1098,"title":{},"body":{"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"components/NgxChart.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{}}}],["intlsubscription",{"_index":2737,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["invalid/empty",{"_index":2819,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["invisible",{"_index":1313,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{}}}],["isaggregationedgetype",{"_index":3285,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["isaggregationedgetype(et",{"_index":125,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"miscellaneous/functions.html":{}}}],["isdynamicedgetype",{"_index":3292,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["isdynamicedgetype(et",{"_index":1346,"title":{},"body":{"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{},"miscellaneous/functions.html":{}}}],["isedgevisible(type",{"_index":1287,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{}}}],["isfiltered",{"_index":1784,"title":{},"body":{"components/FacetNgxChart.html":{}}}],["isfiltered(item",{"_index":1771,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["ishidden",{"_index":1781,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["isnan(val[1",{"_index":2154,"title":{},"body":{"interfaces/MoneyDatum.html":{}}}],["isoltated",{"_index":1332,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{}}}],["isstructuraledgetype",{"_index":3302,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["isstructuraledgetype(et",{"_index":1181,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{},"miscellaneous/functions.html":{}}}],["it's",{"_index":1500,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["item",{"_index":107,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"components/BsHeatmapComponent.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"components/NgxChart.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"components/ResultTimeline.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"miscellaneous/variables.html":{}}}],["item.count",{"_index":242,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyDatum.html":{},"interfaces/NodeData.html":{}}}],["item.date",{"_index":2681,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["item.display!.length",{"_index":2059,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{}}}],["item.display!.substr(1",{"_index":2058,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{}}}],["item.display.split",{"_index":227,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{}}}],["item.node",{"_index":1036,"title":{},"body":{"components/BsNodeInfoCard.html":{},"interfaces/NodeData.html":{}}}],["item.node.context.appservice.getplurallabel(item.node.type.field",{"_index":1027,"title":{},"body":{"components/BsNodeInfoCard.html":{},"interfaces/NodeData.html":{}}}],["item.node.type.field",{"_index":1026,"title":{},"body":{"components/BsNodeInfoCard.html":{},"interfaces/NodeData.html":{}}}],["item.node.type.name",{"_index":1030,"title":{},"body":{"components/BsNodeInfoCard.html":{},"interfaces/NodeData.html":{}}}],["item.start",{"_index":931,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["item.value",{"_index":220,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["item.value.tostring",{"_index":2674,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["itemclicked",{"_index":724,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["itemclickevent",{"_index":1112,"title":{},"body":{"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"components/NgxChart.html":{}}}],["items",{"_index":57,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"components/BsHeatmapComponent.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"components/ResultTimeline.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/VisEvent.html":{}}}],["items._data[properties.items[0]].start",{"_index":2372,"title":{},"body":{"components/ResultTimeline.html":{}}}],["itemsclickable",{"_index":716,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["itimeseries",{"_index":2591,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["itself",{"_index":1252,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{}}}],["j",{"_index":1410,"title":{},"body":{"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["jmin",{"_index":2603,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["job",{"_index":3361,"title":{},"body":{"miscellaneous/functions.html":{}}}],["jobs",{"_index":226,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{}}}],["keep",{"_index":2100,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["keepdanglingnodes",{"_index":1563,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["keeping",{"_index":1902,"title":{},"body":{"components/MapComponent.html":{}}}],["kept",{"_index":1493,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["key",{"_index":528,"title":{},"body":{"classes/BaseProvider.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["key:string",{"_index":2715,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["keyword",{"_index":1970,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{}}}],["l",{"_index":2999,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["label",{"_index":311,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/BaseProvider.html":{},"components/BsNodeInfoCard.html":{},"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeData.html":{},"interfaces/NodeType.html":{},"miscellaneous/functions.html":{}}}],["label1",{"_index":555,"title":{},"body":{"classes/BaseProvider.html":{}}}],["label2",{"_index":557,"title":{},"body":{"classes/BaseProvider.html":{}}}],["labeldisplay",{"_index":3440,"title":{},"body":{"miscellaneous/variables.html":{}}}],["labels",{"_index":1611,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["labels.text.fill",{"_index":3405,"title":{},"body":{"miscellaneous/variables.html":{}}}],["labels.text.stroke",{"_index":3407,"title":{},"body":{"miscellaneous/variables.html":{}}}],["landscape.man_made",{"_index":3416,"title":{},"body":{"miscellaneous/variables.html":{}}}],["landscape.natural",{"_index":3418,"title":{},"body":{"miscellaneous/variables.html":{}}}],["language",{"_index":1748,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["larry",{"_index":63,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{}}}],["last",{"_index":2963,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["last.push(event",{"_index":2969,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["lastbin",{"_index":2965,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["lastnode",{"_index":240,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{}}}],["latitude",{"_index":1865,"title":{},"body":{"components/MapComponent.html":{}}}],["latitudefield",{"_index":1857,"title":{},"body":{"components/MapComponent.html":{}}}],["left",{"_index":581,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"components/BsTooltipComponent.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/NodeData.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{}}}],["left.px",{"_index":1083,"title":{},"body":{"components/BsTooltipComponent.html":{}}}],["legend",{"_index":646,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsHeatmapComponent.html":{},"modules/BsHeatmapModule.html":{},"components/BsNodeInfoCard.html":{},"modules/BsTimelineModule.html":{},"components/BsTooltipComponent.html":{},"components/FacetNgxChart.html":{},"modules/FinanceModule.html":{},"modules/FusionChartsModule.html":{},"modules/GoogleMapsModule.html":{},"components/MapComponent.html":{},"modules/NetworkModule.html":{},"components/NgxChart.html":{},"modules/NgxChartsModule.html":{},"components/ResultTimeline.html":{},"modules/VisTimelineModule.html":{},"index.html":{}}}],["length",{"_index":2984,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{}}}],["library",{"_index":1826,"title":{},"body":{"modules/FusionChartsModule.html":{},"interfaces/VisEvent.html":{}}}],["life",{"_index":1468,"title":{},"body":{"interfaces/DynamicNodeType.html":{}}}],["light",{"_index":747,"title":{},"body":{"components/BsHeatmapComponent.html":{},"components/BsTooltipComponent.html":{},"modules/FusionChartsModule.html":{},"interfaces/HeatmapItem.html":{},"components/MapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{}}}],["limit",{"_index":2919,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["limits",{"_index":1170,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{}}}],["line",{"_index":889,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["linestyles",{"_index":2411,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{}}}],["link",{"_index":1177,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{}}}],["linked",{"_index":3350,"title":{},"body":{"miscellaneous/functions.html":{}}}],["links",{"_index":1330,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{}}}],["list",{"_index":143,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"components/BsHeatmapComponent.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"components/MapComponent.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"miscellaneous/functions.html":{}}}],["list.sort((a,b",{"_index":1041,"title":{},"body":{"components/BsNodeInfoCard.html":{},"interfaces/NodeData.html":{}}}],["listen",{"_index":1356,"title":{},"body":{"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/DynamicNodeType.html":{}}}],["listener",{"_index":3059,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["literal",{"_index":1008,"title":{},"body":{"components/BsNodeInfoCard.html":{},"interfaces/EdgeType.html":{},"interfaces/NodeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{}}}],["locale",{"_index":2741,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["localechange",{"_index":1119,"title":{},"body":{"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"components/NgxChart.html":{}}}],["longitude",{"_index":1869,"title":{},"body":{"components/MapComponent.html":{}}}],["longitudefield",{"_index":1858,"title":{},"body":{"components/MapComponent.html":{}}}],["lot",{"_index":1437,"title":{},"body":{"interfaces/DynamicNodeType.html":{}}}],["m",{"_index":2466,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{}}}],["made",{"_index":2521,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["make",{"_index":1314,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{}}}],["makedata",{"_index":1703,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["manage",{"_index":1207,"title":{},"body":{"interfaces/CustomData.html":{},"components/MapComponent.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{}}}],["manages",{"_index":1428,"title":{},"body":{"interfaces/DynamicNodeType.html":{}}}],["managing",{"_index":11,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{}}}],["manual",{"_index":83,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{},"miscellaneous/typealiases.html":{}}}],["manually",{"_index":3386,"title":{},"body":{"miscellaneous/functions.html":{}}}],["many",{"_index":133,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"interfaces/VisEvent.html":{}}}],["map",{"_index":1366,"title":{},"body":{"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"components/MapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["map(a",{"_index":1689,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["map(agg",{"_index":2578,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["map(d",{"_index":2547,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["map(e",{"_index":1021,"title":{},"body":{"components/BsNodeInfoCard.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeData.html":{},"interfaces/NodeType.html":{}}}],["map(events",{"_index":2507,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["map(item",{"_index":2671,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["map(r",{"_index":2558,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["map(results",{"_index":2586,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["map.component",{"_index":1843,"title":{},"body":{"modules/GoogleMapsModule.html":{}}}],["map.component.html",{"_index":1846,"title":{},"body":{"components/MapComponent.html":{}}}],["map.set(node.id",{"_index":1377,"title":{},"body":{"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/DynamicNodeType.html":{}}}],["mapcomponent",{"_index":674,"title":{"components/MapComponent.html":{}},"body":{"components/BsEdgeInfoCard.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"components/BsTooltipComponent.html":{},"components/FacetNgxChart.html":{},"modules/GoogleMapsModule.html":{},"components/MapComponent.html":{},"components/NgxChart.html":{},"components/ResultTimeline.html":{},"coverage.html":{},"index.html":{}}}],["mapstyles",{"_index":1851,"title":{},"body":{"components/MapComponent.html":{}}}],["margin",{"_index":717,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"components/ResultTimeline.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"miscellaneous/variables.html":{}}}],["marker",{"_index":1879,"title":{},"body":{"components/MapComponent.html":{}}}],["markers",{"_index":1900,"title":{},"body":{"components/MapComponent.html":{}}}],["marks",{"_index":2105,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["matching",{"_index":322,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"components/BsEdgeInfoCard.html":{},"components/BsHeatmapComponent.html":{},"modules/BsHeatmapModule.html":{},"components/BsNodeInfoCard.html":{},"modules/BsTimelineModule.html":{},"components/BsTooltipComponent.html":{},"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"modules/FinanceModule.html":{},"modules/FusionChartsModule.html":{},"modules/GoogleMapsModule.html":{},"interfaces/HeatmapItem.html":{},"components/MapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"modules/NetworkModule.html":{},"interfaces/NetworkProvider.html":{},"components/NgxChart.html":{},"modules/NgxChartsModule.html":{},"interfaces/Node.html":{},"interfaces/NodeData.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"components/ResultTimeline.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{},"modules/VisTimelineModule.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["math.floor(event.date.gettime",{"_index":2967,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["math.floor(last[0].date.gettime",{"_index":2966,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["math.floor(this.innerwidth",{"_index":2952,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["math.max((this.innerheight",{"_index":2994,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["math.min(10",{"_index":2993,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["max",{"_index":825,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{}}}],["max_dates",{"_index":2280,"title":{},"body":{"components/ResultTimeline.html":{}}}],["max_year",{"_index":2281,"title":{},"body":{"components/ResultTimeline.html":{}}}],["maxaggregationdate",{"_index":2445,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["maxdate",{"_index":2438,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{}}}],["maxheight",{"_index":2308,"title":{},"body":{"components/ResultTimeline.html":{},"miscellaneous/variables.html":{}}}],["maximum",{"_index":2424,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{}}}],["maxlat",{"_index":1920,"title":{},"body":{"components/MapComponent.html":{}}}],["maxlng",{"_index":1924,"title":{},"body":{"components/MapComponent.html":{}}}],["maxnmonths",{"_index":2423,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["maxx",{"_index":718,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["maxy",{"_index":719,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["maxzoomdays",{"_index":2449,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{}}}],["meaning",{"_index":3370,"title":{},"body":{"miscellaneous/functions.html":{}}}],["means",{"_index":72,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"miscellaneous/typealiases.html":{}}}],["measured",{"_index":2941,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["menu",{"_index":1666,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["merge",{"_index":400,"title":{},"body":{"classes/AsyncRecordsProvider.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["merge(dataset",{"_index":1586,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["merged",{"_index":491,"title":{},"body":{"classes/BaseProvider.html":{},"interfaces/CustomData.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{}}}],["mergedatasets(datasets",{"_index":3071,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["mergedevents",{"_index":2460,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["mergedtimeseries",{"_index":2459,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["merges",{"_index":1265,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/VisEvent.html":{}}}],["merging",{"_index":1494,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["metadata",{"_index":13,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"components/BsEdgeInfoCard.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"components/BsTooltipComponent.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicNodeType.html":{},"components/FacetNgxChart.html":{},"components/MapComponent.html":{},"components/NgxChart.html":{},"interfaces/RecordNode.html":{},"components/ResultTimeline.html":{},"interfaces/StructuralEdgeType.html":{},"miscellaneous/functions.html":{}}}],["method",{"_index":316,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"components/BsEdgeInfoCard.html":{},"components/BsNodeInfoCard.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeData.html":{},"interfaces/NodeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{}}}],["methods",{"_index":337,"title":{},"body":{"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"components/BsEdgeInfoCard.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"components/MapComponent.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"components/NgxChart.html":{},"components/ResultTimeline.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["microsoft",{"_index":1187,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{},"miscellaneous/functions.html":{}}}],["middle",{"_index":510,"title":{},"body":{"classes/BaseProvider.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["min",{"_index":2602,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["min_dates",{"_index":2282,"title":{},"body":{"components/ResultTimeline.html":{}}}],["min_year",{"_index":2283,"title":{},"body":{"components/ResultTimeline.html":{}}}],["minaggregationdate",{"_index":2444,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["mindate",{"_index":2437,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{}}}],["minheight",{"_index":2306,"title":{},"body":{"components/ResultTimeline.html":{},"miscellaneous/variables.html":{}}}],["minimum",{"_index":2859,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["minlat",{"_index":1918,"title":{},"body":{"components/MapComponent.html":{}}}],["minlng",{"_index":1922,"title":{},"body":{"components/MapComponent.html":{}}}],["minus",{"_index":1676,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"components/MapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/VisEvent.html":{}}}],["minzoomdays",{"_index":2447,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{}}}],["misc",{"_index":831,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["miscellaneous",{"_index":3332,"title":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["missing",{"_index":1642,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["mistake",{"_index":170,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{}}}],["mm",{"_index":2691,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["mode",{"_index":71,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AsyncRecordsProvider.html":{},"components/MapComponent.html":{},"miscellaneous/typealiases.html":{}}}],["model.name",{"_index":2254,"title":{},"body":{"components/NgxChart.html":{}}}],["model.value",{"_index":2255,"title":{},"body":{"components/NgxChart.html":{}}}],["models",{"_index":44,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"components/BsEdgeInfoCard.html":{},"components/BsNodeInfoCard.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/NodeData.html":{},"interfaces/RecordNode.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/VisEvent.html":{}}}],["models.ts",{"_index":1470,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"coverage.html":{}}}],["models.ts:100",{"_index":2226,"title":{},"body":{"interfaces/NetworkProvider.html":{}}}],["models.ts:103",{"_index":2223,"title":{},"body":{"interfaces/NetworkProvider.html":{}}}],["models.ts:106",{"_index":2221,"title":{},"body":{"interfaces/NetworkProvider.html":{}}}],["models.ts:109",{"_index":2220,"title":{},"body":{"interfaces/NetworkProvider.html":{}}}],["models.ts:112",{"_index":2225,"title":{},"body":{"interfaces/NetworkProvider.html":{}}}],["models.ts:128",{"_index":2179,"title":{},"body":{"interfaces/NetworkContext.html":{}}}],["models.ts:142",{"_index":2205,"title":{},"body":{"classes/NetworkDataset.html":{}}}],["models.ts:147",{"_index":2204,"title":{},"body":{"classes/NetworkDataset.html":{}}}],["models.ts:152",{"_index":2199,"title":{},"body":{"classes/NetworkDataset.html":{}}}],["models.ts:157",{"_index":2196,"title":{},"body":{"classes/NetworkDataset.html":{}}}],["models.ts:162",{"_index":2201,"title":{},"body":{"classes/NetworkDataset.html":{}}}],["models.ts:167",{"_index":2198,"title":{},"body":{"classes/NetworkDataset.html":{}}}],["models.ts:172",{"_index":2203,"title":{},"body":{"classes/NetworkDataset.html":{}}}],["models.ts:177",{"_index":2202,"title":{},"body":{"classes/NetworkDataset.html":{}}}],["models.ts:182",{"_index":2200,"title":{},"body":{"classes/NetworkDataset.html":{}}}],["models.ts:187",{"_index":2197,"title":{},"body":{"classes/NetworkDataset.html":{}}}],["models.ts:192",{"_index":2193,"title":{},"body":{"classes/NetworkDataset.html":{}}}],["models.ts:198",{"_index":2191,"title":{},"body":{"classes/NetworkDataset.html":{}}}],["models.ts:203",{"_index":2190,"title":{},"body":{"classes/NetworkDataset.html":{}}}],["models.ts:213",{"_index":2207,"title":{},"body":{"classes/NetworkDataset.html":{}}}],["models.ts:218",{"_index":2192,"title":{},"body":{"classes/NetworkDataset.html":{}}}],["models.ts:230",{"_index":2194,"title":{},"body":{"classes/NetworkDataset.html":{}}}],["models.ts:235",{"_index":2195,"title":{},"body":{"classes/NetworkDataset.html":{}}}],["models.ts:251",{"_index":2206,"title":{},"body":{"classes/NetworkDataset.html":{}}}],["models.ts:318",{"_index":2208,"title":{},"body":{"classes/NetworkDataset.html":{}}}],["models.ts:85",{"_index":2222,"title":{},"body":{"interfaces/NetworkProvider.html":{}}}],["models.ts:88",{"_index":2219,"title":{},"body":{"interfaces/NetworkProvider.html":{}}}],["models.ts:91",{"_index":2224,"title":{},"body":{"interfaces/NetworkProvider.html":{}}}],["models.ts:94",{"_index":2228,"title":{},"body":{"interfaces/NetworkProvider.html":{}}}],["models.ts:97",{"_index":2227,"title":{},"body":{"interfaces/NetworkProvider.html":{}}}],["modes",{"_index":77,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"miscellaneous/typealiases.html":{}}}],["modified",{"_index":2358,"title":{},"body":{"components/ResultTimeline.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["modifying",{"_index":1588,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["module",{"_index":975,"title":{"modules/BsHeatmapModule.html":{},"modules/BsTimelineModule.html":{},"modules/FinanceModule.html":{},"modules/FusionChartsModule.html":{},"modules/GoogleMapsModule.html":{},"modules/NetworkModule.html":{},"modules/NgxChartsModule.html":{},"modules/VisTimelineModule.html":{}},"body":{"modules/BsHeatmapModule.html":{},"modules/BsTimelineModule.html":{},"modules/FinanceModule.html":{},"modules/FusionChartsModule.html":{},"modules/GoogleMapsModule.html":{},"modules/NetworkModule.html":{},"modules/NgxChartsModule.html":{},"modules/VisTimelineModule.html":{},"index.html":{}}}],["module.ts",{"_index":3209,"title":{},"body":{"modules/VisTimelineModule.html":{}}}],["modules",{"_index":977,"title":{"modules.html":{}},"body":{"modules/BsHeatmapModule.html":{},"modules/BsTimelineModule.html":{},"modules/FinanceModule.html":{},"modules/FusionChartsModule.html":{},"modules/GoogleMapsModule.html":{},"modules/NetworkModule.html":{},"modules/NgxChartsModule.html":{},"modules/VisTimelineModule.html":{},"index.html":{},"modules.html":{}}}],["moment",{"_index":2305,"title":{},"body":{"components/ResultTimeline.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["moment(date).format('ll",{"_index":2352,"title":{},"body":{"components/ResultTimeline.html":{}}}],["moment(dateobj.display).todate",{"_index":2347,"title":{},"body":{"components/ResultTimeline.html":{}}}],["moment(val.length",{"_index":2675,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["money",{"_index":677,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"components/BsTooltipComponent.html":{},"components/FacetNgxChart.html":{},"modules/FinanceModule.html":{},"components/MapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"components/NgxChart.html":{},"components/ResultTimeline.html":{}}}],["moneyaggregation",{"_index":1976,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{}}}],["moneycloudcomponent",{"_index":676,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"components/BsTooltipComponent.html":{},"components/FacetNgxChart.html":{},"modules/FinanceModule.html":{},"components/MapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"components/NgxChart.html":{},"components/ResultTimeline.html":{},"coverage.html":{},"index.html":{}}}],["moneyclouddatum",{"_index":1955,"title":{"interfaces/MoneyCloudDatum.html":{}},"body":{"interfaces/MoneyCloudDatum.html":{},"coverage.html":{}}}],["moneycolumn",{"_index":2135,"title":{},"body":{"interfaces/MoneyDatum.html":{}}}],["moneydatum",{"_index":2129,"title":{"interfaces/MoneyDatum.html":{}},"body":{"interfaces/MoneyDatum.html":{},"coverage.html":{}}}],["moneytimelinecomponent",{"_index":679,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"components/BsTooltipComponent.html":{},"components/FacetNgxChart.html":{},"modules/FinanceModule.html":{},"components/MapComponent.html":{},"interfaces/MoneyDatum.html":{},"components/NgxChart.html":{},"components/ResultTimeline.html":{},"coverage.html":{},"index.html":{}}}],["moneyvaluecolumn",{"_index":1973,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{}}}],["mono",{"_index":1218,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{}}}],["month",{"_index":2687,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["months",{"_index":2425,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["more",{"_index":1349,"title":{},"body":{"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["mouse",{"_index":790,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["mouseevent",{"_index":787,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["move",{"_index":627,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsNodeInfoCard.html":{},"interfaces/NodeData.html":{}}}],["moved",{"_index":2897,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["ms",{"_index":821,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["msg#facet.clearselects",{"_index":1678,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"components/MapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/VisEvent.html":{}}}],["msg#googlemaps.filterarea",{"_index":1916,"title":{},"body":{"components/MapComponent.html":{}}}],["msg#heatmap.showing",{"_index":933,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["msg#heatmap.tooltip",{"_index":940,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["msg#network.actions.active",{"_index":460,"title":{},"body":{"classes/BaseProvider.html":{}}}],["msg#network.actions.collapsemeta",{"_index":1326,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{}}}],["msg#network.actions.expandmeta",{"_index":1323,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{}}}],["msg#network.actions.fetchmoreall",{"_index":296,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{}}}],["msg#network.actions.fetchmorealltext",{"_index":298,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{}}}],["msg#network.actions.inactive",{"_index":461,"title":{},"body":{"classes/BaseProvider.html":{}}}],["msg#network.actions.providers",{"_index":3098,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["msg#network.actions.refresh",{"_index":3047,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["msg#network.actions.reset",{"_index":469,"title":{},"body":{"classes/BaseProvider.html":{}}}],["msg#network.actions.resettitle",{"_index":470,"title":{},"body":{"classes/BaseProvider.html":{}}}],["msg#network.actions.toggle",{"_index":462,"title":{},"body":{"classes/BaseProvider.html":{}}}],["msg#network.infocards.aggregation",{"_index":638,"title":{},"body":{"components/BsEdgeInfoCard.html":{}}}],["msg#network.infocards.count",{"_index":635,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsNodeInfoCard.html":{}}}],["msg#network.infocards.record",{"_index":640,"title":{},"body":{"components/BsEdgeInfoCard.html":{}}}],["msgfrom",{"_index":1258,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{}}}],["msgto",{"_index":1259,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{}}}],["multi",{"_index":1219,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{}}}],["multiple",{"_index":1166,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"components/MapComponent.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["multivalued",{"_index":1782,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["mutable",{"_index":1490,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["mutate",{"_index":1449,"title":{},"body":{"interfaces/DynamicNodeType.html":{}}}],["mutatenodes(nodes",{"_index":1457,"title":{},"body":{"interfaces/DynamicNodeType.html":{}}}],["mutates",{"_index":1456,"title":{},"body":{"interfaces/DynamicNodeType.html":{}}}],["mutation",{"_index":1461,"title":{},"body":{"interfaces/DynamicNodeType.html":{},"interfaces/VisEvent.html":{}}}],["muted",{"_index":644,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsNodeInfoCard.html":{}}}],["n.visible",{"_index":1532,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["name",{"_index":96,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"components/BsEdgeInfoCard.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"components/BsTooltipComponent.html":{},"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"components/MapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"components/NgxChart.html":{},"interfaces/Node.html":{},"interfaces/NodeData.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"components/ResultTimeline.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{},"miscellaneous/functions.html":{}}}],["native",{"_index":2019,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["nbins",{"_index":2951,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["necessary",{"_index":1355,"title":{},"body":{"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{}}}],["need",{"_index":272,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"modules/BsTimelineModule.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{}}}],["needs",{"_index":2031,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["neighbor",{"_index":398,"title":{},"body":{"classes/AsyncRecordsProvider.html":{},"components/BsNodeInfoCard.html":{},"interfaces/CustomData.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeData.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["neighbor.count",{"_index":1571,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["neighbor.key",{"_index":1044,"title":{},"body":{"components/BsNodeInfoCard.html":{}}}],["neighbor.visible",{"_index":1304,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{}}}],["neighbors",{"_index":1003,"title":{},"body":{"components/BsNodeInfoCard.html":{},"interfaces/CustomData.html":{},"interfaces/NodeData.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{}}}],["neighborsneighbors",{"_index":1301,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{}}}],["network",{"_index":43,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"components/BsEdgeInfoCard.html":{},"components/BsNodeInfoCard.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeData.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/VisEvent.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["network'},{'name",{"_index":681,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"components/BsTooltipComponent.html":{},"components/FacetNgxChart.html":{},"components/MapComponent.html":{},"components/NgxChart.html":{},"components/ResultTimeline.html":{}}}],["network.component",{"_index":2217,"title":{},"body":{"modules/NetworkModule.html":{}}}],["network.component.html",{"_index":3022,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["network/.../aggregation",{"_index":3335,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["network/.../dynamic",{"_index":3336,"title":{},"body":{"miscellaneous/functions.html":{}}}],["network/.../network",{"_index":3334,"title":{},"body":{"miscellaneous/functions.html":{}}}],["network/.../network.component.ts",{"_index":3396,"title":{},"body":{"miscellaneous/variables.html":{}}}],["network/.../records",{"_index":3337,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["network/docs/network",{"_index":3020,"title":{},"body":{"interfaces/VisEvent.html":{},"miscellaneous/variables.html":{}}}],["network/docs/network/edges.html",{"_index":1488,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["network/docs/network/nodes.html",{"_index":1483,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["network/edge",{"_index":573,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"coverage.html":{}}}],["network/network",{"_index":1469,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["network/network.component.ts",{"_index":3012,"title":{},"body":{"interfaces/VisEvent.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["network/network.module.ts",{"_index":2213,"title":{},"body":{"modules/NetworkModule.html":{}}}],["network/node",{"_index":1002,"title":{},"body":{"components/BsNodeInfoCard.html":{},"interfaces/NodeData.html":{},"coverage.html":{}}}],["network/providers/aggregation",{"_index":6,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["network/providers/async",{"_index":325,"title":{},"body":{"classes/AsyncRecordsProvider.html":{},"coverage.html":{}}}],["network/providers/base",{"_index":436,"title":{},"body":{"classes/BaseProvider.html":{},"coverage.html":{}}}],["network/providers/dynamic",{"_index":1335,"title":{},"body":{"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/DynamicNodeType.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["network/providers/provider",{"_index":3294,"title":{},"body":{"coverage.html":{}}}],["network/providers/records",{"_index":1162,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["network/providers/selected",{"_index":2385,"title":{},"body":{"classes/SelectedRecordsProvider.html":{},"coverage.html":{}}}],["networkcomponent",{"_index":680,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"components/BsTooltipComponent.html":{},"components/FacetNgxChart.html":{},"components/MapComponent.html":{},"modules/NetworkModule.html":{},"components/NgxChart.html":{},"components/ResultTimeline.html":{},"interfaces/VisEvent.html":{},"coverage.html":{},"index.html":{}}}],["networkcontext",{"_index":42,"title":{"interfaces/NetworkContext.html":{}},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"interfaces/CustomData.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/VisEvent.html":{},"coverage.html":{}}}],["networkdataset",{"_index":41,"title":{"classes/NetworkDataset.html":{}},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/VisEvent.html":{},"coverage.html":{}}}],["networkinitialized",{"_index":3108,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["networkinstance",{"_index":623,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsNodeInfoCard.html":{},"interfaces/NodeData.html":{}}}],["networkinstance.focus(node.id",{"_index":625,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsNodeInfoCard.html":{},"interfaces/NodeData.html":{}}}],["networkinstance.selectnodes([node.id",{"_index":629,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsNodeInfoCard.html":{},"interfaces/NodeData.html":{}}}],["networkmodule",{"_index":2209,"title":{"modules/NetworkModule.html":{}},"body":{"modules/NetworkModule.html":{},"index.html":{},"modules.html":{}}}],["networkprovider",{"_index":244,"title":{"interfaces/NetworkProvider.html":{}},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/VisEvent.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["networkservice",{"_index":621,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsNodeInfoCard.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeData.html":{},"interfaces/NodeType.html":{},"interfaces/VisEvent.html":{}}}],["new",{"_index":101,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"components/BsHeatmapComponent.html":{},"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"interfaces/HeatmapItem.html":{},"components/MapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"components/NgxChart.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"components/ResultTimeline.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["newselection",{"_index":2910,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["next",{"_index":376,"title":{},"body":{"classes/AsyncRecordsProvider.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["ng",{"_index":947,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["ngafterviewinit",{"_index":709,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["ngdocheck",{"_index":1155,"title":{},"body":{"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"components/NgxChart.html":{}}}],["ngmodule",{"_index":988,"title":{},"body":{"modules/BsHeatmapModule.html":{},"modules/BsTimelineModule.html":{},"modules/FinanceModule.html":{},"modules/FusionChartsModule.html":{},"modules/GoogleMapsModule.html":{},"modules/NetworkModule.html":{},"modules/NgxChartsModule.html":{},"modules/VisTimelineModule.html":{}}}],["ngonchanges",{"_index":599,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"components/FacetNgxChart.html":{},"interfaces/HeatmapItem.html":{},"components/MapComponent.html":{},"components/NgxChart.html":{},"interfaces/NodeData.html":{},"components/ResultTimeline.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["ngonchanges(changes",{"_index":1146,"title":{},"body":{"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"components/MapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"components/NgxChart.html":{},"components/ResultTimeline.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{}}}],["ngonchanges(changes:simplechanges",{"_index":2311,"title":{},"body":{"components/ResultTimeline.html":{}}}],["ngondestroy",{"_index":1131,"title":{},"body":{"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"components/NgxChart.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{}}}],["ngoninit",{"_index":1126,"title":{},"body":{"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"components/NgxChart.html":{}}}],["ngx",{"_index":670,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"components/BsTooltipComponent.html":{},"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"components/MapComponent.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"modules/NetworkModule.html":{},"interfaces/NetworkProvider.html":{},"components/NgxChart.html":{},"modules/NgxChartsModule.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"components/ResultTimeline.html":{},"interfaces/VisEvent.html":{},"modules/VisTimelineModule.html":{},"coverage.html":{},"dependencies.html":{}}}],["ngxchart",{"_index":682,"title":{"components/NgxChart.html":{}},"body":{"components/BsEdgeInfoCard.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"components/BsTooltipComponent.html":{},"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"components/FacetNgxChart.html":{},"components/MapComponent.html":{},"components/NgxChart.html":{},"modules/NgxChartsModule.html":{},"components/ResultTimeline.html":{},"coverage.html":{},"index.html":{}}}],["ngxchartsmodule",{"_index":2260,"title":{"modules/NgxChartsModule.html":{}},"body":{"modules/NgxChartsModule.html":{},"index.html":{},"modules.html":{}}}],["nmonths",{"_index":2593,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["node",{"_index":38,"title":{"interfaces/Node.html":{}},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"components/BsEdgeInfoCard.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"components/BsTooltipComponent.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"components/FacetNgxChart.html":{},"components/MapComponent.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"modules/NetworkModule.html":{},"interfaces/NetworkProvider.html":{},"components/NgxChart.html":{},"interfaces/Node.html":{},"interfaces/NodeData.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"components/ResultTimeline.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/VisEvent.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["node's",{"_index":3379,"title":{},"body":{"miscellaneous/functions.html":{}}}],["node.context.name",{"_index":538,"title":{},"body":{"classes/BaseProvider.html":{}}}],["node.context.networkservice['networks'][node.context.name",{"_index":624,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsNodeInfoCard.html":{},"interfaces/NodeData.html":{}}}],["node.context.searchservice.query.addselect(expr",{"_index":537,"title":{},"body":{"classes/BaseProvider.html":{}}}],["node.context.searchservice.search",{"_index":539,"title":{},"body":{"classes/BaseProvider.html":{}}}],["node.context.select(node",{"_index":632,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsNodeInfoCard.html":{},"interfaces/NodeData.html":{}}}],["node.count",{"_index":645,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["node.id",{"_index":1248,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{}}}],["node.id.substr(node.type.name.length+1",{"_index":482,"title":{},"body":{"classes/BaseProvider.html":{}}}],["node.label",{"_index":312,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/BaseProvider.html":{},"components/BsEdgeInfoCard.html":{},"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/DynamicNodeType.html":{}}}],["node.provider",{"_index":532,"title":{},"body":{"classes/BaseProvider.html":{}}}],["node.record",{"_index":1225,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{}}}],["node.record[type.field",{"_index":1216,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{}}}],["node.type",{"_index":269,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{}}}],["node.type.field",{"_index":533,"title":{},"body":{"classes/BaseProvider.html":{}}}],["node.visible",{"_index":1245,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{}}}],["node1.id",{"_index":476,"title":{},"body":{"classes/BaseProvider.html":{}}}],["node2",{"_index":475,"title":{},"body":{"classes/BaseProvider.html":{}}}],["node2.id",{"_index":478,"title":{},"body":{"classes/BaseProvider.html":{}}}],["node['icon']['code",{"_index":642,"title":{},"body":{"components/BsEdgeInfoCard.html":{}}}],["node[\\'icon\\'][\\'code",{"_index":654,"title":{},"body":{"components/BsEdgeInfoCard.html":{}}}],["nodecache",{"_index":1365,"title":{},"body":{"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/DynamicNodeType.html":{}}}],["nodeclicked",{"_index":3027,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["nodedata",{"_index":1004,"title":{"interfaces/NodeData.html":{}},"body":{"components/BsNodeInfoCard.html":{},"interfaces/NodeData.html":{},"coverage.html":{}}}],["nodedata.count",{"_index":1047,"title":{},"body":{"components/BsNodeInfoCard.html":{}}}],["nodedata.node.label",{"_index":1046,"title":{},"body":{"components/BsNodeInfoCard.html":{}}}],["nodedata.node['icon']['code",{"_index":1045,"title":{},"body":{"components/BsNodeInfoCard.html":{}}}],["nodedata.node[\\'icon\\'][\\'code",{"_index":1048,"title":{},"body":{"components/BsNodeInfoCard.html":{}}}],["nodefrom",{"_index":540,"title":{},"body":{"classes/BaseProvider.html":{}}}],["nodefrom.label",{"_index":556,"title":{},"body":{"classes/BaseProvider.html":{}}}],["nodefrom.type.field",{"_index":552,"title":{},"body":{"classes/BaseProvider.html":{}}}],["nodeid",{"_index":1569,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["nodeidx",{"_index":1515,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["nodeoptions",{"_index":1484,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["nodes",{"_index":102,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/VisEvent.html":{},"miscellaneous/functions.html":{}}}],["nodes.foreach(node",{"_index":1545,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["nodes.remove(nodes.get().filter(n",{"_index":1628,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["nodes.update(this.getvisiblenodes",{"_index":1632,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["nodes/edges",{"_index":1255,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{}}}],["nodes[i].getcomputedtextlength",{"_index":923,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["nodeto",{"_index":542,"title":{},"body":{"classes/BaseProvider.html":{}}}],["nodeto.label",{"_index":558,"title":{},"body":{"classes/BaseProvider.html":{}}}],["nodeto.type.field",{"_index":553,"title":{},"body":{"classes/BaseProvider.html":{}}}],["nodetpl",{"_index":3035,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["nodetype",{"_index":348,"title":{"interfaces/NodeType.html":{}},"body":{"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"coverage.html":{}}}],["nodetypes",{"_index":1487,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["nodetypes[1",{"_index":106,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{}}}],["none",{"_index":973,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["normalize",{"_index":2053,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{}}}],["north",{"_index":1943,"title":{},"body":{"components/MapComponent.html":{}}}],["note",{"_index":489,"title":{},"body":{"classes/BaseProvider.html":{},"components/BsHeatmapComponent.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/HeatmapItem.html":{},"interfaces/RecordNode.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{}}}],["nothing",{"_index":2972,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["notify",{"_index":2168,"title":{},"body":{"interfaces/MoneyDatum.html":{},"interfaces/VisEvent.html":{}}}],["now",{"_index":3110,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["null",{"_index":1758,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["null/undefined",{"_index":2978,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["number",{"_index":116,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/HeatmapItem.html":{},"components/MapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"components/NgxChart.html":{},"interfaces/Node.html":{},"interfaces/NodeData.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"components/ResultTimeline.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{}}}],["number.isinteger(tick",{"_index":2099,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["numbercardmodule",{"_index":2270,"title":{},"body":{"modules/NgxChartsModule.html":{}}}],["numerical",{"_index":2055,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{}}}],["o(n",{"_index":1575,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["obama",{"_index":3368,"title":{},"body":{"miscellaneous/functions.html":{}}}],["object",{"_index":331,"title":{},"body":{"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"components/BsEdgeInfoCard.html":{},"components/BsNodeInfoCard.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"components/MapComponent.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeData.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"miscellaneous/variables.html":{}}}],["object.assign",{"_index":1587,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["object.keys(query.aggregations).foreach(aggregation",{"_index":168,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{}}}],["object.values(this.neighbors",{"_index":1039,"title":{},"body":{"components/BsNodeInfoCard.html":{},"interfaces/NodeData.html":{}}}],["objects",{"_index":1363,"title":{},"body":{"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["observable",{"_index":2413,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["observables",{"_index":2455,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["obtain",{"_index":1341,"title":{},"body":{"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/DynamicNodeType.html":{}}}],["obtained",{"_index":866,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/HeatmapItem.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["occurrences",{"_index":2041,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{}}}],["of({aggregation",{"_index":2575,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["on(\"click",{"_index":899,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["on(\"end",{"_index":880,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["on(\"mousedown.zoom",{"_index":2873,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["on(\"mousemove",{"_index":2021,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["on(\"mouseout",{"_index":2140,"title":{},"body":{"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["on(\"start",{"_index":2761,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["on(\"touchend.zoom",{"_index":2877,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["on(\"touchmove.zoom",{"_index":2876,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["on(\"touchstart.zoom",{"_index":2875,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["on(\"zoom",{"_index":2869,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["on('brush",{"_index":2763,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["on('end",{"_index":2765,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["on/off",{"_index":2933,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["onafterviewinit",{"_index":865,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["onaxisclicked",{"_index":710,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["onaxisclicked(value",{"_index":778,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["onboundschange",{"_index":1854,"title":{},"body":{"components/MapComponent.html":{}}}],["onboundschange(bounds",{"_index":1882,"title":{},"body":{"components/MapComponent.html":{}}}],["onbrush",{"_index":2905,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["onbrushend",{"_index":2909,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["once",{"_index":284,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AsyncRecordsProvider.html":{},"components/BsHeatmapComponent.html":{},"interfaces/CustomData.html":{},"interfaces/HeatmapItem.html":{},"interfaces/RecordNode.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["onchange",{"_index":3025,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["onchanges",{"_index":575,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"interfaces/HeatmapItem.html":{},"components/MapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"components/NgxChart.html":{},"interfaces/NodeData.html":{},"components/ResultTimeline.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{}}}],["onchanges,afterviewinit",{"_index":1967,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{}}}],["onclick",{"_index":82,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AsyncRecordsProvider.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/RecordNode.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"miscellaneous/typealiases.html":{}}}],["ondatasetsmerged",{"_index":340,"title":{},"body":{"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"interfaces/NetworkProvider.html":{},"classes/SelectedRecordsProvider.html":{}}}],["ondatasetsmerged(dataset",{"_index":394,"title":{},"body":{"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"classes/SelectedRecordsProvider.html":{}}}],["ondestroy",{"_index":344,"title":{},"body":{"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"components/NgxChart.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{}}}],["one",{"_index":264,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AsyncRecordsProvider.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{}}}],["onedgeclicked",{"_index":345,"title":{},"body":{"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"interfaces/NetworkProvider.html":{},"classes/SelectedRecordsProvider.html":{}}}],["onedgeclicked(edge",{"_index":427,"title":{},"body":{"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"classes/SelectedRecordsProvider.html":{}}}],["ones",{"_index":1333,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{}}}],["oneventclick(event",{"_index":2934,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["oneventclicked(event",{"_index":2641,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["oninit",{"_index":1094,"title":{},"body":{"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"components/NgxChart.html":{}}}],["oninsert",{"_index":87,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{},"miscellaneous/typealiases.html":{}}}],["onitemclicked",{"_index":711,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["onitemclicked(item",{"_index":782,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["only/56821215",{"_index":2107,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["onmapclick",{"_index":1855,"title":{},"body":{"components/MapComponent.html":{}}}],["onmapclick(event",{"_index":1885,"title":{},"body":{"components/MapComponent.html":{}}}],["onmarkerclick",{"_index":1856,"title":{},"body":{"components/MapComponent.html":{}}}],["onmarkerclick(event",{"_index":1887,"title":{},"body":{"components/MapComponent.html":{}}}],["onmouseenterdatum(datum",{"_index":2123,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{}}}],["onmousemove",{"_index":2117,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["onmouseout",{"_index":2175,"title":{},"body":{"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["onmouseover",{"_index":712,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["onmouseover(item",{"_index":785,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["onnetworkclick(eventdata",{"_index":3119,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["onnodeclicked",{"_index":341,"title":{},"body":{"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"interfaces/NetworkProvider.html":{},"classes/SelectedRecordsProvider.html":{}}}],["onnodeclicked(node",{"_index":267,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["onnodesinserted",{"_index":346,"title":{},"body":{"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"interfaces/NetworkProvider.html":{},"classes/SelectedRecordsProvider.html":{}}}],["onnodesinserted(nodes",{"_index":430,"title":{},"body":{"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"classes/SelectedRecordsProvider.html":{}}}],["onopensettings(opened",{"_index":3155,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["onrangechange(range",{"_index":2633,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["onrecordclicked(datum",{"_index":2170,"title":{},"body":{"interfaces/MoneyDatum.html":{}}}],["onresize",{"_index":1124,"title":{},"body":{"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"components/NgxChart.html":{}}}],["onselectionchange(selection",{"_index":2616,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["onzoom",{"_index":2915,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["onzoomend",{"_index":2924,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["ootbconfig",{"_index":3267,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["ootbconfig(providerfactory",{"_index":3353,"title":{},"body":{"miscellaneous/functions.html":{}}}],["opacity",{"_index":959,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["opened",{"_index":1905,"title":{},"body":{"components/MapComponent.html":{},"interfaces/VisEvent.html":{}}}],["openedwindow",{"_index":1852,"title":{},"body":{"components/MapComponent.html":{}}}],["optional",{"_index":23,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"components/BsEdgeInfoCard.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"interfaces/ChartOptions.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"components/FacetNgxChart.html":{},"interfaces/HeatmapItem.html":{},"components/MapComponent.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"components/NgxChart.html":{},"interfaces/Node.html":{},"interfaces/NodeData.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"components/ResultTimeline.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"miscellaneous/functions.html":{}}}],["options",{"_index":95,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/BaseProvider.html":{},"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"components/NgxChart.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"components/ResultTimeline.html":{},"interfaces/VisEvent.html":{},"miscellaneous/variables.html":{}}}],["optionsprefs",{"_index":3026,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["order",{"_index":1749,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["ored",{"_index":1585,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["orientation",{"_index":1073,"title":{},"body":{"components/BsTooltipComponent.html":{}}}],["original",{"_index":1431,"title":{},"body":{"interfaces/DynamicNodeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{},"miscellaneous/functions.html":{}}}],["originalcount",{"_index":695,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["out",{"_index":986,"title":{},"body":{"modules/BsHeatmapModule.html":{},"modules/BsTimelineModule.html":{},"modules/FinanceModule.html":{},"modules/FusionChartsModule.html":{},"modules/GoogleMapsModule.html":{},"modules/NetworkModule.html":{},"modules/NgxChartsModule.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"modules/VisTimelineModule.html":{},"index.html":{}}}],["output",{"_index":817,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/HeatmapItem.html":{},"components/MapComponent.html":{},"interfaces/MoneyDatum.html":{},"components/NgxChart.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{}}}],["output(\"item",{"_index":1110,"title":{},"body":{"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"components/NgxChart.html":{}}}],["outputs",{"_index":722,"title":{},"body":{"components/BsHeatmapComponent.html":{},"components/MapComponent.html":{},"components/NgxChart.html":{}}}],["outside",{"_index":2775,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["over",{"_index":791,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["overflow",{"_index":2259,"title":{},"body":{"components/NgxChart.html":{}}}],["overlay",{"_index":1995,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{}}}],["overriden",{"_index":2426,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["overview",{"_index":3387,"title":{"index.html":{}},"body":{"index.html":{}}}],["p.getdata(this.context",{"_index":3069,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["p.getedgeactions(this._selectededge",{"_index":3095,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["p.getnodeactions(this._selectednode",{"_index":3091,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["p.getprovider",{"_index":3066,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["p.getprovider())).subscribe(dataset",{"_index":1372,"title":{},"body":{"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/DynamicNodeType.html":{}}}],["p.getprovideractions",{"_index":3100,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["p.ondatasetsmerged(dataset",{"_index":3075,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["p.onedgeclicked(edge",{"_index":3044,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["p.onnodeclicked(node",{"_index":3042,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["p.onnodesinserted(this.context.nodes.get",{"_index":3081,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["package",{"_index":3317,"title":{"dependencies.html":{}},"body":{}}],["page",{"_index":64,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["pages",{"_index":3373,"title":{},"body":{"miscellaneous/functions.html":{}}}],["paginate",{"_index":1176,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{},"miscellaneous/typealiases.html":{}}}],["pagination",{"_index":1171,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{}}}],["panel",{"_index":3154,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["param",{"_index":123,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"components/BsHeatmapComponent.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyDatum.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{}}}],["parameter",{"_index":112,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["parameters",{"_index":353,"title":{},"body":{"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"components/BsEdgeInfoCard.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"components/FacetNgxChart.html":{},"interfaces/HeatmapItem.html":{},"components/MapComponent.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"components/NgxChart.html":{},"components/ResultTimeline.html":{},"classes/SelectedRecordsProvider.html":{},"miscellaneous/functions.html":{}}}],["params",{"_index":2659,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["parent",{"_index":2169,"title":{},"body":{"interfaces/MoneyDatum.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{}}}],["parse",{"_index":18,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"interfaces/CustomData.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{}}}],["parsed",{"_index":1164,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{}}}],["parsedexpr",{"_index":2483,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["parsedexpr.operands[0",{"_index":2487,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["parseentity",{"_index":2056,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{}}}],["parsefloat(val[1",{"_index":2155,"title":{},"body":{"interfaces/MoneyDatum.html":{}}}],["parsefloat(valuestr",{"_index":2063,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{}}}],["parseint(id[1",{"_index":2376,"title":{},"body":{"components/ResultTimeline.html":{}}}],["parsing",{"_index":222,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{}}}],["particular",{"_index":1338,"title":{},"body":{"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["passed",{"_index":1505,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/VisEvent.html":{}}}],["path",{"_index":2998,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["paul",{"_index":3382,"title":{},"body":{"miscellaneous/functions.html":{}}}],["peer",{"_index":3320,"title":{},"body":{"dependencies.html":{}}}],["people",{"_index":3384,"title":{},"body":{"miscellaneous/functions.html":{}}}],["per",{"_index":2456,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{}}}],["permanent",{"_index":1368,"title":{},"body":{"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/DynamicNodeType.html":{}}}],["person",{"_index":3345,"title":{},"body":{"miscellaneous/functions.html":{}}}],["piece",{"_index":2991,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["piechartmodule",{"_index":2268,"title":{},"body":{"modules/NgxChartsModule.html":{}}}],["pixel",{"_index":2942,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["pixperevent",{"_index":2948,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["plus",{"_index":292,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{}}}],["poi",{"_index":3420,"title":{},"body":{"miscellaneous/variables.html":{}}}],["poi.park",{"_index":3423,"title":{},"body":{"miscellaneous/variables.html":{}}}],["point",{"_index":867,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["pointer",{"_index":958,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/VisEvent.html":{}}}],["points",{"_index":1751,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["popup_extract(id[0",{"_index":2375,"title":{},"body":{"components/ResultTimeline.html":{}}}],["pos",{"_index":2329,"title":{},"body":{"components/ResultTimeline.html":{}}}],["position",{"_index":942,"title":{},"body":{"components/BsHeatmapComponent.html":{},"components/BsTooltipComponent.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{}}}],["possible",{"_index":1206,"title":{},"body":{"interfaces/CustomData.html":{},"components/MapComponent.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{}}}],["possibly",{"_index":2493,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["post",{"_index":399,"title":{},"body":{"classes/AsyncRecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/VisEvent.html":{}}}],["potentially",{"_index":265,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{}}}],["pre",{"_index":834,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["precedence",{"_index":1491,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["preference",{"_index":3196,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["preferences",{"_index":3055,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["prefs",{"_index":3039,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["present",{"_index":1256,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{}}}],["pretty",{"_index":1029,"title":{},"body":{"components/BsNodeInfoCard.html":{},"interfaces/NodeData.html":{}}}],["prev.merge(cur",{"_index":3074,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["prevent",{"_index":1329,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["previous",{"_index":2853,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["previously",{"_index":1419,"title":{},"body":{"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/DynamicNodeType.html":{}}}],["previousvalue",{"_index":2974,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["previousvalue.length",{"_index":2988,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["primary",{"_index":2412,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{}}}],["primaryseries",{"_index":2824,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["primitives",{"_index":2144,"title":{},"body":{"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["prior",{"_index":2436,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{}}}],["private",{"_index":832,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"components/NgxChart.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["probably",{"_index":1188,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["process",{"_index":183,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"components/BsHeatmapComponent.html":{},"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/HeatmapItem.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{}}}],["processed",{"_index":1359,"title":{},"body":{"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/DynamicNodeType.html":{}}}],["processednodes",{"_index":1360,"title":{},"body":{"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/DynamicNodeType.html":{}}}],["processes",{"_index":1447,"title":{},"body":{"interfaces/DynamicNodeType.html":{}}}],["processnode(node",{"_index":1415,"title":{},"body":{"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/DynamicNodeType.html":{}}}],["produce",{"_index":3024,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["produced",{"_index":3070,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["programmatically",{"_index":767,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/CustomData.html":{},"interfaces/HeatmapItem.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["propagate",{"_index":1312,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{}}}],["propagated",{"_index":2639,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["properties",{"_index":22,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"components/BsEdgeInfoCard.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"interfaces/HeatmapItem.html":{},"components/MapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"components/NgxChart.html":{},"interfaces/Node.html":{},"interfaces/NodeData.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"components/ResultTimeline.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{}}}],["properties.event",{"_index":2367,"title":{},"body":{"components/ResultTimeline.html":{}}}],["properties.event.target,url",{"_index":2377,"title":{},"body":{"components/ResultTimeline.html":{}}}],["properties.items",{"_index":2365,"title":{},"body":{"components/ResultTimeline.html":{}}}],["properties.items[0].split",{"_index":2370,"title":{},"body":{"components/ResultTimeline.html":{}}}],["property",{"_index":414,"title":{},"body":{"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["protected",{"_index":139,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"components/NgxChart.html":{},"interfaces/RecordNode.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{}}}],["provide",{"_index":1436,"title":{},"body":{"interfaces/DynamicNodeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["provided",{"_index":100,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/MoneyDatum.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["provider",{"_index":54,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/VisEvent.html":{},"miscellaneous/functions.html":{}}}],["provider.ts",{"_index":7,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/RecordNode.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["provider.ts:10",{"_index":352,"title":{},"body":{"classes/AsyncRecordsProvider.html":{}}}],["provider.ts:13",{"_index":354,"title":{},"body":{"classes/AsyncRecordsProvider.html":{}}}],["provider.ts:15",{"_index":444,"title":{},"body":{"classes/BaseProvider.html":{}}}],["provider.ts:151",{"_index":450,"title":{},"body":{"classes/BaseProvider.html":{}}}],["provider.ts:155",{"_index":447,"title":{},"body":{"classes/BaseProvider.html":{}}}],["provider.ts:159",{"_index":452,"title":{},"body":{"classes/BaseProvider.html":{}}}],["provider.ts:16",{"_index":443,"title":{},"body":{"classes/BaseProvider.html":{}}}],["provider.ts:163",{"_index":456,"title":{},"body":{"classes/BaseProvider.html":{}}}],["provider.ts:167",{"_index":455,"title":{},"body":{"classes/BaseProvider.html":{}}}],["provider.ts:171",{"_index":454,"title":{},"body":{"classes/BaseProvider.html":{}}}],["provider.ts:179",{"_index":451,"title":{},"body":{"classes/BaseProvider.html":{}}}],["provider.ts:18",{"_index":445,"title":{},"body":{"classes/BaseProvider.html":{}}}],["provider.ts:188",{"_index":449,"title":{},"body":{"classes/BaseProvider.html":{}}}],["provider.ts:19",{"_index":2393,"title":{},"body":{"classes/SelectedRecordsProvider.html":{}}}],["provider.ts:21",{"_index":442,"title":{},"body":{"classes/BaseProvider.html":{}}}],["provider.ts:211",{"_index":448,"title":{},"body":{"classes/BaseProvider.html":{}}}],["provider.ts:22",{"_index":2394,"title":{},"body":{"classes/SelectedRecordsProvider.html":{}}}],["provider.ts:23",{"_index":446,"title":{},"body":{"classes/BaseProvider.html":{}}}],["provider.ts:245",{"_index":453,"title":{},"body":{"classes/BaseProvider.html":{}}}],["provider.ts:25",{"_index":441,"title":{},"body":{"classes/BaseProvider.html":{}}}],["provider.ts:28",{"_index":373,"title":{},"body":{"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{}}}],["provider.ts:38",{"_index":366,"title":{},"body":{"classes/AsyncRecordsProvider.html":{}}}],["provider.ts:42",{"_index":2395,"title":{},"body":{"classes/SelectedRecordsProvider.html":{}}}],["provider.ts:48",{"_index":2396,"title":{},"body":{"classes/SelectedRecordsProvider.html":{}}}],["providerfactory",{"_index":3297,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["providers",{"_index":375,"title":{},"body":{"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"modules/BsHeatmapModule.html":{},"modules/BsTimelineModule.html":{},"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"modules/FinanceModule.html":{},"modules/FusionChartsModule.html":{},"modules/GoogleMapsModule.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"modules/NetworkModule.html":{},"interfaces/NetworkProvider.html":{},"modules/NgxChartsModule.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/VisEvent.html":{},"modules/VisTimelineModule.html":{},"index.html":{}}}],["providersactionlist",{"_index":3096,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["providerssubscription",{"_index":3038,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["providing",{"_index":1208,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{}}}],["public",{"_index":138,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"components/MapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"components/ResultTimeline.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/VisEvent.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["q",{"_index":1400,"title":{},"body":{"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/DynamicNodeType.html":{}}}],["queries",{"_index":1345,"title":{},"body":{"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["queries.filter(q",{"_index":1399,"title":{},"body":{"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/DynamicNodeType.html":{}}}],["query",{"_index":47,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AsyncRecordsProvider.html":{},"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"miscellaneous/functions.html":{}}}],["query.action",{"_index":155,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["query.addselect(`${ccaggregation.column}:[${this.formatdayrequest(range[0])}..${this.formatdayrequest(range[1",{"_index":2583,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["query.addselect(this.context.exprbuilder.makeexpr(sourcenode.type.field",{"_index":166,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{}}}],["query.aggregations",{"_index":157,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["query.aggregations[type.aggregation",{"_index":159,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{}}}],["query.select",{"_index":2614,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["query|undefined",{"_index":1409,"title":{},"body":{"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/DynamicNodeType.html":{}}}],["r",{"_index":1990,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["r.$selected",{"_index":2564,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["r.id",{"_index":2559,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["r.records.length",{"_index":1445,"title":{},"body":{"interfaces/DynamicNodeType.html":{}}}],["r.records[0",{"_index":1446,"title":{},"body":{"interfaces/DynamicNodeType.html":{}}}],["r.title",{"_index":2570,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["r[this.latitudefield",{"_index":1929,"title":{},"body":{"components/MapComponent.html":{}}}],["r[this.moneyvaluecolumn]?.foreach((item",{"_index":2087,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{}}}],["radius",{"_index":590,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsNodeInfoCard.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/NodeData.html":{}}}],["range",{"_index":2439,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["range([0",{"_index":849,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["range([4",{"_index":2009,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{}}}],["range([this.innerheight",{"_index":2007,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["range(d3.schemecategory10",{"_index":2011,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{}}}],["range(d3[this.colorscheme][this.buckets",{"_index":860,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["range(this.x.range",{"_index":2890,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["range(this.xt.range",{"_index":2892,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["range).pipe",{"_index":2546,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["range).subscribe",{"_index":2529,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["range[0",{"_index":2678,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["range[1",{"_index":2595,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["rangechange",{"_index":2717,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["raw",{"_index":736,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["rawdata",{"_index":211,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{}}}],["rawdata.directed",{"_index":236,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{}}}],["rawdata.directed[i",{"_index":237,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{}}}],["rawdata.fieldvalue",{"_index":241,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{}}}],["rawdata.relations",{"_index":234,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{}}}],["rawdata.relations[i",{"_index":235,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{}}}],["rawvalue",{"_index":1960,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{}}}],["rawvalue.split",{"_index":2151,"title":{},"body":{"interfaces/MoneyDatum.html":{}}}],["re",{"_index":1459,"title":{},"body":{"interfaces/DynamicNodeType.html":{}}}],["reactiveformsmodule",{"_index":992,"title":{},"body":{"modules/BsHeatmapModule.html":{},"modules/BsTimelineModule.html":{},"modules/NetworkModule.html":{}}}],["read",{"_index":1988,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["read/write",{"_index":1984,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["readable",{"_index":1498,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["readonly",{"_index":135,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/VisEvent.html":{}}}],["rebuild",{"_index":1382,"title":{},"body":{"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["rebuilds",{"_index":1379,"title":{},"body":{"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/VisEvent.html":{}}}],["recomputed",{"_index":2442,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["recomputes",{"_index":2142,"title":{},"body":{"interfaces/MoneyDatum.html":{}}}],["record",{"_index":384,"title":{},"body":{"classes/AsyncRecordsProvider.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/DynamicNodeType.html":{},"components/MapComponent.html":{},"interfaces/MoneyDatum.html":{},"interfaces/RecordNode.html":{},"components/ResultTimeline.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"miscellaneous/functions.html":{}}}],["record.$selected",{"_index":1714,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["record.id",{"_index":1198,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{}}}],["record.title",{"_index":1201,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{}}}],["record?.[this.moneycolumn]?.foreach(money",{"_index":2148,"title":{},"body":{"interfaces/MoneyDatum.html":{}}}],["record['title",{"_index":1953,"title":{},"body":{"components/MapComponent.html":{}}}],["record[\\'title",{"_index":1954,"title":{},"body":{"components/MapComponent.html":{}}}],["record[this.appservice.getcolumnalias(this.appservice.getcolumn(this.data.column",{"_index":1717,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["recordclicked",{"_index":1859,"title":{},"body":{"components/MapComponent.html":{},"interfaces/MoneyDatum.html":{}}}],["recorddata",{"_index":1215,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{}}}],["recorddata.foreach((value,i",{"_index":1222,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{}}}],["recordnode",{"_index":1169,"title":{"interfaces/RecordNode.html":{}},"body":{"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{},"coverage.html":{}}}],["recordnode).record",{"_index":1328,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{}}}],["recordnode.record",{"_index":1262,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{}}}],["records",{"_index":326,"title":{},"body":{"classes/AsyncRecordsProvider.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/DynamicNodeType.html":{},"components/MapComponent.html":{},"interfaces/RecordNode.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["records.length",{"_index":1192,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{}}}],["records.map(record",{"_index":1196,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{}}}],["recordsprovider",{"_index":332,"title":{},"body":{"classes/AsyncRecordsProvider.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/RecordNode.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"coverage.html":{}}}],["recordsprovider:256",{"_index":379,"title":{},"body":{"classes/AsyncRecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{}}}],["recordsprovider:269",{"_index":395,"title":{},"body":{"classes/AsyncRecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{}}}],["recordsprovider:296",{"_index":404,"title":{},"body":{"classes/AsyncRecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{}}}],["recordsprovider:319",{"_index":393,"title":{},"body":{"classes/AsyncRecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{}}}],["recordsprovider:331",{"_index":380,"title":{},"body":{"classes/AsyncRecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{}}}],["recordsprovider:68",{"_index":356,"title":{},"body":{"classes/AsyncRecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{}}}],["recordsproviderdemo",{"_index":3268,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["recordsproviderdemo(providerfactory",{"_index":3356,"title":{},"body":{"miscellaneous/functions.html":{}}}],["recordsproviders",{"_index":327,"title":{},"body":{"classes/AsyncRecordsProvider.html":{}}}],["record|undefined",{"_index":1458,"title":{},"body":{"interfaces/DynamicNodeType.html":{}}}],["recreate",{"_index":2887,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["rect",{"_index":971,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["rectangle",{"_index":2797,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["red",{"_index":2707,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["redraw",{"_index":2115,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["redrawing",{"_index":2781,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["referencing",{"_index":150,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{}}}],["reflect",{"_index":486,"title":{},"body":{"classes/BaseProvider.html":{}}}],["reformat",{"_index":1750,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["refresh",{"_index":2398,"title":{},"body":{"classes/SelectedRecordsProvider.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{}}}],["refreshaction",{"_index":3033,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["refreshed",{"_index":2387,"title":{},"body":{"classes/SelectedRecordsProvider.html":{},"miscellaneous/functions.html":{}}}],["refreshnodeoptions(node",{"_index":1462,"title":{},"body":{"interfaces/DynamicNodeType.html":{}}}],["register",{"_index":3111,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["relation",{"_index":233,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/BaseProvider.html":{},"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{}}}],["relations",{"_index":27,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{},"miscellaneous/functions.html":{}}}],["relative",{"_index":946,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["relativex",{"_index":918,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["relevant",{"_index":1693,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["remaining",{"_index":1565,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["remove",{"_index":888,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{}}}],["removed",{"_index":1384,"title":{},"body":{"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["removeedge(id",{"_index":1646,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["removeedges",{"_index":2188,"title":{},"body":{"classes/NetworkDataset.html":{}}}],["removeedges(ids",{"_index":1560,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["removenode(id",{"_index":1644,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["removenodes(ids",{"_index":1555,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["removes",{"_index":1564,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["rendered",{"_index":1506,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{},"miscellaneous/functions.html":{}}}],["rendering",{"_index":1152,"title":{},"body":{"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"components/NgxChart.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["reorganize",{"_index":2925,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["replaysubject",{"_index":2414,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["replaysubject(1",{"_index":2498,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["representing",{"_index":1471,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["repulsion",{"_index":3172,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["repulsioncontrol",{"_index":3163,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["repulsioncontrol.value",{"_index":3181,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["repulsionpref",{"_index":3201,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["required",{"_index":88,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"components/BsHeatmapComponent.html":{}}}],["res",{"_index":1407,"title":{},"body":{"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{}}}],["res.results",{"_index":1405,"title":{},"body":{"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{}}}],["res.results.map(r",{"_index":1444,"title":{},"body":{"interfaces/DynamicNodeType.html":{}}}],["reset",{"_index":365,"title":{},"body":{"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"modules/BsHeatmapModule.html":{},"modules/BsTimelineModule.html":{},"modules/FinanceModule.html":{},"modules/FusionChartsModule.html":{},"modules/GoogleMapsModule.html":{},"modules/NetworkModule.html":{},"modules/NgxChartsModule.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"modules/VisTimelineModule.html":{},"index.html":{}}}],["resetaction",{"_index":336,"title":{},"body":{"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"classes/SelectedRecordsProvider.html":{}}}],["resets",{"_index":3058,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["resize",{"_index":2012,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["resolution",{"_index":2665,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["respond",{"_index":776,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["responds",{"_index":2929,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["rest",{"_index":762,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["result",{"_index":321,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"components/BsEdgeInfoCard.html":{},"components/BsHeatmapComponent.html":{},"modules/BsHeatmapModule.html":{},"components/BsNodeInfoCard.html":{},"modules/BsTimelineModule.html":{},"components/BsTooltipComponent.html":{},"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"modules/FinanceModule.html":{},"modules/FusionChartsModule.html":{},"modules/GoogleMapsModule.html":{},"interfaces/HeatmapItem.html":{},"components/MapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"modules/NetworkModule.html":{},"interfaces/NetworkProvider.html":{},"components/NgxChart.html":{},"modules/NgxChartsModule.html":{},"interfaces/Node.html":{},"interfaces/NodeData.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"components/ResultTimeline.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{},"modules/VisTimelineModule.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["resulting",{"_index":402,"title":{},"body":{"classes/AsyncRecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{}}}],["results",{"_index":178,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"components/BsEdgeInfoCard.html":{},"components/BsHeatmapComponent.html":{},"modules/BsHeatmapModule.html":{},"components/BsNodeInfoCard.html":{},"modules/BsTimelineModule.html":{},"components/BsTooltipComponent.html":{},"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"modules/FinanceModule.html":{},"modules/FusionChartsModule.html":{},"modules/GoogleMapsModule.html":{},"interfaces/HeatmapItem.html":{},"components/MapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"modules/NetworkModule.html":{},"interfaces/NetworkProvider.html":{},"components/NgxChart.html":{},"modules/NgxChartsModule.html":{},"interfaces/Node.html":{},"interfaces/NodeData.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"components/ResultTimeline.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{},"modules/VisTimelineModule.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["results.aggregations[0",{"_index":2587,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["results.records[0",{"_index":1455,"title":{},"body":{"interfaces/DynamicNodeType.html":{}}}],["resulttimeline",{"_index":683,"title":{"components/ResultTimeline.html":{}},"body":{"components/BsEdgeInfoCard.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"components/BsTooltipComponent.html":{},"components/FacetNgxChart.html":{},"components/MapComponent.html":{},"components/NgxChart.html":{},"components/ResultTimeline.html":{},"modules/VisTimelineModule.html":{},"coverage.html":{},"index.html":{}}}],["retrieve",{"_index":369,"title":{},"body":{"classes/AsyncRecordsProvider.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["retrieves",{"_index":245,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/BaseProvider.html":{}}}],["return",{"_index":109,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/BaseProvider.html":{},"components/BsEdgeInfoCard.html":{},"components/BsNodeInfoCard.html":{},"components/BsTooltipComponent.html":{},"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"components/NgxChart.html":{},"interfaces/Node.html":{},"interfaces/NodeData.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{}}}],["returned",{"_index":17,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{}}}],["returns",{"_index":370,"title":{},"body":{"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"components/BsEdgeInfoCard.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"components/MapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"components/NgxChart.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"components/ResultTimeline.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"miscellaneous/functions.html":{}}}],["rextent",{"_index":2067,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{}}}],["rextent[0",{"_index":2072,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{}}}],["rextent[1",{"_index":2073,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{}}}],["rgb(0,0,0,0.125",{"_index":1071,"title":{},"body":{"components/BsTooltipComponent.html":{}}}],["right",{"_index":582,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"components/BsTooltipComponent.html":{},"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/HeatmapItem.html":{},"components/MapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/NodeData.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{}}}],["right.px",{"_index":1090,"title":{},"body":{"components/BsTooltipComponent.html":{}}}],["rnode",{"_index":1412,"title":{},"body":{"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{}}}],["rnode.record",{"_index":1413,"title":{},"body":{"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{}}}],["road",{"_index":3426,"title":{},"body":{"miscellaneous/variables.html":{}}}],["road.highway",{"_index":3429,"title":{},"body":{"miscellaneous/variables.html":{}}}],["rolling",{"_index":1743,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["rotate",{"_index":893,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{},"miscellaneous/variables.html":{}}}],["rxjs",{"_index":457,"title":{},"body":{"classes/BaseProvider.html":{},"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"components/NgxChart.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{}}}],["rxjs/operators",{"_index":2415,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["s",{"_index":2835,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["s.dates",{"_index":2830,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["s.primary",{"_index":2826,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["same",{"_index":389,"title":{},"body":{"classes/AsyncRecordsProvider.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/RecordNode.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{}}}],["sample",{"_index":3259,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["saved",{"_index":3195,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["scale",{"_index":917,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/HeatmapItem.html":{},"components/MapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{}}}],["scaleextent",{"_index":2861,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["scaleextent([scaleextent/this.maxzoomdays",{"_index":2867,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["scaleextent/this.minzoomdays",{"_index":2868,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["scalefactor",{"_index":518,"title":{},"body":{"classes/BaseProvider.html":{}}}],["scales",{"_index":827,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["scaling",{"_index":2461,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["scheme",{"_index":824,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"interfaces/HeatmapItem.html":{},"components/NgxChart.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["schemeblues",{"_index":732,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["scratch",{"_index":1383,"title":{},"body":{"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/DynamicNodeType.html":{}}}],["search",{"_index":412,"title":{},"body":{"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"components/MapComponent.html":{},"interfaces/MoneyDatum.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"miscellaneous/functions.html":{}}}],["search?action=select&resultid=\"+resultid+\"&item=%22tag%3b\"+settings.date_column+\"%3b\"+date+\"%3b\"+date+\"%22",{"_index":2374,"title":{},"body":{"components/ResultTimeline.html":{}}}],["searches",{"_index":2588,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["searchinactive",{"_index":176,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AsyncRecordsProvider.html":{},"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["searchservice",{"_index":1476,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"components/MapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/VisEvent.html":{},"miscellaneous/functions.html":{}}}],["secondaryedgetypes",{"_index":1367,"title":{},"body":{"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{}}}],["see",{"_index":1481,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{},"miscellaneous/variables.html":{}}}],["seeing",{"_index":1151,"title":{},"body":{"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"components/NgxChart.html":{}}}],["select",{"_index":148,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/BaseProvider.html":{},"components/BsEdgeInfoCard.html":{},"components/BsNodeInfoCard.html":{},"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"interfaces/NetworkContext.html":{},"components/NgxChart.html":{},"interfaces/NodeData.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/VisEvent.html":{}}}],["select(node",{"_index":1514,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/VisEvent.html":{}}}],["selected",{"_index":819,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"interfaces/HeatmapItem.html":{},"components/MapComponent.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/VisEvent.html":{},"miscellaneous/functions.html":{}}}],["selectedcolor",{"_index":1662,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["selectedge(edge",{"_index":3134,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["selecteditems",{"_index":1983,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{}}}],["selectedrecordsprovider",{"_index":2384,"title":{"classes/SelectedRecordsProvider.html":{}},"body":{"classes/SelectedRecordsProvider.html":{},"coverage.html":{}}}],["selectedrecordsproviderdemo",{"_index":3269,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["selectedrecordsproviderdemo(providerfactory",{"_index":3357,"title":{},"body":{"miscellaneous/functions.html":{}}}],["selectedvalues",{"_index":1665,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["selectfield",{"_index":1669,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["selecting",{"_index":1910,"title":{},"body":{"components/MapComponent.html":{}}}],["selection",{"_index":1698,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"components/MapComponent.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{}}}],["selection[i",{"_index":2901,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["selectionchange",{"_index":1670,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["selectionchanged",{"_index":2778,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["selectioneventtype",{"_index":2397,"title":{},"body":{"classes/SelectedRecordsProvider.html":{}}}],["selectioneventtype.select",{"_index":2403,"title":{},"body":{"classes/SelectedRecordsProvider.html":{}}}],["selectioneventtype.unselect",{"_index":2404,"title":{},"body":{"classes/SelectedRecordsProvider.html":{}}}],["selections",{"_index":1510,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{}}}],["selectionservice",{"_index":1652,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"interfaces/MoneyCloudDatum.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["selectionservice.events.subscribe(event",{"_index":2401,"title":{},"body":{"classes/SelectedRecordsProvider.html":{}}}],["selectionservice.getselecteditems",{"_index":2399,"title":{},"body":{"classes/SelectedRecordsProvider.html":{}}}],["selectionsubscription",{"_index":2392,"title":{},"body":{"classes/SelectedRecordsProvider.html":{}}}],["selectnode(node",{"_index":3131,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["selector",{"_index":576,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"components/BsTooltipComponent.html":{},"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"interfaces/HeatmapItem.html":{},"components/MapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"components/NgxChart.html":{},"interfaces/NodeData.html":{},"components/ResultTimeline.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{}}}],["selects",{"_index":769,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{},"components/MapComponent.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["self",{"_index":920,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["self.append('svg:title').text(fulltext",{"_index":930,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["self.text",{"_index":924,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["self.text(text",{"_index":929,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["semantic",{"_index":1606,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["separator",{"_index":301,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{}}}],["series",{"_index":2644,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{}}}],["server",{"_index":129,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AsyncRecordsProvider.html":{},"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"miscellaneous/functions.html":{}}}],["service",{"_index":98,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/VisEvent.html":{},"miscellaneous/functions.html":{}}}],["services",{"_index":37,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"components/MapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"components/ResultTimeline.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{}}}],["set",{"_index":1143,"title":{},"body":{"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"components/NgxChart.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{}}}],["set(this.data.map(value",{"_index":837,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["setdefaults",{"_index":3190,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["setquery",{"_index":338,"title":{},"body":{"classes/AsyncRecordsProvider.html":{}}}],["setquery(query",{"_index":372,"title":{},"body":{"classes/AsyncRecordsProvider.html":{}}}],["sets",{"_index":374,"title":{},"body":{"classes/AsyncRecordsProvider.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/VisEvent.html":{}}}],["settings",{"_index":3019,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["shapes",{"_index":2723,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["shift",{"_index":2683,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["shiftdate(date",{"_index":2688,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["show",{"_index":1178,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["showall",{"_index":1175,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{}}}],["showing",{"_index":2136,"title":{},"body":{"interfaces/MoneyDatum.html":{},"miscellaneous/functions.html":{}}}],["shown",{"_index":406,"title":{},"body":{"classes/AsyncRecordsProvider.html":{},"components/BsHeatmapComponent.html":{},"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["shows",{"_index":1934,"title":{},"body":{"components/MapComponent.html":{}}}],["showtooltip",{"_index":1981,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{}}}],["side",{"_index":2796,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["simple",{"_index":1433,"title":{},"body":{"interfaces/DynamicNodeType.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["simplechange",{"_index":2712,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["simplechanges",{"_index":1096,"title":{},"body":{"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"components/MapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"components/NgxChart.html":{},"components/ResultTimeline.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{}}}],["simply",{"_index":2845,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["simultaneous",{"_index":1344,"title":{},"body":{"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/DynamicNodeType.html":{}}}],["sinequa",{"_index":1228,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{}}}],["sinequa/analytics/heatmap",{"_index":1057,"title":{},"body":{"modules/BsTimelineModule.html":{},"modules/FinanceModule.html":{}}}],["sinequa/components",{"_index":3318,"title":{},"body":{"dependencies.html":{}}}],["sinequa/components/action",{"_index":46,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/BaseProvider.html":{},"modules/BsHeatmapModule.html":{},"modules/BsTimelineModule.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"modules/FinanceModule.html":{},"modules/GoogleMapsModule.html":{},"components/MapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"modules/NetworkModule.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/VisEvent.html":{}}}],["sinequa/components/collapse",{"_index":2215,"title":{},"body":{"modules/NetworkModule.html":{}}}],["sinequa/components/facet",{"_index":1656,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"modules/GoogleMapsModule.html":{},"components/MapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"modules/NetworkModule.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/VisEvent.html":{}}}],["sinequa/components/search",{"_index":1477,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"components/MapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/VisEvent.html":{}}}],["sinequa/components/selection",{"_index":997,"title":{},"body":{"modules/BsHeatmapModule.html":{},"modules/BsTimelineModule.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"modules/FusionChartsModule.html":{},"modules/GoogleMapsModule.html":{},"interfaces/MoneyCloudDatum.html":{},"modules/NgxChartsModule.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["sinequa/components/user",{"_index":3018,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["sinequa/components/utils",{"_index":1056,"title":{},"body":{"modules/BsTimelineModule.html":{},"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"modules/FinanceModule.html":{},"modules/FusionChartsModule.html":{},"modules/NetworkModule.html":{},"components/NgxChart.html":{},"modules/NgxChartsModule.html":{}}}],["sinequa/core/app",{"_index":49,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AsyncRecordsProvider.html":{},"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"components/MapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/VisEvent.html":{}}}],["sinequa/core/base",{"_index":51,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/BaseProvider.html":{},"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"interfaces/MoneyDatum.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"components/NgxChart.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/VisEvent.html":{}}}],["sinequa/core/intl",{"_index":995,"title":{},"body":{"modules/BsHeatmapModule.html":{},"modules/BsTimelineModule.html":{},"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"modules/FinanceModule.html":{},"modules/FusionChartsModule.html":{},"modules/GoogleMapsModule.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"modules/NetworkModule.html":{},"interfaces/NetworkProvider.html":{},"components/NgxChart.html":{},"modules/NgxChartsModule.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{},"modules/VisTimelineModule.html":{}}}],["sinequa/core/web",{"_index":36,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"components/MapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/RecordNode.html":{},"components/ResultTimeline.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{}}}],["sinequacomponentsmodule",{"_index":3310,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["single",{"_index":1504,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"components/MapComponent.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/VisEvent.html":{}}}],["size",{"_index":487,"title":{},"body":{"classes/BaseProvider.html":{},"components/BsHeatmapComponent.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{}}}],["sizeopened",{"_index":2716,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["skip",{"_index":160,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{}}}],["skip/count",{"_index":1501,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["skips",{"_index":136,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{}}}],["slantlabel",{"_index":3441,"title":{},"body":{"miscellaneous/variables.html":{}}}],["solid",{"_index":1067,"title":{},"body":{"components/BsTooltipComponent.html":{}}}],["somehow",{"_index":3076,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["sort",{"_index":1037,"title":{},"body":{"components/BsNodeInfoCard.html":{},"interfaces/NodeData.html":{}}}],["sort((a,b",{"_index":2957,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["source",{"_index":4,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"components/BsEdgeInfoCard.html":{},"components/BsHeatmapComponent.html":{},"modules/BsHeatmapModule.html":{},"components/BsNodeInfoCard.html":{},"modules/BsTimelineModule.html":{},"components/BsTooltipComponent.html":{},"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"modules/FinanceModule.html":{},"modules/FusionChartsModule.html":{},"modules/GoogleMapsModule.html":{},"interfaces/HeatmapItem.html":{},"components/MapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"modules/NetworkModule.html":{},"interfaces/NetworkProvider.html":{},"components/NgxChart.html":{},"modules/NgxChartsModule.html":{},"interfaces/Node.html":{},"interfaces/NodeData.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"components/ResultTimeline.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{},"modules/VisTimelineModule.html":{},"miscellaneous/typealiases.html":{}}}],["sourcecsv",{"_index":1233,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{}}}],["sourcenode",{"_index":146,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{}}}],["sourcenode.type.field",{"_index":165,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{}}}],["sourcenodes",{"_index":1380,"title":{},"body":{"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/DynamicNodeType.html":{}}}],["sourcenodes.filter(node",{"_index":1392,"title":{},"body":{"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/DynamicNodeType.html":{}}}],["sourcenodes.find(node",{"_index":1389,"title":{},"body":{"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/DynamicNodeType.html":{}}}],["sourcenodes.map(node",{"_index":1394,"title":{},"body":{"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/DynamicNodeType.html":{}}}],["sourceproviders",{"_index":1369,"title":{},"body":{"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/DynamicNodeType.html":{}}}],["sourcestr",{"_index":1230,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{}}}],["south",{"_index":1945,"title":{},"body":{"components/MapComponent.html":{}}}],["special",{"_index":1249,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{}}}],["specific",{"_index":282,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/VisEvent.html":{}}}],["specifically",{"_index":3339,"title":{},"body":{"miscellaneous/functions.html":{}}}],["specified",{"_index":1351,"title":{},"body":{"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{}}}],["specifying",{"_index":91,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{}}}],["split",{"_index":2152,"title":{},"body":{"interfaces/MoneyDatum.html":{}}}],["spring",{"_index":3176,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["springconstant",{"_index":3170,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["springconstantcontrol",{"_index":3159,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["springconstantcontrol.value",{"_index":3179,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["springconstantpref",{"_index":3199,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["springlength",{"_index":3169,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["springlengthcontrol",{"_index":3157,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["springlengthcontrol.value",{"_index":3177,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["springlengthpref",{"_index":3197,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["sq",{"_index":577,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"components/BsTooltipComponent.html":{},"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"interfaces/HeatmapItem.html":{},"components/MapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"components/NgxChart.html":{},"interfaces/NodeData.html":{},"components/ResultTimeline.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{}}}],["sqmessage",{"_index":636,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsNodeInfoCard.html":{}}}],["sqmessage:{values",{"_index":934,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["square",{"_index":1677,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"components/MapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/VisEvent.html":{}}}],["sqvalue",{"_index":2256,"title":{},"body":{"components/NgxChart.html":{}}}],["sr.1",{"_index":3326,"title":{},"body":{"dependencies.html":{}}}],["standard",{"_index":471,"title":{},"body":{"classes/BaseProvider.html":{},"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["star",{"_index":1467,"title":{},"body":{"interfaces/DynamicNodeType.html":{}}}],["start",{"_index":897,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{},"components/ResultTimeline.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["state",{"_index":392,"title":{},"body":{"classes/AsyncRecordsProvider.html":{},"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/VisEvent.html":{}}}],["statement",{"_index":2774,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["statements",{"_index":3212,"title":{},"body":{"coverage.html":{}}}],["static",{"_index":1114,"title":{},"body":{"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"components/NgxChart.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{}}}],["statistical",{"_index":1605,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["steve",{"_index":3380,"title":{},"body":{"miscellaneous/functions.html":{}}}],["stop",{"_index":2818,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["store",{"_index":56,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/DynamicNodeType.html":{},"classes/SelectedRecordsProvider.html":{}}}],["stored",{"_index":1406,"title":{},"body":{"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/VisEvent.html":{}}}],["stores",{"_index":132,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{}}}],["storing",{"_index":1867,"title":{},"body":{"components/MapComponent.html":{}}}],["stream",{"_index":1016,"title":{},"body":{"components/BsNodeInfoCard.html":{},"interfaces/NodeData.html":{}}}],["strength",{"_index":1472,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["string",{"_index":32,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"components/NgxChart.html":{},"interfaces/Node.html":{},"interfaces/NodeData.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"components/ResultTimeline.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{}}}],["strings",{"_index":808,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["stroke",{"_index":2709,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["structural",{"_index":386,"title":{},"body":{"classes/AsyncRecordsProvider.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/RecordNode.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"miscellaneous/functions.html":{}}}],["structuraldisplaytype",{"_index":1180,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{},"miscellaneous/typealiases.html":{}}}],["structuraledgetype",{"_index":349,"title":{"interfaces/StructuralEdgeType.html":{}},"body":{"classes/AsyncRecordsProvider.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/RecordNode.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["structuraledgetype).display",{"_index":1293,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{}}}],["structuraledgetype).field",{"_index":1182,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{}}}],["structuraltriggertype",{"_index":1174,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{},"miscellaneous/typealiases.html":{}}}],["structure",{"_index":10,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/VisEvent.html":{}}}],["structured",{"_index":1438,"title":{},"body":{"interfaces/DynamicNodeType.html":{}}}],["structures",{"_index":1512,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["style",{"_index":1066,"title":{},"body":{"components/BsTooltipComponent.html":{},"components/MapComponent.html":{}}}],["style(\"text",{"_index":895,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["style.ts",{"_index":3227,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["stylers",{"_index":3403,"title":{},"body":{"miscellaneous/variables.html":{}}}],["styles",{"_index":570,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"components/BsTooltipComponent.html":{},"components/MapComponent.html":{},"components/NgxChart.html":{},"interfaces/NodeData.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{}}}],["styleurls",{"_index":689,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"components/NgxChart.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{}}}],["subject",{"_index":423,"title":{},"body":{"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["subject.error(err",{"_index":2533,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["subject.next(config",{"_index":2516,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["subject.next(d",{"_index":2530,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["subject.next(t",{"_index":2541,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["subject.next(this.getrecordsasevents(config",{"_index":2537,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["subscribe",{"_index":1747,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["subscribe(datasets",{"_index":3067,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["subscribe(results",{"_index":434,"title":{},"body":{"classes/AsyncRecordsProvider.html":{},"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{}}}],["subscription",{"_index":1097,"title":{},"body":{"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"components/NgxChart.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{}}}],["subscriptions",{"_index":1509,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["super",{"_index":1671,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"components/MapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/VisEvent.html":{}}}],["super(name",{"_index":141,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AsyncRecordsProvider.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/RecordNode.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["super.getnodeactions(node",{"_index":308,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{}}}],["super.getprovideractions",{"_index":287,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{}}}],["support",{"_index":86,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"modules.html":{}}}],["supported",{"_index":1876,"title":{},"body":{"components/MapComponent.html":{}}}],["svg",{"_index":909,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{},"modules.html":{}}}],["swap",{"_index":1595,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["swimlane/ngx",{"_index":1102,"title":{},"body":{"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"components/NgxChart.html":{},"modules/NgxChartsModule.html":{},"dependencies.html":{}}}],["switch(resolution",{"_index":2689,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["switch(type",{"_index":1137,"title":{},"body":{"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"components/NgxChart.html":{}}}],["switching",{"_index":2427,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["sync",{"_index":3046,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["synchronously",{"_index":246,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{}}}],["syncing",{"_index":3185,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["syntax",{"_index":765,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["system",{"_index":913,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["systematically",{"_index":75,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"miscellaneous/typealiases.html":{}}}],["t",{"_index":875,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["table",{"_index":3316,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":3315,"title":{},"body":{"coverage.html":{}}}],["take",{"_index":1448,"title":{},"body":{"interfaces/DynamicNodeType.html":{},"interfaces/VisEvent.html":{}}}],["taken",{"_index":2386,"title":{},"body":{"classes/SelectedRecordsProvider.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["takes",{"_index":1590,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["taking",{"_index":1612,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["talking",{"_index":3377,"title":{},"body":{"miscellaneous/functions.html":{}}}],["tap",{"_index":3123,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["target",{"_index":1239,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{}}}],["tasks",{"_index":3097,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["temp",{"_index":1596,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["template",{"_index":569,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"components/BsTooltipComponent.html":{},"components/FacetNgxChart.html":{},"interfaces/HeatmapItem.html":{},"components/MapComponent.html":{},"components/NgxChart.html":{},"components/ResultTimeline.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{}}}],["templateref",{"_index":2714,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{}}}],["templateurl",{"_index":594,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"interfaces/HeatmapItem.html":{},"components/MapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"components/NgxChart.html":{},"interfaces/NodeData.html":{},"components/ResultTimeline.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{}}}],["test",{"_index":1306,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{}}}],["tests",{"_index":121,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{},"miscellaneous/functions.html":{}}}],["text",{"_index":297,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/BaseProvider.html":{},"components/BsEdgeInfoCard.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"interfaces/HeatmapItem.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{},"miscellaneous/functions.html":{}}}],["text(d",{"_index":2903,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["text.length",{"_index":927,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["text.slice(0",{"_index":928,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["text:hover",{"_index":954,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["textlength",{"_index":922,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["theme",{"_index":720,"title":{},"body":{"components/BsHeatmapComponent.html":{},"components/BsTooltipComponent.html":{},"modules/FusionChartsModule.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"miscellaneous/variables.html":{}}}],["themselves",{"_index":3348,"title":{},"body":{"miscellaneous/functions.html":{}}}],["there's",{"_index":2985,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this._actions",{"_index":3082,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["this._actions.concat(actions",{"_index":3093,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["this._actions.push(providersactionlist",{"_index":3101,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["this._actions.push(this.clearfilters",{"_index":3089,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["this._actions.push(this.refreshaction",{"_index":3102,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["this._networkinitialized",{"_index":3109,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["this._selectededge",{"_index":3135,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["this._selectednode",{"_index":3132,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["this.activateaction",{"_index":458,"title":{},"body":{"classes/BaseProvider.html":{}}}],["this.active",{"_index":300,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/BaseProvider.html":{}}}],["this.addaggregationnodes(item",{"_index":195,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{}}}],["this.addcustomedge(node",{"_index":1223,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{}}}],["this.adddynamicedges([node",{"_index":1422,"title":{},"body":{"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{}}}],["this.adddynamicedges(sourcenodes",{"_index":1404,"title":{},"body":{"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{}}}],["this.addedge(edge",{"_index":1551,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["this.addedge(edges",{"_index":1552,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["this.addnode(node",{"_index":1546,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["this.addnode(nodes",{"_index":1547,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["this.addrecordnodes(records",{"_index":1193,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{}}}],["this.addstructuraledge(data",{"_index":1232,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{}}}],["this.addstructuraledges(node",{"_index":1204,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{}}}],["this.aggregation",{"_index":1684,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["this.aggregations",{"_index":1686,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["this.appservice.getccaggregation(aggregation",{"_index":2624,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["this.appservice.getccaggregation(aggregationname",{"_index":2573,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["this.appservice.parseexpr(select.expression",{"_index":2484,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["this.area",{"_index":2748,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.area.y0(this.y(0",{"_index":2767,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.attached",{"_index":1156,"title":{},"body":{"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"components/NgxChart.html":{}}}],["this.bounds",{"_index":1952,"title":{},"body":{"components/MapComponent.html":{}}}],["this.bounds.getnortheast().lat",{"_index":1921,"title":{},"body":{"components/MapComponent.html":{}}}],["this.bounds.getnortheast().lng",{"_index":1925,"title":{},"body":{"components/MapComponent.html":{}}}],["this.bounds.getsouthwest().lat",{"_index":1919,"title":{},"body":{"components/MapComponent.html":{}}}],["this.bounds.getsouthwest().lng",{"_index":1923,"title":{},"body":{"components/MapComponent.html":{}}}],["this.brush",{"_index":2792,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.brush$.call(this.brushbehavior",{"_index":2769,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.brush$.call(this.brushbehavior.move",{"_index":2883,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.brush$.selectall(\".grip",{"_index":2800,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.brushbehavior",{"_index":2757,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.brushbehavior.extent([[0",{"_index":2768,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.brushbehavior.move(this.brush",{"_index":2923,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.brushing",{"_index":2762,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.brushselection",{"_index":2906,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.brushselection?.sort((a,b)=>a",{"_index":2911,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.buildchart",{"_index":873,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["this.buildchart(!!this.transition",{"_index":864,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["this.c",{"_index":2010,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{}}}],["this.c.domain(this.data.map(d",{"_index":2080,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{}}}],["this.categories",{"_index":2082,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{}}}],["this.cdref.detectchanges",{"_index":2033,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.chart",{"_index":1122,"title":{},"body":{"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"components/NgxChart.html":{}}}],["this.chart.update",{"_index":1123,"title":{},"body":{"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"components/NgxChart.html":{}}}],["this.charttype",{"_index":1728,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["this.checkdatachanges(changes[\"data",{"_index":2785,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.checkselectionchange(this.selection",{"_index":2885,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.clearfilters",{"_index":1674,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"components/MapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/VisEvent.html":{}}}],["this.closed",{"_index":611,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsNodeInfoCard.html":{},"interfaces/NodeData.html":{}}}],["this.closewindow",{"_index":1930,"title":{},"body":{"components/MapComponent.html":{}}}],["this.color",{"_index":858,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["this.colors",{"_index":1731,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["this.colors.length",{"_index":1732,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["this.colors[index",{"_index":1742,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["this.colorscheme",{"_index":1730,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["this.context",{"_index":249,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/VisEvent.html":{}}}],["this.context.appservice.formatservice.formatfieldvalue({value",{"_index":498,"title":{},"body":{"classes/BaseProvider.html":{}}}],["this.context.appservice.getcolumn(type.field",{"_index":496,"title":{},"body":{"classes/BaseProvider.html":{}}}],["this.context.appservice.parseexpr(item.value.tostring",{"_index":228,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{}}}],["this.context.edges",{"_index":3078,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["this.context.edges.clear",{"_index":3061,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["this.context.exprbuilder.concatandexpr([exprfrom",{"_index":565,"title":{},"body":{"classes/BaseProvider.html":{}}}],["this.context.exprbuilder.makeexpr(edge.type.field",{"_index":547,"title":{},"body":{"classes/BaseProvider.html":{}}}],["this.context.exprbuilder.makeexpr(node.type.field",{"_index":535,"title":{},"body":{"classes/BaseProvider.html":{}}}],["this.context.exprbuilder.makeexpr(nodefrom.type.field",{"_index":560,"title":{},"body":{"classes/BaseProvider.html":{}}}],["this.context.exprbuilder.makeexpr(nodeto.type.field",{"_index":563,"title":{},"body":{"classes/BaseProvider.html":{}}}],["this.context.intlservice.formatmessage(\"msg#network.actions.expandnode",{"_index":310,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/DynamicNodeType.html":{}}}],["this.context.intlservice.formatmessage(\"msg#network.actions.expandnodewith",{"_index":320,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{}}}],["this.context.intlservice.formatmessage(\"msg#network.actions.fetchmoreagg",{"_index":302,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{}}}],["this.context.intlservice.formatmessage(\"msg#network.actions.filtersearch",{"_index":534,"title":{},"body":{"classes/BaseProvider.html":{}}}],["this.context.intlservice.formatmessage(\"msg#network.actions.filtersearch2",{"_index":554,"title":{},"body":{"classes/BaseProvider.html":{}}}],["this.context.name",{"_index":3052,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["this.context.nodes.clear",{"_index":3060,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["this.context.searchservice.getmultipleresults(_queries",{"_index":1402,"title":{},"body":{"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/DynamicNodeType.html":{}}}],["this.context.searchservice.getresults(query",{"_index":175,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/DynamicNodeType.html":{}}}],["this.context.searchservice.getresults(this.query",{"_index":433,"title":{},"body":{"classes/AsyncRecordsProvider.html":{}}}],["this.context.searchservice.query",{"_index":154,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{}}}],["this.createchartoptions",{"_index":1764,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["this.createdatapoints(aggregation.items",{"_index":2648,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["this.createedge(this.edgetype",{"_index":1411,"title":{},"body":{"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{}}}],["this.createedge(type",{"_index":1261,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{}}}],["this.createexpandaction(type",{"_index":315,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{}}}],["this.createnode(this.nodetype",{"_index":1200,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{}}}],["this.createnode(type.nodetypes[1",{"_index":1244,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{}}}],["this.currentrange",{"_index":2475,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["this.currentrange[0",{"_index":2476,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["this.currentrange[1",{"_index":2479,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["this.currentselection",{"_index":2886,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.dampingpref",{"_index":3149,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["this.data",{"_index":833,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{}}}],["this.data.filter(value",{"_index":844,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["this.data.foreach(d",{"_index":2050,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{}}}],["this.data.items",{"_index":1706,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["this.data.length",{"_index":2817,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.data.push(datum",{"_index":2049,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{}}}],["this.datafiltered",{"_index":843,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["this.datapoints",{"_index":1704,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["this.datapoints.find(_datapoint",{"_index":1775,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["this.datapoints.findindex(datapoint",{"_index":1734,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["this.datapoints.push",{"_index":1707,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["this.dataset",{"_index":1385,"title":{},"body":{"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/DynamicNodeType.html":{}}}],["this.dataset.addnodes(node",{"_index":1203,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{}}}],["this.dataset.clear",{"_index":251,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/BaseProvider.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{}}}],["this.dataset.getadjacentedges(node.id",{"_index":1308,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{}}}],["this.dataset.getadjacentedges(node.id).foreach(e",{"_index":1319,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{}}}],["this.dataset.getconnectednodes(node.id",{"_index":276,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{}}}],["this.dataset.getnode(node.id",{"_index":1310,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{}}}],["this.dataset.getnode(this.getnodeid(this.nodetype",{"_index":1197,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{}}}],["this.dataset.hasnode(node.id",{"_index":1425,"title":{},"body":{"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{}}}],["this.dataset.merge(data",{"_index":243,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{}}}],["this.dataset.merge(dataset",{"_index":1284,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{}}}],["this.dates",{"_index":2317,"title":{},"body":{"components/ResultTimeline.html":{}}}],["this.debouncesync",{"_index":3183,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["this.drawgrips",{"_index":2771,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.drawxaxis",{"_index":2018,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.drawyaxis",{"_index":2015,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.edge.context.nodes.get(this.edge.from",{"_index":614,"title":{},"body":{"components/BsEdgeInfoCard.html":{}}}],["this.edge.context.nodes.get(this.edge.to",{"_index":616,"title":{},"body":{"components/BsEdgeInfoCard.html":{}}}],["this.edgeclicked.next",{"_index":3136,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["this.edgeclicked.subscribe((edge",{"_index":3043,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["this.edgeidx.clear",{"_index":1542,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["this.edgeidx.delete(id",{"_index":1647,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["this.edgeidx.get(id",{"_index":1525,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["this.edgeidx.has(id",{"_index":1521,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["this.edgeidx.set(edge.id",{"_index":1643,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["this.edgeseparator",{"_index":477,"title":{},"body":{"classes/BaseProvider.html":{}}}],["this.edgetype",{"_index":1397,"title":{},"body":{"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{}}}],["this.edgetype.getquery(node",{"_index":1396,"title":{},"body":{"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{}}}],["this.edgetype.nodetypes[0",{"_index":1376,"title":{},"body":{"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{}}}],["this.edgetype.trigger",{"_index":1424,"title":{},"body":{"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{}}}],["this.edgetypes.filter(type",{"_index":256,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{}}}],["this.edgetypes.foreach(type",{"_index":254,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{}}}],["this.edgetypes.length",{"_index":1316,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{}}}],["this.el.nativeelement",{"_index":915,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.eventclicked.next(event",{"_index":2642,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["this.events",{"_index":2318,"title":{},"body":{"components/ResultTimeline.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["this.events$[i",{"_index":2536,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["this.events$[i].next(this.getrecordsasevents(this.events[i",{"_index":2472,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["this.events.concat",{"_index":2956,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.events.findindex(e",{"_index":2468,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["this.events.foreach((config",{"_index":2535,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["this.events.map(_",{"_index":2504,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["this.expanded",{"_index":612,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsNodeInfoCard.html":{},"interfaces/NodeData.html":{}}}],["this.exprbuilder.concatandexpr",{"_index":1926,"title":{},"body":{"components/MapComponent.html":{}}}],["this.exprbuilder.concatorexpr(exprs",{"_index":2627,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["this.exprbuilder.makeexpr(this.moneycolumn",{"_index":2172,"title":{},"body":{"interfaces/MoneyDatum.html":{}}}],["this.exprbuilder.makeexpr(this.moneyvaluecolumn",{"_index":2119,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{}}}],["this.exprbuilder.makenumericalexpr(this.latitudefield",{"_index":1927,"title":{},"body":{"components/MapComponent.html":{}}}],["this.exprbuilder.makenumericalexpr(this.longitudefield",{"_index":1928,"title":{},"body":{"components/MapComponent.html":{}}}],["this.facetservice.addfiltersearch(this.getname",{"_index":1769,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["this.facetservice.clearfilterssearch(this.getname",{"_index":1679,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["this.facetservice.formatvalue(item",{"_index":1708,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["this.facetservice.getaggregation(aggregationname",{"_index":2574,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["this.facetservice.getaggregation(this.aggregation",{"_index":1759,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["this.facetservice.hasfiltered(this.getname",{"_index":1701,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["this.facetservice.itemfiltered(this.getname",{"_index":1772,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["this.facetservice.removefiltersearch(this.getname",{"_index":1770,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["this.fetchaggregation(aggregationname",{"_index":2577,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["this.fetchaggregations([type",{"_index":305,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{}}}],["this.fetchaggregations(types",{"_index":260,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{}}}],["this.filterarea",{"_index":1915,"title":{},"body":{"components/MapComponent.html":{}}}],["this.filteredcolor",{"_index":1739,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["this.fitbounds",{"_index":1936,"title":{},"body":{"components/MapComponent.html":{}}}],["this.fitnetwork",{"_index":3080,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["this.form",{"_index":3167,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["this.form.valuechanges.subscribe(_",{"_index":3174,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["this.formatdayrequest(selection[0",{"_index":2618,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["this.formatdayrequest(selection[1",{"_index":2619,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["this.formatservice.moneyformatter(datum.value",{"_index":2174,"title":{},"body":{"interfaces/MoneyDatum.html":{}}}],["this.formbuilder.group",{"_index":3168,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["this.fromnode",{"_index":613,"title":{},"body":{"components/BsEdgeInfoCard.html":{}}}],["this.georecords[0][this.latitudefield",{"_index":1944,"title":{},"body":{"components/MapComponent.html":{}}}],["this.georecords[0][this.longitudefield",{"_index":1941,"title":{},"body":{"components/MapComponent.html":{}}}],["this.getadjacentedges(neighbor.id).length",{"_index":1573,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["this.getadjacentedges(nodeid",{"_index":1579,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["this.getadjacentedges(nodeid).foreach(edge",{"_index":1567,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["this.getaggregation(config.aggregation",{"_index":2545,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["this.getaggregation(config.aggregation).pipe",{"_index":2552,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["this.getd3timeinterval(resolution",{"_index":2669,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["this.getdata(this.context",{"_index":465,"title":{},"body":{"classes/BaseProvider.html":{}}}],["this.getedge(e.id)?.visible",{"_index":1631,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["this.getedge(edge.id",{"_index":1608,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["this.getedgeid(fromnode",{"_index":512,"title":{},"body":{"classes/BaseProvider.html":{}}}],["this.getedges().filter(e",{"_index":1534,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["this.geteventaggregation(config",{"_index":2539,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["this.getitem(datapoint",{"_index":1767,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["this.getitem(this.datapoints[index",{"_index":1737,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["this.getname",{"_index":1762,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["this.getnode(e.from",{"_index":1580,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["this.getnode(edge.from",{"_index":1568,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["this.getnode(n.id)?.visible",{"_index":1629,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["this.getnode(node.id",{"_index":1591,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["this.getnodeid(type",{"_index":499,"title":{},"body":{"classes/BaseProvider.html":{}}}],["this.getnodes().filter(n",{"_index":1531,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["this.getnodevalue(node",{"_index":536,"title":{},"body":{"classes/BaseProvider.html":{}}}],["this.getnodevalue(nodefrom",{"_index":561,"title":{},"body":{"classes/BaseProvider.html":{}}}],["this.getnodevalue(nodeto",{"_index":564,"title":{},"body":{"classes/BaseProvider.html":{}}}],["this.getnodevalue(sourcenode",{"_index":167,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{}}}],["this.gettimeseries(agg",{"_index":2528,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["this.gettimeseries(bestaggregation",{"_index":2607,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["this.gravitypref",{"_index":3153,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["this.grips",{"_index":2799,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.grips$.append(\"path",{"_index":2808,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.grips$.append(\"text",{"_index":2810,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.grips$.attr(\"display",{"_index":2899,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.grips$.selectall(\"path\").attr(\"d",{"_index":2770,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.grips$.selectall('.grip",{"_index":2902,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.groupedevents",{"_index":2847,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.groupevents(5",{"_index":2848,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.hasnode(edge.to",{"_index":1641,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["this.height",{"_index":855,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.hiderecordnode",{"_index":1202,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{}}}],["this.initdone",{"_index":2383,"title":{},"body":{"components/ResultTimeline.html":{}}}],["this.innerheight",{"_index":2760,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.innerwidth",{"_index":2004,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.instance",{"_index":2745,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.intlservice.events.subscribe(e",{"_index":2743,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.intlservice.formatdate(this.xt.invert(selection[d.type",{"_index":2904,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.intlservice.formatmessage(p.name",{"_index":3099,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["this.intlservice.formatnumber(value",{"_index":1746,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["this.intlsubscription",{"_index":2742,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.intlsubscription.unsubscribe",{"_index":2936,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.isedgevisible(type",{"_index":1246,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{}}}],["this.isfiltered(item",{"_index":1738,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["this.itemclickevent",{"_index":1120,"title":{},"body":{"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"components/NgxChart.html":{}}}],["this.itemclickevent.emit(datapoint",{"_index":1160,"title":{},"body":{"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"components/NgxChart.html":{}}}],["this.items",{"_index":2382,"title":{},"body":{"components/ResultTimeline.html":{}}}],["this.items.push({id",{"_index":2342,"title":{},"body":{"components/ResultTimeline.html":{}}}],["this.items.splice(0",{"_index":2316,"title":{},"body":{"components/ResultTimeline.html":{}}}],["this.left",{"_index":1084,"title":{},"body":{"components/BsTooltipComponent.html":{}}}],["this.line",{"_index":2755,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.localechange",{"_index":1129,"title":{},"body":{"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"components/NgxChart.html":{}}}],["this.localechange.unsubscribe",{"_index":1133,"title":{},"body":{"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"components/NgxChart.html":{}}}],["this.makedata",{"_index":1753,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["this.mapstyles",{"_index":1932,"title":{},"body":{"components/MapComponent.html":{}}}],["this.margin.bottom",{"_index":857,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.margin.left",{"_index":851,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.margin.right",{"_index":852,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.margin.top",{"_index":856,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.max_dates",{"_index":2355,"title":{},"body":{"components/ResultTimeline.html":{}}}],["this.maxaggregationdate",{"_index":2527,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["this.maxdate",{"_index":2480,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{}}}],["this.maxx",{"_index":839,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["this.maxy",{"_index":842,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["this.mergedatasets(datasets.filter(d",{"_index":3068,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["this.mergedevents",{"_index":2505,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["this.mergedtimeseries",{"_index":2499,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["this.min_dates",{"_index":2354,"title":{},"body":{"components/ResultTimeline.html":{}}}],["this.min_year",{"_index":2340,"title":{},"body":{"components/ResultTimeline.html":{}}}],["this.minaggregationdate",{"_index":2526,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["this.mindate",{"_index":2477,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{}}}],["this.moneyaggregation",{"_index":2045,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{}}}],["this.mutatenode(node",{"_index":1451,"title":{},"body":{"interfaces/DynamicNodeType.html":{}}}],["this.mutatenodes(sourcenodes",{"_index":1443,"title":{},"body":{"interfaces/DynamicNodeType.html":{}}}],["this.name",{"_index":2122,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/VisEvent.html":{}}}],["this.neighbors",{"_index":1014,"title":{},"body":{"components/BsNodeInfoCard.html":{},"interfaces/NodeData.html":{}}}],["this.neighbors[type",{"_index":1033,"title":{},"body":{"components/BsNodeInfoCard.html":{},"interfaces/NodeData.html":{}}}],["this.neighbors[type].push",{"_index":1035,"title":{},"body":{"components/BsNodeInfoCard.html":{},"interfaces/NodeData.html":{}}}],["this.networkservice.click.subscribe((eventdata",{"_index":3113,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["this.networkservice.fit(this.name",{"_index":3107,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["this.networkservice.off(this.name",{"_index":3137,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["this.networkservice.on(this.name",{"_index":3112,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["this.networkservice.setoptions(this.name",{"_index":3115,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["this.ngonchanges",{"_index":1690,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["this.node",{"_index":1012,"title":{},"body":{"components/BsNodeInfoCard.html":{},"interfaces/NodeData.html":{}}}],["this.node.context.edges",{"_index":1015,"title":{},"body":{"components/BsNodeInfoCard.html":{},"interfaces/NodeData.html":{}}}],["this.node.context.nodes.get(id",{"_index":1022,"title":{},"body":{"components/BsNodeInfoCard.html":{},"interfaces/NodeData.html":{}}}],["this.node.count",{"_index":1013,"title":{},"body":{"components/BsNodeInfoCard.html":{},"interfaces/NodeData.html":{}}}],["this.node.id",{"_index":1019,"title":{},"body":{"components/BsNodeInfoCard.html":{},"interfaces/NodeData.html":{}}}],["this.nodecache.has(node.id",{"_index":1395,"title":{},"body":{"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/DynamicNodeType.html":{}}}],["this.nodecache[node.id",{"_index":1452,"title":{},"body":{"interfaces/DynamicNodeType.html":{}}}],["this.nodeclicked.next(node",{"_index":3133,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["this.nodeclicked.subscribe((node",{"_index":3040,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["this.nodedata",{"_index":1011,"title":{},"body":{"components/BsNodeInfoCard.html":{},"interfaces/NodeData.html":{}}}],["this.nodeidx.clear",{"_index":1541,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["this.nodeidx.delete(id",{"_index":1645,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["this.nodeidx.get(id",{"_index":1523,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["this.nodeidx.has(id",{"_index":1519,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["this.nodeidx.set(node.id",{"_index":1594,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["this.nodeidx[id",{"_index":1622,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["this.nodetype",{"_index":1211,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{}}}],["this.nodetype.getquery(node",{"_index":1442,"title":{},"body":{"interfaces/DynamicNodeType.html":{}}}],["this.nodetype.name",{"_index":1214,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{}}}],["this.nodetype.nodeoptions",{"_index":1463,"title":{},"body":{"interfaces/DynamicNodeType.html":{}}}],["this.nodetype.nodeoptions(node",{"_index":1464,"title":{},"body":{"interfaces/DynamicNodeType.html":{}}}],["this.nodetype.trigger",{"_index":1465,"title":{},"body":{"interfaces/DynamicNodeType.html":{}}}],["this.onaxisclicked(d",{"_index":901,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["this.onbrush",{"_index":2764,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.onbrushend",{"_index":2766,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.onmousemove",{"_index":2022,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.onmouseout",{"_index":2141,"title":{},"body":{"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.onnetworkclick(eventdata",{"_index":3114,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["this.onopensettings(true",{"_index":3193,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["this.onresize",{"_index":1128,"title":{},"body":{"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"components/NgxChart.html":{}}}],["this.onzoom",{"_index":2870,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.onzoomend",{"_index":2871,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.openedwindow",{"_index":1949,"title":{},"body":{"components/MapComponent.html":{}}}],["this.openedwindow.close",{"_index":1948,"title":{},"body":{"components/MapComponent.html":{}}}],["this.options",{"_index":1727,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["this.options.colorscheme",{"_index":1144,"title":{},"body":{"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"components/NgxChart.html":{}}}],["this.options.getitemcolor",{"_index":1733,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["this.optionsprefs",{"_index":3116,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["this.optionsprefs.physics",{"_index":3141,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["this.optionsprefs.physics.barneshut",{"_index":3143,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["this.optionsprefs.physics.barneshut.centralgravity",{"_index":3152,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["this.optionsprefs.physics.barneshut.damping",{"_index":3148,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["this.optionsprefs.physics.barneshut.gravitationalconstant",{"_index":3150,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["this.optionsprefs.physics.barneshut.springconstant",{"_index":3146,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["this.optionsprefs.physics.barneshut.springlength",{"_index":3144,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["this.parseentity(item",{"_index":2047,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{}}}],["this.parseentity(money.value",{"_index":2149,"title":{},"body":{"interfaces/MoneyDatum.html":{}}}],["this.prefs.delete(this.name",{"_index":3191,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["this.prefs.get(this.name",{"_index":3198,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["this.prefs.set(this.name",{"_index":3175,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["this.prefs.sync",{"_index":3189,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["this.processednodes",{"_index":1387,"title":{},"body":{"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/DynamicNodeType.html":{}}}],["this.processednodes.filter(id",{"_index":1388,"title":{},"body":{"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/DynamicNodeType.html":{}}}],["this.processednodes.indexof(node.id",{"_index":1393,"title":{},"body":{"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/DynamicNodeType.html":{}}}],["this.processednodes.push(node.id",{"_index":1421,"title":{},"body":{"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/DynamicNodeType.html":{}}}],["this.processednodes.splice(0",{"_index":1420,"title":{},"body":{"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/DynamicNodeType.html":{}}}],["this.processnode(node",{"_index":1426,"title":{},"body":{"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/DynamicNodeType.html":{}}}],["this.provider",{"_index":531,"title":{},"body":{"classes/BaseProvider.html":{}}}],["this.provider.next(this.dataset",{"_index":196,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AsyncRecordsProvider.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/RecordNode.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["this.providers.foreach(p",{"_index":3041,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["this.providers.map(p",{"_index":3065,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["this.providerssubscription",{"_index":3064,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["this.providerssubscription.unsubscribe",{"_index":3063,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["this.query",{"_index":432,"title":{},"body":{"classes/AsyncRecordsProvider.html":{}}}],["this.r",{"_index":2008,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{}}}],["this.r(datum.count",{"_index":2127,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{}}}],["this.r.domain(rextent",{"_index":2079,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{}}}],["this.rangechange.next(this.xt.domain",{"_index":2927,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.record.id",{"_index":2338,"title":{},"body":{"components/ResultTimeline.html":{}}}],["this.record.modified.length>=10",{"_index":2361,"title":{},"body":{"components/ResultTimeline.html":{}}}],["this.recordclicked.next(datum.record",{"_index":2171,"title":{},"body":{"interfaces/MoneyDatum.html":{}}}],["this.recordclicked.next(record",{"_index":1951,"title":{},"body":{"components/MapComponent.html":{}}}],["this.refreshaction",{"_index":3045,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["this.removeedge(id",{"_index":1561,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["this.removeedge(ids",{"_index":1562,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["this.removeedges(edge.id",{"_index":1570,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["this.removenode(id",{"_index":1558,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["this.removenode(ids",{"_index":1559,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["this.removenodes(neighbor.id",{"_index":1574,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["this.repulsionpref",{"_index":3151,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["this.resetaction",{"_index":466,"title":{},"body":{"classes/BaseProvider.html":{}}}],["this.results",{"_index":1760,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["this.results.aggregations",{"_index":2042,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{}}}],["this.results.records",{"_index":1712,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["this.results.records?.foreach(record",{"_index":2147,"title":{},"body":{"interfaces/MoneyDatum.html":{}}}],["this.right",{"_index":1091,"title":{},"body":{"components/BsTooltipComponent.html":{}}}],["this.searchservice.breadcrumbs.findselect(this.name",{"_index":3088,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["this.searchservice.getresults(query",{"_index":2584,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["this.searchservice.query.addselect(expr",{"_index":2121,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["this.searchservice.query.findselect(this.name",{"_index":2481,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["this.searchservice.query.removeselect(this.name",{"_index":1913,"title":{},"body":{"components/MapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/VisEvent.html":{}}}],["this.searchservice.search",{"_index":1914,"title":{},"body":{"components/MapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/VisEvent.html":{}}}],["this.searchservice.search(undefined",{"_index":2628,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["this.select(node",{"_index":3049,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["this.selectedcolor",{"_index":1741,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["this.selectedge",{"_index":3053,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["this.selectedge(edge",{"_index":3130,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["this.selectedge(this.context.edges.get(event.edges[0",{"_index":3126,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["this.selecteditems",{"_index":2085,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{}}}],["this.selecteditems.add(item.value",{"_index":2088,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{}}}],["this.selectedvalues.add(v.tolowercase",{"_index":1724,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["this.selectedvalues.add(v.value.tolowercase",{"_index":1725,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["this.selectedvalues.add(val.tolowercase",{"_index":1720,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["this.selectedvalues.clear",{"_index":1711,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["this.selectfield",{"_index":1680,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["this.selectfield.update",{"_index":1756,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["this.selection",{"_index":2473,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{}}}],["this.selectionchange",{"_index":1754,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["this.selectionchange.next(this.currentselection",{"_index":2914,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.selectionchange.unsubscribe",{"_index":1765,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["this.selectionservice.events.subscribe(e",{"_index":1998,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{}}}],["this.selectionservice.events.subscribe(event",{"_index":1755,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["this.selectionservice.getselecteditems().foreach(r",{"_index":2086,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{}}}],["this.selectionsubscription",{"_index":2400,"title":{},"body":{"classes/SelectedRecordsProvider.html":{}}}],["this.selectionsubscription?.unsubscribe",{"_index":2407,"title":{},"body":{"classes/SelectedRecordsProvider.html":{}}}],["this.selectnode",{"_index":3054,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["this.selectnode(node",{"_index":3129,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["this.selectnode(this.context.nodes.get(event.nodes[0",{"_index":3128,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["this.shiftdate(item.date",{"_index":2682,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["this.showtooltip",{"_index":2165,"title":{},"body":{"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.skips[type.aggregation",{"_index":255,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{}}}],["this.skips[type.aggregation+(sourcenode?.id",{"_index":161,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{}}}],["this.skips[type.aggregation+node.id",{"_index":279,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{}}}],["this.springconstantpref",{"_index":3147,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["this.springlengthpref",{"_index":3145,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["this.style",{"_index":1933,"title":{},"body":{"components/MapComponent.html":{}}}],["this.tickformatter",{"_index":1729,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["this.timeline.addcustomtime(this.record.modified.substring(0,10",{"_index":2362,"title":{},"body":{"components/ResultTimeline.html":{}}}],["this.timeline.on('select",{"_index":2363,"title":{},"body":{"components/ResultTimeline.html":{}}}],["this.timeline.removecustomtime(\"date",{"_index":2357,"title":{},"body":{"components/ResultTimeline.html":{}}}],["this.timeseries",{"_index":2496,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["this.timeseries$[i",{"_index":2513,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["this.timeseries.foreach((config",{"_index":2512,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["this.timeseries.map(_",{"_index":2497,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["this.tonode",{"_index":615,"title":{},"body":{"components/BsEdgeInfoCard.html":{}}}],["this.tooltipitem",{"_index":904,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.tooltipx",{"_index":2166,"title":{},"body":{"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.top",{"_index":1087,"title":{},"body":{"components/BsTooltipComponent.html":{}}}],["this.turnofftooltip",{"_index":2034,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.uiservice.addelementresizelistener(this.wrapper.nativeelement",{"_index":1127,"title":{},"body":{"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"components/NgxChart.html":{}}}],["this.uiservice.removeelementresizelistener(this.wrapper.nativeelement",{"_index":1132,"title":{},"body":{"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"components/NgxChart.html":{}}}],["this.updateactions",{"_index":3048,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["this.updateaxes",{"_index":2038,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.updatebrush",{"_index":2790,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.updatechart",{"_index":1125,"title":{},"body":{"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"components/NgxChart.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.updatecombinedaggregation(config",{"_index":2635,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["this.updatedata",{"_index":2036,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/VisEvent.html":{}}}],["this.updatedataset(records",{"_index":2405,"title":{},"body":{"classes/SelectedRecordsProvider.html":{}}}],["this.updatedataset(results.aggregations",{"_index":179,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{}}}],["this.updatedataset(results.records",{"_index":435,"title":{},"body":{"classes/AsyncRecordsProvider.html":{}}}],["this.updatedataset(this.selectionservice.getselecteditems",{"_index":2406,"title":{},"body":{"classes/SelectedRecordsProvider.html":{}}}],["this.updatedynamicdataset(array.from(map.values",{"_index":1378,"title":{},"body":{"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/DynamicNodeType.html":{}}}],["this.updateevents",{"_index":2509,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{}}}],["this.updategrips(this.brushselection",{"_index":2908,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.updateoptions",{"_index":3056,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["this.updatescales",{"_index":2037,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{}}}],["this.updatescales(this.data",{"_index":2820,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.updateselecteditems",{"_index":1999,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{}}}],["this.updateselectedvalues",{"_index":1763,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["this.updateselection",{"_index":2780,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.updatetimeline",{"_index":2315,"title":{},"body":{"components/ResultTimeline.html":{}}}],["this.updatetimeseries",{"_index":2501,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["this.updatexaxis",{"_index":2744,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.updatezoom",{"_index":2821,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.viewinit",{"_index":872,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.vistimelineservice.setitems(this.name",{"_index":2381,"title":{},"body":{"components/ResultTimeline.html":{}}}],["this.width",{"_index":850,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.wrapper",{"_index":1157,"title":{},"body":{"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"components/NgxChart.html":{}}}],["this.x",{"_index":847,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.x(datum.category",{"_index":2124,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{}}}],["this.x(datum.date",{"_index":2178,"title":{},"body":{"interfaces/MoneyDatum.html":{}}}],["this.x(item.x",{"_index":905,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["this.x.bandwidth",{"_index":2077,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{}}}],["this.x.domain",{"_index":2083,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.x.domain(this.data.map(d",{"_index":2074,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{}}}],["this.x.domain(this.xt.domain",{"_index":2839,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.x.domain(xextent",{"_index":2161,"title":{},"body":{"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.x.range([0",{"_index":2017,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.x_inner",{"_index":2005,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{}}}],["this.x_inner(datum.i",{"_index":2125,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{}}}],["this.xaxis",{"_index":868,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.xaxis$.call(d3.axisbottom(this.xt",{"_index":2893,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.xaxis$.call(xaxis",{"_index":2093,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{}}}],["this.xaxis$.selectall(\".domain\").remove",{"_index":2094,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.xaxis.call(d3.axistop(this.x).ticksize(0",{"_index":885,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["this.xaxis.selectall(\".domain\").remove",{"_index":887,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["this.xaxis.selectall(\"text",{"_index":890,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["this.xaxis.selectall('text').each(this.wrap",{"_index":881,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["this.xaxis.transition(t",{"_index":878,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["this.xt",{"_index":2747,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.xt(d.date",{"_index":2751,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.xt(event[0].date",{"_index":2935,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.xt(events[0].date",{"_index":3008,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.xt(this.currentselection[0",{"_index":2881,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.xt(this.currentselection[1",{"_index":2882,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.xt.domain",{"_index":2953,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.y",{"_index":853,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.y(d.value",{"_index":2754,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.y(datum.value",{"_index":2126,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{}}}],["this.y(item.y",{"_index":906,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["this.y.domain([0",{"_index":2843,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.y.domain(yextent",{"_index":2078,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{}}}],["this.y.range([this.innerheight",{"_index":2014,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.y.ticks",{"_index":2894,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.y.ticks(5",{"_index":2097,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{}}}],["this.yaxis",{"_index":870,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.yaxis$.call(yaxis",{"_index":2113,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.yaxis$.selectall(\".domain\").remove",{"_index":2114,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.yaxis.call(d3.axisleft(this.y).ticksize(0",{"_index":886,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["this.yaxis.selectall(\".domain\").remove",{"_index":902,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["this.yaxis.selectall(\"text",{"_index":903,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["this.yaxis.selectall('text').each(this.wrap",{"_index":884,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["this.yaxis.transition(t",{"_index":882,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["this.zoombehavior",{"_index":2865,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.zoombehavior.on(\"end",{"_index":2856,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.zoombehavior.on(\"zoom",{"_index":2855,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.zoombehavior.transform(this.brush",{"_index":2857,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.zooming",{"_index":2916,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["though",{"_index":2787,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["three",{"_index":3354,"title":{},"body":{"miscellaneous/functions.html":{}}}],["through",{"_index":1691,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["throw",{"_index":218,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"interfaces/CustomData.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["thumbnail",{"_index":3341,"title":{},"body":{"miscellaneous/functions.html":{}}}],["tick",{"_index":2104,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["tickformat(d3.format(\"~s",{"_index":2895,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["tickformat(this.formatservice.moneyformatter",{"_index":2111,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{}}}],["tickformatter",{"_index":1107,"title":{},"body":{"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"components/NgxChart.html":{}}}],["ticks",{"_index":2102,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["ticks(5",{"_index":2163,"title":{},"body":{"interfaces/MoneyDatum.html":{}}}],["ticksizeinner",{"_index":2109,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{}}}],["tickvalues(yaxisticks",{"_index":2110,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["tile",{"_index":784,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["tile.clickable:hover",{"_index":961,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["tile.selected",{"_index":965,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["tilt",{"_index":891,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["time",{"_index":390,"title":{},"body":{"classes/AsyncRecordsProvider.html":{},"components/BsHeatmapComponent.html":{},"interfaces/CustomData.html":{},"interfaces/HeatmapItem.html":{},"interfaces/RecordNode.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"miscellaneous/functions.html":{}}}],["timeinterval",{"_index":2668,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{}}}],["timeinterval.offset(series[series.length",{"_index":2679,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["timeline",{"_index":684,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"components/BsTooltipComponent.html":{},"components/FacetNgxChart.html":{},"components/MapComponent.html":{},"interfaces/MoneyDatum.html":{},"components/NgxChart.html":{},"components/ResultTimeline.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"modules/VisTimelineModule.html":{},"dependencies.html":{}}}],["timeline'},{'name",{"_index":660,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"components/BsTooltipComponent.html":{},"components/FacetNgxChart.html":{},"components/MapComponent.html":{},"components/NgxChart.html":{},"components/ResultTimeline.html":{}}}],["timeline.component",{"_index":1058,"title":{},"body":{"modules/BsTimelineModule.html":{},"modules/FinanceModule.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["timeline.component.html",{"_index":2132,"title":{},"body":{"interfaces/MoneyDatum.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{}}}],["timeline.component.scss",{"_index":2133,"title":{},"body":{"interfaces/MoneyDatum.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{}}}],["timeline.component.ts",{"_index":2130,"title":{},"body":{"interfaces/MoneyDatum.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["timeline.html",{"_index":2274,"title":{},"body":{"components/ResultTimeline.html":{}}}],["timeline.ts",{"_index":2273,"title":{},"body":{"components/ResultTimeline.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["timeline.ts:122",{"_index":2300,"title":{},"body":{"components/ResultTimeline.html":{}}}],["timeline.ts:21",{"_index":2294,"title":{},"body":{"components/ResultTimeline.html":{}}}],["timeline.ts:22",{"_index":2298,"title":{},"body":{"components/ResultTimeline.html":{}}}],["timeline.ts:23",{"_index":2287,"title":{},"body":{"components/ResultTimeline.html":{}}}],["timeline.ts:24",{"_index":2288,"title":{},"body":{"components/ResultTimeline.html":{}}}],["timeline.ts:25",{"_index":2293,"title":{},"body":{"components/ResultTimeline.html":{}}}],["timeline.ts:26",{"_index":2291,"title":{},"body":{"components/ResultTimeline.html":{}}}],["timeline.ts:27",{"_index":2292,"title":{},"body":{"components/ResultTimeline.html":{}}}],["timeline.ts:28",{"_index":2289,"title":{},"body":{"components/ResultTimeline.html":{}}}],["timeline.ts:29",{"_index":2297,"title":{},"body":{"components/ResultTimeline.html":{}}}],["timeline.ts:31",{"_index":2302,"title":{},"body":{"components/ResultTimeline.html":{}}}],["timeline.ts:32",{"_index":2285,"title":{},"body":{"components/ResultTimeline.html":{}}}],["timeline.ts:34",{"_index":2304,"title":{},"body":{"components/ResultTimeline.html":{}}}],["timeline.ts:37",{"_index":2299,"title":{},"body":{"components/ResultTimeline.html":{}}}],["timeline.ts:43",{"_index":2301,"title":{},"body":{"components/ResultTimeline.html":{}}}],["timeline/.../facet",{"_index":3392,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["timeline/.../result",{"_index":3397,"title":{},"body":{"miscellaneous/variables.html":{}}}],["timeline/bootstrap/facet",{"_index":2409,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["timeline/bootstrap/timeline.component.ts",{"_index":2711,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{},"coverage.html":{}}}],["timeline/bootstrap/timeline.module.ts",{"_index":1054,"title":{},"body":{"modules/BsTimelineModule.html":{}}}],["timeline/money",{"_index":1816,"title":{},"body":{"modules/FinanceModule.html":{},"interfaces/MoneyDatum.html":{},"coverage.html":{}}}],["timeline/result",{"_index":2272,"title":{},"body":{"components/ResultTimeline.html":{},"modules/VisTimelineModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["timeline/vis",{"_index":3208,"title":{},"body":{"modules/VisTimelineModule.html":{}}}],["timelineaggregation",{"_index":2408,"title":{"interfaces/TimelineAggregation.html":{}},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["timelineaggregation).aggregation",{"_index":2621,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["timelinecombinedaggregations",{"_index":2422,"title":{"interfaces/TimelineCombinedAggregations.html":{}},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["timelinecombinedaggregations).aggregations",{"_index":2634,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["timelinecombinedaggregations).default",{"_index":2622,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["timelinecombinedaggregations).default.aggregation",{"_index":2623,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["timelinedata",{"_index":2432,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"miscellaneous/typealiases.html":{}}}],["timelinedate",{"_index":2420,"title":{"interfaces/TimelineDate.html":{}},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"coverage.html":{}}}],["timelinedate[]).concat(...primaryseries.map(s",{"_index":2829,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["timelineevent",{"_index":2421,"title":{"interfaces/TimelineEvent.html":{}},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["timelineevent[]).concat(...events",{"_index":2508,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["timelineeventaggregation",{"_index":2429,"title":{"interfaces/TimelineEventAggregation.html":{}},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["timelineeventaggregation).aggregation",{"_index":2538,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["timelineeventaggregation).subscribe",{"_index":2540,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["timelineeventdata",{"_index":2433,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"miscellaneous/typealiases.html":{}}}],["timelineinitialized",{"_index":2277,"title":{},"body":{"components/ResultTimeline.html":{}}}],["timelineoptions",{"_index":2295,"title":{},"body":{"components/ResultTimeline.html":{},"miscellaneous/variables.html":{}}}],["timelinerecords",{"_index":2428,"title":{"interfaces/TimelineRecords.html":{}},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["timelinerecords).field",{"_index":2470,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["timelines",{"_index":2510,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["timelineseries",{"_index":2419,"title":{"interfaces/TimelineSeries.html":{}},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["timelineseries).dates",{"_index":2515,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["times",{"_index":1362,"title":{},"body":{"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/DynamicNodeType.html":{}}}],["timeseries",{"_index":2434,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{}}}],["timeseries$.error(err",{"_index":2609,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["timeseries$.next(d",{"_index":2608,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["title",{"_index":295,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/BaseProvider.html":{},"components/BsEdgeInfoCard.html":{},"components/BsNodeInfoCard.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"components/MapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/VisEvent.html":{}}}],["todo",{"_index":84,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/VisEvent.html":{}}}],["together",{"_index":2939,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["toggle",{"_index":459,"title":{},"body":{"classes/BaseProvider.html":{}}}],["tonode",{"_index":505,"title":{},"body":{"classes/BaseProvider.html":{},"components/BsEdgeInfoCard.html":{}}}],["tonode.id",{"_index":514,"title":{},"body":{"classes/BaseProvider.html":{}}}],["tooltip",{"_index":830,"title":{},"body":{"components/BsHeatmapComponent.html":{},"modules/BsTimelineModule.html":{},"components/BsTooltipComponent.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{}}}],["tooltip'},{'name",{"_index":668,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"components/BsTooltipComponent.html":{},"components/FacetNgxChart.html":{},"components/MapComponent.html":{},"components/NgxChart.html":{},"components/ResultTimeline.html":{}}}],["tooltip.component",{"_index":999,"title":{},"body":{"modules/BsHeatmapModule.html":{}}}],["tooltip.left::after",{"_index":1072,"title":{},"body":{"components/BsTooltipComponent.html":{}}}],["tooltip.right::after",{"_index":1068,"title":{},"body":{"components/BsTooltipComponent.html":{}}}],["tooltip::after",{"_index":1061,"title":{},"body":{"components/BsTooltipComponent.html":{}}}],["tooltipitem",{"_index":696,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["tooltipitem.count",{"_index":941,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["tooltipitem.display",{"_index":938,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["tooltipitem.value",{"_index":939,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["tooltipleft",{"_index":697,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["tooltiporientation",{"_index":698,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["tooltipright",{"_index":699,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["tooltips",{"_index":1996,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{}}}],["tooltiptemplate",{"_index":1117,"title":{},"body":{"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"components/NgxChart.html":{}}}],["tooltiptop",{"_index":700,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["tooltiptpl",{"_index":2719,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["tooltipx",{"_index":2138,"title":{},"body":{"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["top",{"_index":579,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"components/BsTooltipComponent.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/NodeData.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{}}}],["top.px",{"_index":1086,"title":{},"body":{"components/BsTooltipComponent.html":{}}}],["total",{"_index":936,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["transfer",{"_index":1626,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["transform",{"_index":2920,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["transform.rescalex(this.x",{"_index":2922,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["transformed",{"_index":1429,"title":{},"body":{"interfaces/DynamicNodeType.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["transforms",{"_index":2660,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{}}}],["transit",{"_index":3433,"title":{},"body":{"miscellaneous/variables.html":{}}}],["transit.line",{"_index":3434,"title":{},"body":{"miscellaneous/variables.html":{}}}],["transit.station",{"_index":3435,"title":{},"body":{"miscellaneous/variables.html":{}}}],["transition",{"_index":721,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["transitions",{"_index":772,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["translate",{"_index":2900,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["transparent",{"_index":1070,"title":{},"body":{"components/BsTooltipComponent.html":{}}}],["trash",{"_index":467,"title":{},"body":{"classes/BaseProvider.html":{}}}],["tree",{"_index":572,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"components/BsTooltipComponent.html":{},"components/FacetNgxChart.html":{},"components/MapComponent.html":{},"components/NgxChart.html":{},"components/ResultTimeline.html":{}}}],["treemapmodule",{"_index":2269,"title":{},"body":{"modules/NgxChartsModule.html":{}}}],["triangle",{"_index":2930,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["trigger",{"_index":114,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"components/BsEdgeInfoCard.html":{},"components/BsNodeInfoCard.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/NodeData.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/VisEvent.html":{}}}],["triggered",{"_index":2611,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["triggers",{"_index":2632,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["triple",{"_index":3359,"title":{},"body":{"miscellaneous/functions.html":{}}}],["true",{"_index":67,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"components/BsEdgeInfoCard.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"interfaces/HeatmapItem.html":{},"components/MapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"components/NgxChart.html":{},"interfaces/NodeData.html":{},"interfaces/RecordNode.html":{},"components/ResultTimeline.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{}}}],["true}).pipe",{"_index":2585,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["true}).subscribe",{"_index":177,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{}}}],["true}).subscribe(results",{"_index":1453,"title":{},"body":{"interfaces/DynamicNodeType.html":{}}}],["truncates",{"_index":807,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["try",{"_index":1028,"title":{},"body":{"components/BsNodeInfoCard.html":{},"interfaces/NodeData.html":{},"components/ResultTimeline.html":{}}}],["turn",{"_index":358,"title":{},"body":{"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"classes/SelectedRecordsProvider.html":{}}}],["turned",{"_index":1165,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{}}}],["turning",{"_index":2932,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["two",{"_index":215,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/BaseProvider.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"miscellaneous/functions.html":{}}}],["type",{"_index":30,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"components/BsEdgeInfoCard.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"components/BsTooltipComponent.html":{},"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"interfaces/HeatmapItem.html":{},"components/MapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"components/NgxChart.html":{},"interfaces/Node.html":{},"interfaces/NodeData.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"components/ResultTimeline.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["type's",{"_index":1031,"title":{},"body":{"components/BsNodeInfoCard.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/NodeData.html":{}}}],["type.aggregation",{"_index":304,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{}}}],["type.count",{"_index":162,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{}}}],["type.display",{"_index":1286,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{}}}],["type.edgeoptions",{"_index":529,"title":{},"body":{"classes/BaseProvider.html":{}}}],["type.edgeoptions([fromnode",{"_index":530,"title":{},"body":{"classes/BaseProvider.html":{}}}],["type.field",{"_index":413,"title":{},"body":{"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"classes/SelectedRecordsProvider.html":{}}}],["type.name}:${value",{"_index":480,"title":{},"body":{"classes/BaseProvider.html":{}}}],["type.nodeoptions",{"_index":502,"title":{},"body":{"classes/BaseProvider.html":{}}}],["type.nodeoptions(node",{"_index":503,"title":{},"body":{"classes/BaseProvider.html":{}}}],["type.nodetypes.length",{"_index":1272,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{}}}],["type.nodetypes[0",{"_index":268,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{}}}],["type.nodetypes[0].name",{"_index":1213,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{}}}],["type.nodetypes[1",{"_index":278,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{}}}],["type.parse!(recorddata",{"_index":1226,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{}}}],["type.parse!(value",{"_index":1224,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{}}}],["type.parse(item",{"_index":213,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{}}}],["type.trigger",{"_index":257,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AsyncRecordsProvider.html":{},"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["type:auditeventtype.search_timeline_usage",{"_index":2629,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["typealiases",{"_index":3390,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["typed",{"_index":3364,"title":{},"body":{"miscellaneous/functions.html":{}}}],["typedcoocaggregationdemo",{"_index":3270,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["typedcoocaggregationdemo(providerfactory",{"_index":3358,"title":{},"body":{"miscellaneous/functions.html":{}}}],["typedcoocrecorddemo",{"_index":3271,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["typedcoocrecorddemo(providerfactory",{"_index":3363,"title":{},"body":{"miscellaneous/functions.html":{}}}],["typeof",{"_index":2562,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["types",{"_index":14,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{}}}],["types.find(type",{"_index":189,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{}}}],["types.foreach(type",{"_index":158,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{}}}],["types.length",{"_index":259,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{}}}],["types.map(type",{"_index":314,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{}}}],["typically",{"_index":1486,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["uiservice",{"_index":1104,"title":{},"body":{"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"components/NgxChart.html":{}}}],["undefined",{"_index":108,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"components/BsEdgeInfoCard.html":{},"components/BsNodeInfoCard.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"components/MapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeData.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"miscellaneous/variables.html":{}}}],["undefined).subscribe(res",{"_index":1403,"title":{},"body":{"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/DynamicNodeType.html":{}}}],["underline",{"_index":956,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["undirected",{"_index":507,"title":{},"body":{"classes/BaseProvider.html":{}}}],["unfortunately",{"_index":2029,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["unique",{"_index":1307,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/VisEvent.html":{}}}],["unlimited",{"_index":1172,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{}}}],["unselected",{"_index":2388,"title":{},"body":{"classes/SelectedRecordsProvider.html":{},"miscellaneous/functions.html":{}}}],["up",{"_index":1142,"title":{},"body":{"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"components/NgxChart.html":{},"interfaces/VisEvent.html":{}}}],["update",{"_index":633,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/NodeData.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{}}}],["update/reset",{"_index":2849,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["updateactions",{"_index":3086,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["updateaxes",{"_index":2089,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["updatebrush",{"_index":2879,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["updatechart",{"_index":1121,"title":{},"body":{"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"components/NgxChart.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["updatecombinedaggregation",{"_index":2636,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["updatecombinedaggregation(config",{"_index":2592,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["updated",{"_index":1584,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"components/MapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["updatedata",{"_index":2039,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/VisEvent.html":{}}}],["updatedataset(aggregations",{"_index":185,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{}}}],["updatedataset(records",{"_index":1190,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{}}}],["updatedatasets",{"_index":2189,"title":{},"body":{"classes/NetworkDataset.html":{}}}],["updatedatasets(nodes",{"_index":1627,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["updatedynamicdataset(sourcenodes",{"_index":1381,"title":{},"body":{"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/DynamicNodeType.html":{}}}],["updateevents",{"_index":2534,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{}}}],["updategrips(selection",{"_index":2898,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["updateoptions",{"_index":3138,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["updater",{"_index":1681,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["updates",{"_index":144,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AsyncRecordsProvider.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{}}}],["updatescales(data",{"_index":2822,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["updateselecteditems",{"_index":2084,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{}}}],["updateselectedvalues",{"_index":1710,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["updateselection",{"_index":2884,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["updatetimeline",{"_index":2278,"title":{},"body":{"components/ResultTimeline.html":{}}}],["updatetimeseries",{"_index":2511,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["updatexaxis",{"_index":2888,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["updatezoom",{"_index":2851,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["updating",{"_index":2613,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["upon",{"_index":1450,"title":{},"body":{"interfaces/DynamicNodeType.html":{}}}],["url",{"_index":2373,"title":{},"body":{"components/ResultTimeline.html":{}}}],["usd",{"_index":2134,"title":{},"body":{"interfaces/MoneyDatum.html":{}}}],["use",{"_index":378,"title":{},"body":{"classes/AsyncRecordsProvider.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"interfaces/CustomData.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeData.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{}}}],["used",{"_index":92,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AsyncRecordsProvider.html":{},"components/BsHeatmapComponent.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"interfaces/HeatmapItem.html":{},"components/MapComponent.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/VisEvent.html":{}}}],["useful",{"_index":1513,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["user",{"_index":780,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/HeatmapItem.html":{},"components/MapComponent.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/VisEvent.html":{}}}],["userpreferences",{"_index":3017,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["uses",{"_index":2943,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["using",{"_index":105,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{}}}],["util",{"_index":3330,"title":{},"body":{"dependencies.html":{}}}],["utilities",{"_index":2937,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["utility",{"_index":2643,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["utils",{"_index":50,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"components/MapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"components/NgxChart.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/VisEvent.html":{}}}],["utils.copy(this.options",{"_index":3139,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["utils.copy(this.query",{"_index":153,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{}}}],["utils.copy(this.searchservice.query",{"_index":2581,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["utils.debounce",{"_index":3188,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["utils.eqnc(a.name",{"_index":2145,"title":{},"body":{"interfaces/MoneyDatum.html":{}}}],["utils.eqnc(type.aggregation",{"_index":190,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{}}}],["utils.extend(edge",{"_index":515,"title":{},"body":{"classes/BaseProvider.html":{}}}],["utils.extend(existingedge",{"_index":1625,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["utils.extend(existingnode",{"_index":1602,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["utils.extend(node",{"_index":500,"title":{},"body":{"classes/BaseProvider.html":{},"interfaces/DynamicNodeType.html":{}}}],["utils.isnumber(value",{"_index":1744,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["utils.merge",{"_index":3442,"title":{},"body":{"miscellaneous/variables.html":{}}}],["utils.subscribe(this.intlservice.events",{"_index":1130,"title":{},"body":{"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"components/NgxChart.html":{}}}],["utils.todate(r[config.field",{"_index":2557,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["utils.tolowercase(this.options.type",{"_index":1135,"title":{},"body":{"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"components/NgxChart.html":{}}}],["utilsmodule",{"_index":1055,"title":{},"body":{"modules/BsTimelineModule.html":{},"modules/FinanceModule.html":{},"modules/FusionChartsModule.html":{},"modules/NetworkModule.html":{},"modules/NgxChartsModule.html":{}}}],["v!==this.aggregation",{"_index":1688,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["val",{"_index":1716,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["val.foreach(v",{"_index":1722,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["valid",{"_index":2064,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{}}}],["value",{"_index":68,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"components/BsHeatmapComponent.html":{},"components/BsTooltipComponent.html":{},"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"interfaces/HeatmapItem.html":{},"components/MapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"components/NgxChart.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"components/ResultTimeline.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{},"miscellaneous/variables.html":{}}}],["value.x))).slice(0",{"_index":838,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["value.y))).slice(0",{"_index":841,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["value[\"display",{"_index":1238,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{}}}],["value[\"value",{"_index":1237,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{}}}],["value_amount",{"_index":1974,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{}}}],["valueamounts",{"_index":1977,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{}}}],["valued",{"_index":1220,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{}}}],["valueitem",{"_index":1963,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{}}}],["values",{"_index":28,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"interfaces/CustomData.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/VisEvent.html":{}}}],["valuestr",{"_index":2061,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{}}}],["var",{"_index":650,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"components/BsTooltipComponent.html":{},"components/FacetNgxChart.html":{},"components/MapComponent.html":{},"components/NgxChart.html":{},"components/ResultTimeline.html":{}}}],["variable",{"_index":3085,"title":{},"body":{"interfaces/VisEvent.html":{},"coverage.html":{}}}],["variables",{"_index":3393,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["vertical",{"_index":2116,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["verticaltalbar",{"_index":1140,"title":{},"body":{"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"components/NgxChart.html":{}}}],["via",{"_index":330,"title":{},"body":{"classes/AsyncRecordsProvider.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"miscellaneous/functions.html":{}}}],["view",{"_index":628,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"modules/BsHeatmapModule.html":{},"components/BsNodeInfoCard.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"components/MapComponent.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeData.html":{},"interfaces/NodeType.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{}}}],["view'},{'name",{"_index":665,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"components/BsTooltipComponent.html":{},"components/FacetNgxChart.html":{},"components/MapComponent.html":{},"components/NgxChart.html":{},"components/ResultTimeline.html":{}}}],["view.ts",{"_index":3239,"title":{},"body":{"coverage.html":{}}}],["viewbox",{"_index":907,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["viewchild",{"_index":818,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"components/NgxChart.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["viewchild(\"brush",{"_index":2733,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["viewchild(\"chart",{"_index":1118,"title":{},"body":{"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"components/NgxChart.html":{}}}],["viewchild(\"overlay",{"_index":1994,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{}}}],["viewchild(\"tooltiptemplate",{"_index":1116,"title":{},"body":{"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"components/NgxChart.html":{}}}],["viewchild(\"wrapper",{"_index":1113,"title":{},"body":{"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"components/NgxChart.html":{}}}],["viewchild(\"xaxis",{"_index":828,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["viewchild(\"yaxis",{"_index":829,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["viewchild('chart",{"_index":2242,"title":{},"body":{"components/NgxChart.html":{}}}],["viewchild('tooltiptemplate",{"_index":2246,"title":{},"body":{"components/NgxChart.html":{}}}],["viewchild('wrapper",{"_index":2248,"title":{},"body":{"components/NgxChart.html":{}}}],["viewchild('xaxis",{"_index":796,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["viewchild('yaxis",{"_index":798,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["viewinit",{"_index":701,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["vis",{"_index":1474,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"modules/NetworkModule.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"components/ResultTimeline.html":{},"interfaces/VisEvent.html":{},"modules/VisTimelineModule.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/variables.html":{}}}],["vis.js",{"_index":1511,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/VisEvent.html":{},"miscellaneous/variables.html":{}}}],["visevent",{"_index":3011,"title":{"interfaces/VisEvent.html":{}},"body":{"interfaces/VisEvent.html":{},"coverage.html":{}}}],["visibility",{"_index":119,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AsyncRecordsProvider.html":{},"interfaces/CustomData.html":{},"components/NgxChart.html":{},"interfaces/RecordNode.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/VisEvent.html":{}}}],["visible",{"_index":484,"title":{},"body":{"classes/BaseProvider.html":{},"interfaces/CustomData.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"components/NgxChart.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{}}}],["vismodule",{"_index":2216,"title":{},"body":{"modules/NetworkModule.html":{},"modules/VisTimelineModule.html":{}}}],["visnetworkservice",{"_index":1478,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/VisEvent.html":{}}}],["vistimelinemodule",{"_index":3204,"title":{"modules/VisTimelineModule.html":{}},"body":{"modules/VisTimelineModule.html":{},"index.html":{},"modules.html":{}}}],["vistimelineservice",{"_index":2276,"title":{},"body":{"components/ResultTimeline.html":{}}}],["void",{"_index":371,"title":{},"body":{"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"components/BsEdgeInfoCard.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"components/FacetNgxChart.html":{},"components/MapComponent.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"components/NgxChart.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"components/ResultTimeline.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["w",{"_index":2802,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["want",{"_index":377,"title":{},"body":{"classes/AsyncRecordsProvider.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{}}}],["warning",{"_index":630,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsNodeInfoCard.html":{},"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/NodeData.html":{}}}],["water",{"_index":3437,"title":{},"body":{"miscellaneous/variables.html":{}}}],["way",{"_index":1148,"title":{},"body":{"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/CustomData.html":{},"components/NgxChart.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{}}}],["web",{"_index":97,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/VisEvent.html":{}}}],["weeks",{"_index":2589,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["well",{"_index":1553,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["west",{"_index":1946,"title":{},"body":{"components/MapComponent.html":{}}}],["whatever",{"_index":3378,"title":{},"body":{"miscellaneous/functions.html":{}}}],["whether",{"_index":122,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/BaseProvider.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{},"miscellaneous/functions.html":{}}}],["while(!parsedexpr.isleaf",{"_index":2486,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["whose",{"_index":1350,"title":{},"body":{"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{}}}],["width",{"_index":583,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"components/BsTooltipComponent.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"components/NgxChart.html":{},"interfaces/NodeData.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{}}}],["wikiasyncconfig",{"_index":3272,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["wikiasyncconfig(providerfactory",{"_index":3365,"title":{},"body":{"miscellaneous/functions.html":{}}}],["wikidynconfig",{"_index":3273,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["wikidynconfig(providerfactory",{"_index":3369,"title":{},"body":{"miscellaneous/functions.html":{}}}],["wikidynedgeconfig",{"_index":3274,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["wikidynedgeconfig(providerfactory",{"_index":3374,"title":{},"body":{"miscellaneous/functions.html":{}}}],["wikimultidynconfig",{"_index":3275,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["wikimultidynconfig(providerfactory",{"_index":3385,"title":{},"body":{"miscellaneous/functions.html":{}}}],["wikipedia",{"_index":1186,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{},"miscellaneous/functions.html":{}}}],["window",{"_index":1906,"title":{},"body":{"components/MapComponent.html":{}}}],["windows",{"_index":1950,"title":{},"body":{"components/MapComponent.html":{}}}],["wish",{"_index":317,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{}}}],["within",{"_index":1240,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{}}}],["without",{"_index":2917,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["withtext",{"_index":318,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{}}}],["works",{"_index":66,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{}}}],["wrap",{"_index":702,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["wrapper",{"_index":1115,"title":{},"body":{"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"components/NgxChart.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["ww",{"_index":2695,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["x",{"_index":703,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["x(d",{"_index":2750,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["x_inner",{"_index":1985,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{}}}],["xaxis",{"_index":704,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["xdomain",{"_index":2860,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["xdomain[0].gettime",{"_index":2863,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["xdomain[1].gettime",{"_index":2862,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["xextent",{"_index":2831,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["xextent[0",{"_index":2841,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["xextent[1",{"_index":2159,"title":{},"body":{"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["xlabels",{"_index":835,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["xlabels.includes(value.x",{"_index":845,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["xt",{"_index":2721,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["y",{"_index":705,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["y(d",{"_index":2756,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["y0(this.y(0",{"_index":2752,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["y1(d",{"_index":2753,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["yaxis",{"_index":706,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["yaxisticks",{"_index":2096,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["year",{"_index":2332,"title":{},"body":{"components/ResultTimeline.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["years",{"_index":2451,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{}}}],["yes",{"_index":407,"title":{},"body":{"classes/AsyncRecordsProvider.html":{},"components/BsHeatmapComponent.html":{},"components/MapComponent.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"classes/SelectedRecordsProvider.html":{}}}],["yextent",{"_index":2157,"title":{},"body":{"interfaces/MoneyDatum.html":{}}}],["yextent[0",{"_index":2160,"title":{},"body":{"interfaces/MoneyDatum.html":{}}}],["yextent[1",{"_index":2071,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{}}}],["ylabels",{"_index":840,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["ylabels.includes(value.y",{"_index":846,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["ymax",{"_index":2833,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["ymax*1.1",{"_index":2844,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["yyyy",{"_index":2690,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["z",{"_index":1060,"title":{},"body":{"components/BsTooltipComponent.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["zeros",{"_index":2662,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["zoom",{"_index":985,"title":{},"body":{"modules/BsHeatmapModule.html":{},"modules/BsTimelineModule.html":{},"modules/FinanceModule.html":{},"modules/FusionChartsModule.html":{},"modules/GoogleMapsModule.html":{},"modules/NetworkModule.html":{},"modules/NgxChartsModule.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{},"modules/VisTimelineModule.html":{},"index.html":{}}}],["zoom/selection",{"_index":2520,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["zoomable",{"_index":2446,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{}}}],["zoombehavior",{"_index":2729,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["zoomed",{"_index":2443,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["zooming",{"_index":2739,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["zooms",{"_index":2631,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"interfaces/AggregationData.html":{"url":"interfaces/AggregationData.html","title":"interface - AggregationData","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  AggregationData\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            network/providers/aggregation-provider.ts\n        \n\n            \n                Description\n            \n            \n                Convenience structure for managing custom metadata types (like\ncooccurrence entities). AggregationData is returned by the custom\nparse() function of an AggregationEdgeType.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        directed\n                                \n                                \n                                        displays\n                                \n                                \n                                            Optional\n                                        fieldValue\n                                \n                                \n                                            Optional\n                                        relations\n                                \n                                \n                                        values\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        directed\n                                    \n                                \n                                \n                                    \n                                        directed:     boolean[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     boolean[]\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        displays\n                                    \n                                \n                                \n                                    \n                                        displays:     string[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        fieldValue\n                                    \n                                \n                                \n                                    \n                                        fieldValue:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        relations\n                                    \n                                \n                                \n                                    \n                                        relations:     string[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string[]\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        values\n                                    \n                                \n                                \n                                    \n                                        values:     string[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Aggregation, AggregationItem } from '@sinequa/core/web-services';\nimport { Node, Edge, EdgeType, NetworkDataset, NetworkContext } from '../network-models';\nimport { Action } from '@sinequa/components/action';\nimport { Query, Expr } from '@sinequa/core/app-utils';\nimport { Utils } from '@sinequa/core/base';\nimport { BaseProvider } from './base-provider';\n\n/**\n * Extension of the Edge interface, to store the aggregation and\n * aggregation items from which the edge is constructed\n */\nexport interface AggregationEdge extends Edge {\n    aggregationItem: AggregationItem;\n    aggregation: Aggregation;\n}\n\n/**\n * Convenience structure for managing custom metadata types (like\n * cooccurrence entities). AggregationData is returned by the custom\n * parse() function of an AggregationEdgeType.\n */\nexport interface AggregationData {\n    values: string[]; // eg. LARRY PAGE, GOOGLE\n    displays: string[]; // eg. Larry Page, Google\n    relations?: string[]; // eg. Works At\n    directed?: boolean[]; // eg. true\n    fieldValue?: string; // A value on which to filter the data\n}\n\n/** Mode \"source\" means node are fetched and added systematically on getData() / other modes allow expanding an existing node*/\nexport type AggregationTriggerType = \"source\" | \"onclick\" | \"manual\";\n// TODO: Add support for \"oninsert\" (which might required additional complexity)\n\n/**\n * Extension of the EdgeType interface, specifying which aggregation is used\n * to generate the Edges, and additional options.\n */\nexport interface AggregationEdgeType extends EdgeType {\n    /** Name of the aggregation in the Web Service configuration */\n    aggregation: string;\n    /** If parse is provided, it is used to get the new nodes and edges. If not, the value is automatically converted into nodes, using nodeTypes[1] */\n    parse?: (item: AggregationItem, type: AggregationEdgeType) => AggregationData | undefined; // A cooccurrence aggregation might return 3 nodes and 2 edges\n    /** A parameter to define when the aggregation is fetched and nodes are added */\n    trigger: AggregationTriggerType;\n    /** Default number of items to fetch */\n    count?: number;\n    // TODO: add visibility modes ? (eg. existingNodes)\n}\n\n/**\n * Tests whether an EdgeType is an AggregationEdgeType\n * @param et an edge type\n */\nexport function isAggregationEdgeType(et: EdgeType): et is AggregationEdgeType {\n    return !!(et as AggregationEdgeType).aggregation;\n}\n\n/**\n * The Aggregation Provider generates nodes and edges from aggregations\n * fetched from the server.\n */\nexport class AggregationProvider extends BaseProvider {\n\n    /** Stores how many aggregation items have been fetched from the server for a given aggregation */\n    readonly skips: {[aggregation: string]: number} = {};\n\n    constructor(\n        public name: string,\n        protected edgeTypes: AggregationEdgeType[],\n        protected query?: Query\n    ) {\n        super(name);\n    }\n\n\n    /**\n     * Fetches the list of aggregations and updates the dataset\n     * @param types list of aggregation edge types\n     * @param sourceNode if provided, will compute the aggregation with a select to compute the aggregation for documents referencing that node\n     */\n    protected fetchAggregations(types: AggregationEdgeType[], sourceNode?: Node) {\n        \n        const query = Utils.copy(this.query || this.context.searchService.query);\n        query.action = \"aggregate\";\n        query.aggregations = {};\n        types.forEach(type => query.aggregations[type.aggregation] = {\n            skip: this.skips[type.aggregation+(sourceNode?.id || \"\")], \n            count: type.count || 10\n        });\n\n        if(sourceNode && sourceNode.type.field) {\n            query.addSelect(this.context.exprBuilder.makeExpr(sourceNode.type.field, this.getNodeValue(sourceNode)));\n        }\n\n        Object.keys(query.aggregations).forEach(aggregation => {\n            if(!this.context.appService.getCCAggregation(aggregation)) {\n                // This may not be a mistake if the aggregation belong to a different web service configuration\n                console.warn(`Aggregation '${aggregation}' does not exist in the Query web service configuration`);\n            }\n        });\n\n        this.context.searchService.getResults(query, undefined, {searchInactive: true}).subscribe(\n            results => {\n                this.updateDataset(results.aggregations, types, sourceNode);\n            }\n        );\n        \n    }\n\n    /**\n     * Fills the dataset with nodes and edges corresponding to\n     * the given aggregations data, and emits this new dataset.\n     * @param aggregations the list of aggregations to process\n     * @param types the corresponding edge types for each aggregation\n     */\n    protected updateDataset(aggregations: Aggregation[], types: AggregationEdgeType[], sourceNode?: Node) {\n\n        aggregations.forEach(aggregation => {\n            if(aggregation && aggregation.items) {\n                const type = types.find(type => Utils.eqNC(type.aggregation, aggregation.name));\n                if(type) {\n                    this.skips[type.aggregation+(sourceNode?.id || \"\")] += aggregation.items.length;\n                    aggregation.items.forEach(item => this.addAggregationNodes(item, aggregation, type, sourceNode));\n                }\n            }\n        });\n\n        this.provider.next(this.dataset);\n    }\n\n    /**\n     * Create nodes and edges for the given aggregation item and adds them\n     * to the dataset. By default (if the edge does not have a parse() function\n     * and there is no sourceNode), the aggregation is assumed to be a cross-\n     * distribution, with items formatted as \"Bill Gates/Microsoft\".\n     * @param item the aggregation item to process\n     * @param aggregation the aggregation from which the item comes from\n     * @param type the type of the edge corresponding to that aggregation\n     * @param sourceNode if provided, will assume the distribution is 1-dimensional and attach each new node to that source node\n     */\n    addAggregationNodes(item: AggregationItem, aggregation: Aggregation, type: AggregationEdgeType, sourceNode?: Node) {\n\n        let rawData: AggregationData | undefined;\n\n        if(type.parse) {\n            rawData = type.parse(item, type);\n        }\n        else {\n            // Source distributions are at least two-dimensional\n            if(!sourceNode) {\n                if(!item.display){\n                    throw new Error(`Aggregation Item '${item.value}' has no display value`);\n                }\n                // Default parsing, assuming cross-distribution format (\"Apple/Steve Jobs\")\n                const displays = item.display.split(\"/\");\n                const expr = this.context.appService.parseExpr(item.value.toString()) as Expr;\n                const values = expr.operands.map(e => e.value!);\n                if(values.length  0){\n                    const relation = rawData.relations? rawData.relations[i-1] : undefined;\n                    const directed = rawData.directed? rawData.directed[i-1] : false;\n                    data.addEdges(this.createEdge(type, lastNode!, node, rawData.fieldValue, true, {aggregation, aggregationItem: item}, item.count, directed, relation));\n                }\n                lastNode = node;\n            }\n            this.dataset.merge(data);\n        }\n    }\n\n\n    // NetworkProvider interface\n\n    /** \n     * Retrieves the aggregation data synchronously or asynchronously, and updates the dataset with it.\n     */\n    getData(context: NetworkContext) {\n        this.context = context;\n        this.dataset.clear();\n\n        // Initialize the counts\n        this.edgeTypes.forEach(type => this.skips[type.aggregation] = 0);\n\n        // Fetch the \"source\" aggregation edges\n        const types = this.edgeTypes.filter(type => type.trigger === \"source\");\n\n        if(this.active && types.length > 0) {\n            this.fetchAggregations(types);\n        }\n        else {            \n            this.provider.next(this.dataset); // avoid undefined dataset when edge trigger !== source\n        }\n    }\n\n    /**\n     * Called when a node in the network is clicked.\n     * If one edge has an \"onclick\" trigger we potentially expand that\n     * clicked node.\n     * @param node the clicked node\n     */\n    onNodeClicked(node?: Node) {\n        if(this.active && node) {\n            const types = this.edgeTypes.filter(type => type.trigger === \"onclick\" && type.nodeTypes[0] === node.type);\n            if(types.length > 0) {\n                types.forEach(type => {\n                    if(this.skips[type.aggregation+node.id] === undefined) {\n                        // We need to skip the already connected nodes\n                        const connectedNodes = this.dataset.getConnectedNodes(node.id)\n                            .filter(node => node.type === type.nodeTypes[1]);\n                        this.skips[type.aggregation+node.id] = connectedNodes.length;\n                    }\n                });\n                this.fetchAggregations(types, node);\n            }\n        }\n    }\n\n    /**\n     * Called to generate the list of actions specific to this provider.\n     * We display actions allowing to add additional data for \"source\" edges\n     * (either all the source edges at once, or each individually).\n     */\n    getProviderActions(): Action[] {\n        const actions = super.getProviderActions();\n        const types = this.edgeTypes.filter(type => type.trigger === \"source\");\n        if(types.length > 0) {\n            actions.push(new Action({\n                icon: \"fas fa-plus-circle fa-fw\",\n                title: \"msg#network.actions.fetchMoreAll\",\n                text: \"msg#network.actions.fetchMoreAllText\",\n                action: () => {\n                    this.fetchAggregations(types);\n                },\n                disabled: !this.active\n            }));\n            actions.push(new Action({\n                separator: true\n            }));\n            types.forEach(type => {\n                actions.push(new Action({\n                    icon: \"fas fa-plus-circle fa-fw\",\n                    title: this.context.intlService.formatMessage(\"msg#network.actions.fetchMoreAgg\", {agg: type.aggregation}),\n                    text: type.aggregation,\n                    action: () => {\n                        this.fetchAggregations([type]);\n                    },\n                    disabled: !this.active\n                }))\n            });\n        }\n        return actions;\n    }\n\n    /**\n     * Called to generate the list of actions displayed for a specific node\n     * when it is clicked on.\n     * We display \"expand\" actions for the edges with a \"manual\" trigger.\n     * @param node The clicked node\n     */\n    getNodeActions(node: Node): Action[] {\n        const actions = super.getNodeActions(node);\n        if(this.active) {\n            const types = this.edgeTypes.filter(type => type.trigger === \"manual\" && type.nodeTypes[0] === node.type);\n            if(types.length === 1){\n                actions.push(this.createExpandAction(types[0], node));\n            }\n            else if(types.length > 1) {\n                actions.push(new Action({\n                    icon: \"fas fa-plus-circle\",\n                    title: this.context.intlService.formatMessage(\"msg#network.actions.expandNode\", {label: node.label}),\n                    children: types.map(type => this.createExpandAction(type, node, true))\n                }));\n            }\n        }\n        return actions;\n    }\n    \n    /**\n     * Convenience method to generate an expand action for a given node\n     * and given edge type.\n     * @param type The edge type for expanding the node\n     * @param node The node we wish to expand\n     * @param withtext Whether or not the action should have text (or just an icon)\n     */\n    protected createExpandAction(type: AggregationEdgeType, node: Node, withtext?: boolean): Action {\n        const title = this.context.intlService.formatMessage(\"msg#network.actions.expandNodeWith\", {agg: type.aggregation});\n        return new Action({\n            icon: \"fas fa-plus-circle fa-fw\",\n            title: title,\n            text: withtext? title : undefined,\n            action: () => {\n                if(this.skips[type.aggregation+node.id] === undefined) {\n                    // We need to skip the already connected nodes\n                    const connectedNodes = this.dataset.getConnectedNodes(node.id)\n                        .filter(node => node.type === type.nodeTypes[1]);\n                    this.skips[type.aggregation+node.id] = connectedNodes.length;\n                }\n                this.fetchAggregations([type], node);\n            },\n        })\n    }\n\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/AggregationEdge.html":{"url":"interfaces/AggregationEdge.html","title":"interface - AggregationEdge","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  AggregationEdge\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            network/providers/aggregation-provider.ts\n        \n\n            \n                Description\n            \n            \n                Extension of the Edge interface, to store the aggregation and\naggregation items from which the edge is constructed\n\n            \n\n            \n                Extends\n            \n            \n                        Edge\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        aggregation\n                                \n                                \n                                        aggregationItem\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        aggregation\n                                    \n                                \n                                \n                                    \n                                        aggregation:     Aggregation\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Aggregation\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        aggregationItem\n                                    \n                                \n                                \n                                    \n                                        aggregationItem:     AggregationItem\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     AggregationItem\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Aggregation, AggregationItem } from '@sinequa/core/web-services';\nimport { Node, Edge, EdgeType, NetworkDataset, NetworkContext } from '../network-models';\nimport { Action } from '@sinequa/components/action';\nimport { Query, Expr } from '@sinequa/core/app-utils';\nimport { Utils } from '@sinequa/core/base';\nimport { BaseProvider } from './base-provider';\n\n/**\n * Extension of the Edge interface, to store the aggregation and\n * aggregation items from which the edge is constructed\n */\nexport interface AggregationEdge extends Edge {\n    aggregationItem: AggregationItem;\n    aggregation: Aggregation;\n}\n\n/**\n * Convenience structure for managing custom metadata types (like\n * cooccurrence entities). AggregationData is returned by the custom\n * parse() function of an AggregationEdgeType.\n */\nexport interface AggregationData {\n    values: string[]; // eg. LARRY PAGE, GOOGLE\n    displays: string[]; // eg. Larry Page, Google\n    relations?: string[]; // eg. Works At\n    directed?: boolean[]; // eg. true\n    fieldValue?: string; // A value on which to filter the data\n}\n\n/** Mode \"source\" means node are fetched and added systematically on getData() / other modes allow expanding an existing node*/\nexport type AggregationTriggerType = \"source\" | \"onclick\" | \"manual\";\n// TODO: Add support for \"oninsert\" (which might required additional complexity)\n\n/**\n * Extension of the EdgeType interface, specifying which aggregation is used\n * to generate the Edges, and additional options.\n */\nexport interface AggregationEdgeType extends EdgeType {\n    /** Name of the aggregation in the Web Service configuration */\n    aggregation: string;\n    /** If parse is provided, it is used to get the new nodes and edges. If not, the value is automatically converted into nodes, using nodeTypes[1] */\n    parse?: (item: AggregationItem, type: AggregationEdgeType) => AggregationData | undefined; // A cooccurrence aggregation might return 3 nodes and 2 edges\n    /** A parameter to define when the aggregation is fetched and nodes are added */\n    trigger: AggregationTriggerType;\n    /** Default number of items to fetch */\n    count?: number;\n    // TODO: add visibility modes ? (eg. existingNodes)\n}\n\n/**\n * Tests whether an EdgeType is an AggregationEdgeType\n * @param et an edge type\n */\nexport function isAggregationEdgeType(et: EdgeType): et is AggregationEdgeType {\n    return !!(et as AggregationEdgeType).aggregation;\n}\n\n/**\n * The Aggregation Provider generates nodes and edges from aggregations\n * fetched from the server.\n */\nexport class AggregationProvider extends BaseProvider {\n\n    /** Stores how many aggregation items have been fetched from the server for a given aggregation */\n    readonly skips: {[aggregation: string]: number} = {};\n\n    constructor(\n        public name: string,\n        protected edgeTypes: AggregationEdgeType[],\n        protected query?: Query\n    ) {\n        super(name);\n    }\n\n\n    /**\n     * Fetches the list of aggregations and updates the dataset\n     * @param types list of aggregation edge types\n     * @param sourceNode if provided, will compute the aggregation with a select to compute the aggregation for documents referencing that node\n     */\n    protected fetchAggregations(types: AggregationEdgeType[], sourceNode?: Node) {\n        \n        const query = Utils.copy(this.query || this.context.searchService.query);\n        query.action = \"aggregate\";\n        query.aggregations = {};\n        types.forEach(type => query.aggregations[type.aggregation] = {\n            skip: this.skips[type.aggregation+(sourceNode?.id || \"\")], \n            count: type.count || 10\n        });\n\n        if(sourceNode && sourceNode.type.field) {\n            query.addSelect(this.context.exprBuilder.makeExpr(sourceNode.type.field, this.getNodeValue(sourceNode)));\n        }\n\n        Object.keys(query.aggregations).forEach(aggregation => {\n            if(!this.context.appService.getCCAggregation(aggregation)) {\n                // This may not be a mistake if the aggregation belong to a different web service configuration\n                console.warn(`Aggregation '${aggregation}' does not exist in the Query web service configuration`);\n            }\n        });\n\n        this.context.searchService.getResults(query, undefined, {searchInactive: true}).subscribe(\n            results => {\n                this.updateDataset(results.aggregations, types, sourceNode);\n            }\n        );\n        \n    }\n\n    /**\n     * Fills the dataset with nodes and edges corresponding to\n     * the given aggregations data, and emits this new dataset.\n     * @param aggregations the list of aggregations to process\n     * @param types the corresponding edge types for each aggregation\n     */\n    protected updateDataset(aggregations: Aggregation[], types: AggregationEdgeType[], sourceNode?: Node) {\n\n        aggregations.forEach(aggregation => {\n            if(aggregation && aggregation.items) {\n                const type = types.find(type => Utils.eqNC(type.aggregation, aggregation.name));\n                if(type) {\n                    this.skips[type.aggregation+(sourceNode?.id || \"\")] += aggregation.items.length;\n                    aggregation.items.forEach(item => this.addAggregationNodes(item, aggregation, type, sourceNode));\n                }\n            }\n        });\n\n        this.provider.next(this.dataset);\n    }\n\n    /**\n     * Create nodes and edges for the given aggregation item and adds them\n     * to the dataset. By default (if the edge does not have a parse() function\n     * and there is no sourceNode), the aggregation is assumed to be a cross-\n     * distribution, with items formatted as \"Bill Gates/Microsoft\".\n     * @param item the aggregation item to process\n     * @param aggregation the aggregation from which the item comes from\n     * @param type the type of the edge corresponding to that aggregation\n     * @param sourceNode if provided, will assume the distribution is 1-dimensional and attach each new node to that source node\n     */\n    addAggregationNodes(item: AggregationItem, aggregation: Aggregation, type: AggregationEdgeType, sourceNode?: Node) {\n\n        let rawData: AggregationData | undefined;\n\n        if(type.parse) {\n            rawData = type.parse(item, type);\n        }\n        else {\n            // Source distributions are at least two-dimensional\n            if(!sourceNode) {\n                if(!item.display){\n                    throw new Error(`Aggregation Item '${item.value}' has no display value`);\n                }\n                // Default parsing, assuming cross-distribution format (\"Apple/Steve Jobs\")\n                const displays = item.display.split(\"/\");\n                const expr = this.context.appService.parseExpr(item.value.toString()) as Expr;\n                const values = expr.operands.map(e => e.value!);\n                if(values.length  0){\n                    const relation = rawData.relations? rawData.relations[i-1] : undefined;\n                    const directed = rawData.directed? rawData.directed[i-1] : false;\n                    data.addEdges(this.createEdge(type, lastNode!, node, rawData.fieldValue, true, {aggregation, aggregationItem: item}, item.count, directed, relation));\n                }\n                lastNode = node;\n            }\n            this.dataset.merge(data);\n        }\n    }\n\n\n    // NetworkProvider interface\n\n    /** \n     * Retrieves the aggregation data synchronously or asynchronously, and updates the dataset with it.\n     */\n    getData(context: NetworkContext) {\n        this.context = context;\n        this.dataset.clear();\n\n        // Initialize the counts\n        this.edgeTypes.forEach(type => this.skips[type.aggregation] = 0);\n\n        // Fetch the \"source\" aggregation edges\n        const types = this.edgeTypes.filter(type => type.trigger === \"source\");\n\n        if(this.active && types.length > 0) {\n            this.fetchAggregations(types);\n        }\n        else {            \n            this.provider.next(this.dataset); // avoid undefined dataset when edge trigger !== source\n        }\n    }\n\n    /**\n     * Called when a node in the network is clicked.\n     * If one edge has an \"onclick\" trigger we potentially expand that\n     * clicked node.\n     * @param node the clicked node\n     */\n    onNodeClicked(node?: Node) {\n        if(this.active && node) {\n            const types = this.edgeTypes.filter(type => type.trigger === \"onclick\" && type.nodeTypes[0] === node.type);\n            if(types.length > 0) {\n                types.forEach(type => {\n                    if(this.skips[type.aggregation+node.id] === undefined) {\n                        // We need to skip the already connected nodes\n                        const connectedNodes = this.dataset.getConnectedNodes(node.id)\n                            .filter(node => node.type === type.nodeTypes[1]);\n                        this.skips[type.aggregation+node.id] = connectedNodes.length;\n                    }\n                });\n                this.fetchAggregations(types, node);\n            }\n        }\n    }\n\n    /**\n     * Called to generate the list of actions specific to this provider.\n     * We display actions allowing to add additional data for \"source\" edges\n     * (either all the source edges at once, or each individually).\n     */\n    getProviderActions(): Action[] {\n        const actions = super.getProviderActions();\n        const types = this.edgeTypes.filter(type => type.trigger === \"source\");\n        if(types.length > 0) {\n            actions.push(new Action({\n                icon: \"fas fa-plus-circle fa-fw\",\n                title: \"msg#network.actions.fetchMoreAll\",\n                text: \"msg#network.actions.fetchMoreAllText\",\n                action: () => {\n                    this.fetchAggregations(types);\n                },\n                disabled: !this.active\n            }));\n            actions.push(new Action({\n                separator: true\n            }));\n            types.forEach(type => {\n                actions.push(new Action({\n                    icon: \"fas fa-plus-circle fa-fw\",\n                    title: this.context.intlService.formatMessage(\"msg#network.actions.fetchMoreAgg\", {agg: type.aggregation}),\n                    text: type.aggregation,\n                    action: () => {\n                        this.fetchAggregations([type]);\n                    },\n                    disabled: !this.active\n                }))\n            });\n        }\n        return actions;\n    }\n\n    /**\n     * Called to generate the list of actions displayed for a specific node\n     * when it is clicked on.\n     * We display \"expand\" actions for the edges with a \"manual\" trigger.\n     * @param node The clicked node\n     */\n    getNodeActions(node: Node): Action[] {\n        const actions = super.getNodeActions(node);\n        if(this.active) {\n            const types = this.edgeTypes.filter(type => type.trigger === \"manual\" && type.nodeTypes[0] === node.type);\n            if(types.length === 1){\n                actions.push(this.createExpandAction(types[0], node));\n            }\n            else if(types.length > 1) {\n                actions.push(new Action({\n                    icon: \"fas fa-plus-circle\",\n                    title: this.context.intlService.formatMessage(\"msg#network.actions.expandNode\", {label: node.label}),\n                    children: types.map(type => this.createExpandAction(type, node, true))\n                }));\n            }\n        }\n        return actions;\n    }\n    \n    /**\n     * Convenience method to generate an expand action for a given node\n     * and given edge type.\n     * @param type The edge type for expanding the node\n     * @param node The node we wish to expand\n     * @param withtext Whether or not the action should have text (or just an icon)\n     */\n    protected createExpandAction(type: AggregationEdgeType, node: Node, withtext?: boolean): Action {\n        const title = this.context.intlService.formatMessage(\"msg#network.actions.expandNodeWith\", {agg: type.aggregation});\n        return new Action({\n            icon: \"fas fa-plus-circle fa-fw\",\n            title: title,\n            text: withtext? title : undefined,\n            action: () => {\n                if(this.skips[type.aggregation+node.id] === undefined) {\n                    // We need to skip the already connected nodes\n                    const connectedNodes = this.dataset.getConnectedNodes(node.id)\n                        .filter(node => node.type === type.nodeTypes[1]);\n                    this.skips[type.aggregation+node.id] = connectedNodes.length;\n                }\n                this.fetchAggregations([type], node);\n            },\n        })\n    }\n\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/AggregationEdgeType.html":{"url":"interfaces/AggregationEdgeType.html","title":"interface - AggregationEdgeType","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  AggregationEdgeType\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            network/providers/aggregation-provider.ts\n        \n\n            \n                Description\n            \n            \n                Extension of the EdgeType interface, specifying which aggregation is used\nto generate the Edges, and additional options.\n\n            \n\n            \n                Extends\n            \n            \n                        EdgeType\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        aggregation\n                                \n                                \n                                            Optional\n                                        count\n                                \n                                \n                                            Optional\n                                        parse\n                                \n                                \n                                        trigger\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        aggregation\n                                    \n                                \n                                \n                                    \n                                        aggregation:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Name of the aggregation in the Web Service configuration \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        count\n                                    \n                                \n                                \n                                    \n                                        count:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Default number of items to fetch \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        parse\n                                    \n                                \n                                \n                                    \n                                        parse:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    If parse is provided, it is used to get the new nodes and edges. If not, the value is automatically converted into nodes, using nodeTypes[1] \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        trigger\n                                    \n                                \n                                \n                                    \n                                        trigger:         AggregationTriggerType\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         AggregationTriggerType\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    A parameter to define when the aggregation is fetched and nodes are added \n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { Aggregation, AggregationItem } from '@sinequa/core/web-services';\nimport { Node, Edge, EdgeType, NetworkDataset, NetworkContext } from '../network-models';\nimport { Action } from '@sinequa/components/action';\nimport { Query, Expr } from '@sinequa/core/app-utils';\nimport { Utils } from '@sinequa/core/base';\nimport { BaseProvider } from './base-provider';\n\n/**\n * Extension of the Edge interface, to store the aggregation and\n * aggregation items from which the edge is constructed\n */\nexport interface AggregationEdge extends Edge {\n    aggregationItem: AggregationItem;\n    aggregation: Aggregation;\n}\n\n/**\n * Convenience structure for managing custom metadata types (like\n * cooccurrence entities). AggregationData is returned by the custom\n * parse() function of an AggregationEdgeType.\n */\nexport interface AggregationData {\n    values: string[]; // eg. LARRY PAGE, GOOGLE\n    displays: string[]; // eg. Larry Page, Google\n    relations?: string[]; // eg. Works At\n    directed?: boolean[]; // eg. true\n    fieldValue?: string; // A value on which to filter the data\n}\n\n/** Mode \"source\" means node are fetched and added systematically on getData() / other modes allow expanding an existing node*/\nexport type AggregationTriggerType = \"source\" | \"onclick\" | \"manual\";\n// TODO: Add support for \"oninsert\" (which might required additional complexity)\n\n/**\n * Extension of the EdgeType interface, specifying which aggregation is used\n * to generate the Edges, and additional options.\n */\nexport interface AggregationEdgeType extends EdgeType {\n    /** Name of the aggregation in the Web Service configuration */\n    aggregation: string;\n    /** If parse is provided, it is used to get the new nodes and edges. If not, the value is automatically converted into nodes, using nodeTypes[1] */\n    parse?: (item: AggregationItem, type: AggregationEdgeType) => AggregationData | undefined; // A cooccurrence aggregation might return 3 nodes and 2 edges\n    /** A parameter to define when the aggregation is fetched and nodes are added */\n    trigger: AggregationTriggerType;\n    /** Default number of items to fetch */\n    count?: number;\n    // TODO: add visibility modes ? (eg. existingNodes)\n}\n\n/**\n * Tests whether an EdgeType is an AggregationEdgeType\n * @param et an edge type\n */\nexport function isAggregationEdgeType(et: EdgeType): et is AggregationEdgeType {\n    return !!(et as AggregationEdgeType).aggregation;\n}\n\n/**\n * The Aggregation Provider generates nodes and edges from aggregations\n * fetched from the server.\n */\nexport class AggregationProvider extends BaseProvider {\n\n    /** Stores how many aggregation items have been fetched from the server for a given aggregation */\n    readonly skips: {[aggregation: string]: number} = {};\n\n    constructor(\n        public name: string,\n        protected edgeTypes: AggregationEdgeType[],\n        protected query?: Query\n    ) {\n        super(name);\n    }\n\n\n    /**\n     * Fetches the list of aggregations and updates the dataset\n     * @param types list of aggregation edge types\n     * @param sourceNode if provided, will compute the aggregation with a select to compute the aggregation for documents referencing that node\n     */\n    protected fetchAggregations(types: AggregationEdgeType[], sourceNode?: Node) {\n        \n        const query = Utils.copy(this.query || this.context.searchService.query);\n        query.action = \"aggregate\";\n        query.aggregations = {};\n        types.forEach(type => query.aggregations[type.aggregation] = {\n            skip: this.skips[type.aggregation+(sourceNode?.id || \"\")], \n            count: type.count || 10\n        });\n\n        if(sourceNode && sourceNode.type.field) {\n            query.addSelect(this.context.exprBuilder.makeExpr(sourceNode.type.field, this.getNodeValue(sourceNode)));\n        }\n\n        Object.keys(query.aggregations).forEach(aggregation => {\n            if(!this.context.appService.getCCAggregation(aggregation)) {\n                // This may not be a mistake if the aggregation belong to a different web service configuration\n                console.warn(`Aggregation '${aggregation}' does not exist in the Query web service configuration`);\n            }\n        });\n\n        this.context.searchService.getResults(query, undefined, {searchInactive: true}).subscribe(\n            results => {\n                this.updateDataset(results.aggregations, types, sourceNode);\n            }\n        );\n        \n    }\n\n    /**\n     * Fills the dataset with nodes and edges corresponding to\n     * the given aggregations data, and emits this new dataset.\n     * @param aggregations the list of aggregations to process\n     * @param types the corresponding edge types for each aggregation\n     */\n    protected updateDataset(aggregations: Aggregation[], types: AggregationEdgeType[], sourceNode?: Node) {\n\n        aggregations.forEach(aggregation => {\n            if(aggregation && aggregation.items) {\n                const type = types.find(type => Utils.eqNC(type.aggregation, aggregation.name));\n                if(type) {\n                    this.skips[type.aggregation+(sourceNode?.id || \"\")] += aggregation.items.length;\n                    aggregation.items.forEach(item => this.addAggregationNodes(item, aggregation, type, sourceNode));\n                }\n            }\n        });\n\n        this.provider.next(this.dataset);\n    }\n\n    /**\n     * Create nodes and edges for the given aggregation item and adds them\n     * to the dataset. By default (if the edge does not have a parse() function\n     * and there is no sourceNode), the aggregation is assumed to be a cross-\n     * distribution, with items formatted as \"Bill Gates/Microsoft\".\n     * @param item the aggregation item to process\n     * @param aggregation the aggregation from which the item comes from\n     * @param type the type of the edge corresponding to that aggregation\n     * @param sourceNode if provided, will assume the distribution is 1-dimensional and attach each new node to that source node\n     */\n    addAggregationNodes(item: AggregationItem, aggregation: Aggregation, type: AggregationEdgeType, sourceNode?: Node) {\n\n        let rawData: AggregationData | undefined;\n\n        if(type.parse) {\n            rawData = type.parse(item, type);\n        }\n        else {\n            // Source distributions are at least two-dimensional\n            if(!sourceNode) {\n                if(!item.display){\n                    throw new Error(`Aggregation Item '${item.value}' has no display value`);\n                }\n                // Default parsing, assuming cross-distribution format (\"Apple/Steve Jobs\")\n                const displays = item.display.split(\"/\");\n                const expr = this.context.appService.parseExpr(item.value.toString()) as Expr;\n                const values = expr.operands.map(e => e.value!);\n                if(values.length  0){\n                    const relation = rawData.relations? rawData.relations[i-1] : undefined;\n                    const directed = rawData.directed? rawData.directed[i-1] : false;\n                    data.addEdges(this.createEdge(type, lastNode!, node, rawData.fieldValue, true, {aggregation, aggregationItem: item}, item.count, directed, relation));\n                }\n                lastNode = node;\n            }\n            this.dataset.merge(data);\n        }\n    }\n\n\n    // NetworkProvider interface\n\n    /** \n     * Retrieves the aggregation data synchronously or asynchronously, and updates the dataset with it.\n     */\n    getData(context: NetworkContext) {\n        this.context = context;\n        this.dataset.clear();\n\n        // Initialize the counts\n        this.edgeTypes.forEach(type => this.skips[type.aggregation] = 0);\n\n        // Fetch the \"source\" aggregation edges\n        const types = this.edgeTypes.filter(type => type.trigger === \"source\");\n\n        if(this.active && types.length > 0) {\n            this.fetchAggregations(types);\n        }\n        else {            \n            this.provider.next(this.dataset); // avoid undefined dataset when edge trigger !== source\n        }\n    }\n\n    /**\n     * Called when a node in the network is clicked.\n     * If one edge has an \"onclick\" trigger we potentially expand that\n     * clicked node.\n     * @param node the clicked node\n     */\n    onNodeClicked(node?: Node) {\n        if(this.active && node) {\n            const types = this.edgeTypes.filter(type => type.trigger === \"onclick\" && type.nodeTypes[0] === node.type);\n            if(types.length > 0) {\n                types.forEach(type => {\n                    if(this.skips[type.aggregation+node.id] === undefined) {\n                        // We need to skip the already connected nodes\n                        const connectedNodes = this.dataset.getConnectedNodes(node.id)\n                            .filter(node => node.type === type.nodeTypes[1]);\n                        this.skips[type.aggregation+node.id] = connectedNodes.length;\n                    }\n                });\n                this.fetchAggregations(types, node);\n            }\n        }\n    }\n\n    /**\n     * Called to generate the list of actions specific to this provider.\n     * We display actions allowing to add additional data for \"source\" edges\n     * (either all the source edges at once, or each individually).\n     */\n    getProviderActions(): Action[] {\n        const actions = super.getProviderActions();\n        const types = this.edgeTypes.filter(type => type.trigger === \"source\");\n        if(types.length > 0) {\n            actions.push(new Action({\n                icon: \"fas fa-plus-circle fa-fw\",\n                title: \"msg#network.actions.fetchMoreAll\",\n                text: \"msg#network.actions.fetchMoreAllText\",\n                action: () => {\n                    this.fetchAggregations(types);\n                },\n                disabled: !this.active\n            }));\n            actions.push(new Action({\n                separator: true\n            }));\n            types.forEach(type => {\n                actions.push(new Action({\n                    icon: \"fas fa-plus-circle fa-fw\",\n                    title: this.context.intlService.formatMessage(\"msg#network.actions.fetchMoreAgg\", {agg: type.aggregation}),\n                    text: type.aggregation,\n                    action: () => {\n                        this.fetchAggregations([type]);\n                    },\n                    disabled: !this.active\n                }))\n            });\n        }\n        return actions;\n    }\n\n    /**\n     * Called to generate the list of actions displayed for a specific node\n     * when it is clicked on.\n     * We display \"expand\" actions for the edges with a \"manual\" trigger.\n     * @param node The clicked node\n     */\n    getNodeActions(node: Node): Action[] {\n        const actions = super.getNodeActions(node);\n        if(this.active) {\n            const types = this.edgeTypes.filter(type => type.trigger === \"manual\" && type.nodeTypes[0] === node.type);\n            if(types.length === 1){\n                actions.push(this.createExpandAction(types[0], node));\n            }\n            else if(types.length > 1) {\n                actions.push(new Action({\n                    icon: \"fas fa-plus-circle\",\n                    title: this.context.intlService.formatMessage(\"msg#network.actions.expandNode\", {label: node.label}),\n                    children: types.map(type => this.createExpandAction(type, node, true))\n                }));\n            }\n        }\n        return actions;\n    }\n    \n    /**\n     * Convenience method to generate an expand action for a given node\n     * and given edge type.\n     * @param type The edge type for expanding the node\n     * @param node The node we wish to expand\n     * @param withtext Whether or not the action should have text (or just an icon)\n     */\n    protected createExpandAction(type: AggregationEdgeType, node: Node, withtext?: boolean): Action {\n        const title = this.context.intlService.formatMessage(\"msg#network.actions.expandNodeWith\", {agg: type.aggregation});\n        return new Action({\n            icon: \"fas fa-plus-circle fa-fw\",\n            title: title,\n            text: withtext? title : undefined,\n            action: () => {\n                if(this.skips[type.aggregation+node.id] === undefined) {\n                    // We need to skip the already connected nodes\n                    const connectedNodes = this.dataset.getConnectedNodes(node.id)\n                        .filter(node => node.type === type.nodeTypes[1]);\n                    this.skips[type.aggregation+node.id] = connectedNodes.length;\n                }\n                this.fetchAggregations([type], node);\n            },\n        })\n    }\n\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/AsyncRecordsProvider.html":{"url":"classes/AsyncRecordsProvider.html","title":"class - AsyncRecordsProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AsyncRecordsProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            network/providers/async-records-provider.ts\n        \n\n            \n                Description\n            \n            \n                An extension of RecordsProviders where the records are not provided\ndirectly, but instead fetched from the server via a given Query object.\n\n            \n\n            \n                Extends\n            \n            \n                        RecordsProvider\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                name\n                            \n                            \n                                    Public\n                                name\n                            \n                            \n                                    Public\n                                    Readonly\n                                activateAction\n                            \n                            \n                                    Public\n                                active\n                            \n                            \n                                    Public\n                                context\n                            \n                            \n                                    Public\n                                dataset\n                            \n                            \n                                    Public\n                                    Readonly\n                                EDGESEPARATOR\n                            \n                            \n                                    Public\n                                name\n                            \n                            \n                                    Public\n                                    Readonly\n                                resetAction\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getData\n                            \n                            \n                                    Public\n                                setQuery\n                            \n                            \n                                getData\n                            \n                            \n                                getNodeActions\n                            \n                            \n                                getProviderActions\n                            \n                            \n                                onDatasetsMerged\n                            \n                            \n                                onNodeClicked\n                            \n                            \n                                getData\n                            \n                            \n                                getEdgeActions\n                            \n                            \n                                getNodeActions\n                            \n                            \n                                getProvider\n                            \n                            \n                                getProviderActions\n                            \n                            \n                                onDatasetsMerged\n                            \n                            \n                                onDestroy\n                            \n                            \n                                onEdgeClicked\n                            \n                            \n                                onNodeClicked\n                            \n                            \n                                onNodesInserted\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(name: string, nodeType: NodeType, edgeTypes: StructuralEdgeType[], query: Query, hideRecordNode)\n                    \n                \n                        \n                            \n                                Defined in network/providers/async-records-provider.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        name\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        nodeType\n                                                  \n                                                        \n                                                                        NodeType\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        edgeTypes\n                                                  \n                                                        \n                                                                    StructuralEdgeType[]\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        query\n                                                  \n                                                        \n                                                                        Query\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        hideRecordNode\n                                                  \n                                                        \n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            name\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in network/providers/async-records-provider.ts:13\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            name\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : \"Documents\"\n                        \n                    \n                            \n                                \n                                    Inherited from         RecordsProvider\n\n                                \n                            \n                        \n                            \n                                    Defined in         RecordsProvider:68\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                                Readonly\n                            activateAction\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Action\n\n                        \n                    \n                            \n                                \n                                    Inherited from         BaseProvider\n\n                                \n                            \n                        \n                            \n                                    Defined in         BaseProvider:21\n\n                            \n                        \n\n                \n                    \n                        Action to turn the provider on or off \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            active\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : true\n                        \n                    \n                            \n                                \n                                    Inherited from         BaseProvider\n\n                                \n                            \n                        \n                            \n                                    Defined in         BaseProvider:16\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            context\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         NetworkContext\n\n                        \n                    \n                            \n                                \n                                    Inherited from         BaseProvider\n\n                                \n                            \n                        \n                            \n                                    Defined in         BaseProvider:25\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            dataset\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : new NetworkDataset()\n                        \n                    \n                            \n                                \n                                    Inherited from         BaseProvider\n\n                                \n                            \n                        \n                            \n                                    Defined in         BaseProvider:15\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                                Readonly\n                            EDGESEPARATOR\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : \"~~~EDGE~~~\"\n                        \n                    \n                            \n                                \n                                    Inherited from         BaseProvider\n\n                                \n                            \n                        \n                            \n                                    Defined in         BaseProvider:18\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            name\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                            \n                                \n                                    Inherited from         BaseProvider\n\n                                \n                            \n                        \n                            \n                                    Defined in         BaseProvider:28\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                                Readonly\n                            resetAction\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Action\n\n                        \n                    \n                            \n                                \n                                    Inherited from         BaseProvider\n\n                                \n                            \n                        \n                            \n                                    Defined in         BaseProvider:23\n\n                            \n                        \n\n                \n                    \n                        Action to reset the provider \n\n                    \n                \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getData\n                        \n                        \n                    \n                \n            \n            \n                \ngetData(context: NetworkContext)\n                \n            \n\n\n            \n                \n                    Defined in network/providers/async-records-provider.ts:38\n                \n            \n\n\n            \n                \n                    Updates the dataset after an asynchronous call to retrieve the records.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                                NetworkContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            setQuery\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    setQuery(query: Query)\n                \n            \n\n\n            \n                \n                    Defined in network/providers/async-records-provider.ts:28\n                \n            \n\n\n            \n                \n                    Sets a new query to asynchronous records providers.\nIt will be used on the next call to getData()\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    query\n                                    \n                                                Query\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The query object we want to use to fetch records\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getData\n                        \n                        \n                    \n                \n            \n            \n                \ngetData(context: NetworkContext)\n                \n            \n\n\n            \n                \n                    Inherited from         RecordsProvider\n\n                \n            \n            \n                \n                        Defined in         RecordsProvider:256\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                                NetworkContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getNodeActions\n                        \n                        \n                    \n                \n            \n            \n                \ngetNodeActions(node: Node)\n                \n            \n\n\n            \n                \n                    Inherited from         RecordsProvider\n\n                \n            \n            \n                \n                        Defined in         RecordsProvider:331\n\n                \n            \n\n\n            \n                \n                    Creates actions for expanding and/or collapsing a record node that was clicked.\nexpanding and collapsing will act on the visibility of the structural edges\nattached to this node.\nBoth actions might be displayed at the same time, if the node is in an intermediate\nstate.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    node\n                                    \n                                                Node\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Action[]\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getProviderActions\n                        \n                        \n                    \n                \n            \n            \n                \ngetProviderActions()\n                \n            \n\n\n            \n                \n                    Inherited from         RecordsProvider\n\n                \n            \n            \n                \n                        Defined in         RecordsProvider:319\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     Action[]\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            onDatasetsMerged\n                        \n                        \n                    \n                \n            \n            \n                \nonDatasetsMerged(dataset: NetworkDataset)\n                \n            \n\n\n            \n                \n                    Inherited from         RecordsProvider\n\n                \n            \n            \n                \n                        Defined in         RecordsProvider:269\n\n                \n            \n\n\n            \n                \n                    This function adjusts the visibility of nodes for the visibility\ntype \"existingnode\", so that nodes with only one neighbor (post-merge)\nare collapsed.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    dataset\n                                    \n                                                NetworkDataset\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The dataset resulting of the merge of all the datasets\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            onNodeClicked\n                        \n                        \n                    \n                \n            \n            \n                \nonNodeClicked(node?: Node)\n                \n            \n\n\n            \n                \n                    Inherited from         RecordsProvider\n\n                \n            \n            \n                \n                        Defined in         RecordsProvider:296\n\n                \n            \n\n\n            \n                \n                    Adjust visibility of nodes and edges, for structural edges with\ntype.trigger = onclick. These nodes will only be shown once their\nrecord node is clicked on.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    node\n                                    \n                                                Node\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        A node that was clicked\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getData\n                        \n                        \n                    \n                \n            \n            \n                \ngetData(context: NetworkContext)\n                \n            \n\n\n            \n                \n                    Inherited from         BaseProvider\n\n                \n            \n            \n                \n                        Defined in         BaseProvider:155\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                                NetworkContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getEdgeActions\n                        \n                        \n                    \n                \n            \n            \n                \ngetEdgeActions(edge: Edge)\n                \n            \n\n\n            \n                \n                    Inherited from         BaseProvider\n\n                \n            \n            \n                \n                        Defined in         BaseProvider:211\n\n                \n            \n\n\n            \n                \n                    By default the base provider includes an action to filter the search if a clicked\nedge has a \"type.field\" property and a \"fieldValue\" (alternatively, an action\nis created if the 2 adjacent nodes can be filtered, ie they both have a \"field\"\nproperty)\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    edge\n                                    \n                                                Edge\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The clicked edge\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Action[]\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getNodeActions\n                        \n                        \n                    \n                \n            \n            \n                \ngetNodeActions(node: Node)\n                \n            \n\n\n            \n                \n                    Inherited from         BaseProvider\n\n                \n            \n            \n                \n                        Defined in         BaseProvider:188\n\n                \n            \n\n\n            \n                \n                    By default the base provider includes an action to filter the search if a clicked\nnode has a \"field\" property\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    node\n                                    \n                                                Node\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The clicked node\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Action[]\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getProvider\n                        \n                        \n                    \n                \n            \n            \n                \ngetProvider()\n                \n            \n\n\n            \n                \n                    Inherited from         BaseProvider\n\n                \n            \n            \n                \n                        Defined in         BaseProvider:151\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         Subject\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getProviderActions\n                        \n                        \n                    \n                \n            \n            \n                \ngetProviderActions()\n                \n            \n\n\n            \n                \n                    Inherited from         BaseProvider\n\n                \n            \n            \n                \n                        Defined in         BaseProvider:179\n\n                \n            \n\n\n            \n                \n                    By default, the base provider includes an action to turn the provider\non or off, and an action to reset the data from this provider\n\n\n                    \n                        Returns :     Action[]\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            onDatasetsMerged\n                        \n                        \n                    \n                \n            \n            \n                \nonDatasetsMerged(dataset: NetworkDataset)\n                \n            \n\n\n            \n                \n                    Inherited from         BaseProvider\n\n                \n            \n            \n                \n                        Defined in         BaseProvider:159\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dataset\n                                    \n                                                NetworkDataset\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            onDestroy\n                        \n                        \n                    \n                \n            \n            \n                \nonDestroy()\n                \n            \n\n\n            \n                \n                    Inherited from         BaseProvider\n\n                \n            \n            \n                \n                        Defined in         BaseProvider:245\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            onEdgeClicked\n                        \n                        \n                    \n                \n            \n            \n                \nonEdgeClicked(edge: Edge | undefined)\n                \n            \n\n\n            \n                \n                    Inherited from         BaseProvider\n\n                \n            \n            \n                \n                        Defined in         BaseProvider:171\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    edge\n                                    \n                                                Edge | undefined\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            onNodeClicked\n                        \n                        \n                    \n                \n            \n            \n                \nonNodeClicked(node: Node | undefined)\n                \n            \n\n\n            \n                \n                    Inherited from         BaseProvider\n\n                \n            \n            \n                \n                        Defined in         BaseProvider:167\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    node\n                                    \n                                                Node | undefined\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            onNodesInserted\n                        \n                        \n                    \n                \n            \n            \n                \nonNodesInserted(nodes: Node[])\n                \n            \n\n\n            \n                \n                    Inherited from         BaseProvider\n\n                \n            \n            \n                \n                        Defined in         BaseProvider:163\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    nodes\n                                    \n                                                Node[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Query } from '@sinequa/core/app-utils';\nimport { NodeType, NetworkContext } from '../network-models';\nimport { RecordsProvider, StructuralEdgeType } from './records-provider';\n\n\n/**\n * An extension of RecordsProviders where the records are not provided\n * directly, but instead fetched from the server via a given Query object.\n */\nexport class AsyncRecordsProvider extends RecordsProvider {\n\n    constructor(\n        public name: string,\n        protected nodeType: NodeType,\n        protected edgeTypes: StructuralEdgeType[],\n        protected query: Query,\n        protected hideRecordNode = false\n    ){\n        super(name, nodeType, edgeTypes, [], hideRecordNode);\n    }\n\n\n    /**\n     * Sets a new query to asynchronous records providers.\n     * It will be used on the next call to getData()\n     * @param query The query object we want to use to fetch records\n     */\n    public setQuery(query: Query) {\n        this.query = query;\n    }\n\n\n    // NetworkProvider interface\n\n    /**\n     * Updates the dataset after an asynchronous call to retrieve the records.\n     */\n    getData(context: NetworkContext) {\n        this.context = context;\n        // Query mode\n        this.context.searchService.getResults(this.query, undefined, {searchInactive: true})\n            .subscribe(results => {\n                this.updateDataset(results.records);\n                this.provider.next(this.dataset);\n            });\n    }\n\n}\n    \n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/BaseProvider.html":{"url":"classes/BaseProvider.html","title":"class - BaseProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  BaseProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            network/providers/base-provider.ts\n        \n\n            \n                Description\n            \n            \n                Base implementation of the NetworkProvider interface with convenience\nmethods to create nodes and edges, and default features which should apply\nto all providers.\n\n            \n\n\n            \n                Implements\n            \n            \n                            NetworkProvider\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Readonly\n                                activateAction\n                            \n                            \n                                    Public\n                                active\n                            \n                            \n                                    Public\n                                context\n                            \n                            \n                                    Public\n                                dataset\n                            \n                            \n                                    Public\n                                    Readonly\n                                EDGESEPARATOR\n                            \n                            \n                                    Public\n                                name\n                            \n                            \n                                    Public\n                                    Readonly\n                                resetAction\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getData\n                            \n                            \n                                getEdgeActions\n                            \n                            \n                                getNodeActions\n                            \n                            \n                                getProvider\n                            \n                            \n                                getProviderActions\n                            \n                            \n                                onDatasetsMerged\n                            \n                            \n                                onDestroy\n                            \n                            \n                                onEdgeClicked\n                            \n                            \n                                onNodeClicked\n                            \n                            \n                                onNodesInserted\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(name: string)\n                    \n                \n                        \n                            \n                                Defined in network/providers/base-provider.ts:25\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        name\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                                Readonly\n                            activateAction\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Action\n\n                        \n                    \n                        \n                            \n                                    Defined in network/providers/base-provider.ts:21\n                            \n                        \n\n                \n                    \n                        Action to turn the provider on or off \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            active\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : true\n                        \n                    \n                        \n                            \n                                    Defined in network/providers/base-provider.ts:16\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            context\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         NetworkContext\n\n                        \n                    \n                        \n                            \n                                    Defined in network/providers/base-provider.ts:25\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            dataset\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : new NetworkDataset()\n                        \n                    \n                        \n                            \n                                    Defined in network/providers/base-provider.ts:15\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                                Readonly\n                            EDGESEPARATOR\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : \"~~~EDGE~~~\"\n                        \n                    \n                        \n                            \n                                    Defined in network/providers/base-provider.ts:18\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            name\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in network/providers/base-provider.ts:28\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                                Readonly\n                            resetAction\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Action\n\n                        \n                    \n                        \n                            \n                                    Defined in network/providers/base-provider.ts:23\n                            \n                        \n\n                \n                    \n                        Action to reset the provider \n\n                    \n                \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getData\n                        \n                        \n                    \n                \n            \n            \n                \ngetData(context: NetworkContext)\n                \n            \n\n\n            \n                \n                    Defined in network/providers/base-provider.ts:155\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                                NetworkContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getEdgeActions\n                        \n                        \n                    \n                \n            \n            \n                \ngetEdgeActions(edge: Edge)\n                \n            \n\n\n            \n                \n                    Defined in network/providers/base-provider.ts:211\n                \n            \n\n\n            \n                \n                    By default the base provider includes an action to filter the search if a clicked\nedge has a \"type.field\" property and a \"fieldValue\" (alternatively, an action\nis created if the 2 adjacent nodes can be filtered, ie they both have a \"field\"\nproperty)\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    edge\n                                    \n                                                Edge\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The clicked edge\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Action[]\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getNodeActions\n                        \n                        \n                    \n                \n            \n            \n                \ngetNodeActions(node: Node)\n                \n            \n\n\n            \n                \n                    Defined in network/providers/base-provider.ts:188\n                \n            \n\n\n            \n                \n                    By default the base provider includes an action to filter the search if a clicked\nnode has a \"field\" property\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    node\n                                    \n                                                Node\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The clicked node\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Action[]\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getProvider\n                        \n                        \n                    \n                \n            \n            \n                \ngetProvider()\n                \n            \n\n\n            \n                \n                    Defined in network/providers/base-provider.ts:151\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         Subject\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getProviderActions\n                        \n                        \n                    \n                \n            \n            \n                \ngetProviderActions()\n                \n            \n\n\n            \n                \n                    Defined in network/providers/base-provider.ts:179\n                \n            \n\n\n            \n                \n                    By default, the base provider includes an action to turn the provider\non or off, and an action to reset the data from this provider\n\n\n                    \n                        Returns :     Action[]\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            onDatasetsMerged\n                        \n                        \n                    \n                \n            \n            \n                \nonDatasetsMerged(dataset: NetworkDataset)\n                \n            \n\n\n            \n                \n                    Defined in network/providers/base-provider.ts:159\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dataset\n                                    \n                                                NetworkDataset\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            onDestroy\n                        \n                        \n                    \n                \n            \n            \n                \nonDestroy()\n                \n            \n\n\n            \n                \n                    Defined in network/providers/base-provider.ts:245\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            onEdgeClicked\n                        \n                        \n                    \n                \n            \n            \n                \nonEdgeClicked(edge: Edge | undefined)\n                \n            \n\n\n            \n                \n                    Defined in network/providers/base-provider.ts:171\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    edge\n                                    \n                                                Edge | undefined\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            onNodeClicked\n                        \n                        \n                    \n                \n            \n            \n                \nonNodeClicked(node: Node | undefined)\n                \n            \n\n\n            \n                \n                    Defined in network/providers/base-provider.ts:167\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    node\n                                    \n                                                Node | undefined\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            onNodesInserted\n                        \n                        \n                    \n                \n            \n            \n                \nonNodesInserted(nodes: Node[])\n                \n            \n\n\n            \n                \n                    Defined in network/providers/base-provider.ts:163\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    nodes\n                                    \n                                                Node[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Utils } from '@sinequa/core/base';\nimport { Node, Edge, NodeType, EdgeType, NetworkProvider, NetworkDataset, NetworkContext} from '../network-models';\nimport { Subject } from 'rxjs';\nimport { Action } from '@sinequa/components/action';\n\n\n/**\n * Base implementation of the NetworkProvider interface with convenience\n * methods to create nodes and edges, and default features which should apply\n * to all providers.\n */\nexport class BaseProvider implements NetworkProvider {\n\n    protected readonly provider = new Subject();\n    public dataset = new NetworkDataset();\n    public active = true;\n\n    public readonly EDGESEPARATOR = \"~~~EDGE~~~\";\n\n    /** Action to turn the provider on or off */\n    public readonly activateAction: Action;\n    /** Action to reset the provider */\n    public readonly resetAction: Action;\n\n    public context: NetworkContext;\n\n    constructor(\n        public name: string\n    ) {\n        this.activateAction = new Action({\n            icon: this.active? \"fas fa-toggle-on fa-fw\" : \"fas fa-toggle-off fa-fw\",\n            text: this.active? \"msg#network.actions.active\" : \"msg#network.actions.inactive\",\n            title: \"msg#network.actions.toggle\",\n            action: (action: Action) => {\n                this.active = !this.active\n                action.icon = this.active? \"fas fa-toggle-on fa-fw\" : \"fas fa-toggle-off fa-fw\";\n                action.text = this.active? \"msg#network.actions.active\" : \"msg#network.actions.inactive\";\n                this.getData(this.context);\n            }\n        });\n        this.resetAction = new Action({\n            icon: \"fas fa-trash-alt fa-fw\",\n            text: \"msg#network.actions.reset\",\n            title: \"msg#network.actions.resetTitle\",\n            action: () => {\n                this.dataset.clear();\n                this.getData(this.context);\n            }\n        });\n    }\n\n    /** Returns a standard ID for an edge between two given nodes */\n    protected getEdgeId(node1: Node, node2: Node): string {\n        return node1.id + this.EDGESEPARATOR + node2.id;\n    }\n    \n    /** Returns a standard ID for a node with a given type and \"value\" */\n    protected getNodeId(type: NodeType, value: string): string {\n        return `${type.name}:${value}`;\n    }\n\n    /** Retrieves the \"value\" of the node from its ID */\n    protected getNodeValue(node: Node): string {\n        return node.id.substr(node.type.name.length+1);\n    }\n\n    /**\n     * Creates a new Node object\n     * @param type The NodeType of the node\n     * @param value The \"value\" of the node (eg. \"BILL GATES\")\n     * @param label (default: display = value) The \"display value\" of the node (eg. \"Bill Gates\")\n     * @param visible (default: true) Whether the node should be visible or not\n     * @param customProps (default: {}) Custom properties to add to the node object\n     * @param count (default: 1) A \"count\" property that can reflect the \"size\" or \"importance\" of the node in the network (note that the count property accumulates when nodes are merged)\n     */\n    protected createNode(type: NodeType, value: string, label?: string, visible = true, customProps = {}, count = 1): Node {\n        // Apply formatter if any\n        if(type.field) {\n            const col = this.context.appService.getColumn(type.field);\n            if(col?.formatter) {\n                label = this.context.appService.formatService.formatFieldValue({value, display: label}, col);\n            }\n        }\n        // Create node\n        const node: Node = {\n            id: this.getNodeId(type, value),\n            label: label || value,\n            type,\n            provider: this,\n            visible,\n            count,\n            context: this.context\n        }\n        Utils.extend(node, customProps);\n        let options;\n        if(typeof type.nodeOptions === \"function\") {\n            options = type.nodeOptions(node, type);\n        }\n        else {\n            options = type.nodeOptions;\n        }\n        return Utils.extend(node, options);\n    }\n    \n    /**\n     * Creates a new Edge object\n     * @param type The EdgeType of that Edge\n     * @param fromNode The \"from\" Node object to which this edge is attached\n     * @param toNode The \"to\" Node object to which this edge is attached\n     * @param fieldValue (default: undefined) An optional value, which, if provided, allows to filter the search with a select (\"type.field = fieldValue\")\n     * @param visible (default: true) Whether the edge should be visible or not\n     * @param customProps (default: {}) Custom properties to add to this edge\n     * @param count (default: 1) A \"count\" property that can reflect the \"size\" or \"importance\" of the edge in the network (note that the count property accumulates when edges are merged)\n     * @param directed (default: false) Whether the edge is directed or undirected. If true, an arrow is drawn on the edge.\n     * @param relation (default: undefined) If provided, the \"relation\" is a label displayed in the middle of the edge\n     */\n    protected createEdge(type: EdgeType, fromNode: Node, toNode: Node, fieldValue: string | undefined = undefined, visible = true, customProps = {}, count = 1, directed = false, relation?: string): Edge {\n        const edge: Edge = {\n            id: this.getEdgeId(fromNode, toNode),\n            from: fromNode.id,\n            to: toNode.id,\n            fieldValue,\n            type,\n            visible,\n            count,\n            provider: this,\n            context: this.context\n        }\n        Utils.extend(edge, customProps);\n        if(directed) {\n            edge[\"arrows\"] = {middle: {scaleFactor: 0.3, enabled: true}};\n        }\n        if(relation) {\n            edge[\"label\"] = relation;\n            edge[\"labels\"] = [relation];\n            edge[\"font\"] = {size: 5, color: \"#808080\"};            \n        }\n        let options: {[key: string]: any};\n        if(typeof type.edgeOptions === \"function\") {\n            options = type.edgeOptions([fromNode, toNode], edge, type);\n        }\n        else {\n            options = type.edgeOptions;\n        }\n        return Utils.extend(edge, options);\n    }\n    \n\n    // Implementation of the NetworkProvider interface\n\n    getProvider(): Subject {\n        return this.provider;\n    }\n\n    getData(context: NetworkContext) {\n        this.context = context;\n    }\n\n    onDatasetsMerged(dataset: NetworkDataset) {\n        \n    }\n\n    onNodesInserted(nodes: Node[]) {\n        \n    }\n    \n    onNodeClicked(node: Node | undefined) {\n        \n    }\n\n    onEdgeClicked(edge: Edge | undefined) {\n        \n    }\n\n    /**\n     * By default, the base provider includes an action to turn the provider\n     * on or off, and an action to reset the data from this provider\n     */\n    getProviderActions(): Action[] {\n        return [this.activateAction, this.resetAction];\n    }\n\n    /**\n     * By default the base provider includes an action to filter the search if a clicked\n     * node has a \"field\" property\n     * @param node The clicked node\n     */\n    getNodeActions(node: Node): Action[] {\n        const actions: Action[] = []\n        if(this.active && node.provider === this && node.type.field) {\n            actions.push(new Action({\n                icon: \"fas fa-filter\",\n                title: this.context.intlService.formatMessage(\"msg#network.actions.filterSearch\", {label: node.label}),\n                action: () => {\n                    const expr = this.context.exprBuilder.makeExpr(node.type.field!, this.getNodeValue(node), node.label);\n                    node.context.searchService.query.addSelect(expr, node.context.name);\n                    node.context.searchService.search();\n                }\n            }));\n        }\n        return actions;\n    }\n\n    /**\n     * By default the base provider includes an action to filter the search if a clicked\n     * edge has a \"type.field\" property and a \"fieldValue\" (alternatively, an action\n     * is created if the 2 adjacent nodes can be filtered, ie they both have a \"field\"\n     * property)\n     * @param edge The clicked edge\n     */\n    getEdgeActions(edge: Edge): Action[] {\n        const actions: Action[] = [];\n        const nodeFrom = edge.context.nodes.get(edge.from);\n        const nodeTo = edge.context.nodes.get(edge.to);\n        if(this.active && edge.provider === this) {\n            if(edge.type.field && edge.fieldValue) {\n                actions.push(new Action({\n                    icon: \"fas fa-filter\",\n                    title: this.context.intlService.formatMessage(\"msg#network.actions.filterSearch\", {label: edge.fieldValue}),\n                    action: () => {\n                        const expr = this.context.exprBuilder.makeExpr(edge.type.field!, edge.fieldValue!);\n                        edge.context.searchService.query.addSelect(expr, edge.context.name);\n                        edge.context.searchService.search();\n                    }\n                }));\n            }\n            else if(nodeFrom && nodeTo && nodeFrom.type.field && nodeTo.type.field) {\n                actions.push(new Action({\n                    icon: \"fas fa-filter\",\n                    title: this.context.intlService.formatMessage(\"msg#network.actions.filterSearch2\", {label1: nodeFrom.label, label2: nodeTo.label}),\n                    action: () => {\n                        const exprFrom = this.context.exprBuilder.makeExpr(nodeFrom.type.field!, this.getNodeValue(nodeFrom), nodeFrom.label);\n                        const exprTo = this.context.exprBuilder.makeExpr(nodeTo.type.field!, this.getNodeValue(nodeTo), nodeTo.label);\n                        const expr = this.context.exprBuilder.concatAndExpr([exprFrom, exprTo]);\n                        edge.context.searchService.query.addSelect(expr, edge.context.name);\n                        edge.context.searchService.search();\n                    }\n                }));\n            }\n            \n        }\n        return actions;\n    }\n\n    onDestroy() {\n        \n    }\n\n}\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/BsEdgeInfoCard.html":{"url":"components/BsEdgeInfoCard.html","title":"component - BsEdgeInfoCard","body":"\n                   \n\n\n\n\n\n  Components\n  BsEdgeInfoCard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    network/edge-info-card.component.ts\n\n\n\n\n    \n        Implements\n    \n    \n                    OnChanges\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                sq-edge-info-card\n            \n\n\n            \n                styles\n                \n.card {\n    top: 5px;\n    left: 0;\n    right: 0;\n    width: 80%;\n}\n.circular-image {\n    width: 1.5em;\n    height: 1.5em;\n    border-radius: 50%;\n    object-fit: cover;\n}\n    \n            \n\n\n            \n                templateUrl\n                edge-info-card.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                closed\n                            \n                            \n                                expanded\n                            \n                            \n                                fromNode\n                            \n                            \n                                toNode\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                focusNode\n                            \n                            \n                                ngOnChanges\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                edge\n                            \n                        \n                    \n                \n\n\n\n\n        \n    \n\n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        edge\n                    \n                \n                \n                    \n                        Type :         Edge\n\n                    \n                \n                        \n                            \n                                    Defined in network/edge-info-card.component.ts:24\n                            \n                        \n            \n        \n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            focusNode\n                        \n                        \n                    \n                \n            \n            \n                \nfocusNode(node: Node)\n                \n            \n\n\n            \n                \n                    Defined in network/edge-info-card.component.ts:40\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    node\n                                    \n                                                Node\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            ngOnChanges\n                        \n                        \n                    \n                \n            \n            \n                \nngOnChanges()\n                \n            \n\n\n            \n                \n                    Defined in network/edge-info-card.component.ts:32\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n    \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            closed\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                        \n                            \n                                    Defined in network/edge-info-card.component.ts:26\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            expanded\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                        \n                            \n                                    Defined in network/edge-info-card.component.ts:27\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            fromNode\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Node\n\n                        \n                    \n                        \n                            \n                                    Defined in network/edge-info-card.component.ts:29\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            toNode\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Node\n\n                        \n                    \n                        \n                            \n                                    Defined in network/edge-info-card.component.ts:30\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n    \n        import { Component, Input, OnChanges } from \"@angular/core\";\nimport { Node, Edge } from './network-models';\n\n\n@Component({\n    selector: \"sq-edge-info-card\",\n    templateUrl: \"edge-info-card.component.html\",\n    styles: [`\n.card {\n    top: 5px;\n    left: 0;\n    right: 0;\n    width: 80%;\n}\n.circular-image {\n    width: 1.5em;\n    height: 1.5em;\n    border-radius: 50%;\n    object-fit: cover;\n}\n    `]\n})\nexport class BsEdgeInfoCard implements OnChanges {\n    @Input() edge: Edge;\n\n    closed: boolean;\n    expanded: boolean;\n\n    fromNode: Node;\n    toNode: Node;\n\n    ngOnChanges() {\n        this.closed = false;\n        this.expanded = false;\n\n        this.fromNode = this.edge.context.nodes.get(this.edge.from) as Node;\n        this.toNode = this.edge.context.nodes.get(this.edge.to) as Node;\n    }\n\n    focusNode(node: Node) {\n        // Hack to gain access to the network instance (networkService does not have the focus() method)\n        const networkInstance = node.context.networkService['networks'][node.context.name];\n        networkInstance.focus(node.id, {animation: true}); // Move the view to this node with animation\n        networkInstance.selectNodes([node.id], true); // Warning: does not trigger events...\n        node.context.select(node, undefined); // Select the node to update info cards, actions\n        return false;\n    }\n}\n    \n\n    \n        \n    \n        \n            \n            -\n            \n\n            \n                \n            \n            \n                \n            \n        \n        \n            \n                {{ 'msg#network.infocards.count' | sqMessage }}:  {{edge.count}}\n                {{ 'msg#network.infocards.aggregation' | sqMessage }}:  {{edge['aggregation'].name}}\n                {{ 'msg#network.infocards.record' | sqMessage }}:  {{edge['record']['title']}}\n            \n        \n    \n\n\n\n    \n    {{node['icon']['code']}}\n    {{node.label}}\n     0\" class=\"mr-2 text-muted\" title=\"{{ 'msg#network.infocards.count' | sqMessage }}\">({{node.count}})\n\n    \n\n    \n            \n.card {\n    top: 5px;\n    left: 0;\n    right: 0;\n    width: 80%;\n}\n.circular-image {\n    width: 1.5em;\n    height: 1.5em;\n    border-radius: 50%;\n    object-fit: cover;\n}\n    \n\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '                                    -                                                                                                                                        {{ \\'msg#network.infocards.count\\' | sqMessage }}:  {{edge.count}}                {{ \\'msg#network.infocards.aggregation\\' | sqMessage }}:  {{edge[\\'aggregation\\'].name}}                {{ \\'msg#network.infocards.record\\' | sqMessage }}:  {{edge[\\'record\\'][\\'title\\']}}                                {{node[\\'icon\\'][\\'code\\']}}    {{node.label}}     0\" class=\"mr-2 text-muted\" title=\"{{ \\'msg#network.infocards.count\\' | sqMessage }}\">({{node.count}})'\n    var COMPONENTS = [{'name': 'BsEdgeInfoCard', 'selector': 'sq-edge-info-card'},{'name': 'BsFacetHeatmapComponent', 'selector': 'sq-facet-heatmap'},{'name': 'BsFacetTimelineComponent', 'selector': 'sq-facet-timeline'},{'name': 'BsHeatmapComponent', 'selector': 'sq-heatmap'},{'name': 'BsNodeInfoCard', 'selector': 'sq-node-info-card'},{'name': 'BsResultsHeatmapView', 'selector': 'sq-results-heatmap-view'},{'name': 'BsTimelineComponent', 'selector': 'sq-timeline'},{'name': 'BsTooltipComponent', 'selector': 'sq-tooltip'},{'name': 'FacetNgxChart', 'selector': 'sq-facet-ngx-chart'},{'name': 'FusionChart', 'selector': 'sq-fusion-chart'},{'name': 'MapComponent', 'selector': 'sq-googlemaps'},{'name': 'MoneyCloudComponent', 'selector': 'sq-money-cloud'},{'name': 'MoneyTimelineComponent', 'selector': 'sq-money-timeline'},{'name': 'NetworkComponent', 'selector': 'sq-network'},{'name': 'NgxChart', 'selector': 'sq-ngx-chart'},{'name': 'ResultTimeline', 'selector': 'sq-result-timeline'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'BsEdgeInfoCard'};\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/BsHeatmapComponent.html":{"url":"components/BsHeatmapComponent.html","title":"component - BsHeatmapComponent","body":"\n                   \n\n\n\n\n\n  Components\n  BsHeatmapComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    heatmap/bootstrap/heatmap.component.ts\n\n\n\n\n    \n        Implements\n    \n    \n                    OnChanges\n                    AfterViewInit\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                sq-heatmap\n            \n\n            \n                styleUrls\n                ./heatmap.component.scss\n            \n\n\n\n            \n                templateUrl\n                ./heatmap.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                color\n                            \n                            \n                                dataFiltered\n                            \n                            \n                                gx\n                            \n                            \n                                gy\n                            \n                            \n                                originalCount\n                            \n                            \n                                    Optional\n                                tooltipItem\n                            \n                            \n                                tooltipLeft\n                            \n                            \n                                tooltipOrientation\n                            \n                            \n                                tooltipRight\n                            \n                            \n                                tooltipTop\n                            \n                            \n                                viewInit\n                            \n                            \n                                wrap\n                            \n                            \n                                x\n                            \n                            \n                                xAxis\n                            \n                            \n                                y\n                            \n                            \n                                yAxis\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                buildChart\n                            \n                            \n                                getLegend\n                            \n                            \n                                ngAfterViewInit\n                            \n                            \n                                ngOnChanges\n                            \n                            \n                                onAxisClicked\n                            \n                            \n                                onItemClicked\n                            \n                            \n                                onMouseOver\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                axisClickable\n                            \n                            \n                                buckets\n                            \n                            \n                                colorScheme\n                            \n                            \n                                data\n                            \n                            \n                                height\n                            \n                            \n                                itemsClickable\n                            \n                            \n                                margin\n                            \n                            \n                                maxX\n                            \n                            \n                                maxY\n                            \n                            \n                                theme\n                            \n                            \n                                transition\n                            \n                            \n                                width\n                            \n                        \n                    \n                \n\n                \n                    \n                        Outputs\n                    \n                \n                \n                    \n                        \n                            \n                                axisClicked\n                            \n                            \n                                itemClicked\n                            \n                        \n                    \n                \n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(el: ElementRef)\n                    \n                \n                        \n                            \n                                Defined in heatmap/bootstrap/heatmap.component.ts:69\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        el\n                                                  \n                                                        \n                                                                        ElementRef\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        axisClickable\n                    \n                \n                \n                    \n                        Default value : true\n                    \n                \n                        \n                            \n                                    Defined in heatmap/bootstrap/heatmap.component.ts:33\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        buckets\n                    \n                \n                \n                    \n                        Default value : 9\n                    \n                \n                        \n                            \n                                    Defined in heatmap/bootstrap/heatmap.component.ts:36\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        colorScheme\n                    \n                \n                \n                    \n                        Default value : \"schemeBlues\"\n                    \n                \n                        \n                            \n                                    Defined in heatmap/bootstrap/heatmap.component.ts:37\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        data\n                    \n                \n                \n                    \n                        Type :         HeatmapItem[]\n\n                    \n                \n                        \n                            \n                                    Defined in heatmap/bootstrap/heatmap.component.ts:23\n                            \n                        \n                \n                    \n                        Raw data to display (will be filtered in function of maxX and maxY parameters)\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        height\n                    \n                \n                \n                    \n                        Default value : 600\n                    \n                \n                        \n                            \n                                    Defined in heatmap/bootstrap/heatmap.component.ts:26\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        itemsClickable\n                    \n                \n                \n                    \n                        Default value : true\n                    \n                \n                        \n                            \n                                    Defined in heatmap/bootstrap/heatmap.component.ts:32\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        margin\n                    \n                \n                \n                    \n                        Default value : {top: 100, bottom: 20, left: 100, right: 40}\n                    \n                \n                        \n                            \n                                    Defined in heatmap/bootstrap/heatmap.component.ts:28\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        maxX\n                    \n                \n                \n                    \n                        Default value : 20\n                    \n                \n                        \n                            \n                                    Defined in heatmap/bootstrap/heatmap.component.ts:38\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        maxY\n                    \n                \n                \n                    \n                        Default value : 20\n                    \n                \n                        \n                            \n                                    Defined in heatmap/bootstrap/heatmap.component.ts:39\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        theme\n                    \n                \n                \n                    \n                        Type :     \"light\" | \"dark\"\n\n                    \n                \n                \n                    \n                        Default value : \"light\"\n                    \n                \n                        \n                            \n                                    Defined in heatmap/bootstrap/heatmap.component.ts:40\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        transition\n                    \n                \n                \n                    \n                        Default value : 1000\n                    \n                \n                        \n                            \n                                    Defined in heatmap/bootstrap/heatmap.component.ts:29\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        width\n                    \n                \n                \n                    \n                        Default value : 600\n                    \n                \n                        \n                            \n                                    Defined in heatmap/bootstrap/heatmap.component.ts:27\n                            \n                        \n            \n        \n\n    \n    Outputs\n        \n            \n                \n                    \n                        \n                        axisClicked\n                    \n                \n                \n                    \n                        Type :         EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in heatmap/bootstrap/heatmap.component.ts:44\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        itemClicked\n                    \n                \n                \n                    \n                        Type :         EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in heatmap/bootstrap/heatmap.component.ts:43\n                            \n                        \n            \n        \n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            buildChart\n                        \n                        \n                    \n                \n            \n            \n                \nbuildChart(update?: boolean)\n                \n            \n\n\n            \n                \n                    Defined in heatmap/bootstrap/heatmap.component.ts:123\n                \n            \n\n\n            \n                \n                    buildChart() actually only builds the axes of the chart, since the\nrest is build automatically with Angular syntax in the template.\nWe build axis programmatically (with D3 selects) to benefit from the\nD3 abstractions and transitions.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    update\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getLegend\n                        \n                        \n                    \n                \n            \n            \n                \ngetLegend()\n                \n            \n\n\n            \n                \n                    Defined in heatmap/bootstrap/heatmap.component.ts:209\n                \n            \n\n\n            \n                \n                    Builds the list of legend items\n\n\n                    \n                        Returns :     {}\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            ngAfterViewInit\n                        \n                        \n                    \n                \n            \n            \n                \nngAfterViewInit()\n                \n            \n\n\n            \n                \n                    Defined in heatmap/bootstrap/heatmap.component.ts:108\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            ngOnChanges\n                        \n                        \n                    \n                \n            \n            \n                \nngOnChanges()\n                \n            \n\n\n            \n                \n                    Defined in heatmap/bootstrap/heatmap.component.ts:78\n                \n            \n\n\n            \n                \n                    ngOnChanges is used to respond to changes in the data (or chart parameter)\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            onAxisClicked\n                        \n                        \n                    \n                \n            \n            \n                \nonAxisClicked(value: string, axis: \"x\" | \"y\")\n                \n            \n\n\n            \n                \n                    Defined in heatmap/bootstrap/heatmap.component.ts:200\n                \n            \n\n\n            \n                \n                    Called when the user clicks on an axis item\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    axis\n                                    \n                                            \"x\" | \"y\"\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            onItemClicked\n                        \n                        \n                    \n                \n            \n            \n                \nonItemClicked(item: HeatmapItem)\n                \n            \n\n\n            \n                \n                    Defined in heatmap/bootstrap/heatmap.component.ts:189\n                \n            \n\n\n            \n                \n                    Called when the user clicks on a heatmap tile\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    item\n                                    \n                                                HeatmapItem\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            onMouseOver\n                        \n                        \n                    \n                \n            \n            \n                \nonMouseOver(item: HeatmapItem, event: MouseEvent)\n                \n            \n\n\n            \n                \n                    Defined in heatmap/bootstrap/heatmap.component.ts:160\n                \n            \n\n\n            \n                \n                    Called when the user hovers the mouse over a heatmap tile\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    item\n                                    \n                                                HeatmapItem\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    event\n                                    \n                                            MouseEvent\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n    \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            color\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     d3.ScaleQuantile\n\n                        \n                    \n                        \n                            \n                                    Defined in heatmap/bootstrap/heatmap.component.ts:49\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            dataFiltered\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         HeatmapItem[]\n\n                        \n                    \n                    \n                        \n                            Default value : []\n                        \n                    \n                        \n                            \n                                    Defined in heatmap/bootstrap/heatmap.component.ts:58\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            gx\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         ElementRef\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ViewChild('xAxis')\n                            \n                        \n                    \n                        \n                            \n                                    Defined in heatmap/bootstrap/heatmap.component.ts:52\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            gy\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         ElementRef\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ViewChild('yAxis')\n                            \n                        \n                    \n                        \n                            \n                                    Defined in heatmap/bootstrap/heatmap.component.ts:53\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            originalCount\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                        \n                            \n                                    Defined in heatmap/bootstrap/heatmap.component.ts:69\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            tooltipItem\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         HeatmapItem\n\n                        \n                    \n                        \n                            \n                                    Defined in heatmap/bootstrap/heatmap.component.ts:61\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            tooltipLeft\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                        \n                            \n                                    Defined in heatmap/bootstrap/heatmap.component.ts:65\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            tooltipOrientation\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     \"left\" | \"right\"\n\n                        \n                    \n                        \n                            \n                                    Defined in heatmap/bootstrap/heatmap.component.ts:62\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            tooltipRight\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                        \n                            \n                                    Defined in heatmap/bootstrap/heatmap.component.ts:64\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            tooltipTop\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                        \n                            \n                                    Defined in heatmap/bootstrap/heatmap.component.ts:63\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            viewInit\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                        \n                            \n                                    Defined in heatmap/bootstrap/heatmap.component.ts:68\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            wrap\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : () => {...}\n                        \n                    \n                        \n                            \n                                    Defined in heatmap/bootstrap/heatmap.component.ts:230\n                            \n                        \n\n                \n                    \n                        Truncates the axis strings to fit inside 90px width\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            x\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     d3.ScaleBand\n\n                        \n                    \n                        \n                            \n                                    Defined in heatmap/bootstrap/heatmap.component.ts:47\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            xAxis\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     d3.Selection\n\n                        \n                    \n                        \n                            \n                                    Defined in heatmap/bootstrap/heatmap.component.ts:54\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            y\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     d3.ScaleBand\n\n                        \n                    \n                        \n                            \n                                    Defined in heatmap/bootstrap/heatmap.component.ts:48\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            yAxis\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     d3.Selection\n\n                        \n                    \n                        \n                            \n                                    Defined in heatmap/bootstrap/heatmap.component.ts:55\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n    \n        import { Component, ElementRef, Output, EventEmitter, Input, ViewChild, OnChanges, AfterViewInit } from '@angular/core';\n\nimport * as d3 from 'd3';\n\nexport interface HeatmapItem {\n    x: string;\n    y: string;\n    count: number;\n    value: string;\n    display: string;\n    selected?: boolean;\n}\n\n@Component({\n    selector: \"sq-heatmap\",\n    templateUrl: \"./heatmap.component.html\",\n    styleUrls: ['./heatmap.component.scss']\n})\nexport class BsHeatmapComponent implements OnChanges, AfterViewInit {\n    /**\n     * Raw data to display (will be filtered in function of maxX and maxY parameters)\n     */\n    @Input() data: HeatmapItem[];\n\n    // Graphical parameters\n    @Input() height = 600;\n    @Input() width = 600;\n    @Input() margin = {top: 100, bottom: 20, left: 100, right: 40};\n    @Input() transition = 1000; // Transition time in ms (0 to avoid transitions)\n\n    // Interaction parameters\n    @Input() itemsClickable = true;\n    @Input() axisClickable = true;\n\n    // Axis/Scales parameters\n    @Input() buckets = 9; // Color buckets\n    @Input() colorScheme = \"schemeBlues\"; // Color scheme from D3\n    @Input() maxX = 20; // Max items on X\n    @Input() maxY = 20; // Max items on Y\n    @Input() theme: \"light\" | \"dark\" = \"light\";\n    \n    // Events from user interactions\n    @Output() itemClicked = new EventEmitter();\n    @Output() axisClicked = new EventEmitter();\n\n    // D3 Scales\n    x: d3.ScaleBand;\n    y: d3.ScaleBand;\n    color: d3.ScaleQuantile;\n\n    // Axes\n    @ViewChild(\"xAxis\") gx: ElementRef;\n    @ViewChild(\"yAxis\") gy: ElementRef;\n    xAxis: d3.Selection;\n    yAxis: d3.Selection;\n    \n    // Data actually displayed\n    dataFiltered: HeatmapItem[] = [];\n\n    // Tooltip    \n    tooltipItem?: HeatmapItem;\n    tooltipOrientation: \"left\" | \"right\";\n    tooltipTop: number;\n    tooltipRight: number;\n    tooltipLeft: number;\n\n    // Misc\n    viewInit: boolean;\n    originalCount: number;\n\n    constructor(\n        private el: ElementRef\n    ){}\n\n    /**\n     * ngOnChanges is used to respond to changes in the data (or chart parameter)\n     */\n    ngOnChanges() {\n\n        this.data = this.data || [];\n\n        // Pre-process data\n        const xLabels = Array.from(new Set(this.data.map(value => value.x))).slice(0, this.maxX);\n        const yLabels = Array.from(new Set(this.data.map(value => value.y))).slice(0, this.maxY);\n        this.dataFiltered = this.data.filter(value => xLabels.includes(value.x) && yLabels.includes(value.y));\n\n        // Create scales\n        this.x = d3.scaleBand()\n            .domain(xLabels)\n            .range([0, this.width-this.margin.left-this.margin.right]);\n\n        this.y = d3.scaleBand()\n            .domain(yLabels)\n            .range([0, this.height-this.margin.top-this.margin.bottom]);\n\n        this.color = d3.scaleQuantile()\n            .domain(this.dataFiltered.map(item => item.count))\n            .range(d3[this.colorScheme][this.buckets]);\n\n        // Note: ngOnChanges is always called once, before ngAfterViewInit\n        if(this.viewInit) {\n            this.buildChart(!!this.transition);\n        }\n    }\n\n    // Note: In onAfterViewInit we can access gx and gy, obtained with @ViewChild.\n    // At this point we can call buildChart()\n    ngAfterViewInit(){\n        this.xAxis = d3.select(this.gx.nativeElement);\n        this.yAxis = d3.select(this.gy.nativeElement);\n        this.viewInit = true;\n\n        this.buildChart();\n    }\n    \n    /**\n     * buildChart() actually only builds the axes of the chart, since the\n     * rest is build automatically with Angular syntax in the template.\n     * We build axis programmatically (with D3 selects) to benefit from the\n     * D3 abstractions and transitions.\n     * @param update \n     */\n    buildChart(update?: boolean){\n                    \n        if(update){\n            const t = d3.transition().duration(this.transition) as d3.Transition;\n    \n            this.xAxis.transition(t)\n                .call(d3.axisTop(this.x).tickSize(0))\n                .on(\"end\", () => this.xAxis.selectAll('text').each(this.wrap));\n\n            this.yAxis.transition(t)\n                .call(d3.axisLeft(this.y).tickSize(0))\n                .on(\"end\", () => this.yAxis.selectAll('text').each(this.wrap));\n            \n        }\n        else {\n            this.xAxis.call(d3.axisTop(this.x).tickSize(0));\n            this.yAxis.call(d3.axisLeft(this.y).tickSize(0));\n        }\n\n        this.xAxis.selectAll(\".domain\").remove(); // Remove the axis line\n        this.xAxis.selectAll(\"text\")  // Tilt the text\n            .attr(\"transform\", \"rotate(-35)\")\n            .style(\"text-anchor\", \"start\")\n            .each(this.wrap)\n            .on(\"click\", d => this.onAxisClicked(d, 'x'));\n\n        this.yAxis.selectAll(\".domain\").remove(); // Remove the axis line\n        this.yAxis.selectAll(\"text\")\n            .each(this.wrap)\n            .on(\"click\", d => this.onAxisClicked(d, 'y'));\n    }\n\n    /**\n     * Called when the user hovers the mouse over a heatmap tile\n     * @param item \n     * @param event \n     */\n    onMouseOver(item: HeatmapItem, event: MouseEvent){\n        this.tooltipItem = item;\n\n        const x = this.x(item.x) as number;\n        const y = this.y(item.y) as number;\n\n        // Since we use viewBox to auto-adjust the SVG to the container size, we have to\n        // convert from the SVG coordinate system to the HTML coordinate system\n        const actualWidth = (this.el.nativeElement as HTMLElement).offsetWidth;\n        const scale = actualWidth / this.width;\n        const relativeX = x / this.width;\n\n        // Tooltip to the right\n        if(relativeX ) => {\n        const self = d3.select(nodes[i]);\n        let textLength = nodes[i].getComputedTextLength();\n        let text = self.text();\n        const fullText = self.text();\n        while (textLength > 90 && text.length > 0) {\n          text = text.slice(0, -1)\n          self.text(text + '...');\n          textLength = nodes[i].getComputedTextLength();\n        }\n        self.append('svg:title').text(fullText);\n    };\n}\n\n    \n\n    \n        \n\n    \n    \n        \n            \n            \n            {{ item.start | number : '1.0-0'}}\n        \n    \n\n    \n        \n        \n\n        \n        \n\n        \n        \n        \n        \n    \n    \n    \n        {{'msg#heatmap.showing' | sqMessage:{values: {shown: dataFiltered.length, total: data.length} } }}\n    \n\n\n\n\n\n    {{tooltipItem.display || tooltipItem.value}}\n    {{'msg#heatmap.tooltip' | sqMessage:{values: {count: tooltipItem.count} } }}\n\n\n    \n\n    \n                \n                    ./heatmap.component.scss\n                \n                // This is required to position the tooltip absolutely\n:host {\n    display: block;\n    position: relative;\n}\n\n// Note: ::ng-deep is deprecated, but currently no better alternative\n.axis.clickable ::ng-deep text:hover {\n    text-decoration: underline;\n    cursor: pointer;\n}\n\n.tile {\n    opacity: 0.9;\n}\n\n.tile.clickable:hover {\n    cursor: pointer;\n    opacity: 1;\n    transition: opacity 0.2s ease-in 0s;\n}\n\n.tile.selected {\n    opacity: 0.5;\n}\n\n.legend {\n    font-size: 10px;\n    fill: darkgrey;\n\n    rect {\n        opacity: 0.9;\n    }\n}\n\n.bottom-legend {\n    fill: darkgrey;\n    font-size: 10px;\n    text-anchor: end;\n}\n\nsq-tooltip ::ng-deep {\n    .sq-tooltip {\n        pointer-events: none;\n        opacity: 0.8;\n    }\n}\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '                                                    {{ item.start | number : \\'1.0-0\\'}}                                                                                                    {{\\'msg#heatmap.showing\\' | sqMessage:{values: {shown: dataFiltered.length, total: data.length} } }}        {{tooltipItem.display || tooltipItem.value}}    {{\\'msg#heatmap.tooltip\\' | sqMessage:{values: {count: tooltipItem.count} } }}'\n    var COMPONENTS = [{'name': 'BsEdgeInfoCard', 'selector': 'sq-edge-info-card'},{'name': 'BsFacetHeatmapComponent', 'selector': 'sq-facet-heatmap'},{'name': 'BsFacetTimelineComponent', 'selector': 'sq-facet-timeline'},{'name': 'BsHeatmapComponent', 'selector': 'sq-heatmap'},{'name': 'BsNodeInfoCard', 'selector': 'sq-node-info-card'},{'name': 'BsResultsHeatmapView', 'selector': 'sq-results-heatmap-view'},{'name': 'BsTimelineComponent', 'selector': 'sq-timeline'},{'name': 'BsTooltipComponent', 'selector': 'sq-tooltip'},{'name': 'FacetNgxChart', 'selector': 'sq-facet-ngx-chart'},{'name': 'FusionChart', 'selector': 'sq-fusion-chart'},{'name': 'MapComponent', 'selector': 'sq-googlemaps'},{'name': 'MoneyCloudComponent', 'selector': 'sq-money-cloud'},{'name': 'MoneyTimelineComponent', 'selector': 'sq-money-timeline'},{'name': 'NetworkComponent', 'selector': 'sq-network'},{'name': 'NgxChart', 'selector': 'sq-ngx-chart'},{'name': 'ResultTimeline', 'selector': 'sq-result-timeline'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'BsHeatmapComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/BsHeatmapModule.html":{"url":"modules/BsHeatmapModule.html","title":"module - BsHeatmapModule","body":"\n                   \n\n\n\n\n    Modules\n    BsHeatmapModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_BsHeatmapModule\n\n\n\ncluster_BsHeatmapModule_declarations\n\n\n\ncluster_BsHeatmapModule_exports\n\n\n\n\nBsFacetHeatmapComponent\n\nBsFacetHeatmapComponent\n\n\n\nBsHeatmapModule\n\nBsHeatmapModule\n\nBsHeatmapModule -->\n\nBsFacetHeatmapComponent->BsHeatmapModule\n\n\n\n\n\nBsHeatmapComponent\n\nBsHeatmapComponent\n\nBsHeatmapModule -->\n\nBsHeatmapComponent->BsHeatmapModule\n\n\n\n\n\nBsResultsHeatmapView\n\nBsResultsHeatmapView\n\nBsHeatmapModule -->\n\nBsResultsHeatmapView->BsHeatmapModule\n\n\n\n\n\nBsTooltipComponent\n\nBsTooltipComponent\n\nBsHeatmapModule -->\n\nBsTooltipComponent->BsHeatmapModule\n\n\n\n\n\nBsFacetHeatmapComponent \n\nBsFacetHeatmapComponent \n\nBsFacetHeatmapComponent  -->\n\nBsHeatmapModule->BsFacetHeatmapComponent \n\n\n\n\n\nBsHeatmapComponent \n\nBsHeatmapComponent \n\nBsHeatmapComponent  -->\n\nBsHeatmapModule->BsHeatmapComponent \n\n\n\n\n\nBsResultsHeatmapView \n\nBsResultsHeatmapView \n\nBsResultsHeatmapView  -->\n\nBsHeatmapModule->BsResultsHeatmapView \n\n\n\n\n\nBsTooltipComponent \n\nBsTooltipComponent \n\nBsTooltipComponent  -->\n\nBsHeatmapModule->BsTooltipComponent \n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            heatmap/bootstrap/heatmap.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Declarations\n                    \n                        \n                            BsFacetHeatmapComponent\n                        \n                        \n                            BsHeatmapComponent\n                        \n                        \n                            BsResultsHeatmapView\n                        \n                        \n                            BsTooltipComponent\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            BsFacetHeatmapComponent\n                        \n                        \n                            BsHeatmapComponent\n                        \n                        \n                            BsResultsHeatmapView\n                        \n                        \n                            BsTooltipComponent\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import {NgModule} from \"@angular/core\";\nimport {CommonModule} from \"@angular/common\";\nimport {FormsModule, ReactiveFormsModule} from \"@angular/forms\";\n\nimport {IntlModule} from \"@sinequa/core/intl\";\n\nimport {BsSelectionModule} from \"@sinequa/components/selection\";\nimport {BsActionModule} from \"@sinequa/components/action\";\n\nimport {BsTooltipComponent} from \"./tooltip.component\";\nimport {BsHeatmapComponent} from \"./heatmap.component\";\nimport {BsFacetHeatmapComponent} from \"./facet-heatmap.component\";\nimport {BsResultsHeatmapView} from \"./results-heatmap-view\";\n\n@NgModule({\n    imports: [\n        FormsModule, ReactiveFormsModule,\n        CommonModule,\n        IntlModule,\n\n        BsSelectionModule,\n        BsActionModule\n    ],\n    declarations: [\n        BsResultsHeatmapView,\n        BsTooltipComponent,\n        BsHeatmapComponent,\n        BsFacetHeatmapComponent\n    ],\n    exports: [\n        BsResultsHeatmapView,\n        BsTooltipComponent,\n        BsHeatmapComponent,\n        BsFacetHeatmapComponent\n    ]\n})\nexport class BsHeatmapModule {\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/BsNodeInfoCard.html":{"url":"components/BsNodeInfoCard.html","title":"component - BsNodeInfoCard","body":"\n                   \n\n\n\n\n\n  Components\n  BsNodeInfoCard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    network/node-info-card.component.ts\n\n\n\n\n    \n        Implements\n    \n    \n                    OnChanges\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                sq-node-info-card\n            \n\n\n            \n                styles\n                \n.card {\n    top: 5px;\n    left: 0;\n    right: 0;\n    width: 80%;\n}\n.circular-image {\n    width: 1.5em;\n    height: 1.5em;\n    border-radius: 50%;\n    object-fit: cover;\n}\n    \n            \n\n\n            \n                templateUrl\n                node-info-card.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                closed\n                            \n                            \n                                expanded\n                            \n                            \n                                neighbors\n                            \n                            \n                                nodeData\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                focusNode\n                            \n                            \n                                ngOnChanges\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                node\n                            \n                        \n                    \n                \n\n\n\n\n        \n    \n\n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        node\n                    \n                \n                \n                    \n                        Type :         Node\n\n                    \n                \n                        \n                            \n                                    Defined in network/node-info-card.component.ts:29\n                            \n                        \n            \n        \n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            focusNode\n                        \n                        \n                    \n                \n            \n            \n                \nfocusNode(node: Node)\n                \n            \n\n\n            \n                \n                    Defined in network/node-info-card.component.ts:70\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    node\n                                    \n                                                Node\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            ngOnChanges\n                        \n                        \n                    \n                \n            \n            \n                \nngOnChanges()\n                \n            \n\n\n            \n                \n                    Defined in network/node-info-card.component.ts:38\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n    \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            closed\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                        \n                            \n                                    Defined in network/node-info-card.component.ts:31\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            expanded\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                        \n                            \n                                    Defined in network/node-info-card.component.ts:32\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            neighbors\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     literal type\n\n                        \n                    \n                        \n                            \n                                    Defined in network/node-info-card.component.ts:36\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            nodeData\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         NodeData\n\n                        \n                    \n                        \n                            \n                                    Defined in network/node-info-card.component.ts:34\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n    \n        import { Component, Input, OnChanges } from \"@angular/core\";\nimport { Node } from './network-models';\n\n\nexport interface NodeData {\n    node: Node;\n    count?: number; // The count displayed may be different from the node count (for edges)\n}\n\n@Component({\n    selector: \"sq-node-info-card\",\n    templateUrl: \"node-info-card.component.html\",\n    styles: [`\n.card {\n    top: 5px;\n    left: 0;\n    right: 0;\n    width: 80%;\n}\n.circular-image {\n    width: 1.5em;\n    height: 1.5em;\n    border-radius: 50%;\n    object-fit: cover;\n}\n    `]\n})\nexport class BsNodeInfoCard implements OnChanges {\n    @Input() node: Node;\n\n    closed: boolean;\n    expanded: boolean;\n\n    nodeData: NodeData;\n\n    neighbors: {[type: string]: NodeData[]};\n\n    ngOnChanges() {\n        this.closed = false;\n        this.expanded = false;\n        this.nodeData = { node: this.node, count: this.node.count };\n\n        this.neighbors = {};\n        this.node.context.edges\n            .stream()\n            .filter(e => e.from === this.node.id || e.to === this.node.id) // Filter edges\n            .map(e => {\n                const id = e.from === this.node.id ? e.to : e.from\n                const node = this.node.context.nodes.get(id);\n                return {node, count: e.count};\n            }) // get node and edge count\n            .forEach(item => {\n                if(item.node) {\n                    const type = item.node.type.field ?\n                        item.node.context.appService.getPluralLabel(item.node.type.field) : // Try to get the \"pretty label\"\n                        item.node.type.name; // Or just use the node type's name\n                    if(!this.neighbors[type]) {\n                        this.neighbors[type] = []; // Initialize the neighbor array\n                    }\n                    // Create the node data\n                    this.neighbors[type].push({ node: item.node, count: item.count } as NodeData);\n                }\n                return true;\n            });\n        // Sort the neighbors by decreasing count number\n        Object.values(this.neighbors)\n            .forEach(list => list.sort((a,b) => (b.count || 0) - (a.count || 0)));\n    }\n\n    focusNode(node: Node) {\n        // Hack to gain access to the network instance (networkService does not have the focus() method)\n        const networkInstance = node.context.networkService['networks'][node.context.name];\n        networkInstance.focus(node.id, {animation: true}); // Move the view to this node with animation\n        networkInstance.selectNodes([node.id], true); // Warning: does not trigger events...\n        node.context.select(node, undefined); // Select the node to update info cards, actions\n        return false;\n    }\n}\n    \n\n    \n        \n    \n        \n            \n            \n                \n            \n            \n                \n            \n        \n        \n            \n                \n                    {{neighbor.key | sqMessage}}\n                    \n                        \n                            \n                                \n                            \n                        \n                    \n                \n            \n        \n    \n\n\n\n    \n    {{nodeData.node['icon']['code']}}\n    {{nodeData.node.label}}\n     0\" class=\"mr-2 text-muted\" title=\"{{ 'msg#network.infocards.count' | sqMessage }}\">({{nodeData.count}})\n\n    \n\n    \n            \n.card {\n    top: 5px;\n    left: 0;\n    right: 0;\n    width: 80%;\n}\n.circular-image {\n    width: 1.5em;\n    height: 1.5em;\n    border-radius: 50%;\n    object-fit: cover;\n}\n    \n\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '                                                                                                                                                                        {{neighbor.key | sqMessage}}                                                                                                                                                                                                                                {{nodeData.node[\\'icon\\'][\\'code\\']}}    {{nodeData.node.label}}     0\" class=\"mr-2 text-muted\" title=\"{{ \\'msg#network.infocards.count\\' | sqMessage }}\">({{nodeData.count}})'\n    var COMPONENTS = [{'name': 'BsEdgeInfoCard', 'selector': 'sq-edge-info-card'},{'name': 'BsFacetHeatmapComponent', 'selector': 'sq-facet-heatmap'},{'name': 'BsFacetTimelineComponent', 'selector': 'sq-facet-timeline'},{'name': 'BsHeatmapComponent', 'selector': 'sq-heatmap'},{'name': 'BsNodeInfoCard', 'selector': 'sq-node-info-card'},{'name': 'BsResultsHeatmapView', 'selector': 'sq-results-heatmap-view'},{'name': 'BsTimelineComponent', 'selector': 'sq-timeline'},{'name': 'BsTooltipComponent', 'selector': 'sq-tooltip'},{'name': 'FacetNgxChart', 'selector': 'sq-facet-ngx-chart'},{'name': 'FusionChart', 'selector': 'sq-fusion-chart'},{'name': 'MapComponent', 'selector': 'sq-googlemaps'},{'name': 'MoneyCloudComponent', 'selector': 'sq-money-cloud'},{'name': 'MoneyTimelineComponent', 'selector': 'sq-money-timeline'},{'name': 'NetworkComponent', 'selector': 'sq-network'},{'name': 'NgxChart', 'selector': 'sq-ngx-chart'},{'name': 'ResultTimeline', 'selector': 'sq-result-timeline'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'BsNodeInfoCard'};\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/BsTimelineModule.html":{"url":"modules/BsTimelineModule.html","title":"module - BsTimelineModule","body":"\n                   \n\n\n\n\n    Modules\n    BsTimelineModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_BsTimelineModule\n\n\n\ncluster_BsTimelineModule_declarations\n\n\n\ncluster_BsTimelineModule_imports\n\n\n\ncluster_BsTimelineModule_exports\n\n\n\n\nBsFacetTimelineComponent\n\nBsFacetTimelineComponent\n\n\n\nBsTimelineModule\n\nBsTimelineModule\n\nBsTimelineModule -->\n\nBsFacetTimelineComponent->BsTimelineModule\n\n\n\n\n\nBsTimelineComponent\n\nBsTimelineComponent\n\nBsTimelineModule -->\n\nBsTimelineComponent->BsTimelineModule\n\n\n\n\n\nBsFacetTimelineComponent \n\nBsFacetTimelineComponent \n\nBsFacetTimelineComponent  -->\n\nBsTimelineModule->BsFacetTimelineComponent \n\n\n\n\n\nBsTimelineComponent \n\nBsTimelineComponent \n\nBsTimelineComponent  -->\n\nBsTimelineModule->BsTimelineComponent \n\n\n\n\n\nBsHeatmapModule\n\nBsHeatmapModule\n\nBsTimelineModule -->\n\nBsHeatmapModule->BsTimelineModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            timeline/bootstrap/timeline.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Declarations\n                    \n                        \n                            BsFacetTimelineComponent\n                        \n                        \n                            BsTimelineComponent\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            BsHeatmapModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            BsFacetTimelineComponent\n                        \n                        \n                            BsTimelineComponent\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import {NgModule} from \"@angular/core\";\nimport {CommonModule} from \"@angular/common\";\nimport {FormsModule, ReactiveFormsModule} from \"@angular/forms\";\n\nimport {IntlModule} from \"@sinequa/core/intl\";\n\nimport {UtilsModule} from \"@sinequa/components/utils\";\nimport {BsSelectionModule} from \"@sinequa/components/selection\";\nimport {BsActionModule} from \"@sinequa/components/action\";\nimport {BsHeatmapModule} from \"@sinequa/analytics/heatmap\";\n\nimport {BsTimelineComponent} from \"./timeline.component\";\nimport {BsFacetTimelineComponent} from \"./facet-timeline.component\";\n\n@NgModule({\n    imports: [\n        FormsModule, ReactiveFormsModule,\n        CommonModule,\n        IntlModule,\n\n        UtilsModule,\n        BsSelectionModule,\n        BsActionModule,\n        BsHeatmapModule // We need the heatmap module for the tooltip component\n    ],\n    declarations: [\n        BsTimelineComponent,\n        BsFacetTimelineComponent\n    ],\n    exports: [\n        BsTimelineComponent,\n        BsFacetTimelineComponent\n    ]\n})\nexport class BsTimelineModule {\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/BsTooltipComponent.html":{"url":"components/BsTooltipComponent.html","title":"component - BsTooltipComponent","body":"\n                   \n\n\n\n\n\n  Components\n  BsTooltipComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    heatmap/bootstrap/tooltip.component.ts\n\n\n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                sq-tooltip\n            \n\n\n            \n                styles\n                \n.sq-tooltip {\n    z-index: 10;\n}\n\n.sq-tooltip::after {\n    content: \" \";\n    position: absolute;\n    top: 12px;\n    border-width: 8px;\n    border-style: solid;\n}\n\n.sq-tooltip.right::after {\n    left: -17px;\n    border-color: transparent rgb(0,0,0,0.125) transparent transparent;\n}\n\n.sq-tooltip.left::after {\n    right: -17px;\n    border-color: transparent transparent transparent rgb(0,0,0,0.125);\n}\n    \n            \n\n            \n                template\n                \n    \n        \n    \n\n\n            \n\n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n\n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                left\n                            \n                            \n                                orientation\n                            \n                            \n                                right\n                            \n                            \n                                theme\n                            \n                            \n                                top\n                            \n                        \n                    \n                \n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    style\n                                \n                            \n                        \n                    \n        \n    \n\n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        left\n                    \n                \n                \n                    \n                        Default value : 0\n                    \n                \n                        \n                            \n                                    Defined in heatmap/bootstrap/tooltip.component.ts:38\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        orientation\n                    \n                \n                \n                    \n                        Type :     \"left\" | \"right\"\n\n                    \n                \n                \n                    \n                        Default value : \"right\"\n                    \n                \n                        \n                            \n                                    Defined in heatmap/bootstrap/tooltip.component.ts:37\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        right\n                    \n                \n                \n                    \n                        Default value : 0\n                    \n                \n                        \n                            \n                                    Defined in heatmap/bootstrap/tooltip.component.ts:39\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        theme\n                    \n                \n                \n                    \n                        Type :     \"light\" | \"dark\"\n\n                    \n                \n                \n                    \n                        Default value : \"light\"\n                    \n                \n                        \n                            \n                                    Defined in heatmap/bootstrap/tooltip.component.ts:41\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        top\n                    \n                \n                \n                    \n                        Default value : 0\n                    \n                \n                        \n                            \n                                    Defined in heatmap/bootstrap/tooltip.component.ts:40\n                            \n                        \n            \n        \n\n\n\n\n\n\n    \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        style\n                    \n                \n\n                \n                    \n                        getstyle()\n                    \n                \n                            \n                                \n                                    Defined in heatmap/bootstrap/tooltip.component.ts:43\n                                \n                            \n\n            \n        \n\n\n\n\n    \n        import {Component, Input} from '@angular/core';\n\n@Component({\n    selector: \"sq-tooltip\",\n    template: `\n\n    \n        \n    \n\n`,\n    styles: [`\n.sq-tooltip {\n    z-index: 10;\n}\n\n.sq-tooltip::after {\n    content: \" \";\n    position: absolute;\n    top: 12px;\n    border-width: 8px;\n    border-style: solid;\n}\n\n.sq-tooltip.right::after {\n    left: -17px;\n    border-color: transparent rgb(0,0,0,0.125) transparent transparent;\n}\n\n.sq-tooltip.left::after {\n    right: -17px;\n    border-color: transparent transparent transparent rgb(0,0,0,0.125);\n}\n    `]\n})\nexport class BsTooltipComponent {\n    @Input() orientation: \"left\" | \"right\" = \"right\";\n    @Input() left = 0;\n    @Input() right = 0;\n    @Input() top = 0;\n    @Input() theme: \"light\" | \"dark\" = \"light\";\n\n    get style() {\n        if(this.orientation === \"right\") {\n            return {\n                'left.px': this.left + 7,\n                'top.px': this.top - 21, // Align tooltip arrow\n            }\n        }\n        else {\n            return {\n                'right.px': this.right + 7,\n                'top.px': this.top - 21, // Align tooltip arrow\n            }\n        }\n    }\n}\n    \n\n\n    \n            \n.sq-tooltip {\n    z-index: 10;\n}\n\n.sq-tooltip::after {\n    content: \" \";\n    position: absolute;\n    top: 12px;\n    border-width: 8px;\n    border-style: solid;\n}\n\n.sq-tooltip.right::after {\n    left: -17px;\n    border-color: transparent rgb(0,0,0,0.125) transparent transparent;\n}\n\n.sq-tooltip.left::after {\n    right: -17px;\n    border-color: transparent transparent transparent rgb(0,0,0,0.125);\n}\n    \n\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '                '\n    var COMPONENTS = [{'name': 'BsEdgeInfoCard', 'selector': 'sq-edge-info-card'},{'name': 'BsFacetHeatmapComponent', 'selector': 'sq-facet-heatmap'},{'name': 'BsFacetTimelineComponent', 'selector': 'sq-facet-timeline'},{'name': 'BsHeatmapComponent', 'selector': 'sq-heatmap'},{'name': 'BsNodeInfoCard', 'selector': 'sq-node-info-card'},{'name': 'BsResultsHeatmapView', 'selector': 'sq-results-heatmap-view'},{'name': 'BsTimelineComponent', 'selector': 'sq-timeline'},{'name': 'BsTooltipComponent', 'selector': 'sq-tooltip'},{'name': 'FacetNgxChart', 'selector': 'sq-facet-ngx-chart'},{'name': 'FusionChart', 'selector': 'sq-fusion-chart'},{'name': 'MapComponent', 'selector': 'sq-googlemaps'},{'name': 'MoneyCloudComponent', 'selector': 'sq-money-cloud'},{'name': 'MoneyTimelineComponent', 'selector': 'sq-money-timeline'},{'name': 'NetworkComponent', 'selector': 'sq-network'},{'name': 'NgxChart', 'selector': 'sq-ngx-chart'},{'name': 'ResultTimeline', 'selector': 'sq-result-timeline'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'BsTooltipComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ChartDataPoint.html":{"url":"interfaces/ChartDataPoint.html","title":"interface - ChartDataPoint","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  ChartDataPoint\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            ngx-charts/chart/chart.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        name\n                                \n                                \n                                        value\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        name\n                                    \n                                \n                                \n                                    \n                                        name:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        value\n                                    \n                                \n                                \n                                    \n                                        value:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import {Component, Input, Output, EventEmitter, OnInit, OnDestroy, OnChanges, DoCheck, SimpleChanges, ViewChild, ElementRef, Type} from \"@angular/core\";\nimport {Subscription} from \"rxjs\";\nimport {Utils} from \"@sinequa/core/base\";\nimport {IntlService} from \"@sinequa/core/intl\";\nimport {BaseChartComponent, BarVerticalComponent, BarHorizontalComponent} from \"@swimlane/ngx-charts\";\nimport {UIService} from \"@sinequa/components/utils\";\n\n\nexport interface ChartOptions {\n    type: string;\n    colorScheme?: string;\n    getItemColor?: (value: string) => string;\n    tickFormatter?: (value: any) => string;\n}\n\nexport interface ChartDataPoint {\n    name: string;\n    value: number;\n}\n\n@Component({\n    selector: \"sq-ngx-chart\",\n    templateUrl: \"./chart.html\",\n    styleUrls: [\"./chart.scss\"]\n})\nexport class NgxChart implements OnInit, OnDestroy, OnChanges, DoCheck {\n    @Input() options: ChartOptions;\n    @Input() data: ChartDataPoint[];\n    @Output(\"item-click\") itemClickEvent: EventEmitter;\n    @ViewChild(\"wrapper\", {static: true}) wrapper: ElementRef;\n    @ViewChild(\"tooltipTemplate\", {static: false}) tooltipTemplate;\n    @ViewChild(\"chart\", {static: false}) chart: BaseChartComponent;\n    localeChange: Subscription;\n    attached: boolean;\n\n    constructor(\n        protected intlService: IntlService,\n        private uiService: UIService) {\n        this.itemClickEvent = new EventEmitter();\n    }\n\n    updateChart() {\n        if (!!this.chart) this.chart.update();\n    }\n\n    private onResize = () => this.updateChart();\n\n    ngOnInit() {\n        this.uiService.addElementResizeListener(this.wrapper.nativeElement, this.onResize);\n        this.localeChange = Utils.subscribe(this.intlService.events,\n            (value) => {\n                this.updateChart();\n            });\n    }\n\n    ngOnDestroy() {\n        this.uiService.removeElementResizeListener(this.wrapper.nativeElement, this.onResize);\n        this.localeChange.unsubscribe();\n    }\n\n    get chartType(): string {\n        return Utils.toLowerCase(this.options.type);\n    }\n\n    chartComponent(type:string) : Type {\n        switch(type){\n            case \"horizontalbar\": return BarHorizontalComponent;\n            case \"verticaltalbar\": return BarVerticalComponent;\n            default: return BarVerticalComponent;\n        }\n    }\n\n    // so we don't end up with no color scheme if the color scheme is not set\n    get colorScheme(): string {\n        return this.options.colorScheme || \"cool\";\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n    }\n\n    // This is a clunky way of avoiding (briefly) seeing ngx-charts rendering with the default 600x400 dimensions\n    ngDoCheck() {\n        if (!this.attached && !!this.wrapper) {\n            if (document.body.contains(this.wrapper.nativeElement)) {\n                this.updateChart();\n                this.attached = true;\n            }\n        }\n    }\n\n    select = (dataPoint: ChartDataPoint): void => {\n        this.itemClickEvent.emit(dataPoint);\n    }\n}\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ChartOptions.html":{"url":"interfaces/ChartOptions.html","title":"interface - ChartOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  ChartOptions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            ngx-charts/chart/chart.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        colorScheme\n                                \n                                \n                                            Optional\n                                        getItemColor\n                                \n                                \n                                            Optional\n                                        tickFormatter\n                                \n                                \n                                        type\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        colorScheme\n                                    \n                                \n                                \n                                    \n                                        colorScheme:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        getItemColor\n                                    \n                                \n                                \n                                    \n                                        getItemColor:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        tickFormatter\n                                    \n                                \n                                \n                                    \n                                        tickFormatter:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        type\n                                    \n                                \n                                \n                                    \n                                        type:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import {Component, Input, Output, EventEmitter, OnInit, OnDestroy, OnChanges, DoCheck, SimpleChanges, ViewChild, ElementRef, Type} from \"@angular/core\";\nimport {Subscription} from \"rxjs\";\nimport {Utils} from \"@sinequa/core/base\";\nimport {IntlService} from \"@sinequa/core/intl\";\nimport {BaseChartComponent, BarVerticalComponent, BarHorizontalComponent} from \"@swimlane/ngx-charts\";\nimport {UIService} from \"@sinequa/components/utils\";\n\n\nexport interface ChartOptions {\n    type: string;\n    colorScheme?: string;\n    getItemColor?: (value: string) => string;\n    tickFormatter?: (value: any) => string;\n}\n\nexport interface ChartDataPoint {\n    name: string;\n    value: number;\n}\n\n@Component({\n    selector: \"sq-ngx-chart\",\n    templateUrl: \"./chart.html\",\n    styleUrls: [\"./chart.scss\"]\n})\nexport class NgxChart implements OnInit, OnDestroy, OnChanges, DoCheck {\n    @Input() options: ChartOptions;\n    @Input() data: ChartDataPoint[];\n    @Output(\"item-click\") itemClickEvent: EventEmitter;\n    @ViewChild(\"wrapper\", {static: true}) wrapper: ElementRef;\n    @ViewChild(\"tooltipTemplate\", {static: false}) tooltipTemplate;\n    @ViewChild(\"chart\", {static: false}) chart: BaseChartComponent;\n    localeChange: Subscription;\n    attached: boolean;\n\n    constructor(\n        protected intlService: IntlService,\n        private uiService: UIService) {\n        this.itemClickEvent = new EventEmitter();\n    }\n\n    updateChart() {\n        if (!!this.chart) this.chart.update();\n    }\n\n    private onResize = () => this.updateChart();\n\n    ngOnInit() {\n        this.uiService.addElementResizeListener(this.wrapper.nativeElement, this.onResize);\n        this.localeChange = Utils.subscribe(this.intlService.events,\n            (value) => {\n                this.updateChart();\n            });\n    }\n\n    ngOnDestroy() {\n        this.uiService.removeElementResizeListener(this.wrapper.nativeElement, this.onResize);\n        this.localeChange.unsubscribe();\n    }\n\n    get chartType(): string {\n        return Utils.toLowerCase(this.options.type);\n    }\n\n    chartComponent(type:string) : Type {\n        switch(type){\n            case \"horizontalbar\": return BarHorizontalComponent;\n            case \"verticaltalbar\": return BarVerticalComponent;\n            default: return BarVerticalComponent;\n        }\n    }\n\n    // so we don't end up with no color scheme if the color scheme is not set\n    get colorScheme(): string {\n        return this.options.colorScheme || \"cool\";\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n    }\n\n    // This is a clunky way of avoiding (briefly) seeing ngx-charts rendering with the default 600x400 dimensions\n    ngDoCheck() {\n        if (!this.attached && !!this.wrapper) {\n            if (document.body.contains(this.wrapper.nativeElement)) {\n                this.updateChart();\n                this.attached = true;\n            }\n        }\n    }\n\n    select = (dataPoint: ChartDataPoint): void => {\n        this.itemClickEvent.emit(dataPoint);\n    }\n}\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/CustomData.html":{"url":"interfaces/CustomData.html","title":"interface - CustomData","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  CustomData\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            network/providers/records-provider.ts\n        \n\n            \n                Description\n            \n            \n                Data structure returned by the optional parse() function of a structural edge\ntype. Contains the parsed values of a property that can be turned into one or\nmultiple nodes and edges.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        directed\n                                \n                                \n                                        displays\n                                \n                                \n                                            Optional\n                                        fieldValue\n                                \n                                \n                                            Optional\n                                        relations\n                                \n                                \n                                        values\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        directed\n                                    \n                                \n                                \n                                    \n                                        directed:     boolean[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     boolean[]\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        displays\n                                    \n                                \n                                \n                                    \n                                        displays:     string[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        fieldValue\n                                    \n                                \n                                \n                                    \n                                        fieldValue:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        relations\n                                    \n                                \n                                \n                                    \n                                        relations:     string[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string[]\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        values\n                                    \n                                \n                                \n                                    \n                                        values:     string[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Utils } from '@sinequa/core/base';\nimport { Record } from '@sinequa/core/web-services';\nimport { Action } from '@sinequa/components/action';\nimport { Node, NetworkDataset, NodeType, EdgeType, NetworkContext } from '../network-models';\nimport { BaseProvider } from './base-provider';\n\n/**\n * Extension of the Node interface, to include the Record object\n * from which the node is generated\n */\nexport interface RecordNode extends Node {\n    record: Record;\n}\n\n\n/**\n * An extension of the EdgeType interface to include properties specific to\n * structural edges (edge between a record and its metadata).\n */\nexport interface StructuralEdgeType extends EdgeType {\n    /** Name of the field in the record */\n    field: string;\n    /** count limits the number of values displayed and allows for pagination. Use 0 for unlimited values */\n    count?: number;\n    /** Defines when the edge should be displayed */\n    trigger: StructuralTriggerType;\n    /** showall: display all values from the field / paginate: display all value with pagination / existingnodes: only link to existing nodes / manual: only show if manual action (activated programmatically) */\n    display: StructuralDisplayType;\n    /** A function to parse metadata from a record node in a custom way */\n    parse?: (value: any, record: Record, type: StructuralEdgeType) => CustomData;\n}\n\nexport type StructuralTriggerType = \"oninsert\" | \"onclick\" | \"manual\";\nexport type StructuralDisplayType = \"all\" | \"paginate\" | \"existingnodes\" | ((node: Node, recordNode: RecordNode, index: number) => boolean);\n\n/**\n * Data structure returned by the optional parse() function of a structural edge\n * type. Contains the parsed values of a property that can be turned into one or\n * multiple nodes and edges.\n */\nexport interface CustomData {\n    values: string[]; // eg. LARRY PAGE, GOOGLE\n    displays: string[]; // eg. Larry Page, Google\n    relations?: string[]; // eg. Works At\n    directed?: boolean[]; // eg. true\n    fieldValue?: string; // A value on which to filter the data\n}\n\n/**\n * Tests whether the given edge type is a structural edge type\n * @param et an edge type\n */\nexport function isStructuralEdgeType(et: EdgeType): et is StructuralEdgeType {\n    return !!(et as StructuralEdgeType).field;\n}\n\n\n/**\n * A network provider generating nodes from records.\n * Additionally, the provider can generate the \"structural edges\" of that\n * node. Structural edges are edges between a record and the fields of\n * that record (eg. the wikipedia page of Microsoft is a record that probably\n * contains the fields \"Microsoft\" and \"Bill Gates\").\n */\nexport class RecordsProvider extends BaseProvider {\n\n    constructor(\n        public name = \"Documents\",\n        protected nodeType: NodeType,\n        protected edgeTypes: StructuralEdgeType[],\n        protected records: Record[],\n        protected hideRecordNode = false\n    ){\n        super(name);\n    }\n\n    /**\n     * Clears the dataset and generates new record nodes\n     * @param records the list of records of this provider\n     */\n    protected updateDataset(records?: Record[]) {\n        this.dataset.clear();\n        if(!this.active || !records || records.length === 0) {\n            return; \n        }\n        this.addRecordNodes(records);\n    }\n    \n    // Record nodes\n\n    /**\n     * Generates the nodes for a list of records, including their structural\n     * edges, and adds them to the dataset.\n     * Returns the list of record nodes.\n     * @param records \n     */\n    protected addRecordNodes(records: Record[]): RecordNode[] {\n        return records.map(record => {\n            let node = this.dataset.getNode(this.getNodeId(this.nodeType, record.id));\n            if(!node) {\n                node = this.createNode(this.nodeType, record.id, record.title, !this.hideRecordNode, {record});\n                this.dataset.addNodes(node);\n                this.edgeTypes.forEach(type => {\n                    this.addStructuralEdges(node as RecordNode, type);\n                });\n            }\n            return node as RecordNode;\n        });\n    }\n\n    \n    // Structural edges\n\n    /**\n     * Generates the metadata nodes and structural edges from the given node,\n     * and merge them into the dataset.\n     * This function will automatically parse the metadata contained in the record,\n     * but it is possible to manage custom types of metadata by providing a\n     * custom parse() function via the structural edge type.\n     * @param node The record node\n     * @param type The edge type for which we want to create edges\n     */\n    protected addStructuralEdges(node: RecordNode, type: StructuralEdgeType) {\n\n        if(type.nodeTypes[0] !== this.nodeType){\n            throw new Error(`Inconsistent node type: '${type.nodeTypes[0].name}' instead of '${this.nodeType.name}'`);\n        }\n        \n        const recorddata = node.record[type.field];\n\n        if(recorddata === undefined){\n            return;\n        }\n\n        // Custom parse for mono or multi valued data\n        if(type.parse) {\n            if(Utils.isArray(recorddata)) {\n                recorddata.forEach((value,i) => { \n                    this.addCustomEdge(node, type, type.parse!(value, node.record, type));\n                });\n            }\n            else {\n                this.addCustomEdge(node, type, type.parse!(recorddata, node.record, type));\n            }\n        }\n        // Default handling for standard Sinequa Metadata\n        else {\n            const data = new NetworkDataset();\n            data.addNodes(node);\n    \n            // sourcestr\n            if(Utils.isString(recorddata)) {\n                this.addStructuralEdge(data, node, type, recorddata, recorddata, 0);\n            }\n            else if(Utils.isArray(recorddata)) {\n                recorddata.forEach((value,i) => {\n                    // sourcecsv\n                    if(Utils.isString(value)) {\n                        this.addStructuralEdge(data, node, type, value, value, i);\n                    }\n                    // entity\n                    else if(value[\"value\"]) {\n                        this.addStructuralEdge(data, node, type, value[\"value\"], value[\"display\"] || value[\"value\"], i);\n                    }\n                });\n            }\n    \n            this.dataset.merge(data);\n        }\n    }\n\n    /**\n     * Add a structural edge to a record node and adds that edge\n     * (and corresponding metadata node) to the given dataset.\n     * @param dataset The target dataset\n     * @param recordNode The record node\n     * @param type The edge type of the structural edge\n     * @param value The \"value\" property of the metadata node\n     * @param display The \"display\" property of the metadata node\n     * @param index The index of the metadata within the record, which may influence its visibility when using display=paginate\n     */\n    protected addStructuralEdge(dataset: NetworkDataset, recordNode: RecordNode, type: StructuralEdgeType, value: string, display: string, index: number) {\n        // Create the metadata node\n        const node = this.createNode(type.nodeTypes[1], value, display, true);\n        // Sets its visibility\n        node.visible = type.trigger === \"oninsert\" && this.isEdgeVisible(type, node, recordNode, index);\n        if(recordNode.id !== node.id){ // Special case of hybrid nodes, where the recordNode might contain itself...!\n            if(!dataset.hasNode(node.id)) { // Duplicate nodes/edges are possible when the same node type is present in multiple fields of a record (eg. \"email\" in msgfrom and msgto)\n                dataset.addNodes(node);\n            }\n            const edge = this.createEdge(type, recordNode, node, value, node.visible, {record: recordNode.record});\n            if(!dataset.hasEdge(edge.id)) {\n                dataset.addEdges(edge);\n            }\n        }\n    }\n\n    /**\n     * Add a custom structural edge to a record node and merges that edge\n     * (and corresponding metadata node) into the global dataset.\n     * @param recordNode The record node\n     * @param type The edge type of the structural edge\n     * @param data A CustomData object containing the properties of the metadata nodes we want to created\n     */\n    protected addCustomEdge(recordNode: RecordNode, type: StructuralEdgeType, data: CustomData) {\n        if(type.nodeTypes.length !== data.values.length + 1) {\n            throw new Error(`Wrong number of values for this custom edge ${type.nodeTypes.length}, ${data.values.length}`);\n        }\n        // Create a dataset only for this data, to avoid duplicate conflicts\n        const dataset = new NetworkDataset();\n        dataset.addNodes(recordNode);\n        // For each value contained in \"data\", create a node, and edges in between them (in addition to the edges between the record and each metadata node)\n        let lastNode: Node;\n        for(let i=0; i 0){\n                const relation = data.relations? data.relations[i-1] : undefined;\n                const directed = data.directed? data.directed[i-1] : false;\n                dataset.addEdges(this.createEdge(type, lastNode!, node, data.fieldValue, true, {}, 1, directed, relation));\n            }\n            lastNode = node;\n        }\n        this.dataset.merge(dataset);\n    }\n\n    /**\n     * Returns the visibility of a structural edge, depending on the type.display property\n     * @param type The structural edge type\n     * @param node The metadata node of this edge\n     * @param recordNode The record node of this edge\n     * @param index The index of the metadata in the list of metadata of the record\n     */\n    protected isEdgeVisible(type: StructuralEdgeType, node: Node, recordNode: RecordNode, index: number): boolean {\n        if(type.display === \"all\") {\n            return true;\n        }\n        else if(type.display === \"existingnodes\") {\n            return false;\n        }\n        else if(type.display === \"paginate\") {\n            return index  node.type === this.nodeType)\n            .forEach(node => {\n                dataset.getAdjacentEdges(node.id)\n                    .filter(edge => (edge.type as StructuralEdgeType).display === 'existingnodes')\n                    .forEach(edge => {\n                        const neighbor = dataset.getNode(node.id === edge.to ? edge.from : edge.to);\n                        if(!neighbor) {\n                            throw new Error(`Missing node from edge ${edge.id}`);\n                        }\n                        const neighborsneighbors = dataset.getAdjacentEdges(neighbor.id);\n                        if(neighborsneighbors.length > 1) {\n                            neighbor.visible = true;\n                            edge.visible = true;\n                        }\n                    });\n            });\n    }\n\n    /**\n     * Adjust visibility of nodes and edges, for structural edges with\n     * type.trigger = onclick. These nodes will only be shown once their\n     * record node is clicked on.\n     * @param node A node that was clicked\n     */\n    onNodeClicked(node?: Node) {\n        if(this.active && node && node.type === this.nodeType) { // Note: we cannot test the provider property, since this node might have been merged with one from a different provider. However the node type should be a unique instance\n            let update = false;\n            this.dataset.getAdjacentEdges(node.id)\n                .filter(edge => edge.type['trigger'] === 'onclick')\n                .forEach(edge => {\n                    const neighbor = this.dataset.getNode(node.id === edge.to ? edge.from : edge.to);\n                    if(!neighbor) {\n                        throw new Error(`Missing node from edge ${edge.id}`);\n                    }\n                    if(!neighbor.visible || !edge.visible) {\n                        edge.visible = true;\n                        neighbor.visible = true;\n                        update = true;\n                    }\n                    // TODO \"propagate\" visibility (ie. if 2 nodes are visible but an edge in between is invisible, make it visible)\n                });\n            if(update) {\n                this.provider.next(this.dataset);\n            }\n        }\n    }\n\n    getProviderActions(): Action[] {\n        return super.getProviderActions();\n    }\n\n    /**\n     * Creates actions for expanding and/or collapsing a record node that was clicked.\n     * expanding and collapsing will act on the visibility of the structural edges\n     * attached to this node.\n     * Both actions might be displayed at the same time, if the node is in an intermediate\n     * state.\n     * @param node \n     */\n    getNodeActions(node: Node): Action[] {\n        const actions = super.getNodeActions(node);\n        \n        // Actions for exanding / collapsing a record node\n        if(this.active && node.type === this.nodeType && this.edgeTypes.length > 0) {\n            let hasExpandedEdge = false;\n            let hasCollapsedEdge = false;\n            this.dataset.getAdjacentEdges(node.id).forEach(e => {\n                hasCollapsedEdge = hasCollapsedEdge || !e.visible;\n                hasExpandedEdge = hasExpandedEdge || e.visible;\n            });\n\n            if(hasCollapsedEdge) {\n                actions.push(new Action({\n                    icon: \"fas fa-expand-arrows-alt\",\n                    title: \"msg#network.actions.expandMeta\",\n                    action: () => {\n                        let update = false;\n                        this.dataset.getAdjacentEdges(node.id)\n                            .forEach(edge => {\n                                const neighbor = this.dataset.getNode(node.id === edge.to ? edge.from : edge.to);\n                                if(!neighbor) {\n                                    throw new Error(`Missing node from edge ${edge.id}`);\n                                }\n                                if(!neighbor.visible || !edge.visible) {\n                                    edge.visible = true;\n                                    neighbor.visible = true;\n                                    update = true;\n                                }\n                                // TODO \"propagate\" visibility (ie. if 2 nodes are visible but an edge in between is invisible, make it visible)\n                            });\n                        if(update) {\n                            this.provider.next(this.dataset);\n                        }\n                    }\n                }));\n            }\n            \n            if(hasExpandedEdge) {\n                actions.push(new Action({\n                    icon: \"fas fa-compress-arrows-alt\",\n                    title: \"msg#network.actions.collapseMeta\",\n                    action: () => {\n                        let update = false;\n                        this.dataset.getAdjacentEdges(node.id)\n                            .forEach(edge => {\n                                const neighbor = this.dataset.getNode(node.id === edge.to ? edge.from : edge.to);\n                                if(!neighbor) {\n                                    throw new Error(`Missing node from edge ${edge.id}`);\n                                }\n                                if((neighbor.visible || edge.visible) && !(neighbor as RecordNode).record) { // Prevent collapsing links between 2 record nodes (alternatively, we could count the number of neighbors of the neighbors, and close only the isoltated ones)\n                                    edge.visible = false;\n                                    neighbor.visible = false;\n                                    update = true;\n                                }\n                            });\n                        if(update) {\n                            this.provider.next(this.dataset);\n                        }\n                    }\n                }));\n            }\n        }\n        return actions;\n    }\n\n}\n    \n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/DynamicEdge.html":{"url":"interfaces/DynamicEdge.html","title":"interface - DynamicEdge","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  DynamicEdge\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            network/providers/dynamic-edge-provider.ts\n        \n\n            \n                Description\n            \n            \n                Extension of the Edge interface, to include the record property\nfrom which this edge is generated\n\n            \n\n            \n                Extends\n            \n            \n                        Edge\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        record\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        record\n                                    \n                                \n                                \n                                    \n                                        record:     Record\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Record\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Query } from '@sinequa/core/app-utils';\nimport { Results, Record } from '@sinequa/core/web-services';\nimport { EdgeType, Node, Edge, NetworkProvider, NetworkDataset } from '../network-models';\nimport { RecordsProvider, StructuralEdgeType, RecordNode } from './records-provider';\nimport { combineLatest } from 'rxjs';\nimport { Action } from '@sinequa/components/action';\n\n/**\n * Extension of the Edge interface, to include the record property\n * from which this edge is generated\n */\nexport interface DynamicEdge extends Edge {\n    record: Record;\n}\n\n/**\n * Extension of the EdgeType interface, to include properties specific\n * to dynamic edges, in particular a function that returns a Query object\n * for a given source node.\n */\nexport interface DynamicEdgeType extends EdgeType {\n    /** Returns a query object to execute to obtain dynamic edges from a node */\n    getQuery: (node: Node, type: DynamicEdgeType) => Query | undefined;\n    /** count limits the number of records returned by the query service and allows for pagination */\n    count?: number;\n    /** Defines when the dynamic edge should be executed. Warning: oninsert may generate multiple simultaneous queries */\n    trigger: \"oninsert\" | \"onclick\" | \"manual\";\n}\n\n/**\n * Tests whether a given edge type is a DynamicEdgeType\n * @param et an edge type\n */\nexport function isDynamicEdgeType(et: EdgeType): et is DynamicEdgeType {\n    return !!(et as DynamicEdgeType).getQuery;\n}\n\n\n/**\n * A extension of the RecordsProvider, where records are not directly\n * provided, but are instead fetched from the server via a Query specific\n * to a source node.\n * Concretely, the dynamic edge provider will attach one (or more) record nodes\n * (and their structural edges) to one (or more) source nodes, whose type is\n * specified in the DynamicEdgeType.\n * Dynamic edges can be attached right when the source nodes are inserted (oninsert),\n * or when a user clicks on a source node (onclick) or when a user clicks on an\n * action button displayed when a source node is clicked.\n * Note that the \"source node\" have to come from different providers, so it is\n * necessary to listen to these providers and update the data generated by this\n * provider accordingly.\n */\nexport class DynamicEdgeProvider extends RecordsProvider {\n\n    /** List of the source nodes that have been already processed via clicks or actions */\n    protected processedNodes: string[] = [];\n    /** to avoid fetching the same data multiple times, we store the record objects fetched from the server in this cache */\n    protected nodeCache = new Map();\n\n    constructor(\n        public name: string,\n        protected edgeType: DynamicEdgeType,\n        protected secondaryEdgeTypes: StructuralEdgeType[],\n        protected permanent: boolean,\n        protected sourceProviders: NetworkProvider[]\n    ){\n        super(name, edgeType.nodeTypes[1], secondaryEdgeTypes, [], false);\n\n        combineLatest(sourceProviders.map(p => p.getProvider())).subscribe(dataset => {\n            if(this.active) {\n                // Merge the nodes from all datasets into a map\n                const map = new Map();\n                dataset.forEach(dataset => {\n                    dataset.getNodes().forEach(node => {\n                        if(node.visible && node.type === this.edgeType.nodeTypes[0]) {\n                            map.set(node.id, node);\n                        }\n                    });\n                });\n                // Update the dataset of dynamic edges\n                this.updateDynamicDataset(Array.from(map.values()));\n            }\n        });\n    }\n    \n    /**\n     * Rebuilds the dataset of this provider, given a list of source nodes to process.\n     * @param sourceNodes A list of source node to process\n     */\n    protected updateDynamicDataset(sourceNodes: Node[]) {\n\n        // We rebuild the dataset from scratch, in case some source nodes were removed\n        this.dataset = new NetworkDataset();\n\n        // If oninsert, we want to process all the source nodes. If not, we want to process the nodes in the processedNodes list\n        if(this.edgeType.trigger !== \"oninsert\") {\n            this.processedNodes = this.processedNodes.filter(id => !!sourceNodes.find(node => node.id === id)); // We want to \"forget\" the nodes that are not in the source anymore\n            sourceNodes = sourceNodes.filter(node => this.processedNodes.indexOf(node.id) !== -1); // We want to process only the nodes currently in the processed list\n        }\n\n        // For each source, we get its query\n        const queries = sourceNodes.map(node => this.nodeCache.has(node.id)? undefined : this.edgeType.getQuery(node, this.edgeType));\n        const _queries = queries.filter(q => !!q) as Query[];\n        // If there are queries, we process them asynchronously\n        if(_queries.length > 0) {\n            this.context.searchService.getMultipleResults(_queries, undefined).subscribe(res => {\n                this.addDynamicEdges(sourceNodes, res.results, queries);\n            });\n        }\n        // If not, we process them synchronously\n        else {\n            this.addDynamicEdges(sourceNodes, [], queries);\n        }\n    \n    }\n\n    /**\n     * Add dynamic edges to a list of source nodes, given a results set\n     * for each of these nodes (either directly provided or stored in the cache).\n     * @param sourceNodes The source nodes\n     * @param res The list of results sets\n     * @param queries The list of queries from which we obtained the results\n     */\n    protected addDynamicEdges(sourceNodes: Node[], res: Results[], queries: (Query|undefined)[]){\n        let j = 0;\n        // For each source node\n        for(let i = 0; i this.createEdge(this.edgeType, node, rNode, undefined, node.visible, {record: rNode.record}) as DynamicEdge);\n    }\n\n    /**\n     * Attach dynamic edges to a given node, either synchronously, if the results set\n     * is available in the cache, or asynchronously, by fetching the data from the server.\n     * @param node The node to process\n     */\n    protected processNode(node: Node) {\n        const query = this.edgeType.getQuery(node, this.edgeType); // Get the search query for this node\n        if(query){\n            if(this.nodeCache.has(node.id)) {\n                if(!this.permanent) {\n                    this.dataset.clear(); // Remove data from previously clicked node\n                    this.processedNodes.splice(0); // Remove the processed nodes\n                }\n                this.processedNodes.push(node.id);\n                this.addDynamicEdges([node], [], [query]); // Insert dynamic nodes and edges for this clicked node\n            }\n            else {\n                this.context.searchService.getResults(query, undefined, {searchInactive: true})\n                    .subscribe(results => {\n                        if(!this.permanent) {\n                            this.dataset.clear(); // Remove data from previously clicked node\n                            this.processedNodes.splice(0); // Remove the processed nodes\n                        }\n                        this.processedNodes.push(node.id);\n                        this.addDynamicEdges([node], [results], [query]); // Insert dynamic nodes and edges for this clicked node\n                    });\n            }\n        }\n    }\n\n\n    // Network provider interface\n\n    /**\n     * Process a clicked source node, if the trigger of the edge type is \"onclick\"\n     * @param node The clicked node\n     */\n    onNodeClicked(node?: Node) {\n        if(this.active && this.edgeType.trigger === \"onclick\" && node && node.type === this.edgeType.nodeTypes[0] && !this.dataset.hasNode(node.id)) {\n            this.processNode(node);\n        }\n    }\n    \n    /**\n     * Returns an Action allowing to process a node, if the trigger of the edge type\n     * is \"manual\".\n     * @param node The clicked node\n     */\n    getNodeActions(node: Node): Action[] {\n        const actions = super.getNodeActions(node);\n        if(this.active && this.edgeType.trigger === \"manual\" && node && node.type === this.edgeType.nodeTypes[0] && !this.dataset.hasNode(node.id)) {            \n            actions.push(new Action({\n                icon: \"fas fa-expand-arrows-alt\",\n                title: this.context.intlService.formatMessage(\"msg#network.actions.expandNode\", {label: node.label}),\n                action: () => {\n                    this.processNode(node);\n                }\n            }));            \n        }\n        return actions;\n    }\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/DynamicEdgeType.html":{"url":"interfaces/DynamicEdgeType.html","title":"interface - DynamicEdgeType","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  DynamicEdgeType\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            network/providers/dynamic-edge-provider.ts\n        \n\n            \n                Description\n            \n            \n                Extension of the EdgeType interface, to include properties specific\nto dynamic edges, in particular a function that returns a Query object\nfor a given source node.\n\n            \n\n            \n                Extends\n            \n            \n                        EdgeType\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        count\n                                \n                                \n                                        getQuery\n                                \n                                \n                                        trigger\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        count\n                                    \n                                \n                                \n                                    \n                                        count:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    count limits the number of records returned by the query service and allows for pagination \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        getQuery\n                                    \n                                \n                                \n                                    \n                                        getQuery:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Returns a query object to execute to obtain dynamic edges from a node \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        trigger\n                                    \n                                \n                                \n                                    \n                                        trigger:     \"oninsert\" | \"onclick\" | \"manual\"\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     \"oninsert\" | \"onclick\" | \"manual\"\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Defines when the dynamic edge should be executed. Warning: oninsert may generate multiple simultaneous queries \n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { Query } from '@sinequa/core/app-utils';\nimport { Results, Record } from '@sinequa/core/web-services';\nimport { EdgeType, Node, Edge, NetworkProvider, NetworkDataset } from '../network-models';\nimport { RecordsProvider, StructuralEdgeType, RecordNode } from './records-provider';\nimport { combineLatest } from 'rxjs';\nimport { Action } from '@sinequa/components/action';\n\n/**\n * Extension of the Edge interface, to include the record property\n * from which this edge is generated\n */\nexport interface DynamicEdge extends Edge {\n    record: Record;\n}\n\n/**\n * Extension of the EdgeType interface, to include properties specific\n * to dynamic edges, in particular a function that returns a Query object\n * for a given source node.\n */\nexport interface DynamicEdgeType extends EdgeType {\n    /** Returns a query object to execute to obtain dynamic edges from a node */\n    getQuery: (node: Node, type: DynamicEdgeType) => Query | undefined;\n    /** count limits the number of records returned by the query service and allows for pagination */\n    count?: number;\n    /** Defines when the dynamic edge should be executed. Warning: oninsert may generate multiple simultaneous queries */\n    trigger: \"oninsert\" | \"onclick\" | \"manual\";\n}\n\n/**\n * Tests whether a given edge type is a DynamicEdgeType\n * @param et an edge type\n */\nexport function isDynamicEdgeType(et: EdgeType): et is DynamicEdgeType {\n    return !!(et as DynamicEdgeType).getQuery;\n}\n\n\n/**\n * A extension of the RecordsProvider, where records are not directly\n * provided, but are instead fetched from the server via a Query specific\n * to a source node.\n * Concretely, the dynamic edge provider will attach one (or more) record nodes\n * (and their structural edges) to one (or more) source nodes, whose type is\n * specified in the DynamicEdgeType.\n * Dynamic edges can be attached right when the source nodes are inserted (oninsert),\n * or when a user clicks on a source node (onclick) or when a user clicks on an\n * action button displayed when a source node is clicked.\n * Note that the \"source node\" have to come from different providers, so it is\n * necessary to listen to these providers and update the data generated by this\n * provider accordingly.\n */\nexport class DynamicEdgeProvider extends RecordsProvider {\n\n    /** List of the source nodes that have been already processed via clicks or actions */\n    protected processedNodes: string[] = [];\n    /** to avoid fetching the same data multiple times, we store the record objects fetched from the server in this cache */\n    protected nodeCache = new Map();\n\n    constructor(\n        public name: string,\n        protected edgeType: DynamicEdgeType,\n        protected secondaryEdgeTypes: StructuralEdgeType[],\n        protected permanent: boolean,\n        protected sourceProviders: NetworkProvider[]\n    ){\n        super(name, edgeType.nodeTypes[1], secondaryEdgeTypes, [], false);\n\n        combineLatest(sourceProviders.map(p => p.getProvider())).subscribe(dataset => {\n            if(this.active) {\n                // Merge the nodes from all datasets into a map\n                const map = new Map();\n                dataset.forEach(dataset => {\n                    dataset.getNodes().forEach(node => {\n                        if(node.visible && node.type === this.edgeType.nodeTypes[0]) {\n                            map.set(node.id, node);\n                        }\n                    });\n                });\n                // Update the dataset of dynamic edges\n                this.updateDynamicDataset(Array.from(map.values()));\n            }\n        });\n    }\n    \n    /**\n     * Rebuilds the dataset of this provider, given a list of source nodes to process.\n     * @param sourceNodes A list of source node to process\n     */\n    protected updateDynamicDataset(sourceNodes: Node[]) {\n\n        // We rebuild the dataset from scratch, in case some source nodes were removed\n        this.dataset = new NetworkDataset();\n\n        // If oninsert, we want to process all the source nodes. If not, we want to process the nodes in the processedNodes list\n        if(this.edgeType.trigger !== \"oninsert\") {\n            this.processedNodes = this.processedNodes.filter(id => !!sourceNodes.find(node => node.id === id)); // We want to \"forget\" the nodes that are not in the source anymore\n            sourceNodes = sourceNodes.filter(node => this.processedNodes.indexOf(node.id) !== -1); // We want to process only the nodes currently in the processed list\n        }\n\n        // For each source, we get its query\n        const queries = sourceNodes.map(node => this.nodeCache.has(node.id)? undefined : this.edgeType.getQuery(node, this.edgeType));\n        const _queries = queries.filter(q => !!q) as Query[];\n        // If there are queries, we process them asynchronously\n        if(_queries.length > 0) {\n            this.context.searchService.getMultipleResults(_queries, undefined).subscribe(res => {\n                this.addDynamicEdges(sourceNodes, res.results, queries);\n            });\n        }\n        // If not, we process them synchronously\n        else {\n            this.addDynamicEdges(sourceNodes, [], queries);\n        }\n    \n    }\n\n    /**\n     * Add dynamic edges to a list of source nodes, given a results set\n     * for each of these nodes (either directly provided or stored in the cache).\n     * @param sourceNodes The source nodes\n     * @param res The list of results sets\n     * @param queries The list of queries from which we obtained the results\n     */\n    protected addDynamicEdges(sourceNodes: Node[], res: Results[], queries: (Query|undefined)[]){\n        let j = 0;\n        // For each source node\n        for(let i = 0; i this.createEdge(this.edgeType, node, rNode, undefined, node.visible, {record: rNode.record}) as DynamicEdge);\n    }\n\n    /**\n     * Attach dynamic edges to a given node, either synchronously, if the results set\n     * is available in the cache, or asynchronously, by fetching the data from the server.\n     * @param node The node to process\n     */\n    protected processNode(node: Node) {\n        const query = this.edgeType.getQuery(node, this.edgeType); // Get the search query for this node\n        if(query){\n            if(this.nodeCache.has(node.id)) {\n                if(!this.permanent) {\n                    this.dataset.clear(); // Remove data from previously clicked node\n                    this.processedNodes.splice(0); // Remove the processed nodes\n                }\n                this.processedNodes.push(node.id);\n                this.addDynamicEdges([node], [], [query]); // Insert dynamic nodes and edges for this clicked node\n            }\n            else {\n                this.context.searchService.getResults(query, undefined, {searchInactive: true})\n                    .subscribe(results => {\n                        if(!this.permanent) {\n                            this.dataset.clear(); // Remove data from previously clicked node\n                            this.processedNodes.splice(0); // Remove the processed nodes\n                        }\n                        this.processedNodes.push(node.id);\n                        this.addDynamicEdges([node], [results], [query]); // Insert dynamic nodes and edges for this clicked node\n                    });\n            }\n        }\n    }\n\n\n    // Network provider interface\n\n    /**\n     * Process a clicked source node, if the trigger of the edge type is \"onclick\"\n     * @param node The clicked node\n     */\n    onNodeClicked(node?: Node) {\n        if(this.active && this.edgeType.trigger === \"onclick\" && node && node.type === this.edgeType.nodeTypes[0] && !this.dataset.hasNode(node.id)) {\n            this.processNode(node);\n        }\n    }\n    \n    /**\n     * Returns an Action allowing to process a node, if the trigger of the edge type\n     * is \"manual\".\n     * @param node The clicked node\n     */\n    getNodeActions(node: Node): Action[] {\n        const actions = super.getNodeActions(node);\n        if(this.active && this.edgeType.trigger === \"manual\" && node && node.type === this.edgeType.nodeTypes[0] && !this.dataset.hasNode(node.id)) {            \n            actions.push(new Action({\n                icon: \"fas fa-expand-arrows-alt\",\n                title: this.context.intlService.formatMessage(\"msg#network.actions.expandNode\", {label: node.label}),\n                action: () => {\n                    this.processNode(node);\n                }\n            }));            \n        }\n        return actions;\n    }\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/DynamicNodeType.html":{"url":"interfaces/DynamicNodeType.html","title":"interface - DynamicNodeType","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  DynamicNodeType\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            network/providers/dynamic-node-provider.ts\n        \n\n            \n                Description\n            \n            \n                Extension of the NodeType interface with additional properties specific\nto dynamic nodes, in particular the getQuery() function that returns a\nquery given a node\n\n            \n\n            \n                Extends\n            \n            \n                        NodeType\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        getQuery\n                                \n                                \n                                        trigger\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        getQuery\n                                    \n                                \n                                \n                                    \n                                        getQuery:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Returns a query object to execute to obtain a record for this node \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        trigger\n                                    \n                                \n                                \n                                    \n                                        trigger:     \"oninsert\" | \"onclick\" | \"manual\"\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     \"oninsert\" | \"onclick\" | \"manual\"\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Defines when the query should be executed. Warning: oninsert may generate multiple simultaneous queries \n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { Query } from '@sinequa/core/app-utils';\nimport { Record } from '@sinequa/core/web-services';\nimport { NodeType, Node, NetworkProvider, NetworkDataset } from '../network-models';\nimport { RecordsProvider, StructuralEdgeType, RecordNode } from './records-provider';\nimport { Utils } from '@sinequa/core/base';\nimport { combineLatest } from 'rxjs';\nimport { Action } from '@sinequa/components/action';\n\n/**\n * Extension of the NodeType interface with additional properties specific\n * to dynamic nodes, in particular the getQuery() function that returns a\n * query given a node\n */\nexport interface DynamicNodeType extends NodeType {\n    /** Returns a query object to execute to obtain a record for this node */\n    getQuery: (node: Node) => Query|undefined;\n    /** Defines when the query should be executed. Warning: oninsert may generate multiple simultaneous queries */\n    trigger: \"oninsert\" | \"onclick\" | \"manual\";\n}\n\n/**\n * An extension of the RecordsProvider which manages dynamic node types.\n * Dynamic nodes are nodes that are transformed into record nodes via a\n * query. The records are fetched from the server dynamic to enrich the\n * original node.\n * For example, a simple metadata node with the value \"Bill Gates\" can be\n * enriched with the wikipedia page of Bill Gate, which can provide a lot\n * of structured information about Bill Gates (which can be used, for\n * example, to attach structural edges to the original Bill Gates node).\n * Note that the \"source node\" have to come from different providers, so it is\n * necessary to listen to these providers and update the data generated by this\n * provider accordingly.\n */\nexport class DynamicNodeProvider extends RecordsProvider {\n\n    /** List of the source nodes that have been already processed via clicks or actions */\n    protected processedNodes: string[] = [];\n    /** to avoid fetching the same data multiple times, we store the record objects fetched from the server in this cache */\n    protected nodeCache = new Map();\n\n    constructor(\n        public name: string,\n        protected nodeType: DynamicNodeType,\n        protected edgeTypes: StructuralEdgeType[],\n        protected permanent: boolean,\n        protected sourceProviders: NetworkProvider[]\n    ){\n        super(name, nodeType, edgeTypes, [], false);\n        \n        combineLatest(sourceProviders.map(p => p.getProvider())).subscribe(dataset => {\n            if(this.active){\n                // \"Merge\" the nodes from all datasets into a map\n                const map = new Map();\n                dataset.forEach(dataset => {\n                    dataset.getNodes().forEach(node => {\n                        if(node.visible && node.type === this.nodeType) {\n                            map.set(node.id, node);\n                        }\n                    });\n                });\n                // Update the dataset of dynamic edges\n                this.updateDynamicDataset(Array.from(map.values()));\n            }\n        });\n    }\n\n    /**\n     * Rebuild the dataset of this provider given a list of source nodes to process\n     * @param sourceNodes A list of source nodes to process\n     */\n    protected updateDynamicDataset(sourceNodes: Node[]) {\n        \n        // We rebuild the dataset from scratch, in case some source nodes were removed\n        this.dataset = new NetworkDataset();\n\n        // If oninsert, we want to process all the source nodes. If not, we want to process the nodes in the processedNodes list\n        if(this.nodeType.trigger !== \"oninsert\") {\n            this.processedNodes = this.processedNodes.filter(id => !!sourceNodes.find(node => node.id === id)); // We want to \"forget\" the nodes that are not in the source anymore\n            sourceNodes = sourceNodes.filter(node => this.processedNodes.indexOf(node.id) !== -1); // We want to process only the nodes currently in the processed list\n        }\n        \n        // For each source, we get its query\n        const queries = sourceNodes.map(node => (this.nodeCache.has(node.id) || (node as RecordNode).record)? undefined : this.nodeType.getQuery(node));\n        const _queries = queries.filter(q => !!q) as Query[];\n        // If there are queries, we process them asynchronously\n        if(_queries.length > 0) {\n            this.context.searchService.getMultipleResults(_queries, undefined).subscribe(res => {\n                this.mutateNodes(sourceNodes as RecordNode[], res.results.map(r => r.records.length > 0? r.records[0] : undefined), queries);\n            });\n        }\n        else {\n            this.mutateNodes(sourceNodes as RecordNode[], [], queries);\n        }\n    }\n\n    /**\n     * Processes a given node: If the record for this node is available\n     * in the node cache, we take this record and mutate the node. If not,\n     * we get the query via the dynamic node type's getQuery() function,\n     * and mutate the node upon results.\n     * @param node A source node to process\n     */\n    protected processNode(node: RecordNode) {\n        if(!this.permanent) {\n            this.dataset.clear(); // Remove data from previously clicked node\n            this.processedNodes.splice(0); // Remove the processed nodes\n        }\n\n        this.processedNodes.push(node.id);\n        if(this.nodeCache.has(node.id)) {\n            this.mutateNode(node, this.nodeCache[node.id]);\n            this.provider.next(this.dataset);\n        }\n        else {\n            const query = this.nodeType.getQuery(node);\n            if(query) {\n                this.context.searchService.getResults(query, undefined, {searchInactive: true}).subscribe(results => {\n                    if(results.records.length > 0) {\n                        this.mutateNode(node, results.records[0]);\n                    }\n                    this.provider.next(this.dataset);\n                });\n            }\n        }       \n    }\n\n    /**\n     * Mutates a list of nodes, given a corresponding list of records\n     * and of queries. Manages to get the record objects either from\n     * these inputs or from the cache.\n     * @param nodes The list of node to mutate\n     * @param records The list of records for each node\n     * @param queries The list of queries for each node\n     */\n    protected mutateNodes(nodes: RecordNode[], records: (Record|undefined)[], queries: (Query|undefined)[]) {\n        let j = 0;\n        for(let i = 0; i {\n            this.addStructuralEdges(node, type);\n        });\n    }\n\n    /**\n     * (Re-)computes the node options of a node (after mutation)\n     * @param node a node\n     */\n    protected refreshNodeOptions(node: Node) {\n        let options;\n        if(typeof this.nodeType.nodeOptions === \"function\") {\n            options = this.nodeType.nodeOptions(node, this.nodeType);\n        }\n        else {\n            options = this.nodeType.nodeOptions;\n        }\n        return Utils.extend(node, options);\n    }\n    \n    // Network provider interface\n\n    /**\n     * Process a clicked node, for dynamic node types with an \"onclick\" trigger\n     * @param node The clicked node\n     */\n    onNodeClicked(node?: RecordNode) {\n        if(this.active && this.nodeType.trigger === \"onclick\" && node && node.type === this.nodeType && this.processedNodes.indexOf(node.id) === -1) {\n            this.processNode(node);\n        }\n    }\n\n    /**\n     * Creates an action to process a clicked node, for dynamic node types\n     * with a \"manual\" trigger.\n     * @param node The clicked node\n     */\n    getNodeActions(node: RecordNode): Action[] {\n        const actions = super.getNodeActions(node);\n        if(this.active && this.nodeType.trigger === \"manual\" && node && node.type === this.nodeType && this.processedNodes.indexOf(node.id) === -1) {\n            actions.unshift(new Action({\n                icon: \"fas fa-star-of-life\",\n                title: this.context.intlService.formatMessage(\"msg#network.actions.expandNode\", {label: node.label}),\n                action: () => {\n                    this.processNode(node);\n                }\n            }));\n        }\n        return actions;\n    }\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Edge.html":{"url":"interfaces/Edge.html","title":"interface - Edge","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  Edge\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            network/network-models.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        context\n                                \n                                \n                                        count\n                                \n                                \n                                            Optional\n                                        fieldValue\n                                \n                                \n                                        from\n                                \n                                \n                                        id\n                                \n                                \n                                        provider\n                                \n                                \n                                        to\n                                \n                                \n                                        type\n                                \n                                \n                                        visible\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        context\n                                    \n                                \n                                \n                                    \n                                        context:         NetworkContext\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         NetworkContext\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        count\n                                    \n                                \n                                \n                                    \n                                        count:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    count is a property representing the strength of an edge, which scales the count of adjacent nodes\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        fieldValue\n                                    \n                                \n                                \n                                    \n                                        fieldValue:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    A field value may be provided to filter search based on the edge field type \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        from\n                                    \n                                \n                                \n                                    \n                                        from:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                    \n                                \n                                \n                                    \n                                        id:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        provider\n                                    \n                                \n                                \n                                    \n                                        provider:         NetworkProvider\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         NetworkProvider\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        to\n                                    \n                                \n                                \n                                    \n                                        to:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        type\n                                    \n                                \n                                \n                                    \n                                        type:         EdgeType\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         EdgeType\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        visible\n                                    \n                                \n                                \n                                    \n                                        visible:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Subject } from 'rxjs';\nimport { Action } from '@sinequa/components/action';\nimport { Utils } from '@sinequa/core/base';\nimport { DataSet } from \"vis-data/peer/esm/vis-data\";\nimport { SearchService } from '@sinequa/components/search';\nimport { VisNetworkService } from 'ngx-vis';\nimport { AppService, ExprBuilder } from '@sinequa/core/app-utils';\nimport { IntlService } from '@sinequa/core/intl';\n\n// TYPES (configuration)\n\nexport interface NodeType {\n    name: string;\n    /** Vis Node options (merged in the Node objects). See https://visjs.github.io/vis-network/docs/network/nodes.html */\n    nodeOptions: {[key: string]: any} | ((node: Node, type: NodeType) => {[key: string]: any} );\n    /** If a field is provided, it can be used to filter the node value (and access the label, formatter, etc.) */\n    field?: string;\n}\n\nexport interface EdgeType {\n    /** Node types attached to this edge type. Should typically be 2 items, but cooccurrence aggregation might return more */\n    nodeTypes: NodeType[];\n    /** Vis Edge options (merged in the Edge objects). See https://visjs.github.io/vis-network/docs/network/edges.html */\n    edgeOptions: {[key: string]: any} | ((nodes: Node[], edge: Edge, type: EdgeType) => {[key: string]: any} );\n    /** If a field is provided, it can be used to filter the node value (and access the label, formatter, etc.) */\n    field?: string;\n}\n\n\n// DATA\n\n// Nodes (based on Vis Node interface)\n\nexport interface Node {\n    id: string;\n    label: string;\n\n    // Custom properties\n    type: NodeType;\n    provider: NetworkProvider;\n    visible: boolean;\n    /** count is a mutable property used to scale the node size in function of the size of adjacent edges*/\n    count: number;\n    /** the precedence of a node determines which node object is kept when merging two dataset (the highest precedence node is kept) */\n    precedence?: number;\n    // Context\n    context: NetworkContext;\n}\n\n// Edge (based on Vis Edge interface)\n\nexport interface Edge {\n    id: string;\n    from: string;\n    to: string;\n\n    // Custom properties\n    type: EdgeType;\n    provider: NetworkProvider;\n    visible: boolean;    \n    /** count is a property representing the strength of an edge, which scales the count of adjacent nodes*/\n    count: number;\n    /** A field value may be provided to filter search based on the edge field type */\n    fieldValue?: string;\n    // Context\n    context: NetworkContext;\n}\n\n\nexport interface NetworkProvider {\n    /** Whether or not the provider is active (if inactive, it will not provide empty datasets of nodes and edges) */\n    active: boolean;\n\n    /** Readable name of this provider */\n    name: string;\n\n    /** Dataset of this provider */\n    dataset: NetworkDataset;\n\n    /** Context (wrapper for general data about the network and services) */\n    context: NetworkContext;\n\n    /** Returns the Subject of this provider */\n    getProvider(): Subject;\n\n    /** Asynchronously provide data via it's provider Subject */\n    getData(context: NetworkContext); // skip/count handled internally\n\n    /** Called after the datasets provided by all providers have been merged into a single dataset */\n    onDatasetsMerged(dataset: NetworkDataset);\n\n    /** Called after the dataset is filtered and passed to Vis for rendering */\n    onNodesInserted(nodes: Node[]);\n\n    /** Called when ANY node is clicked in the rendered view of the network */\n    onNodeClicked(node: Node | undefined);\n\n    /** Called when ANY edge is clicked in the rendered view of the network */\n    onEdgeClicked(edge: Edge | undefined);\n\n    /** Retrieve the list of action for this provider. */\n    getProviderActions(): Action[];\n\n    /** Retrieve the list of action for a given node, and this provider. */\n    getNodeActions(node: Node): Action[];\n    \n    /** Retrieve the list of action for a given edge, and this provider. */\n    getEdgeActions(edge: Edge): Action[];\n\n    /** Called when the providers are discarded. Can be use to cancel subscriptions */\n    onDestroy();\n}\n\nexport interface NetworkContext {\n    /** Name of this network, for use in selections */\n    name: string;\n    /** Vis.js data structures */\n    nodes: DataSet;\n    edges: DataSet;\n    /** Useful services */\n    searchService: SearchService;\n    networkService: VisNetworkService;\n    appService: AppService;\n    intlService: IntlService;\n    exprBuilder: ExprBuilder;\n    /** Interactions */\n    select(node?: Node, edge?: Edge): void;\n}\n\n\nexport class NetworkDataset {\n\n    // Node index\n    private readonly nodeIdx: Map = new Map();\n\n    // Edge index\n    private readonly edgeIdx: Map = new Map();\n\n\n    /** Returns whether this node exists */\n    public hasNode(id: string): boolean {\n        return this.nodeIdx.has(id);\n    }\n    \n    /** Returns whether this edge exists */\n    public hasEdge(id: string): boolean {\n        return this.edgeIdx.has(id);\n    }\n\n    /** Returns the node with given id */\n    public getNode(id: string): Node | undefined {\n        return this.nodeIdx.get(id);\n    }\n\n    /** Returns the edge with given id */\n    public getEdge(id: string): Edge | undefined {\n        return this.edgeIdx.get(id);\n    }\n\n    /** Get the list of nodes */\n    public getNodes(): Node[] {\n        return Array.from(this.nodeIdx.values());\n    }\n\n    /** Get the list of edges */\n    public getEdges(): Edge[] {\n        return Array.from(this.edgeIdx.values());\n    }    \n\n    /** Get the list of visible nodes */\n    public getVisibleNodes(): Node[] {\n        return this.getNodes().filter(n => n.visible);\n    }\n\n    /** Get the list of visible edges */\n    public getVisibleEdges(): Edge[] {\n        return this.getEdges().filter(e => e.visible);\n    }\n\n    /** Get the list of node ids */\n    public getNodeIds(): string[] {\n        return Array.from(this.nodeIdx.keys());\n    }\n\n    /** Get the list of edge ids */\n    public getEdgeIds(): string[] {\n        return Array.from(this.edgeIdx.keys());\n    }\n    \n    /** Clears this dataset */\n    public clear() {\n        this.nodeIdx.clear();\n        this.edgeIdx.clear();\n    }\n\n    /** Add one or multiple nodes */\n    public addNodes(nodes: Node | Node[]) {\n        Array.isArray(nodes)? nodes.forEach(node => this.addNode(node)) : this.addNode(nodes);\n    }\n\n    /** Add one or multiple edges. */\n    public addEdges(edges: Edge | Edge[]) {\n        Array.isArray(edges)? edges.forEach(edge => this.addEdge(edge)) : this.addEdge(edges);\n    }\n\n    /** Remove one or multiple nodes. /!\\ Connected edges MUST be removed as well (use cleanRemoveNode() to do so) */\n    private removeNodes(ids: string | string[]) {\n        Array.isArray(ids)? ids.forEach(id => this.removeNode(id)) : this.removeNode(ids);\n    }\n\n    /** Remove one or multiple edges. */\n    public removeEdges(ids: string | string[]) {\n        Array.isArray(ids)? ids.forEach(id => this.removeEdge(id)) : this.removeEdge(ids);\n    }\n\n    /** Remove a node and its adjacent edges. keepDanglingNodes = false (default) removes the remaining nodes with no neighbor */\n    public cleanRemoveNode(nodeId: string, keepDanglingNodes?: boolean) {\n        this.getAdjacentEdges(nodeId).forEach(edge => {\n            const neighbor = this.getNode(edge.from === nodeId ? edge.to : edge.from) as Node;\n            this.removeEdges(edge.id);\n            neighbor.count -= edge.count;\n            if(!keepDanglingNodes && this.getAdjacentEdges(neighbor.id).length === 0) {\n                this.removeNodes(neighbor.id);\n            }\n        });\n    }\n\n    /** Get the edges adjacent to a node (O(n) method) */\n    public getAdjacentEdges(nodeId: string): Edge[] {\n        return this.getEdges().filter(e => e.from === nodeId || e.to === nodeId);\n    }\n\n    /** Get the nodes connected to a node via a single node (0(n) method) */\n    public getConnectedNodes(nodeId: string): Node[] {\n        return this.getAdjacentEdges(nodeId)\n                    .map(e => this.getNode(e.from === nodeId ? e.to : e.from) as Node);\n    }\n\n    /**\n     * Merge this dataset with another one. \n     * \n     * When duplicates nodes or edges are found:\n     * - The existing item is kept and updated\n     * - Their 'count' properties are added\n     * - Their 'visible' properties are ORed\n     * - Their nodeOptions and edgeOptions are updated\n     * \n     * @param dataset \n     */\n    public merge(dataset: NetworkDataset): NetworkDataset {\n\n        dataset.getNodes().forEach(node => {\n            node = Object.assign({}, node); // Avoid modifying the original datasets\n            if(!this.hasNode(node.id)) {\n                this.addNode(node);\n            }\n            else {\n                // Merge the new node with the existing one (which takes precedence by default)\n                let existingNode = this.getNode(node.id) as Node;\n                if((node.precedence || 0) > (existingNode.precedence || 0)) {\n                    // Set the new node in the node index\n                    this.nodeIdx.set(node.id, node);\n                    // swap existingNode and node for the merging of count, visible and node options\n                    const temp = node;\n                    node = existingNode;\n                    existingNode = temp;\n                }\n                existingNode.count += node.count;\n                existingNode.visible = existingNode.visible || node.visible;\n                let options: {[key: string]: any};\n                if(typeof existingNode.type.nodeOptions === \"function\") {\n                    options = existingNode.type.nodeOptions(existingNode, existingNode.type);\n                }\n                else {\n                    options = existingNode.type.nodeOptions;\n                }\n                Utils.extend(existingNode, options);\n            }\n        });\n\n        dataset.getEdges().forEach(edge => {\n            edge = Object.assign({}, edge); // Avoid modifying the original datasets\n            if(!this.hasEdge(edge.id)) {\n                this.addEdge(edge);\n            }\n            else {\n                // Merge the new edge with the existing one (which takes precedence)\n                // eg. statistical and semantic edges\n                const existingEdge = this.getEdge(edge.id) as Edge;\n                existingEdge.count += edge.count;\n                existingEdge.visible = existingEdge.visible || edge.visible;\n                // Merge edge labels (taking duplicates into account)\n                if(!!existingEdge[\"label\"] && !!edge[\"label\"]){\n                    edge[\"labels\"].forEach(label => {\n                        if(existingEdge[\"labels\"].indexOf(label) === -1) {\n                            existingEdge[\"label\"] += \", \"+label;\n                            existingEdge[\"labels\"].push(label);\n                        }\n                    });\n                }\n                let options: {[key: string]: any};\n                if(typeof existingEdge.type.edgeOptions === \"function\") {\n                    const nodes = [existingEdge.from, existingEdge.to].map(id => this.nodeIdx[id]);\n                    options = existingEdge.type.edgeOptions(nodes, existingEdge, existingEdge.type);\n                }\n                else {\n                    options = existingEdge.type.edgeOptions;\n                }\n                Utils.extend(existingEdge, options);\n            }\n        });\n\n        return this;\n    }\n\n    /** Transfer nodes and edges to the Vis nodes and edges DataSets */\n    updateDatasets(nodes: DataSet, edges: DataSet) {\n        nodes.remove(nodes.get().filter(n => !this.getNode(n.id)?.visible));\n        edges.remove(edges.get().filter(e => !this.getEdge(e.id)?.visible));\n        nodes.update(this.getVisibleNodes());\n        edges.update(this.getVisibleEdges());\n    }\n\n    \n    private addNode(node: Node) {\n        if(this.hasNode(node.id)) {\n            throw new Error(`Node '${node.id}' already in dataset`);\n        }\n        this.nodeIdx.set(node.id, node);\n    }\n    \n    private addEdge(edge: Edge) {\n        if(this.hasEdge(edge.id)) {\n            throw new Error(`Edge '${edge.id}' already in dataset`);\n        }\n        if(!this.hasNode(edge.from) || !this.hasNode(edge.to)) {\n            throw new Error(`Edge '${edge.id}' cannot be added as one of the nodes is missing from the dataset`)\n        }\n        this.edgeIdx.set(edge.id, edge);\n    }\n\n    private removeNode(id: string) {\n        this.nodeIdx.delete(id);\n    }\n\n    private removeEdge(id: string) {\n        this.edgeIdx.delete(id);\n    }\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/EdgeType.html":{"url":"interfaces/EdgeType.html","title":"interface - EdgeType","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  EdgeType\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            network/network-models.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        edgeOptions\n                                \n                                \n                                            Optional\n                                        field\n                                \n                                \n                                        nodeTypes\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        edgeOptions\n                                    \n                                \n                                \n                                    \n                                        edgeOptions:     literal type | \n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type | \n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Vis Edge options (merged in the Edge objects). See https://visjs.github.io/vis-network/docs/network/edges.html \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        field\n                                    \n                                \n                                \n                                    \n                                        field:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    If a field is provided, it can be used to filter the node value (and access the label, formatter, etc.) \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        nodeTypes\n                                    \n                                \n                                \n                                    \n                                        nodeTypes:     NodeType[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     NodeType[]\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Node types attached to this edge type. Should typically be 2 items, but cooccurrence aggregation might return more \n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { Subject } from 'rxjs';\nimport { Action } from '@sinequa/components/action';\nimport { Utils } from '@sinequa/core/base';\nimport { DataSet } from \"vis-data/peer/esm/vis-data\";\nimport { SearchService } from '@sinequa/components/search';\nimport { VisNetworkService } from 'ngx-vis';\nimport { AppService, ExprBuilder } from '@sinequa/core/app-utils';\nimport { IntlService } from '@sinequa/core/intl';\n\n// TYPES (configuration)\n\nexport interface NodeType {\n    name: string;\n    /** Vis Node options (merged in the Node objects). See https://visjs.github.io/vis-network/docs/network/nodes.html */\n    nodeOptions: {[key: string]: any} | ((node: Node, type: NodeType) => {[key: string]: any} );\n    /** If a field is provided, it can be used to filter the node value (and access the label, formatter, etc.) */\n    field?: string;\n}\n\nexport interface EdgeType {\n    /** Node types attached to this edge type. Should typically be 2 items, but cooccurrence aggregation might return more */\n    nodeTypes: NodeType[];\n    /** Vis Edge options (merged in the Edge objects). See https://visjs.github.io/vis-network/docs/network/edges.html */\n    edgeOptions: {[key: string]: any} | ((nodes: Node[], edge: Edge, type: EdgeType) => {[key: string]: any} );\n    /** If a field is provided, it can be used to filter the node value (and access the label, formatter, etc.) */\n    field?: string;\n}\n\n\n// DATA\n\n// Nodes (based on Vis Node interface)\n\nexport interface Node {\n    id: string;\n    label: string;\n\n    // Custom properties\n    type: NodeType;\n    provider: NetworkProvider;\n    visible: boolean;\n    /** count is a mutable property used to scale the node size in function of the size of adjacent edges*/\n    count: number;\n    /** the precedence of a node determines which node object is kept when merging two dataset (the highest precedence node is kept) */\n    precedence?: number;\n    // Context\n    context: NetworkContext;\n}\n\n// Edge (based on Vis Edge interface)\n\nexport interface Edge {\n    id: string;\n    from: string;\n    to: string;\n\n    // Custom properties\n    type: EdgeType;\n    provider: NetworkProvider;\n    visible: boolean;    \n    /** count is a property representing the strength of an edge, which scales the count of adjacent nodes*/\n    count: number;\n    /** A field value may be provided to filter search based on the edge field type */\n    fieldValue?: string;\n    // Context\n    context: NetworkContext;\n}\n\n\nexport interface NetworkProvider {\n    /** Whether or not the provider is active (if inactive, it will not provide empty datasets of nodes and edges) */\n    active: boolean;\n\n    /** Readable name of this provider */\n    name: string;\n\n    /** Dataset of this provider */\n    dataset: NetworkDataset;\n\n    /** Context (wrapper for general data about the network and services) */\n    context: NetworkContext;\n\n    /** Returns the Subject of this provider */\n    getProvider(): Subject;\n\n    /** Asynchronously provide data via it's provider Subject */\n    getData(context: NetworkContext); // skip/count handled internally\n\n    /** Called after the datasets provided by all providers have been merged into a single dataset */\n    onDatasetsMerged(dataset: NetworkDataset);\n\n    /** Called after the dataset is filtered and passed to Vis for rendering */\n    onNodesInserted(nodes: Node[]);\n\n    /** Called when ANY node is clicked in the rendered view of the network */\n    onNodeClicked(node: Node | undefined);\n\n    /** Called when ANY edge is clicked in the rendered view of the network */\n    onEdgeClicked(edge: Edge | undefined);\n\n    /** Retrieve the list of action for this provider. */\n    getProviderActions(): Action[];\n\n    /** Retrieve the list of action for a given node, and this provider. */\n    getNodeActions(node: Node): Action[];\n    \n    /** Retrieve the list of action for a given edge, and this provider. */\n    getEdgeActions(edge: Edge): Action[];\n\n    /** Called when the providers are discarded. Can be use to cancel subscriptions */\n    onDestroy();\n}\n\nexport interface NetworkContext {\n    /** Name of this network, for use in selections */\n    name: string;\n    /** Vis.js data structures */\n    nodes: DataSet;\n    edges: DataSet;\n    /** Useful services */\n    searchService: SearchService;\n    networkService: VisNetworkService;\n    appService: AppService;\n    intlService: IntlService;\n    exprBuilder: ExprBuilder;\n    /** Interactions */\n    select(node?: Node, edge?: Edge): void;\n}\n\n\nexport class NetworkDataset {\n\n    // Node index\n    private readonly nodeIdx: Map = new Map();\n\n    // Edge index\n    private readonly edgeIdx: Map = new Map();\n\n\n    /** Returns whether this node exists */\n    public hasNode(id: string): boolean {\n        return this.nodeIdx.has(id);\n    }\n    \n    /** Returns whether this edge exists */\n    public hasEdge(id: string): boolean {\n        return this.edgeIdx.has(id);\n    }\n\n    /** Returns the node with given id */\n    public getNode(id: string): Node | undefined {\n        return this.nodeIdx.get(id);\n    }\n\n    /** Returns the edge with given id */\n    public getEdge(id: string): Edge | undefined {\n        return this.edgeIdx.get(id);\n    }\n\n    /** Get the list of nodes */\n    public getNodes(): Node[] {\n        return Array.from(this.nodeIdx.values());\n    }\n\n    /** Get the list of edges */\n    public getEdges(): Edge[] {\n        return Array.from(this.edgeIdx.values());\n    }    \n\n    /** Get the list of visible nodes */\n    public getVisibleNodes(): Node[] {\n        return this.getNodes().filter(n => n.visible);\n    }\n\n    /** Get the list of visible edges */\n    public getVisibleEdges(): Edge[] {\n        return this.getEdges().filter(e => e.visible);\n    }\n\n    /** Get the list of node ids */\n    public getNodeIds(): string[] {\n        return Array.from(this.nodeIdx.keys());\n    }\n\n    /** Get the list of edge ids */\n    public getEdgeIds(): string[] {\n        return Array.from(this.edgeIdx.keys());\n    }\n    \n    /** Clears this dataset */\n    public clear() {\n        this.nodeIdx.clear();\n        this.edgeIdx.clear();\n    }\n\n    /** Add one or multiple nodes */\n    public addNodes(nodes: Node | Node[]) {\n        Array.isArray(nodes)? nodes.forEach(node => this.addNode(node)) : this.addNode(nodes);\n    }\n\n    /** Add one or multiple edges. */\n    public addEdges(edges: Edge | Edge[]) {\n        Array.isArray(edges)? edges.forEach(edge => this.addEdge(edge)) : this.addEdge(edges);\n    }\n\n    /** Remove one or multiple nodes. /!\\ Connected edges MUST be removed as well (use cleanRemoveNode() to do so) */\n    private removeNodes(ids: string | string[]) {\n        Array.isArray(ids)? ids.forEach(id => this.removeNode(id)) : this.removeNode(ids);\n    }\n\n    /** Remove one or multiple edges. */\n    public removeEdges(ids: string | string[]) {\n        Array.isArray(ids)? ids.forEach(id => this.removeEdge(id)) : this.removeEdge(ids);\n    }\n\n    /** Remove a node and its adjacent edges. keepDanglingNodes = false (default) removes the remaining nodes with no neighbor */\n    public cleanRemoveNode(nodeId: string, keepDanglingNodes?: boolean) {\n        this.getAdjacentEdges(nodeId).forEach(edge => {\n            const neighbor = this.getNode(edge.from === nodeId ? edge.to : edge.from) as Node;\n            this.removeEdges(edge.id);\n            neighbor.count -= edge.count;\n            if(!keepDanglingNodes && this.getAdjacentEdges(neighbor.id).length === 0) {\n                this.removeNodes(neighbor.id);\n            }\n        });\n    }\n\n    /** Get the edges adjacent to a node (O(n) method) */\n    public getAdjacentEdges(nodeId: string): Edge[] {\n        return this.getEdges().filter(e => e.from === nodeId || e.to === nodeId);\n    }\n\n    /** Get the nodes connected to a node via a single node (0(n) method) */\n    public getConnectedNodes(nodeId: string): Node[] {\n        return this.getAdjacentEdges(nodeId)\n                    .map(e => this.getNode(e.from === nodeId ? e.to : e.from) as Node);\n    }\n\n    /**\n     * Merge this dataset with another one. \n     * \n     * When duplicates nodes or edges are found:\n     * - The existing item is kept and updated\n     * - Their 'count' properties are added\n     * - Their 'visible' properties are ORed\n     * - Their nodeOptions and edgeOptions are updated\n     * \n     * @param dataset \n     */\n    public merge(dataset: NetworkDataset): NetworkDataset {\n\n        dataset.getNodes().forEach(node => {\n            node = Object.assign({}, node); // Avoid modifying the original datasets\n            if(!this.hasNode(node.id)) {\n                this.addNode(node);\n            }\n            else {\n                // Merge the new node with the existing one (which takes precedence by default)\n                let existingNode = this.getNode(node.id) as Node;\n                if((node.precedence || 0) > (existingNode.precedence || 0)) {\n                    // Set the new node in the node index\n                    this.nodeIdx.set(node.id, node);\n                    // swap existingNode and node for the merging of count, visible and node options\n                    const temp = node;\n                    node = existingNode;\n                    existingNode = temp;\n                }\n                existingNode.count += node.count;\n                existingNode.visible = existingNode.visible || node.visible;\n                let options: {[key: string]: any};\n                if(typeof existingNode.type.nodeOptions === \"function\") {\n                    options = existingNode.type.nodeOptions(existingNode, existingNode.type);\n                }\n                else {\n                    options = existingNode.type.nodeOptions;\n                }\n                Utils.extend(existingNode, options);\n            }\n        });\n\n        dataset.getEdges().forEach(edge => {\n            edge = Object.assign({}, edge); // Avoid modifying the original datasets\n            if(!this.hasEdge(edge.id)) {\n                this.addEdge(edge);\n            }\n            else {\n                // Merge the new edge with the existing one (which takes precedence)\n                // eg. statistical and semantic edges\n                const existingEdge = this.getEdge(edge.id) as Edge;\n                existingEdge.count += edge.count;\n                existingEdge.visible = existingEdge.visible || edge.visible;\n                // Merge edge labels (taking duplicates into account)\n                if(!!existingEdge[\"label\"] && !!edge[\"label\"]){\n                    edge[\"labels\"].forEach(label => {\n                        if(existingEdge[\"labels\"].indexOf(label) === -1) {\n                            existingEdge[\"label\"] += \", \"+label;\n                            existingEdge[\"labels\"].push(label);\n                        }\n                    });\n                }\n                let options: {[key: string]: any};\n                if(typeof existingEdge.type.edgeOptions === \"function\") {\n                    const nodes = [existingEdge.from, existingEdge.to].map(id => this.nodeIdx[id]);\n                    options = existingEdge.type.edgeOptions(nodes, existingEdge, existingEdge.type);\n                }\n                else {\n                    options = existingEdge.type.edgeOptions;\n                }\n                Utils.extend(existingEdge, options);\n            }\n        });\n\n        return this;\n    }\n\n    /** Transfer nodes and edges to the Vis nodes and edges DataSets */\n    updateDatasets(nodes: DataSet, edges: DataSet) {\n        nodes.remove(nodes.get().filter(n => !this.getNode(n.id)?.visible));\n        edges.remove(edges.get().filter(e => !this.getEdge(e.id)?.visible));\n        nodes.update(this.getVisibleNodes());\n        edges.update(this.getVisibleEdges());\n    }\n\n    \n    private addNode(node: Node) {\n        if(this.hasNode(node.id)) {\n            throw new Error(`Node '${node.id}' already in dataset`);\n        }\n        this.nodeIdx.set(node.id, node);\n    }\n    \n    private addEdge(edge: Edge) {\n        if(this.hasEdge(edge.id)) {\n            throw new Error(`Edge '${edge.id}' already in dataset`);\n        }\n        if(!this.hasNode(edge.from) || !this.hasNode(edge.to)) {\n            throw new Error(`Edge '${edge.id}' cannot be added as one of the nodes is missing from the dataset`)\n        }\n        this.edgeIdx.set(edge.id, edge);\n    }\n\n    private removeNode(id: string) {\n        this.nodeIdx.delete(id);\n    }\n\n    private removeEdge(id: string) {\n        this.edgeIdx.delete(id);\n    }\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/FacetChartDataPoint.html":{"url":"interfaces/FacetChartDataPoint.html","title":"interface - FacetChartDataPoint","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  FacetChartDataPoint\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            ngx-charts/facet-chart/facet-chart.ts\n        \n\n\n            \n                Extends\n            \n            \n                        ChartDataPoint\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        $item\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        $item\n                                    \n                                \n                                \n                                    \n                                        $item:     AggregationItem\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     AggregationItem\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import {Component, Input, OnInit, OnDestroy, OnChanges, SimpleChanges} from \"@angular/core\";\nimport {Results, Aggregation, AggregationItem} from \"@sinequa/core/web-services\";\nimport {Utils} from \"@sinequa/core/base\";\nimport {IntlService} from \"@sinequa/core/intl\";\nimport {AppService} from \"@sinequa/core/app-utils\";\nimport {SelectionService} from '@sinequa/components/selection';\nimport {Subscription} from \"rxjs\";\nimport {ChartOptions, ChartDataPoint} from \"../chart/chart\";\nimport {FacetService, AbstractFacet} from \"@sinequa/components/facet\";\nimport {Action} from \"@sinequa/components/action\";\n\nexport interface FacetChartDataPoint extends ChartDataPoint {\n    $item: AggregationItem;\n}\n\n@Component({\n    selector: \"sq-facet-ngx-chart\",\n    templateUrl: \"./facet-chart.html\"\n})\nexport class FacetNgxChart extends AbstractFacet implements OnInit, OnChanges, OnDestroy {\n    @Input() results: Results;\n    @Input() aggregation: string;\n    @Input() aggregations: string[];\n    @Input() chartType: string;\n    @Input() colorScheme: string;\n    @Input() colors: string[] = [\"#7aa3e5\"];    // Single color (default is bar chart)\n    @Input() filteredColor: string = \"#C3E6CB\";\n    @Input() selectedColor: string = \"#7acce5\";\n\n    // Aggregation from the Results object\n    data: Aggregation | undefined;\n\n    // sq-charts inputs\n    dataPoints: FacetChartDataPoint[];\n    options: ChartOptions;\n\n    private readonly selectedValues = new Set();\n\n    // Actions (displayed in facet menu)\n    // All actions are built in the constructor\n    private readonly clearFilters: Action;\n    private readonly selectField: Action;\n\n    // Subscriptions\n    private localeChange: Subscription;\n    private selectionChange: Subscription;\n\n    constructor(\n        private facetService: FacetService,\n        private intlService: IntlService,\n        private selectionService: SelectionService,\n        private appService: AppService\n    ){\n        super();\n\n        // Clear the current filters\n        this.clearFilters = new Action({\n            icon: \"far fa-minus-square\",\n            title: \"msg#facet.clearSelects\",\n            action: () => {\n                this.facetService.clearFiltersSearch(this.getName(), true);\n            }\n        });\n\n        this.selectField = new Action({\n            title: \"Select field\",\n            updater: (action) => {\n                if(this.aggregations){\n                    action.name = this.aggregation;\n                    action.text = this.aggregation;\n                    action.children = this.aggregations\n                        .filter(v => v!==this.aggregation)\n                        .map(a => {\n                            return new Action({\n                                name: a,\n                                text: a,\n                                action : (item, event) => {\n                                    this.aggregation = a;\n                                    this.ngOnChanges(  {results: true});\n                                }\n                            });\n                        });\n                }\n            }\n        });\n\n    }\n\n    /**\n     * Name of the facet, used to create and retrieve selections\n     * through the facet service.\n     */\n    getName() : string {\n        return this.aggregation;\n    }\n\n    /**\n     * Returns all the actions that are relevant in the current context\n     */\n    get actions(): Action[] {\n        const actions: Action[] = [];\n        if(this.hasFiltered()) {\n            actions.push(this.clearFilters);\n        }\n        if(!!this.selectField.name) {\n            actions.push(this.selectField);\n        }\n        return actions;\n    }\n\n    /**\n     * Returns true if there is an active selection (or exclusion) from this facet\n     */\n    hasFiltered(): boolean {\n        return this.facetService.hasFiltered(this.getName());\n    }\n\n    /**\n     * Generates the sq-chart input data, including formatting\n     */\n    private makeData() {\n        this.dataPoints = [];\n        if(this.data && this.data.items){\n            for (const item of this.data.items) {\n                this.dataPoints.push({\n                    name: this.facetService.formatValue(item),\n                    value: item.count,\n                    $item: item\n                });\n            }\n        }\n    }\n\n    /**\n     * Update selected values (the value in the aggregation that belong to a selected document)\n     */\n    private updateSelectedValues(){\n        this.selectedValues.clear();\n        this.results.records\n            .filter(record => record.$selected)\n            .forEach(record => {\n                if(this.data){\n                    const val = record[this.appService.getColumnAlias(this.appService.getColumn(this.data.column))];\n                    if(val){\n                        if(Utils.isString(val)){    // Sourcestr\n                            this.selectedValues.add(val.toLowerCase());\n                        }\n                        if(Utils.isArray(val)){\n                            val.forEach(v => {\n                                if(Utils.isString(v))\n                                    this.selectedValues.add(v.toLowerCase()); // Sourcecsv\n                                else\n                                    this.selectedValues.add(v.value.toLowerCase()); // Entity\n                            });\n                        }\n                    }\n                }\n            });\n    }\n\n    /**\n     * Create the chart options\n     */\n    private createChartOptions(){\n        this.options = {\n            type: this.chartType,\n            tickFormatter: this.tickFormatter,\n            colorScheme: this.colorScheme\n        };\n\n        if (this.colors && this.colors.length > 0) {\n            this.options.getItemColor = (value: string): string => {\n                const index = this.dataPoints.findIndex(dataPoint => dataPoint.name === value);\n                if (index === -1) {\n                    return \"black\";\n                }\n                const item = this.getItem(this.dataPoints[index]);\n                if (item) {\n                    if (this.isFiltered(item)) {\n                        return this.filteredColor;\n                    }\n                    if(this.selectedValues.has(Utils.toSqlValue(item.value).toLowerCase())){\n                        return this.selectedColor;\n                    }\n                }\n                return this.colors[index % this.colors.length]; // Rolling colors scheme\n            };\n        }\n    }\n\n    tickFormatter = (value: any): string => {\n        if (Utils.isNumber(value)) {\n            // No fractional counts\n            if (value % 1 !== 0) {\n                return \"\";\n            }\n            return this.intlService.formatNumber(value);\n        }\n        return value;\n    }\n\n    /**\n     * Subscribe to language changes, in order to reformat the data points.\n     * Subscribe to selection changes, in order to highlight selected documents.\n     */\n    ngOnInit() {\n        this.localeChange = Utils.subscribe(this.intlService.events,\n            (value) => {\n                this.makeData();\n            });\n        this.selectionChange = this.selectionService.events.subscribe(event => {\n            this.ngOnChanges(  {results: true});\n        });\n    }\n\n\n    ngOnChanges(changes: SimpleChanges) {\n        this.selectField.update();\n\n        if (!!changes[\"results\"]) {\n            // may be null if no data\n            this.data = this.facetService.getAggregation(this.aggregation, this.results, {facetName: this.getName()});\n\n            this.updateSelectedValues();\n\n            this.createChartOptions();\n\n            this.makeData();\n        }\n    }\n\n    ngOnDestroy() {\n        this.localeChange.unsubscribe();\n        this.selectionChange.unsubscribe();\n    }\n\n    click(dataPoint: ChartDataPoint) {\n        if (this.data) {\n            const item = this.getItem(dataPoint);\n            if (!!item) {\n                if(!this.isFiltered(item))\n                    this.facetService.addFilterSearch(this.getName(), this.data, item);\n                else\n                    this.facetService.removeFilterSearch(this.getName(), this.data, item);\n            }\n        }\n    }\n\n    /**\n     * Returns true if the given AggregationItem is filtered\n     * @param item\n     */\n    isFiltered(item: AggregationItem) : boolean {\n        return !!this.data && this.facetService.itemFiltered(this.getName(), this.data, item);\n    }\n\n    getItem(dataPoint: ChartDataPoint): AggregationItem | undefined {\n        const _dataPoint = this.dataPoints.find(_dataPoint => _dataPoint.name === dataPoint.name && _dataPoint.value === dataPoint.value);\n        if (!!_dataPoint && !!_dataPoint.$item) {\n            return _dataPoint.$item;\n        }\n        return undefined;\n    }\n\n    /* AbstractFacet abstract methods */\n    isHidden(): boolean {\n        // Always display if multivalued\n        return !this.aggregations && (!this.data || !this.dataPoints);\n    }\n\n}\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/FacetNgxChart.html":{"url":"components/FacetNgxChart.html","title":"component - FacetNgxChart","body":"\n                   \n\n\n\n\n\n  Components\n  FacetNgxChart\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    ngx-charts/facet-chart/facet-chart.ts\n\n\n\n    \n        Extends\n    \n    \n            AbstractFacet\n    \n\n    \n        Implements\n    \n    \n                    OnInit\n                    OnChanges\n                    OnDestroy\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                sq-facet-ngx-chart\n            \n\n\n\n\n            \n                templateUrl\n                ./facet-chart.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                data\n                            \n                            \n                                dataPoints\n                            \n                            \n                                options\n                            \n                            \n                                tickFormatter\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                click\n                            \n                            \n                                getItem\n                            \n                            \n                                getName\n                            \n                            \n                                hasFiltered\n                            \n                            \n                                isFiltered\n                            \n                            \n                                isHidden\n                            \n                            \n                                ngOnChanges\n                            \n                            \n                                ngOnDestroy\n                            \n                            \n                                ngOnInit\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                aggregation\n                            \n                            \n                                aggregations\n                            \n                            \n                                chartType\n                            \n                            \n                                colors\n                            \n                            \n                                colorScheme\n                            \n                            \n                                filteredColor\n                            \n                            \n                                results\n                            \n                            \n                                selectedColor\n                            \n                        \n                    \n                \n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    actions\n                                \n                            \n                        \n                    \n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(facetService: FacetService, intlService: IntlService, selectionService: SelectionService, appService: AppService)\n                    \n                \n                        \n                            \n                                Defined in ngx-charts/facet-chart/facet-chart.ts:46\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        facetService\n                                                  \n                                                        \n                                                                    FacetService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        intlService\n                                                  \n                                                        \n                                                                    IntlService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        selectionService\n                                                  \n                                                        \n                                                                    SelectionService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        appService\n                                                  \n                                                        \n                                                                    AppService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        aggregation\n                    \n                \n                \n                    \n                        Type :         string\n\n                    \n                \n                        \n                            \n                                    Defined in ngx-charts/facet-chart/facet-chart.ts:22\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        aggregations\n                    \n                \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                        \n                            \n                                    Defined in ngx-charts/facet-chart/facet-chart.ts:23\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        chartType\n                    \n                \n                \n                    \n                        Type :         string\n\n                    \n                \n                        \n                            \n                                    Defined in ngx-charts/facet-chart/facet-chart.ts:24\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        colors\n                    \n                \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Default value : [\"#7aa3e5\"]\n                    \n                \n                        \n                            \n                                    Defined in ngx-charts/facet-chart/facet-chart.ts:26\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        colorScheme\n                    \n                \n                \n                    \n                        Type :         string\n\n                    \n                \n                        \n                            \n                                    Defined in ngx-charts/facet-chart/facet-chart.ts:25\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        filteredColor\n                    \n                \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : \"#C3E6CB\"\n                    \n                \n                        \n                            \n                                    Defined in ngx-charts/facet-chart/facet-chart.ts:27\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        results\n                    \n                \n                \n                    \n                        Type :     Results\n\n                    \n                \n                        \n                            \n                                    Defined in ngx-charts/facet-chart/facet-chart.ts:21\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        selectedColor\n                    \n                \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : \"#7acce5\"\n                    \n                \n                        \n                            \n                                    Defined in ngx-charts/facet-chart/facet-chart.ts:28\n                            \n                        \n            \n        \n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            click\n                        \n                        \n                    \n                \n            \n            \n                \nclick(dataPoint: ChartDataPoint)\n                \n            \n\n\n            \n                \n                    Defined in ngx-charts/facet-chart/facet-chart.ts:237\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dataPoint\n                                    \n                                                ChartDataPoint\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getItem\n                        \n                        \n                    \n                \n            \n            \n                \ngetItem(dataPoint: ChartDataPoint)\n                \n            \n\n\n            \n                \n                    Defined in ngx-charts/facet-chart/facet-chart.ts:257\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dataPoint\n                                    \n                                                ChartDataPoint\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     AggregationItem | undefined\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getName\n                        \n                        \n                    \n                \n            \n            \n                \ngetName()\n                \n            \n\n\n            \n                \n                    Defined in ngx-charts/facet-chart/facet-chart.ts:93\n                \n            \n\n\n            \n                \n                    Name of the facet, used to create and retrieve selections\nthrough the facet service.\n\n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            hasFiltered\n                        \n                        \n                    \n                \n            \n            \n                \nhasFiltered()\n                \n            \n\n\n            \n                \n                    Defined in ngx-charts/facet-chart/facet-chart.ts:114\n                \n            \n\n\n            \n                \n                    Returns true if there is an active selection (or exclusion) from this facet\n\n\n                    \n                        Returns :         boolean\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            isFiltered\n                        \n                        \n                    \n                \n            \n            \n                \nisFiltered(item: AggregationItem)\n                \n            \n\n\n            \n                \n                    Defined in ngx-charts/facet-chart/facet-chart.ts:253\n                \n            \n\n\n            \n                \n                    Returns true if the given AggregationItem is filtered\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    item\n                                    \n                                            AggregationItem\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            isHidden\n                        \n                        \n                    \n                \n            \n            \n                \nisHidden()\n                \n            \n\n\n            \n                \n                    Defined in ngx-charts/facet-chart/facet-chart.ts:266\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         boolean\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            ngOnChanges\n                        \n                        \n                    \n                \n            \n            \n                \nngOnChanges(changes: SimpleChanges)\n                \n            \n\n\n            \n                \n                    Defined in ngx-charts/facet-chart/facet-chart.ts:217\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    changes\n                                    \n                                                SimpleChanges\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            ngOnDestroy\n                        \n                        \n                    \n                \n            \n            \n                \nngOnDestroy()\n                \n            \n\n\n            \n                \n                    Defined in ngx-charts/facet-chart/facet-chart.ts:232\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            ngOnInit\n                        \n                        \n                    \n                \n            \n            \n                \nngOnInit()\n                \n            \n\n\n            \n                \n                    Defined in ngx-charts/facet-chart/facet-chart.ts:206\n                \n            \n\n\n            \n                \n                    Subscribe to language changes, in order to reformat the data points.\nSubscribe to selection changes, in order to highlight selected documents.\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n    \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            data\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Aggregation | undefined\n\n                        \n                    \n                        \n                            \n                                    Defined in ngx-charts/facet-chart/facet-chart.ts:31\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            dataPoints\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     FacetChartDataPoint[]\n\n                        \n                    \n                        \n                            \n                                    Defined in ngx-charts/facet-chart/facet-chart.ts:34\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            options\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         ChartOptions\n\n                        \n                    \n                        \n                            \n                                    Defined in ngx-charts/facet-chart/facet-chart.ts:35\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            tickFormatter\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : () => {...}\n                        \n                    \n                        \n                            \n                                    Defined in ngx-charts/facet-chart/facet-chart.ts:191\n                            \n                        \n\n\n            \n        \n\n\n    \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        actions\n                    \n                \n\n                \n                    \n                        getactions()\n                    \n                \n                            \n                                \n                                    Defined in ngx-charts/facet-chart/facet-chart.ts:100\n                                \n                            \n                    \n                        \n                                Returns all the actions that are relevant in the current context\n\n\n                                \n                                    Returns :     Action[]\n\n                                \n                        \n                    \n\n            \n        \n\n\n\n\n    \n        import {Component, Input, OnInit, OnDestroy, OnChanges, SimpleChanges} from \"@angular/core\";\nimport {Results, Aggregation, AggregationItem} from \"@sinequa/core/web-services\";\nimport {Utils} from \"@sinequa/core/base\";\nimport {IntlService} from \"@sinequa/core/intl\";\nimport {AppService} from \"@sinequa/core/app-utils\";\nimport {SelectionService} from '@sinequa/components/selection';\nimport {Subscription} from \"rxjs\";\nimport {ChartOptions, ChartDataPoint} from \"../chart/chart\";\nimport {FacetService, AbstractFacet} from \"@sinequa/components/facet\";\nimport {Action} from \"@sinequa/components/action\";\n\nexport interface FacetChartDataPoint extends ChartDataPoint {\n    $item: AggregationItem;\n}\n\n@Component({\n    selector: \"sq-facet-ngx-chart\",\n    templateUrl: \"./facet-chart.html\"\n})\nexport class FacetNgxChart extends AbstractFacet implements OnInit, OnChanges, OnDestroy {\n    @Input() results: Results;\n    @Input() aggregation: string;\n    @Input() aggregations: string[];\n    @Input() chartType: string;\n    @Input() colorScheme: string;\n    @Input() colors: string[] = [\"#7aa3e5\"];    // Single color (default is bar chart)\n    @Input() filteredColor: string = \"#C3E6CB\";\n    @Input() selectedColor: string = \"#7acce5\";\n\n    // Aggregation from the Results object\n    data: Aggregation | undefined;\n\n    // sq-charts inputs\n    dataPoints: FacetChartDataPoint[];\n    options: ChartOptions;\n\n    private readonly selectedValues = new Set();\n\n    // Actions (displayed in facet menu)\n    // All actions are built in the constructor\n    private readonly clearFilters: Action;\n    private readonly selectField: Action;\n\n    // Subscriptions\n    private localeChange: Subscription;\n    private selectionChange: Subscription;\n\n    constructor(\n        private facetService: FacetService,\n        private intlService: IntlService,\n        private selectionService: SelectionService,\n        private appService: AppService\n    ){\n        super();\n\n        // Clear the current filters\n        this.clearFilters = new Action({\n            icon: \"far fa-minus-square\",\n            title: \"msg#facet.clearSelects\",\n            action: () => {\n                this.facetService.clearFiltersSearch(this.getName(), true);\n            }\n        });\n\n        this.selectField = new Action({\n            title: \"Select field\",\n            updater: (action) => {\n                if(this.aggregations){\n                    action.name = this.aggregation;\n                    action.text = this.aggregation;\n                    action.children = this.aggregations\n                        .filter(v => v!==this.aggregation)\n                        .map(a => {\n                            return new Action({\n                                name: a,\n                                text: a,\n                                action : (item, event) => {\n                                    this.aggregation = a;\n                                    this.ngOnChanges(  {results: true});\n                                }\n                            });\n                        });\n                }\n            }\n        });\n\n    }\n\n    /**\n     * Name of the facet, used to create and retrieve selections\n     * through the facet service.\n     */\n    getName() : string {\n        return this.aggregation;\n    }\n\n    /**\n     * Returns all the actions that are relevant in the current context\n     */\n    get actions(): Action[] {\n        const actions: Action[] = [];\n        if(this.hasFiltered()) {\n            actions.push(this.clearFilters);\n        }\n        if(!!this.selectField.name) {\n            actions.push(this.selectField);\n        }\n        return actions;\n    }\n\n    /**\n     * Returns true if there is an active selection (or exclusion) from this facet\n     */\n    hasFiltered(): boolean {\n        return this.facetService.hasFiltered(this.getName());\n    }\n\n    /**\n     * Generates the sq-chart input data, including formatting\n     */\n    private makeData() {\n        this.dataPoints = [];\n        if(this.data && this.data.items){\n            for (const item of this.data.items) {\n                this.dataPoints.push({\n                    name: this.facetService.formatValue(item),\n                    value: item.count,\n                    $item: item\n                });\n            }\n        }\n    }\n\n    /**\n     * Update selected values (the value in the aggregation that belong to a selected document)\n     */\n    private updateSelectedValues(){\n        this.selectedValues.clear();\n        this.results.records\n            .filter(record => record.$selected)\n            .forEach(record => {\n                if(this.data){\n                    const val = record[this.appService.getColumnAlias(this.appService.getColumn(this.data.column))];\n                    if(val){\n                        if(Utils.isString(val)){    // Sourcestr\n                            this.selectedValues.add(val.toLowerCase());\n                        }\n                        if(Utils.isArray(val)){\n                            val.forEach(v => {\n                                if(Utils.isString(v))\n                                    this.selectedValues.add(v.toLowerCase()); // Sourcecsv\n                                else\n                                    this.selectedValues.add(v.value.toLowerCase()); // Entity\n                            });\n                        }\n                    }\n                }\n            });\n    }\n\n    /**\n     * Create the chart options\n     */\n    private createChartOptions(){\n        this.options = {\n            type: this.chartType,\n            tickFormatter: this.tickFormatter,\n            colorScheme: this.colorScheme\n        };\n\n        if (this.colors && this.colors.length > 0) {\n            this.options.getItemColor = (value: string): string => {\n                const index = this.dataPoints.findIndex(dataPoint => dataPoint.name === value);\n                if (index === -1) {\n                    return \"black\";\n                }\n                const item = this.getItem(this.dataPoints[index]);\n                if (item) {\n                    if (this.isFiltered(item)) {\n                        return this.filteredColor;\n                    }\n                    if(this.selectedValues.has(Utils.toSqlValue(item.value).toLowerCase())){\n                        return this.selectedColor;\n                    }\n                }\n                return this.colors[index % this.colors.length]; // Rolling colors scheme\n            };\n        }\n    }\n\n    tickFormatter = (value: any): string => {\n        if (Utils.isNumber(value)) {\n            // No fractional counts\n            if (value % 1 !== 0) {\n                return \"\";\n            }\n            return this.intlService.formatNumber(value);\n        }\n        return value;\n    }\n\n    /**\n     * Subscribe to language changes, in order to reformat the data points.\n     * Subscribe to selection changes, in order to highlight selected documents.\n     */\n    ngOnInit() {\n        this.localeChange = Utils.subscribe(this.intlService.events,\n            (value) => {\n                this.makeData();\n            });\n        this.selectionChange = this.selectionService.events.subscribe(event => {\n            this.ngOnChanges(  {results: true});\n        });\n    }\n\n\n    ngOnChanges(changes: SimpleChanges) {\n        this.selectField.update();\n\n        if (!!changes[\"results\"]) {\n            // may be null if no data\n            this.data = this.facetService.getAggregation(this.aggregation, this.results, {facetName: this.getName()});\n\n            this.updateSelectedValues();\n\n            this.createChartOptions();\n\n            this.makeData();\n        }\n    }\n\n    ngOnDestroy() {\n        this.localeChange.unsubscribe();\n        this.selectionChange.unsubscribe();\n    }\n\n    click(dataPoint: ChartDataPoint) {\n        if (this.data) {\n            const item = this.getItem(dataPoint);\n            if (!!item) {\n                if(!this.isFiltered(item))\n                    this.facetService.addFilterSearch(this.getName(), this.data, item);\n                else\n                    this.facetService.removeFilterSearch(this.getName(), this.data, item);\n            }\n        }\n    }\n\n    /**\n     * Returns true if the given AggregationItem is filtered\n     * @param item\n     */\n    isFiltered(item: AggregationItem) : boolean {\n        return !!this.data && this.facetService.itemFiltered(this.getName(), this.data, item);\n    }\n\n    getItem(dataPoint: ChartDataPoint): AggregationItem | undefined {\n        const _dataPoint = this.dataPoints.find(_dataPoint => _dataPoint.name === dataPoint.name && _dataPoint.value === dataPoint.value);\n        if (!!_dataPoint && !!_dataPoint.$item) {\n            return _dataPoint.$item;\n        }\n        return undefined;\n    }\n\n    /* AbstractFacet abstract methods */\n    isHidden(): boolean {\n        // Always display if multivalued\n        return !this.aggregations && (!this.data || !this.dataPoints);\n    }\n\n}\n    \n\n    \n        \n    \n\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '    '\n    var COMPONENTS = [{'name': 'BsEdgeInfoCard', 'selector': 'sq-edge-info-card'},{'name': 'BsFacetHeatmapComponent', 'selector': 'sq-facet-heatmap'},{'name': 'BsFacetTimelineComponent', 'selector': 'sq-facet-timeline'},{'name': 'BsHeatmapComponent', 'selector': 'sq-heatmap'},{'name': 'BsNodeInfoCard', 'selector': 'sq-node-info-card'},{'name': 'BsResultsHeatmapView', 'selector': 'sq-results-heatmap-view'},{'name': 'BsTimelineComponent', 'selector': 'sq-timeline'},{'name': 'BsTooltipComponent', 'selector': 'sq-tooltip'},{'name': 'FacetNgxChart', 'selector': 'sq-facet-ngx-chart'},{'name': 'FusionChart', 'selector': 'sq-fusion-chart'},{'name': 'MapComponent', 'selector': 'sq-googlemaps'},{'name': 'MoneyCloudComponent', 'selector': 'sq-money-cloud'},{'name': 'MoneyTimelineComponent', 'selector': 'sq-money-timeline'},{'name': 'NetworkComponent', 'selector': 'sq-network'},{'name': 'NgxChart', 'selector': 'sq-ngx-chart'},{'name': 'ResultTimeline', 'selector': 'sq-result-timeline'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'FacetNgxChart'};\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/FinanceModule.html":{"url":"modules/FinanceModule.html","title":"module - FinanceModule","body":"\n                   \n\n\n\n\n    Modules\n    FinanceModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_FinanceModule\n\n\n\ncluster_FinanceModule_declarations\n\n\n\ncluster_FinanceModule_imports\n\n\n\ncluster_FinanceModule_exports\n\n\n\n\nMoneyCloudComponent\n\nMoneyCloudComponent\n\n\n\nFinanceModule\n\nFinanceModule\n\nFinanceModule -->\n\nMoneyCloudComponent->FinanceModule\n\n\n\n\n\nMoneyTimelineComponent\n\nMoneyTimelineComponent\n\nFinanceModule -->\n\nMoneyTimelineComponent->FinanceModule\n\n\n\n\n\nMoneyCloudComponent \n\nMoneyCloudComponent \n\nMoneyCloudComponent  -->\n\nFinanceModule->MoneyCloudComponent \n\n\n\n\n\nMoneyTimelineComponent \n\nMoneyTimelineComponent \n\nMoneyTimelineComponent  -->\n\nFinanceModule->MoneyTimelineComponent \n\n\n\n\n\nBsHeatmapModule\n\nBsHeatmapModule\n\nFinanceModule -->\n\nBsHeatmapModule->FinanceModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            finance/finance.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Declarations\n                    \n                        \n                            MoneyCloudComponent\n                        \n                        \n                            MoneyTimelineComponent\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            BsHeatmapModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            MoneyCloudComponent\n                        \n                        \n                            MoneyTimelineComponent\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { NgModule } from \"@angular/core\";\nimport { CommonModule } from \"@angular/common\";\n\nimport { IntlModule } from '@sinequa/core/intl';\nimport { UtilsModule } from \"@sinequa/components/utils\";\nimport { MoneyTimelineComponent } from \"./money-timeline/money-timeline.component\";\nimport { BsHeatmapModule } from \"@sinequa/analytics/heatmap\";\nimport { BsActionModule } from \"@sinequa/components/action\";\nimport { MoneyCloudComponent } from \"./money-cloud/money-cloud.component\";\n\n\n@NgModule({\n\n    imports: [\n        CommonModule,\n        IntlModule,\n        UtilsModule,\n        BsHeatmapModule,\n        BsActionModule\n    ],\n    declarations: [\n        MoneyTimelineComponent,\n        MoneyCloudComponent\n    ],\n    exports: [\n        MoneyTimelineComponent,\n        MoneyCloudComponent\n    ],\n})\nexport class FinanceModule {}\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/FusionChartsModule.html":{"url":"modules/FusionChartsModule.html","title":"module - FusionChartsModule","body":"\n                   \n\n\n\n\n    Modules\n    FusionChartsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_FusionChartsModule\n\n\n\ncluster_FusionChartsModule_declarations\n\n\n\ncluster_FusionChartsModule_exports\n\n\n\n\nFusionChart\n\nFusionChart\n\n\n\nFusionChartsModule\n\nFusionChartsModule\n\nFusionChartsModule -->\n\nFusionChart->FusionChartsModule\n\n\n\n\n\nFusionChart \n\nFusionChart \n\nFusionChart  -->\n\nFusionChartsModule->FusionChart \n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            fusioncharts/fusioncharts.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Declarations\n                    \n                        \n                            FusionChart\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            FusionChart\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { NgModule } from \"@angular/core\";\nimport { CommonModule } from \"@angular/common\";\n\nimport { FusionChartsModule as FCModule } from \"angular-fusioncharts\";\n\n// Import FusionCharts library and chart modules\nimport * as FusionCharts from \"fusioncharts\";\nimport * as charts from \"fusioncharts/fusioncharts.charts\";\nimport * as FusionTheme from \"fusioncharts/themes/fusioncharts.theme.fusion\";\nimport * as CandyTheme from \"fusioncharts/themes/fusioncharts.theme.candy\";\n\nimport { IntlModule } from '@sinequa/core/intl';\nimport { BsSelectionModule } from '@sinequa/components/selection';\nimport { UtilsModule } from \"@sinequa/components/utils\";\n\nimport { FusionChart } from \"./chart/chart\";\n\nFusionCharts.options.creditLabel = false;\n// Fusion is a light theme, Candy is a dark theme\nFCModule.fcRoot(FusionCharts, charts, FusionTheme, CandyTheme);\n\n@NgModule({\n\n    imports: [\n        CommonModule,\n        IntlModule,\n        UtilsModule,\n        BsSelectionModule,\n        FCModule\n    ],\n    declarations: [\n        FusionChart\n    ],\n    exports: [\n        FusionChart\n    ],\n})\nexport class FusionChartsModule {}\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/GoogleMapsModule.html":{"url":"modules/GoogleMapsModule.html","title":"module - GoogleMapsModule","body":"\n                   \n\n\n\n\n    Modules\n    GoogleMapsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_GoogleMapsModule\n\n\n\ncluster_GoogleMapsModule_declarations\n\n\n\ncluster_GoogleMapsModule_exports\n\n\n\n\nMapComponent\n\nMapComponent\n\n\n\nGoogleMapsModule\n\nGoogleMapsModule\n\nGoogleMapsModule -->\n\nMapComponent->GoogleMapsModule\n\n\n\n\n\nMapComponent \n\nMapComponent \n\nMapComponent  -->\n\nGoogleMapsModule->MapComponent \n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            googlemaps/googlemaps.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Declarations\n                    \n                        \n                            MapComponent\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            MapComponent\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { NgModule } from \"@angular/core\";\nimport { CommonModule } from \"@angular/common\";\n\nimport { IntlModule } from '@sinequa/core/intl';\nimport { BsActionModule } from \"@sinequa/components/action\";\nimport { BsFacetModule } from \"@sinequa/components/facet\";\nimport { BsSelectionModule } from '@sinequa/components/selection';\n\nimport { AgmCoreModule } from '@agm/core';\nimport { MapComponent } from './map.component';\n\n@NgModule({\n\n    imports: [\n        CommonModule,\n        IntlModule,\n        BsActionModule,\n        BsFacetModule,\n        BsSelectionModule,\n        \n        AgmCoreModule,\n    ],\n    declarations: [\n        MapComponent\n    ],\n    exports: [\n        MapComponent\n    ],\n})\nexport class GoogleMapsModule {}\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/HeatmapItem.html":{"url":"interfaces/HeatmapItem.html","title":"interface - HeatmapItem","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  HeatmapItem\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            heatmap/bootstrap/heatmap.component.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        count\n                                \n                                \n                                        display\n                                \n                                \n                                            Optional\n                                        selected\n                                \n                                \n                                        value\n                                \n                                \n                                        x\n                                \n                                \n                                        y\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        count\n                                    \n                                \n                                \n                                    \n                                        count:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        display\n                                    \n                                \n                                \n                                    \n                                        display:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        selected\n                                    \n                                \n                                \n                                    \n                                        selected:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        value\n                                    \n                                \n                                \n                                    \n                                        value:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        x\n                                    \n                                \n                                \n                                    \n                                        x:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        y\n                                    \n                                \n                                \n                                    \n                                        y:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Component, ElementRef, Output, EventEmitter, Input, ViewChild, OnChanges, AfterViewInit } from '@angular/core';\n\nimport * as d3 from 'd3';\n\nexport interface HeatmapItem {\n    x: string;\n    y: string;\n    count: number;\n    value: string;\n    display: string;\n    selected?: boolean;\n}\n\n@Component({\n    selector: \"sq-heatmap\",\n    templateUrl: \"./heatmap.component.html\",\n    styleUrls: ['./heatmap.component.scss']\n})\nexport class BsHeatmapComponent implements OnChanges, AfterViewInit {\n    /**\n     * Raw data to display (will be filtered in function of maxX and maxY parameters)\n     */\n    @Input() data: HeatmapItem[];\n\n    // Graphical parameters\n    @Input() height = 600;\n    @Input() width = 600;\n    @Input() margin = {top: 100, bottom: 20, left: 100, right: 40};\n    @Input() transition = 1000; // Transition time in ms (0 to avoid transitions)\n\n    // Interaction parameters\n    @Input() itemsClickable = true;\n    @Input() axisClickable = true;\n\n    // Axis/Scales parameters\n    @Input() buckets = 9; // Color buckets\n    @Input() colorScheme = \"schemeBlues\"; // Color scheme from D3\n    @Input() maxX = 20; // Max items on X\n    @Input() maxY = 20; // Max items on Y\n    @Input() theme: \"light\" | \"dark\" = \"light\";\n    \n    // Events from user interactions\n    @Output() itemClicked = new EventEmitter();\n    @Output() axisClicked = new EventEmitter();\n\n    // D3 Scales\n    x: d3.ScaleBand;\n    y: d3.ScaleBand;\n    color: d3.ScaleQuantile;\n\n    // Axes\n    @ViewChild(\"xAxis\") gx: ElementRef;\n    @ViewChild(\"yAxis\") gy: ElementRef;\n    xAxis: d3.Selection;\n    yAxis: d3.Selection;\n    \n    // Data actually displayed\n    dataFiltered: HeatmapItem[] = [];\n\n    // Tooltip    \n    tooltipItem?: HeatmapItem;\n    tooltipOrientation: \"left\" | \"right\";\n    tooltipTop: number;\n    tooltipRight: number;\n    tooltipLeft: number;\n\n    // Misc\n    viewInit: boolean;\n    originalCount: number;\n\n    constructor(\n        private el: ElementRef\n    ){}\n\n    /**\n     * ngOnChanges is used to respond to changes in the data (or chart parameter)\n     */\n    ngOnChanges() {\n\n        this.data = this.data || [];\n\n        // Pre-process data\n        const xLabels = Array.from(new Set(this.data.map(value => value.x))).slice(0, this.maxX);\n        const yLabels = Array.from(new Set(this.data.map(value => value.y))).slice(0, this.maxY);\n        this.dataFiltered = this.data.filter(value => xLabels.includes(value.x) && yLabels.includes(value.y));\n\n        // Create scales\n        this.x = d3.scaleBand()\n            .domain(xLabels)\n            .range([0, this.width-this.margin.left-this.margin.right]);\n\n        this.y = d3.scaleBand()\n            .domain(yLabels)\n            .range([0, this.height-this.margin.top-this.margin.bottom]);\n\n        this.color = d3.scaleQuantile()\n            .domain(this.dataFiltered.map(item => item.count))\n            .range(d3[this.colorScheme][this.buckets]);\n\n        // Note: ngOnChanges is always called once, before ngAfterViewInit\n        if(this.viewInit) {\n            this.buildChart(!!this.transition);\n        }\n    }\n\n    // Note: In onAfterViewInit we can access gx and gy, obtained with @ViewChild.\n    // At this point we can call buildChart()\n    ngAfterViewInit(){\n        this.xAxis = d3.select(this.gx.nativeElement);\n        this.yAxis = d3.select(this.gy.nativeElement);\n        this.viewInit = true;\n\n        this.buildChart();\n    }\n    \n    /**\n     * buildChart() actually only builds the axes of the chart, since the\n     * rest is build automatically with Angular syntax in the template.\n     * We build axis programmatically (with D3 selects) to benefit from the\n     * D3 abstractions and transitions.\n     * @param update \n     */\n    buildChart(update?: boolean){\n                    \n        if(update){\n            const t = d3.transition().duration(this.transition) as d3.Transition;\n    \n            this.xAxis.transition(t)\n                .call(d3.axisTop(this.x).tickSize(0))\n                .on(\"end\", () => this.xAxis.selectAll('text').each(this.wrap));\n\n            this.yAxis.transition(t)\n                .call(d3.axisLeft(this.y).tickSize(0))\n                .on(\"end\", () => this.yAxis.selectAll('text').each(this.wrap));\n            \n        }\n        else {\n            this.xAxis.call(d3.axisTop(this.x).tickSize(0));\n            this.yAxis.call(d3.axisLeft(this.y).tickSize(0));\n        }\n\n        this.xAxis.selectAll(\".domain\").remove(); // Remove the axis line\n        this.xAxis.selectAll(\"text\")  // Tilt the text\n            .attr(\"transform\", \"rotate(-35)\")\n            .style(\"text-anchor\", \"start\")\n            .each(this.wrap)\n            .on(\"click\", d => this.onAxisClicked(d, 'x'));\n\n        this.yAxis.selectAll(\".domain\").remove(); // Remove the axis line\n        this.yAxis.selectAll(\"text\")\n            .each(this.wrap)\n            .on(\"click\", d => this.onAxisClicked(d, 'y'));\n    }\n\n    /**\n     * Called when the user hovers the mouse over a heatmap tile\n     * @param item \n     * @param event \n     */\n    onMouseOver(item: HeatmapItem, event: MouseEvent){\n        this.tooltipItem = item;\n\n        const x = this.x(item.x) as number;\n        const y = this.y(item.y) as number;\n\n        // Since we use viewBox to auto-adjust the SVG to the container size, we have to\n        // convert from the SVG coordinate system to the HTML coordinate system\n        const actualWidth = (this.el.nativeElement as HTMLElement).offsetWidth;\n        const scale = actualWidth / this.width;\n        const relativeX = x / this.width;\n\n        // Tooltip to the right\n        if(relativeX ) => {\n        const self = d3.select(nodes[i]);\n        let textLength = nodes[i].getComputedTextLength();\n        let text = self.text();\n        const fullText = self.text();\n        while (textLength > 90 && text.length > 0) {\n          text = text.slice(0, -1)\n          self.text(text + '...');\n          textLength = nodes[i].getComputedTextLength();\n        }\n        self.append('svg:title').text(fullText);\n    };\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/MapComponent.html":{"url":"components/MapComponent.html","title":"component - MapComponent","body":"\n                   \n\n\n\n\n\n  Components\n  MapComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    googlemaps/map.component.ts\n\n\n\n    \n        Extends\n    \n    \n            AbstractFacet\n    \n\n    \n        Implements\n    \n    \n                    OnChanges\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                sq-googlemaps\n            \n\n\n\n\n            \n                templateUrl\n                ./map.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                bounds\n                            \n                            \n                                clearFilters\n                            \n                            \n                                    Public\n                                exprBuilder\n                            \n                            \n                                    Public\n                                facetService\n                            \n                            \n                                filterArea\n                            \n                            \n                                fitBounds\n                            \n                            \n                                geoRecords\n                            \n                            \n                                mapStyles\n                            \n                            \n                                    Optional\n                                openedWindow\n                            \n                            \n                                    Public\n                                searchService\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                closeWindow\n                            \n                            \n                                ngOnChanges\n                            \n                            \n                                onBoundsChange\n                            \n                            \n                                onMapClick\n                            \n                            \n                                onMarkerClick\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                height\n                            \n                            \n                                latitudeField\n                            \n                            \n                                longitudeField\n                            \n                            \n                                name\n                            \n                            \n                                results\n                            \n                            \n                                style\n                            \n                        \n                    \n                \n\n                \n                    \n                        Outputs\n                    \n                \n                \n                    \n                        \n                            \n                                recordClicked\n                            \n                        \n                    \n                \n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    actions\n                                \n                            \n                        \n                    \n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(searchService: SearchService, facetService: FacetService, exprBuilder: ExprBuilder)\n                    \n                \n                        \n                            \n                                Defined in googlemaps/map.component.ts:48\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        searchService\n                                                  \n                                                        \n                                                                    SearchService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        facetService\n                                                  \n                                                        \n                                                                    FacetService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        exprBuilder\n                                                  \n                                                        \n                                                                    ExprBuilder\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        height\n                    \n                \n                \n                    \n                        Default value : 300\n                    \n                \n                        \n                            \n                                    Defined in googlemaps/map.component.ts:23\n                            \n                        \n                \n                    \n                        Desired height of the map \n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        latitudeField\n                    \n                \n                \n                    \n                        Default value : \"latitude\"\n                    \n                \n                        \n                            \n                                    Defined in googlemaps/map.component.ts:25\n                            \n                        \n                \n                    \n                        Name of the field storing the latitude as a decimal number \n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        longitudeField\n                    \n                \n                \n                    \n                        Default value : \"longitude\"\n                    \n                \n                        \n                            \n                                    Defined in googlemaps/map.component.ts:27\n                            \n                        \n                \n                    \n                        Name of the field storing the longitude as a decimal number \n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        name\n                    \n                \n                \n                    \n                        Default value : \"map\"\n                    \n                \n                        \n                            \n                                    Defined in googlemaps/map.component.ts:19\n                            \n                        \n                \n                    \n                        Name of the map used as an identifier for the facet, to associate its selects \n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        results\n                    \n                \n                \n                    \n                        Type :     Results\n\n                    \n                \n                        \n                            \n                                    Defined in googlemaps/map.component.ts:21\n                            \n                        \n                \n                    \n                        Results list displayed on the map when possible \n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        style\n                    \n                \n                \n                    \n                        Default value : \"light\"\n                    \n                \n                        \n                            \n                                    Defined in googlemaps/map.component.ts:29\n                            \n                        \n                \n                    \n                        Map style (light or dark are supported) \n\n                    \n                \n            \n        \n\n    \n    Outputs\n        \n            \n                \n                    \n                        \n                        recordClicked\n                    \n                \n                \n                    \n                        Type :         EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in googlemaps/map.component.ts:31\n                            \n                        \n                \n                    \n                        Event emitter that emits a Record object when the marker of that record is clicked by the user \n\n                    \n                \n            \n        \n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            closeWindow\n                        \n                        \n                    \n                \n            \n            \n                \ncloseWindow()\n                \n            \n\n\n            \n                \n                    Defined in googlemaps/map.component.ts:134\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            ngOnChanges\n                        \n                        \n                    \n                \n            \n            \n                \nngOnChanges(changes: SimpleChanges)\n                \n            \n\n\n            \n                \n                    Defined in googlemaps/map.component.ts:102\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    changes\n                                    \n                                                SimpleChanges\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            onBoundsChange\n                        \n                        \n                    \n                \n            \n            \n                \nonBoundsChange(bounds: google.maps.LatLngBounds)\n                \n            \n\n\n            \n                \n                    Defined in googlemaps/map.component.ts:154\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    bounds\n                                    \n                                            google.maps.LatLngBounds\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            onMapClick\n                        \n                        \n                    \n                \n            \n            \n                \nonMapClick(event: Event)\n                \n            \n\n\n            \n                \n                    Defined in googlemaps/map.component.ts:144\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    event\n                                    \n                                                Event\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            onMarkerClick\n                        \n                        \n                    \n                \n            \n            \n                \nonMarkerClick(event: Event, record: Record, infoWindow?: AgmInfoWindow)\n                \n            \n\n\n            \n                \n                    Defined in googlemaps/map.component.ts:148\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    event\n                                    \n                                                Event\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    record\n                                    \n                                            Record\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    infoWindow\n                                    \n                                            AgmInfoWindow\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n    \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            bounds\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     google.maps.LatLngBounds\n\n                        \n                    \n                        \n                            \n                                    Defined in googlemaps/map.component.ts:43\n                            \n                        \n\n                \n                    \n                        Bounds of the map updated on initialization and user interaction \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            clearFilters\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Action\n\n                        \n                    \n                        \n                            \n                                    Defined in googlemaps/map.component.ts:40\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            exprBuilder\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     ExprBuilder\n\n                        \n                    \n                        \n                            \n                                    Defined in googlemaps/map.component.ts:53\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            facetService\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     FacetService\n\n                        \n                    \n                        \n                            \n                                    Defined in googlemaps/map.component.ts:52\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            filterArea\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Action\n\n                        \n                    \n                        \n                            \n                                    Defined in googlemaps/map.component.ts:39\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            fitBounds\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     google.maps.LatLngBoundsLiteral | boolean\n\n                        \n                    \n                        \n                            \n                                    Defined in googlemaps/map.component.ts:36\n                            \n                        \n\n                \n                    \n                        Mode for fitting the map to its contained markers \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            geoRecords\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Record[]\n\n                        \n                    \n                    \n                        \n                            Default value : []\n                        \n                    \n                        \n                            \n                                    Defined in googlemaps/map.component.ts:34\n                            \n                        \n\n                \n                    \n                        Filtered list of records, keeping only the geolocated records \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            mapStyles\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         any\n\n                        \n                    \n                        \n                            \n                                    Defined in googlemaps/map.component.ts:48\n                            \n                        \n\n                \n                    \n                        Styles of the map if any \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            openedWindow\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     AgmInfoWindow\n\n                        \n                    \n                        \n                            \n                                    Defined in googlemaps/map.component.ts:45\n                            \n                        \n\n                \n                    \n                        Currently opened info window, which can be closed when another window is closed \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            searchService\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     SearchService\n\n                        \n                    \n                        \n                            \n                                    Defined in googlemaps/map.component.ts:51\n                            \n                        \n\n\n            \n        \n\n\n    \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        actions\n                    \n                \n\n                \n                    \n                        getactions()\n                    \n                \n                            \n                                \n                                    Defined in googlemaps/map.component.ts:91\n                                \n                            \n\n            \n        \n\n\n\n\n    \n        import { Component, Input, Output, EventEmitter, OnChanges, SimpleChanges } from '@angular/core';\nimport { AgmInfoWindow } from '@agm/core'\n;\nimport { AbstractFacet, FacetService } from '@sinequa/components/facet';\nimport { Action } from '@sinequa/components/action';\nimport { SearchService } from '@sinequa/components/search';\n\nimport { ExprBuilder } from '@sinequa/core/app-utils';\nimport { Results, Record } from '@sinequa/core/web-services';\n\nimport { darkStyle } from \"./dark-style\";\n\n@Component({\n    selector: \"sq-googlemaps\",\n    templateUrl: \"./map.component.html\"\n})\nexport class MapComponent extends AbstractFacet implements OnChanges {\n    /** Name of the map used as an identifier for the facet, to associate its selects */\n    @Input() name = \"map\";\n    /** Results list displayed on the map when possible */\n    @Input() results: Results;\n    /** Desired height of the map */\n    @Input() height = 300;\n    /** Name of the field storing the latitude as a decimal number */\n    @Input() latitudeField = \"latitude\";\n    /** Name of the field storing the longitude as a decimal number */\n    @Input() longitudeField = \"longitude\";\n    /** Map style (light or dark are supported) */\n    @Input() style = \"light\";\n    /** Event emitter that emits a Record object when the marker of that record is clicked by the user */\n    @Output() recordClicked = new EventEmitter();\n\n    /** Filtered list of records, keeping only the geolocated records */\n    geoRecords: Record[] = [];\n    /** Mode for fitting the map to its contained markers */\n    fitBounds: google.maps.LatLngBoundsLiteral | boolean;\n\n    // Actions for selecting an area on the map, and clearing that selection\n    filterArea: Action;\n    clearFilters: Action;\n\n    /** Bounds of the map updated on initialization and user interaction */\n    bounds: google.maps.LatLngBounds;\n    /** Currently opened info window, which can be closed when another window is closed */\n    openedWindow?: AgmInfoWindow;\n\n    /** Styles of the map if any */\n    mapStyles: any;\n\n    constructor(\n        public searchService: SearchService,\n        public facetService: FacetService,\n        public exprBuilder: ExprBuilder\n    ){\n        super();\n        \n        // Clear the current filters\n        this.clearFilters = new Action({\n            icon: \"far fa-minus-square\",\n            title: \"msg#facet.clearSelects\",\n            action: () => {\n                this.searchService.query.removeSelect(this.name);\n                this.searchService.search();\n            }\n        });\n\n        // Filter the currently selected area\n        this.filterArea = new Action({\n            icon: \"fas fa-search\",\n            title: \"msg#googlemaps.filterArea\",\n            action: () => {\n                if(this.facetService.hasFiltered(this.name)) {\n                    this.searchService.query.removeSelect(this.name);\n                }\n                const minLat = this.bounds.getSouthWest().lat();\n                const maxLat = this.bounds.getNorthEast().lat();\n                const minLng = this.bounds.getSouthWest().lng();\n                const maxLng = this.bounds.getNorthEast().lng();\n                const expr = this.exprBuilder.concatAndExpr([\n                    this.exprBuilder.makeNumericalExpr(this.latitudeField, '>=', minLat),\n                    this.exprBuilder.makeNumericalExpr(this.latitudeField, '=', minLng),\n                    this.exprBuilder.makeNumericalExpr(this.longitudeField, ' !!r[this.latitudeField]);\n            }\n            this.closeWindow();\n        }\n\n        if(changes['style']) {\n            this.mapStyles = this.style === \"dark\"? darkStyle : undefined;\n        }\n\n        // If no document, the view shows a default latitude / longitude\n        if(this.geoRecords.length === 0) {\n            this.fitBounds = false;\n        }\n        // If multiple documents, the view is centered around them, at the right scale\n        else if(this.geoRecords.length > 1) {\n            this.fitBounds = true;\n        }\n        else {\n            // Custom bounds centered around the single geo record in the results\n            this.fitBounds = {\n                east: this.geoRecords[0][this.longitudeField] + 0.02,\n                north: this.geoRecords[0][this.latitudeField] + 0.02,\n                south: this.geoRecords[0][this.latitudeField] - 0.02,\n                west: this.geoRecords[0][this.longitudeField] - 0.02\n            };\n        }\n    }\n\n    closeWindow() {\n        if(this.openedWindow) {\n            this.openedWindow.close();\n            this.openedWindow = undefined;\n        }\n    }\n\n\n    // Manage map interactions (avoid multiple opened info windows)\n\n    onMapClick(event: Event) {\n        this.closeWindow();\n    }\n\n    onMarkerClick(event: Event, record: Record, infoWindow?: AgmInfoWindow) {\n        this.closeWindow();\n        this.openedWindow = infoWindow;\n        this.recordClicked.next(record);\n    }\n\n    onBoundsChange(bounds: google.maps.LatLngBounds) {\n        this.bounds = bounds;\n    }\n}\n    \n\n    \n        \n\n    \n\n        \n            {{record['title']}}\n        \n\n    \n\n\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '                        {{record[\\'title\\']}}            '\n    var COMPONENTS = [{'name': 'BsEdgeInfoCard', 'selector': 'sq-edge-info-card'},{'name': 'BsFacetHeatmapComponent', 'selector': 'sq-facet-heatmap'},{'name': 'BsFacetTimelineComponent', 'selector': 'sq-facet-timeline'},{'name': 'BsHeatmapComponent', 'selector': 'sq-heatmap'},{'name': 'BsNodeInfoCard', 'selector': 'sq-node-info-card'},{'name': 'BsResultsHeatmapView', 'selector': 'sq-results-heatmap-view'},{'name': 'BsTimelineComponent', 'selector': 'sq-timeline'},{'name': 'BsTooltipComponent', 'selector': 'sq-tooltip'},{'name': 'FacetNgxChart', 'selector': 'sq-facet-ngx-chart'},{'name': 'FusionChart', 'selector': 'sq-fusion-chart'},{'name': 'MapComponent', 'selector': 'sq-googlemaps'},{'name': 'MoneyCloudComponent', 'selector': 'sq-money-cloud'},{'name': 'MoneyTimelineComponent', 'selector': 'sq-money-timeline'},{'name': 'NetworkComponent', 'selector': 'sq-network'},{'name': 'NgxChart', 'selector': 'sq-ngx-chart'},{'name': 'ResultTimeline', 'selector': 'sq-result-timeline'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'MapComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/MoneyCloudDatum.html":{"url":"interfaces/MoneyCloudDatum.html","title":"interface - MoneyCloudDatum","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  MoneyCloudDatum\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            finance/money-cloud/money-cloud.component.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        category\n                                \n                                \n                                        count\n                                \n                                \n                                        currency\n                                \n                                \n                                        i\n                                \n                                \n                                        rawvalue\n                                \n                                \n                                        value\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        category\n                                    \n                                \n                                \n                                    \n                                        category:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        count\n                                    \n                                \n                                \n                                    \n                                        count:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        currency\n                                    \n                                \n                                \n                                    \n                                        currency:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        i\n                                    \n                                \n                                \n                                    \n                                        i:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        rawvalue\n                                    \n                                \n                                \n                                    \n                                        rawvalue:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        value\n                                    \n                                \n                                \n                                    \n                                        value:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { AfterViewInit, ChangeDetectorRef, Component, ElementRef, Input, OnChanges, SimpleChanges, ViewChild } from \"@angular/core\";\nimport { Action } from \"@sinequa/components/action\";\nimport { AbstractFacet } from \"@sinequa/components/facet\";\nimport { SearchService } from \"@sinequa/components/search\";\nimport { SelectionService } from \"@sinequa/components/selection\";\nimport { ExprBuilder, FormatService, ValueItem } from \"@sinequa/core/app-utils\";\nimport { AggregationItem, Results } from \"@sinequa/core/web-services\";\n\nimport * as d3 from 'd3';\n\n\nexport interface MoneyCloudDatum {\n    value: number;\n    currency: string;\n    count: number;\n    category: string;\n    i: number;\n    rawvalue: string;\n}\n\n@Component({\n    selector: 'sq-money-cloud',\n    templateUrl: './money-cloud.component.html',\n    styleUrls: ['./money-cloud.component.scss']\n})\nexport class MoneyCloudComponent extends AbstractFacet implements OnChanges,AfterViewInit {\n    @Input() name = \"money-cloud\"\n\n    @Input() results: Results;\n    /** The \"money-value\" column stores an entity in the form \"(KEYWORD)#( )\", for example \"(DEAL)#(USD 69420)\" */\n    @Input() moneyValueColumn = \"value_amount\";\n    /** The \"Money-Value\" aggregation must be computed over the money-value column */\n    @Input() moneyAggregation = \"ValueAmounts\";\n\n    @Input() width = 600;\n    @Input() height = 200;\n    @Input() margin = {top: 15, bottom: 30, left: 40, right: 15};\n\n    @Input() showTooltip = true;\n    @Input() theme: \"light\" | \"dark\" = \"light\";\n\n    data: MoneyCloudDatum[];\n    categories: string[];\n\n    selectedItems: Set;\n\n    // Scales\n    x: d3.ScaleBand; // Read/Write\n    x_inner: d3.ScaleLinear; // Read/Write\n    y: d3.ScaleLogarithmic; // Read-only / domain updated\n    r: d3.ScaleLogarithmic; // Radius (function of counts)\n    c: d3.ScaleOrdinal; // Color\n\n    // Elements\n    @ViewChild(\"overlay\") overlay: ElementRef;\n    @ViewChild(\"xAxis\") gx: ElementRef;\n    @ViewChild(\"yAxis\") gy: ElementRef;\n\n    // Selections\n    xAxis$: d3.Selection;\n    yAxis$: d3.Selection;\n    \n    // Tooltips\n    tooltipItem: MoneyCloudDatum | undefined;\n    tooltipOrientation: \"left\" | \"right\";\n    tooltipTop: number;\n    tooltipRight: number;\n    tooltipLeft: number;\n\n    viewInit: boolean;\n    \n    clearFilters: Action;\n\n    constructor(\n        private el: ElementRef,\n        protected cdRef: ChangeDetectorRef,\n        public searchService: SearchService,\n        public exprBuilder: ExprBuilder,\n        public selectionService: SelectionService,\n        public formatService: FormatService\n    ){\n        super();\n\n        // Clear the current filters\n        this.clearFilters = new Action({\n            icon: \"far fa-minus-square\",\n            title: \"msg#facet.clearSelects\",\n            action: () => {\n                this.searchService.query.removeSelect(this.name, true);\n                this.searchService.search();\n            }\n        });\n\n        this.selectionService.events.subscribe(e => this.updateSelectedItems());\n    }\n\n    get actions(): Action[] {\n        const actions: Action[] = [];\n        if(this.searchService.query.findSelect(this.name)){\n            actions.push(this.clearFilters);\n        }\n        return actions;\n    }\n\n    get innerWidth(): number {\n        return this.width - this.margin.left - this.margin.right;\n    }\n\n    get innerHeight(): number {\n        return this.height - this.margin.top - this.margin.bottom;\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n\n        if(!this.x) {\n            \n            // Scales\n            this.x = d3.scaleBand()\n                .range([0, this.innerWidth]);\n                \n            this.x_inner = d3.scaleLinear();\n\n            this.y = d3.scaleLog()\n                .range([this.innerHeight, 0]);\n\n            this.r = d3.scaleLog()\n                .range([4, 10]);\n\n            this.c = d3.scaleOrdinal()\n                .range(d3.schemeCategory10);\n                \n        }\n        \n        // Resize handling\n\n        if(changes[\"height\"]) {\n            this.y.range([this.innerHeight, 0]);\n            if(this.viewInit) {\n                this.drawYAxis();\n            }\n        }\n\n        if(changes[\"width\"]) {\n            this.x.range([0, this.innerWidth]);\n            if(this.viewInit) {\n                this.drawXAxis();\n            }\n        }\n\n        if(this.viewInit && changes[\"results\"] && this.results){\n            this.updateChart();\n        }\n    }\n\n    ngAfterViewInit() {\n        \n        // Get native elements\n        this.xAxis$ = d3.select(this.gx.nativeElement);\n        this.yAxis$ = d3.select(this.gy.nativeElement);\n\n        d3.select(this.overlay.nativeElement)        \n            .on(\"mousemove\", () => this.onMousemove());\n        \n        this.viewInit = true;\n\n        this.updateChart();\n        \n        // This is necessary to prevent \"Expression has changed after check\" errors\n        // caused by calling updateChart inside ngAfterViewInit().\n        // Unfortunately this is necessary because we need the DOM to be rendered in order fill the DOM\n        // (for example gAxis needs to exist so we can draw the axis)\n        this.cdRef.detectChanges();\n    }\n\n    updateChart() {\n\n        this.turnoffTooltip();\n\n        if(this.results) {\n            \n            this.updateData();\n\n            // Update scales\n            this.updateScales();\n\n            // Update Axes\n            this.updateAxes();\n\n        }\n    }\n\n    updateData() {\n\n        this.updateSelectedItems();\n        \n        const counts = new Map();\n\n        this.data = [];\n        // Extract number of occurrences from the aggregation\n        this.results.aggregations\n            ?.find(a => a.name === this.moneyAggregation)\n            ?.items\n            ?.forEach(item => {\n                const datum = this.parseEntity(item, counts);\n                if(datum) {\n                    this.data.push(datum);\n                }\n            });\n\n        this.data.forEach(d => d.i = (d.i-0.5) / counts.get(d.category)!); // Normalize i between 0 and 1\n\n    }\n\n    /**\n     * Parse the entity stored in the \"money-value\" column and returns a datum (incl. numerical value and currency)\n     */\n    @Input()\n    parseEntity = (item: AggregationItem, counts: Map): MoneyCloudDatum | undefined => {\n        const rawvalue = item.value as string;\n        const [category, amount] = item.display!.substr(1, item.display!.length-2).split(\")#(\");\n        const [currency, valuestr] = amount.split(\" \");\n        const value = parseFloat(valuestr);\n        // Check the data is valid\n        if(isNaN(value) || value (this.data, d => d.value);\n            const rExtent = d3.extent(this.data, d => d.count);\n\n            if(!yExtent[0] || !yExtent[1] || !rExtent[0] || !rExtent[1]) {\n                return;\n            }\n\n            this.x.domain(this.data.map(d => d.category));\n            this.x_inner\n                .domain([0, 1])\n                .range([0, this.x.bandwidth()]);\n            this.y.domain(yExtent);\n            this.r.domain(rExtent);\n            this.c.domain(this.data.map(d => d.currency));\n\n            this.categories = this.x.domain();\n\n        }\n\n    }\n\n    public updateSelectedItems() {\n        this.selectedItems = new Set();\n        this.selectionService.getSelectedItems().forEach(r => {\n            r[this.moneyValueColumn]?.forEach((item: ValueItem) => {\n                this.selectedItems.add(item.value as string);\n            });\n        });\n    }\n    \n    /**\n     * Update the x and y axes\n     */\n    protected updateAxes(){\n        this.drawXAxis();\n        this.drawYAxis();\n    }\n\n    /**\n     * Draws the X axis\n     */\n     protected drawXAxis() {\n        const xAxis = d3.axisBottom(this.x);\n        this.xAxis$.call(xAxis);\n        //this.xAxis$.selectAll(\".domain\").remove(); // Remove the axis line\n    }\n\n    /**\n     * Draws the Y axis\n     */\n    protected drawYAxis() {\n        const yAxisTicks = this.y.ticks(5)\n            .filter(tick => Number.isInteger(tick)); // Keep only integer ticks https://stackoverflow.com/questions/13576906/d3-tick-marks-on-integers-only/56821215\n\n        const yAxis = d3.axisLeft(this.y)\n            .tickSizeInner(-this.innerWidth)\n            .tickValues(yAxisTicks)\n            .tickFormat(this.formatService.moneyFormatter); //https://github.com/d3/d3-format\n        this.yAxis$.call(yAxis);\n        //this.yAxis$.selectAll(\".domain\").remove(); // Remove the axis line\n    }\n\n    \n    /**\n     * Redraw the simple tooltip (vertical line)\n     */\n    onMousemove() {\n        this.tooltipItem = undefined;\n    }\n\n    filterDatum(datum: MoneyCloudDatum) {\n        const expr = this.exprBuilder.makeExpr(this.moneyValueColumn, datum.rawvalue)\n        this.searchService.query.addSelect(expr, this.name);\n        this.searchService.search();\n    }\n\n    onMouseEnterDatum(datum: MoneyCloudDatum) {\n\n        this.tooltipItem = datum;\n\n        const x = this.x(datum.category)! + this.x_inner(datum.i)!;\n        const y = this.y(datum.value);\n        const r = this.r(datum.count);\n\n        // Since we use viewBox to auto-adjust the SVG to the container size, we have to\n        // convert from the SVG coordinate system to the HTML coordinate system\n        const actualWidth = (this.el.nativeElement as HTMLElement).offsetWidth;\n        const scale = actualWidth / this.width;\n        const relativeX = x! / this.width;\n\n        // Tooltip to the right\n        if(relativeX  {\n        if(this.tooltipItem) {\n            this.tooltipItem = undefined;\n        }\n    }\n}\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/MoneyDatum.html":{"url":"interfaces/MoneyDatum.html","title":"interface - MoneyDatum","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  MoneyDatum\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            finance/money-timeline/money-timeline.component.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        count\n                                \n                                \n                                        currency\n                                \n                                \n                                        date\n                                \n                                \n                                        rawvalue\n                                \n                                \n                                        record\n                                \n                                \n                                        value\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        count\n                                    \n                                \n                                \n                                    \n                                        count:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        currency\n                                    \n                                \n                                \n                                    \n                                        currency:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        date\n                                    \n                                \n                                \n                                    \n                                        date:         Date\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Date\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        rawvalue\n                                    \n                                \n                                \n                                    \n                                        rawvalue:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        record\n                                    \n                                \n                                \n                                    \n                                        record:     Record\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Record\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        value\n                                    \n                                \n                                \n                                    \n                                        value:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { AfterViewInit, ChangeDetectorRef, Component, ElementRef, EventEmitter, Input, OnChanges, Output, SimpleChanges, ViewChild } from \"@angular/core\";\nimport { Action } from \"@sinequa/components/action\";\nimport { AbstractFacet } from \"@sinequa/components/facet\";\nimport { SearchService } from \"@sinequa/components/search\";\nimport { ExprBuilder } from \"@sinequa/core/app-utils\";\nimport { Utils } from \"@sinequa/core/base\";\nimport { Results, Record } from \"@sinequa/core/web-services\";\nimport { FormatService } from \"@sinequa/core/app-utils\";\n\nimport * as d3 from 'd3';\n\nexport interface MoneyDatum {\n    value: number;\n    currency: string;\n    count: number;\n    date: Date;\n    rawvalue: string;\n    record: Record;\n}\n\n@Component({\n    selector: 'sq-money-timeline',\n    templateUrl: './money-timeline.component.html',\n    styleUrls: ['./money-timeline.component.scss']\n})\nexport class MoneyTimelineComponent extends AbstractFacet implements OnChanges,AfterViewInit {\n    @Input() name = \"money-timeline\"\n\n    @Input() results: Results;\n    /** The \"money\" column stores an entity in the form \" \", for example \"USD 69420\" */\n    @Input() moneyColumn = \"money\";\n    /** The \"Money\" aggregation must be computed over the money column */\n    @Input() moneyAggregation = \"Money\";\n\n    @Input() width = 600;\n    @Input() height = 200;\n    @Input() margin = {top: 15, bottom: 30, left: 40, right: 15};\n\n    /** Displays a tooltip showing the current date */\n    @Input() showTooltip = true;\n    @Input() theme: \"light\" | \"dark\" = \"light\";\n\n    @Output() recordClicked = new EventEmitter();\n\n    data: MoneyDatum[];\n\n    // Scales\n    x: d3.ScaleTime; // Read/Write\n    y: d3.ScaleLogarithmic; // Read-only / domain updated\n    r: d3.ScaleLogarithmic;\n    c: d3.ScaleOrdinal;\n\n    // Elements\n    @ViewChild(\"overlay\") overlay: ElementRef;\n    @ViewChild(\"xAxis\") gx: ElementRef;\n    @ViewChild(\"yAxis\") gy: ElementRef;\n\n    // Selections\n    xAxis$: d3.Selection;\n    yAxis$: d3.Selection;\n    \n    // Tooltips\n    tooltipX: number | undefined;\n    tooltipItem: MoneyDatum | undefined;\n    tooltipOrientation: \"left\" | \"right\";\n    tooltipTop: number;\n    tooltipRight: number;\n    tooltipLeft: number;\n\n    viewInit: boolean;\n    \n    clearFilters: Action;\n\n    constructor(\n        private el: ElementRef,\n        protected cdRef: ChangeDetectorRef,\n        public searchService: SearchService,\n        public exprBuilder: ExprBuilder,\n        public formatService: FormatService\n    ){\n        super();\n\n        // Clear the current filters\n        this.clearFilters = new Action({\n            icon: \"far fa-minus-square\",\n            title: \"msg#facet.clearSelects\",\n            action: () => {\n                this.searchService.query.removeSelect(this.name, true);\n                this.searchService.search();\n            }\n        });\n    }\n\n    get actions(): Action[] {\n        const actions: Action[] = [];\n        if(this.searchService.query.findSelect(this.name)){\n            actions.push(this.clearFilters);\n        }\n        return actions;\n    }\n\n    get innerWidth(): number {\n        return this.width - this.margin.left - this.margin.right;\n    }\n\n    get innerHeight(): number {\n        return this.height - this.margin.top - this.margin.bottom;\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n\n        if(!this.x) {\n            \n            // Scales\n            this.x = d3.scaleUtc()\n                .range([0, this.innerWidth]);\n\n            this.y = d3.scaleLog()\n                .range([this.innerHeight, 0]);\n\n            this.r = d3.scaleLog()\n                .range([4, 10]);\n\n            this.c = d3.scaleOrdinal()\n                .range(d3.schemeCategory10);\n                \n        }\n        \n        // Resize handling\n\n        if(changes[\"height\"]) {\n            this.y.range([this.innerHeight, 0]);\n            if(this.viewInit) {\n                this.drawYAxis();\n            }\n        }\n\n        if(changes[\"width\"]) {\n            this.x.range([0, this.innerWidth]);\n            if(this.viewInit) {\n                this.drawXAxis();\n            }\n        }\n\n        if(this.viewInit && changes[\"results\"] && this.results){\n            this.updateChart();\n        }\n    }\n\n    ngAfterViewInit() {\n        \n        // Get native elements\n        this.xAxis$ = d3.select(this.gx.nativeElement);\n        this.yAxis$ = d3.select(this.gy.nativeElement);\n\n        d3.select(this.overlay.nativeElement)        \n            .on(\"mousemove\", () => this.onMousemove())\n            .on(\"mouseout\", () => this.onMouseout());\n        \n        this.viewInit = true;\n\n        this.updateChart();\n        \n        // This is necessary to prevent \"Expression has changed after check\" errors\n        // caused by calling updateChart inside ngAfterViewInit().\n        // Unfortunately this is necessary because we need the DOM to be rendered in order fill the DOM\n        // (for example gAxis needs to exist so we can draw the axis)\n        this.cdRef.detectChanges();\n    }\n\n    /**\n     * Recomputes the data to display and update the chart's primitives\n     */\n    updateChart() {\n\n        this.turnoffTooltip();\n\n        if(this.results) {\n            \n            this.updateData();\n\n            // Update scales\n            this.updateScales();\n\n            // Update Axes\n            this.updateAxes();\n\n        }\n    }\n\n    /**\n     * Computes the data displayed in the chart in function of the raw data provided as input\n     */\n    updateData() {\n        \n        // Extract number of occurrences from the aggregation\n        const counts = new Map();\n        this.results.aggregations\n            ?.find(a => Utils.eqNC(a.name, this.moneyAggregation))\n            ?.items\n            ?.forEach(item => counts.set(item.value.toString(), item.count));\n\n        this.data = [];\n        this.results.records?.forEach(record =>\n            record?.[this.moneyColumn]?.forEach(money => {\n                const datum = this.parseEntity(money.value, record, counts.get(money.value) || 1);\n                if(datum) {\n                    this.data.push(datum);\n                }\n            })\n        );\n\n    }\n\n    /**\n     * Parse the entity stored in the \"money\" column and returns a datum (incl. numerical value and currency)\n     */\n    @Input()\n    parseEntity = (rawvalue: string, record: Record, count): MoneyDatum | undefined => {\n        const val = rawvalue.split(\" \"); // Split \"USD 1000\"\n        // Check the data is valid\n        if(!record.modified || isNaN(val[1] as any) || parseFloat(val[1]) (this.data, d => d.date);\n            const yExtent = d3.extent(this.data, d => d.value);\n            const rExtent = d3.extent(this.data, d => d.count);\n\n            if(!xExtent[0] || !xExtent[1] || !yExtent[0] || !yExtent[1] || !rExtent[0] || !rExtent[1]) {\n                return;\n            }\n\n            this.x.domain(xExtent);\n            this.y.domain(yExtent);\n            this.r.domain(rExtent);\n            this.c.domain(this.data.map(d => d.record.id));\n        }\n\n    }\n    \n    /**\n     * Update the x and y axes\n     */\n    protected updateAxes(){\n        this.drawXAxis();\n        this.drawYAxis();\n    }\n\n    /**\n     * Draws the X axis\n     */\n     protected drawXAxis() {\n        const xAxis = d3.axisBottom(this.x)\n            .ticks(5);\n        this.xAxis$.call(xAxis);\n        //this.xAxis$.selectAll(\".domain\").remove(); // Remove the axis line\n    }\n\n    /**\n     * Draws the Y axis\n     */\n    protected drawYAxis() {\n        const yAxisTicks = this.y.ticks(5)\n            .filter(tick => Number.isInteger(tick)); // Keep only integer ticks https://stackoverflow.com/questions/13576906/d3-tick-marks-on-integers-only/56821215\n\n        const yAxis = d3.axisLeft(this.y)\n            .tickValues(yAxisTicks)\n            .tickFormat(this.formatService.moneyFormatter); //https://github.com/d3/d3-format\n        this.yAxis$.call(yAxis);\n        //this.yAxis$.selectAll(\".domain\").remove(); // Remove the axis line\n    }\n\n    \n    /**\n     * Redraw the simple tooltip (vertical line)\n     */\n    onMousemove() {\n        if(!this.tooltipItem && this.showTooltip) {\n            this.tooltipX = d3.mouse(this.overlay.nativeElement)[0];\n        }\n        this.tooltipItem = undefined;\n    }\n\n    /**\n     * Notify parent component that a record was clicked\n     * @param datum\n     */\n    onRecordClicked(datum: MoneyDatum) {\n        this.recordClicked.next(datum.record);\n    }\n\n    /**\n     * Filter the search results with the clicked amount of money\n     * @param datum \n     */\n    filterDatum(datum: MoneyDatum) {\n        const expr = this.exprBuilder.makeExpr(this.moneyColumn, datum.rawvalue, `${datum.currency} ${this.formatService.moneyFormatter(datum.value)}`)\n        this.searchService.query.addSelect(expr, this.name);\n        this.searchService.search();\n    }\n\n    /**\n     * Remove the simple tooltip (vertical line)\n     */\n    onMouseout() {\n        if(!this.tooltipItem) {\n            this.tooltipX = undefined;\n        }\n    }\n\n    /**\n     * Compute the tooltip position when an amount of money is hovered\n     * @param datum \n     */\n    onMouseEnterDatum(datum: MoneyDatum) {\n\n        if(!this.showTooltip) {\n            return;\n        }\n\n        this.tooltipItem = datum;\n\n        const x = this.x(datum.date);\n        const y = this.y(datum.value);\n        const r = this.r(datum.count);\n\n        // Since we use viewBox to auto-adjust the SVG to the container size, we have to\n        // convert from the SVG coordinate system to the HTML coordinate system\n        const actualWidth = (this.el.nativeElement as HTMLElement).offsetWidth;\n        const scale = actualWidth / this.width;\n        const relativeX = x / this.width;\n\n        // Tooltip to the right\n        if(relativeX  {\n        if(this.tooltipItem) {\n            this.tooltipItem = undefined;\n            this.tooltipX = undefined;\n        }\n    }\n}\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/NetworkContext.html":{"url":"interfaces/NetworkContext.html","title":"interface - NetworkContext","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  NetworkContext\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            network/network-models.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        appService\n                                \n                                \n                                        edges\n                                \n                                \n                                        exprBuilder\n                                \n                                \n                                        intlService\n                                \n                                \n                                        name\n                                \n                                \n                                        networkService\n                                \n                                \n                                        nodes\n                                \n                                \n                                        searchService\n                                \n                            \n                        \n                    \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    select\n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            select\n                        \n                        \n                    \n                \n            \n            \n                \nselect(node?: Node, edge?: Edge)\n                \n            \n\n\n            \n                \n                    Defined in network/network-models.ts:128\n                \n            \n\n\n            \n                \n                    Interactions \n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    node\n                                    \n                                                Node\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    edge\n                                    \n                                                Edge\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        appService\n                                    \n                                \n                                \n                                    \n                                        appService:     AppService\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     AppService\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        edges\n                                    \n                                \n                                \n                                    \n                                        edges:         DataSet\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         DataSet\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        exprBuilder\n                                    \n                                \n                                \n                                    \n                                        exprBuilder:     ExprBuilder\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     ExprBuilder\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        intlService\n                                    \n                                \n                                \n                                    \n                                        intlService:     IntlService\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     IntlService\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        name\n                                    \n                                \n                                \n                                    \n                                        name:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Name of this network, for use in selections \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        networkService\n                                    \n                                \n                                \n                                    \n                                        networkService:     VisNetworkService\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     VisNetworkService\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        nodes\n                                    \n                                \n                                \n                                    \n                                        nodes:         DataSet\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         DataSet\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Vis.js data structures \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        searchService\n                                    \n                                \n                                \n                                    \n                                        searchService:     SearchService\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     SearchService\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Useful services \n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { Subject } from 'rxjs';\nimport { Action } from '@sinequa/components/action';\nimport { Utils } from '@sinequa/core/base';\nimport { DataSet } from \"vis-data/peer/esm/vis-data\";\nimport { SearchService } from '@sinequa/components/search';\nimport { VisNetworkService } from 'ngx-vis';\nimport { AppService, ExprBuilder } from '@sinequa/core/app-utils';\nimport { IntlService } from '@sinequa/core/intl';\n\n// TYPES (configuration)\n\nexport interface NodeType {\n    name: string;\n    /** Vis Node options (merged in the Node objects). See https://visjs.github.io/vis-network/docs/network/nodes.html */\n    nodeOptions: {[key: string]: any} | ((node: Node, type: NodeType) => {[key: string]: any} );\n    /** If a field is provided, it can be used to filter the node value (and access the label, formatter, etc.) */\n    field?: string;\n}\n\nexport interface EdgeType {\n    /** Node types attached to this edge type. Should typically be 2 items, but cooccurrence aggregation might return more */\n    nodeTypes: NodeType[];\n    /** Vis Edge options (merged in the Edge objects). See https://visjs.github.io/vis-network/docs/network/edges.html */\n    edgeOptions: {[key: string]: any} | ((nodes: Node[], edge: Edge, type: EdgeType) => {[key: string]: any} );\n    /** If a field is provided, it can be used to filter the node value (and access the label, formatter, etc.) */\n    field?: string;\n}\n\n\n// DATA\n\n// Nodes (based on Vis Node interface)\n\nexport interface Node {\n    id: string;\n    label: string;\n\n    // Custom properties\n    type: NodeType;\n    provider: NetworkProvider;\n    visible: boolean;\n    /** count is a mutable property used to scale the node size in function of the size of adjacent edges*/\n    count: number;\n    /** the precedence of a node determines which node object is kept when merging two dataset (the highest precedence node is kept) */\n    precedence?: number;\n    // Context\n    context: NetworkContext;\n}\n\n// Edge (based on Vis Edge interface)\n\nexport interface Edge {\n    id: string;\n    from: string;\n    to: string;\n\n    // Custom properties\n    type: EdgeType;\n    provider: NetworkProvider;\n    visible: boolean;    \n    /** count is a property representing the strength of an edge, which scales the count of adjacent nodes*/\n    count: number;\n    /** A field value may be provided to filter search based on the edge field type */\n    fieldValue?: string;\n    // Context\n    context: NetworkContext;\n}\n\n\nexport interface NetworkProvider {\n    /** Whether or not the provider is active (if inactive, it will not provide empty datasets of nodes and edges) */\n    active: boolean;\n\n    /** Readable name of this provider */\n    name: string;\n\n    /** Dataset of this provider */\n    dataset: NetworkDataset;\n\n    /** Context (wrapper for general data about the network and services) */\n    context: NetworkContext;\n\n    /** Returns the Subject of this provider */\n    getProvider(): Subject;\n\n    /** Asynchronously provide data via it's provider Subject */\n    getData(context: NetworkContext); // skip/count handled internally\n\n    /** Called after the datasets provided by all providers have been merged into a single dataset */\n    onDatasetsMerged(dataset: NetworkDataset);\n\n    /** Called after the dataset is filtered and passed to Vis for rendering */\n    onNodesInserted(nodes: Node[]);\n\n    /** Called when ANY node is clicked in the rendered view of the network */\n    onNodeClicked(node: Node | undefined);\n\n    /** Called when ANY edge is clicked in the rendered view of the network */\n    onEdgeClicked(edge: Edge | undefined);\n\n    /** Retrieve the list of action for this provider. */\n    getProviderActions(): Action[];\n\n    /** Retrieve the list of action for a given node, and this provider. */\n    getNodeActions(node: Node): Action[];\n    \n    /** Retrieve the list of action for a given edge, and this provider. */\n    getEdgeActions(edge: Edge): Action[];\n\n    /** Called when the providers are discarded. Can be use to cancel subscriptions */\n    onDestroy();\n}\n\nexport interface NetworkContext {\n    /** Name of this network, for use in selections */\n    name: string;\n    /** Vis.js data structures */\n    nodes: DataSet;\n    edges: DataSet;\n    /** Useful services */\n    searchService: SearchService;\n    networkService: VisNetworkService;\n    appService: AppService;\n    intlService: IntlService;\n    exprBuilder: ExprBuilder;\n    /** Interactions */\n    select(node?: Node, edge?: Edge): void;\n}\n\n\nexport class NetworkDataset {\n\n    // Node index\n    private readonly nodeIdx: Map = new Map();\n\n    // Edge index\n    private readonly edgeIdx: Map = new Map();\n\n\n    /** Returns whether this node exists */\n    public hasNode(id: string): boolean {\n        return this.nodeIdx.has(id);\n    }\n    \n    /** Returns whether this edge exists */\n    public hasEdge(id: string): boolean {\n        return this.edgeIdx.has(id);\n    }\n\n    /** Returns the node with given id */\n    public getNode(id: string): Node | undefined {\n        return this.nodeIdx.get(id);\n    }\n\n    /** Returns the edge with given id */\n    public getEdge(id: string): Edge | undefined {\n        return this.edgeIdx.get(id);\n    }\n\n    /** Get the list of nodes */\n    public getNodes(): Node[] {\n        return Array.from(this.nodeIdx.values());\n    }\n\n    /** Get the list of edges */\n    public getEdges(): Edge[] {\n        return Array.from(this.edgeIdx.values());\n    }    \n\n    /** Get the list of visible nodes */\n    public getVisibleNodes(): Node[] {\n        return this.getNodes().filter(n => n.visible);\n    }\n\n    /** Get the list of visible edges */\n    public getVisibleEdges(): Edge[] {\n        return this.getEdges().filter(e => e.visible);\n    }\n\n    /** Get the list of node ids */\n    public getNodeIds(): string[] {\n        return Array.from(this.nodeIdx.keys());\n    }\n\n    /** Get the list of edge ids */\n    public getEdgeIds(): string[] {\n        return Array.from(this.edgeIdx.keys());\n    }\n    \n    /** Clears this dataset */\n    public clear() {\n        this.nodeIdx.clear();\n        this.edgeIdx.clear();\n    }\n\n    /** Add one or multiple nodes */\n    public addNodes(nodes: Node | Node[]) {\n        Array.isArray(nodes)? nodes.forEach(node => this.addNode(node)) : this.addNode(nodes);\n    }\n\n    /** Add one or multiple edges. */\n    public addEdges(edges: Edge | Edge[]) {\n        Array.isArray(edges)? edges.forEach(edge => this.addEdge(edge)) : this.addEdge(edges);\n    }\n\n    /** Remove one or multiple nodes. /!\\ Connected edges MUST be removed as well (use cleanRemoveNode() to do so) */\n    private removeNodes(ids: string | string[]) {\n        Array.isArray(ids)? ids.forEach(id => this.removeNode(id)) : this.removeNode(ids);\n    }\n\n    /** Remove one or multiple edges. */\n    public removeEdges(ids: string | string[]) {\n        Array.isArray(ids)? ids.forEach(id => this.removeEdge(id)) : this.removeEdge(ids);\n    }\n\n    /** Remove a node and its adjacent edges. keepDanglingNodes = false (default) removes the remaining nodes with no neighbor */\n    public cleanRemoveNode(nodeId: string, keepDanglingNodes?: boolean) {\n        this.getAdjacentEdges(nodeId).forEach(edge => {\n            const neighbor = this.getNode(edge.from === nodeId ? edge.to : edge.from) as Node;\n            this.removeEdges(edge.id);\n            neighbor.count -= edge.count;\n            if(!keepDanglingNodes && this.getAdjacentEdges(neighbor.id).length === 0) {\n                this.removeNodes(neighbor.id);\n            }\n        });\n    }\n\n    /** Get the edges adjacent to a node (O(n) method) */\n    public getAdjacentEdges(nodeId: string): Edge[] {\n        return this.getEdges().filter(e => e.from === nodeId || e.to === nodeId);\n    }\n\n    /** Get the nodes connected to a node via a single node (0(n) method) */\n    public getConnectedNodes(nodeId: string): Node[] {\n        return this.getAdjacentEdges(nodeId)\n                    .map(e => this.getNode(e.from === nodeId ? e.to : e.from) as Node);\n    }\n\n    /**\n     * Merge this dataset with another one. \n     * \n     * When duplicates nodes or edges are found:\n     * - The existing item is kept and updated\n     * - Their 'count' properties are added\n     * - Their 'visible' properties are ORed\n     * - Their nodeOptions and edgeOptions are updated\n     * \n     * @param dataset \n     */\n    public merge(dataset: NetworkDataset): NetworkDataset {\n\n        dataset.getNodes().forEach(node => {\n            node = Object.assign({}, node); // Avoid modifying the original datasets\n            if(!this.hasNode(node.id)) {\n                this.addNode(node);\n            }\n            else {\n                // Merge the new node with the existing one (which takes precedence by default)\n                let existingNode = this.getNode(node.id) as Node;\n                if((node.precedence || 0) > (existingNode.precedence || 0)) {\n                    // Set the new node in the node index\n                    this.nodeIdx.set(node.id, node);\n                    // swap existingNode and node for the merging of count, visible and node options\n                    const temp = node;\n                    node = existingNode;\n                    existingNode = temp;\n                }\n                existingNode.count += node.count;\n                existingNode.visible = existingNode.visible || node.visible;\n                let options: {[key: string]: any};\n                if(typeof existingNode.type.nodeOptions === \"function\") {\n                    options = existingNode.type.nodeOptions(existingNode, existingNode.type);\n                }\n                else {\n                    options = existingNode.type.nodeOptions;\n                }\n                Utils.extend(existingNode, options);\n            }\n        });\n\n        dataset.getEdges().forEach(edge => {\n            edge = Object.assign({}, edge); // Avoid modifying the original datasets\n            if(!this.hasEdge(edge.id)) {\n                this.addEdge(edge);\n            }\n            else {\n                // Merge the new edge with the existing one (which takes precedence)\n                // eg. statistical and semantic edges\n                const existingEdge = this.getEdge(edge.id) as Edge;\n                existingEdge.count += edge.count;\n                existingEdge.visible = existingEdge.visible || edge.visible;\n                // Merge edge labels (taking duplicates into account)\n                if(!!existingEdge[\"label\"] && !!edge[\"label\"]){\n                    edge[\"labels\"].forEach(label => {\n                        if(existingEdge[\"labels\"].indexOf(label) === -1) {\n                            existingEdge[\"label\"] += \", \"+label;\n                            existingEdge[\"labels\"].push(label);\n                        }\n                    });\n                }\n                let options: {[key: string]: any};\n                if(typeof existingEdge.type.edgeOptions === \"function\") {\n                    const nodes = [existingEdge.from, existingEdge.to].map(id => this.nodeIdx[id]);\n                    options = existingEdge.type.edgeOptions(nodes, existingEdge, existingEdge.type);\n                }\n                else {\n                    options = existingEdge.type.edgeOptions;\n                }\n                Utils.extend(existingEdge, options);\n            }\n        });\n\n        return this;\n    }\n\n    /** Transfer nodes and edges to the Vis nodes and edges DataSets */\n    updateDatasets(nodes: DataSet, edges: DataSet) {\n        nodes.remove(nodes.get().filter(n => !this.getNode(n.id)?.visible));\n        edges.remove(edges.get().filter(e => !this.getEdge(e.id)?.visible));\n        nodes.update(this.getVisibleNodes());\n        edges.update(this.getVisibleEdges());\n    }\n\n    \n    private addNode(node: Node) {\n        if(this.hasNode(node.id)) {\n            throw new Error(`Node '${node.id}' already in dataset`);\n        }\n        this.nodeIdx.set(node.id, node);\n    }\n    \n    private addEdge(edge: Edge) {\n        if(this.hasEdge(edge.id)) {\n            throw new Error(`Edge '${edge.id}' already in dataset`);\n        }\n        if(!this.hasNode(edge.from) || !this.hasNode(edge.to)) {\n            throw new Error(`Edge '${edge.id}' cannot be added as one of the nodes is missing from the dataset`)\n        }\n        this.edgeIdx.set(edge.id, edge);\n    }\n\n    private removeNode(id: string) {\n        this.nodeIdx.delete(id);\n    }\n\n    private removeEdge(id: string) {\n        this.edgeIdx.delete(id);\n    }\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/NetworkDataset.html":{"url":"classes/NetworkDataset.html","title":"class - NetworkDataset","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  NetworkDataset\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            network/network-models.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                addEdges\n                            \n                            \n                                    Public\n                                addNodes\n                            \n                            \n                                    Public\n                                cleanRemoveNode\n                            \n                            \n                                    Public\n                                clear\n                            \n                            \n                                    Public\n                                getAdjacentEdges\n                            \n                            \n                                    Public\n                                getConnectedNodes\n                            \n                            \n                                    Public\n                                getEdge\n                            \n                            \n                                    Public\n                                getEdgeIds\n                            \n                            \n                                    Public\n                                getEdges\n                            \n                            \n                                    Public\n                                getNode\n                            \n                            \n                                    Public\n                                getNodeIds\n                            \n                            \n                                    Public\n                                getNodes\n                            \n                            \n                                    Public\n                                getVisibleEdges\n                            \n                            \n                                    Public\n                                getVisibleNodes\n                            \n                            \n                                    Public\n                                hasEdge\n                            \n                            \n                                    Public\n                                hasNode\n                            \n                            \n                                    Public\n                                merge\n                            \n                            \n                                    Public\n                                removeEdges\n                            \n                            \n                                updateDatasets\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            addEdges\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    addEdges(edges: Edge | Edge[])\n                \n            \n\n\n            \n                \n                    Defined in network/network-models.ts:203\n                \n            \n\n\n            \n                \n                    Add one or multiple edges. \n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    edges\n                                    \n                                                Edge | Edge[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            addNodes\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    addNodes(nodes: Node | Node[])\n                \n            \n\n\n            \n                \n                    Defined in network/network-models.ts:198\n                \n            \n\n\n            \n                \n                    Add one or multiple nodes \n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    nodes\n                                    \n                                                Node | Node[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            cleanRemoveNode\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    cleanRemoveNode(nodeId: string, keepDanglingNodes?: boolean)\n                \n            \n\n\n            \n                \n                    Defined in network/network-models.ts:218\n                \n            \n\n\n            \n                \n                    Remove a node and its adjacent edges. keepDanglingNodes = false (default) removes the remaining nodes with no neighbor \n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    nodeId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    keepDanglingNodes\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            clear\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    clear()\n                \n            \n\n\n            \n                \n                    Defined in network/network-models.ts:192\n                \n            \n\n\n            \n                \n                    Clears this dataset \n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getAdjacentEdges\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getAdjacentEdges(nodeId: string)\n                \n            \n\n\n            \n                \n                    Defined in network/network-models.ts:230\n                \n            \n\n\n            \n                \n                    Get the edges adjacent to a node (O(n) method) \n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    nodeId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Edge[]\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getConnectedNodes\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getConnectedNodes(nodeId: string)\n                \n            \n\n\n            \n                \n                    Defined in network/network-models.ts:235\n                \n            \n\n\n            \n                \n                    Get the nodes connected to a node via a single node (0(n) method) \n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    nodeId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Node[]\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getEdge\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getEdge(id: string)\n                \n            \n\n\n            \n                \n                    Defined in network/network-models.ts:157\n                \n            \n\n\n            \n                \n                    Returns the edge with given id \n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Edge | undefined\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getEdgeIds\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getEdgeIds()\n                \n            \n\n\n            \n                \n                    Defined in network/network-models.ts:187\n                \n            \n\n\n            \n                \n                    Get the list of edge ids \n\n\n                    \n                        Returns :     string[]\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getEdges\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getEdges()\n                \n            \n\n\n            \n                \n                    Defined in network/network-models.ts:167\n                \n            \n\n\n            \n                \n                    Get the list of edges \n\n\n                    \n                        Returns :         Edge[]\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getNode\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getNode(id: string)\n                \n            \n\n\n            \n                \n                    Defined in network/network-models.ts:152\n                \n            \n\n\n            \n                \n                    Returns the node with given id \n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Node | undefined\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getNodeIds\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getNodeIds()\n                \n            \n\n\n            \n                \n                    Defined in network/network-models.ts:182\n                \n            \n\n\n            \n                \n                    Get the list of node ids \n\n\n                    \n                        Returns :     string[]\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getNodes\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getNodes()\n                \n            \n\n\n            \n                \n                    Defined in network/network-models.ts:162\n                \n            \n\n\n            \n                \n                    Get the list of nodes \n\n\n                    \n                        Returns :         Node[]\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getVisibleEdges\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getVisibleEdges()\n                \n            \n\n\n            \n                \n                    Defined in network/network-models.ts:177\n                \n            \n\n\n            \n                \n                    Get the list of visible edges \n\n\n                    \n                        Returns :         Edge[]\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getVisibleNodes\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getVisibleNodes()\n                \n            \n\n\n            \n                \n                    Defined in network/network-models.ts:172\n                \n            \n\n\n            \n                \n                    Get the list of visible nodes \n\n\n                    \n                        Returns :         Node[]\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            hasEdge\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    hasEdge(id: string)\n                \n            \n\n\n            \n                \n                    Defined in network/network-models.ts:147\n                \n            \n\n\n            \n                \n                    Returns whether this edge exists \n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            hasNode\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    hasNode(id: string)\n                \n            \n\n\n            \n                \n                    Defined in network/network-models.ts:142\n                \n            \n\n\n            \n                \n                    Returns whether this node exists \n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            merge\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    merge(dataset: NetworkDataset)\n                \n            \n\n\n            \n                \n                    Defined in network/network-models.ts:251\n                \n            \n\n\n            \n                \n                    Merge this dataset with another one. \nWhen duplicates nodes or edges are found:\n\nThe existing item is kept and updated\nTheir 'count' properties are added\nTheir 'visible' properties are ORed\nTheir nodeOptions and edgeOptions are updated\n\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dataset\n                                    \n                                                NetworkDataset\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         NetworkDataset\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            removeEdges\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    removeEdges(ids: string | string[])\n                \n            \n\n\n            \n                \n                    Defined in network/network-models.ts:213\n                \n            \n\n\n            \n                \n                    Remove one or multiple edges. \n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    ids\n                                    \n                                            string | string[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            updateDatasets\n                        \n                        \n                    \n                \n            \n            \n                \nupdateDatasets(nodes: DataSet, edges: DataSet)\n                \n            \n\n\n            \n                \n                    Defined in network/network-models.ts:318\n                \n            \n\n\n            \n                \n                    Transfer nodes and edges to the Vis nodes and edges DataSets \n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    nodes\n                                    \n                                                DataSet\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    edges\n                                    \n                                                DataSet\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Subject } from 'rxjs';\nimport { Action } from '@sinequa/components/action';\nimport { Utils } from '@sinequa/core/base';\nimport { DataSet } from \"vis-data/peer/esm/vis-data\";\nimport { SearchService } from '@sinequa/components/search';\nimport { VisNetworkService } from 'ngx-vis';\nimport { AppService, ExprBuilder } from '@sinequa/core/app-utils';\nimport { IntlService } from '@sinequa/core/intl';\n\n// TYPES (configuration)\n\nexport interface NodeType {\n    name: string;\n    /** Vis Node options (merged in the Node objects). See https://visjs.github.io/vis-network/docs/network/nodes.html */\n    nodeOptions: {[key: string]: any} | ((node: Node, type: NodeType) => {[key: string]: any} );\n    /** If a field is provided, it can be used to filter the node value (and access the label, formatter, etc.) */\n    field?: string;\n}\n\nexport interface EdgeType {\n    /** Node types attached to this edge type. Should typically be 2 items, but cooccurrence aggregation might return more */\n    nodeTypes: NodeType[];\n    /** Vis Edge options (merged in the Edge objects). See https://visjs.github.io/vis-network/docs/network/edges.html */\n    edgeOptions: {[key: string]: any} | ((nodes: Node[], edge: Edge, type: EdgeType) => {[key: string]: any} );\n    /** If a field is provided, it can be used to filter the node value (and access the label, formatter, etc.) */\n    field?: string;\n}\n\n\n// DATA\n\n// Nodes (based on Vis Node interface)\n\nexport interface Node {\n    id: string;\n    label: string;\n\n    // Custom properties\n    type: NodeType;\n    provider: NetworkProvider;\n    visible: boolean;\n    /** count is a mutable property used to scale the node size in function of the size of adjacent edges*/\n    count: number;\n    /** the precedence of a node determines which node object is kept when merging two dataset (the highest precedence node is kept) */\n    precedence?: number;\n    // Context\n    context: NetworkContext;\n}\n\n// Edge (based on Vis Edge interface)\n\nexport interface Edge {\n    id: string;\n    from: string;\n    to: string;\n\n    // Custom properties\n    type: EdgeType;\n    provider: NetworkProvider;\n    visible: boolean;    \n    /** count is a property representing the strength of an edge, which scales the count of adjacent nodes*/\n    count: number;\n    /** A field value may be provided to filter search based on the edge field type */\n    fieldValue?: string;\n    // Context\n    context: NetworkContext;\n}\n\n\nexport interface NetworkProvider {\n    /** Whether or not the provider is active (if inactive, it will not provide empty datasets of nodes and edges) */\n    active: boolean;\n\n    /** Readable name of this provider */\n    name: string;\n\n    /** Dataset of this provider */\n    dataset: NetworkDataset;\n\n    /** Context (wrapper for general data about the network and services) */\n    context: NetworkContext;\n\n    /** Returns the Subject of this provider */\n    getProvider(): Subject;\n\n    /** Asynchronously provide data via it's provider Subject */\n    getData(context: NetworkContext); // skip/count handled internally\n\n    /** Called after the datasets provided by all providers have been merged into a single dataset */\n    onDatasetsMerged(dataset: NetworkDataset);\n\n    /** Called after the dataset is filtered and passed to Vis for rendering */\n    onNodesInserted(nodes: Node[]);\n\n    /** Called when ANY node is clicked in the rendered view of the network */\n    onNodeClicked(node: Node | undefined);\n\n    /** Called when ANY edge is clicked in the rendered view of the network */\n    onEdgeClicked(edge: Edge | undefined);\n\n    /** Retrieve the list of action for this provider. */\n    getProviderActions(): Action[];\n\n    /** Retrieve the list of action for a given node, and this provider. */\n    getNodeActions(node: Node): Action[];\n    \n    /** Retrieve the list of action for a given edge, and this provider. */\n    getEdgeActions(edge: Edge): Action[];\n\n    /** Called when the providers are discarded. Can be use to cancel subscriptions */\n    onDestroy();\n}\n\nexport interface NetworkContext {\n    /** Name of this network, for use in selections */\n    name: string;\n    /** Vis.js data structures */\n    nodes: DataSet;\n    edges: DataSet;\n    /** Useful services */\n    searchService: SearchService;\n    networkService: VisNetworkService;\n    appService: AppService;\n    intlService: IntlService;\n    exprBuilder: ExprBuilder;\n    /** Interactions */\n    select(node?: Node, edge?: Edge): void;\n}\n\n\nexport class NetworkDataset {\n\n    // Node index\n    private readonly nodeIdx: Map = new Map();\n\n    // Edge index\n    private readonly edgeIdx: Map = new Map();\n\n\n    /** Returns whether this node exists */\n    public hasNode(id: string): boolean {\n        return this.nodeIdx.has(id);\n    }\n    \n    /** Returns whether this edge exists */\n    public hasEdge(id: string): boolean {\n        return this.edgeIdx.has(id);\n    }\n\n    /** Returns the node with given id */\n    public getNode(id: string): Node | undefined {\n        return this.nodeIdx.get(id);\n    }\n\n    /** Returns the edge with given id */\n    public getEdge(id: string): Edge | undefined {\n        return this.edgeIdx.get(id);\n    }\n\n    /** Get the list of nodes */\n    public getNodes(): Node[] {\n        return Array.from(this.nodeIdx.values());\n    }\n\n    /** Get the list of edges */\n    public getEdges(): Edge[] {\n        return Array.from(this.edgeIdx.values());\n    }    \n\n    /** Get the list of visible nodes */\n    public getVisibleNodes(): Node[] {\n        return this.getNodes().filter(n => n.visible);\n    }\n\n    /** Get the list of visible edges */\n    public getVisibleEdges(): Edge[] {\n        return this.getEdges().filter(e => e.visible);\n    }\n\n    /** Get the list of node ids */\n    public getNodeIds(): string[] {\n        return Array.from(this.nodeIdx.keys());\n    }\n\n    /** Get the list of edge ids */\n    public getEdgeIds(): string[] {\n        return Array.from(this.edgeIdx.keys());\n    }\n    \n    /** Clears this dataset */\n    public clear() {\n        this.nodeIdx.clear();\n        this.edgeIdx.clear();\n    }\n\n    /** Add one or multiple nodes */\n    public addNodes(nodes: Node | Node[]) {\n        Array.isArray(nodes)? nodes.forEach(node => this.addNode(node)) : this.addNode(nodes);\n    }\n\n    /** Add one or multiple edges. */\n    public addEdges(edges: Edge | Edge[]) {\n        Array.isArray(edges)? edges.forEach(edge => this.addEdge(edge)) : this.addEdge(edges);\n    }\n\n    /** Remove one or multiple nodes. /!\\ Connected edges MUST be removed as well (use cleanRemoveNode() to do so) */\n    private removeNodes(ids: string | string[]) {\n        Array.isArray(ids)? ids.forEach(id => this.removeNode(id)) : this.removeNode(ids);\n    }\n\n    /** Remove one or multiple edges. */\n    public removeEdges(ids: string | string[]) {\n        Array.isArray(ids)? ids.forEach(id => this.removeEdge(id)) : this.removeEdge(ids);\n    }\n\n    /** Remove a node and its adjacent edges. keepDanglingNodes = false (default) removes the remaining nodes with no neighbor */\n    public cleanRemoveNode(nodeId: string, keepDanglingNodes?: boolean) {\n        this.getAdjacentEdges(nodeId).forEach(edge => {\n            const neighbor = this.getNode(edge.from === nodeId ? edge.to : edge.from) as Node;\n            this.removeEdges(edge.id);\n            neighbor.count -= edge.count;\n            if(!keepDanglingNodes && this.getAdjacentEdges(neighbor.id).length === 0) {\n                this.removeNodes(neighbor.id);\n            }\n        });\n    }\n\n    /** Get the edges adjacent to a node (O(n) method) */\n    public getAdjacentEdges(nodeId: string): Edge[] {\n        return this.getEdges().filter(e => e.from === nodeId || e.to === nodeId);\n    }\n\n    /** Get the nodes connected to a node via a single node (0(n) method) */\n    public getConnectedNodes(nodeId: string): Node[] {\n        return this.getAdjacentEdges(nodeId)\n                    .map(e => this.getNode(e.from === nodeId ? e.to : e.from) as Node);\n    }\n\n    /**\n     * Merge this dataset with another one. \n     * \n     * When duplicates nodes or edges are found:\n     * - The existing item is kept and updated\n     * - Their 'count' properties are added\n     * - Their 'visible' properties are ORed\n     * - Their nodeOptions and edgeOptions are updated\n     * \n     * @param dataset \n     */\n    public merge(dataset: NetworkDataset): NetworkDataset {\n\n        dataset.getNodes().forEach(node => {\n            node = Object.assign({}, node); // Avoid modifying the original datasets\n            if(!this.hasNode(node.id)) {\n                this.addNode(node);\n            }\n            else {\n                // Merge the new node with the existing one (which takes precedence by default)\n                let existingNode = this.getNode(node.id) as Node;\n                if((node.precedence || 0) > (existingNode.precedence || 0)) {\n                    // Set the new node in the node index\n                    this.nodeIdx.set(node.id, node);\n                    // swap existingNode and node for the merging of count, visible and node options\n                    const temp = node;\n                    node = existingNode;\n                    existingNode = temp;\n                }\n                existingNode.count += node.count;\n                existingNode.visible = existingNode.visible || node.visible;\n                let options: {[key: string]: any};\n                if(typeof existingNode.type.nodeOptions === \"function\") {\n                    options = existingNode.type.nodeOptions(existingNode, existingNode.type);\n                }\n                else {\n                    options = existingNode.type.nodeOptions;\n                }\n                Utils.extend(existingNode, options);\n            }\n        });\n\n        dataset.getEdges().forEach(edge => {\n            edge = Object.assign({}, edge); // Avoid modifying the original datasets\n            if(!this.hasEdge(edge.id)) {\n                this.addEdge(edge);\n            }\n            else {\n                // Merge the new edge with the existing one (which takes precedence)\n                // eg. statistical and semantic edges\n                const existingEdge = this.getEdge(edge.id) as Edge;\n                existingEdge.count += edge.count;\n                existingEdge.visible = existingEdge.visible || edge.visible;\n                // Merge edge labels (taking duplicates into account)\n                if(!!existingEdge[\"label\"] && !!edge[\"label\"]){\n                    edge[\"labels\"].forEach(label => {\n                        if(existingEdge[\"labels\"].indexOf(label) === -1) {\n                            existingEdge[\"label\"] += \", \"+label;\n                            existingEdge[\"labels\"].push(label);\n                        }\n                    });\n                }\n                let options: {[key: string]: any};\n                if(typeof existingEdge.type.edgeOptions === \"function\") {\n                    const nodes = [existingEdge.from, existingEdge.to].map(id => this.nodeIdx[id]);\n                    options = existingEdge.type.edgeOptions(nodes, existingEdge, existingEdge.type);\n                }\n                else {\n                    options = existingEdge.type.edgeOptions;\n                }\n                Utils.extend(existingEdge, options);\n            }\n        });\n\n        return this;\n    }\n\n    /** Transfer nodes and edges to the Vis nodes and edges DataSets */\n    updateDatasets(nodes: DataSet, edges: DataSet) {\n        nodes.remove(nodes.get().filter(n => !this.getNode(n.id)?.visible));\n        edges.remove(edges.get().filter(e => !this.getEdge(e.id)?.visible));\n        nodes.update(this.getVisibleNodes());\n        edges.update(this.getVisibleEdges());\n    }\n\n    \n    private addNode(node: Node) {\n        if(this.hasNode(node.id)) {\n            throw new Error(`Node '${node.id}' already in dataset`);\n        }\n        this.nodeIdx.set(node.id, node);\n    }\n    \n    private addEdge(edge: Edge) {\n        if(this.hasEdge(edge.id)) {\n            throw new Error(`Edge '${edge.id}' already in dataset`);\n        }\n        if(!this.hasNode(edge.from) || !this.hasNode(edge.to)) {\n            throw new Error(`Edge '${edge.id}' cannot be added as one of the nodes is missing from the dataset`)\n        }\n        this.edgeIdx.set(edge.id, edge);\n    }\n\n    private removeNode(id: string) {\n        this.nodeIdx.delete(id);\n    }\n\n    private removeEdge(id: string) {\n        this.edgeIdx.delete(id);\n    }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/NetworkModule.html":{"url":"modules/NetworkModule.html","title":"module - NetworkModule","body":"\n                   \n\n\n\n\n    Modules\n    NetworkModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_NetworkModule\n\n\n\ncluster_NetworkModule_declarations\n\n\n\ncluster_NetworkModule_exports\n\n\n\n\nBsEdgeInfoCard\n\nBsEdgeInfoCard\n\n\n\nNetworkModule\n\nNetworkModule\n\nNetworkModule -->\n\nBsEdgeInfoCard->NetworkModule\n\n\n\n\n\nBsNodeInfoCard\n\nBsNodeInfoCard\n\nNetworkModule -->\n\nBsNodeInfoCard->NetworkModule\n\n\n\n\n\nNetworkComponent\n\nNetworkComponent\n\nNetworkModule -->\n\nNetworkComponent->NetworkModule\n\n\n\n\n\nBsEdgeInfoCard \n\nBsEdgeInfoCard \n\nBsEdgeInfoCard  -->\n\nNetworkModule->BsEdgeInfoCard \n\n\n\n\n\nBsNodeInfoCard \n\nBsNodeInfoCard \n\nBsNodeInfoCard  -->\n\nNetworkModule->BsNodeInfoCard \n\n\n\n\n\nNetworkComponent \n\nNetworkComponent \n\nNetworkComponent  -->\n\nNetworkModule->NetworkComponent \n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            network/network.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Declarations\n                    \n                        \n                            BsEdgeInfoCard\n                        \n                        \n                            BsNodeInfoCard\n                        \n                        \n                            NetworkComponent\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            BsEdgeInfoCard\n                        \n                        \n                            BsNodeInfoCard\n                        \n                        \n                            NetworkComponent\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { NgModule } from \"@angular/core\";\nimport { CommonModule } from \"@angular/common\";\nimport { FormsModule, ReactiveFormsModule } from \"@angular/forms\";\n\n\nimport { IntlModule } from \"@sinequa/core/intl\";\nimport { UtilsModule } from \"@sinequa/components/utils\";\nimport { CollapseModule } from \"@sinequa/components/collapse\";\nimport { BsActionModule } from \"@sinequa/components/action\";\nimport { BsFacetModule } from \"@sinequa/components/facet\";\n\nimport { VisModule } from 'ngx-vis';\nimport { NetworkComponent } from \"./network.component\";\nimport { BsNodeInfoCard } from \"./node-info-card.component\";\nimport { BsEdgeInfoCard } from \"./edge-info-card.component\";\n\n@NgModule({\n    imports: [\n        CommonModule,\n        FormsModule, ReactiveFormsModule, \n\n        IntlModule,\n        UtilsModule,\n        CollapseModule,\n        BsActionModule,\n        BsFacetModule,\n        \n        VisModule\n    ],\n    declarations: [\n        NetworkComponent,\n        BsNodeInfoCard,\n        BsEdgeInfoCard\n    ],\n    exports: [\n        NetworkComponent,\n        BsNodeInfoCard,\n        BsEdgeInfoCard\n    ],\n})\nexport class NetworkModule {\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/NetworkProvider.html":{"url":"interfaces/NetworkProvider.html","title":"interface - NetworkProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  NetworkProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            network/network-models.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        active\n                                \n                                \n                                        context\n                                \n                                \n                                        dataset\n                                \n                                \n                                        name\n                                \n                            \n                        \n                    \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    getData\n                                \n                                \n                                    getEdgeActions\n                                \n                                \n                                    getNodeActions\n                                \n                                \n                                    getProvider\n                                \n                                \n                                    getProviderActions\n                                \n                                \n                                    onDatasetsMerged\n                                \n                                \n                                    onDestroy\n                                \n                                \n                                    onEdgeClicked\n                                \n                                \n                                    onNodeClicked\n                                \n                                \n                                    onNodesInserted\n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getData\n                        \n                        \n                    \n                \n            \n            \n                \ngetData(context: NetworkContext)\n                \n            \n\n\n            \n                \n                    Defined in network/network-models.ts:88\n                \n            \n\n\n            \n                \n                    Asynchronously provide data via it's provider Subject \n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                                NetworkContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getEdgeActions\n                        \n                        \n                    \n                \n            \n            \n                \ngetEdgeActions(edge: Edge)\n                \n            \n\n\n            \n                \n                    Defined in network/network-models.ts:109\n                \n            \n\n\n            \n                \n                    Retrieve the list of action for a given edge, and this provider. \n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    edge\n                                    \n                                                Edge\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Action[]\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getNodeActions\n                        \n                        \n                    \n                \n            \n            \n                \ngetNodeActions(node: Node)\n                \n            \n\n\n            \n                \n                    Defined in network/network-models.ts:106\n                \n            \n\n\n            \n                \n                    Retrieve the list of action for a given node, and this provider. \n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    node\n                                    \n                                                Node\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Action[]\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getProvider\n                        \n                        \n                    \n                \n            \n            \n                \ngetProvider()\n                \n            \n\n\n            \n                \n                    Defined in network/network-models.ts:85\n                \n            \n\n\n            \n                \n                    Returns the Subject of this provider \n\n\n                    \n                        Returns :         Subject\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getProviderActions\n                        \n                        \n                    \n                \n            \n            \n                \ngetProviderActions()\n                \n            \n\n\n            \n                \n                    Defined in network/network-models.ts:103\n                \n            \n\n\n            \n                \n                    Retrieve the list of action for this provider. \n\n\n                    \n                        Returns :     Action[]\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            onDatasetsMerged\n                        \n                        \n                    \n                \n            \n            \n                \nonDatasetsMerged(dataset: NetworkDataset)\n                \n            \n\n\n            \n                \n                    Defined in network/network-models.ts:91\n                \n            \n\n\n            \n                \n                    Called after the datasets provided by all providers have been merged into a single dataset \n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dataset\n                                    \n                                                NetworkDataset\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            onDestroy\n                        \n                        \n                    \n                \n            \n            \n                \nonDestroy()\n                \n            \n\n\n            \n                \n                    Defined in network/network-models.ts:112\n                \n            \n\n\n            \n                \n                    Called when the providers are discarded. Can be use to cancel subscriptions \n\n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            onEdgeClicked\n                        \n                        \n                    \n                \n            \n            \n                \nonEdgeClicked(edge: Edge | undefined)\n                \n            \n\n\n            \n                \n                    Defined in network/network-models.ts:100\n                \n            \n\n\n            \n                \n                    Called when ANY edge is clicked in the rendered view of the network \n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    edge\n                                    \n                                                Edge | undefined\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            onNodeClicked\n                        \n                        \n                    \n                \n            \n            \n                \nonNodeClicked(node: Node | undefined)\n                \n            \n\n\n            \n                \n                    Defined in network/network-models.ts:97\n                \n            \n\n\n            \n                \n                    Called when ANY node is clicked in the rendered view of the network \n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    node\n                                    \n                                                Node | undefined\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            onNodesInserted\n                        \n                        \n                    \n                \n            \n            \n                \nonNodesInserted(nodes: Node[])\n                \n            \n\n\n            \n                \n                    Defined in network/network-models.ts:94\n                \n            \n\n\n            \n                \n                    Called after the dataset is filtered and passed to Vis for rendering \n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    nodes\n                                    \n                                                Node[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        active\n                                    \n                                \n                                \n                                    \n                                        active:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Whether or not the provider is active (if inactive, it will not provide empty datasets of nodes and edges) \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        context\n                                    \n                                \n                                \n                                    \n                                        context:         NetworkContext\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         NetworkContext\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Context (wrapper for general data about the network and services) \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        dataset\n                                    \n                                \n                                \n                                    \n                                        dataset:         NetworkDataset\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         NetworkDataset\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Dataset of this provider \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        name\n                                    \n                                \n                                \n                                    \n                                        name:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Readable name of this provider \n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { Subject } from 'rxjs';\nimport { Action } from '@sinequa/components/action';\nimport { Utils } from '@sinequa/core/base';\nimport { DataSet } from \"vis-data/peer/esm/vis-data\";\nimport { SearchService } from '@sinequa/components/search';\nimport { VisNetworkService } from 'ngx-vis';\nimport { AppService, ExprBuilder } from '@sinequa/core/app-utils';\nimport { IntlService } from '@sinequa/core/intl';\n\n// TYPES (configuration)\n\nexport interface NodeType {\n    name: string;\n    /** Vis Node options (merged in the Node objects). See https://visjs.github.io/vis-network/docs/network/nodes.html */\n    nodeOptions: {[key: string]: any} | ((node: Node, type: NodeType) => {[key: string]: any} );\n    /** If a field is provided, it can be used to filter the node value (and access the label, formatter, etc.) */\n    field?: string;\n}\n\nexport interface EdgeType {\n    /** Node types attached to this edge type. Should typically be 2 items, but cooccurrence aggregation might return more */\n    nodeTypes: NodeType[];\n    /** Vis Edge options (merged in the Edge objects). See https://visjs.github.io/vis-network/docs/network/edges.html */\n    edgeOptions: {[key: string]: any} | ((nodes: Node[], edge: Edge, type: EdgeType) => {[key: string]: any} );\n    /** If a field is provided, it can be used to filter the node value (and access the label, formatter, etc.) */\n    field?: string;\n}\n\n\n// DATA\n\n// Nodes (based on Vis Node interface)\n\nexport interface Node {\n    id: string;\n    label: string;\n\n    // Custom properties\n    type: NodeType;\n    provider: NetworkProvider;\n    visible: boolean;\n    /** count is a mutable property used to scale the node size in function of the size of adjacent edges*/\n    count: number;\n    /** the precedence of a node determines which node object is kept when merging two dataset (the highest precedence node is kept) */\n    precedence?: number;\n    // Context\n    context: NetworkContext;\n}\n\n// Edge (based on Vis Edge interface)\n\nexport interface Edge {\n    id: string;\n    from: string;\n    to: string;\n\n    // Custom properties\n    type: EdgeType;\n    provider: NetworkProvider;\n    visible: boolean;    \n    /** count is a property representing the strength of an edge, which scales the count of adjacent nodes*/\n    count: number;\n    /** A field value may be provided to filter search based on the edge field type */\n    fieldValue?: string;\n    // Context\n    context: NetworkContext;\n}\n\n\nexport interface NetworkProvider {\n    /** Whether or not the provider is active (if inactive, it will not provide empty datasets of nodes and edges) */\n    active: boolean;\n\n    /** Readable name of this provider */\n    name: string;\n\n    /** Dataset of this provider */\n    dataset: NetworkDataset;\n\n    /** Context (wrapper for general data about the network and services) */\n    context: NetworkContext;\n\n    /** Returns the Subject of this provider */\n    getProvider(): Subject;\n\n    /** Asynchronously provide data via it's provider Subject */\n    getData(context: NetworkContext); // skip/count handled internally\n\n    /** Called after the datasets provided by all providers have been merged into a single dataset */\n    onDatasetsMerged(dataset: NetworkDataset);\n\n    /** Called after the dataset is filtered and passed to Vis for rendering */\n    onNodesInserted(nodes: Node[]);\n\n    /** Called when ANY node is clicked in the rendered view of the network */\n    onNodeClicked(node: Node | undefined);\n\n    /** Called when ANY edge is clicked in the rendered view of the network */\n    onEdgeClicked(edge: Edge | undefined);\n\n    /** Retrieve the list of action for this provider. */\n    getProviderActions(): Action[];\n\n    /** Retrieve the list of action for a given node, and this provider. */\n    getNodeActions(node: Node): Action[];\n    \n    /** Retrieve the list of action for a given edge, and this provider. */\n    getEdgeActions(edge: Edge): Action[];\n\n    /** Called when the providers are discarded. Can be use to cancel subscriptions */\n    onDestroy();\n}\n\nexport interface NetworkContext {\n    /** Name of this network, for use in selections */\n    name: string;\n    /** Vis.js data structures */\n    nodes: DataSet;\n    edges: DataSet;\n    /** Useful services */\n    searchService: SearchService;\n    networkService: VisNetworkService;\n    appService: AppService;\n    intlService: IntlService;\n    exprBuilder: ExprBuilder;\n    /** Interactions */\n    select(node?: Node, edge?: Edge): void;\n}\n\n\nexport class NetworkDataset {\n\n    // Node index\n    private readonly nodeIdx: Map = new Map();\n\n    // Edge index\n    private readonly edgeIdx: Map = new Map();\n\n\n    /** Returns whether this node exists */\n    public hasNode(id: string): boolean {\n        return this.nodeIdx.has(id);\n    }\n    \n    /** Returns whether this edge exists */\n    public hasEdge(id: string): boolean {\n        return this.edgeIdx.has(id);\n    }\n\n    /** Returns the node with given id */\n    public getNode(id: string): Node | undefined {\n        return this.nodeIdx.get(id);\n    }\n\n    /** Returns the edge with given id */\n    public getEdge(id: string): Edge | undefined {\n        return this.edgeIdx.get(id);\n    }\n\n    /** Get the list of nodes */\n    public getNodes(): Node[] {\n        return Array.from(this.nodeIdx.values());\n    }\n\n    /** Get the list of edges */\n    public getEdges(): Edge[] {\n        return Array.from(this.edgeIdx.values());\n    }    \n\n    /** Get the list of visible nodes */\n    public getVisibleNodes(): Node[] {\n        return this.getNodes().filter(n => n.visible);\n    }\n\n    /** Get the list of visible edges */\n    public getVisibleEdges(): Edge[] {\n        return this.getEdges().filter(e => e.visible);\n    }\n\n    /** Get the list of node ids */\n    public getNodeIds(): string[] {\n        return Array.from(this.nodeIdx.keys());\n    }\n\n    /** Get the list of edge ids */\n    public getEdgeIds(): string[] {\n        return Array.from(this.edgeIdx.keys());\n    }\n    \n    /** Clears this dataset */\n    public clear() {\n        this.nodeIdx.clear();\n        this.edgeIdx.clear();\n    }\n\n    /** Add one or multiple nodes */\n    public addNodes(nodes: Node | Node[]) {\n        Array.isArray(nodes)? nodes.forEach(node => this.addNode(node)) : this.addNode(nodes);\n    }\n\n    /** Add one or multiple edges. */\n    public addEdges(edges: Edge | Edge[]) {\n        Array.isArray(edges)? edges.forEach(edge => this.addEdge(edge)) : this.addEdge(edges);\n    }\n\n    /** Remove one or multiple nodes. /!\\ Connected edges MUST be removed as well (use cleanRemoveNode() to do so) */\n    private removeNodes(ids: string | string[]) {\n        Array.isArray(ids)? ids.forEach(id => this.removeNode(id)) : this.removeNode(ids);\n    }\n\n    /** Remove one or multiple edges. */\n    public removeEdges(ids: string | string[]) {\n        Array.isArray(ids)? ids.forEach(id => this.removeEdge(id)) : this.removeEdge(ids);\n    }\n\n    /** Remove a node and its adjacent edges. keepDanglingNodes = false (default) removes the remaining nodes with no neighbor */\n    public cleanRemoveNode(nodeId: string, keepDanglingNodes?: boolean) {\n        this.getAdjacentEdges(nodeId).forEach(edge => {\n            const neighbor = this.getNode(edge.from === nodeId ? edge.to : edge.from) as Node;\n            this.removeEdges(edge.id);\n            neighbor.count -= edge.count;\n            if(!keepDanglingNodes && this.getAdjacentEdges(neighbor.id).length === 0) {\n                this.removeNodes(neighbor.id);\n            }\n        });\n    }\n\n    /** Get the edges adjacent to a node (O(n) method) */\n    public getAdjacentEdges(nodeId: string): Edge[] {\n        return this.getEdges().filter(e => e.from === nodeId || e.to === nodeId);\n    }\n\n    /** Get the nodes connected to a node via a single node (0(n) method) */\n    public getConnectedNodes(nodeId: string): Node[] {\n        return this.getAdjacentEdges(nodeId)\n                    .map(e => this.getNode(e.from === nodeId ? e.to : e.from) as Node);\n    }\n\n    /**\n     * Merge this dataset with another one. \n     * \n     * When duplicates nodes or edges are found:\n     * - The existing item is kept and updated\n     * - Their 'count' properties are added\n     * - Their 'visible' properties are ORed\n     * - Their nodeOptions and edgeOptions are updated\n     * \n     * @param dataset \n     */\n    public merge(dataset: NetworkDataset): NetworkDataset {\n\n        dataset.getNodes().forEach(node => {\n            node = Object.assign({}, node); // Avoid modifying the original datasets\n            if(!this.hasNode(node.id)) {\n                this.addNode(node);\n            }\n            else {\n                // Merge the new node with the existing one (which takes precedence by default)\n                let existingNode = this.getNode(node.id) as Node;\n                if((node.precedence || 0) > (existingNode.precedence || 0)) {\n                    // Set the new node in the node index\n                    this.nodeIdx.set(node.id, node);\n                    // swap existingNode and node for the merging of count, visible and node options\n                    const temp = node;\n                    node = existingNode;\n                    existingNode = temp;\n                }\n                existingNode.count += node.count;\n                existingNode.visible = existingNode.visible || node.visible;\n                let options: {[key: string]: any};\n                if(typeof existingNode.type.nodeOptions === \"function\") {\n                    options = existingNode.type.nodeOptions(existingNode, existingNode.type);\n                }\n                else {\n                    options = existingNode.type.nodeOptions;\n                }\n                Utils.extend(existingNode, options);\n            }\n        });\n\n        dataset.getEdges().forEach(edge => {\n            edge = Object.assign({}, edge); // Avoid modifying the original datasets\n            if(!this.hasEdge(edge.id)) {\n                this.addEdge(edge);\n            }\n            else {\n                // Merge the new edge with the existing one (which takes precedence)\n                // eg. statistical and semantic edges\n                const existingEdge = this.getEdge(edge.id) as Edge;\n                existingEdge.count += edge.count;\n                existingEdge.visible = existingEdge.visible || edge.visible;\n                // Merge edge labels (taking duplicates into account)\n                if(!!existingEdge[\"label\"] && !!edge[\"label\"]){\n                    edge[\"labels\"].forEach(label => {\n                        if(existingEdge[\"labels\"].indexOf(label) === -1) {\n                            existingEdge[\"label\"] += \", \"+label;\n                            existingEdge[\"labels\"].push(label);\n                        }\n                    });\n                }\n                let options: {[key: string]: any};\n                if(typeof existingEdge.type.edgeOptions === \"function\") {\n                    const nodes = [existingEdge.from, existingEdge.to].map(id => this.nodeIdx[id]);\n                    options = existingEdge.type.edgeOptions(nodes, existingEdge, existingEdge.type);\n                }\n                else {\n                    options = existingEdge.type.edgeOptions;\n                }\n                Utils.extend(existingEdge, options);\n            }\n        });\n\n        return this;\n    }\n\n    /** Transfer nodes and edges to the Vis nodes and edges DataSets */\n    updateDatasets(nodes: DataSet, edges: DataSet) {\n        nodes.remove(nodes.get().filter(n => !this.getNode(n.id)?.visible));\n        edges.remove(edges.get().filter(e => !this.getEdge(e.id)?.visible));\n        nodes.update(this.getVisibleNodes());\n        edges.update(this.getVisibleEdges());\n    }\n\n    \n    private addNode(node: Node) {\n        if(this.hasNode(node.id)) {\n            throw new Error(`Node '${node.id}' already in dataset`);\n        }\n        this.nodeIdx.set(node.id, node);\n    }\n    \n    private addEdge(edge: Edge) {\n        if(this.hasEdge(edge.id)) {\n            throw new Error(`Edge '${edge.id}' already in dataset`);\n        }\n        if(!this.hasNode(edge.from) || !this.hasNode(edge.to)) {\n            throw new Error(`Edge '${edge.id}' cannot be added as one of the nodes is missing from the dataset`)\n        }\n        this.edgeIdx.set(edge.id, edge);\n    }\n\n    private removeNode(id: string) {\n        this.nodeIdx.delete(id);\n    }\n\n    private removeEdge(id: string) {\n        this.edgeIdx.delete(id);\n    }\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/NgxChart.html":{"url":"components/NgxChart.html","title":"component - NgxChart","body":"\n                   \n\n\n\n\n\n  Components\n  NgxChart\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    ngx-charts/chart/chart.ts\n\n\n\n\n    \n        Implements\n    \n    \n                    OnInit\n                    OnDestroy\n                    OnChanges\n                    DoCheck\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                sq-ngx-chart\n            \n\n            \n                styleUrls\n                ./chart.scss\n            \n\n\n\n            \n                templateUrl\n                ./chart.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                attached\n                            \n                            \n                                chart\n                            \n                            \n                                localeChange\n                            \n                            \n                                select\n                            \n                            \n                                tooltipTemplate\n                            \n                            \n                                wrapper\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                chartComponent\n                            \n                            \n                                ngDoCheck\n                            \n                            \n                                ngOnChanges\n                            \n                            \n                                ngOnDestroy\n                            \n                            \n                                ngOnInit\n                            \n                            \n                                updateChart\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                data\n                            \n                            \n                                options\n                            \n                        \n                    \n                \n\n                \n                    \n                        Outputs\n                    \n                \n                \n                    \n                        \n                            \n                                item-click\n                            \n                        \n                    \n                \n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    chartType\n                                \n                                \n                                    colorScheme\n                                \n                            \n                        \n                    \n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(intlService: IntlService, uiService: UIService)\n                    \n                \n                        \n                            \n                                Defined in ngx-charts/chart/chart.ts:35\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        intlService\n                                                  \n                                                        \n                                                                    IntlService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        uiService\n                                                  \n                                                        \n                                                                    UIService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        data\n                    \n                \n                \n                    \n                        Type :         ChartDataPoint[]\n\n                    \n                \n                        \n                            \n                                    Defined in ngx-charts/chart/chart.ts:29\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        options\n                    \n                \n                \n                    \n                        Type :         ChartOptions\n\n                    \n                \n                        \n                            \n                                    Defined in ngx-charts/chart/chart.ts:28\n                            \n                        \n            \n        \n\n    \n    Outputs\n        \n            \n                \n                    \n                        \n                        item-click\n                    \n                \n                \n                    \n                        Type :         EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in ngx-charts/chart/chart.ts:30\n                            \n                        \n            \n        \n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            chartComponent\n                        \n                        \n                    \n                \n            \n            \n                \nchartComponent(type: string)\n                \n            \n\n\n            \n                \n                    Defined in ngx-charts/chart/chart.ts:66\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    type\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Type\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            ngDoCheck\n                        \n                        \n                    \n                \n            \n            \n                \nngDoCheck()\n                \n            \n\n\n            \n                \n                    Defined in ngx-charts/chart/chart.ts:83\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            ngOnChanges\n                        \n                        \n                    \n                \n            \n            \n                \nngOnChanges(changes: SimpleChanges)\n                \n            \n\n\n            \n                \n                    Defined in ngx-charts/chart/chart.ts:79\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    changes\n                                    \n                                                SimpleChanges\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            ngOnDestroy\n                        \n                        \n                    \n                \n            \n            \n                \nngOnDestroy()\n                \n            \n\n\n            \n                \n                    Defined in ngx-charts/chart/chart.ts:57\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            ngOnInit\n                        \n                        \n                    \n                \n            \n            \n                \nngOnInit()\n                \n            \n\n\n            \n                \n                    Defined in ngx-charts/chart/chart.ts:49\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            updateChart\n                        \n                        \n                    \n                \n            \n            \n                \nupdateChart()\n                \n            \n\n\n            \n                \n                    Defined in ngx-charts/chart/chart.ts:43\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n    \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            attached\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                        \n                            \n                                    Defined in ngx-charts/chart/chart.ts:35\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            chart\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     BaseChartComponent\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ViewChild('chart', {static: false})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in ngx-charts/chart/chart.ts:33\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            localeChange\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Subscription\n\n                        \n                    \n                        \n                            \n                                    Defined in ngx-charts/chart/chart.ts:34\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            select\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : () => {...}\n                        \n                    \n                        \n                            \n                                    Defined in ngx-charts/chart/chart.ts:92\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            tooltipTemplate\n                            \n                        \n                    \n                \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ViewChild('tooltipTemplate', {static: false})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in ngx-charts/chart/chart.ts:32\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            wrapper\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         ElementRef\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ViewChild('wrapper', {static: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in ngx-charts/chart/chart.ts:31\n                            \n                        \n\n\n            \n        \n\n\n    \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        chartType\n                    \n                \n\n                \n                    \n                        getchartType()\n                    \n                \n                            \n                                \n                                    Defined in ngx-charts/chart/chart.ts:62\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        colorScheme\n                    \n                \n\n                \n                    \n                        getcolorScheme()\n                    \n                \n                            \n                                \n                                    Defined in ngx-charts/chart/chart.ts:75\n                                \n                            \n\n            \n        \n\n\n\n\n    \n        import {Component, Input, Output, EventEmitter, OnInit, OnDestroy, OnChanges, DoCheck, SimpleChanges, ViewChild, ElementRef, Type} from \"@angular/core\";\nimport {Subscription} from \"rxjs\";\nimport {Utils} from \"@sinequa/core/base\";\nimport {IntlService} from \"@sinequa/core/intl\";\nimport {BaseChartComponent, BarVerticalComponent, BarHorizontalComponent} from \"@swimlane/ngx-charts\";\nimport {UIService} from \"@sinequa/components/utils\";\n\n\nexport interface ChartOptions {\n    type: string;\n    colorScheme?: string;\n    getItemColor?: (value: string) => string;\n    tickFormatter?: (value: any) => string;\n}\n\nexport interface ChartDataPoint {\n    name: string;\n    value: number;\n}\n\n@Component({\n    selector: \"sq-ngx-chart\",\n    templateUrl: \"./chart.html\",\n    styleUrls: [\"./chart.scss\"]\n})\nexport class NgxChart implements OnInit, OnDestroy, OnChanges, DoCheck {\n    @Input() options: ChartOptions;\n    @Input() data: ChartDataPoint[];\n    @Output(\"item-click\") itemClickEvent: EventEmitter;\n    @ViewChild(\"wrapper\", {static: true}) wrapper: ElementRef;\n    @ViewChild(\"tooltipTemplate\", {static: false}) tooltipTemplate;\n    @ViewChild(\"chart\", {static: false}) chart: BaseChartComponent;\n    localeChange: Subscription;\n    attached: boolean;\n\n    constructor(\n        protected intlService: IntlService,\n        private uiService: UIService) {\n        this.itemClickEvent = new EventEmitter();\n    }\n\n    updateChart() {\n        if (!!this.chart) this.chart.update();\n    }\n\n    private onResize = () => this.updateChart();\n\n    ngOnInit() {\n        this.uiService.addElementResizeListener(this.wrapper.nativeElement, this.onResize);\n        this.localeChange = Utils.subscribe(this.intlService.events,\n            (value) => {\n                this.updateChart();\n            });\n    }\n\n    ngOnDestroy() {\n        this.uiService.removeElementResizeListener(this.wrapper.nativeElement, this.onResize);\n        this.localeChange.unsubscribe();\n    }\n\n    get chartType(): string {\n        return Utils.toLowerCase(this.options.type);\n    }\n\n    chartComponent(type:string) : Type {\n        switch(type){\n            case \"horizontalbar\": return BarHorizontalComponent;\n            case \"verticaltalbar\": return BarVerticalComponent;\n            default: return BarVerticalComponent;\n        }\n    }\n\n    // so we don't end up with no color scheme if the color scheme is not set\n    get colorScheme(): string {\n        return this.options.colorScheme || \"cool\";\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n    }\n\n    // This is a clunky way of avoiding (briefly) seeing ngx-charts rendering with the default 600x400 dimensions\n    ngDoCheck() {\n        if (!this.attached && !!this.wrapper) {\n            if (document.body.contains(this.wrapper.nativeElement)) {\n                this.updateChart();\n                this.attached = true;\n            }\n        }\n    }\n\n    select = (dataPoint: ChartDataPoint): void => {\n        this.itemClickEvent.emit(dataPoint);\n    }\n}\n    \n\n    \n        \n    \n        \n            \n                \n            \n        \n        \n            \n                \n            \n        \n        \n            \n                \n            \n        \n        \n            \n                \n            \n        \n        \n            \n                \n            \n        \n        \n            \n                \n            \n        \n        \n            \n                \n            \n        \n        \n            \n                \n            \n        \n    \n    \n        {{model.name}}\n        {{model.value | sqValue}}\n    \n\n    \n\n    \n                \n                    ./chart.scss\n                \n                .sq-chart-wrapper {\n    visibility: hidden;\n    width: 100%;\n    height: 16rem;\n    overflow: hidden;\n    &.sq-attached {\n        visibility: visible;\n    }\n}\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    {{model.name}}        {{model.value | sqValue}}    '\n    var COMPONENTS = [{'name': 'BsEdgeInfoCard', 'selector': 'sq-edge-info-card'},{'name': 'BsFacetHeatmapComponent', 'selector': 'sq-facet-heatmap'},{'name': 'BsFacetTimelineComponent', 'selector': 'sq-facet-timeline'},{'name': 'BsHeatmapComponent', 'selector': 'sq-heatmap'},{'name': 'BsNodeInfoCard', 'selector': 'sq-node-info-card'},{'name': 'BsResultsHeatmapView', 'selector': 'sq-results-heatmap-view'},{'name': 'BsTimelineComponent', 'selector': 'sq-timeline'},{'name': 'BsTooltipComponent', 'selector': 'sq-tooltip'},{'name': 'FacetNgxChart', 'selector': 'sq-facet-ngx-chart'},{'name': 'FusionChart', 'selector': 'sq-fusion-chart'},{'name': 'MapComponent', 'selector': 'sq-googlemaps'},{'name': 'MoneyCloudComponent', 'selector': 'sq-money-cloud'},{'name': 'MoneyTimelineComponent', 'selector': 'sq-money-timeline'},{'name': 'NetworkComponent', 'selector': 'sq-network'},{'name': 'NgxChart', 'selector': 'sq-ngx-chart'},{'name': 'ResultTimeline', 'selector': 'sq-result-timeline'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'NgxChart'};\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/NgxChartsModule.html":{"url":"modules/NgxChartsModule.html","title":"module - NgxChartsModule","body":"\n                   \n\n\n\n\n    Modules\n    NgxChartsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_NgxChartsModule\n\n\n\ncluster_NgxChartsModule_declarations\n\n\n\ncluster_NgxChartsModule_exports\n\n\n\n\nFacetNgxChart\n\nFacetNgxChart\n\n\n\nNgxChartsModule\n\nNgxChartsModule\n\nNgxChartsModule -->\n\nFacetNgxChart->NgxChartsModule\n\n\n\n\n\nNgxChart\n\nNgxChart\n\nNgxChartsModule -->\n\nNgxChart->NgxChartsModule\n\n\n\n\n\nFacetNgxChart \n\nFacetNgxChart \n\nFacetNgxChart  -->\n\nNgxChartsModule->FacetNgxChart \n\n\n\n\n\nNgxChart \n\nNgxChart \n\nNgxChart  -->\n\nNgxChartsModule->NgxChart \n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            ngx-charts/ngx-charts.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Declarations\n                    \n                        \n                            FacetNgxChart\n                        \n                        \n                            NgxChart\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            FacetNgxChart\n                        \n                        \n                            NgxChart\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { NgModule } from \"@angular/core\";\nimport { CommonModule } from \"@angular/common\";\nimport {\n    AreaChartModule,\n    BarChartModule,\n    PieChartModule,\n    TreeMapModule,\n    NumberCardModule,\n    GaugeModule } from \"@swimlane/ngx-charts\";\n\nimport { IntlModule } from '@sinequa/core/intl';\nimport { UtilsModule } from \"@sinequa/components/utils\";\nimport { BsSelectionModule } from \"@sinequa/components/selection\";\n\nimport { NgxChart } from \"./chart/chart\";\nimport { FacetNgxChart } from \"./facet-chart/facet-chart\";\n\n@NgModule({\n\n    imports: [\n        CommonModule,\n        IntlModule,\n        UtilsModule,\n        BsSelectionModule,\n        \n        // ngx-charts modules\n        AreaChartModule,\n        BarChartModule,\n        PieChartModule,\n        TreeMapModule,\n        NumberCardModule,\n        GaugeModule\n    ],\n    declarations: [\n        NgxChart, FacetNgxChart\n    ],\n    exports: [\n        NgxChart, FacetNgxChart\n    ],\n})\nexport class NgxChartsModule {}\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Node.html":{"url":"interfaces/Node.html","title":"interface - Node","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  Node\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            network/network-models.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        context\n                                \n                                \n                                        count\n                                \n                                \n                                        id\n                                \n                                \n                                        label\n                                \n                                \n                                            Optional\n                                        precedence\n                                \n                                \n                                        provider\n                                \n                                \n                                        type\n                                \n                                \n                                        visible\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        context\n                                    \n                                \n                                \n                                    \n                                        context:         NetworkContext\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         NetworkContext\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        count\n                                    \n                                \n                                \n                                    \n                                        count:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    count is a mutable property used to scale the node size in function of the size of adjacent edges\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                    \n                                \n                                \n                                    \n                                        id:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        label\n                                    \n                                \n                                \n                                    \n                                        label:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        precedence\n                                    \n                                \n                                \n                                    \n                                        precedence:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    the precedence of a node determines which node object is kept when merging two dataset (the highest precedence node is kept) \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        provider\n                                    \n                                \n                                \n                                    \n                                        provider:         NetworkProvider\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         NetworkProvider\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        type\n                                    \n                                \n                                \n                                    \n                                        type:         NodeType\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         NodeType\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        visible\n                                    \n                                \n                                \n                                    \n                                        visible:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Subject } from 'rxjs';\nimport { Action } from '@sinequa/components/action';\nimport { Utils } from '@sinequa/core/base';\nimport { DataSet } from \"vis-data/peer/esm/vis-data\";\nimport { SearchService } from '@sinequa/components/search';\nimport { VisNetworkService } from 'ngx-vis';\nimport { AppService, ExprBuilder } from '@sinequa/core/app-utils';\nimport { IntlService } from '@sinequa/core/intl';\n\n// TYPES (configuration)\n\nexport interface NodeType {\n    name: string;\n    /** Vis Node options (merged in the Node objects). See https://visjs.github.io/vis-network/docs/network/nodes.html */\n    nodeOptions: {[key: string]: any} | ((node: Node, type: NodeType) => {[key: string]: any} );\n    /** If a field is provided, it can be used to filter the node value (and access the label, formatter, etc.) */\n    field?: string;\n}\n\nexport interface EdgeType {\n    /** Node types attached to this edge type. Should typically be 2 items, but cooccurrence aggregation might return more */\n    nodeTypes: NodeType[];\n    /** Vis Edge options (merged in the Edge objects). See https://visjs.github.io/vis-network/docs/network/edges.html */\n    edgeOptions: {[key: string]: any} | ((nodes: Node[], edge: Edge, type: EdgeType) => {[key: string]: any} );\n    /** If a field is provided, it can be used to filter the node value (and access the label, formatter, etc.) */\n    field?: string;\n}\n\n\n// DATA\n\n// Nodes (based on Vis Node interface)\n\nexport interface Node {\n    id: string;\n    label: string;\n\n    // Custom properties\n    type: NodeType;\n    provider: NetworkProvider;\n    visible: boolean;\n    /** count is a mutable property used to scale the node size in function of the size of adjacent edges*/\n    count: number;\n    /** the precedence of a node determines which node object is kept when merging two dataset (the highest precedence node is kept) */\n    precedence?: number;\n    // Context\n    context: NetworkContext;\n}\n\n// Edge (based on Vis Edge interface)\n\nexport interface Edge {\n    id: string;\n    from: string;\n    to: string;\n\n    // Custom properties\n    type: EdgeType;\n    provider: NetworkProvider;\n    visible: boolean;    \n    /** count is a property representing the strength of an edge, which scales the count of adjacent nodes*/\n    count: number;\n    /** A field value may be provided to filter search based on the edge field type */\n    fieldValue?: string;\n    // Context\n    context: NetworkContext;\n}\n\n\nexport interface NetworkProvider {\n    /** Whether or not the provider is active (if inactive, it will not provide empty datasets of nodes and edges) */\n    active: boolean;\n\n    /** Readable name of this provider */\n    name: string;\n\n    /** Dataset of this provider */\n    dataset: NetworkDataset;\n\n    /** Context (wrapper for general data about the network and services) */\n    context: NetworkContext;\n\n    /** Returns the Subject of this provider */\n    getProvider(): Subject;\n\n    /** Asynchronously provide data via it's provider Subject */\n    getData(context: NetworkContext); // skip/count handled internally\n\n    /** Called after the datasets provided by all providers have been merged into a single dataset */\n    onDatasetsMerged(dataset: NetworkDataset);\n\n    /** Called after the dataset is filtered and passed to Vis for rendering */\n    onNodesInserted(nodes: Node[]);\n\n    /** Called when ANY node is clicked in the rendered view of the network */\n    onNodeClicked(node: Node | undefined);\n\n    /** Called when ANY edge is clicked in the rendered view of the network */\n    onEdgeClicked(edge: Edge | undefined);\n\n    /** Retrieve the list of action for this provider. */\n    getProviderActions(): Action[];\n\n    /** Retrieve the list of action for a given node, and this provider. */\n    getNodeActions(node: Node): Action[];\n    \n    /** Retrieve the list of action for a given edge, and this provider. */\n    getEdgeActions(edge: Edge): Action[];\n\n    /** Called when the providers are discarded. Can be use to cancel subscriptions */\n    onDestroy();\n}\n\nexport interface NetworkContext {\n    /** Name of this network, for use in selections */\n    name: string;\n    /** Vis.js data structures */\n    nodes: DataSet;\n    edges: DataSet;\n    /** Useful services */\n    searchService: SearchService;\n    networkService: VisNetworkService;\n    appService: AppService;\n    intlService: IntlService;\n    exprBuilder: ExprBuilder;\n    /** Interactions */\n    select(node?: Node, edge?: Edge): void;\n}\n\n\nexport class NetworkDataset {\n\n    // Node index\n    private readonly nodeIdx: Map = new Map();\n\n    // Edge index\n    private readonly edgeIdx: Map = new Map();\n\n\n    /** Returns whether this node exists */\n    public hasNode(id: string): boolean {\n        return this.nodeIdx.has(id);\n    }\n    \n    /** Returns whether this edge exists */\n    public hasEdge(id: string): boolean {\n        return this.edgeIdx.has(id);\n    }\n\n    /** Returns the node with given id */\n    public getNode(id: string): Node | undefined {\n        return this.nodeIdx.get(id);\n    }\n\n    /** Returns the edge with given id */\n    public getEdge(id: string): Edge | undefined {\n        return this.edgeIdx.get(id);\n    }\n\n    /** Get the list of nodes */\n    public getNodes(): Node[] {\n        return Array.from(this.nodeIdx.values());\n    }\n\n    /** Get the list of edges */\n    public getEdges(): Edge[] {\n        return Array.from(this.edgeIdx.values());\n    }    \n\n    /** Get the list of visible nodes */\n    public getVisibleNodes(): Node[] {\n        return this.getNodes().filter(n => n.visible);\n    }\n\n    /** Get the list of visible edges */\n    public getVisibleEdges(): Edge[] {\n        return this.getEdges().filter(e => e.visible);\n    }\n\n    /** Get the list of node ids */\n    public getNodeIds(): string[] {\n        return Array.from(this.nodeIdx.keys());\n    }\n\n    /** Get the list of edge ids */\n    public getEdgeIds(): string[] {\n        return Array.from(this.edgeIdx.keys());\n    }\n    \n    /** Clears this dataset */\n    public clear() {\n        this.nodeIdx.clear();\n        this.edgeIdx.clear();\n    }\n\n    /** Add one or multiple nodes */\n    public addNodes(nodes: Node | Node[]) {\n        Array.isArray(nodes)? nodes.forEach(node => this.addNode(node)) : this.addNode(nodes);\n    }\n\n    /** Add one or multiple edges. */\n    public addEdges(edges: Edge | Edge[]) {\n        Array.isArray(edges)? edges.forEach(edge => this.addEdge(edge)) : this.addEdge(edges);\n    }\n\n    /** Remove one or multiple nodes. /!\\ Connected edges MUST be removed as well (use cleanRemoveNode() to do so) */\n    private removeNodes(ids: string | string[]) {\n        Array.isArray(ids)? ids.forEach(id => this.removeNode(id)) : this.removeNode(ids);\n    }\n\n    /** Remove one or multiple edges. */\n    public removeEdges(ids: string | string[]) {\n        Array.isArray(ids)? ids.forEach(id => this.removeEdge(id)) : this.removeEdge(ids);\n    }\n\n    /** Remove a node and its adjacent edges. keepDanglingNodes = false (default) removes the remaining nodes with no neighbor */\n    public cleanRemoveNode(nodeId: string, keepDanglingNodes?: boolean) {\n        this.getAdjacentEdges(nodeId).forEach(edge => {\n            const neighbor = this.getNode(edge.from === nodeId ? edge.to : edge.from) as Node;\n            this.removeEdges(edge.id);\n            neighbor.count -= edge.count;\n            if(!keepDanglingNodes && this.getAdjacentEdges(neighbor.id).length === 0) {\n                this.removeNodes(neighbor.id);\n            }\n        });\n    }\n\n    /** Get the edges adjacent to a node (O(n) method) */\n    public getAdjacentEdges(nodeId: string): Edge[] {\n        return this.getEdges().filter(e => e.from === nodeId || e.to === nodeId);\n    }\n\n    /** Get the nodes connected to a node via a single node (0(n) method) */\n    public getConnectedNodes(nodeId: string): Node[] {\n        return this.getAdjacentEdges(nodeId)\n                    .map(e => this.getNode(e.from === nodeId ? e.to : e.from) as Node);\n    }\n\n    /**\n     * Merge this dataset with another one. \n     * \n     * When duplicates nodes or edges are found:\n     * - The existing item is kept and updated\n     * - Their 'count' properties are added\n     * - Their 'visible' properties are ORed\n     * - Their nodeOptions and edgeOptions are updated\n     * \n     * @param dataset \n     */\n    public merge(dataset: NetworkDataset): NetworkDataset {\n\n        dataset.getNodes().forEach(node => {\n            node = Object.assign({}, node); // Avoid modifying the original datasets\n            if(!this.hasNode(node.id)) {\n                this.addNode(node);\n            }\n            else {\n                // Merge the new node with the existing one (which takes precedence by default)\n                let existingNode = this.getNode(node.id) as Node;\n                if((node.precedence || 0) > (existingNode.precedence || 0)) {\n                    // Set the new node in the node index\n                    this.nodeIdx.set(node.id, node);\n                    // swap existingNode and node for the merging of count, visible and node options\n                    const temp = node;\n                    node = existingNode;\n                    existingNode = temp;\n                }\n                existingNode.count += node.count;\n                existingNode.visible = existingNode.visible || node.visible;\n                let options: {[key: string]: any};\n                if(typeof existingNode.type.nodeOptions === \"function\") {\n                    options = existingNode.type.nodeOptions(existingNode, existingNode.type);\n                }\n                else {\n                    options = existingNode.type.nodeOptions;\n                }\n                Utils.extend(existingNode, options);\n            }\n        });\n\n        dataset.getEdges().forEach(edge => {\n            edge = Object.assign({}, edge); // Avoid modifying the original datasets\n            if(!this.hasEdge(edge.id)) {\n                this.addEdge(edge);\n            }\n            else {\n                // Merge the new edge with the existing one (which takes precedence)\n                // eg. statistical and semantic edges\n                const existingEdge = this.getEdge(edge.id) as Edge;\n                existingEdge.count += edge.count;\n                existingEdge.visible = existingEdge.visible || edge.visible;\n                // Merge edge labels (taking duplicates into account)\n                if(!!existingEdge[\"label\"] && !!edge[\"label\"]){\n                    edge[\"labels\"].forEach(label => {\n                        if(existingEdge[\"labels\"].indexOf(label) === -1) {\n                            existingEdge[\"label\"] += \", \"+label;\n                            existingEdge[\"labels\"].push(label);\n                        }\n                    });\n                }\n                let options: {[key: string]: any};\n                if(typeof existingEdge.type.edgeOptions === \"function\") {\n                    const nodes = [existingEdge.from, existingEdge.to].map(id => this.nodeIdx[id]);\n                    options = existingEdge.type.edgeOptions(nodes, existingEdge, existingEdge.type);\n                }\n                else {\n                    options = existingEdge.type.edgeOptions;\n                }\n                Utils.extend(existingEdge, options);\n            }\n        });\n\n        return this;\n    }\n\n    /** Transfer nodes and edges to the Vis nodes and edges DataSets */\n    updateDatasets(nodes: DataSet, edges: DataSet) {\n        nodes.remove(nodes.get().filter(n => !this.getNode(n.id)?.visible));\n        edges.remove(edges.get().filter(e => !this.getEdge(e.id)?.visible));\n        nodes.update(this.getVisibleNodes());\n        edges.update(this.getVisibleEdges());\n    }\n\n    \n    private addNode(node: Node) {\n        if(this.hasNode(node.id)) {\n            throw new Error(`Node '${node.id}' already in dataset`);\n        }\n        this.nodeIdx.set(node.id, node);\n    }\n    \n    private addEdge(edge: Edge) {\n        if(this.hasEdge(edge.id)) {\n            throw new Error(`Edge '${edge.id}' already in dataset`);\n        }\n        if(!this.hasNode(edge.from) || !this.hasNode(edge.to)) {\n            throw new Error(`Edge '${edge.id}' cannot be added as one of the nodes is missing from the dataset`)\n        }\n        this.edgeIdx.set(edge.id, edge);\n    }\n\n    private removeNode(id: string) {\n        this.nodeIdx.delete(id);\n    }\n\n    private removeEdge(id: string) {\n        this.edgeIdx.delete(id);\n    }\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/NodeData.html":{"url":"interfaces/NodeData.html","title":"interface - NodeData","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  NodeData\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            network/node-info-card.component.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        count\n                                \n                                \n                                        node\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        count\n                                    \n                                \n                                \n                                    \n                                        count:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        node\n                                    \n                                \n                                \n                                    \n                                        node:         Node\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Node\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Component, Input, OnChanges } from \"@angular/core\";\nimport { Node } from './network-models';\n\n\nexport interface NodeData {\n    node: Node;\n    count?: number; // The count displayed may be different from the node count (for edges)\n}\n\n@Component({\n    selector: \"sq-node-info-card\",\n    templateUrl: \"node-info-card.component.html\",\n    styles: [`\n.card {\n    top: 5px;\n    left: 0;\n    right: 0;\n    width: 80%;\n}\n.circular-image {\n    width: 1.5em;\n    height: 1.5em;\n    border-radius: 50%;\n    object-fit: cover;\n}\n    `]\n})\nexport class BsNodeInfoCard implements OnChanges {\n    @Input() node: Node;\n\n    closed: boolean;\n    expanded: boolean;\n\n    nodeData: NodeData;\n\n    neighbors: {[type: string]: NodeData[]};\n\n    ngOnChanges() {\n        this.closed = false;\n        this.expanded = false;\n        this.nodeData = { node: this.node, count: this.node.count };\n\n        this.neighbors = {};\n        this.node.context.edges\n            .stream()\n            .filter(e => e.from === this.node.id || e.to === this.node.id) // Filter edges\n            .map(e => {\n                const id = e.from === this.node.id ? e.to : e.from\n                const node = this.node.context.nodes.get(id);\n                return {node, count: e.count};\n            }) // get node and edge count\n            .forEach(item => {\n                if(item.node) {\n                    const type = item.node.type.field ?\n                        item.node.context.appService.getPluralLabel(item.node.type.field) : // Try to get the \"pretty label\"\n                        item.node.type.name; // Or just use the node type's name\n                    if(!this.neighbors[type]) {\n                        this.neighbors[type] = []; // Initialize the neighbor array\n                    }\n                    // Create the node data\n                    this.neighbors[type].push({ node: item.node, count: item.count } as NodeData);\n                }\n                return true;\n            });\n        // Sort the neighbors by decreasing count number\n        Object.values(this.neighbors)\n            .forEach(list => list.sort((a,b) => (b.count || 0) - (a.count || 0)));\n    }\n\n    focusNode(node: Node) {\n        // Hack to gain access to the network instance (networkService does not have the focus() method)\n        const networkInstance = node.context.networkService['networks'][node.context.name];\n        networkInstance.focus(node.id, {animation: true}); // Move the view to this node with animation\n        networkInstance.selectNodes([node.id], true); // Warning: does not trigger events...\n        node.context.select(node, undefined); // Select the node to update info cards, actions\n        return false;\n    }\n}\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/NodeType.html":{"url":"interfaces/NodeType.html","title":"interface - NodeType","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  NodeType\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            network/network-models.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        field\n                                \n                                \n                                        name\n                                \n                                \n                                        nodeOptions\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        field\n                                    \n                                \n                                \n                                    \n                                        field:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    If a field is provided, it can be used to filter the node value (and access the label, formatter, etc.) \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        name\n                                    \n                                \n                                \n                                    \n                                        name:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        nodeOptions\n                                    \n                                \n                                \n                                    \n                                        nodeOptions:     literal type | \n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type | \n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Vis Node options (merged in the Node objects). See https://visjs.github.io/vis-network/docs/network/nodes.html \n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { Subject } from 'rxjs';\nimport { Action } from '@sinequa/components/action';\nimport { Utils } from '@sinequa/core/base';\nimport { DataSet } from \"vis-data/peer/esm/vis-data\";\nimport { SearchService } from '@sinequa/components/search';\nimport { VisNetworkService } from 'ngx-vis';\nimport { AppService, ExprBuilder } from '@sinequa/core/app-utils';\nimport { IntlService } from '@sinequa/core/intl';\n\n// TYPES (configuration)\n\nexport interface NodeType {\n    name: string;\n    /** Vis Node options (merged in the Node objects). See https://visjs.github.io/vis-network/docs/network/nodes.html */\n    nodeOptions: {[key: string]: any} | ((node: Node, type: NodeType) => {[key: string]: any} );\n    /** If a field is provided, it can be used to filter the node value (and access the label, formatter, etc.) */\n    field?: string;\n}\n\nexport interface EdgeType {\n    /** Node types attached to this edge type. Should typically be 2 items, but cooccurrence aggregation might return more */\n    nodeTypes: NodeType[];\n    /** Vis Edge options (merged in the Edge objects). See https://visjs.github.io/vis-network/docs/network/edges.html */\n    edgeOptions: {[key: string]: any} | ((nodes: Node[], edge: Edge, type: EdgeType) => {[key: string]: any} );\n    /** If a field is provided, it can be used to filter the node value (and access the label, formatter, etc.) */\n    field?: string;\n}\n\n\n// DATA\n\n// Nodes (based on Vis Node interface)\n\nexport interface Node {\n    id: string;\n    label: string;\n\n    // Custom properties\n    type: NodeType;\n    provider: NetworkProvider;\n    visible: boolean;\n    /** count is a mutable property used to scale the node size in function of the size of adjacent edges*/\n    count: number;\n    /** the precedence of a node determines which node object is kept when merging two dataset (the highest precedence node is kept) */\n    precedence?: number;\n    // Context\n    context: NetworkContext;\n}\n\n// Edge (based on Vis Edge interface)\n\nexport interface Edge {\n    id: string;\n    from: string;\n    to: string;\n\n    // Custom properties\n    type: EdgeType;\n    provider: NetworkProvider;\n    visible: boolean;    \n    /** count is a property representing the strength of an edge, which scales the count of adjacent nodes*/\n    count: number;\n    /** A field value may be provided to filter search based on the edge field type */\n    fieldValue?: string;\n    // Context\n    context: NetworkContext;\n}\n\n\nexport interface NetworkProvider {\n    /** Whether or not the provider is active (if inactive, it will not provide empty datasets of nodes and edges) */\n    active: boolean;\n\n    /** Readable name of this provider */\n    name: string;\n\n    /** Dataset of this provider */\n    dataset: NetworkDataset;\n\n    /** Context (wrapper for general data about the network and services) */\n    context: NetworkContext;\n\n    /** Returns the Subject of this provider */\n    getProvider(): Subject;\n\n    /** Asynchronously provide data via it's provider Subject */\n    getData(context: NetworkContext); // skip/count handled internally\n\n    /** Called after the datasets provided by all providers have been merged into a single dataset */\n    onDatasetsMerged(dataset: NetworkDataset);\n\n    /** Called after the dataset is filtered and passed to Vis for rendering */\n    onNodesInserted(nodes: Node[]);\n\n    /** Called when ANY node is clicked in the rendered view of the network */\n    onNodeClicked(node: Node | undefined);\n\n    /** Called when ANY edge is clicked in the rendered view of the network */\n    onEdgeClicked(edge: Edge | undefined);\n\n    /** Retrieve the list of action for this provider. */\n    getProviderActions(): Action[];\n\n    /** Retrieve the list of action for a given node, and this provider. */\n    getNodeActions(node: Node): Action[];\n    \n    /** Retrieve the list of action for a given edge, and this provider. */\n    getEdgeActions(edge: Edge): Action[];\n\n    /** Called when the providers are discarded. Can be use to cancel subscriptions */\n    onDestroy();\n}\n\nexport interface NetworkContext {\n    /** Name of this network, for use in selections */\n    name: string;\n    /** Vis.js data structures */\n    nodes: DataSet;\n    edges: DataSet;\n    /** Useful services */\n    searchService: SearchService;\n    networkService: VisNetworkService;\n    appService: AppService;\n    intlService: IntlService;\n    exprBuilder: ExprBuilder;\n    /** Interactions */\n    select(node?: Node, edge?: Edge): void;\n}\n\n\nexport class NetworkDataset {\n\n    // Node index\n    private readonly nodeIdx: Map = new Map();\n\n    // Edge index\n    private readonly edgeIdx: Map = new Map();\n\n\n    /** Returns whether this node exists */\n    public hasNode(id: string): boolean {\n        return this.nodeIdx.has(id);\n    }\n    \n    /** Returns whether this edge exists */\n    public hasEdge(id: string): boolean {\n        return this.edgeIdx.has(id);\n    }\n\n    /** Returns the node with given id */\n    public getNode(id: string): Node | undefined {\n        return this.nodeIdx.get(id);\n    }\n\n    /** Returns the edge with given id */\n    public getEdge(id: string): Edge | undefined {\n        return this.edgeIdx.get(id);\n    }\n\n    /** Get the list of nodes */\n    public getNodes(): Node[] {\n        return Array.from(this.nodeIdx.values());\n    }\n\n    /** Get the list of edges */\n    public getEdges(): Edge[] {\n        return Array.from(this.edgeIdx.values());\n    }    \n\n    /** Get the list of visible nodes */\n    public getVisibleNodes(): Node[] {\n        return this.getNodes().filter(n => n.visible);\n    }\n\n    /** Get the list of visible edges */\n    public getVisibleEdges(): Edge[] {\n        return this.getEdges().filter(e => e.visible);\n    }\n\n    /** Get the list of node ids */\n    public getNodeIds(): string[] {\n        return Array.from(this.nodeIdx.keys());\n    }\n\n    /** Get the list of edge ids */\n    public getEdgeIds(): string[] {\n        return Array.from(this.edgeIdx.keys());\n    }\n    \n    /** Clears this dataset */\n    public clear() {\n        this.nodeIdx.clear();\n        this.edgeIdx.clear();\n    }\n\n    /** Add one or multiple nodes */\n    public addNodes(nodes: Node | Node[]) {\n        Array.isArray(nodes)? nodes.forEach(node => this.addNode(node)) : this.addNode(nodes);\n    }\n\n    /** Add one or multiple edges. */\n    public addEdges(edges: Edge | Edge[]) {\n        Array.isArray(edges)? edges.forEach(edge => this.addEdge(edge)) : this.addEdge(edges);\n    }\n\n    /** Remove one or multiple nodes. /!\\ Connected edges MUST be removed as well (use cleanRemoveNode() to do so) */\n    private removeNodes(ids: string | string[]) {\n        Array.isArray(ids)? ids.forEach(id => this.removeNode(id)) : this.removeNode(ids);\n    }\n\n    /** Remove one or multiple edges. */\n    public removeEdges(ids: string | string[]) {\n        Array.isArray(ids)? ids.forEach(id => this.removeEdge(id)) : this.removeEdge(ids);\n    }\n\n    /** Remove a node and its adjacent edges. keepDanglingNodes = false (default) removes the remaining nodes with no neighbor */\n    public cleanRemoveNode(nodeId: string, keepDanglingNodes?: boolean) {\n        this.getAdjacentEdges(nodeId).forEach(edge => {\n            const neighbor = this.getNode(edge.from === nodeId ? edge.to : edge.from) as Node;\n            this.removeEdges(edge.id);\n            neighbor.count -= edge.count;\n            if(!keepDanglingNodes && this.getAdjacentEdges(neighbor.id).length === 0) {\n                this.removeNodes(neighbor.id);\n            }\n        });\n    }\n\n    /** Get the edges adjacent to a node (O(n) method) */\n    public getAdjacentEdges(nodeId: string): Edge[] {\n        return this.getEdges().filter(e => e.from === nodeId || e.to === nodeId);\n    }\n\n    /** Get the nodes connected to a node via a single node (0(n) method) */\n    public getConnectedNodes(nodeId: string): Node[] {\n        return this.getAdjacentEdges(nodeId)\n                    .map(e => this.getNode(e.from === nodeId ? e.to : e.from) as Node);\n    }\n\n    /**\n     * Merge this dataset with another one. \n     * \n     * When duplicates nodes or edges are found:\n     * - The existing item is kept and updated\n     * - Their 'count' properties are added\n     * - Their 'visible' properties are ORed\n     * - Their nodeOptions and edgeOptions are updated\n     * \n     * @param dataset \n     */\n    public merge(dataset: NetworkDataset): NetworkDataset {\n\n        dataset.getNodes().forEach(node => {\n            node = Object.assign({}, node); // Avoid modifying the original datasets\n            if(!this.hasNode(node.id)) {\n                this.addNode(node);\n            }\n            else {\n                // Merge the new node with the existing one (which takes precedence by default)\n                let existingNode = this.getNode(node.id) as Node;\n                if((node.precedence || 0) > (existingNode.precedence || 0)) {\n                    // Set the new node in the node index\n                    this.nodeIdx.set(node.id, node);\n                    // swap existingNode and node for the merging of count, visible and node options\n                    const temp = node;\n                    node = existingNode;\n                    existingNode = temp;\n                }\n                existingNode.count += node.count;\n                existingNode.visible = existingNode.visible || node.visible;\n                let options: {[key: string]: any};\n                if(typeof existingNode.type.nodeOptions === \"function\") {\n                    options = existingNode.type.nodeOptions(existingNode, existingNode.type);\n                }\n                else {\n                    options = existingNode.type.nodeOptions;\n                }\n                Utils.extend(existingNode, options);\n            }\n        });\n\n        dataset.getEdges().forEach(edge => {\n            edge = Object.assign({}, edge); // Avoid modifying the original datasets\n            if(!this.hasEdge(edge.id)) {\n                this.addEdge(edge);\n            }\n            else {\n                // Merge the new edge with the existing one (which takes precedence)\n                // eg. statistical and semantic edges\n                const existingEdge = this.getEdge(edge.id) as Edge;\n                existingEdge.count += edge.count;\n                existingEdge.visible = existingEdge.visible || edge.visible;\n                // Merge edge labels (taking duplicates into account)\n                if(!!existingEdge[\"label\"] && !!edge[\"label\"]){\n                    edge[\"labels\"].forEach(label => {\n                        if(existingEdge[\"labels\"].indexOf(label) === -1) {\n                            existingEdge[\"label\"] += \", \"+label;\n                            existingEdge[\"labels\"].push(label);\n                        }\n                    });\n                }\n                let options: {[key: string]: any};\n                if(typeof existingEdge.type.edgeOptions === \"function\") {\n                    const nodes = [existingEdge.from, existingEdge.to].map(id => this.nodeIdx[id]);\n                    options = existingEdge.type.edgeOptions(nodes, existingEdge, existingEdge.type);\n                }\n                else {\n                    options = existingEdge.type.edgeOptions;\n                }\n                Utils.extend(existingEdge, options);\n            }\n        });\n\n        return this;\n    }\n\n    /** Transfer nodes and edges to the Vis nodes and edges DataSets */\n    updateDatasets(nodes: DataSet, edges: DataSet) {\n        nodes.remove(nodes.get().filter(n => !this.getNode(n.id)?.visible));\n        edges.remove(edges.get().filter(e => !this.getEdge(e.id)?.visible));\n        nodes.update(this.getVisibleNodes());\n        edges.update(this.getVisibleEdges());\n    }\n\n    \n    private addNode(node: Node) {\n        if(this.hasNode(node.id)) {\n            throw new Error(`Node '${node.id}' already in dataset`);\n        }\n        this.nodeIdx.set(node.id, node);\n    }\n    \n    private addEdge(edge: Edge) {\n        if(this.hasEdge(edge.id)) {\n            throw new Error(`Edge '${edge.id}' already in dataset`);\n        }\n        if(!this.hasNode(edge.from) || !this.hasNode(edge.to)) {\n            throw new Error(`Edge '${edge.id}' cannot be added as one of the nodes is missing from the dataset`)\n        }\n        this.edgeIdx.set(edge.id, edge);\n    }\n\n    private removeNode(id: string) {\n        this.nodeIdx.delete(id);\n    }\n\n    private removeEdge(id: string) {\n        this.edgeIdx.delete(id);\n    }\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/RecordNode.html":{"url":"interfaces/RecordNode.html","title":"interface - RecordNode","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  RecordNode\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            network/providers/records-provider.ts\n        \n\n            \n                Description\n            \n            \n                Extension of the Node interface, to include the Record object\nfrom which the node is generated\n\n            \n\n            \n                Extends\n            \n            \n                        Node\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        record\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        record\n                                    \n                                \n                                \n                                    \n                                        record:     Record\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Record\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Utils } from '@sinequa/core/base';\nimport { Record } from '@sinequa/core/web-services';\nimport { Action } from '@sinequa/components/action';\nimport { Node, NetworkDataset, NodeType, EdgeType, NetworkContext } from '../network-models';\nimport { BaseProvider } from './base-provider';\n\n/**\n * Extension of the Node interface, to include the Record object\n * from which the node is generated\n */\nexport interface RecordNode extends Node {\n    record: Record;\n}\n\n\n/**\n * An extension of the EdgeType interface to include properties specific to\n * structural edges (edge between a record and its metadata).\n */\nexport interface StructuralEdgeType extends EdgeType {\n    /** Name of the field in the record */\n    field: string;\n    /** count limits the number of values displayed and allows for pagination. Use 0 for unlimited values */\n    count?: number;\n    /** Defines when the edge should be displayed */\n    trigger: StructuralTriggerType;\n    /** showall: display all values from the field / paginate: display all value with pagination / existingnodes: only link to existing nodes / manual: only show if manual action (activated programmatically) */\n    display: StructuralDisplayType;\n    /** A function to parse metadata from a record node in a custom way */\n    parse?: (value: any, record: Record, type: StructuralEdgeType) => CustomData;\n}\n\nexport type StructuralTriggerType = \"oninsert\" | \"onclick\" | \"manual\";\nexport type StructuralDisplayType = \"all\" | \"paginate\" | \"existingnodes\" | ((node: Node, recordNode: RecordNode, index: number) => boolean);\n\n/**\n * Data structure returned by the optional parse() function of a structural edge\n * type. Contains the parsed values of a property that can be turned into one or\n * multiple nodes and edges.\n */\nexport interface CustomData {\n    values: string[]; // eg. LARRY PAGE, GOOGLE\n    displays: string[]; // eg. Larry Page, Google\n    relations?: string[]; // eg. Works At\n    directed?: boolean[]; // eg. true\n    fieldValue?: string; // A value on which to filter the data\n}\n\n/**\n * Tests whether the given edge type is a structural edge type\n * @param et an edge type\n */\nexport function isStructuralEdgeType(et: EdgeType): et is StructuralEdgeType {\n    return !!(et as StructuralEdgeType).field;\n}\n\n\n/**\n * A network provider generating nodes from records.\n * Additionally, the provider can generate the \"structural edges\" of that\n * node. Structural edges are edges between a record and the fields of\n * that record (eg. the wikipedia page of Microsoft is a record that probably\n * contains the fields \"Microsoft\" and \"Bill Gates\").\n */\nexport class RecordsProvider extends BaseProvider {\n\n    constructor(\n        public name = \"Documents\",\n        protected nodeType: NodeType,\n        protected edgeTypes: StructuralEdgeType[],\n        protected records: Record[],\n        protected hideRecordNode = false\n    ){\n        super(name);\n    }\n\n    /**\n     * Clears the dataset and generates new record nodes\n     * @param records the list of records of this provider\n     */\n    protected updateDataset(records?: Record[]) {\n        this.dataset.clear();\n        if(!this.active || !records || records.length === 0) {\n            return; \n        }\n        this.addRecordNodes(records);\n    }\n    \n    // Record nodes\n\n    /**\n     * Generates the nodes for a list of records, including their structural\n     * edges, and adds them to the dataset.\n     * Returns the list of record nodes.\n     * @param records \n     */\n    protected addRecordNodes(records: Record[]): RecordNode[] {\n        return records.map(record => {\n            let node = this.dataset.getNode(this.getNodeId(this.nodeType, record.id));\n            if(!node) {\n                node = this.createNode(this.nodeType, record.id, record.title, !this.hideRecordNode, {record});\n                this.dataset.addNodes(node);\n                this.edgeTypes.forEach(type => {\n                    this.addStructuralEdges(node as RecordNode, type);\n                });\n            }\n            return node as RecordNode;\n        });\n    }\n\n    \n    // Structural edges\n\n    /**\n     * Generates the metadata nodes and structural edges from the given node,\n     * and merge them into the dataset.\n     * This function will automatically parse the metadata contained in the record,\n     * but it is possible to manage custom types of metadata by providing a\n     * custom parse() function via the structural edge type.\n     * @param node The record node\n     * @param type The edge type for which we want to create edges\n     */\n    protected addStructuralEdges(node: RecordNode, type: StructuralEdgeType) {\n\n        if(type.nodeTypes[0] !== this.nodeType){\n            throw new Error(`Inconsistent node type: '${type.nodeTypes[0].name}' instead of '${this.nodeType.name}'`);\n        }\n        \n        const recorddata = node.record[type.field];\n\n        if(recorddata === undefined){\n            return;\n        }\n\n        // Custom parse for mono or multi valued data\n        if(type.parse) {\n            if(Utils.isArray(recorddata)) {\n                recorddata.forEach((value,i) => { \n                    this.addCustomEdge(node, type, type.parse!(value, node.record, type));\n                });\n            }\n            else {\n                this.addCustomEdge(node, type, type.parse!(recorddata, node.record, type));\n            }\n        }\n        // Default handling for standard Sinequa Metadata\n        else {\n            const data = new NetworkDataset();\n            data.addNodes(node);\n    \n            // sourcestr\n            if(Utils.isString(recorddata)) {\n                this.addStructuralEdge(data, node, type, recorddata, recorddata, 0);\n            }\n            else if(Utils.isArray(recorddata)) {\n                recorddata.forEach((value,i) => {\n                    // sourcecsv\n                    if(Utils.isString(value)) {\n                        this.addStructuralEdge(data, node, type, value, value, i);\n                    }\n                    // entity\n                    else if(value[\"value\"]) {\n                        this.addStructuralEdge(data, node, type, value[\"value\"], value[\"display\"] || value[\"value\"], i);\n                    }\n                });\n            }\n    \n            this.dataset.merge(data);\n        }\n    }\n\n    /**\n     * Add a structural edge to a record node and adds that edge\n     * (and corresponding metadata node) to the given dataset.\n     * @param dataset The target dataset\n     * @param recordNode The record node\n     * @param type The edge type of the structural edge\n     * @param value The \"value\" property of the metadata node\n     * @param display The \"display\" property of the metadata node\n     * @param index The index of the metadata within the record, which may influence its visibility when using display=paginate\n     */\n    protected addStructuralEdge(dataset: NetworkDataset, recordNode: RecordNode, type: StructuralEdgeType, value: string, display: string, index: number) {\n        // Create the metadata node\n        const node = this.createNode(type.nodeTypes[1], value, display, true);\n        // Sets its visibility\n        node.visible = type.trigger === \"oninsert\" && this.isEdgeVisible(type, node, recordNode, index);\n        if(recordNode.id !== node.id){ // Special case of hybrid nodes, where the recordNode might contain itself...!\n            if(!dataset.hasNode(node.id)) { // Duplicate nodes/edges are possible when the same node type is present in multiple fields of a record (eg. \"email\" in msgfrom and msgto)\n                dataset.addNodes(node);\n            }\n            const edge = this.createEdge(type, recordNode, node, value, node.visible, {record: recordNode.record});\n            if(!dataset.hasEdge(edge.id)) {\n                dataset.addEdges(edge);\n            }\n        }\n    }\n\n    /**\n     * Add a custom structural edge to a record node and merges that edge\n     * (and corresponding metadata node) into the global dataset.\n     * @param recordNode The record node\n     * @param type The edge type of the structural edge\n     * @param data A CustomData object containing the properties of the metadata nodes we want to created\n     */\n    protected addCustomEdge(recordNode: RecordNode, type: StructuralEdgeType, data: CustomData) {\n        if(type.nodeTypes.length !== data.values.length + 1) {\n            throw new Error(`Wrong number of values for this custom edge ${type.nodeTypes.length}, ${data.values.length}`);\n        }\n        // Create a dataset only for this data, to avoid duplicate conflicts\n        const dataset = new NetworkDataset();\n        dataset.addNodes(recordNode);\n        // For each value contained in \"data\", create a node, and edges in between them (in addition to the edges between the record and each metadata node)\n        let lastNode: Node;\n        for(let i=0; i 0){\n                const relation = data.relations? data.relations[i-1] : undefined;\n                const directed = data.directed? data.directed[i-1] : false;\n                dataset.addEdges(this.createEdge(type, lastNode!, node, data.fieldValue, true, {}, 1, directed, relation));\n            }\n            lastNode = node;\n        }\n        this.dataset.merge(dataset);\n    }\n\n    /**\n     * Returns the visibility of a structural edge, depending on the type.display property\n     * @param type The structural edge type\n     * @param node The metadata node of this edge\n     * @param recordNode The record node of this edge\n     * @param index The index of the metadata in the list of metadata of the record\n     */\n    protected isEdgeVisible(type: StructuralEdgeType, node: Node, recordNode: RecordNode, index: number): boolean {\n        if(type.display === \"all\") {\n            return true;\n        }\n        else if(type.display === \"existingnodes\") {\n            return false;\n        }\n        else if(type.display === \"paginate\") {\n            return index  node.type === this.nodeType)\n            .forEach(node => {\n                dataset.getAdjacentEdges(node.id)\n                    .filter(edge => (edge.type as StructuralEdgeType).display === 'existingnodes')\n                    .forEach(edge => {\n                        const neighbor = dataset.getNode(node.id === edge.to ? edge.from : edge.to);\n                        if(!neighbor) {\n                            throw new Error(`Missing node from edge ${edge.id}`);\n                        }\n                        const neighborsneighbors = dataset.getAdjacentEdges(neighbor.id);\n                        if(neighborsneighbors.length > 1) {\n                            neighbor.visible = true;\n                            edge.visible = true;\n                        }\n                    });\n            });\n    }\n\n    /**\n     * Adjust visibility of nodes and edges, for structural edges with\n     * type.trigger = onclick. These nodes will only be shown once their\n     * record node is clicked on.\n     * @param node A node that was clicked\n     */\n    onNodeClicked(node?: Node) {\n        if(this.active && node && node.type === this.nodeType) { // Note: we cannot test the provider property, since this node might have been merged with one from a different provider. However the node type should be a unique instance\n            let update = false;\n            this.dataset.getAdjacentEdges(node.id)\n                .filter(edge => edge.type['trigger'] === 'onclick')\n                .forEach(edge => {\n                    const neighbor = this.dataset.getNode(node.id === edge.to ? edge.from : edge.to);\n                    if(!neighbor) {\n                        throw new Error(`Missing node from edge ${edge.id}`);\n                    }\n                    if(!neighbor.visible || !edge.visible) {\n                        edge.visible = true;\n                        neighbor.visible = true;\n                        update = true;\n                    }\n                    // TODO \"propagate\" visibility (ie. if 2 nodes are visible but an edge in between is invisible, make it visible)\n                });\n            if(update) {\n                this.provider.next(this.dataset);\n            }\n        }\n    }\n\n    getProviderActions(): Action[] {\n        return super.getProviderActions();\n    }\n\n    /**\n     * Creates actions for expanding and/or collapsing a record node that was clicked.\n     * expanding and collapsing will act on the visibility of the structural edges\n     * attached to this node.\n     * Both actions might be displayed at the same time, if the node is in an intermediate\n     * state.\n     * @param node \n     */\n    getNodeActions(node: Node): Action[] {\n        const actions = super.getNodeActions(node);\n        \n        // Actions for exanding / collapsing a record node\n        if(this.active && node.type === this.nodeType && this.edgeTypes.length > 0) {\n            let hasExpandedEdge = false;\n            let hasCollapsedEdge = false;\n            this.dataset.getAdjacentEdges(node.id).forEach(e => {\n                hasCollapsedEdge = hasCollapsedEdge || !e.visible;\n                hasExpandedEdge = hasExpandedEdge || e.visible;\n            });\n\n            if(hasCollapsedEdge) {\n                actions.push(new Action({\n                    icon: \"fas fa-expand-arrows-alt\",\n                    title: \"msg#network.actions.expandMeta\",\n                    action: () => {\n                        let update = false;\n                        this.dataset.getAdjacentEdges(node.id)\n                            .forEach(edge => {\n                                const neighbor = this.dataset.getNode(node.id === edge.to ? edge.from : edge.to);\n                                if(!neighbor) {\n                                    throw new Error(`Missing node from edge ${edge.id}`);\n                                }\n                                if(!neighbor.visible || !edge.visible) {\n                                    edge.visible = true;\n                                    neighbor.visible = true;\n                                    update = true;\n                                }\n                                // TODO \"propagate\" visibility (ie. if 2 nodes are visible but an edge in between is invisible, make it visible)\n                            });\n                        if(update) {\n                            this.provider.next(this.dataset);\n                        }\n                    }\n                }));\n            }\n            \n            if(hasExpandedEdge) {\n                actions.push(new Action({\n                    icon: \"fas fa-compress-arrows-alt\",\n                    title: \"msg#network.actions.collapseMeta\",\n                    action: () => {\n                        let update = false;\n                        this.dataset.getAdjacentEdges(node.id)\n                            .forEach(edge => {\n                                const neighbor = this.dataset.getNode(node.id === edge.to ? edge.from : edge.to);\n                                if(!neighbor) {\n                                    throw new Error(`Missing node from edge ${edge.id}`);\n                                }\n                                if((neighbor.visible || edge.visible) && !(neighbor as RecordNode).record) { // Prevent collapsing links between 2 record nodes (alternatively, we could count the number of neighbors of the neighbors, and close only the isoltated ones)\n                                    edge.visible = false;\n                                    neighbor.visible = false;\n                                    update = true;\n                                }\n                            });\n                        if(update) {\n                            this.provider.next(this.dataset);\n                        }\n                    }\n                }));\n            }\n        }\n        return actions;\n    }\n\n}\n    \n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/ResultTimeline.html":{"url":"components/ResultTimeline.html","title":"component - ResultTimeline","body":"\n                   \n\n\n\n\n\n  Components\n  ResultTimeline\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    vis-timeline/result-timeline/result-timeline.ts\n\n\n\n\n    \n        Implements\n    \n    \n                    OnChanges\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                sq-result-timeline\n            \n\n\n\n\n            \n                templateUrl\n                ./result-timeline.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                initDone\n                            \n                            \n                                items\n                            \n                            \n                                    Public\n                                visTimelineService\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                ngOnChanges\n                            \n                            \n                                timelineInitialized\n                            \n                            \n                                updateTimeline\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                dates\n                            \n                            \n                                events\n                            \n                            \n                                max_dates\n                            \n                            \n                                max_year\n                            \n                            \n                                min_dates\n                            \n                            \n                                min_year\n                            \n                            \n                                name\n                            \n                            \n                                options\n                            \n                            \n                                record\n                            \n                        \n                    \n                \n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(visTimelineService: VisTimelineService)\n                    \n                \n                        \n                            \n                                Defined in vis-timeline/result-timeline/result-timeline.ts:32\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        visTimelineService\n                                                  \n                                                        \n                                                                    VisTimelineService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        dates\n                    \n                \n                \n                    \n                        Type :     EntityItem[]\n\n                    \n                \n                        \n                            \n                                    Defined in vis-timeline/result-timeline/result-timeline.ts:23\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        events\n                    \n                \n                \n                    \n                        Type :     EntityItem[]\n\n                    \n                \n                        \n                            \n                                    Defined in vis-timeline/result-timeline/result-timeline.ts:24\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        max_dates\n                    \n                \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 100\n                    \n                \n                        \n                            \n                                    Defined in vis-timeline/result-timeline/result-timeline.ts:28\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        max_year\n                    \n                \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 10000\n                    \n                \n                        \n                            \n                                    Defined in vis-timeline/result-timeline/result-timeline.ts:26\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        min_dates\n                    \n                \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 1\n                    \n                \n                        \n                            \n                                    Defined in vis-timeline/result-timeline/result-timeline.ts:27\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        min_year\n                    \n                \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 0\n                    \n                \n                        \n                            \n                                    Defined in vis-timeline/result-timeline/result-timeline.ts:25\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        name\n                    \n                \n                \n                    \n                        Default value : \"vis-timeline\"\n                    \n                \n                        \n                            \n                                    Defined in vis-timeline/result-timeline/result-timeline.ts:21\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        options\n                    \n                \n                \n                    \n                        Type :     TimelineOptions\n\n                    \n                \n                \n                    \n                        Default value : defaultOptions\n                    \n                \n                        \n                            \n                                    Defined in vis-timeline/result-timeline/result-timeline.ts:29\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        record\n                    \n                \n                \n                    \n                        Type :     Record\n\n                    \n                \n                        \n                            \n                                    Defined in vis-timeline/result-timeline/result-timeline.ts:22\n                            \n                        \n            \n        \n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            ngOnChanges\n                        \n                        \n                    \n                \n            \n            \n                \nngOnChanges(changes: SimpleChanges)\n                \n            \n\n\n            \n                \n                    Defined in vis-timeline/result-timeline/result-timeline.ts:37\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    changes\n                                    \n                                                SimpleChanges\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            timelineInitialized\n                        \n                        \n                    \n                \n            \n            \n                \ntimelineInitialized()\n                \n            \n\n\n            \n                \n                    Defined in vis-timeline/result-timeline/result-timeline.ts:122\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            updateTimeline\n                        \n                        \n                    \n                \n            \n            \n                \nupdateTimeline()\n                \n            \n\n\n            \n                \n                    Defined in vis-timeline/result-timeline/result-timeline.ts:43\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n    \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            initDone\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : false\n                        \n                    \n                        \n                            \n                                    Defined in vis-timeline/result-timeline/result-timeline.ts:31\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            items\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     DataItem[]\n\n                        \n                    \n                    \n                        \n                            Default value : []\n                        \n                    \n                        \n                            \n                                    Defined in vis-timeline/result-timeline/result-timeline.ts:32\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            visTimelineService\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     VisTimelineService\n\n                        \n                    \n                        \n                            \n                                    Defined in vis-timeline/result-timeline/result-timeline.ts:34\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n    \n        import {Component, Input, OnChanges, SimpleChanges} from \"@angular/core\";\nimport {Record, EntityItem} from \"@sinequa/core/web-services\";\nimport {TimelineOptions, DataItem, VisTimelineService} from \"ngx-vis\";\n\nimport moment from \"moment\";\n\nexport const defaultOptions : TimelineOptions = {\n    minHeight : '150px',\n    maxHeight : '350px',\n    margin: {\n        axis: 5,\n        item: 5\n    }\n};\n\n@Component({\n    selector: \"sq-result-timeline\",\n    templateUrl: \"./result-timeline.html\"\n})\nexport class ResultTimeline implements OnChanges {\n    @Input() name = \"vis-timeline\";\n    @Input() record: Record;\n    @Input() dates: EntityItem[];\n    @Input() events: EntityItem[];\n    @Input() min_year: number = 0;\n    @Input() max_year: number = 10000;\n    @Input() min_dates: number = 1;\n    @Input() max_dates: number = 100;\n    @Input() options: TimelineOptions = defaultOptions;\n\n    initDone = false;\n    items : DataItem[] = [];\n\n    constructor(public visTimelineService: VisTimelineService){\n    }\n\n    ngOnChanges(changes:SimpleChanges) {\n        if(!!changes['record'] || !!changes['dates'] || !!changes['events']){\n            this.updateTimeline();\n        }\n    }\n\n    updateTimeline(){\n\n        this.items.splice(0);\n\n        const dates = this.dates || [];\n        const events = this.events || [];\n\n        const all_ids: string[] = [];\n        const all_dates: string[] = [];\n\n        events.forEach(event => {\n            const data_date = event.display;\n            const cooc = data_date.substring(1,data_date.length-1).split(\")#(\");\n            const date = new Date(cooc[1]);\n            //console.log(\"cooc1:\",data_date[i+2]);\n            //const pos = event.locations.split(\",\")[0];\n            //console.log(cooc);\n            const year = date.getFullYear();\n            //console.log(year);\n            //console.log(regdate.test(date) );\n            //console.log( year  1950);\n            const id = this.record.id + \"#\" + data_date;\n            if(year  this.min_year && all_ids.indexOf(id)===-1){\n                this.items.push({id: id, content: cooc[0], start: date});\n                all_dates.push(cooc[1]);\n                all_ids.push(id);\n            }\n        });\n\n        dates.forEach(dateobj => {\n            const date: Date = moment(dateobj.display).toDate();\n            //console.log(\"date:\",data_date[i+1]);\n            //const pos = dateobj.locations.split(\",\")[0];\n            const year = date.getFullYear();\n            const id = this.record.id + \"#\" + dateobj.display;\n            if(year  this.min_year && all_dates.indexOf(dateobj.display)===-1 && all_ids.indexOf(id)===-1){\n                this.items.push({id: id, content: moment(date).format('ll'), start: date});\n                all_ids.push(id);\n            }\n        });\n\n        if(this.items.length >= this.min_dates){\n\n            if(this.items.length> this.max_dates )\n                this.items.splice(0, this.max_dates);\n\n            //console.log(data);\n\n            //try{\n            //    this.timeline.removeCustomTime(\"date-modified\");\n            //}catch{\n                // No date-modified\n            //}\n\n            //if(Utils.isString(this.record.modified) && this.record.modified.length>=10){\n            //    this.timeline.addCustomTime(this.record.modified.substring(0,10), \"date-modified\");\n            //}\n\n            /*this.timeline.on('select', properties => {\n                //console.log('selected items: ' + properties.items);\n                //console.log('event: ', properties.event);\n                //console.log(properties);\n                if(properties.items.length>0){\n                    //var id = properties.items[0].split(\"#\");\n                    console.log(this.items.get(properties.items[0]));\n                    //var date = items._data[properties.items[0]].start;\n                    //var url = \"search?action=select&resultid=\"+RESULTID+\"&item=%22Tag%3B\"+settings.date_column+\"%3B\"+date+\"%3B\"+date+\"%22\"\n                    //popup_extract(id[0], parseInt(id[1]), properties.event.target,url);\n                }\n            });*/\n\n        }else{\n            console.log(\"no timeline for this doc...\");\n        }\n        if(this.initDone) {\n            this.visTimelineService.setItems(this.name, this.items);\n        }\n    }\n\n    timelineInitialized() {\n        this.initDone = true;\n    }\n}\n\n    \n\n    \n        \n\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = ''\n    var COMPONENTS = [{'name': 'BsEdgeInfoCard', 'selector': 'sq-edge-info-card'},{'name': 'BsFacetHeatmapComponent', 'selector': 'sq-facet-heatmap'},{'name': 'BsFacetTimelineComponent', 'selector': 'sq-facet-timeline'},{'name': 'BsHeatmapComponent', 'selector': 'sq-heatmap'},{'name': 'BsNodeInfoCard', 'selector': 'sq-node-info-card'},{'name': 'BsResultsHeatmapView', 'selector': 'sq-results-heatmap-view'},{'name': 'BsTimelineComponent', 'selector': 'sq-timeline'},{'name': 'BsTooltipComponent', 'selector': 'sq-tooltip'},{'name': 'FacetNgxChart', 'selector': 'sq-facet-ngx-chart'},{'name': 'FusionChart', 'selector': 'sq-fusion-chart'},{'name': 'MapComponent', 'selector': 'sq-googlemaps'},{'name': 'MoneyCloudComponent', 'selector': 'sq-money-cloud'},{'name': 'MoneyTimelineComponent', 'selector': 'sq-money-timeline'},{'name': 'NetworkComponent', 'selector': 'sq-network'},{'name': 'NgxChart', 'selector': 'sq-ngx-chart'},{'name': 'ResultTimeline', 'selector': 'sq-result-timeline'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'ResultTimeline'};\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SelectedRecordsProvider.html":{"url":"classes/SelectedRecordsProvider.html","title":"class - SelectedRecordsProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SelectedRecordsProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            network/providers/selected-records-provider.ts\n        \n\n            \n                Description\n            \n            \n                An extension of the RecordsProvider, where records are not provided\ndirectly, but instead are taken from the SelectionService and refreshed\nevery time a node is selected or unselected.\n⚠️ Note that the SelectionService must be configured to store records instead\nof just records ids!\nSee http://localhost:4000/sba-angular/modules/components/selection.html#selection-service\n\n            \n\n            \n                Extends\n            \n            \n                        RecordsProvider\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                name\n                            \n                            \n                                selectionSubscription\n                            \n                            \n                                    Public\n                                name\n                            \n                            \n                                    Public\n                                    Readonly\n                                activateAction\n                            \n                            \n                                    Public\n                                active\n                            \n                            \n                                    Public\n                                context\n                            \n                            \n                                    Public\n                                dataset\n                            \n                            \n                                    Public\n                                    Readonly\n                                EDGESEPARATOR\n                            \n                            \n                                    Public\n                                name\n                            \n                            \n                                    Public\n                                    Readonly\n                                resetAction\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getData\n                            \n                            \n                                onDestroy\n                            \n                            \n                                getData\n                            \n                            \n                                getNodeActions\n                            \n                            \n                                getProviderActions\n                            \n                            \n                                onDatasetsMerged\n                            \n                            \n                                onNodeClicked\n                            \n                            \n                                getData\n                            \n                            \n                                getEdgeActions\n                            \n                            \n                                getNodeActions\n                            \n                            \n                                getProvider\n                            \n                            \n                                getProviderActions\n                            \n                            \n                                onDatasetsMerged\n                            \n                            \n                                onDestroy\n                            \n                            \n                                onEdgeClicked\n                            \n                            \n                                onNodeClicked\n                            \n                            \n                                onNodesInserted\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(name: string, nodeType: NodeType, edgeTypes: StructuralEdgeType[], selectionService: SelectionService, hideRecordNode)\n                    \n                \n                        \n                            \n                                Defined in network/providers/selected-records-provider.ts:19\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        name\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        nodeType\n                                                  \n                                                        \n                                                                        NodeType\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        edgeTypes\n                                                  \n                                                        \n                                                                    StructuralEdgeType[]\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        selectionService\n                                                  \n                                                        \n                                                                    SelectionService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        hideRecordNode\n                                                  \n                                                        \n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            name\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : \"Selected documents\"\n                        \n                    \n                        \n                            \n                                    Defined in network/providers/selected-records-provider.ts:22\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            selectionSubscription\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Subscription\n\n                        \n                    \n                        \n                            \n                                    Defined in network/providers/selected-records-provider.ts:19\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            name\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : \"Documents\"\n                        \n                    \n                            \n                                \n                                    Inherited from         RecordsProvider\n\n                                \n                            \n                        \n                            \n                                    Defined in         RecordsProvider:68\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                                Readonly\n                            activateAction\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Action\n\n                        \n                    \n                            \n                                \n                                    Inherited from         BaseProvider\n\n                                \n                            \n                        \n                            \n                                    Defined in         BaseProvider:21\n\n                            \n                        \n\n                \n                    \n                        Action to turn the provider on or off \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            active\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : true\n                        \n                    \n                            \n                                \n                                    Inherited from         BaseProvider\n\n                                \n                            \n                        \n                            \n                                    Defined in         BaseProvider:16\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            context\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         NetworkContext\n\n                        \n                    \n                            \n                                \n                                    Inherited from         BaseProvider\n\n                                \n                            \n                        \n                            \n                                    Defined in         BaseProvider:25\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            dataset\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : new NetworkDataset()\n                        \n                    \n                            \n                                \n                                    Inherited from         BaseProvider\n\n                                \n                            \n                        \n                            \n                                    Defined in         BaseProvider:15\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                                Readonly\n                            EDGESEPARATOR\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : \"~~~EDGE~~~\"\n                        \n                    \n                            \n                                \n                                    Inherited from         BaseProvider\n\n                                \n                            \n                        \n                            \n                                    Defined in         BaseProvider:18\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            name\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                            \n                                \n                                    Inherited from         BaseProvider\n\n                                \n                            \n                        \n                            \n                                    Defined in         BaseProvider:28\n\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                                Readonly\n                            resetAction\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Action\n\n                        \n                    \n                            \n                                \n                                    Inherited from         BaseProvider\n\n                                \n                            \n                        \n                            \n                                    Defined in         BaseProvider:23\n\n                            \n                        \n\n                \n                    \n                        Action to reset the provider \n\n                    \n                \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getData\n                        \n                        \n                    \n                \n            \n            \n                \ngetData(context: NetworkContext)\n                \n            \n\n\n            \n                \n                    Defined in network/providers/selected-records-provider.ts:42\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                                NetworkContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            onDestroy\n                        \n                        \n                    \n                \n            \n            \n                \nonDestroy()\n                \n            \n\n\n            \n                \n                    Defined in network/providers/selected-records-provider.ts:48\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getData\n                        \n                        \n                    \n                \n            \n            \n                \ngetData(context: NetworkContext)\n                \n            \n\n\n            \n                \n                    Inherited from         RecordsProvider\n\n                \n            \n            \n                \n                        Defined in         RecordsProvider:256\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                                NetworkContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getNodeActions\n                        \n                        \n                    \n                \n            \n            \n                \ngetNodeActions(node: Node)\n                \n            \n\n\n            \n                \n                    Inherited from         RecordsProvider\n\n                \n            \n            \n                \n                        Defined in         RecordsProvider:331\n\n                \n            \n\n\n            \n                \n                    Creates actions for expanding and/or collapsing a record node that was clicked.\nexpanding and collapsing will act on the visibility of the structural edges\nattached to this node.\nBoth actions might be displayed at the same time, if the node is in an intermediate\nstate.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    node\n                                    \n                                                Node\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Action[]\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getProviderActions\n                        \n                        \n                    \n                \n            \n            \n                \ngetProviderActions()\n                \n            \n\n\n            \n                \n                    Inherited from         RecordsProvider\n\n                \n            \n            \n                \n                        Defined in         RecordsProvider:319\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     Action[]\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            onDatasetsMerged\n                        \n                        \n                    \n                \n            \n            \n                \nonDatasetsMerged(dataset: NetworkDataset)\n                \n            \n\n\n            \n                \n                    Inherited from         RecordsProvider\n\n                \n            \n            \n                \n                        Defined in         RecordsProvider:269\n\n                \n            \n\n\n            \n                \n                    This function adjusts the visibility of nodes for the visibility\ntype \"existingnode\", so that nodes with only one neighbor (post-merge)\nare collapsed.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    dataset\n                                    \n                                                NetworkDataset\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The dataset resulting of the merge of all the datasets\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            onNodeClicked\n                        \n                        \n                    \n                \n            \n            \n                \nonNodeClicked(node?: Node)\n                \n            \n\n\n            \n                \n                    Inherited from         RecordsProvider\n\n                \n            \n            \n                \n                        Defined in         RecordsProvider:296\n\n                \n            \n\n\n            \n                \n                    Adjust visibility of nodes and edges, for structural edges with\ntype.trigger = onclick. These nodes will only be shown once their\nrecord node is clicked on.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    node\n                                    \n                                                Node\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        A node that was clicked\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getData\n                        \n                        \n                    \n                \n            \n            \n                \ngetData(context: NetworkContext)\n                \n            \n\n\n            \n                \n                    Inherited from         BaseProvider\n\n                \n            \n            \n                \n                        Defined in         BaseProvider:155\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                                NetworkContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getEdgeActions\n                        \n                        \n                    \n                \n            \n            \n                \ngetEdgeActions(edge: Edge)\n                \n            \n\n\n            \n                \n                    Inherited from         BaseProvider\n\n                \n            \n            \n                \n                        Defined in         BaseProvider:211\n\n                \n            \n\n\n            \n                \n                    By default the base provider includes an action to filter the search if a clicked\nedge has a \"type.field\" property and a \"fieldValue\" (alternatively, an action\nis created if the 2 adjacent nodes can be filtered, ie they both have a \"field\"\nproperty)\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    edge\n                                    \n                                                Edge\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The clicked edge\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Action[]\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getNodeActions\n                        \n                        \n                    \n                \n            \n            \n                \ngetNodeActions(node: Node)\n                \n            \n\n\n            \n                \n                    Inherited from         BaseProvider\n\n                \n            \n            \n                \n                        Defined in         BaseProvider:188\n\n                \n            \n\n\n            \n                \n                    By default the base provider includes an action to filter the search if a clicked\nnode has a \"field\" property\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    node\n                                    \n                                                Node\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The clicked node\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Action[]\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getProvider\n                        \n                        \n                    \n                \n            \n            \n                \ngetProvider()\n                \n            \n\n\n            \n                \n                    Inherited from         BaseProvider\n\n                \n            \n            \n                \n                        Defined in         BaseProvider:151\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         Subject\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getProviderActions\n                        \n                        \n                    \n                \n            \n            \n                \ngetProviderActions()\n                \n            \n\n\n            \n                \n                    Inherited from         BaseProvider\n\n                \n            \n            \n                \n                        Defined in         BaseProvider:179\n\n                \n            \n\n\n            \n                \n                    By default, the base provider includes an action to turn the provider\non or off, and an action to reset the data from this provider\n\n\n                    \n                        Returns :     Action[]\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            onDatasetsMerged\n                        \n                        \n                    \n                \n            \n            \n                \nonDatasetsMerged(dataset: NetworkDataset)\n                \n            \n\n\n            \n                \n                    Inherited from         BaseProvider\n\n                \n            \n            \n                \n                        Defined in         BaseProvider:159\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dataset\n                                    \n                                                NetworkDataset\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            onDestroy\n                        \n                        \n                    \n                \n            \n            \n                \nonDestroy()\n                \n            \n\n\n            \n                \n                    Inherited from         BaseProvider\n\n                \n            \n            \n                \n                        Defined in         BaseProvider:245\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            onEdgeClicked\n                        \n                        \n                    \n                \n            \n            \n                \nonEdgeClicked(edge: Edge | undefined)\n                \n            \n\n\n            \n                \n                    Inherited from         BaseProvider\n\n                \n            \n            \n                \n                        Defined in         BaseProvider:171\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    edge\n                                    \n                                                Edge | undefined\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            onNodeClicked\n                        \n                        \n                    \n                \n            \n            \n                \nonNodeClicked(node: Node | undefined)\n                \n            \n\n\n            \n                \n                    Inherited from         BaseProvider\n\n                \n            \n            \n                \n                        Defined in         BaseProvider:167\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    node\n                                    \n                                                Node | undefined\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            onNodesInserted\n                        \n                        \n                    \n                \n            \n            \n                \nonNodesInserted(nodes: Node[])\n                \n            \n\n\n            \n                \n                    Inherited from         BaseProvider\n\n                \n            \n            \n                \n                        Defined in         BaseProvider:163\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    nodes\n                                    \n                                                Node[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Subscription } from 'rxjs';\nimport { Record } from '@sinequa/core/web-services';\nimport { SelectionService, SelectionEventType } from '@sinequa/components/selection';\nimport { NodeType, NetworkContext } from '../network-models';\nimport { RecordsProvider, StructuralEdgeType } from './records-provider';\n\n\n/**\n * An extension of the RecordsProvider, where records are not provided\n * directly, but instead are taken from the SelectionService and refreshed\n * every time a node is selected or unselected.\n * ⚠️ Note that the SelectionService must be configured to store records instead\n * of just records ids!\n * See http://localhost:4000/sba-angular/modules/components/selection.html#selection-service\n */\nexport class SelectedRecordsProvider extends RecordsProvider {\n\n    // Subscription to the SelectionService, allowing to refresh the list of records\n    selectionSubscription: Subscription;\n\n    constructor(\n        public name = \"Selected documents\",\n        protected nodeType: NodeType,\n        protected edgeTypes: StructuralEdgeType[],\n        protected selectionService: SelectionService,\n        protected hideRecordNode = false\n    ){\n        super(name, nodeType, edgeTypes, selectionService.getSelectedItems() as Record[], hideRecordNode);\n\n        this.selectionSubscription = selectionService.events.subscribe(event => {\n            if(event.type === SelectionEventType.SELECT || SelectionEventType.UNSELECT) {\n                const records = selectionService.getSelectedItems() as Record[];\n                this.updateDataset(records);\n                this.provider.next(this.dataset);\n            }\n        });\n    }\n\n\n    // NetworkProvider interface\n\n    getData(context: NetworkContext) {\n        this.context = context;\n        this.updateDataset(this.selectionService.getSelectedItems() as Record[]);\n        this.provider.next(this.dataset);\n    }\n    \n    onDestroy() {\n        this.selectionSubscription?.unsubscribe();\n    }\n\n}\n    \n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/StructuralEdgeType.html":{"url":"interfaces/StructuralEdgeType.html","title":"interface - StructuralEdgeType","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  StructuralEdgeType\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            network/providers/records-provider.ts\n        \n\n            \n                Description\n            \n            \n                An extension of the EdgeType interface to include properties specific to\nstructural edges (edge between a record and its metadata).\n\n            \n\n            \n                Extends\n            \n            \n                        EdgeType\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        count\n                                \n                                \n                                        display\n                                \n                                \n                                        field\n                                \n                                \n                                            Optional\n                                        parse\n                                \n                                \n                                        trigger\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        count\n                                    \n                                \n                                \n                                    \n                                        count:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    count limits the number of values displayed and allows for pagination. Use 0 for unlimited values \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        display\n                                    \n                                \n                                \n                                    \n                                        display:         StructuralDisplayType\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         StructuralDisplayType\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    showall: display all values from the field / paginate: display all value with pagination / existingnodes: only link to existing nodes / manual: only show if manual action (activated programmatically) \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        field\n                                    \n                                \n                                \n                                    \n                                        field:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Name of the field in the record \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        parse\n                                    \n                                \n                                \n                                    \n                                        parse:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    A function to parse metadata from a record node in a custom way \n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        trigger\n                                    \n                                \n                                \n                                    \n                                        trigger:         StructuralTriggerType\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         StructuralTriggerType\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Defines when the edge should be displayed \n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { Utils } from '@sinequa/core/base';\nimport { Record } from '@sinequa/core/web-services';\nimport { Action } from '@sinequa/components/action';\nimport { Node, NetworkDataset, NodeType, EdgeType, NetworkContext } from '../network-models';\nimport { BaseProvider } from './base-provider';\n\n/**\n * Extension of the Node interface, to include the Record object\n * from which the node is generated\n */\nexport interface RecordNode extends Node {\n    record: Record;\n}\n\n\n/**\n * An extension of the EdgeType interface to include properties specific to\n * structural edges (edge between a record and its metadata).\n */\nexport interface StructuralEdgeType extends EdgeType {\n    /** Name of the field in the record */\n    field: string;\n    /** count limits the number of values displayed and allows for pagination. Use 0 for unlimited values */\n    count?: number;\n    /** Defines when the edge should be displayed */\n    trigger: StructuralTriggerType;\n    /** showall: display all values from the field / paginate: display all value with pagination / existingnodes: only link to existing nodes / manual: only show if manual action (activated programmatically) */\n    display: StructuralDisplayType;\n    /** A function to parse metadata from a record node in a custom way */\n    parse?: (value: any, record: Record, type: StructuralEdgeType) => CustomData;\n}\n\nexport type StructuralTriggerType = \"oninsert\" | \"onclick\" | \"manual\";\nexport type StructuralDisplayType = \"all\" | \"paginate\" | \"existingnodes\" | ((node: Node, recordNode: RecordNode, index: number) => boolean);\n\n/**\n * Data structure returned by the optional parse() function of a structural edge\n * type. Contains the parsed values of a property that can be turned into one or\n * multiple nodes and edges.\n */\nexport interface CustomData {\n    values: string[]; // eg. LARRY PAGE, GOOGLE\n    displays: string[]; // eg. Larry Page, Google\n    relations?: string[]; // eg. Works At\n    directed?: boolean[]; // eg. true\n    fieldValue?: string; // A value on which to filter the data\n}\n\n/**\n * Tests whether the given edge type is a structural edge type\n * @param et an edge type\n */\nexport function isStructuralEdgeType(et: EdgeType): et is StructuralEdgeType {\n    return !!(et as StructuralEdgeType).field;\n}\n\n\n/**\n * A network provider generating nodes from records.\n * Additionally, the provider can generate the \"structural edges\" of that\n * node. Structural edges are edges between a record and the fields of\n * that record (eg. the wikipedia page of Microsoft is a record that probably\n * contains the fields \"Microsoft\" and \"Bill Gates\").\n */\nexport class RecordsProvider extends BaseProvider {\n\n    constructor(\n        public name = \"Documents\",\n        protected nodeType: NodeType,\n        protected edgeTypes: StructuralEdgeType[],\n        protected records: Record[],\n        protected hideRecordNode = false\n    ){\n        super(name);\n    }\n\n    /**\n     * Clears the dataset and generates new record nodes\n     * @param records the list of records of this provider\n     */\n    protected updateDataset(records?: Record[]) {\n        this.dataset.clear();\n        if(!this.active || !records || records.length === 0) {\n            return; \n        }\n        this.addRecordNodes(records);\n    }\n    \n    // Record nodes\n\n    /**\n     * Generates the nodes for a list of records, including their structural\n     * edges, and adds them to the dataset.\n     * Returns the list of record nodes.\n     * @param records \n     */\n    protected addRecordNodes(records: Record[]): RecordNode[] {\n        return records.map(record => {\n            let node = this.dataset.getNode(this.getNodeId(this.nodeType, record.id));\n            if(!node) {\n                node = this.createNode(this.nodeType, record.id, record.title, !this.hideRecordNode, {record});\n                this.dataset.addNodes(node);\n                this.edgeTypes.forEach(type => {\n                    this.addStructuralEdges(node as RecordNode, type);\n                });\n            }\n            return node as RecordNode;\n        });\n    }\n\n    \n    // Structural edges\n\n    /**\n     * Generates the metadata nodes and structural edges from the given node,\n     * and merge them into the dataset.\n     * This function will automatically parse the metadata contained in the record,\n     * but it is possible to manage custom types of metadata by providing a\n     * custom parse() function via the structural edge type.\n     * @param node The record node\n     * @param type The edge type for which we want to create edges\n     */\n    protected addStructuralEdges(node: RecordNode, type: StructuralEdgeType) {\n\n        if(type.nodeTypes[0] !== this.nodeType){\n            throw new Error(`Inconsistent node type: '${type.nodeTypes[0].name}' instead of '${this.nodeType.name}'`);\n        }\n        \n        const recorddata = node.record[type.field];\n\n        if(recorddata === undefined){\n            return;\n        }\n\n        // Custom parse for mono or multi valued data\n        if(type.parse) {\n            if(Utils.isArray(recorddata)) {\n                recorddata.forEach((value,i) => { \n                    this.addCustomEdge(node, type, type.parse!(value, node.record, type));\n                });\n            }\n            else {\n                this.addCustomEdge(node, type, type.parse!(recorddata, node.record, type));\n            }\n        }\n        // Default handling for standard Sinequa Metadata\n        else {\n            const data = new NetworkDataset();\n            data.addNodes(node);\n    \n            // sourcestr\n            if(Utils.isString(recorddata)) {\n                this.addStructuralEdge(data, node, type, recorddata, recorddata, 0);\n            }\n            else if(Utils.isArray(recorddata)) {\n                recorddata.forEach((value,i) => {\n                    // sourcecsv\n                    if(Utils.isString(value)) {\n                        this.addStructuralEdge(data, node, type, value, value, i);\n                    }\n                    // entity\n                    else if(value[\"value\"]) {\n                        this.addStructuralEdge(data, node, type, value[\"value\"], value[\"display\"] || value[\"value\"], i);\n                    }\n                });\n            }\n    \n            this.dataset.merge(data);\n        }\n    }\n\n    /**\n     * Add a structural edge to a record node and adds that edge\n     * (and corresponding metadata node) to the given dataset.\n     * @param dataset The target dataset\n     * @param recordNode The record node\n     * @param type The edge type of the structural edge\n     * @param value The \"value\" property of the metadata node\n     * @param display The \"display\" property of the metadata node\n     * @param index The index of the metadata within the record, which may influence its visibility when using display=paginate\n     */\n    protected addStructuralEdge(dataset: NetworkDataset, recordNode: RecordNode, type: StructuralEdgeType, value: string, display: string, index: number) {\n        // Create the metadata node\n        const node = this.createNode(type.nodeTypes[1], value, display, true);\n        // Sets its visibility\n        node.visible = type.trigger === \"oninsert\" && this.isEdgeVisible(type, node, recordNode, index);\n        if(recordNode.id !== node.id){ // Special case of hybrid nodes, where the recordNode might contain itself...!\n            if(!dataset.hasNode(node.id)) { // Duplicate nodes/edges are possible when the same node type is present in multiple fields of a record (eg. \"email\" in msgfrom and msgto)\n                dataset.addNodes(node);\n            }\n            const edge = this.createEdge(type, recordNode, node, value, node.visible, {record: recordNode.record});\n            if(!dataset.hasEdge(edge.id)) {\n                dataset.addEdges(edge);\n            }\n        }\n    }\n\n    /**\n     * Add a custom structural edge to a record node and merges that edge\n     * (and corresponding metadata node) into the global dataset.\n     * @param recordNode The record node\n     * @param type The edge type of the structural edge\n     * @param data A CustomData object containing the properties of the metadata nodes we want to created\n     */\n    protected addCustomEdge(recordNode: RecordNode, type: StructuralEdgeType, data: CustomData) {\n        if(type.nodeTypes.length !== data.values.length + 1) {\n            throw new Error(`Wrong number of values for this custom edge ${type.nodeTypes.length}, ${data.values.length}`);\n        }\n        // Create a dataset only for this data, to avoid duplicate conflicts\n        const dataset = new NetworkDataset();\n        dataset.addNodes(recordNode);\n        // For each value contained in \"data\", create a node, and edges in between them (in addition to the edges between the record and each metadata node)\n        let lastNode: Node;\n        for(let i=0; i 0){\n                const relation = data.relations? data.relations[i-1] : undefined;\n                const directed = data.directed? data.directed[i-1] : false;\n                dataset.addEdges(this.createEdge(type, lastNode!, node, data.fieldValue, true, {}, 1, directed, relation));\n            }\n            lastNode = node;\n        }\n        this.dataset.merge(dataset);\n    }\n\n    /**\n     * Returns the visibility of a structural edge, depending on the type.display property\n     * @param type The structural edge type\n     * @param node The metadata node of this edge\n     * @param recordNode The record node of this edge\n     * @param index The index of the metadata in the list of metadata of the record\n     */\n    protected isEdgeVisible(type: StructuralEdgeType, node: Node, recordNode: RecordNode, index: number): boolean {\n        if(type.display === \"all\") {\n            return true;\n        }\n        else if(type.display === \"existingnodes\") {\n            return false;\n        }\n        else if(type.display === \"paginate\") {\n            return index  node.type === this.nodeType)\n            .forEach(node => {\n                dataset.getAdjacentEdges(node.id)\n                    .filter(edge => (edge.type as StructuralEdgeType).display === 'existingnodes')\n                    .forEach(edge => {\n                        const neighbor = dataset.getNode(node.id === edge.to ? edge.from : edge.to);\n                        if(!neighbor) {\n                            throw new Error(`Missing node from edge ${edge.id}`);\n                        }\n                        const neighborsneighbors = dataset.getAdjacentEdges(neighbor.id);\n                        if(neighborsneighbors.length > 1) {\n                            neighbor.visible = true;\n                            edge.visible = true;\n                        }\n                    });\n            });\n    }\n\n    /**\n     * Adjust visibility of nodes and edges, for structural edges with\n     * type.trigger = onclick. These nodes will only be shown once their\n     * record node is clicked on.\n     * @param node A node that was clicked\n     */\n    onNodeClicked(node?: Node) {\n        if(this.active && node && node.type === this.nodeType) { // Note: we cannot test the provider property, since this node might have been merged with one from a different provider. However the node type should be a unique instance\n            let update = false;\n            this.dataset.getAdjacentEdges(node.id)\n                .filter(edge => edge.type['trigger'] === 'onclick')\n                .forEach(edge => {\n                    const neighbor = this.dataset.getNode(node.id === edge.to ? edge.from : edge.to);\n                    if(!neighbor) {\n                        throw new Error(`Missing node from edge ${edge.id}`);\n                    }\n                    if(!neighbor.visible || !edge.visible) {\n                        edge.visible = true;\n                        neighbor.visible = true;\n                        update = true;\n                    }\n                    // TODO \"propagate\" visibility (ie. if 2 nodes are visible but an edge in between is invisible, make it visible)\n                });\n            if(update) {\n                this.provider.next(this.dataset);\n            }\n        }\n    }\n\n    getProviderActions(): Action[] {\n        return super.getProviderActions();\n    }\n\n    /**\n     * Creates actions for expanding and/or collapsing a record node that was clicked.\n     * expanding and collapsing will act on the visibility of the structural edges\n     * attached to this node.\n     * Both actions might be displayed at the same time, if the node is in an intermediate\n     * state.\n     * @param node \n     */\n    getNodeActions(node: Node): Action[] {\n        const actions = super.getNodeActions(node);\n        \n        // Actions for exanding / collapsing a record node\n        if(this.active && node.type === this.nodeType && this.edgeTypes.length > 0) {\n            let hasExpandedEdge = false;\n            let hasCollapsedEdge = false;\n            this.dataset.getAdjacentEdges(node.id).forEach(e => {\n                hasCollapsedEdge = hasCollapsedEdge || !e.visible;\n                hasExpandedEdge = hasExpandedEdge || e.visible;\n            });\n\n            if(hasCollapsedEdge) {\n                actions.push(new Action({\n                    icon: \"fas fa-expand-arrows-alt\",\n                    title: \"msg#network.actions.expandMeta\",\n                    action: () => {\n                        let update = false;\n                        this.dataset.getAdjacentEdges(node.id)\n                            .forEach(edge => {\n                                const neighbor = this.dataset.getNode(node.id === edge.to ? edge.from : edge.to);\n                                if(!neighbor) {\n                                    throw new Error(`Missing node from edge ${edge.id}`);\n                                }\n                                if(!neighbor.visible || !edge.visible) {\n                                    edge.visible = true;\n                                    neighbor.visible = true;\n                                    update = true;\n                                }\n                                // TODO \"propagate\" visibility (ie. if 2 nodes are visible but an edge in between is invisible, make it visible)\n                            });\n                        if(update) {\n                            this.provider.next(this.dataset);\n                        }\n                    }\n                }));\n            }\n            \n            if(hasExpandedEdge) {\n                actions.push(new Action({\n                    icon: \"fas fa-compress-arrows-alt\",\n                    title: \"msg#network.actions.collapseMeta\",\n                    action: () => {\n                        let update = false;\n                        this.dataset.getAdjacentEdges(node.id)\n                            .forEach(edge => {\n                                const neighbor = this.dataset.getNode(node.id === edge.to ? edge.from : edge.to);\n                                if(!neighbor) {\n                                    throw new Error(`Missing node from edge ${edge.id}`);\n                                }\n                                if((neighbor.visible || edge.visible) && !(neighbor as RecordNode).record) { // Prevent collapsing links between 2 record nodes (alternatively, we could count the number of neighbors of the neighbors, and close only the isoltated ones)\n                                    edge.visible = false;\n                                    neighbor.visible = false;\n                                    update = true;\n                                }\n                            });\n                        if(update) {\n                            this.provider.next(this.dataset);\n                        }\n                    }\n                }));\n            }\n        }\n        return actions;\n    }\n\n}\n    \n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/TimelineAggregation.html":{"url":"interfaces/TimelineAggregation.html","title":"interface - TimelineAggregation","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  TimelineAggregation\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            timeline/bootstrap/facet-timeline.component.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        aggregation\n                                \n                                \n                                            Optional\n                                        areaStyles\n                                \n                                \n                                            Optional\n                                        lineStyles\n                                \n                                \n                                            Optional\n                                        name\n                                \n                                \n                                        primary\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        aggregation\n                                    \n                                \n                                \n                                    \n                                        aggregation:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        areaStyles\n                                    \n                                \n                                \n                                    \n                                        areaStyles:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        lineStyles\n                                    \n                                \n                                \n                                    \n                                        lineStyles:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        name\n                                    \n                                \n                                \n                                    \n                                        name:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        primary\n                                    \n                                \n                                \n                                    \n                                        primary:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Component, Input, OnChanges, ChangeDetectorRef, SimpleChanges, Output, EventEmitter } from '@angular/core';\nimport { Observable, of, combineLatest, ReplaySubject } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { Results, AggregationItem, Aggregation, CCAggregation, Record, AuditWebService, AuditEventType } from '@sinequa/core/web-services';\nimport { AppService, Expr, ExprBuilder } from '@sinequa/core/app-utils';\nimport { Utils } from '@sinequa/core/base';\nimport { AbstractFacet, FacetService } from '@sinequa/components/facet';\nimport { SearchService } from '@sinequa/components/search';\nimport { SelectionService } from '@sinequa/components/selection';\nimport { Action } from '@sinequa/components/action';\nimport { TimelineSeries, TimelineDate, TimelineEvent } from './timeline.component';\nimport moment from 'moment';\nimport * as d3 from 'd3';\n\nexport interface TimelineAggregation {\n    name?: string;\n    aggregation: string;\n    primary: boolean;\n    areaStyles?: {[key: string]: any};\n    lineStyles?: {[key: string]: any};\n}\n\nexport interface TimelineCombinedAggregations {\n    aggregations: TimelineAggregation[];\n    maxNMonths: number[]; // Maximum number of months for which to use this aggregation\n    default: TimelineAggregation; // Aggregation to use by default \n    current?: TimelineAggregation; // (this field is overriden by the component when switching aggregation)\n}\n\nexport interface TimelineRecords {\n    field: string;\n    size?: number | ((record: Record, selected: boolean) => number);\n    styles?: {[key: string]: any} | ((record: Record, selected: boolean) => {[key: string]: any});\n    display?: (record: Record) => string;\n}\n\nexport interface TimelineEventAggregation {\n    aggregation: string;\n    getDate: ((item: AggregationItem) => Date);\n    getDisplay: ((item: AggregationItem) => string);\n    size?: number | ((item: AggregationItem) => number);\n    styles?: {[key: string]: any} | ((item: AggregationItem) => {[key: string]: any});\n}\n\nexport type TimelineData = TimelineSeries | TimelineAggregation | TimelineCombinedAggregations;\n\nexport type TimelineEventData = TimelineEvent[] | TimelineRecords | TimelineEventAggregation;\n\n@Component({\n    selector: 'sq-facet-timeline',\n    templateUrl: './facet-timeline.component.html',\n    styleUrls: ['./facet-timeline.component.scss']\n})\nexport class BsFacetTimelineComponent extends AbstractFacet implements OnChanges {\n    @Input() name = 'Timeline';\n    @Input() results: Results;\n    \n    // By default, we show the standard Timeline aggregation and the list of current records\n    @Input() timeseries: TimelineData[] = [{aggregation: 'Timeline', primary: true}];\n    @Input() events: TimelineEventData[] = [{field: 'modified'}];\n\n    // Initial scale (prior to any zoom)\n    @Input() minDate?: Date;\n    @Input() maxDate?: Date;\n    // Date range to filter aggregations (ignored when combined aggregations are recomputed based on zoomed range)\n    @Input() minAggregationDate?: Date;\n    @Input() maxAggregationDate?: Date;\n    \n    @Input() zoomable = true;\n    @Input() minZoomDays = 1; // Max 1 day scale\n    @Input() maxZoomDays = 365 * 100; // Max 100 years scale\n\n    @Input() width = 600;\n    @Input() height = 200;\n    @Input() margin = {top: 15, bottom: 30, left: 40, right: 15};\n\n    @Input() curveType = \"curveMonotoneX\";\n\n    @Input() showTooltip = true;\n    @Input() theme: \"light\" | \"dark\" = \"light\";\n\n    @Output() eventClicked = new EventEmitter();\n\n    // List of observables (one per timeseries / event type)\n    timeseries$: ReplaySubject[];\n    events$: ReplaySubject[];\n\n    // Combination (combineLastest) of the timeline observables\n    mergedTimeseries$: Observable;\n    mergedEvents$: Observable;\n\n    // Current timeline selection\n    selection?: [Date, Date];\n\n    // Current range (undefined if no zoom / auto-scaling)\n    currentRange?: [Date, Date];\n\n    // Formating method for search queries\n    formatDayRequest = d3.timeFormat(\"%Y-%m-%d\");\n\n    // Actions\n    clearFilters: Action;\n\n    constructor(\n        public facetService: FacetService,\n        public searchService: SearchService,\n        public appService: AppService,\n        public selectionService: SelectionService,\n        public exprBuilder: ExprBuilder,\n        public cdRef: ChangeDetectorRef,\n        public audit: AuditWebService\n    ){\n        super();\n\n        // Update the events when the selection of records changes\n        this.selectionService.events.subscribe(event => {\n            const i = this.events.findIndex(e => (e as TimelineRecords).field);\n            if(i !== -1) {\n                this.events$[i].next(this.getRecordsAsEvents(this.events[i] as TimelineRecords));\n            }\n        });\n        \n        // Clear the current filters\n        this.clearFilters = new Action({\n            icon: \"far fa-minus-square\",\n            title: \"msg#facet.clearSelects\",\n            action: () => {\n                this.selection = undefined;\n                this.searchService.query.removeSelect(this.name);\n                this.searchService.search();\n            }\n        });\n\n    }\n\n    getMinDate(): Date | undefined {\n        return this.currentRange? this.currentRange[0] : this.minDate;\n    }\n\n    getMaxDate(): Date | undefined {\n        return this.currentRange? this.currentRange[1] : this.maxDate;\n    }\n\n    get actions(): Action[] {\n        const actions: Action[] = [];\n        if(this.facetService.hasFiltered(this.name)){\n            actions.push(this.clearFilters);\n        }\n        return actions;\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n\n        // Retrieve the current active selection for this timeline (if any)\n        const select = this.searchService.query.findSelect(this.name);\n\n        // Update the selection if it is not already set (which is the case on a page refresh)\n        if(select && !this.selection) {\n            let parsedexpr = this.appService.parseExpr(select.expression) as Expr;\n            if(!Utils.isString(parsedexpr)){\n                while(!parsedexpr.isLeaf){ // The select might over multiple fields (modified between [...] AND created between [...])\n                    parsedexpr = parsedexpr.operands[0];\n                }\n                if(parsedexpr.values){\n                    this.selection = [new Date(parsedexpr.values[0]), new Date(parsedexpr.values[1])];\n                }\n            }\n        }\n        // If no active selection we remove the selection from the timeline, along with the current zoomed range\n        else if(!select) {\n            this.selection = undefined; // If no select, it was possibly removed by the user, we need to update our selection\n            this.currentRange = undefined; // current range is set by zoom events, we want to reset it only if there are no select (ie. no user interaction)\n        }\n\n        // Initialize timeseries\n        if(!this.timeseries$ || changes[\"timeseries\"]) {\n            // Create one observable per timeline\n            this.timeseries$ = this.timeseries.map(_ => new ReplaySubject(1));\n            this.mergedTimeseries$ = combineLatest(this.timeseries$);\n        }\n\n        this.updateTimeseries();\n\n        // Initialize events\n        if(!this.events$ || changes[\"events\"]) {\n            this.events$ = this.events.map(_ => new ReplaySubject(1));\n            this.mergedEvents$ = combineLatest(this.events$).pipe(\n                map(events => ([] as TimelineEvent[]).concat(...events))\n            );\n        }\n\n        this.updateEvents();\n        \n    }\n\n    /**\n     * For each timeseries configuration given as an input,\n     * update the data via the list of observables (timelines$)\n     */\n    updateTimeseries() {\n        this.timeseries.forEach((config, i) => {\n\n            const subject = this.timeseries$[i];\n\n            if((config as TimelineSeries).dates !== undefined) {\n                subject.next(config as TimelineSeries);\n            }\n\n            else {\n                let agg = config as TimelineAggregation;\n                if(agg.aggregation === undefined){\n                    \n                    config = config as TimelineCombinedAggregations;\n                    // We want to set the default scale if it hasn't been set before\n                    // or if no zoom/selection has been made (so current scale may not be adapted to the new results)\n                    if(!this.currentRange || !config.current){\n                        config.current = config.default;\n                    }\n\n                    agg = config.current;\n                }\n                \n                const range: [Date, Date] | undefined = !!this.minAggregationDate && !!this.maxAggregationDate ?\n                    [this.minAggregationDate, this.maxAggregationDate] : undefined;\n\n                this.getTimeseries(agg, range).subscribe({\n                    next: d => subject.next(d),\n                    error: err => subject.error(err)\n                });\n            }\n\n        });\n    }\n\n    /**\n     * For each event configuration given as an input, \n     * update the data via the list of observables (events$)\n     */\n    updateEvents() {\n        this.events.forEach((config, i) => {\n            const subject = this.events$[i];\n\n            if((config as TimelineRecords).field) {\n                subject.next(this.getRecordsAsEvents(config as TimelineRecords));\n            }\n            else if((config as TimelineEventAggregation).aggregation){\n                this.getEventAggregation(config as TimelineEventAggregation).subscribe({\n                    next: t => subject.next(t),\n                    error: err => subject.error(err)\n                });\n            }\n            else if(Array.isArray(config)){\n                subject.next(config as TimelineEvent[]);\n            }\n        });\n    }\n\n    /**\n     * Get a timeseries aggregation via the getAggregation method.\n     * @param config \n     * @param subject \n     * @param range \n     */\n    getTimeseries(config: TimelineAggregation, range?: [Date, Date]): Observable {\n        return this.getAggregation(config.aggregation, range).pipe(\n            map(d => BsFacetTimelineComponent.createTimeseries(config, d.aggregation, d.ccaggregation, range))\n        );\n    }\n\n    /**\n     * Get an aggregation of events via the getAggregation method\n     * @param config \n     * @param subject \n     */\n    getEventAggregation(config: TimelineEventAggregation): Observable {\n        return this.getAggregation(config.aggregation).pipe(\n            map(d => BsFacetTimelineComponent.createAggregationEvents(config, d.aggregation, d.ccaggregation))\n        );\n    }\n\n    /**\n     * Returns the list of records from the results as a list of TimelineEvent when they have a\n     * modified date. The size and styles of the events are determined from the given configuration (TimelineRecords)\n     * @param config \n     */\n    getRecordsAsEvents(config: TimelineRecords): TimelineEvent[] {\n        if(this.results) {\n            return this.results.records\n                .filter(r => !!Utils.toDate(r[config.field]))\n                .map(r => {\n                    return {\n                        id: r.id,\n                        date: Utils.toDate(r[config.field])!,\n                        size: !config.size? 6 : typeof config.size === 'function'? config.size(r, r.$selected) : config.size,\n                        styles: !config.styles? BsFacetTimelineComponent.defaultRecordStyle(r.$selected) :\n                                typeof config.styles === 'function'? config.styles(r, r.$selected) : \n                                config.styles,\n                        display: config.display? config.display(r) : r.title,\n                        // Custom property for click action\n                        record: r\n                    }\n                });\n        }\n        return [];\n    }\n\n\n    /**\n     * returns an aggregation and its configuration either directly from the facet service of\n     * by fetching it from the server.\n     * @param aggregationName \n     * @param range \n     */\n    getAggregation(aggregationName: string, range?: [Date, Date]): Observable {\n        \n        const ccaggregation = this.appService.getCCAggregation(aggregationName);\n        const aggregation = this.facetService.getAggregation(aggregationName, this.results);\n        \n        if(aggregation && ccaggregation) {\n            return of({aggregation: aggregation, ccaggregation: ccaggregation});\n        }\n\n        else if(ccaggregation) {\n            return this.fetchAggregation(aggregationName, ccaggregation, range).pipe(\n                map(agg => {return {aggregation: agg, ccaggregation: ccaggregation} })\n            );\n        }\n\n        else {\n            throw new Error(`Aggregation ${aggregationName} does not exist in the Query web service`);\n        }\n    }\n\n    /**\n     * Get an aggregation from the server, filtering by range if provided\n     * @param aggregation \n     * @param ccaggregation \n     * @param range \n     */\n    fetchAggregation(aggregation: string, ccaggregation: CCAggregation, range?: [Date, Date]): Observable {\n        const query = Utils.copy(this.searchService.query);\n        query.action = \"aggregate\";\n        query.aggregations = [aggregation];\n\n        if(range){\n            query.addSelect(`${ccaggregation.column}:[${this.formatDayRequest(range[0])}..${this.formatDayRequest(range[1])}]`);\n        }\n\n        return this.searchService.getResults(query, undefined, {searchInactive: true}).pipe(\n            map(results => results.aggregations[0])\n        );\n    }\n\n    /**\n     * Given a combined aggregation configuration and a range, this method searches for the most \n     * adapted aggregation scale (years, months, weeks or days) and updates the data if necessary.\n     * @param config \n     * @param range \n     * @param iTimeseries \n     */\n    updateCombinedAggregation(config: TimelineCombinedAggregations, range: [Date, Date], timeseries$: ReplaySubject) {\n        const nmonths = d3.timeMonth.count(range[0], range[1]);\n\n        if(!config.maxNMonths || config.maxNMonths.length !== config.aggregations.length) {\n            console.error(config);\n            throw new Error(\"maxNMonths and aggregations must have the same number of items\");\n        }\n\n        // Find the aggregation with min maxNMonths with maxNMonths >= nmonths\n        let jMin;\n        config.maxNMonths.forEach((maxNMonths, j) => {\n            if(maxNMonths >= nmonths && (jMin === undefined || maxNMonths  this.currentRange[1])) {\n\n            config.current = bestAggregation;\n            this.getTimeseries(bestAggregation, range).subscribe({\n                next: d => timeseries$.next(d),\n                error: err => timeseries$.error(err)\n            });\n        }\n\n    }\n\n\n    // Interaction callbacks\n\n    /**\n     * On selection is triggered when the user selects a range of dates on the timeline.\n     * This has the effect of updating the query.select (either remove it or add/replace it)\n     * and it updates the search.\n     * @param selection \n     */\n    onSelectionChange(selection: [Date, Date] | undefined) {\n        this.selection = selection;\n        if(selection) {\n            const from = this.formatDayRequest(selection[0]);\n            const to = this.formatDayRequest(selection[1]);\n\n            const exprs: string[] = [];\n            this.searchService.query.removeSelect(this.name);\n\n            this.timeseries.forEach((config) => {\n                    \n                if((config as TimelineAggregation).aggregation !== undefined \n                || (config as TimelineCombinedAggregations).default !== undefined) {\n\n                    const aggregation = (config as TimelineAggregation).aggregation || (config as TimelineCombinedAggregations).default.aggregation;\n                    const ccaggregation = this.appService.getCCAggregation(aggregation);\n                    if(ccaggregation) {\n                        exprs.push(this.exprBuilder.makeRangeExpr(ccaggregation.column, from, to));\n                    }\n                }\n\n            });\n\n            if(exprs.length > 0) {\n                const expr = this.exprBuilder.concatOrExpr(exprs);\n                this.searchService.query.addSelect(expr, this.name);\n                this.searchService.search(undefined, {type:AuditEventType.Search_Timeline_Usage, detail: { from, to }});\n            }            \n        }\n\n        else if(this.searchService.query.findSelect(this.name)) {\n            this.searchService.query.removeSelect(this.name);\n            this.searchService.search();\n        }\n    }\n\n    /**\n     * On range is triggered when the user zooms in our out on the timeline,\n     * which triggers a dynamic update of the combined aggregation timelines.\n     * @param range \n     */\n    onRangeChange(range: [Date, Date]) {\n\n        this.timeseries.forEach((config, i) => {\n            if((config as TimelineCombinedAggregations).aggregations !== undefined) {\n                this.updateCombinedAggregation(config as TimelineCombinedAggregations, range, this.timeseries$[i]);\n            }\n        });\n\n        // Note: updateCombinedAggregation() compares currentRange and range\n        // So this update must be kept after the forEach\n        this.currentRange = range;        \n    }\n\n    /**\n     * When an event is clicked, the event is propagated to the parent, and the tooltip is closed\n     * @param event \n     * @param closeTooltip \n     */\n    onEventClicked(event: TimelineEvent, closeTooltip: () => void) {\n        this.eventClicked.next(event);\n        closeTooltip();\n        return false;\n    }\n\n\n    // Static utility methods\n    \n    \n    /**\n     * Create a time series object from its config, data (aggregation) and configuration (ccaggregation)\n     * @param config \n     * @param aggregation \n     * @param ccaggregation \n     */\n    static createTimeseries(config: TimelineAggregation, aggregation: Aggregation, ccaggregation: CCAggregation, range?: [Date, Date]): TimelineSeries {\n        return {\n            name: config.name || aggregation.name,\n            primary: config.primary,\n            dates: this.createDatapoints(aggregation.items, ccaggregation?.mask, range),\n            lineStyles: config.lineStyles,\n            areaStyles: config.areaStyles\n        }\n    }\n\n    /**\n     * Create a list of events from its config, data (aggregation) and configuration (ccaggregation)\n     * @param config \n     * @param aggregation \n     * @param ccaggregation \n     */\n    static createAggregationEvents(config: TimelineEventAggregation, aggregation: Aggregation, ccaggregation: CCAggregation): TimelineEvent[] {\n        return !aggregation.items? [] : aggregation.items.map(item => {\n            return {\n                id: config.getDate(item).toUTCString()+\"|\"+config.getDisplay(item),\n                date: config.getDate(item),\n                size: !config.size? 6 : typeof config.size === 'function'? config.size(item) : config.size,\n                styles: !config.styles? undefined :\n                        typeof config.styles === 'function'? config.styles(item) : \n                        config.styles,                \n                display: config.getDisplay(item),\n\n                // Custom params for click action\n                item: item,\n                aggregation: aggregation,\n                ccaggregation: ccaggregation\n            }\n        });\n    }\n\n    /**\n     * This methods transforms a raw list of aggregation items into\n     * a time series completed with zeros, following the below scheme:\n     * Aggregation:  [    # #         # # #   #     # #       # # #    ]\n     * Series:       [  0 # # 0     0 # # # 0 # 0 0 # # 0   0 # # # 0  ]\n     * @param items \n     * @param resolution \n     */\n    static createDatapoints(items: AggregationItem[] | undefined, resolution: string, range?: [Date, Date]): TimelineDate[] {\n\n        if(!items) {\n            return [];\n        }\n\n        const timeInterval = this.getD3TimeInterval(resolution);\n        \n        const series: TimelineDate[] = [];\n\n        const _items = items\n            .map(item => {\n                if(!!item.value && !(item.value instanceof Date)){\n                    const val = item.value.toString();\n                    item.value = moment(val.length  undefined; // So it gets filtered out\n                    }\n                }\n                return item;\n            })\n            .filter(item => !!item.value && (!range || ((item.value as Date) >= range[0] && (item.value as Date)  {\n            const date = item.value as Date;\n            \n            if(i === 0 || timeInterval.offset(series[series.length-1].date, 1)  item.date = this.shiftDate(item.date, resolution));\n\n        return series;\n    }\n\n    \n    /**\n     * Shift the date to the middle of their time bracket (2020 = middle of the year, April = middle of the month, etc.)\n     * @param date \n     * @param resolution \n     */\n    static shiftDate(date: Date, resolution: string): Date {\n        switch(resolution){\n            case \"YYYY-MM-DD\": return d3.timeHour.offset(date, 12);\n            case \"YYYY-WW\": return d3.timeHour.offset(date, 84); // 3*24 + 12\n            case \"YYYY-MM\": return d3.timeDay.offset(date, 15);\n            case \"YYYY\": return d3.timeMonth.offset(date, 6);\n        }\n        return date;\n    }\n\n\n    static getD3TimeInterval(resolution: string): d3.CountableTimeInterval {\n        switch(resolution){\n            case \"YYYY-MM-DD\": return d3.timeDay;\n            case \"YYYY-WW\": return d3.timeWeek;\n            case \"YYYY-MM\": return d3.timeMonth;\n            case \"YYYY\": return d3.timeYear;\n        }\n        return d3.timeDay;\n    }\n\n    static defaultRecordStyle(selected: boolean): {[key: string]: any} {\n        return {\n            'fill': selected? 'red' : 'green',\n            'stroke': selected? 'red' : undefined,\n            'stroke-width': selected? '2px' : undefined\n        };\n    }\n}\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/TimelineCombinedAggregations.html":{"url":"interfaces/TimelineCombinedAggregations.html","title":"interface - TimelineCombinedAggregations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  TimelineCombinedAggregations\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            timeline/bootstrap/facet-timeline.component.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        aggregations\n                                \n                                \n                                            Optional\n                                        current\n                                \n                                \n                                        default\n                                \n                                \n                                        maxNMonths\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        aggregations\n                                    \n                                \n                                \n                                    \n                                        aggregations:         TimelineAggregation[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         TimelineAggregation[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        current\n                                    \n                                \n                                \n                                    \n                                        current:         TimelineAggregation\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         TimelineAggregation\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        default\n                                    \n                                \n                                \n                                    \n                                        default:         TimelineAggregation\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         TimelineAggregation\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        maxNMonths\n                                    \n                                \n                                \n                                    \n                                        maxNMonths:     number[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     number[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Component, Input, OnChanges, ChangeDetectorRef, SimpleChanges, Output, EventEmitter } from '@angular/core';\nimport { Observable, of, combineLatest, ReplaySubject } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { Results, AggregationItem, Aggregation, CCAggregation, Record, AuditWebService, AuditEventType } from '@sinequa/core/web-services';\nimport { AppService, Expr, ExprBuilder } from '@sinequa/core/app-utils';\nimport { Utils } from '@sinequa/core/base';\nimport { AbstractFacet, FacetService } from '@sinequa/components/facet';\nimport { SearchService } from '@sinequa/components/search';\nimport { SelectionService } from '@sinequa/components/selection';\nimport { Action } from '@sinequa/components/action';\nimport { TimelineSeries, TimelineDate, TimelineEvent } from './timeline.component';\nimport moment from 'moment';\nimport * as d3 from 'd3';\n\nexport interface TimelineAggregation {\n    name?: string;\n    aggregation: string;\n    primary: boolean;\n    areaStyles?: {[key: string]: any};\n    lineStyles?: {[key: string]: any};\n}\n\nexport interface TimelineCombinedAggregations {\n    aggregations: TimelineAggregation[];\n    maxNMonths: number[]; // Maximum number of months for which to use this aggregation\n    default: TimelineAggregation; // Aggregation to use by default \n    current?: TimelineAggregation; // (this field is overriden by the component when switching aggregation)\n}\n\nexport interface TimelineRecords {\n    field: string;\n    size?: number | ((record: Record, selected: boolean) => number);\n    styles?: {[key: string]: any} | ((record: Record, selected: boolean) => {[key: string]: any});\n    display?: (record: Record) => string;\n}\n\nexport interface TimelineEventAggregation {\n    aggregation: string;\n    getDate: ((item: AggregationItem) => Date);\n    getDisplay: ((item: AggregationItem) => string);\n    size?: number | ((item: AggregationItem) => number);\n    styles?: {[key: string]: any} | ((item: AggregationItem) => {[key: string]: any});\n}\n\nexport type TimelineData = TimelineSeries | TimelineAggregation | TimelineCombinedAggregations;\n\nexport type TimelineEventData = TimelineEvent[] | TimelineRecords | TimelineEventAggregation;\n\n@Component({\n    selector: 'sq-facet-timeline',\n    templateUrl: './facet-timeline.component.html',\n    styleUrls: ['./facet-timeline.component.scss']\n})\nexport class BsFacetTimelineComponent extends AbstractFacet implements OnChanges {\n    @Input() name = 'Timeline';\n    @Input() results: Results;\n    \n    // By default, we show the standard Timeline aggregation and the list of current records\n    @Input() timeseries: TimelineData[] = [{aggregation: 'Timeline', primary: true}];\n    @Input() events: TimelineEventData[] = [{field: 'modified'}];\n\n    // Initial scale (prior to any zoom)\n    @Input() minDate?: Date;\n    @Input() maxDate?: Date;\n    // Date range to filter aggregations (ignored when combined aggregations are recomputed based on zoomed range)\n    @Input() minAggregationDate?: Date;\n    @Input() maxAggregationDate?: Date;\n    \n    @Input() zoomable = true;\n    @Input() minZoomDays = 1; // Max 1 day scale\n    @Input() maxZoomDays = 365 * 100; // Max 100 years scale\n\n    @Input() width = 600;\n    @Input() height = 200;\n    @Input() margin = {top: 15, bottom: 30, left: 40, right: 15};\n\n    @Input() curveType = \"curveMonotoneX\";\n\n    @Input() showTooltip = true;\n    @Input() theme: \"light\" | \"dark\" = \"light\";\n\n    @Output() eventClicked = new EventEmitter();\n\n    // List of observables (one per timeseries / event type)\n    timeseries$: ReplaySubject[];\n    events$: ReplaySubject[];\n\n    // Combination (combineLastest) of the timeline observables\n    mergedTimeseries$: Observable;\n    mergedEvents$: Observable;\n\n    // Current timeline selection\n    selection?: [Date, Date];\n\n    // Current range (undefined if no zoom / auto-scaling)\n    currentRange?: [Date, Date];\n\n    // Formating method for search queries\n    formatDayRequest = d3.timeFormat(\"%Y-%m-%d\");\n\n    // Actions\n    clearFilters: Action;\n\n    constructor(\n        public facetService: FacetService,\n        public searchService: SearchService,\n        public appService: AppService,\n        public selectionService: SelectionService,\n        public exprBuilder: ExprBuilder,\n        public cdRef: ChangeDetectorRef,\n        public audit: AuditWebService\n    ){\n        super();\n\n        // Update the events when the selection of records changes\n        this.selectionService.events.subscribe(event => {\n            const i = this.events.findIndex(e => (e as TimelineRecords).field);\n            if(i !== -1) {\n                this.events$[i].next(this.getRecordsAsEvents(this.events[i] as TimelineRecords));\n            }\n        });\n        \n        // Clear the current filters\n        this.clearFilters = new Action({\n            icon: \"far fa-minus-square\",\n            title: \"msg#facet.clearSelects\",\n            action: () => {\n                this.selection = undefined;\n                this.searchService.query.removeSelect(this.name);\n                this.searchService.search();\n            }\n        });\n\n    }\n\n    getMinDate(): Date | undefined {\n        return this.currentRange? this.currentRange[0] : this.minDate;\n    }\n\n    getMaxDate(): Date | undefined {\n        return this.currentRange? this.currentRange[1] : this.maxDate;\n    }\n\n    get actions(): Action[] {\n        const actions: Action[] = [];\n        if(this.facetService.hasFiltered(this.name)){\n            actions.push(this.clearFilters);\n        }\n        return actions;\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n\n        // Retrieve the current active selection for this timeline (if any)\n        const select = this.searchService.query.findSelect(this.name);\n\n        // Update the selection if it is not already set (which is the case on a page refresh)\n        if(select && !this.selection) {\n            let parsedexpr = this.appService.parseExpr(select.expression) as Expr;\n            if(!Utils.isString(parsedexpr)){\n                while(!parsedexpr.isLeaf){ // The select might over multiple fields (modified between [...] AND created between [...])\n                    parsedexpr = parsedexpr.operands[0];\n                }\n                if(parsedexpr.values){\n                    this.selection = [new Date(parsedexpr.values[0]), new Date(parsedexpr.values[1])];\n                }\n            }\n        }\n        // If no active selection we remove the selection from the timeline, along with the current zoomed range\n        else if(!select) {\n            this.selection = undefined; // If no select, it was possibly removed by the user, we need to update our selection\n            this.currentRange = undefined; // current range is set by zoom events, we want to reset it only if there are no select (ie. no user interaction)\n        }\n\n        // Initialize timeseries\n        if(!this.timeseries$ || changes[\"timeseries\"]) {\n            // Create one observable per timeline\n            this.timeseries$ = this.timeseries.map(_ => new ReplaySubject(1));\n            this.mergedTimeseries$ = combineLatest(this.timeseries$);\n        }\n\n        this.updateTimeseries();\n\n        // Initialize events\n        if(!this.events$ || changes[\"events\"]) {\n            this.events$ = this.events.map(_ => new ReplaySubject(1));\n            this.mergedEvents$ = combineLatest(this.events$).pipe(\n                map(events => ([] as TimelineEvent[]).concat(...events))\n            );\n        }\n\n        this.updateEvents();\n        \n    }\n\n    /**\n     * For each timeseries configuration given as an input,\n     * update the data via the list of observables (timelines$)\n     */\n    updateTimeseries() {\n        this.timeseries.forEach((config, i) => {\n\n            const subject = this.timeseries$[i];\n\n            if((config as TimelineSeries).dates !== undefined) {\n                subject.next(config as TimelineSeries);\n            }\n\n            else {\n                let agg = config as TimelineAggregation;\n                if(agg.aggregation === undefined){\n                    \n                    config = config as TimelineCombinedAggregations;\n                    // We want to set the default scale if it hasn't been set before\n                    // or if no zoom/selection has been made (so current scale may not be adapted to the new results)\n                    if(!this.currentRange || !config.current){\n                        config.current = config.default;\n                    }\n\n                    agg = config.current;\n                }\n                \n                const range: [Date, Date] | undefined = !!this.minAggregationDate && !!this.maxAggregationDate ?\n                    [this.minAggregationDate, this.maxAggregationDate] : undefined;\n\n                this.getTimeseries(agg, range).subscribe({\n                    next: d => subject.next(d),\n                    error: err => subject.error(err)\n                });\n            }\n\n        });\n    }\n\n    /**\n     * For each event configuration given as an input, \n     * update the data via the list of observables (events$)\n     */\n    updateEvents() {\n        this.events.forEach((config, i) => {\n            const subject = this.events$[i];\n\n            if((config as TimelineRecords).field) {\n                subject.next(this.getRecordsAsEvents(config as TimelineRecords));\n            }\n            else if((config as TimelineEventAggregation).aggregation){\n                this.getEventAggregation(config as TimelineEventAggregation).subscribe({\n                    next: t => subject.next(t),\n                    error: err => subject.error(err)\n                });\n            }\n            else if(Array.isArray(config)){\n                subject.next(config as TimelineEvent[]);\n            }\n        });\n    }\n\n    /**\n     * Get a timeseries aggregation via the getAggregation method.\n     * @param config \n     * @param subject \n     * @param range \n     */\n    getTimeseries(config: TimelineAggregation, range?: [Date, Date]): Observable {\n        return this.getAggregation(config.aggregation, range).pipe(\n            map(d => BsFacetTimelineComponent.createTimeseries(config, d.aggregation, d.ccaggregation, range))\n        );\n    }\n\n    /**\n     * Get an aggregation of events via the getAggregation method\n     * @param config \n     * @param subject \n     */\n    getEventAggregation(config: TimelineEventAggregation): Observable {\n        return this.getAggregation(config.aggregation).pipe(\n            map(d => BsFacetTimelineComponent.createAggregationEvents(config, d.aggregation, d.ccaggregation))\n        );\n    }\n\n    /**\n     * Returns the list of records from the results as a list of TimelineEvent when they have a\n     * modified date. The size and styles of the events are determined from the given configuration (TimelineRecords)\n     * @param config \n     */\n    getRecordsAsEvents(config: TimelineRecords): TimelineEvent[] {\n        if(this.results) {\n            return this.results.records\n                .filter(r => !!Utils.toDate(r[config.field]))\n                .map(r => {\n                    return {\n                        id: r.id,\n                        date: Utils.toDate(r[config.field])!,\n                        size: !config.size? 6 : typeof config.size === 'function'? config.size(r, r.$selected) : config.size,\n                        styles: !config.styles? BsFacetTimelineComponent.defaultRecordStyle(r.$selected) :\n                                typeof config.styles === 'function'? config.styles(r, r.$selected) : \n                                config.styles,\n                        display: config.display? config.display(r) : r.title,\n                        // Custom property for click action\n                        record: r\n                    }\n                });\n        }\n        return [];\n    }\n\n\n    /**\n     * returns an aggregation and its configuration either directly from the facet service of\n     * by fetching it from the server.\n     * @param aggregationName \n     * @param range \n     */\n    getAggregation(aggregationName: string, range?: [Date, Date]): Observable {\n        \n        const ccaggregation = this.appService.getCCAggregation(aggregationName);\n        const aggregation = this.facetService.getAggregation(aggregationName, this.results);\n        \n        if(aggregation && ccaggregation) {\n            return of({aggregation: aggregation, ccaggregation: ccaggregation});\n        }\n\n        else if(ccaggregation) {\n            return this.fetchAggregation(aggregationName, ccaggregation, range).pipe(\n                map(agg => {return {aggregation: agg, ccaggregation: ccaggregation} })\n            );\n        }\n\n        else {\n            throw new Error(`Aggregation ${aggregationName} does not exist in the Query web service`);\n        }\n    }\n\n    /**\n     * Get an aggregation from the server, filtering by range if provided\n     * @param aggregation \n     * @param ccaggregation \n     * @param range \n     */\n    fetchAggregation(aggregation: string, ccaggregation: CCAggregation, range?: [Date, Date]): Observable {\n        const query = Utils.copy(this.searchService.query);\n        query.action = \"aggregate\";\n        query.aggregations = [aggregation];\n\n        if(range){\n            query.addSelect(`${ccaggregation.column}:[${this.formatDayRequest(range[0])}..${this.formatDayRequest(range[1])}]`);\n        }\n\n        return this.searchService.getResults(query, undefined, {searchInactive: true}).pipe(\n            map(results => results.aggregations[0])\n        );\n    }\n\n    /**\n     * Given a combined aggregation configuration and a range, this method searches for the most \n     * adapted aggregation scale (years, months, weeks or days) and updates the data if necessary.\n     * @param config \n     * @param range \n     * @param iTimeseries \n     */\n    updateCombinedAggregation(config: TimelineCombinedAggregations, range: [Date, Date], timeseries$: ReplaySubject) {\n        const nmonths = d3.timeMonth.count(range[0], range[1]);\n\n        if(!config.maxNMonths || config.maxNMonths.length !== config.aggregations.length) {\n            console.error(config);\n            throw new Error(\"maxNMonths and aggregations must have the same number of items\");\n        }\n\n        // Find the aggregation with min maxNMonths with maxNMonths >= nmonths\n        let jMin;\n        config.maxNMonths.forEach((maxNMonths, j) => {\n            if(maxNMonths >= nmonths && (jMin === undefined || maxNMonths  this.currentRange[1])) {\n\n            config.current = bestAggregation;\n            this.getTimeseries(bestAggregation, range).subscribe({\n                next: d => timeseries$.next(d),\n                error: err => timeseries$.error(err)\n            });\n        }\n\n    }\n\n\n    // Interaction callbacks\n\n    /**\n     * On selection is triggered when the user selects a range of dates on the timeline.\n     * This has the effect of updating the query.select (either remove it or add/replace it)\n     * and it updates the search.\n     * @param selection \n     */\n    onSelectionChange(selection: [Date, Date] | undefined) {\n        this.selection = selection;\n        if(selection) {\n            const from = this.formatDayRequest(selection[0]);\n            const to = this.formatDayRequest(selection[1]);\n\n            const exprs: string[] = [];\n            this.searchService.query.removeSelect(this.name);\n\n            this.timeseries.forEach((config) => {\n                    \n                if((config as TimelineAggregation).aggregation !== undefined \n                || (config as TimelineCombinedAggregations).default !== undefined) {\n\n                    const aggregation = (config as TimelineAggregation).aggregation || (config as TimelineCombinedAggregations).default.aggregation;\n                    const ccaggregation = this.appService.getCCAggregation(aggregation);\n                    if(ccaggregation) {\n                        exprs.push(this.exprBuilder.makeRangeExpr(ccaggregation.column, from, to));\n                    }\n                }\n\n            });\n\n            if(exprs.length > 0) {\n                const expr = this.exprBuilder.concatOrExpr(exprs);\n                this.searchService.query.addSelect(expr, this.name);\n                this.searchService.search(undefined, {type:AuditEventType.Search_Timeline_Usage, detail: { from, to }});\n            }            \n        }\n\n        else if(this.searchService.query.findSelect(this.name)) {\n            this.searchService.query.removeSelect(this.name);\n            this.searchService.search();\n        }\n    }\n\n    /**\n     * On range is triggered when the user zooms in our out on the timeline,\n     * which triggers a dynamic update of the combined aggregation timelines.\n     * @param range \n     */\n    onRangeChange(range: [Date, Date]) {\n\n        this.timeseries.forEach((config, i) => {\n            if((config as TimelineCombinedAggregations).aggregations !== undefined) {\n                this.updateCombinedAggregation(config as TimelineCombinedAggregations, range, this.timeseries$[i]);\n            }\n        });\n\n        // Note: updateCombinedAggregation() compares currentRange and range\n        // So this update must be kept after the forEach\n        this.currentRange = range;        \n    }\n\n    /**\n     * When an event is clicked, the event is propagated to the parent, and the tooltip is closed\n     * @param event \n     * @param closeTooltip \n     */\n    onEventClicked(event: TimelineEvent, closeTooltip: () => void) {\n        this.eventClicked.next(event);\n        closeTooltip();\n        return false;\n    }\n\n\n    // Static utility methods\n    \n    \n    /**\n     * Create a time series object from its config, data (aggregation) and configuration (ccaggregation)\n     * @param config \n     * @param aggregation \n     * @param ccaggregation \n     */\n    static createTimeseries(config: TimelineAggregation, aggregation: Aggregation, ccaggregation: CCAggregation, range?: [Date, Date]): TimelineSeries {\n        return {\n            name: config.name || aggregation.name,\n            primary: config.primary,\n            dates: this.createDatapoints(aggregation.items, ccaggregation?.mask, range),\n            lineStyles: config.lineStyles,\n            areaStyles: config.areaStyles\n        }\n    }\n\n    /**\n     * Create a list of events from its config, data (aggregation) and configuration (ccaggregation)\n     * @param config \n     * @param aggregation \n     * @param ccaggregation \n     */\n    static createAggregationEvents(config: TimelineEventAggregation, aggregation: Aggregation, ccaggregation: CCAggregation): TimelineEvent[] {\n        return !aggregation.items? [] : aggregation.items.map(item => {\n            return {\n                id: config.getDate(item).toUTCString()+\"|\"+config.getDisplay(item),\n                date: config.getDate(item),\n                size: !config.size? 6 : typeof config.size === 'function'? config.size(item) : config.size,\n                styles: !config.styles? undefined :\n                        typeof config.styles === 'function'? config.styles(item) : \n                        config.styles,                \n                display: config.getDisplay(item),\n\n                // Custom params for click action\n                item: item,\n                aggregation: aggregation,\n                ccaggregation: ccaggregation\n            }\n        });\n    }\n\n    /**\n     * This methods transforms a raw list of aggregation items into\n     * a time series completed with zeros, following the below scheme:\n     * Aggregation:  [    # #         # # #   #     # #       # # #    ]\n     * Series:       [  0 # # 0     0 # # # 0 # 0 0 # # 0   0 # # # 0  ]\n     * @param items \n     * @param resolution \n     */\n    static createDatapoints(items: AggregationItem[] | undefined, resolution: string, range?: [Date, Date]): TimelineDate[] {\n\n        if(!items) {\n            return [];\n        }\n\n        const timeInterval = this.getD3TimeInterval(resolution);\n        \n        const series: TimelineDate[] = [];\n\n        const _items = items\n            .map(item => {\n                if(!!item.value && !(item.value instanceof Date)){\n                    const val = item.value.toString();\n                    item.value = moment(val.length  undefined; // So it gets filtered out\n                    }\n                }\n                return item;\n            })\n            .filter(item => !!item.value && (!range || ((item.value as Date) >= range[0] && (item.value as Date)  {\n            const date = item.value as Date;\n            \n            if(i === 0 || timeInterval.offset(series[series.length-1].date, 1)  item.date = this.shiftDate(item.date, resolution));\n\n        return series;\n    }\n\n    \n    /**\n     * Shift the date to the middle of their time bracket (2020 = middle of the year, April = middle of the month, etc.)\n     * @param date \n     * @param resolution \n     */\n    static shiftDate(date: Date, resolution: string): Date {\n        switch(resolution){\n            case \"YYYY-MM-DD\": return d3.timeHour.offset(date, 12);\n            case \"YYYY-WW\": return d3.timeHour.offset(date, 84); // 3*24 + 12\n            case \"YYYY-MM\": return d3.timeDay.offset(date, 15);\n            case \"YYYY\": return d3.timeMonth.offset(date, 6);\n        }\n        return date;\n    }\n\n\n    static getD3TimeInterval(resolution: string): d3.CountableTimeInterval {\n        switch(resolution){\n            case \"YYYY-MM-DD\": return d3.timeDay;\n            case \"YYYY-WW\": return d3.timeWeek;\n            case \"YYYY-MM\": return d3.timeMonth;\n            case \"YYYY\": return d3.timeYear;\n        }\n        return d3.timeDay;\n    }\n\n    static defaultRecordStyle(selected: boolean): {[key: string]: any} {\n        return {\n            'fill': selected? 'red' : 'green',\n            'stroke': selected? 'red' : undefined,\n            'stroke-width': selected? '2px' : undefined\n        };\n    }\n}\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/TimelineDate.html":{"url":"interfaces/TimelineDate.html","title":"interface - TimelineDate","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  TimelineDate\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            timeline/bootstrap/timeline.component.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        date\n                                \n                                \n                                        value\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        date\n                                    \n                                \n                                \n                                    \n                                        date:         Date\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Date\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        value\n                                    \n                                \n                                \n                                    \n                                        value:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Component, Input, Output, ElementRef, ViewChild, OnChanges, AfterViewInit, EventEmitter, SimpleChanges, OnDestroy, SimpleChange, ContentChild, TemplateRef, ChangeDetectorRef } from '@angular/core';\nimport { Subscription } from 'rxjs';\nimport * as d3 from 'd3';\n\nimport { IntlService } from '@sinequa/core/intl';\nimport {Record} from '@sinequa/core/web-services';\n\n\nexport interface TimelineDate {\n    date: Date;\n    value: number;\n}\n\nexport interface TimelineSeries {\n    name: string;\n    dates: TimelineDate[];\n    primary: boolean;\n    lineStyles?: {[key:string]: any};\n    areaStyles?:  {[key:string]: any};\n}\n\nexport interface TimelineEvent {\n    date: Date;\n    id: string;\n    display: string;\n    size?: number;\n    sizeOpened?: number;\n    styles?: {[key:string]: any};\n    record?: Record;\n}\n\n@Component({\n    selector: 'sq-timeline',\n    templateUrl: './timeline.component.html',\n    styleUrls: ['./timeline.component.scss']\n})\nexport class BsTimelineComponent implements OnChanges, AfterViewInit, OnDestroy {\n\n    @Input() data?: TimelineSeries[];\n    @Input() events?: TimelineEvent[];\n\n    @Input() selection?: [Date, Date];\n\n    // Initial scale (prior to any zoom)\n    @Input() minDate?: Date;\n    @Input() maxDate?: Date;\n\n    @Input() zoomable = true;\n    @Input() minZoomDays = 1; // Max 1 day scale\n    @Input() maxZoomDays = 365 * 100; // Max 100 years scale\n\n    @Input() width = 600;\n    @Input() height = 200;\n    @Input() margin = {top: 15, bottom: 30, left: 40, right: 15};\n\n    @Input() curveType = \"curveMonotoneX\";\n\n    @Input() showTooltip = true;\n    @Input() theme: \"light\" | \"dark\" = \"light\";\n\n    @Output() selectionChange = new EventEmitter();\n    @Output() rangeChange = new EventEmitter();\n\n    @ContentChild(\"tooltipTpl\", {static: false}) tooltipTpl: TemplateRef;\n\n    // Data\n    groupedEvents: TimelineEvent[][] = [];\n\n    // Scales\n    x: d3.ScaleTime; // Read/Write\n    xt: d3.ScaleTime; // Transformed X axis due to Zoom\n    y: d3.ScaleLinear; // Read-only / domain updated\n\n    // Shapes\n    area: d3.Area; // Read only\n    line: d3.Line; // Read only\n\n    // Behaviors\n    brushBehavior: d3.BrushBehavior; // Read only\n    zoomBehavior: d3.ZoomBehavior; // Read/Write\n    brushSelection: [number, number] | null;\n    currentSelection?: Date[]; // Read/Write\n\n    // Elements\n    @ViewChild(\"xAxis\") gx: ElementRef;\n    @ViewChild(\"yAxis\") gy: ElementRef;\n    @ViewChild(\"brush\") gbrush: ElementRef;\n    \n    // Selections\n    xAxis$: d3.Selection;\n    yAxis$: d3.Selection;\n    brush$: d3.Selection;\n    grips$: d3.Selection;\n        \n    // Tooltip\n    tooltipItem: TimelineEvent[] | undefined;\n    tooltipX: number | undefined;\n    tooltipOrientation: \"left\" | \"right\";\n    tooltipTop: number;\n    tooltipRight: number;\n    tooltipLeft: number;\n\n    // Misc\n    viewInit: boolean;\n    intlSubscription: Subscription;\n    static counter = 0;\n    instance: number;\n    \n    zooming: boolean;\n    brushing: boolean;\n\n    constructor(\n        protected el: ElementRef,\n        protected intlService: IntlService,\n        protected cdRef: ChangeDetectorRef\n    ){\n        // When the locale changes, we rebuild the X scale and axis\n        this.intlSubscription = this.intlService.events.subscribe(e => this.updateXAxis());\n        \n        this.instance = BsTimelineComponent.counter++;\n        \n    }\n\n    get innerWidth(): number {\n        return this.width - this.margin.left - this.margin.right;\n    }\n\n    get innerHeight(): number {\n        return this.height - this.margin.top - this.margin.bottom;\n    }\n\n    // Note: ngOnChanges is always called once before ngAfterViewInit\n    ngOnChanges(changes: SimpleChanges) {\n\n        if(!this.x) {\n            \n            // Scales\n            this.x = d3.scaleUtc()\n                .range([0, this.innerWidth]);\n            this.xt = this.x;\n\n            this.y = d3.scaleLinear()\n                .range([this.innerHeight, 0]);\n                \n            // Shapes\n            this.area = d3.area()\n                .curve(d3[this.curveType])\n                .x(d => this.xt(d.date))\n                .y0(this.y(0))\n                .y1(d => this.y(d.value));\n                \n            this.line = d3.line()\n                .curve(d3[this.curveType])\n                .x(d => this.xt(d.date))\n                .y(d => this.y(d.value));\n                \n            // Behaviors\n            this.brushBehavior = d3.brushX()\n                .extent([[0, 0], [this.innerWidth, this.innerHeight]])\n                .on(\"start\", () => this.brushing = true)\n                .on('brush', () => this.onBrush())\n                .on('end', () => this.onBrushEnd());\n        }\n\n        // Resize handling\n\n        if(changes[\"height\"]) {\n            this.y.range([this.innerHeight, 0]);\n            this.area.y0(this.y(0));\n            this.brushBehavior.extent([[0, 0], [this.innerWidth, this.innerHeight]]);\n            if(this.viewInit) {\n                this.drawYAxis();\n                this.brush$.call(this.brushBehavior);\n                this.grips$.selectAll(\"path\").attr(\"d\", this.drawGrips);\n            }\n        }\n\n        if(changes[\"width\"]) {\n            this.x.range([0, this.innerWidth]);\n            this.brushBehavior.extent([[0, 0], [this.innerWidth, this.innerHeight]]);\n            if(this.viewInit) {\n                this.drawXAxis();\n                if(!changes[\"height\"]) {\n                    this.brush$.call(this.brushBehavior);\n                    this.grips$.selectAll(\"path\").attr(\"d\", this.drawGrips);\n                }\n            }\n        }\n\n        // If the parent changes the selection, we want to update it\n        // If not, we keep the current selection as is\n        // (Important to keep this statement outside of the if bellow since \n        // the change of selection can be combined with a change of data)\n        const selectionChanged = changes[\"selection\"] && this.updateSelection();\n\n        // Only changes in data result in redrawing the chart\n        // (other input, except selection, are expected to be static)\n        if(this.viewInit && changes[\"data\"] && this.checkDataChanges(changes[\"data\"])){\n            this.updateChart();\n        }\n\n        // If the parent changes the selection (even though the data hasn't changed), \n        // we want to update the brush.\n        // If not, we keep the current selection as is.\n        // We can update the brush only if the view is initialized (viewInit).\n        else if(this.viewInit && ((changes[\"selection\"] && selectionChanged) || changes[\"width\"])) {\n            this.updateBrush();\n        }\n\n        if(changes[\"events\"]) {\n            this.updateEvents();\n        }\n        \n    }\n\n    // Note: In onAfterViewInit we can access gx, gy, etc., obtained with @ViewChild.\n    // At this point we can initialize all the primitives and call updateChart()\n    ngAfterViewInit() {\n\n        // Get native elements\n        this.xAxis$ = d3.select(this.gx.nativeElement);\n        this.yAxis$ = d3.select(this.gy.nativeElement);\n        this.brush$ = d3.select(this.gbrush.nativeElement);\n\n        this.brush$\n            .call(this.brushBehavior)\n            .on(\"mousemove\", () => this.onMousemove())\n            .on(\"mouseout\", () => this.onMouseout());\n                        \n        // Add 2 \"grips\" to the brush goup, on each side of the rectangle\n        // Grips are inserted programmatically to appear on top the brush selection\n        this.grips$ = this.brush$.selectAll(\".grip\")\n            .data([{type: \"w\"}, {type: \"e\"}])\n            .enter()\n            .append(\"g\")\n            .attr(\"class\", \"grip\")\n            .attr(\"display\", \"none\");\n            \n        this.grips$.append(\"path\")\n            .attr(\"d\", this.drawGrips);\n\n        this.grips$.append(\"text\")\n            .attr(\"class\", \"grip-text\")\n            .attr(\"text-anchor\", d => d.type === \"w\"? 'end' : 'start')\n            .attr(\"x\", d => d.type === \"w\"? -5 : 5)\n            .attr(\"y\", 10);\n\n        this.viewInit = true;\n\n        this.updateChart();\n\n        // This is necessary to prevent \"Expression has changed after check\" errors\n        // caused by calling updateChart inside ngAfterViewInit().\n        // Unfortunately this is necessary because we need the DOM to be rendered in order fill the DOM\n        // (for example gAxis needs to exist so we can draw the axis)\n        this.cdRef.detectChanges();\n    }\n\n    /**\n     * Redraw the graph (needs to be called after ngAfterViewInit so that the DOM elements\n     * are accessible)\n     */\n    updateChart() {\n\n        this.turnoffTooltip();\n\n        if(this.data && this.data.length) {\n\n            // Update scales\n            // Note: does not stop the update process even if the data is invalid/empty\n            this.updateScales(this.data);\n\n            // Update Axes\n            this.updateAxes();\n            \n            // Update Zoom\n            this.updateZoom();\n\n            // Update brush\n            this.updateBrush();\n\n        }\n        \n    }\n\n\n    /**\n     * Update the x & y scales, based on the input data\n     * @param data \n     */\n    protected updateScales(data: TimelineSeries[]) {\n\n        // Set x and y scales with the primary series (or first one)\n        const primarySeries = data.filter(s => s.primary) || [data[0]];\n        const allPrimaryDates = ([] as TimelineDate[]).concat(...primarySeries.map(s => s.dates));\n\n        const xExtent = d3.extent(allPrimaryDates, d => d.date);\n        const yMax = d3.max(data, \n            s => d3.max(s.dates, d => d.value));\n\n        if(!xExtent[0] || !xExtent[1] || !yMax) {\n            if (allPrimaryDates.length !== 0) {\n                console.error('Invalid timeseries', primarySeries);\n            }\n            this.x.domain(this.xt.domain());\n            this.xt = this.x;\n            return;\n        }\n\n        if(this.minDate) {\n            xExtent[0] = this.minDate;\n        }\n\n        if(this.maxDate) {\n            xExtent[1] = this.maxDate;\n        }\n\n        this.x.domain(xExtent);\n        this.xt = this.x;\n        this.y.domain([0, yMax*1.1]);\n    }\n\n    /**\n     * Update the x and y axes\n     */\n    protected updateAxes(){\n        this.drawXAxis();\n        this.drawYAxis();\n    }\n\n    /**\n     * The events are drawn in the template directly. This method simply\n     * updates the grouping of events (when they are close to each other)\n     */\n    protected updateEvents() {\n        this.groupedEvents = this.groupEvents(5);\n    }\n\n    /**\n     * Update/reset the zoom behavior when new data comes in (and new scales, axes...)\n     */\n    protected updateZoom() {\n        \n        if(!this.zoomable) {\n            return;\n        }\n\n        // Reset the previous zoom !\n        if(this.zoomBehavior){\n            this.zoomBehavior.on(\"zoom\", null);\n            this.zoomBehavior.on(\"end\", null);\n            this.zoomBehavior.transform(this.brush$, d3.zoomIdentity);\n        }\n        \n        // Compute the minimum and maximum zoom\n        const xDomain = this.x.domain();\n        const scaleExtent = (xDomain[1].getTime() - xDomain[0].getTime()) / 86400000; // current number of days on the scale\n\n        // Create the behavior\n        this.zoomBehavior = d3.zoom()\n            .extent([[0, 0], [this.innerWidth, this.innerHeight]])\n            .scaleExtent([scaleExtent/this.maxZoomDays, scaleExtent/this.minZoomDays])\n            .on(\"zoom\", () => this.onZoom())\n            .on(\"end\", () => this.onZoomEnd());\n        \n        // Apply on to the brush element\n        this.brush$\n            .call(this.zoomBehavior)\n            .on(\"mousedown.zoom\", null) // Deactivate mouse event (taken by brush)\n            .on(\"touchstart.zoom\", null)\n            .on(\"touchmove.zoom\", null)\n            .on(\"touchend.zoom\", null);\n        \n    }\n\n    /**\n     * Updates the brush (or hides it if no currentSelection),\n     * following a change of x scale.\n     */\n    protected updateBrush() {\n        if(this.currentSelection) {\n            const selection: [number, number] = [this.xt(this.currentSelection[0]), this.xt(this.currentSelection[1])];\n            this.brush$.call(this.brushBehavior.move, selection);\n        }\n        else {\n            this.brush$.call(this.brushBehavior.move, null);\n        }\n    }\n\n    /**\n     * This method tests whether the input selection is different from the currentSelection\n     * and updates it. It returns true if there is actually a change.\n     */\n    protected updateSelection(): boolean {\n        const change = this.checkSelectionChange(this.selection, this.currentSelection);\n        this.currentSelection = this.selection;\n        return change;\n    }\n\n    /**\n     * Recreate the x scale and axes (in the event of a language change)\n     */\n    protected updateXAxis(){        \n        this.x = d3.scaleUtc()\n            .domain(this.x.domain())\n            .range(this.x.range());\n        \n        this.xt = d3.scaleUtc()\n            .domain(this.xt.domain())\n            .range(this.xt.range());\n\n        this.drawXAxis();\n    }\n\n    /**\n     * Draws the X axis\n     */\n    protected drawXAxis() {        \n        this.xAxis$.call(d3.axisBottom(this.xt));\n        this.xAxis$.selectAll(\".domain\").remove(); // Remove the axis line\n    }\n\n    /**\n     * Draws the Y axis\n     */\n    protected drawYAxis() {\n        const yAxisTicks = this.y.ticks()\n            .filter(tick => Number.isInteger(tick)); // Keep only integer ticks https://stackoverflow.com/questions/13576906/d3-tick-marks-on-integers-only/56821215\n\n        const yAxis = d3.axisLeft(this.y)\n            .tickValues(yAxisTicks)\n            .tickFormat(d3.format(\"~s\")); //https://github.com/d3/d3-format\n        this.yAxis$.call(yAxis);\n        this.yAxis$.selectAll(\".domain\").remove(); // Remove the axis line\n    }\n    \n    /**\n     * Updates the display of the brush's grips when the brush has moved\n     * @param selection \n     */\n    protected updateGrips(selection: [number, number] | null) {\n        if (!selection) {\n            this.grips$.attr(\"display\", \"none\");\n        }\n        else {\n            this.grips$\n                .attr(\"display\", null)\n                .attr(\"transform\", (d, i) => \"translate(\" + selection[i] + \")\");\n            this.grips$.selectAll('.grip-text')\n                .text(d => this.intlService.formatDate(this.xt.invert(selection[d.type === 'w'? 0 : 1])));\n        }\n    }\n\n\n    // Interaction callbacks\n\n    onBrush() {\n        this.turnoffTooltip();\n        this.brushSelection = d3.brushSelection(this.gbrush.nativeElement) as [number, number] | null;\n        this.updateGrips(this.brushSelection);\n    }\n\n    onBrushEnd(){\n        this.brushing = false;\n        this.onBrush();\n        const newSelection = this.brushSelection?.sort((a,b)=>a-b).map(this.xt.invert);\n        if(this.checkSelectionChange(this.currentSelection, newSelection)) {\n            this.currentSelection = newSelection;\n            this.selectionChange.next(this.currentSelection);\n        }\n    }    \n\n    onZoom(){\n\n        this.turnoffTooltip();\n\n        this.zooming = true;\n\n        // Create a transformed scale without modifying the original (to enforce the limit of scaleExtent)\n        const transform = d3.zoomTransform(this.brush$.node() as Element);\n        this.xt = transform.rescaleX(this.x);\n\n        // Redraw the axis\n        this.drawXAxis();\n            \n        // Update the brush position\n        if(this.currentSelection){\n            const selection: [number, number] = [this.xt(this.currentSelection[0]), this.xt(this.currentSelection[1])];\n            this.brushBehavior.move(this.brush$, selection);\n        }\n\n    }\n\n    onZoomEnd(){\n        this.zooming = false;\n\n        // At the end of a zoom, we need to reorganize the grouping of events\n        this.updateEvents();\n\n        // Fire an event\n        this.rangeChange.next(this.xt.domain());\n    }\n\n    /**\n     * Redraw the simple tooltip (vertical line)\n     */\n    onMousemove() {\n        if(!this.tooltipItem && this.showTooltip) {\n            this.tooltipX = d3.mouse(this.gbrush.nativeElement)[0];\n        }\n    }\n\n    /**\n     * Remove the simple tooltip (vertical line)\n     */\n    onMouseout() {\n        if(!this.tooltipItem) {\n            this.tooltipX = undefined\n        }\n    }\n\n    /**\n     * Responds to a click on an event (triangle) by essentially turning tooltip on/off\n     * @param event \n     */\n    onEventClick(event: TimelineEvent[]) {\n\n        if(this.tooltipItem === event) {\n            this.turnoffTooltip();\n        }\n\n        else {\n\n            if(this.tooltipItem) {\n                this.turnoffTooltip();\n            }\n\n            this.tooltipItem = event;\n            this.tooltipX = this.xt(event[0].date);\n\n            // Since we use viewBox to auto-adjust the SVG to the container size, we have to\n            // convert from the SVG coordinate system to the HTML coordinate system\n            const x = this.margin.left + this.tooltipX;\n            const actualWidth = (this.el.nativeElement as HTMLElement).offsetWidth;\n            const scale = actualWidth / this.width;\n            const relativeX = x / this.width;\n\n            // Tooltip to the right\n            if(relativeX  {\n        if(this.tooltipItem) {\n            this.tooltipItem = undefined;\n            this.tooltipX = undefined;\n        }\n    }\n\n    ngOnDestroy(){\n        this.intlSubscription.unsubscribe();\n    }\n\n    // Utilities\n\n    /**\n     * Transforms the input list of events into a list of list, by grouping events within a bin\n     * when their dates are close together. This closeness is measured in \"pixel per event\".\n     * Note: this currently uses a histogram-like algorithm, which could probably be improved (clustering?)\n     * @param pixPerEvent \n     */\n    protected groupEvents(pixPerEvent: number): TimelineEvent[][] {\n        const events: TimelineEvent[][] = [];\n\n        if(this.events) {\n            const nbins = Math.floor(this.innerWidth / pixPerEvent);\n            const domain = this.xt.domain();\n            const timeinterval = (domain[1].getTime() - domain[0].getTime()) / nbins;\n            this.events.concat()\n                .sort((a,b) => a.date.getTime() - b.date.getTime())\n                .forEach(event => {\n                    if(events.length === 0) {\n                        events.push([event]);\n                    }\n                    else {\n                        const last = events[events.length-1];\n                        const lastbin = Math.floor(last[0].date.getTime() / timeinterval);\n                        const bin = Math.floor(event.date.getTime() / timeinterval);\n                        if(bin === lastbin) {\n                            last.push(event);\n                        }\n                        else {\n                            events.push([event]);\n                        }\n                    }\n                });\n        }\n\n        return events;\n    }\n\n    /**\n     * Return true if there are actual changes in the data\n     * (in particular will ignore data refresh which change nothing)\n     * @param change \n     */\n    protected checkDataChanges(change: SimpleChange): boolean {\n        const previousValue = change.previousValue as TimelineSeries[] | undefined;\n        const currentValue = change.currentValue as TimelineSeries[] | undefined;\n        \n        // Ignore null/undefined difference cause by | async\n        // See: https://github.com/angular/angular/issues/16982\n        if(currentValue === null && previousValue === undefined || currentValue === undefined && previousValue === null)\n            return false;\n\n        // Else, if one of them is null/undefined (or difference in length), there's clearly a change\n        if(!previousValue || !currentValue || previousValue.length !== currentValue.length)\n            return true;\n        \n        // If both defined and same size, we need to compare the data piece by piece\n        for(let i=0; i {\n        const gripHeight = Math.min(10, Math.max((this.innerHeight) / 8, 4));\n        const gripWidth = gripHeight;\n\n        const x = -gripWidth / 2;\n        const y = this.innerHeight / 2 - gripHeight / 2;\n\n        const path =\n            'M ' + x + ' ' + y +\n            ' l ' + -gripWidth + ' ' + gripHeight / 2 +\n            ' l ' + gripWidth + ' ' + gripHeight / 2 + ' z ' +\n            'M ' + -x + ' ' + y +\n            ' l ' + gripWidth + ' ' + gripHeight / 2 +\n            ' l ' + -gripWidth + ' ' + gripHeight / 2 + ' z ' +\n            'M 0 ' + 0 + ' l 0 ' + this.innerHeight + ' z ';\n        return path;\n    }\n\n    /**\n     * Returns the size of the triangle drawn for one event (or a group of events)\n     * @param events \n     */\n    eventSize(events: TimelineEvent[]): number {\n        if(events!==this.tooltipItem) {\n            return events[0].size || 6;\n        }\n        else {\n            return events[0].sizeOpened || (events[0].size || 6)*2;\n        }\n    }\n\n    /**\n     * Return a string containing the path coordinates of a triangle for a given event (or group of events)\n     * @param events \n     * @param size \n     */\n    drawEvents(events: TimelineEvent[], size: number): string {\n        const x = this.xt(events[0].date);\n        return 'M ' + x + ' ' + (this.innerHeight - 3*size/2) +\n            ' l ' + -size + ' ' + (3*size/2) +\n            ' l ' + (2*size) + ' ' + 0 + ' z ';\n    }\n}\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/TimelineEvent.html":{"url":"interfaces/TimelineEvent.html","title":"interface - TimelineEvent","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  TimelineEvent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            timeline/bootstrap/timeline.component.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        date\n                                \n                                \n                                        display\n                                \n                                \n                                        id\n                                \n                                \n                                            Optional\n                                        record\n                                \n                                \n                                            Optional\n                                        size\n                                \n                                \n                                            Optional\n                                        sizeOpened\n                                \n                                \n                                            Optional\n                                        styles\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        date\n                                    \n                                \n                                \n                                    \n                                        date:         Date\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Date\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        display\n                                    \n                                \n                                \n                                    \n                                        display:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                    \n                                \n                                \n                                    \n                                        id:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        record\n                                    \n                                \n                                \n                                    \n                                        record:     Record\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Record\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        size\n                                    \n                                \n                                \n                                    \n                                        size:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        sizeOpened\n                                    \n                                \n                                \n                                    \n                                        sizeOpened:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        styles\n                                    \n                                \n                                \n                                    \n                                        styles:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Component, Input, Output, ElementRef, ViewChild, OnChanges, AfterViewInit, EventEmitter, SimpleChanges, OnDestroy, SimpleChange, ContentChild, TemplateRef, ChangeDetectorRef } from '@angular/core';\nimport { Subscription } from 'rxjs';\nimport * as d3 from 'd3';\n\nimport { IntlService } from '@sinequa/core/intl';\nimport {Record} from '@sinequa/core/web-services';\n\n\nexport interface TimelineDate {\n    date: Date;\n    value: number;\n}\n\nexport interface TimelineSeries {\n    name: string;\n    dates: TimelineDate[];\n    primary: boolean;\n    lineStyles?: {[key:string]: any};\n    areaStyles?:  {[key:string]: any};\n}\n\nexport interface TimelineEvent {\n    date: Date;\n    id: string;\n    display: string;\n    size?: number;\n    sizeOpened?: number;\n    styles?: {[key:string]: any};\n    record?: Record;\n}\n\n@Component({\n    selector: 'sq-timeline',\n    templateUrl: './timeline.component.html',\n    styleUrls: ['./timeline.component.scss']\n})\nexport class BsTimelineComponent implements OnChanges, AfterViewInit, OnDestroy {\n\n    @Input() data?: TimelineSeries[];\n    @Input() events?: TimelineEvent[];\n\n    @Input() selection?: [Date, Date];\n\n    // Initial scale (prior to any zoom)\n    @Input() minDate?: Date;\n    @Input() maxDate?: Date;\n\n    @Input() zoomable = true;\n    @Input() minZoomDays = 1; // Max 1 day scale\n    @Input() maxZoomDays = 365 * 100; // Max 100 years scale\n\n    @Input() width = 600;\n    @Input() height = 200;\n    @Input() margin = {top: 15, bottom: 30, left: 40, right: 15};\n\n    @Input() curveType = \"curveMonotoneX\";\n\n    @Input() showTooltip = true;\n    @Input() theme: \"light\" | \"dark\" = \"light\";\n\n    @Output() selectionChange = new EventEmitter();\n    @Output() rangeChange = new EventEmitter();\n\n    @ContentChild(\"tooltipTpl\", {static: false}) tooltipTpl: TemplateRef;\n\n    // Data\n    groupedEvents: TimelineEvent[][] = [];\n\n    // Scales\n    x: d3.ScaleTime; // Read/Write\n    xt: d3.ScaleTime; // Transformed X axis due to Zoom\n    y: d3.ScaleLinear; // Read-only / domain updated\n\n    // Shapes\n    area: d3.Area; // Read only\n    line: d3.Line; // Read only\n\n    // Behaviors\n    brushBehavior: d3.BrushBehavior; // Read only\n    zoomBehavior: d3.ZoomBehavior; // Read/Write\n    brushSelection: [number, number] | null;\n    currentSelection?: Date[]; // Read/Write\n\n    // Elements\n    @ViewChild(\"xAxis\") gx: ElementRef;\n    @ViewChild(\"yAxis\") gy: ElementRef;\n    @ViewChild(\"brush\") gbrush: ElementRef;\n    \n    // Selections\n    xAxis$: d3.Selection;\n    yAxis$: d3.Selection;\n    brush$: d3.Selection;\n    grips$: d3.Selection;\n        \n    // Tooltip\n    tooltipItem: TimelineEvent[] | undefined;\n    tooltipX: number | undefined;\n    tooltipOrientation: \"left\" | \"right\";\n    tooltipTop: number;\n    tooltipRight: number;\n    tooltipLeft: number;\n\n    // Misc\n    viewInit: boolean;\n    intlSubscription: Subscription;\n    static counter = 0;\n    instance: number;\n    \n    zooming: boolean;\n    brushing: boolean;\n\n    constructor(\n        protected el: ElementRef,\n        protected intlService: IntlService,\n        protected cdRef: ChangeDetectorRef\n    ){\n        // When the locale changes, we rebuild the X scale and axis\n        this.intlSubscription = this.intlService.events.subscribe(e => this.updateXAxis());\n        \n        this.instance = BsTimelineComponent.counter++;\n        \n    }\n\n    get innerWidth(): number {\n        return this.width - this.margin.left - this.margin.right;\n    }\n\n    get innerHeight(): number {\n        return this.height - this.margin.top - this.margin.bottom;\n    }\n\n    // Note: ngOnChanges is always called once before ngAfterViewInit\n    ngOnChanges(changes: SimpleChanges) {\n\n        if(!this.x) {\n            \n            // Scales\n            this.x = d3.scaleUtc()\n                .range([0, this.innerWidth]);\n            this.xt = this.x;\n\n            this.y = d3.scaleLinear()\n                .range([this.innerHeight, 0]);\n                \n            // Shapes\n            this.area = d3.area()\n                .curve(d3[this.curveType])\n                .x(d => this.xt(d.date))\n                .y0(this.y(0))\n                .y1(d => this.y(d.value));\n                \n            this.line = d3.line()\n                .curve(d3[this.curveType])\n                .x(d => this.xt(d.date))\n                .y(d => this.y(d.value));\n                \n            // Behaviors\n            this.brushBehavior = d3.brushX()\n                .extent([[0, 0], [this.innerWidth, this.innerHeight]])\n                .on(\"start\", () => this.brushing = true)\n                .on('brush', () => this.onBrush())\n                .on('end', () => this.onBrushEnd());\n        }\n\n        // Resize handling\n\n        if(changes[\"height\"]) {\n            this.y.range([this.innerHeight, 0]);\n            this.area.y0(this.y(0));\n            this.brushBehavior.extent([[0, 0], [this.innerWidth, this.innerHeight]]);\n            if(this.viewInit) {\n                this.drawYAxis();\n                this.brush$.call(this.brushBehavior);\n                this.grips$.selectAll(\"path\").attr(\"d\", this.drawGrips);\n            }\n        }\n\n        if(changes[\"width\"]) {\n            this.x.range([0, this.innerWidth]);\n            this.brushBehavior.extent([[0, 0], [this.innerWidth, this.innerHeight]]);\n            if(this.viewInit) {\n                this.drawXAxis();\n                if(!changes[\"height\"]) {\n                    this.brush$.call(this.brushBehavior);\n                    this.grips$.selectAll(\"path\").attr(\"d\", this.drawGrips);\n                }\n            }\n        }\n\n        // If the parent changes the selection, we want to update it\n        // If not, we keep the current selection as is\n        // (Important to keep this statement outside of the if bellow since \n        // the change of selection can be combined with a change of data)\n        const selectionChanged = changes[\"selection\"] && this.updateSelection();\n\n        // Only changes in data result in redrawing the chart\n        // (other input, except selection, are expected to be static)\n        if(this.viewInit && changes[\"data\"] && this.checkDataChanges(changes[\"data\"])){\n            this.updateChart();\n        }\n\n        // If the parent changes the selection (even though the data hasn't changed), \n        // we want to update the brush.\n        // If not, we keep the current selection as is.\n        // We can update the brush only if the view is initialized (viewInit).\n        else if(this.viewInit && ((changes[\"selection\"] && selectionChanged) || changes[\"width\"])) {\n            this.updateBrush();\n        }\n\n        if(changes[\"events\"]) {\n            this.updateEvents();\n        }\n        \n    }\n\n    // Note: In onAfterViewInit we can access gx, gy, etc., obtained with @ViewChild.\n    // At this point we can initialize all the primitives and call updateChart()\n    ngAfterViewInit() {\n\n        // Get native elements\n        this.xAxis$ = d3.select(this.gx.nativeElement);\n        this.yAxis$ = d3.select(this.gy.nativeElement);\n        this.brush$ = d3.select(this.gbrush.nativeElement);\n\n        this.brush$\n            .call(this.brushBehavior)\n            .on(\"mousemove\", () => this.onMousemove())\n            .on(\"mouseout\", () => this.onMouseout());\n                        \n        // Add 2 \"grips\" to the brush goup, on each side of the rectangle\n        // Grips are inserted programmatically to appear on top the brush selection\n        this.grips$ = this.brush$.selectAll(\".grip\")\n            .data([{type: \"w\"}, {type: \"e\"}])\n            .enter()\n            .append(\"g\")\n            .attr(\"class\", \"grip\")\n            .attr(\"display\", \"none\");\n            \n        this.grips$.append(\"path\")\n            .attr(\"d\", this.drawGrips);\n\n        this.grips$.append(\"text\")\n            .attr(\"class\", \"grip-text\")\n            .attr(\"text-anchor\", d => d.type === \"w\"? 'end' : 'start')\n            .attr(\"x\", d => d.type === \"w\"? -5 : 5)\n            .attr(\"y\", 10);\n\n        this.viewInit = true;\n\n        this.updateChart();\n\n        // This is necessary to prevent \"Expression has changed after check\" errors\n        // caused by calling updateChart inside ngAfterViewInit().\n        // Unfortunately this is necessary because we need the DOM to be rendered in order fill the DOM\n        // (for example gAxis needs to exist so we can draw the axis)\n        this.cdRef.detectChanges();\n    }\n\n    /**\n     * Redraw the graph (needs to be called after ngAfterViewInit so that the DOM elements\n     * are accessible)\n     */\n    updateChart() {\n\n        this.turnoffTooltip();\n\n        if(this.data && this.data.length) {\n\n            // Update scales\n            // Note: does not stop the update process even if the data is invalid/empty\n            this.updateScales(this.data);\n\n            // Update Axes\n            this.updateAxes();\n            \n            // Update Zoom\n            this.updateZoom();\n\n            // Update brush\n            this.updateBrush();\n\n        }\n        \n    }\n\n\n    /**\n     * Update the x & y scales, based on the input data\n     * @param data \n     */\n    protected updateScales(data: TimelineSeries[]) {\n\n        // Set x and y scales with the primary series (or first one)\n        const primarySeries = data.filter(s => s.primary) || [data[0]];\n        const allPrimaryDates = ([] as TimelineDate[]).concat(...primarySeries.map(s => s.dates));\n\n        const xExtent = d3.extent(allPrimaryDates, d => d.date);\n        const yMax = d3.max(data, \n            s => d3.max(s.dates, d => d.value));\n\n        if(!xExtent[0] || !xExtent[1] || !yMax) {\n            if (allPrimaryDates.length !== 0) {\n                console.error('Invalid timeseries', primarySeries);\n            }\n            this.x.domain(this.xt.domain());\n            this.xt = this.x;\n            return;\n        }\n\n        if(this.minDate) {\n            xExtent[0] = this.minDate;\n        }\n\n        if(this.maxDate) {\n            xExtent[1] = this.maxDate;\n        }\n\n        this.x.domain(xExtent);\n        this.xt = this.x;\n        this.y.domain([0, yMax*1.1]);\n    }\n\n    /**\n     * Update the x and y axes\n     */\n    protected updateAxes(){\n        this.drawXAxis();\n        this.drawYAxis();\n    }\n\n    /**\n     * The events are drawn in the template directly. This method simply\n     * updates the grouping of events (when they are close to each other)\n     */\n    protected updateEvents() {\n        this.groupedEvents = this.groupEvents(5);\n    }\n\n    /**\n     * Update/reset the zoom behavior when new data comes in (and new scales, axes...)\n     */\n    protected updateZoom() {\n        \n        if(!this.zoomable) {\n            return;\n        }\n\n        // Reset the previous zoom !\n        if(this.zoomBehavior){\n            this.zoomBehavior.on(\"zoom\", null);\n            this.zoomBehavior.on(\"end\", null);\n            this.zoomBehavior.transform(this.brush$, d3.zoomIdentity);\n        }\n        \n        // Compute the minimum and maximum zoom\n        const xDomain = this.x.domain();\n        const scaleExtent = (xDomain[1].getTime() - xDomain[0].getTime()) / 86400000; // current number of days on the scale\n\n        // Create the behavior\n        this.zoomBehavior = d3.zoom()\n            .extent([[0, 0], [this.innerWidth, this.innerHeight]])\n            .scaleExtent([scaleExtent/this.maxZoomDays, scaleExtent/this.minZoomDays])\n            .on(\"zoom\", () => this.onZoom())\n            .on(\"end\", () => this.onZoomEnd());\n        \n        // Apply on to the brush element\n        this.brush$\n            .call(this.zoomBehavior)\n            .on(\"mousedown.zoom\", null) // Deactivate mouse event (taken by brush)\n            .on(\"touchstart.zoom\", null)\n            .on(\"touchmove.zoom\", null)\n            .on(\"touchend.zoom\", null);\n        \n    }\n\n    /**\n     * Updates the brush (or hides it if no currentSelection),\n     * following a change of x scale.\n     */\n    protected updateBrush() {\n        if(this.currentSelection) {\n            const selection: [number, number] = [this.xt(this.currentSelection[0]), this.xt(this.currentSelection[1])];\n            this.brush$.call(this.brushBehavior.move, selection);\n        }\n        else {\n            this.brush$.call(this.brushBehavior.move, null);\n        }\n    }\n\n    /**\n     * This method tests whether the input selection is different from the currentSelection\n     * and updates it. It returns true if there is actually a change.\n     */\n    protected updateSelection(): boolean {\n        const change = this.checkSelectionChange(this.selection, this.currentSelection);\n        this.currentSelection = this.selection;\n        return change;\n    }\n\n    /**\n     * Recreate the x scale and axes (in the event of a language change)\n     */\n    protected updateXAxis(){        \n        this.x = d3.scaleUtc()\n            .domain(this.x.domain())\n            .range(this.x.range());\n        \n        this.xt = d3.scaleUtc()\n            .domain(this.xt.domain())\n            .range(this.xt.range());\n\n        this.drawXAxis();\n    }\n\n    /**\n     * Draws the X axis\n     */\n    protected drawXAxis() {        \n        this.xAxis$.call(d3.axisBottom(this.xt));\n        this.xAxis$.selectAll(\".domain\").remove(); // Remove the axis line\n    }\n\n    /**\n     * Draws the Y axis\n     */\n    protected drawYAxis() {\n        const yAxisTicks = this.y.ticks()\n            .filter(tick => Number.isInteger(tick)); // Keep only integer ticks https://stackoverflow.com/questions/13576906/d3-tick-marks-on-integers-only/56821215\n\n        const yAxis = d3.axisLeft(this.y)\n            .tickValues(yAxisTicks)\n            .tickFormat(d3.format(\"~s\")); //https://github.com/d3/d3-format\n        this.yAxis$.call(yAxis);\n        this.yAxis$.selectAll(\".domain\").remove(); // Remove the axis line\n    }\n    \n    /**\n     * Updates the display of the brush's grips when the brush has moved\n     * @param selection \n     */\n    protected updateGrips(selection: [number, number] | null) {\n        if (!selection) {\n            this.grips$.attr(\"display\", \"none\");\n        }\n        else {\n            this.grips$\n                .attr(\"display\", null)\n                .attr(\"transform\", (d, i) => \"translate(\" + selection[i] + \")\");\n            this.grips$.selectAll('.grip-text')\n                .text(d => this.intlService.formatDate(this.xt.invert(selection[d.type === 'w'? 0 : 1])));\n        }\n    }\n\n\n    // Interaction callbacks\n\n    onBrush() {\n        this.turnoffTooltip();\n        this.brushSelection = d3.brushSelection(this.gbrush.nativeElement) as [number, number] | null;\n        this.updateGrips(this.brushSelection);\n    }\n\n    onBrushEnd(){\n        this.brushing = false;\n        this.onBrush();\n        const newSelection = this.brushSelection?.sort((a,b)=>a-b).map(this.xt.invert);\n        if(this.checkSelectionChange(this.currentSelection, newSelection)) {\n            this.currentSelection = newSelection;\n            this.selectionChange.next(this.currentSelection);\n        }\n    }    \n\n    onZoom(){\n\n        this.turnoffTooltip();\n\n        this.zooming = true;\n\n        // Create a transformed scale without modifying the original (to enforce the limit of scaleExtent)\n        const transform = d3.zoomTransform(this.brush$.node() as Element);\n        this.xt = transform.rescaleX(this.x);\n\n        // Redraw the axis\n        this.drawXAxis();\n            \n        // Update the brush position\n        if(this.currentSelection){\n            const selection: [number, number] = [this.xt(this.currentSelection[0]), this.xt(this.currentSelection[1])];\n            this.brushBehavior.move(this.brush$, selection);\n        }\n\n    }\n\n    onZoomEnd(){\n        this.zooming = false;\n\n        // At the end of a zoom, we need to reorganize the grouping of events\n        this.updateEvents();\n\n        // Fire an event\n        this.rangeChange.next(this.xt.domain());\n    }\n\n    /**\n     * Redraw the simple tooltip (vertical line)\n     */\n    onMousemove() {\n        if(!this.tooltipItem && this.showTooltip) {\n            this.tooltipX = d3.mouse(this.gbrush.nativeElement)[0];\n        }\n    }\n\n    /**\n     * Remove the simple tooltip (vertical line)\n     */\n    onMouseout() {\n        if(!this.tooltipItem) {\n            this.tooltipX = undefined\n        }\n    }\n\n    /**\n     * Responds to a click on an event (triangle) by essentially turning tooltip on/off\n     * @param event \n     */\n    onEventClick(event: TimelineEvent[]) {\n\n        if(this.tooltipItem === event) {\n            this.turnoffTooltip();\n        }\n\n        else {\n\n            if(this.tooltipItem) {\n                this.turnoffTooltip();\n            }\n\n            this.tooltipItem = event;\n            this.tooltipX = this.xt(event[0].date);\n\n            // Since we use viewBox to auto-adjust the SVG to the container size, we have to\n            // convert from the SVG coordinate system to the HTML coordinate system\n            const x = this.margin.left + this.tooltipX;\n            const actualWidth = (this.el.nativeElement as HTMLElement).offsetWidth;\n            const scale = actualWidth / this.width;\n            const relativeX = x / this.width;\n\n            // Tooltip to the right\n            if(relativeX  {\n        if(this.tooltipItem) {\n            this.tooltipItem = undefined;\n            this.tooltipX = undefined;\n        }\n    }\n\n    ngOnDestroy(){\n        this.intlSubscription.unsubscribe();\n    }\n\n    // Utilities\n\n    /**\n     * Transforms the input list of events into a list of list, by grouping events within a bin\n     * when their dates are close together. This closeness is measured in \"pixel per event\".\n     * Note: this currently uses a histogram-like algorithm, which could probably be improved (clustering?)\n     * @param pixPerEvent \n     */\n    protected groupEvents(pixPerEvent: number): TimelineEvent[][] {\n        const events: TimelineEvent[][] = [];\n\n        if(this.events) {\n            const nbins = Math.floor(this.innerWidth / pixPerEvent);\n            const domain = this.xt.domain();\n            const timeinterval = (domain[1].getTime() - domain[0].getTime()) / nbins;\n            this.events.concat()\n                .sort((a,b) => a.date.getTime() - b.date.getTime())\n                .forEach(event => {\n                    if(events.length === 0) {\n                        events.push([event]);\n                    }\n                    else {\n                        const last = events[events.length-1];\n                        const lastbin = Math.floor(last[0].date.getTime() / timeinterval);\n                        const bin = Math.floor(event.date.getTime() / timeinterval);\n                        if(bin === lastbin) {\n                            last.push(event);\n                        }\n                        else {\n                            events.push([event]);\n                        }\n                    }\n                });\n        }\n\n        return events;\n    }\n\n    /**\n     * Return true if there are actual changes in the data\n     * (in particular will ignore data refresh which change nothing)\n     * @param change \n     */\n    protected checkDataChanges(change: SimpleChange): boolean {\n        const previousValue = change.previousValue as TimelineSeries[] | undefined;\n        const currentValue = change.currentValue as TimelineSeries[] | undefined;\n        \n        // Ignore null/undefined difference cause by | async\n        // See: https://github.com/angular/angular/issues/16982\n        if(currentValue === null && previousValue === undefined || currentValue === undefined && previousValue === null)\n            return false;\n\n        // Else, if one of them is null/undefined (or difference in length), there's clearly a change\n        if(!previousValue || !currentValue || previousValue.length !== currentValue.length)\n            return true;\n        \n        // If both defined and same size, we need to compare the data piece by piece\n        for(let i=0; i {\n        const gripHeight = Math.min(10, Math.max((this.innerHeight) / 8, 4));\n        const gripWidth = gripHeight;\n\n        const x = -gripWidth / 2;\n        const y = this.innerHeight / 2 - gripHeight / 2;\n\n        const path =\n            'M ' + x + ' ' + y +\n            ' l ' + -gripWidth + ' ' + gripHeight / 2 +\n            ' l ' + gripWidth + ' ' + gripHeight / 2 + ' z ' +\n            'M ' + -x + ' ' + y +\n            ' l ' + gripWidth + ' ' + gripHeight / 2 +\n            ' l ' + -gripWidth + ' ' + gripHeight / 2 + ' z ' +\n            'M 0 ' + 0 + ' l 0 ' + this.innerHeight + ' z ';\n        return path;\n    }\n\n    /**\n     * Returns the size of the triangle drawn for one event (or a group of events)\n     * @param events \n     */\n    eventSize(events: TimelineEvent[]): number {\n        if(events!==this.tooltipItem) {\n            return events[0].size || 6;\n        }\n        else {\n            return events[0].sizeOpened || (events[0].size || 6)*2;\n        }\n    }\n\n    /**\n     * Return a string containing the path coordinates of a triangle for a given event (or group of events)\n     * @param events \n     * @param size \n     */\n    drawEvents(events: TimelineEvent[], size: number): string {\n        const x = this.xt(events[0].date);\n        return 'M ' + x + ' ' + (this.innerHeight - 3*size/2) +\n            ' l ' + -size + ' ' + (3*size/2) +\n            ' l ' + (2*size) + ' ' + 0 + ' z ';\n    }\n}\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/TimelineEventAggregation.html":{"url":"interfaces/TimelineEventAggregation.html","title":"interface - TimelineEventAggregation","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  TimelineEventAggregation\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            timeline/bootstrap/facet-timeline.component.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        aggregation\n                                \n                                \n                                        getDate\n                                \n                                \n                                        getDisplay\n                                \n                                \n                                            Optional\n                                        size\n                                \n                                \n                                            Optional\n                                        styles\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        aggregation\n                                    \n                                \n                                \n                                    \n                                        aggregation:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        getDate\n                                    \n                                \n                                \n                                    \n                                        getDate:     \n\n                                    \n                                \n\n\n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        getDisplay\n                                    \n                                \n                                \n                                    \n                                        getDisplay:     \n\n                                    \n                                \n\n\n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        size\n                                    \n                                \n                                \n                                    \n                                        size:     number | \n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     number | \n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        styles\n                                    \n                                \n                                \n                                    \n                                        styles:     literal type | \n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type | \n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Component, Input, OnChanges, ChangeDetectorRef, SimpleChanges, Output, EventEmitter } from '@angular/core';\nimport { Observable, of, combineLatest, ReplaySubject } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { Results, AggregationItem, Aggregation, CCAggregation, Record, AuditWebService, AuditEventType } from '@sinequa/core/web-services';\nimport { AppService, Expr, ExprBuilder } from '@sinequa/core/app-utils';\nimport { Utils } from '@sinequa/core/base';\nimport { AbstractFacet, FacetService } from '@sinequa/components/facet';\nimport { SearchService } from '@sinequa/components/search';\nimport { SelectionService } from '@sinequa/components/selection';\nimport { Action } from '@sinequa/components/action';\nimport { TimelineSeries, TimelineDate, TimelineEvent } from './timeline.component';\nimport moment from 'moment';\nimport * as d3 from 'd3';\n\nexport interface TimelineAggregation {\n    name?: string;\n    aggregation: string;\n    primary: boolean;\n    areaStyles?: {[key: string]: any};\n    lineStyles?: {[key: string]: any};\n}\n\nexport interface TimelineCombinedAggregations {\n    aggregations: TimelineAggregation[];\n    maxNMonths: number[]; // Maximum number of months for which to use this aggregation\n    default: TimelineAggregation; // Aggregation to use by default \n    current?: TimelineAggregation; // (this field is overriden by the component when switching aggregation)\n}\n\nexport interface TimelineRecords {\n    field: string;\n    size?: number | ((record: Record, selected: boolean) => number);\n    styles?: {[key: string]: any} | ((record: Record, selected: boolean) => {[key: string]: any});\n    display?: (record: Record) => string;\n}\n\nexport interface TimelineEventAggregation {\n    aggregation: string;\n    getDate: ((item: AggregationItem) => Date);\n    getDisplay: ((item: AggregationItem) => string);\n    size?: number | ((item: AggregationItem) => number);\n    styles?: {[key: string]: any} | ((item: AggregationItem) => {[key: string]: any});\n}\n\nexport type TimelineData = TimelineSeries | TimelineAggregation | TimelineCombinedAggregations;\n\nexport type TimelineEventData = TimelineEvent[] | TimelineRecords | TimelineEventAggregation;\n\n@Component({\n    selector: 'sq-facet-timeline',\n    templateUrl: './facet-timeline.component.html',\n    styleUrls: ['./facet-timeline.component.scss']\n})\nexport class BsFacetTimelineComponent extends AbstractFacet implements OnChanges {\n    @Input() name = 'Timeline';\n    @Input() results: Results;\n    \n    // By default, we show the standard Timeline aggregation and the list of current records\n    @Input() timeseries: TimelineData[] = [{aggregation: 'Timeline', primary: true}];\n    @Input() events: TimelineEventData[] = [{field: 'modified'}];\n\n    // Initial scale (prior to any zoom)\n    @Input() minDate?: Date;\n    @Input() maxDate?: Date;\n    // Date range to filter aggregations (ignored when combined aggregations are recomputed based on zoomed range)\n    @Input() minAggregationDate?: Date;\n    @Input() maxAggregationDate?: Date;\n    \n    @Input() zoomable = true;\n    @Input() minZoomDays = 1; // Max 1 day scale\n    @Input() maxZoomDays = 365 * 100; // Max 100 years scale\n\n    @Input() width = 600;\n    @Input() height = 200;\n    @Input() margin = {top: 15, bottom: 30, left: 40, right: 15};\n\n    @Input() curveType = \"curveMonotoneX\";\n\n    @Input() showTooltip = true;\n    @Input() theme: \"light\" | \"dark\" = \"light\";\n\n    @Output() eventClicked = new EventEmitter();\n\n    // List of observables (one per timeseries / event type)\n    timeseries$: ReplaySubject[];\n    events$: ReplaySubject[];\n\n    // Combination (combineLastest) of the timeline observables\n    mergedTimeseries$: Observable;\n    mergedEvents$: Observable;\n\n    // Current timeline selection\n    selection?: [Date, Date];\n\n    // Current range (undefined if no zoom / auto-scaling)\n    currentRange?: [Date, Date];\n\n    // Formating method for search queries\n    formatDayRequest = d3.timeFormat(\"%Y-%m-%d\");\n\n    // Actions\n    clearFilters: Action;\n\n    constructor(\n        public facetService: FacetService,\n        public searchService: SearchService,\n        public appService: AppService,\n        public selectionService: SelectionService,\n        public exprBuilder: ExprBuilder,\n        public cdRef: ChangeDetectorRef,\n        public audit: AuditWebService\n    ){\n        super();\n\n        // Update the events when the selection of records changes\n        this.selectionService.events.subscribe(event => {\n            const i = this.events.findIndex(e => (e as TimelineRecords).field);\n            if(i !== -1) {\n                this.events$[i].next(this.getRecordsAsEvents(this.events[i] as TimelineRecords));\n            }\n        });\n        \n        // Clear the current filters\n        this.clearFilters = new Action({\n            icon: \"far fa-minus-square\",\n            title: \"msg#facet.clearSelects\",\n            action: () => {\n                this.selection = undefined;\n                this.searchService.query.removeSelect(this.name);\n                this.searchService.search();\n            }\n        });\n\n    }\n\n    getMinDate(): Date | undefined {\n        return this.currentRange? this.currentRange[0] : this.minDate;\n    }\n\n    getMaxDate(): Date | undefined {\n        return this.currentRange? this.currentRange[1] : this.maxDate;\n    }\n\n    get actions(): Action[] {\n        const actions: Action[] = [];\n        if(this.facetService.hasFiltered(this.name)){\n            actions.push(this.clearFilters);\n        }\n        return actions;\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n\n        // Retrieve the current active selection for this timeline (if any)\n        const select = this.searchService.query.findSelect(this.name);\n\n        // Update the selection if it is not already set (which is the case on a page refresh)\n        if(select && !this.selection) {\n            let parsedexpr = this.appService.parseExpr(select.expression) as Expr;\n            if(!Utils.isString(parsedexpr)){\n                while(!parsedexpr.isLeaf){ // The select might over multiple fields (modified between [...] AND created between [...])\n                    parsedexpr = parsedexpr.operands[0];\n                }\n                if(parsedexpr.values){\n                    this.selection = [new Date(parsedexpr.values[0]), new Date(parsedexpr.values[1])];\n                }\n            }\n        }\n        // If no active selection we remove the selection from the timeline, along with the current zoomed range\n        else if(!select) {\n            this.selection = undefined; // If no select, it was possibly removed by the user, we need to update our selection\n            this.currentRange = undefined; // current range is set by zoom events, we want to reset it only if there are no select (ie. no user interaction)\n        }\n\n        // Initialize timeseries\n        if(!this.timeseries$ || changes[\"timeseries\"]) {\n            // Create one observable per timeline\n            this.timeseries$ = this.timeseries.map(_ => new ReplaySubject(1));\n            this.mergedTimeseries$ = combineLatest(this.timeseries$);\n        }\n\n        this.updateTimeseries();\n\n        // Initialize events\n        if(!this.events$ || changes[\"events\"]) {\n            this.events$ = this.events.map(_ => new ReplaySubject(1));\n            this.mergedEvents$ = combineLatest(this.events$).pipe(\n                map(events => ([] as TimelineEvent[]).concat(...events))\n            );\n        }\n\n        this.updateEvents();\n        \n    }\n\n    /**\n     * For each timeseries configuration given as an input,\n     * update the data via the list of observables (timelines$)\n     */\n    updateTimeseries() {\n        this.timeseries.forEach((config, i) => {\n\n            const subject = this.timeseries$[i];\n\n            if((config as TimelineSeries).dates !== undefined) {\n                subject.next(config as TimelineSeries);\n            }\n\n            else {\n                let agg = config as TimelineAggregation;\n                if(agg.aggregation === undefined){\n                    \n                    config = config as TimelineCombinedAggregations;\n                    // We want to set the default scale if it hasn't been set before\n                    // or if no zoom/selection has been made (so current scale may not be adapted to the new results)\n                    if(!this.currentRange || !config.current){\n                        config.current = config.default;\n                    }\n\n                    agg = config.current;\n                }\n                \n                const range: [Date, Date] | undefined = !!this.minAggregationDate && !!this.maxAggregationDate ?\n                    [this.minAggregationDate, this.maxAggregationDate] : undefined;\n\n                this.getTimeseries(agg, range).subscribe({\n                    next: d => subject.next(d),\n                    error: err => subject.error(err)\n                });\n            }\n\n        });\n    }\n\n    /**\n     * For each event configuration given as an input, \n     * update the data via the list of observables (events$)\n     */\n    updateEvents() {\n        this.events.forEach((config, i) => {\n            const subject = this.events$[i];\n\n            if((config as TimelineRecords).field) {\n                subject.next(this.getRecordsAsEvents(config as TimelineRecords));\n            }\n            else if((config as TimelineEventAggregation).aggregation){\n                this.getEventAggregation(config as TimelineEventAggregation).subscribe({\n                    next: t => subject.next(t),\n                    error: err => subject.error(err)\n                });\n            }\n            else if(Array.isArray(config)){\n                subject.next(config as TimelineEvent[]);\n            }\n        });\n    }\n\n    /**\n     * Get a timeseries aggregation via the getAggregation method.\n     * @param config \n     * @param subject \n     * @param range \n     */\n    getTimeseries(config: TimelineAggregation, range?: [Date, Date]): Observable {\n        return this.getAggregation(config.aggregation, range).pipe(\n            map(d => BsFacetTimelineComponent.createTimeseries(config, d.aggregation, d.ccaggregation, range))\n        );\n    }\n\n    /**\n     * Get an aggregation of events via the getAggregation method\n     * @param config \n     * @param subject \n     */\n    getEventAggregation(config: TimelineEventAggregation): Observable {\n        return this.getAggregation(config.aggregation).pipe(\n            map(d => BsFacetTimelineComponent.createAggregationEvents(config, d.aggregation, d.ccaggregation))\n        );\n    }\n\n    /**\n     * Returns the list of records from the results as a list of TimelineEvent when they have a\n     * modified date. The size and styles of the events are determined from the given configuration (TimelineRecords)\n     * @param config \n     */\n    getRecordsAsEvents(config: TimelineRecords): TimelineEvent[] {\n        if(this.results) {\n            return this.results.records\n                .filter(r => !!Utils.toDate(r[config.field]))\n                .map(r => {\n                    return {\n                        id: r.id,\n                        date: Utils.toDate(r[config.field])!,\n                        size: !config.size? 6 : typeof config.size === 'function'? config.size(r, r.$selected) : config.size,\n                        styles: !config.styles? BsFacetTimelineComponent.defaultRecordStyle(r.$selected) :\n                                typeof config.styles === 'function'? config.styles(r, r.$selected) : \n                                config.styles,\n                        display: config.display? config.display(r) : r.title,\n                        // Custom property for click action\n                        record: r\n                    }\n                });\n        }\n        return [];\n    }\n\n\n    /**\n     * returns an aggregation and its configuration either directly from the facet service of\n     * by fetching it from the server.\n     * @param aggregationName \n     * @param range \n     */\n    getAggregation(aggregationName: string, range?: [Date, Date]): Observable {\n        \n        const ccaggregation = this.appService.getCCAggregation(aggregationName);\n        const aggregation = this.facetService.getAggregation(aggregationName, this.results);\n        \n        if(aggregation && ccaggregation) {\n            return of({aggregation: aggregation, ccaggregation: ccaggregation});\n        }\n\n        else if(ccaggregation) {\n            return this.fetchAggregation(aggregationName, ccaggregation, range).pipe(\n                map(agg => {return {aggregation: agg, ccaggregation: ccaggregation} })\n            );\n        }\n\n        else {\n            throw new Error(`Aggregation ${aggregationName} does not exist in the Query web service`);\n        }\n    }\n\n    /**\n     * Get an aggregation from the server, filtering by range if provided\n     * @param aggregation \n     * @param ccaggregation \n     * @param range \n     */\n    fetchAggregation(aggregation: string, ccaggregation: CCAggregation, range?: [Date, Date]): Observable {\n        const query = Utils.copy(this.searchService.query);\n        query.action = \"aggregate\";\n        query.aggregations = [aggregation];\n\n        if(range){\n            query.addSelect(`${ccaggregation.column}:[${this.formatDayRequest(range[0])}..${this.formatDayRequest(range[1])}]`);\n        }\n\n        return this.searchService.getResults(query, undefined, {searchInactive: true}).pipe(\n            map(results => results.aggregations[0])\n        );\n    }\n\n    /**\n     * Given a combined aggregation configuration and a range, this method searches for the most \n     * adapted aggregation scale (years, months, weeks or days) and updates the data if necessary.\n     * @param config \n     * @param range \n     * @param iTimeseries \n     */\n    updateCombinedAggregation(config: TimelineCombinedAggregations, range: [Date, Date], timeseries$: ReplaySubject) {\n        const nmonths = d3.timeMonth.count(range[0], range[1]);\n\n        if(!config.maxNMonths || config.maxNMonths.length !== config.aggregations.length) {\n            console.error(config);\n            throw new Error(\"maxNMonths and aggregations must have the same number of items\");\n        }\n\n        // Find the aggregation with min maxNMonths with maxNMonths >= nmonths\n        let jMin;\n        config.maxNMonths.forEach((maxNMonths, j) => {\n            if(maxNMonths >= nmonths && (jMin === undefined || maxNMonths  this.currentRange[1])) {\n\n            config.current = bestAggregation;\n            this.getTimeseries(bestAggregation, range).subscribe({\n                next: d => timeseries$.next(d),\n                error: err => timeseries$.error(err)\n            });\n        }\n\n    }\n\n\n    // Interaction callbacks\n\n    /**\n     * On selection is triggered when the user selects a range of dates on the timeline.\n     * This has the effect of updating the query.select (either remove it or add/replace it)\n     * and it updates the search.\n     * @param selection \n     */\n    onSelectionChange(selection: [Date, Date] | undefined) {\n        this.selection = selection;\n        if(selection) {\n            const from = this.formatDayRequest(selection[0]);\n            const to = this.formatDayRequest(selection[1]);\n\n            const exprs: string[] = [];\n            this.searchService.query.removeSelect(this.name);\n\n            this.timeseries.forEach((config) => {\n                    \n                if((config as TimelineAggregation).aggregation !== undefined \n                || (config as TimelineCombinedAggregations).default !== undefined) {\n\n                    const aggregation = (config as TimelineAggregation).aggregation || (config as TimelineCombinedAggregations).default.aggregation;\n                    const ccaggregation = this.appService.getCCAggregation(aggregation);\n                    if(ccaggregation) {\n                        exprs.push(this.exprBuilder.makeRangeExpr(ccaggregation.column, from, to));\n                    }\n                }\n\n            });\n\n            if(exprs.length > 0) {\n                const expr = this.exprBuilder.concatOrExpr(exprs);\n                this.searchService.query.addSelect(expr, this.name);\n                this.searchService.search(undefined, {type:AuditEventType.Search_Timeline_Usage, detail: { from, to }});\n            }            \n        }\n\n        else if(this.searchService.query.findSelect(this.name)) {\n            this.searchService.query.removeSelect(this.name);\n            this.searchService.search();\n        }\n    }\n\n    /**\n     * On range is triggered when the user zooms in our out on the timeline,\n     * which triggers a dynamic update of the combined aggregation timelines.\n     * @param range \n     */\n    onRangeChange(range: [Date, Date]) {\n\n        this.timeseries.forEach((config, i) => {\n            if((config as TimelineCombinedAggregations).aggregations !== undefined) {\n                this.updateCombinedAggregation(config as TimelineCombinedAggregations, range, this.timeseries$[i]);\n            }\n        });\n\n        // Note: updateCombinedAggregation() compares currentRange and range\n        // So this update must be kept after the forEach\n        this.currentRange = range;        \n    }\n\n    /**\n     * When an event is clicked, the event is propagated to the parent, and the tooltip is closed\n     * @param event \n     * @param closeTooltip \n     */\n    onEventClicked(event: TimelineEvent, closeTooltip: () => void) {\n        this.eventClicked.next(event);\n        closeTooltip();\n        return false;\n    }\n\n\n    // Static utility methods\n    \n    \n    /**\n     * Create a time series object from its config, data (aggregation) and configuration (ccaggregation)\n     * @param config \n     * @param aggregation \n     * @param ccaggregation \n     */\n    static createTimeseries(config: TimelineAggregation, aggregation: Aggregation, ccaggregation: CCAggregation, range?: [Date, Date]): TimelineSeries {\n        return {\n            name: config.name || aggregation.name,\n            primary: config.primary,\n            dates: this.createDatapoints(aggregation.items, ccaggregation?.mask, range),\n            lineStyles: config.lineStyles,\n            areaStyles: config.areaStyles\n        }\n    }\n\n    /**\n     * Create a list of events from its config, data (aggregation) and configuration (ccaggregation)\n     * @param config \n     * @param aggregation \n     * @param ccaggregation \n     */\n    static createAggregationEvents(config: TimelineEventAggregation, aggregation: Aggregation, ccaggregation: CCAggregation): TimelineEvent[] {\n        return !aggregation.items? [] : aggregation.items.map(item => {\n            return {\n                id: config.getDate(item).toUTCString()+\"|\"+config.getDisplay(item),\n                date: config.getDate(item),\n                size: !config.size? 6 : typeof config.size === 'function'? config.size(item) : config.size,\n                styles: !config.styles? undefined :\n                        typeof config.styles === 'function'? config.styles(item) : \n                        config.styles,                \n                display: config.getDisplay(item),\n\n                // Custom params for click action\n                item: item,\n                aggregation: aggregation,\n                ccaggregation: ccaggregation\n            }\n        });\n    }\n\n    /**\n     * This methods transforms a raw list of aggregation items into\n     * a time series completed with zeros, following the below scheme:\n     * Aggregation:  [    # #         # # #   #     # #       # # #    ]\n     * Series:       [  0 # # 0     0 # # # 0 # 0 0 # # 0   0 # # # 0  ]\n     * @param items \n     * @param resolution \n     */\n    static createDatapoints(items: AggregationItem[] | undefined, resolution: string, range?: [Date, Date]): TimelineDate[] {\n\n        if(!items) {\n            return [];\n        }\n\n        const timeInterval = this.getD3TimeInterval(resolution);\n        \n        const series: TimelineDate[] = [];\n\n        const _items = items\n            .map(item => {\n                if(!!item.value && !(item.value instanceof Date)){\n                    const val = item.value.toString();\n                    item.value = moment(val.length  undefined; // So it gets filtered out\n                    }\n                }\n                return item;\n            })\n            .filter(item => !!item.value && (!range || ((item.value as Date) >= range[0] && (item.value as Date)  {\n            const date = item.value as Date;\n            \n            if(i === 0 || timeInterval.offset(series[series.length-1].date, 1)  item.date = this.shiftDate(item.date, resolution));\n\n        return series;\n    }\n\n    \n    /**\n     * Shift the date to the middle of their time bracket (2020 = middle of the year, April = middle of the month, etc.)\n     * @param date \n     * @param resolution \n     */\n    static shiftDate(date: Date, resolution: string): Date {\n        switch(resolution){\n            case \"YYYY-MM-DD\": return d3.timeHour.offset(date, 12);\n            case \"YYYY-WW\": return d3.timeHour.offset(date, 84); // 3*24 + 12\n            case \"YYYY-MM\": return d3.timeDay.offset(date, 15);\n            case \"YYYY\": return d3.timeMonth.offset(date, 6);\n        }\n        return date;\n    }\n\n\n    static getD3TimeInterval(resolution: string): d3.CountableTimeInterval {\n        switch(resolution){\n            case \"YYYY-MM-DD\": return d3.timeDay;\n            case \"YYYY-WW\": return d3.timeWeek;\n            case \"YYYY-MM\": return d3.timeMonth;\n            case \"YYYY\": return d3.timeYear;\n        }\n        return d3.timeDay;\n    }\n\n    static defaultRecordStyle(selected: boolean): {[key: string]: any} {\n        return {\n            'fill': selected? 'red' : 'green',\n            'stroke': selected? 'red' : undefined,\n            'stroke-width': selected? '2px' : undefined\n        };\n    }\n}\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/TimelineRecords.html":{"url":"interfaces/TimelineRecords.html","title":"interface - TimelineRecords","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  TimelineRecords\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            timeline/bootstrap/facet-timeline.component.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        display\n                                \n                                \n                                        field\n                                \n                                \n                                            Optional\n                                        size\n                                \n                                \n                                            Optional\n                                        styles\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        display\n                                    \n                                \n                                \n                                    \n                                        display:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        field\n                                    \n                                \n                                \n                                    \n                                        field:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        size\n                                    \n                                \n                                \n                                    \n                                        size:     number | \n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     number | \n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        styles\n                                    \n                                \n                                \n                                    \n                                        styles:     literal type | \n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type | \n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Component, Input, OnChanges, ChangeDetectorRef, SimpleChanges, Output, EventEmitter } from '@angular/core';\nimport { Observable, of, combineLatest, ReplaySubject } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { Results, AggregationItem, Aggregation, CCAggregation, Record, AuditWebService, AuditEventType } from '@sinequa/core/web-services';\nimport { AppService, Expr, ExprBuilder } from '@sinequa/core/app-utils';\nimport { Utils } from '@sinequa/core/base';\nimport { AbstractFacet, FacetService } from '@sinequa/components/facet';\nimport { SearchService } from '@sinequa/components/search';\nimport { SelectionService } from '@sinequa/components/selection';\nimport { Action } from '@sinequa/components/action';\nimport { TimelineSeries, TimelineDate, TimelineEvent } from './timeline.component';\nimport moment from 'moment';\nimport * as d3 from 'd3';\n\nexport interface TimelineAggregation {\n    name?: string;\n    aggregation: string;\n    primary: boolean;\n    areaStyles?: {[key: string]: any};\n    lineStyles?: {[key: string]: any};\n}\n\nexport interface TimelineCombinedAggregations {\n    aggregations: TimelineAggregation[];\n    maxNMonths: number[]; // Maximum number of months for which to use this aggregation\n    default: TimelineAggregation; // Aggregation to use by default \n    current?: TimelineAggregation; // (this field is overriden by the component when switching aggregation)\n}\n\nexport interface TimelineRecords {\n    field: string;\n    size?: number | ((record: Record, selected: boolean) => number);\n    styles?: {[key: string]: any} | ((record: Record, selected: boolean) => {[key: string]: any});\n    display?: (record: Record) => string;\n}\n\nexport interface TimelineEventAggregation {\n    aggregation: string;\n    getDate: ((item: AggregationItem) => Date);\n    getDisplay: ((item: AggregationItem) => string);\n    size?: number | ((item: AggregationItem) => number);\n    styles?: {[key: string]: any} | ((item: AggregationItem) => {[key: string]: any});\n}\n\nexport type TimelineData = TimelineSeries | TimelineAggregation | TimelineCombinedAggregations;\n\nexport type TimelineEventData = TimelineEvent[] | TimelineRecords | TimelineEventAggregation;\n\n@Component({\n    selector: 'sq-facet-timeline',\n    templateUrl: './facet-timeline.component.html',\n    styleUrls: ['./facet-timeline.component.scss']\n})\nexport class BsFacetTimelineComponent extends AbstractFacet implements OnChanges {\n    @Input() name = 'Timeline';\n    @Input() results: Results;\n    \n    // By default, we show the standard Timeline aggregation and the list of current records\n    @Input() timeseries: TimelineData[] = [{aggregation: 'Timeline', primary: true}];\n    @Input() events: TimelineEventData[] = [{field: 'modified'}];\n\n    // Initial scale (prior to any zoom)\n    @Input() minDate?: Date;\n    @Input() maxDate?: Date;\n    // Date range to filter aggregations (ignored when combined aggregations are recomputed based on zoomed range)\n    @Input() minAggregationDate?: Date;\n    @Input() maxAggregationDate?: Date;\n    \n    @Input() zoomable = true;\n    @Input() minZoomDays = 1; // Max 1 day scale\n    @Input() maxZoomDays = 365 * 100; // Max 100 years scale\n\n    @Input() width = 600;\n    @Input() height = 200;\n    @Input() margin = {top: 15, bottom: 30, left: 40, right: 15};\n\n    @Input() curveType = \"curveMonotoneX\";\n\n    @Input() showTooltip = true;\n    @Input() theme: \"light\" | \"dark\" = \"light\";\n\n    @Output() eventClicked = new EventEmitter();\n\n    // List of observables (one per timeseries / event type)\n    timeseries$: ReplaySubject[];\n    events$: ReplaySubject[];\n\n    // Combination (combineLastest) of the timeline observables\n    mergedTimeseries$: Observable;\n    mergedEvents$: Observable;\n\n    // Current timeline selection\n    selection?: [Date, Date];\n\n    // Current range (undefined if no zoom / auto-scaling)\n    currentRange?: [Date, Date];\n\n    // Formating method for search queries\n    formatDayRequest = d3.timeFormat(\"%Y-%m-%d\");\n\n    // Actions\n    clearFilters: Action;\n\n    constructor(\n        public facetService: FacetService,\n        public searchService: SearchService,\n        public appService: AppService,\n        public selectionService: SelectionService,\n        public exprBuilder: ExprBuilder,\n        public cdRef: ChangeDetectorRef,\n        public audit: AuditWebService\n    ){\n        super();\n\n        // Update the events when the selection of records changes\n        this.selectionService.events.subscribe(event => {\n            const i = this.events.findIndex(e => (e as TimelineRecords).field);\n            if(i !== -1) {\n                this.events$[i].next(this.getRecordsAsEvents(this.events[i] as TimelineRecords));\n            }\n        });\n        \n        // Clear the current filters\n        this.clearFilters = new Action({\n            icon: \"far fa-minus-square\",\n            title: \"msg#facet.clearSelects\",\n            action: () => {\n                this.selection = undefined;\n                this.searchService.query.removeSelect(this.name);\n                this.searchService.search();\n            }\n        });\n\n    }\n\n    getMinDate(): Date | undefined {\n        return this.currentRange? this.currentRange[0] : this.minDate;\n    }\n\n    getMaxDate(): Date | undefined {\n        return this.currentRange? this.currentRange[1] : this.maxDate;\n    }\n\n    get actions(): Action[] {\n        const actions: Action[] = [];\n        if(this.facetService.hasFiltered(this.name)){\n            actions.push(this.clearFilters);\n        }\n        return actions;\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n\n        // Retrieve the current active selection for this timeline (if any)\n        const select = this.searchService.query.findSelect(this.name);\n\n        // Update the selection if it is not already set (which is the case on a page refresh)\n        if(select && !this.selection) {\n            let parsedexpr = this.appService.parseExpr(select.expression) as Expr;\n            if(!Utils.isString(parsedexpr)){\n                while(!parsedexpr.isLeaf){ // The select might over multiple fields (modified between [...] AND created between [...])\n                    parsedexpr = parsedexpr.operands[0];\n                }\n                if(parsedexpr.values){\n                    this.selection = [new Date(parsedexpr.values[0]), new Date(parsedexpr.values[1])];\n                }\n            }\n        }\n        // If no active selection we remove the selection from the timeline, along with the current zoomed range\n        else if(!select) {\n            this.selection = undefined; // If no select, it was possibly removed by the user, we need to update our selection\n            this.currentRange = undefined; // current range is set by zoom events, we want to reset it only if there are no select (ie. no user interaction)\n        }\n\n        // Initialize timeseries\n        if(!this.timeseries$ || changes[\"timeseries\"]) {\n            // Create one observable per timeline\n            this.timeseries$ = this.timeseries.map(_ => new ReplaySubject(1));\n            this.mergedTimeseries$ = combineLatest(this.timeseries$);\n        }\n\n        this.updateTimeseries();\n\n        // Initialize events\n        if(!this.events$ || changes[\"events\"]) {\n            this.events$ = this.events.map(_ => new ReplaySubject(1));\n            this.mergedEvents$ = combineLatest(this.events$).pipe(\n                map(events => ([] as TimelineEvent[]).concat(...events))\n            );\n        }\n\n        this.updateEvents();\n        \n    }\n\n    /**\n     * For each timeseries configuration given as an input,\n     * update the data via the list of observables (timelines$)\n     */\n    updateTimeseries() {\n        this.timeseries.forEach((config, i) => {\n\n            const subject = this.timeseries$[i];\n\n            if((config as TimelineSeries).dates !== undefined) {\n                subject.next(config as TimelineSeries);\n            }\n\n            else {\n                let agg = config as TimelineAggregation;\n                if(agg.aggregation === undefined){\n                    \n                    config = config as TimelineCombinedAggregations;\n                    // We want to set the default scale if it hasn't been set before\n                    // or if no zoom/selection has been made (so current scale may not be adapted to the new results)\n                    if(!this.currentRange || !config.current){\n                        config.current = config.default;\n                    }\n\n                    agg = config.current;\n                }\n                \n                const range: [Date, Date] | undefined = !!this.minAggregationDate && !!this.maxAggregationDate ?\n                    [this.minAggregationDate, this.maxAggregationDate] : undefined;\n\n                this.getTimeseries(agg, range).subscribe({\n                    next: d => subject.next(d),\n                    error: err => subject.error(err)\n                });\n            }\n\n        });\n    }\n\n    /**\n     * For each event configuration given as an input, \n     * update the data via the list of observables (events$)\n     */\n    updateEvents() {\n        this.events.forEach((config, i) => {\n            const subject = this.events$[i];\n\n            if((config as TimelineRecords).field) {\n                subject.next(this.getRecordsAsEvents(config as TimelineRecords));\n            }\n            else if((config as TimelineEventAggregation).aggregation){\n                this.getEventAggregation(config as TimelineEventAggregation).subscribe({\n                    next: t => subject.next(t),\n                    error: err => subject.error(err)\n                });\n            }\n            else if(Array.isArray(config)){\n                subject.next(config as TimelineEvent[]);\n            }\n        });\n    }\n\n    /**\n     * Get a timeseries aggregation via the getAggregation method.\n     * @param config \n     * @param subject \n     * @param range \n     */\n    getTimeseries(config: TimelineAggregation, range?: [Date, Date]): Observable {\n        return this.getAggregation(config.aggregation, range).pipe(\n            map(d => BsFacetTimelineComponent.createTimeseries(config, d.aggregation, d.ccaggregation, range))\n        );\n    }\n\n    /**\n     * Get an aggregation of events via the getAggregation method\n     * @param config \n     * @param subject \n     */\n    getEventAggregation(config: TimelineEventAggregation): Observable {\n        return this.getAggregation(config.aggregation).pipe(\n            map(d => BsFacetTimelineComponent.createAggregationEvents(config, d.aggregation, d.ccaggregation))\n        );\n    }\n\n    /**\n     * Returns the list of records from the results as a list of TimelineEvent when they have a\n     * modified date. The size and styles of the events are determined from the given configuration (TimelineRecords)\n     * @param config \n     */\n    getRecordsAsEvents(config: TimelineRecords): TimelineEvent[] {\n        if(this.results) {\n            return this.results.records\n                .filter(r => !!Utils.toDate(r[config.field]))\n                .map(r => {\n                    return {\n                        id: r.id,\n                        date: Utils.toDate(r[config.field])!,\n                        size: !config.size? 6 : typeof config.size === 'function'? config.size(r, r.$selected) : config.size,\n                        styles: !config.styles? BsFacetTimelineComponent.defaultRecordStyle(r.$selected) :\n                                typeof config.styles === 'function'? config.styles(r, r.$selected) : \n                                config.styles,\n                        display: config.display? config.display(r) : r.title,\n                        // Custom property for click action\n                        record: r\n                    }\n                });\n        }\n        return [];\n    }\n\n\n    /**\n     * returns an aggregation and its configuration either directly from the facet service of\n     * by fetching it from the server.\n     * @param aggregationName \n     * @param range \n     */\n    getAggregation(aggregationName: string, range?: [Date, Date]): Observable {\n        \n        const ccaggregation = this.appService.getCCAggregation(aggregationName);\n        const aggregation = this.facetService.getAggregation(aggregationName, this.results);\n        \n        if(aggregation && ccaggregation) {\n            return of({aggregation: aggregation, ccaggregation: ccaggregation});\n        }\n\n        else if(ccaggregation) {\n            return this.fetchAggregation(aggregationName, ccaggregation, range).pipe(\n                map(agg => {return {aggregation: agg, ccaggregation: ccaggregation} })\n            );\n        }\n\n        else {\n            throw new Error(`Aggregation ${aggregationName} does not exist in the Query web service`);\n        }\n    }\n\n    /**\n     * Get an aggregation from the server, filtering by range if provided\n     * @param aggregation \n     * @param ccaggregation \n     * @param range \n     */\n    fetchAggregation(aggregation: string, ccaggregation: CCAggregation, range?: [Date, Date]): Observable {\n        const query = Utils.copy(this.searchService.query);\n        query.action = \"aggregate\";\n        query.aggregations = [aggregation];\n\n        if(range){\n            query.addSelect(`${ccaggregation.column}:[${this.formatDayRequest(range[0])}..${this.formatDayRequest(range[1])}]`);\n        }\n\n        return this.searchService.getResults(query, undefined, {searchInactive: true}).pipe(\n            map(results => results.aggregations[0])\n        );\n    }\n\n    /**\n     * Given a combined aggregation configuration and a range, this method searches for the most \n     * adapted aggregation scale (years, months, weeks or days) and updates the data if necessary.\n     * @param config \n     * @param range \n     * @param iTimeseries \n     */\n    updateCombinedAggregation(config: TimelineCombinedAggregations, range: [Date, Date], timeseries$: ReplaySubject) {\n        const nmonths = d3.timeMonth.count(range[0], range[1]);\n\n        if(!config.maxNMonths || config.maxNMonths.length !== config.aggregations.length) {\n            console.error(config);\n            throw new Error(\"maxNMonths and aggregations must have the same number of items\");\n        }\n\n        // Find the aggregation with min maxNMonths with maxNMonths >= nmonths\n        let jMin;\n        config.maxNMonths.forEach((maxNMonths, j) => {\n            if(maxNMonths >= nmonths && (jMin === undefined || maxNMonths  this.currentRange[1])) {\n\n            config.current = bestAggregation;\n            this.getTimeseries(bestAggregation, range).subscribe({\n                next: d => timeseries$.next(d),\n                error: err => timeseries$.error(err)\n            });\n        }\n\n    }\n\n\n    // Interaction callbacks\n\n    /**\n     * On selection is triggered when the user selects a range of dates on the timeline.\n     * This has the effect of updating the query.select (either remove it or add/replace it)\n     * and it updates the search.\n     * @param selection \n     */\n    onSelectionChange(selection: [Date, Date] | undefined) {\n        this.selection = selection;\n        if(selection) {\n            const from = this.formatDayRequest(selection[0]);\n            const to = this.formatDayRequest(selection[1]);\n\n            const exprs: string[] = [];\n            this.searchService.query.removeSelect(this.name);\n\n            this.timeseries.forEach((config) => {\n                    \n                if((config as TimelineAggregation).aggregation !== undefined \n                || (config as TimelineCombinedAggregations).default !== undefined) {\n\n                    const aggregation = (config as TimelineAggregation).aggregation || (config as TimelineCombinedAggregations).default.aggregation;\n                    const ccaggregation = this.appService.getCCAggregation(aggregation);\n                    if(ccaggregation) {\n                        exprs.push(this.exprBuilder.makeRangeExpr(ccaggregation.column, from, to));\n                    }\n                }\n\n            });\n\n            if(exprs.length > 0) {\n                const expr = this.exprBuilder.concatOrExpr(exprs);\n                this.searchService.query.addSelect(expr, this.name);\n                this.searchService.search(undefined, {type:AuditEventType.Search_Timeline_Usage, detail: { from, to }});\n            }            \n        }\n\n        else if(this.searchService.query.findSelect(this.name)) {\n            this.searchService.query.removeSelect(this.name);\n            this.searchService.search();\n        }\n    }\n\n    /**\n     * On range is triggered when the user zooms in our out on the timeline,\n     * which triggers a dynamic update of the combined aggregation timelines.\n     * @param range \n     */\n    onRangeChange(range: [Date, Date]) {\n\n        this.timeseries.forEach((config, i) => {\n            if((config as TimelineCombinedAggregations).aggregations !== undefined) {\n                this.updateCombinedAggregation(config as TimelineCombinedAggregations, range, this.timeseries$[i]);\n            }\n        });\n\n        // Note: updateCombinedAggregation() compares currentRange and range\n        // So this update must be kept after the forEach\n        this.currentRange = range;        \n    }\n\n    /**\n     * When an event is clicked, the event is propagated to the parent, and the tooltip is closed\n     * @param event \n     * @param closeTooltip \n     */\n    onEventClicked(event: TimelineEvent, closeTooltip: () => void) {\n        this.eventClicked.next(event);\n        closeTooltip();\n        return false;\n    }\n\n\n    // Static utility methods\n    \n    \n    /**\n     * Create a time series object from its config, data (aggregation) and configuration (ccaggregation)\n     * @param config \n     * @param aggregation \n     * @param ccaggregation \n     */\n    static createTimeseries(config: TimelineAggregation, aggregation: Aggregation, ccaggregation: CCAggregation, range?: [Date, Date]): TimelineSeries {\n        return {\n            name: config.name || aggregation.name,\n            primary: config.primary,\n            dates: this.createDatapoints(aggregation.items, ccaggregation?.mask, range),\n            lineStyles: config.lineStyles,\n            areaStyles: config.areaStyles\n        }\n    }\n\n    /**\n     * Create a list of events from its config, data (aggregation) and configuration (ccaggregation)\n     * @param config \n     * @param aggregation \n     * @param ccaggregation \n     */\n    static createAggregationEvents(config: TimelineEventAggregation, aggregation: Aggregation, ccaggregation: CCAggregation): TimelineEvent[] {\n        return !aggregation.items? [] : aggregation.items.map(item => {\n            return {\n                id: config.getDate(item).toUTCString()+\"|\"+config.getDisplay(item),\n                date: config.getDate(item),\n                size: !config.size? 6 : typeof config.size === 'function'? config.size(item) : config.size,\n                styles: !config.styles? undefined :\n                        typeof config.styles === 'function'? config.styles(item) : \n                        config.styles,                \n                display: config.getDisplay(item),\n\n                // Custom params for click action\n                item: item,\n                aggregation: aggregation,\n                ccaggregation: ccaggregation\n            }\n        });\n    }\n\n    /**\n     * This methods transforms a raw list of aggregation items into\n     * a time series completed with zeros, following the below scheme:\n     * Aggregation:  [    # #         # # #   #     # #       # # #    ]\n     * Series:       [  0 # # 0     0 # # # 0 # 0 0 # # 0   0 # # # 0  ]\n     * @param items \n     * @param resolution \n     */\n    static createDatapoints(items: AggregationItem[] | undefined, resolution: string, range?: [Date, Date]): TimelineDate[] {\n\n        if(!items) {\n            return [];\n        }\n\n        const timeInterval = this.getD3TimeInterval(resolution);\n        \n        const series: TimelineDate[] = [];\n\n        const _items = items\n            .map(item => {\n                if(!!item.value && !(item.value instanceof Date)){\n                    const val = item.value.toString();\n                    item.value = moment(val.length  undefined; // So it gets filtered out\n                    }\n                }\n                return item;\n            })\n            .filter(item => !!item.value && (!range || ((item.value as Date) >= range[0] && (item.value as Date)  {\n            const date = item.value as Date;\n            \n            if(i === 0 || timeInterval.offset(series[series.length-1].date, 1)  item.date = this.shiftDate(item.date, resolution));\n\n        return series;\n    }\n\n    \n    /**\n     * Shift the date to the middle of their time bracket (2020 = middle of the year, April = middle of the month, etc.)\n     * @param date \n     * @param resolution \n     */\n    static shiftDate(date: Date, resolution: string): Date {\n        switch(resolution){\n            case \"YYYY-MM-DD\": return d3.timeHour.offset(date, 12);\n            case \"YYYY-WW\": return d3.timeHour.offset(date, 84); // 3*24 + 12\n            case \"YYYY-MM\": return d3.timeDay.offset(date, 15);\n            case \"YYYY\": return d3.timeMonth.offset(date, 6);\n        }\n        return date;\n    }\n\n\n    static getD3TimeInterval(resolution: string): d3.CountableTimeInterval {\n        switch(resolution){\n            case \"YYYY-MM-DD\": return d3.timeDay;\n            case \"YYYY-WW\": return d3.timeWeek;\n            case \"YYYY-MM\": return d3.timeMonth;\n            case \"YYYY\": return d3.timeYear;\n        }\n        return d3.timeDay;\n    }\n\n    static defaultRecordStyle(selected: boolean): {[key: string]: any} {\n        return {\n            'fill': selected? 'red' : 'green',\n            'stroke': selected? 'red' : undefined,\n            'stroke-width': selected? '2px' : undefined\n        };\n    }\n}\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/TimelineSeries.html":{"url":"interfaces/TimelineSeries.html","title":"interface - TimelineSeries","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  TimelineSeries\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            timeline/bootstrap/timeline.component.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        areaStyles\n                                \n                                \n                                        dates\n                                \n                                \n                                            Optional\n                                        lineStyles\n                                \n                                \n                                        name\n                                \n                                \n                                        primary\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        areaStyles\n                                    \n                                \n                                \n                                    \n                                        areaStyles:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        dates\n                                    \n                                \n                                \n                                    \n                                        dates:         TimelineDate[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         TimelineDate[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        lineStyles\n                                    \n                                \n                                \n                                    \n                                        lineStyles:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        name\n                                    \n                                \n                                \n                                    \n                                        name:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        primary\n                                    \n                                \n                                \n                                    \n                                        primary:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Component, Input, Output, ElementRef, ViewChild, OnChanges, AfterViewInit, EventEmitter, SimpleChanges, OnDestroy, SimpleChange, ContentChild, TemplateRef, ChangeDetectorRef } from '@angular/core';\nimport { Subscription } from 'rxjs';\nimport * as d3 from 'd3';\n\nimport { IntlService } from '@sinequa/core/intl';\nimport {Record} from '@sinequa/core/web-services';\n\n\nexport interface TimelineDate {\n    date: Date;\n    value: number;\n}\n\nexport interface TimelineSeries {\n    name: string;\n    dates: TimelineDate[];\n    primary: boolean;\n    lineStyles?: {[key:string]: any};\n    areaStyles?:  {[key:string]: any};\n}\n\nexport interface TimelineEvent {\n    date: Date;\n    id: string;\n    display: string;\n    size?: number;\n    sizeOpened?: number;\n    styles?: {[key:string]: any};\n    record?: Record;\n}\n\n@Component({\n    selector: 'sq-timeline',\n    templateUrl: './timeline.component.html',\n    styleUrls: ['./timeline.component.scss']\n})\nexport class BsTimelineComponent implements OnChanges, AfterViewInit, OnDestroy {\n\n    @Input() data?: TimelineSeries[];\n    @Input() events?: TimelineEvent[];\n\n    @Input() selection?: [Date, Date];\n\n    // Initial scale (prior to any zoom)\n    @Input() minDate?: Date;\n    @Input() maxDate?: Date;\n\n    @Input() zoomable = true;\n    @Input() minZoomDays = 1; // Max 1 day scale\n    @Input() maxZoomDays = 365 * 100; // Max 100 years scale\n\n    @Input() width = 600;\n    @Input() height = 200;\n    @Input() margin = {top: 15, bottom: 30, left: 40, right: 15};\n\n    @Input() curveType = \"curveMonotoneX\";\n\n    @Input() showTooltip = true;\n    @Input() theme: \"light\" | \"dark\" = \"light\";\n\n    @Output() selectionChange = new EventEmitter();\n    @Output() rangeChange = new EventEmitter();\n\n    @ContentChild(\"tooltipTpl\", {static: false}) tooltipTpl: TemplateRef;\n\n    // Data\n    groupedEvents: TimelineEvent[][] = [];\n\n    // Scales\n    x: d3.ScaleTime; // Read/Write\n    xt: d3.ScaleTime; // Transformed X axis due to Zoom\n    y: d3.ScaleLinear; // Read-only / domain updated\n\n    // Shapes\n    area: d3.Area; // Read only\n    line: d3.Line; // Read only\n\n    // Behaviors\n    brushBehavior: d3.BrushBehavior; // Read only\n    zoomBehavior: d3.ZoomBehavior; // Read/Write\n    brushSelection: [number, number] | null;\n    currentSelection?: Date[]; // Read/Write\n\n    // Elements\n    @ViewChild(\"xAxis\") gx: ElementRef;\n    @ViewChild(\"yAxis\") gy: ElementRef;\n    @ViewChild(\"brush\") gbrush: ElementRef;\n    \n    // Selections\n    xAxis$: d3.Selection;\n    yAxis$: d3.Selection;\n    brush$: d3.Selection;\n    grips$: d3.Selection;\n        \n    // Tooltip\n    tooltipItem: TimelineEvent[] | undefined;\n    tooltipX: number | undefined;\n    tooltipOrientation: \"left\" | \"right\";\n    tooltipTop: number;\n    tooltipRight: number;\n    tooltipLeft: number;\n\n    // Misc\n    viewInit: boolean;\n    intlSubscription: Subscription;\n    static counter = 0;\n    instance: number;\n    \n    zooming: boolean;\n    brushing: boolean;\n\n    constructor(\n        protected el: ElementRef,\n        protected intlService: IntlService,\n        protected cdRef: ChangeDetectorRef\n    ){\n        // When the locale changes, we rebuild the X scale and axis\n        this.intlSubscription = this.intlService.events.subscribe(e => this.updateXAxis());\n        \n        this.instance = BsTimelineComponent.counter++;\n        \n    }\n\n    get innerWidth(): number {\n        return this.width - this.margin.left - this.margin.right;\n    }\n\n    get innerHeight(): number {\n        return this.height - this.margin.top - this.margin.bottom;\n    }\n\n    // Note: ngOnChanges is always called once before ngAfterViewInit\n    ngOnChanges(changes: SimpleChanges) {\n\n        if(!this.x) {\n            \n            // Scales\n            this.x = d3.scaleUtc()\n                .range([0, this.innerWidth]);\n            this.xt = this.x;\n\n            this.y = d3.scaleLinear()\n                .range([this.innerHeight, 0]);\n                \n            // Shapes\n            this.area = d3.area()\n                .curve(d3[this.curveType])\n                .x(d => this.xt(d.date))\n                .y0(this.y(0))\n                .y1(d => this.y(d.value));\n                \n            this.line = d3.line()\n                .curve(d3[this.curveType])\n                .x(d => this.xt(d.date))\n                .y(d => this.y(d.value));\n                \n            // Behaviors\n            this.brushBehavior = d3.brushX()\n                .extent([[0, 0], [this.innerWidth, this.innerHeight]])\n                .on(\"start\", () => this.brushing = true)\n                .on('brush', () => this.onBrush())\n                .on('end', () => this.onBrushEnd());\n        }\n\n        // Resize handling\n\n        if(changes[\"height\"]) {\n            this.y.range([this.innerHeight, 0]);\n            this.area.y0(this.y(0));\n            this.brushBehavior.extent([[0, 0], [this.innerWidth, this.innerHeight]]);\n            if(this.viewInit) {\n                this.drawYAxis();\n                this.brush$.call(this.brushBehavior);\n                this.grips$.selectAll(\"path\").attr(\"d\", this.drawGrips);\n            }\n        }\n\n        if(changes[\"width\"]) {\n            this.x.range([0, this.innerWidth]);\n            this.brushBehavior.extent([[0, 0], [this.innerWidth, this.innerHeight]]);\n            if(this.viewInit) {\n                this.drawXAxis();\n                if(!changes[\"height\"]) {\n                    this.brush$.call(this.brushBehavior);\n                    this.grips$.selectAll(\"path\").attr(\"d\", this.drawGrips);\n                }\n            }\n        }\n\n        // If the parent changes the selection, we want to update it\n        // If not, we keep the current selection as is\n        // (Important to keep this statement outside of the if bellow since \n        // the change of selection can be combined with a change of data)\n        const selectionChanged = changes[\"selection\"] && this.updateSelection();\n\n        // Only changes in data result in redrawing the chart\n        // (other input, except selection, are expected to be static)\n        if(this.viewInit && changes[\"data\"] && this.checkDataChanges(changes[\"data\"])){\n            this.updateChart();\n        }\n\n        // If the parent changes the selection (even though the data hasn't changed), \n        // we want to update the brush.\n        // If not, we keep the current selection as is.\n        // We can update the brush only if the view is initialized (viewInit).\n        else if(this.viewInit && ((changes[\"selection\"] && selectionChanged) || changes[\"width\"])) {\n            this.updateBrush();\n        }\n\n        if(changes[\"events\"]) {\n            this.updateEvents();\n        }\n        \n    }\n\n    // Note: In onAfterViewInit we can access gx, gy, etc., obtained with @ViewChild.\n    // At this point we can initialize all the primitives and call updateChart()\n    ngAfterViewInit() {\n\n        // Get native elements\n        this.xAxis$ = d3.select(this.gx.nativeElement);\n        this.yAxis$ = d3.select(this.gy.nativeElement);\n        this.brush$ = d3.select(this.gbrush.nativeElement);\n\n        this.brush$\n            .call(this.brushBehavior)\n            .on(\"mousemove\", () => this.onMousemove())\n            .on(\"mouseout\", () => this.onMouseout());\n                        \n        // Add 2 \"grips\" to the brush goup, on each side of the rectangle\n        // Grips are inserted programmatically to appear on top the brush selection\n        this.grips$ = this.brush$.selectAll(\".grip\")\n            .data([{type: \"w\"}, {type: \"e\"}])\n            .enter()\n            .append(\"g\")\n            .attr(\"class\", \"grip\")\n            .attr(\"display\", \"none\");\n            \n        this.grips$.append(\"path\")\n            .attr(\"d\", this.drawGrips);\n\n        this.grips$.append(\"text\")\n            .attr(\"class\", \"grip-text\")\n            .attr(\"text-anchor\", d => d.type === \"w\"? 'end' : 'start')\n            .attr(\"x\", d => d.type === \"w\"? -5 : 5)\n            .attr(\"y\", 10);\n\n        this.viewInit = true;\n\n        this.updateChart();\n\n        // This is necessary to prevent \"Expression has changed after check\" errors\n        // caused by calling updateChart inside ngAfterViewInit().\n        // Unfortunately this is necessary because we need the DOM to be rendered in order fill the DOM\n        // (for example gAxis needs to exist so we can draw the axis)\n        this.cdRef.detectChanges();\n    }\n\n    /**\n     * Redraw the graph (needs to be called after ngAfterViewInit so that the DOM elements\n     * are accessible)\n     */\n    updateChart() {\n\n        this.turnoffTooltip();\n\n        if(this.data && this.data.length) {\n\n            // Update scales\n            // Note: does not stop the update process even if the data is invalid/empty\n            this.updateScales(this.data);\n\n            // Update Axes\n            this.updateAxes();\n            \n            // Update Zoom\n            this.updateZoom();\n\n            // Update brush\n            this.updateBrush();\n\n        }\n        \n    }\n\n\n    /**\n     * Update the x & y scales, based on the input data\n     * @param data \n     */\n    protected updateScales(data: TimelineSeries[]) {\n\n        // Set x and y scales with the primary series (or first one)\n        const primarySeries = data.filter(s => s.primary) || [data[0]];\n        const allPrimaryDates = ([] as TimelineDate[]).concat(...primarySeries.map(s => s.dates));\n\n        const xExtent = d3.extent(allPrimaryDates, d => d.date);\n        const yMax = d3.max(data, \n            s => d3.max(s.dates, d => d.value));\n\n        if(!xExtent[0] || !xExtent[1] || !yMax) {\n            if (allPrimaryDates.length !== 0) {\n                console.error('Invalid timeseries', primarySeries);\n            }\n            this.x.domain(this.xt.domain());\n            this.xt = this.x;\n            return;\n        }\n\n        if(this.minDate) {\n            xExtent[0] = this.minDate;\n        }\n\n        if(this.maxDate) {\n            xExtent[1] = this.maxDate;\n        }\n\n        this.x.domain(xExtent);\n        this.xt = this.x;\n        this.y.domain([0, yMax*1.1]);\n    }\n\n    /**\n     * Update the x and y axes\n     */\n    protected updateAxes(){\n        this.drawXAxis();\n        this.drawYAxis();\n    }\n\n    /**\n     * The events are drawn in the template directly. This method simply\n     * updates the grouping of events (when they are close to each other)\n     */\n    protected updateEvents() {\n        this.groupedEvents = this.groupEvents(5);\n    }\n\n    /**\n     * Update/reset the zoom behavior when new data comes in (and new scales, axes...)\n     */\n    protected updateZoom() {\n        \n        if(!this.zoomable) {\n            return;\n        }\n\n        // Reset the previous zoom !\n        if(this.zoomBehavior){\n            this.zoomBehavior.on(\"zoom\", null);\n            this.zoomBehavior.on(\"end\", null);\n            this.zoomBehavior.transform(this.brush$, d3.zoomIdentity);\n        }\n        \n        // Compute the minimum and maximum zoom\n        const xDomain = this.x.domain();\n        const scaleExtent = (xDomain[1].getTime() - xDomain[0].getTime()) / 86400000; // current number of days on the scale\n\n        // Create the behavior\n        this.zoomBehavior = d3.zoom()\n            .extent([[0, 0], [this.innerWidth, this.innerHeight]])\n            .scaleExtent([scaleExtent/this.maxZoomDays, scaleExtent/this.minZoomDays])\n            .on(\"zoom\", () => this.onZoom())\n            .on(\"end\", () => this.onZoomEnd());\n        \n        // Apply on to the brush element\n        this.brush$\n            .call(this.zoomBehavior)\n            .on(\"mousedown.zoom\", null) // Deactivate mouse event (taken by brush)\n            .on(\"touchstart.zoom\", null)\n            .on(\"touchmove.zoom\", null)\n            .on(\"touchend.zoom\", null);\n        \n    }\n\n    /**\n     * Updates the brush (or hides it if no currentSelection),\n     * following a change of x scale.\n     */\n    protected updateBrush() {\n        if(this.currentSelection) {\n            const selection: [number, number] = [this.xt(this.currentSelection[0]), this.xt(this.currentSelection[1])];\n            this.brush$.call(this.brushBehavior.move, selection);\n        }\n        else {\n            this.brush$.call(this.brushBehavior.move, null);\n        }\n    }\n\n    /**\n     * This method tests whether the input selection is different from the currentSelection\n     * and updates it. It returns true if there is actually a change.\n     */\n    protected updateSelection(): boolean {\n        const change = this.checkSelectionChange(this.selection, this.currentSelection);\n        this.currentSelection = this.selection;\n        return change;\n    }\n\n    /**\n     * Recreate the x scale and axes (in the event of a language change)\n     */\n    protected updateXAxis(){        \n        this.x = d3.scaleUtc()\n            .domain(this.x.domain())\n            .range(this.x.range());\n        \n        this.xt = d3.scaleUtc()\n            .domain(this.xt.domain())\n            .range(this.xt.range());\n\n        this.drawXAxis();\n    }\n\n    /**\n     * Draws the X axis\n     */\n    protected drawXAxis() {        \n        this.xAxis$.call(d3.axisBottom(this.xt));\n        this.xAxis$.selectAll(\".domain\").remove(); // Remove the axis line\n    }\n\n    /**\n     * Draws the Y axis\n     */\n    protected drawYAxis() {\n        const yAxisTicks = this.y.ticks()\n            .filter(tick => Number.isInteger(tick)); // Keep only integer ticks https://stackoverflow.com/questions/13576906/d3-tick-marks-on-integers-only/56821215\n\n        const yAxis = d3.axisLeft(this.y)\n            .tickValues(yAxisTicks)\n            .tickFormat(d3.format(\"~s\")); //https://github.com/d3/d3-format\n        this.yAxis$.call(yAxis);\n        this.yAxis$.selectAll(\".domain\").remove(); // Remove the axis line\n    }\n    \n    /**\n     * Updates the display of the brush's grips when the brush has moved\n     * @param selection \n     */\n    protected updateGrips(selection: [number, number] | null) {\n        if (!selection) {\n            this.grips$.attr(\"display\", \"none\");\n        }\n        else {\n            this.grips$\n                .attr(\"display\", null)\n                .attr(\"transform\", (d, i) => \"translate(\" + selection[i] + \")\");\n            this.grips$.selectAll('.grip-text')\n                .text(d => this.intlService.formatDate(this.xt.invert(selection[d.type === 'w'? 0 : 1])));\n        }\n    }\n\n\n    // Interaction callbacks\n\n    onBrush() {\n        this.turnoffTooltip();\n        this.brushSelection = d3.brushSelection(this.gbrush.nativeElement) as [number, number] | null;\n        this.updateGrips(this.brushSelection);\n    }\n\n    onBrushEnd(){\n        this.brushing = false;\n        this.onBrush();\n        const newSelection = this.brushSelection?.sort((a,b)=>a-b).map(this.xt.invert);\n        if(this.checkSelectionChange(this.currentSelection, newSelection)) {\n            this.currentSelection = newSelection;\n            this.selectionChange.next(this.currentSelection);\n        }\n    }    \n\n    onZoom(){\n\n        this.turnoffTooltip();\n\n        this.zooming = true;\n\n        // Create a transformed scale without modifying the original (to enforce the limit of scaleExtent)\n        const transform = d3.zoomTransform(this.brush$.node() as Element);\n        this.xt = transform.rescaleX(this.x);\n\n        // Redraw the axis\n        this.drawXAxis();\n            \n        // Update the brush position\n        if(this.currentSelection){\n            const selection: [number, number] = [this.xt(this.currentSelection[0]), this.xt(this.currentSelection[1])];\n            this.brushBehavior.move(this.brush$, selection);\n        }\n\n    }\n\n    onZoomEnd(){\n        this.zooming = false;\n\n        // At the end of a zoom, we need to reorganize the grouping of events\n        this.updateEvents();\n\n        // Fire an event\n        this.rangeChange.next(this.xt.domain());\n    }\n\n    /**\n     * Redraw the simple tooltip (vertical line)\n     */\n    onMousemove() {\n        if(!this.tooltipItem && this.showTooltip) {\n            this.tooltipX = d3.mouse(this.gbrush.nativeElement)[0];\n        }\n    }\n\n    /**\n     * Remove the simple tooltip (vertical line)\n     */\n    onMouseout() {\n        if(!this.tooltipItem) {\n            this.tooltipX = undefined\n        }\n    }\n\n    /**\n     * Responds to a click on an event (triangle) by essentially turning tooltip on/off\n     * @param event \n     */\n    onEventClick(event: TimelineEvent[]) {\n\n        if(this.tooltipItem === event) {\n            this.turnoffTooltip();\n        }\n\n        else {\n\n            if(this.tooltipItem) {\n                this.turnoffTooltip();\n            }\n\n            this.tooltipItem = event;\n            this.tooltipX = this.xt(event[0].date);\n\n            // Since we use viewBox to auto-adjust the SVG to the container size, we have to\n            // convert from the SVG coordinate system to the HTML coordinate system\n            const x = this.margin.left + this.tooltipX;\n            const actualWidth = (this.el.nativeElement as HTMLElement).offsetWidth;\n            const scale = actualWidth / this.width;\n            const relativeX = x / this.width;\n\n            // Tooltip to the right\n            if(relativeX  {\n        if(this.tooltipItem) {\n            this.tooltipItem = undefined;\n            this.tooltipX = undefined;\n        }\n    }\n\n    ngOnDestroy(){\n        this.intlSubscription.unsubscribe();\n    }\n\n    // Utilities\n\n    /**\n     * Transforms the input list of events into a list of list, by grouping events within a bin\n     * when their dates are close together. This closeness is measured in \"pixel per event\".\n     * Note: this currently uses a histogram-like algorithm, which could probably be improved (clustering?)\n     * @param pixPerEvent \n     */\n    protected groupEvents(pixPerEvent: number): TimelineEvent[][] {\n        const events: TimelineEvent[][] = [];\n\n        if(this.events) {\n            const nbins = Math.floor(this.innerWidth / pixPerEvent);\n            const domain = this.xt.domain();\n            const timeinterval = (domain[1].getTime() - domain[0].getTime()) / nbins;\n            this.events.concat()\n                .sort((a,b) => a.date.getTime() - b.date.getTime())\n                .forEach(event => {\n                    if(events.length === 0) {\n                        events.push([event]);\n                    }\n                    else {\n                        const last = events[events.length-1];\n                        const lastbin = Math.floor(last[0].date.getTime() / timeinterval);\n                        const bin = Math.floor(event.date.getTime() / timeinterval);\n                        if(bin === lastbin) {\n                            last.push(event);\n                        }\n                        else {\n                            events.push([event]);\n                        }\n                    }\n                });\n        }\n\n        return events;\n    }\n\n    /**\n     * Return true if there are actual changes in the data\n     * (in particular will ignore data refresh which change nothing)\n     * @param change \n     */\n    protected checkDataChanges(change: SimpleChange): boolean {\n        const previousValue = change.previousValue as TimelineSeries[] | undefined;\n        const currentValue = change.currentValue as TimelineSeries[] | undefined;\n        \n        // Ignore null/undefined difference cause by | async\n        // See: https://github.com/angular/angular/issues/16982\n        if(currentValue === null && previousValue === undefined || currentValue === undefined && previousValue === null)\n            return false;\n\n        // Else, if one of them is null/undefined (or difference in length), there's clearly a change\n        if(!previousValue || !currentValue || previousValue.length !== currentValue.length)\n            return true;\n        \n        // If both defined and same size, we need to compare the data piece by piece\n        for(let i=0; i {\n        const gripHeight = Math.min(10, Math.max((this.innerHeight) / 8, 4));\n        const gripWidth = gripHeight;\n\n        const x = -gripWidth / 2;\n        const y = this.innerHeight / 2 - gripHeight / 2;\n\n        const path =\n            'M ' + x + ' ' + y +\n            ' l ' + -gripWidth + ' ' + gripHeight / 2 +\n            ' l ' + gripWidth + ' ' + gripHeight / 2 + ' z ' +\n            'M ' + -x + ' ' + y +\n            ' l ' + gripWidth + ' ' + gripHeight / 2 +\n            ' l ' + -gripWidth + ' ' + gripHeight / 2 + ' z ' +\n            'M 0 ' + 0 + ' l 0 ' + this.innerHeight + ' z ';\n        return path;\n    }\n\n    /**\n     * Returns the size of the triangle drawn for one event (or a group of events)\n     * @param events \n     */\n    eventSize(events: TimelineEvent[]): number {\n        if(events!==this.tooltipItem) {\n            return events[0].size || 6;\n        }\n        else {\n            return events[0].sizeOpened || (events[0].size || 6)*2;\n        }\n    }\n\n    /**\n     * Return a string containing the path coordinates of a triangle for a given event (or group of events)\n     * @param events \n     * @param size \n     */\n    drawEvents(events: TimelineEvent[], size: number): string {\n        const x = this.xt(events[0].date);\n        return 'M ' + x + ' ' + (this.innerHeight - 3*size/2) +\n            ' l ' + -size + ' ' + (3*size/2) +\n            ' l ' + (2*size) + ' ' + 0 + ' z ';\n    }\n}\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/VisEvent.html":{"url":"interfaces/VisEvent.html","title":"interface - VisEvent","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  VisEvent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            network/network.component.ts\n        \n\n            \n                Description\n            \n            \n                Structure of the events emitted by the Vis.js network\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        edges\n                                \n                                \n                                        event\n                                \n                                \n                                        items\n                                \n                                \n                                        nodes\n                                \n                                \n                                        pointer\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        edges\n                                    \n                                \n                                \n                                    \n                                        edges:     string[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        event\n                                    \n                                \n                                \n                                    \n                                        event:         any\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         any\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        items\n                                    \n                                \n                                \n                                    \n                                        items:     any[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     any[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        nodes\n                                    \n                                \n                                \n                                    \n                                        nodes:     string[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        pointer\n                                    \n                                \n                                \n                                    \n                                        pointer:         any\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         any\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Component, Input, OnChanges, SimpleChanges, OnDestroy, Output, EventEmitter, ContentChild, TemplateRef } from '@angular/core';\nimport { FormGroup, FormControl, FormBuilder } from '@angular/forms';\nimport { Subscription, combineLatest } from 'rxjs';\n\nimport { Results } from '@sinequa/core/web-services';\nimport { AppService, ExprBuilder } from '@sinequa/core/app-utils';\nimport { Utils } from '@sinequa/core/base';\nimport { UserPreferences } from '@sinequa/components/user-settings';\nimport { AbstractFacet } from '@sinequa/components/facet';\nimport { Action } from '@sinequa/components/action';\nimport { SearchService } from '@sinequa/components/search';\n\nimport { Options, VisNetworkService } from 'ngx-vis';\nimport { DataSet } from \"vis-data/peer/esm/vis-data\";\n\nimport { Node, Edge, NetworkDataset, NetworkProvider, NetworkContext } from './network-models';\nimport { IntlService } from '@sinequa/core/intl';\n\n/**\n * Default options of the Vis.js network.\n * See: https://visjs.github.io/vis-network/docs/network/\n */\nexport const defaultOptions: Options = {\n    height: '500px'\n};\n\n/**\n * Structure of the events emitted by the Vis.js network\n */\nexport interface VisEvent {\n    nodes: string[];\n    edges: string[];\n    event: any;\n    items: any[];\n    pointer: any;\n}\n\n@Component({\n    selector: 'sq-network',\n    templateUrl: './network.component.html'\n})\nexport class NetworkComponent extends AbstractFacet implements OnChanges, OnDestroy {\n\n    /** Name of the network - should be unique within the app */\n    @Input() name = \"Network\";\n\n    /** Input results - used to produce a OnChange event when  */\n    @Input() results: Results;\n\n    @Input() providers: NetworkProvider[];\n\n    /** General Vis options passed to the network (https://visjs.github.io/vis-network/docs/network/) */\n    @Input() options: Options = defaultOptions;\n\n    optionsPrefs: Options;\n\n    @Output() nodeClicked = new EventEmitter();\n    @Output() edgeClicked = new EventEmitter();\n\n    // Settings form\n    form: FormGroup;\n\n    // State\n    _networkInitialized: boolean;\n    _selectedNode?: Node;\n    _selectedEdge?: Edge;\n\n    // Actions\n    _actions: Action[] = [];\n    refreshAction: Action;\n    clearFilters: Action;\n\n    // Info cards\n    @ContentChild(\"nodeTpl\", {static: false}) nodeTpl: TemplateRef;\n    @ContentChild(\"edgeTpl\", {static: false}) edgeTpl: TemplateRef;\n\n    readonly context: NetworkContext;\n\n    providersSubscription: Subscription;\n\n    constructor(\n        public networkService: VisNetworkService,\n        public searchService: SearchService,\n        public appService: AppService,\n        public intlService: IntlService,\n        public formBuilder: FormBuilder,\n        public prefs: UserPreferences,\n        public exprBuilder: ExprBuilder\n    ) {\n        super();\n\n        // Notify providers when a node is clicked (this may trigger new data, or a node mutation)\n        this.nodeClicked.subscribe((node?: Node) => {\n            this.providers.forEach(p => p.onNodeClicked(node));\n        });\n\n        // Notify providers when a node is clicked (this may trigger new data, or a node mutation)\n        this.edgeClicked.subscribe((edge?: Edge) => {\n            this.providers.forEach(p => p.onEdgeClicked(edge));\n        });\n\n        // Refresh the network\n        this.refreshAction = new Action({\n            icon: \"fas fa-sync-alt\",\n            title: \"msg#network.actions.refresh\",\n            action: () => {\n                this.updateData();\n                this.updateActions();\n            }\n        });\n\n        // Clear the current filters\n        this.clearFilters = new Action({\n            icon: \"far fa-minus-square\",\n            title: \"msg#facet.clearSelects\",\n            action: () => {\n                this.searchService.query.removeSelect(this.name);\n                this.searchService.search();\n            }\n        });\n\n        this.context = {\n            name: this.name,\n            nodes: new DataSet(),\n            edges: new DataSet(),\n            searchService: searchService,\n            appService: appService,\n            networkService: networkService,\n            intlService: intlService,\n            exprBuilder: exprBuilder,\n            select: (node?: Node, edge?: Edge) => this.select(node, edge),\n        };\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n\n        if(changes['results'] || changes['providers']) {\n            // Update the context\n            this.context.name = this.name;\n\n            // Update selections\n            this.selectEdge();\n            this.selectNode();\n\n            // Update options from the preferences\n            this.updateOptions();\n\n            // Update data from the providers (async)\n            this.updateData();\n\n            // Update the actions of the facet\n            this.updateActions();\n        }\n        else if(changes['options']) {\n            this.updateOptions();\n        }\n\n    }\n\n    /**\n     * Resets the nodes and edges, create a new listener for the providers and\n     * call getData() on these providers to refresh the data\n     */\n    protected updateData() {\n\n        this.context.nodes.clear();\n        this.context.edges.clear();\n\n        if(this.providersSubscription){\n            this.providersSubscription.unsubscribe();\n        }\n\n        this.providersSubscription = combineLatest(\n            this.providers.map(p => p.getProvider())\n        ).subscribe(datasets =>\n            this.mergeDatasets(datasets.filter(d => !!d) as NetworkDataset[])\n        );\n\n        this.providers.forEach(p => p.getData(this.context));\n    }\n\n    /**\n     * Take in the datasets produced by each provider and merges them into\n     * a single one\n     * @param datasets\n     */\n    protected mergeDatasets(datasets: NetworkDataset[]) {\n        const dataset = datasets.reduce((prev, cur) => prev.merge(cur), new NetworkDataset());\n\n        // Notify providers that nodes were inserted (which could trigger an update of the data)\n        this.providers.forEach(p => p.onDatasetsMerged(dataset));\n\n        // TODO: Post process the dataset somehow to adjust visibility (or other properties)\n        dataset.updateDatasets(this.context.nodes, this.context.edges);\n\n        // Fit the nodes and edges\n        if(this._networkInitialized) {\n            this.fitNetwork();\n        }\n\n        // Notify providers that nodes were inserted (which could trigger an update of the data)\n        this.providers.forEach(p => p.onNodesInserted(this.context.nodes.get()));\n\n        this.updateActions();\n    }\n\n    get actions(): Action[] {\n        return this._actions;\n    }\n\n    /**\n     * Updates the actions displayed in the facet frame (_action variable).\n     * Actions may come from this component or from its providers\n     */\n    protected updateActions() {\n        this._actions = [];\n\n        // Clear the active filters\n        if(this.searchService.breadcrumbs && !!this.searchService.breadcrumbs.findSelect(this.name)) {\n            this._actions.push(this.clearFilters);\n        }\n\n        // Selected node actions\n        if(this._selectedNode) {\n            this.providers.forEach(p => {\n                const actions = p.getNodeActions(this._selectedNode!);\n                if(actions.length){\n                    this._actions = this._actions.concat(actions);\n                }\n            });\n        }\n\n        // Selected edge actions\n        if(this._selectedEdge) {\n            this.providers.forEach(p => {\n                const actions = p.getEdgeActions(this._selectedEdge!);\n                if(actions.length){\n                    this._actions = this._actions.concat(actions);\n                }\n            });\n        }\n\n        // Actions specific to each provider\n        const providersActionList = new Action({\n            icon: \"fas fa-tasks\",\n            title: \"msg#network.actions.providers\",\n            children: this.providers.map(p => new Action({\n                text: this.intlService.formatMessage(p.name),\n                title: this.intlService.formatMessage(p.name),\n                children: p.getProviderActions()\n            }))\n        });\n        this._actions.push(providersActionList);\n\n        // Action to refresh the network\n        this._actions.push(this.refreshAction);\n\n    }\n\n    /**\n     * Fit the network view (zoom and position) to its content, with a delay\n     * to avoid some elusive bugs in the Vis library\n     */\n    fitNetwork() {\n        this.networkService.fit(this.name);\n    }\n\n\n    // Event handling\n\n    /**\n     * Called from the template by ngx-vis, when the network is initialized,\n     * and the NetworkService can be used.\n     */\n    networkInitialized() {\n        this._networkInitialized = true;\n\n        // now we can use the service to register on events\n        this.networkService.on(this.name, 'click');\n\n        this.networkService.click.subscribe((eventData: any[]) => this.onNetworkClick(eventData));\n\n        this.networkService.setOptions(this.name, this.optionsPrefs);\n\n    }\n\n    /**\n     * Method called when a node or edge in the network is clicked.\n     * The method generates appropriate nodeClicked and edgeClicked events,\n     * and updates the state of _selectedEdge and _selectedNode.\n     * @param eventData\n     */\n    protected onNetworkClick(eventData: any[]) {\n        if (eventData[0] === this.name) {\n            const event = eventData[1] as VisEvent;\n\n            if(event.event.type === \"tap\") {\n\n                if(event.edges.length === 1 && event.nodes.length === 0) {\n                    this.selectEdge(this.context.edges.get(event.edges[0]) as Edge);\n                    this.selectNode();\n                }\n                else {\n                    this.selectEdge();\n                    if(event.nodes.length === 1) {\n                        this.selectNode(this.context.nodes.get(event.nodes[0]) as Node);\n                    }\n                    else {\n                        this.selectNode();\n                    }\n                }\n\n            }\n            else {\n                this.selectNode();\n                this.selectEdge();\n            }\n\n            this.updateActions();\n        }\n    }\n\n    select(node?: Node, edge?: Edge) {\n        this.selectNode(node);\n        this.selectEdge(edge);\n        this.updateActions();\n    }\n\n    selectNode(node?: Node) {\n        this._selectedNode = node;\n        this.nodeClicked.next(node);\n    }\n\n    selectEdge(edge?: Edge) {\n        this._selectedEdge = edge;\n        this.edgeClicked.next();\n    }\n\n    ngOnDestroy() {\n        this.networkService.off(this.name, 'click');\n        if(this.providersSubscription){\n            this.providersSubscription.unsubscribe();\n        }\n    }\n\n\n    // Settings\n\n    /**\n     * Sets the options values either to the user preferences (stored in user settings)\n     * or the default values.\n     */\n    updateOptions() {\n        this.optionsPrefs = Utils.copy(this.options);\n        if(!this.optionsPrefs.physics){\n            this.optionsPrefs.physics = {};\n        }\n        if(!this.optionsPrefs.physics.barnesHut){\n            this.optionsPrefs.physics.barnesHut = {};\n        }\n        this.optionsPrefs.physics.barnesHut.springLength = this.springLengthPref;\n        this.optionsPrefs.physics.barnesHut.springConstant = this.springConstantPref / 100;\n        this.optionsPrefs.physics.barnesHut.damping = this.dampingPref / 100;\n        this.optionsPrefs.physics.barnesHut.gravitationalConstant = -this.repulsionPref;\n        this.optionsPrefs.physics.barnesHut.centralGravity = this.gravityPref / 10;\n\n        if(this._networkInitialized) {\n            this.networkService.setOptions(this.name, this.optionsPrefs);\n            this.fitNetwork();\n        }\n    }\n\n    /**\n     * Method from the AbstractFacet interface called when the settings\n     * panel is opened or closed\n     * @param opened whether settings are opened or closed\n     */\n    onOpenSettings(opened: boolean){\n        if(opened) {\n            const springLengthControl = new FormControl(this.springLengthPref);\n            const springConstantControl = new FormControl(this.springConstantPref);\n            const dampingControl = new FormControl(this.dampingPref);\n            const repulsionControl = new FormControl(this.repulsionPref);\n            const gravityControl = new FormControl(this.gravityPref);\n\n            this.form = this.formBuilder.group({\n                springLength: springLengthControl,\n                springConstant: springConstantControl,\n                damping: dampingControl,\n                repulsion: repulsionControl,\n                gravity: gravityControl\n            });\n\n            this.form.valueChanges.subscribe(_ => {\n                this.prefs.set(this.name+'-spring-length', springLengthControl.value, true);\n                this.prefs.set(this.name+'-spring-constant', springConstantControl.value, true);\n                this.prefs.set(this.name+'-damping', dampingControl.value, true);\n                this.prefs.set(this.name+'-repulsion', repulsionControl.value, true);\n                this.prefs.set(this.name+'-gravity', gravityControl.value, true);\n                this.debounceSync();\n            });\n        }\n        else {\n            this.updateOptions();\n            this.updateData();\n        }\n    }\n\n    // Debounce syncing to avoid many calls to the user settings web service\n    debounceSync = Utils.debounce(() => {\n        this.prefs.sync();\n    }, 1000);\n\n    /**\n     * This method resets all the user preferences and rebuilds the settings form,\n     * so that the values displayed are up-to-date\n     */\n    setDefaults() {\n        this.prefs.delete(this.name+'-spring-length', true);\n        this.prefs.delete(this.name+'-spring-constant',true);\n        this.prefs.delete(this.name+'-damping', true);\n        this.prefs.delete(this.name+'-repulsion', true);\n        this.prefs.delete(this.name+'-gravity', true);\n        this.prefs.sync();\n        this.onOpenSettings(true);\n    }\n\n    // Accessor method for each of the settings.\n    // Return either the saved user preference or the default value.\n\n    get springLengthPref(): number {\n        return this.prefs.get(this.name+'-spring-length') || 100;\n    }\n\n    get springConstantPref(): number {\n        return this.prefs.get(this.name+'-spring-constant') || 4;\n    }\n\n    get dampingPref(): number {\n        return this.prefs.get(this.name+'-damping') || 50;\n    }\n\n    get repulsionPref(): number {\n        return this.prefs.get(this.name+'-repulsion') || 2000;\n    }\n\n    get gravityPref(): number {\n        return this.prefs.get(this.name+'-gravity') || 3;\n    }\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/VisTimelineModule.html":{"url":"modules/VisTimelineModule.html","title":"module - VisTimelineModule","body":"\n                   \n\n\n\n\n    Modules\n    VisTimelineModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_VisTimelineModule\n\n\n\ncluster_VisTimelineModule_declarations\n\n\n\ncluster_VisTimelineModule_exports\n\n\n\n\nResultTimeline\n\nResultTimeline\n\n\n\nVisTimelineModule\n\nVisTimelineModule\n\nVisTimelineModule -->\n\nResultTimeline->VisTimelineModule\n\n\n\n\n\nResultTimeline \n\nResultTimeline \n\nResultTimeline  -->\n\nVisTimelineModule->ResultTimeline \n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            vis-timeline/vis-timeline-module.ts\n        \n\n\n\n\n        \n            \n                \n                    Declarations\n                    \n                        \n                            ResultTimeline\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            ResultTimeline\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import {NgModule} from \"@angular/core\";\nimport {CommonModule} from \"@angular/common\";\n\nimport {IntlModule} from \"@sinequa/core/intl\";\n\nimport {VisModule} from \"ngx-vis\";\n\nimport {ResultTimeline} from \"./result-timeline/result-timeline\";\n\n@NgModule({\n    imports: [\n        CommonModule,\n\n        IntlModule,\n\n        VisModule\n    ],\n    declarations: [\n        ResultTimeline\n    ],\n    exports: [\n        ResultTimeline\n    ]\n})\nexport class VisTimelineModule {\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                finance/messages/index.ts\n            \n            variable\n            deFinance\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                finance/messages/index.ts\n            \n            variable\n            enFinance\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                finance/messages/index.ts\n            \n            variable\n            frFinance\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                finance/money-cloud/money-cloud.component.ts\n            \n            component\n            MoneyCloudComponent\n            \n                10 %\n                (5/46)\n            \n        \n        \n            \n                \n                finance/money-cloud/money-cloud.component.ts\n            \n            interface\n            MoneyCloudDatum\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                finance/money-timeline/money-timeline.component.ts\n            \n            component\n            MoneyTimelineComponent\n            \n                28 %\n                (13/45)\n            \n        \n        \n            \n                \n                finance/money-timeline/money-timeline.component.ts\n            \n            interface\n            MoneyDatum\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                fusioncharts/chart/chart.ts\n            \n            component\n            FusionChart\n            \n                23 %\n                (9/38)\n            \n        \n        \n            \n                \n                fusioncharts/chart/chart.ts\n            \n            variable\n            defaultChart\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                googlemaps/dark-style.ts\n            \n            variable\n            darkStyle\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                googlemaps/map.component.ts\n            \n            component\n            MapComponent\n            \n                50 %\n                (12/24)\n            \n        \n        \n            \n                \n                googlemaps/messages/index.ts\n            \n            variable\n            deGooglemaps\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                googlemaps/messages/index.ts\n            \n            variable\n            enGooglemaps\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                googlemaps/messages/index.ts\n            \n            variable\n            frGooglemaps\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                heatmap/bootstrap/facet-heatmap.component.ts\n            \n            component\n            BsFacetHeatmapComponent\n            \n                24 %\n                (13/54)\n            \n        \n        \n            \n                \n                heatmap/bootstrap/heatmap.component.ts\n            \n            component\n            BsHeatmapComponent\n            \n                20 %\n                (8/39)\n            \n        \n        \n            \n                \n                heatmap/bootstrap/heatmap.component.ts\n            \n            interface\n            HeatmapItem\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                heatmap/bootstrap/results-heatmap-view.ts\n            \n            component\n            BsResultsHeatmapView\n            \n                19 %\n                (13/68)\n            \n        \n        \n            \n                \n                heatmap/bootstrap/tooltip.component.ts\n            \n            component\n            BsTooltipComponent\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                heatmap/messages/index.ts\n            \n            variable\n            deHeatmap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                heatmap/messages/index.ts\n            \n            variable\n            enHeatmap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                heatmap/messages/index.ts\n            \n            variable\n            frHeatmap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                network/edge-info-card.component.ts\n            \n            component\n            BsEdgeInfoCard\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                network/network-models.ts\n            \n            class\n            NetworkDataset\n            \n                95 %\n                (19/20)\n            \n        \n        \n            \n                \n                network/network-models.ts\n            \n            interface\n            Edge\n            \n                20 %\n                (2/10)\n            \n        \n        \n            \n                \n                network/network-models.ts\n            \n            interface\n            EdgeType\n            \n                75 %\n                (3/4)\n            \n        \n        \n            \n                \n                network/network-models.ts\n            \n            interface\n            NetworkContext\n            \n                40 %\n                (4/10)\n            \n        \n        \n            \n                \n                network/network-models.ts\n            \n            interface\n            NetworkProvider\n            \n                93 %\n                (14/15)\n            \n        \n        \n            \n                \n                network/network-models.ts\n            \n            interface\n            Node\n            \n                22 %\n                (2/9)\n            \n        \n        \n            \n                \n                network/network-models.ts\n            \n            interface\n            NodeType\n            \n                50 %\n                (2/4)\n            \n        \n        \n            \n                \n                network/network-sample-configs.ts\n            \n            function\n            asyncRecordsProviderDemo\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                network/network-sample-configs.ts\n            \n            function\n            coocAggregationDemo\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                network/network-sample-configs.ts\n            \n            function\n            coocRecordDemo\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                network/network-sample-configs.ts\n            \n            function\n            crossAggregationDemo\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                network/network-sample-configs.ts\n            \n            function\n            crossAggregationExpandDemo\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                network/network-sample-configs.ts\n            \n            function\n            oOTBConfig\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                network/network-sample-configs.ts\n            \n            function\n            recordsProviderDemo\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                network/network-sample-configs.ts\n            \n            function\n            selectedRecordsProviderDemo\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                network/network-sample-configs.ts\n            \n            function\n            typedCoocAggregationDemo\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                network/network-sample-configs.ts\n            \n            function\n            typedCoocRecordDemo\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                network/network-sample-configs.ts\n            \n            function\n            wikiAsyncConfig\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                network/network-sample-configs.ts\n            \n            function\n            wikiDynConfig\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                network/network-sample-configs.ts\n            \n            function\n            wikiDynEdgeConfig\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                network/network-sample-configs.ts\n            \n            function\n            wikiMultiDynConfig\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                network/network.component.ts\n            \n            component\n            NetworkComponent\n            \n                21 %\n                (8/38)\n            \n        \n        \n            \n                \n                network/network.component.ts\n            \n            interface\n            VisEvent\n            \n                16 %\n                (1/6)\n            \n        \n        \n            \n                \n                network/network.component.ts\n            \n            variable\n            defaultOptions\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                network/node-info-card.component.ts\n            \n            component\n            BsNodeInfoCard\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                network/node-info-card.component.ts\n            \n            interface\n            NodeData\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                network/providers/aggregation-provider.ts\n            \n            class\n            AggregationProvider\n            \n                46 %\n                (12/26)\n            \n        \n        \n            \n                \n                network/providers/aggregation-provider.ts\n            \n            interface\n            AggregationData\n            \n                16 %\n                (1/6)\n            \n        \n        \n            \n                \n                network/providers/aggregation-provider.ts\n            \n            interface\n            AggregationEdge\n            \n                33 %\n                (1/3)\n            \n        \n        \n            \n                \n                network/providers/aggregation-provider.ts\n            \n            interface\n            AggregationEdgeType\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                network/providers/aggregation-provider.ts\n            \n            function\n            isAggregationEdgeType\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                network/providers/async-records-provider.ts\n            \n            class\n            AsyncRecordsProvider\n            \n                39 %\n                (11/28)\n            \n        \n        \n            \n                \n                network/providers/base-provider.ts\n            \n            class\n            BaseProvider\n            \n                31 %\n                (6/19)\n            \n        \n        \n            \n                \n                network/providers/dynamic-edge-provider.ts\n            \n            class\n            DynamicEdgeProvider\n            \n                39 %\n                (11/28)\n            \n        \n        \n            \n                \n                network/providers/dynamic-edge-provider.ts\n            \n            interface\n            DynamicEdge\n            \n                50 %\n                (1/2)\n            \n        \n        \n            \n                \n                network/providers/dynamic-edge-provider.ts\n            \n            interface\n            DynamicEdgeType\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                network/providers/dynamic-edge-provider.ts\n            \n            function\n            isDynamicEdgeType\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                network/providers/dynamic-node-provider.ts\n            \n            class\n            DynamicNodeProvider\n            \n                39 %\n                (11/28)\n            \n        \n        \n            \n                \n                network/providers/dynamic-node-provider.ts\n            \n            interface\n            DynamicNodeType\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                network/providers/provider-factory.ts\n            \n            injectable\n            ProviderFactory\n            \n                90 %\n                (30/33)\n            \n        \n        \n            \n                \n                network/providers/records-provider.ts\n            \n            class\n            RecordsProvider\n            \n                36 %\n                (9/25)\n            \n        \n        \n            \n                \n                network/providers/records-provider.ts\n            \n            interface\n            CustomData\n            \n                16 %\n                (1/6)\n            \n        \n        \n            \n                \n                network/providers/records-provider.ts\n            \n            interface\n            RecordNode\n            \n                50 %\n                (1/2)\n            \n        \n        \n            \n                \n                network/providers/records-provider.ts\n            \n            interface\n            StructuralEdgeType\n            \n                100 %\n                (6/6)\n            \n        \n        \n            \n                \n                network/providers/records-provider.ts\n            \n            function\n            isStructuralEdgeType\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                network/providers/selected-records-provider.ts\n            \n            class\n            SelectedRecordsProvider\n            \n                31 %\n                (9/29)\n            \n        \n        \n            \n                \n                ngx-charts/chart/chart.ts\n            \n            component\n            NgxChart\n            \n                0 %\n                (0/17)\n            \n        \n        \n            \n                \n                ngx-charts/chart/chart.ts\n            \n            interface\n            ChartDataPoint\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                ngx-charts/chart/chart.ts\n            \n            interface\n            ChartOptions\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                ngx-charts/facet-chart/facet-chart.ts\n            \n            component\n            FacetNgxChart\n            \n                17 %\n                (4/23)\n            \n        \n        \n            \n                \n                ngx-charts/facet-chart/facet-chart.ts\n            \n            interface\n            FacetChartDataPoint\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                public-api.ts\n            \n            variable\n            sinequaComponentsModule\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                timeline/bootstrap/facet-timeline.component.ts\n            \n            component\n            BsFacetTimelineComponent\n            \n                27 %\n                (15/55)\n            \n        \n        \n            \n                \n                timeline/bootstrap/facet-timeline.component.ts\n            \n            interface\n            TimelineAggregation\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                timeline/bootstrap/facet-timeline.component.ts\n            \n            interface\n            TimelineCombinedAggregations\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                timeline/bootstrap/facet-timeline.component.ts\n            \n            interface\n            TimelineEventAggregation\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                timeline/bootstrap/facet-timeline.component.ts\n            \n            interface\n            TimelineRecords\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                timeline/bootstrap/timeline.component.ts\n            \n            component\n            BsTimelineComponent\n            \n                11 %\n                (7/62)\n            \n        \n        \n            \n                \n                timeline/bootstrap/timeline.component.ts\n            \n            interface\n            TimelineDate\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                timeline/bootstrap/timeline.component.ts\n            \n            interface\n            TimelineEvent\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                timeline/bootstrap/timeline.component.ts\n            \n            interface\n            TimelineSeries\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                vis-timeline/result-timeline/result-timeline.ts\n            \n            component\n            ResultTimeline\n            \n                0 %\n                (0/17)\n            \n        \n        \n            \n                \n                vis-timeline/result-timeline/result-timeline.ts\n            \n            variable\n            defaultOptions\n            \n                0 %\n                (0/1)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @sinequa/components : ^0.0.1\n    \n\n\n    \n    \n        Peer dependencies\n    \n    \n        \n            @agm/core : ^3.0.0-beta.0\n        \n            @swimlane/ngx-charts : ^14.0.0\n        \n            angular-fusioncharts : ^3.0.4\n        \n            fusioncharts : ^3.15.1-sr.1\n        \n            ngx-vis : ^3.1.0\n        \n            vis-data : ^6.5.1\n        \n            vis-network : ^7.3.4\n        \n            vis-timeline : ^7.3.4\n        \n            vis-util : ^4.0.0\n    \n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            asyncRecordsProviderDemo   (network/.../network-sample-configs.ts)\n                        \n                        \n                            coocAggregationDemo   (network/.../network-sample-configs.ts)\n                        \n                        \n                            coocRecordDemo   (network/.../network-sample-configs.ts)\n                        \n                        \n                            crossAggregationDemo   (network/.../network-sample-configs.ts)\n                        \n                        \n                            crossAggregationExpandDemo   (network/.../network-sample-configs.ts)\n                        \n                        \n                            isAggregationEdgeType   (network/.../aggregation-provider.ts)\n                        \n                        \n                            isDynamicEdgeType   (network/.../dynamic-edge-provider.ts)\n                        \n                        \n                            isStructuralEdgeType   (network/.../records-provider.ts)\n                        \n                        \n                            oOTBConfig   (network/.../network-sample-configs.ts)\n                        \n                        \n                            recordsProviderDemo   (network/.../network-sample-configs.ts)\n                        \n                        \n                            selectedRecordsProviderDemo   (network/.../network-sample-configs.ts)\n                        \n                        \n                            typedCoocAggregationDemo   (network/.../network-sample-configs.ts)\n                        \n                        \n                            typedCoocRecordDemo   (network/.../network-sample-configs.ts)\n                        \n                        \n                            wikiAsyncConfig   (network/.../network-sample-configs.ts)\n                        \n                        \n                            wikiDynConfig   (network/.../network-sample-configs.ts)\n                        \n                        \n                            wikiDynEdgeConfig   (network/.../network-sample-configs.ts)\n                        \n                        \n                            wikiMultiDynConfig   (network/.../network-sample-configs.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    network/network-sample-configs.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        \n                            asyncRecordsProviderDemo\n                        \n                        \n                    \n                \n            \n            \n                \nasyncRecordsProviderDemo(providerFactory, searchService)\n                \n            \n\n\n\n\n            \n                \n                    Creates a network for a list of records fetched with a query. The query\nspecifically returns 5 wikipedia documents about \"human\" and containing the text \"google\".\nThe record nodes are rendered with the wikipedia thumbnail rather than a generic icon.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    providerFactory\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The provider factory\n\n                                    \n                                \n                                \n                                    searchService\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The search service\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         NetworkProvider[]\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            coocAggregationDemo\n                        \n                        \n                    \n                \n            \n            \n                \ncoocAggregationDemo(providerFactory)\n                \n            \n\n\n\n\n            \n                \n                    Creates a network from a cooccurrence distribution between person and company\nentities.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    providerFactory\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The provider factory\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         NetworkProvider[]\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            coocRecordDemo\n                        \n                        \n                    \n                \n            \n            \n                \ncoocRecordDemo(providerFactory)\n                \n            \n\n\n\n\n            \n                \n                    Creates a network from the list of selected records and displays the cooccurrence entities\ncontained in these records. The record nodes themselves are actually hidden (hideRecordNode=true).\nThe cooccurrence entities are each displayed as two nodes linked by an edge.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    providerFactory\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The provider factory\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         NetworkProvider[]\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            crossAggregationDemo\n                        \n                        \n                    \n                \n            \n            \n                \ncrossAggregationDemo(providerFactory)\n                \n            \n\n\n\n\n            \n                \n                    Creates a network from a cross-aggregation between person and company entities.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    providerFactory\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The provider factory\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         NetworkProvider[]\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            crossAggregationExpandDemo\n                        \n                        \n                    \n                \n            \n            \n                \ncrossAggregationExpandDemo(providerFactory)\n                \n            \n\n\n\n\n            \n                \n                    Creates a network from a cross-aggregation between person and company entities.\nAdditionally, the company and person nodes can be expanded to other company, person\nand geo entities.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    providerFactory\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The provider factory\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         NetworkProvider[]\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            oOTBConfig\n                        \n                        \n                    \n                \n            \n            \n                \noOTBConfig(providerFactory)\n                \n            \n\n\n\n\n            \n                \n                    Creates a network from the list of selected record and three cross-distributions between geo, \nperson and company entities.\nAdditionally, the metadata nodes are expandable to other metadata nodes, via cross-distributions.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    providerFactory\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The provider factory\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         NetworkProvider[]\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            recordsProviderDemo\n                        \n                        \n                    \n                \n            \n            \n                \nrecordsProviderDemo(providerFactory, records)\n                \n            \n\n\n\n\n            \n                \n                    Creates a network from a list of records, with record and person nodes.\nThe person nodes are attached to a record if that record contains them.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    providerFactory\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The provider factory\n\n                                    \n                                \n                                \n                                    records\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        A given list of records\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         NetworkProvider[]\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            selectedRecordsProviderDemo\n                        \n                        \n                    \n                \n            \n            \n                \nselectedRecordsProviderDemo(providerFactory)\n                \n            \n\n\n\n\n            \n                \n                    Creates a network from the selected records, with record and person nodes.\nThe person nodes are attached to a record if that record contains them.\nThe network is refreshed every time documents are selected or unselected.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    providerFactory\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The provider factory\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         NetworkProvider[]\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            typedCoocAggregationDemo\n                        \n                        \n                    \n                \n            \n            \n                \ntypedCoocAggregationDemo(providerFactory)\n                \n            \n\n\n\n\n            \n                \n                    Creates a network from a triple-cooccurrence between person, companies and in-between\na \"job\" entity ('(BILL GATES)#(CEO)#(MICROSOFT)').\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    providerFactory\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The provider factory\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         NetworkProvider[]\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            typedCoocRecordDemo\n                        \n                        \n                    \n                \n            \n            \n                \ntypedCoocRecordDemo(providerFactory)\n                \n            \n\n\n\n\n            \n                \n                    Creates a network from the list of selected records and displays the triple-cooccurrence entities\nbetween person, companies and in-between a \"job\" entity ('(BILL GATES)#(CEO)#(MICROSOFT)') contained\nin these records.\nThe cooccurrence entities are each displayed as two nodes linked by a typed edge (with a label showing the \"job\").\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    providerFactory\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The provider factory\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         NetworkProvider[]\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            wikiAsyncConfig\n                        \n                        \n                    \n                \n            \n            \n                \nwikiAsyncConfig(providerFactory, searchService)\n                \n            \n\n\n\n\n            \n                \n                    Creates a network from a list of records fetched via a query asynchronously, and cross-distributions\nbetween the geo, company and person nodes.\nThe query specifically asks for 3 wikipedia documents about \"Barack Obama\".\nThe network will contain relations between the records and the metadata displayed among the aggregation\nedges.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    providerFactory\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The provider factory\n\n                                    \n                                \n                                \n                                    searchService\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The search service\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         NetworkProvider[]\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            wikiDynConfig\n                        \n                        \n                    \n                \n            \n            \n                \nwikiDynConfig(providerFactory, searchService)\n                \n            \n\n\n\n\n            \n                \n                    Creates a network from cross distribution between Company and Person entities.\nAdditionally, the person nodes are \"dynamic nodes\", meaning they become enriched (when clicked on,\nby default) with a record fetched from the server. When this happens, the display of the node\nchanges (in this case we display the wikipedia thumbnail of that person, instead of a generic icon),\nand \"structural edges\" are added to the nodes (in this case we display the \"company\" entities\ncontained in the wikipedia pages of the person).\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    providerFactory\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The provider factory\n\n                                    \n                                \n                                \n                                    searchService\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The search service\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         NetworkProvider[]\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            wikiDynEdgeConfig\n                        \n                        \n                    \n                \n            \n            \n                \nwikiDynEdgeConfig(providerFactory, searchService)\n                \n            \n\n\n\n\n            \n                \n                    Creates a network from the list of selected records. Additionally, when these records\nare inserted, fetches additional records from the server, which gets attached to the record\nnodes (\"dynamic edges\"). Specifically these new records are 5 wikipedia articles about humans\nand talking about whatever the original node's label is. (if the original node is \"Microsoft\",\nthe dynamic edges will likely include Bill Gates, Steve Ballmer, Paul Allen, etc.)\nThe nodes of these new records (with the \"people\" type) are displayed with the wikipedia thumbnail.\nAdditionally we display the company entities contained in these people nodes (structural edges).\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    providerFactory\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The provider factory\n\n                                    \n                                \n                                \n                                    searchService\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The search service\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         NetworkProvider[]\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            wikiMultiDynConfig\n                        \n                        \n                    \n                \n            \n            \n                \nwikiMultiDynConfig(providerFactory, searchService)\n                \n            \n\n\n\n\n            \n                \n                    Creates a network from 3 cross distribution between Company, Geo and Person entities.\nAdditionally, the person nodes are \"dynamic nodes\", meaning they become enriched (when inserted) \nwith a record fetched from the server. When this happens, the display of the node\nchanges (in this case we display the wikipedia thumbnail of that person, instead of a generic icon).\nAdditionally, the company nodes are manually expandable to display relations with other people nodes.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    providerFactory\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The provider factory\n\n                                    \n                                \n                                \n                                    searchService\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The search service\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         NetworkProvider[]\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    network/providers/aggregation-provider.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        \n                            isAggregationEdgeType\n                        \n                        \n                    \n                \n            \n            \n                \nisAggregationEdgeType(et)\n                \n            \n\n\n\n\n            \n                \n                    Tests whether an EdgeType is an AggregationEdgeType\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    et\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        an edge type\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         AggregationEdgeType\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    network/providers/dynamic-edge-provider.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        \n                            isDynamicEdgeType\n                        \n                        \n                    \n                \n            \n            \n                \nisDynamicEdgeType(et)\n                \n            \n\n\n\n\n            \n                \n                    Tests whether a given edge type is a DynamicEdgeType\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    et\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        an edge type\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         DynamicEdgeType\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    network/providers/records-provider.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        \n                            isStructuralEdgeType\n                        \n                        \n                    \n                \n            \n            \n                \nisStructuralEdgeType(et)\n                \n            \n\n\n\n\n            \n                \n                    Tests whether the given edge type is a structural edge type\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    et\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        an edge type\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         StructuralEdgeType\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"overview - index","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_BsHeatmapModule\n\n\n\ncluster_BsHeatmapModule_declarations\n\n\n\ncluster_BsHeatmapModule_exports\n\n\n\ncluster_BsTimelineModule\n\n\n\ncluster_BsTimelineModule_declarations\n\n\n\ncluster_BsTimelineModule_exports\n\n\n\ncluster_FinanceModule\n\n\n\ncluster_FinanceModule_declarations\n\n\n\ncluster_FinanceModule_exports\n\n\n\ncluster_FusionChartsModule\n\n\n\ncluster_FusionChartsModule_declarations\n\n\n\ncluster_FusionChartsModule_exports\n\n\n\ncluster_GoogleMapsModule\n\n\n\ncluster_GoogleMapsModule_declarations\n\n\n\ncluster_GoogleMapsModule_exports\n\n\n\ncluster_NetworkModule\n\n\n\ncluster_NetworkModule_declarations\n\n\n\ncluster_NetworkModule_exports\n\n\n\ncluster_NgxChartsModule\n\n\n\ncluster_NgxChartsModule_declarations\n\n\n\ncluster_NgxChartsModule_exports\n\n\n\ncluster_VisTimelineModule\n\n\n\ncluster_VisTimelineModule_declarations\n\n\n\ncluster_VisTimelineModule_exports\n\n\n\n\nBsFacetHeatmapComponent\n\nBsFacetHeatmapComponent\n\n\n\nBsHeatmapModule\n\nBsHeatmapModule\n\nBsHeatmapModule -->\n\nBsFacetHeatmapComponent->BsHeatmapModule\n\n\n\n\n\nBsHeatmapComponent\n\nBsHeatmapComponent\n\nBsHeatmapModule -->\n\nBsHeatmapComponent->BsHeatmapModule\n\n\n\n\n\nBsResultsHeatmapView\n\nBsResultsHeatmapView\n\nBsHeatmapModule -->\n\nBsResultsHeatmapView->BsHeatmapModule\n\n\n\n\n\nBsTooltipComponent\n\nBsTooltipComponent\n\nBsHeatmapModule -->\n\nBsTooltipComponent->BsHeatmapModule\n\n\n\n\n\nBsFacetHeatmapComponent \n\nBsFacetHeatmapComponent \n\nBsFacetHeatmapComponent  -->\n\nBsHeatmapModule->BsFacetHeatmapComponent \n\n\n\n\n\nBsHeatmapComponent \n\nBsHeatmapComponent \n\nBsHeatmapComponent  -->\n\nBsHeatmapModule->BsHeatmapComponent \n\n\n\n\n\nBsResultsHeatmapView \n\nBsResultsHeatmapView \n\nBsResultsHeatmapView  -->\n\nBsHeatmapModule->BsResultsHeatmapView \n\n\n\n\n\nBsTooltipComponent \n\nBsTooltipComponent \n\nBsTooltipComponent  -->\n\nBsHeatmapModule->BsTooltipComponent \n\n\n\n\n\nBsTimelineModule\n\nBsTimelineModule\n\nBsTimelineModule -->\n\nBsHeatmapModule->BsTimelineModule\n\n\n\n\n\nFinanceModule\n\nFinanceModule\n\nFinanceModule -->\n\nBsHeatmapModule->FinanceModule\n\n\n\n\n\nBsFacetTimelineComponent\n\nBsFacetTimelineComponent\n\nBsTimelineModule -->\n\nBsFacetTimelineComponent->BsTimelineModule\n\n\n\n\n\nBsTimelineComponent\n\nBsTimelineComponent\n\nBsTimelineModule -->\n\nBsTimelineComponent->BsTimelineModule\n\n\n\n\n\nBsFacetTimelineComponent \n\nBsFacetTimelineComponent \n\nBsFacetTimelineComponent  -->\n\nBsTimelineModule->BsFacetTimelineComponent \n\n\n\n\n\nBsTimelineComponent \n\nBsTimelineComponent \n\nBsTimelineComponent  -->\n\nBsTimelineModule->BsTimelineComponent \n\n\n\n\n\nMoneyCloudComponent\n\nMoneyCloudComponent\n\nFinanceModule -->\n\nMoneyCloudComponent->FinanceModule\n\n\n\n\n\nMoneyTimelineComponent\n\nMoneyTimelineComponent\n\nFinanceModule -->\n\nMoneyTimelineComponent->FinanceModule\n\n\n\n\n\nMoneyCloudComponent \n\nMoneyCloudComponent \n\nMoneyCloudComponent  -->\n\nFinanceModule->MoneyCloudComponent \n\n\n\n\n\nMoneyTimelineComponent \n\nMoneyTimelineComponent \n\nMoneyTimelineComponent  -->\n\nFinanceModule->MoneyTimelineComponent \n\n\n\n\n\nFusionChart\n\nFusionChart\n\n\n\nFusionChartsModule\n\nFusionChartsModule\n\nFusionChartsModule -->\n\nFusionChart->FusionChartsModule\n\n\n\n\n\nFusionChart \n\nFusionChart \n\nFusionChart  -->\n\nFusionChartsModule->FusionChart \n\n\n\n\n\nMapComponent\n\nMapComponent\n\n\n\nGoogleMapsModule\n\nGoogleMapsModule\n\nGoogleMapsModule -->\n\nMapComponent->GoogleMapsModule\n\n\n\n\n\nMapComponent \n\nMapComponent \n\nMapComponent  -->\n\nGoogleMapsModule->MapComponent \n\n\n\n\n\nBsEdgeInfoCard\n\nBsEdgeInfoCard\n\n\n\nNetworkModule\n\nNetworkModule\n\nNetworkModule -->\n\nBsEdgeInfoCard->NetworkModule\n\n\n\n\n\nBsNodeInfoCard\n\nBsNodeInfoCard\n\nNetworkModule -->\n\nBsNodeInfoCard->NetworkModule\n\n\n\n\n\nNetworkComponent\n\nNetworkComponent\n\nNetworkModule -->\n\nNetworkComponent->NetworkModule\n\n\n\n\n\nBsEdgeInfoCard \n\nBsEdgeInfoCard \n\nBsEdgeInfoCard  -->\n\nNetworkModule->BsEdgeInfoCard \n\n\n\n\n\nBsNodeInfoCard \n\nBsNodeInfoCard \n\nBsNodeInfoCard  -->\n\nNetworkModule->BsNodeInfoCard \n\n\n\n\n\nNetworkComponent \n\nNetworkComponent \n\nNetworkComponent  -->\n\nNetworkModule->NetworkComponent \n\n\n\n\n\nFacetNgxChart\n\nFacetNgxChart\n\n\n\nNgxChartsModule\n\nNgxChartsModule\n\nNgxChartsModule -->\n\nFacetNgxChart->NgxChartsModule\n\n\n\n\n\nNgxChart\n\nNgxChart\n\nNgxChartsModule -->\n\nNgxChart->NgxChartsModule\n\n\n\n\n\nFacetNgxChart \n\nFacetNgxChart \n\nFacetNgxChart  -->\n\nNgxChartsModule->FacetNgxChart \n\n\n\n\n\nNgxChart \n\nNgxChart \n\nNgxChart  -->\n\nNgxChartsModule->NgxChart \n\n\n\n\n\nResultTimeline\n\nResultTimeline\n\n\n\nVisTimelineModule\n\nVisTimelineModule\n\nVisTimelineModule -->\n\nResultTimeline->VisTimelineModule\n\n\n\n\n\nResultTimeline \n\nResultTimeline \n\nResultTimeline  -->\n\nVisTimelineModule->ResultTimeline \n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        8 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    16 Components\n                \n            \n        \n        \n            \n                \n                    \n                    1 Injectable\n                \n            \n        \n        \n            \n                \n                    \n                    8 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    30 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        BsHeatmapModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        BsTimelineModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        FinanceModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        FusionChartsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        GoogleMapsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        NetworkModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        NgxChartsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        VisTimelineModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            AggregationTriggerType   (network/.../aggregation-provider.ts)\n                        \n                        \n                            StructuralDisplayType   (network/.../records-provider.ts)\n                        \n                        \n                            StructuralTriggerType   (network/.../records-provider.ts)\n                        \n                        \n                            TimelineData   (timeline/.../facet-timeline.component.ts)\n                        \n                        \n                            TimelineEventData   (timeline/.../facet-timeline.component.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    network/providers/aggregation-provider.ts\n    \n    \n        \n            \n                \n                    \n                    AggregationTriggerType\n                \n            \n            \n                \n                    Mode \"source\" means node are fetched and added systematically on getData() / other modes allow expanding an existing node\n\n                \n            \n            \n                \n                        \"source\" | \"onclick\" | \"manual\"\n\n                \n            \n        \n    \n    network/providers/records-provider.ts\n    \n    \n        \n            \n                \n                    \n                    StructuralDisplayType\n                \n            \n            \n                \n                        \"all\" | \"paginate\" | \"existingnodes\" | \n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    StructuralTriggerType\n                \n            \n            \n                \n                        \"oninsert\" | \"onclick\" | \"manual\"\n\n                \n            \n        \n    \n    timeline/bootstrap/facet-timeline.component.ts\n    \n    \n        \n            \n                \n                    \n                    TimelineData\n                \n            \n            \n                \n                        TimelineSeries | TimelineAggregation | TimelineCombinedAggregations\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    TimelineEventData\n                \n            \n            \n                \n                        TimelineEvent[] | TimelineRecords | TimelineEventAggregation\n\n                \n            \n        \n    \n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            darkStyle   (googlemaps/.../dark-style.ts)\n                        \n                        \n                            defaultChart   (fusioncharts/.../chart.ts)\n                        \n                        \n                            defaultOptions   (network/.../network.component.ts)\n                        \n                        \n                            defaultOptions   (vis-timeline/.../result-timeline.ts)\n                        \n                        \n                            deFinance   (finance/.../index.ts)\n                        \n                        \n                            deGooglemaps   (googlemaps/.../index.ts)\n                        \n                        \n                            deHeatmap   (heatmap/.../index.ts)\n                        \n                        \n                            enFinance   (finance/.../index.ts)\n                        \n                        \n                            enGooglemaps   (googlemaps/.../index.ts)\n                        \n                        \n                            enHeatmap   (heatmap/.../index.ts)\n                        \n                        \n                            frFinance   (finance/.../index.ts)\n                        \n                        \n                            frGooglemaps   (googlemaps/.../index.ts)\n                        \n                        \n                            frHeatmap   (heatmap/.../index.ts)\n                        \n                        \n                            sinequaComponentsModule   (public-api.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    googlemaps/dark-style.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            darkStyle\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     []\n\n                        \n                    \n                    \n                        \n                            Default value : [\n    {\n      \"elementType\": \"geometry\",\n      \"stylers\": [\n        {\n          \"color\": \"#1d2c4d\"\n        }\n      ]\n    },\n    {\n      \"elementType\": \"labels.text.fill\",\n      \"stylers\": [\n        {\n          \"color\": \"#8ec3b9\"\n        }\n      ]\n    },\n    {\n      \"elementType\": \"labels.text.stroke\",\n      \"stylers\": [\n        {\n          \"color\": \"#1a3646\"\n        }\n      ]\n    },\n    {\n      \"featureType\": \"administrative.country\",\n      \"elementType\": \"geometry.stroke\",\n      \"stylers\": [\n        {\n          \"color\": \"#4b6878\"\n        }\n      ]\n    },\n    {\n      \"featureType\": \"administrative.land_parcel\",\n      \"elementType\": \"labels.text.fill\",\n      \"stylers\": [\n        {\n          \"color\": \"#64779e\"\n        }\n      ]\n    },\n    {\n      \"featureType\": \"administrative.province\",\n      \"elementType\": \"geometry.stroke\",\n      \"stylers\": [\n        {\n          \"color\": \"#4b6878\"\n        }\n      ]\n    },\n    {\n      \"featureType\": \"landscape.man_made\",\n      \"elementType\": \"geometry.stroke\",\n      \"stylers\": [\n        {\n          \"color\": \"#334e87\"\n        }\n      ]\n    },\n    {\n      \"featureType\": \"landscape.natural\",\n      \"elementType\": \"geometry\",\n      \"stylers\": [\n        {\n          \"color\": \"#023e58\"\n        }\n      ]\n    },\n    {\n      \"featureType\": \"poi\",\n      \"elementType\": \"geometry\",\n      \"stylers\": [\n        {\n          \"color\": \"#283d6a\"\n        }\n      ]\n    },\n    {\n      \"featureType\": \"poi\",\n      \"elementType\": \"labels.text.fill\",\n      \"stylers\": [\n        {\n          \"color\": \"#6f9ba5\"\n        }\n      ]\n    },\n    {\n      \"featureType\": \"poi\",\n      \"elementType\": \"labels.text.stroke\",\n      \"stylers\": [\n        {\n          \"color\": \"#1d2c4d\"\n        }\n      ]\n    },\n    {\n      \"featureType\": \"poi.park\",\n      \"elementType\": \"geometry.fill\",\n      \"stylers\": [\n        {\n          \"color\": \"#023e58\"\n        }\n      ]\n    },\n    {\n      \"featureType\": \"poi.park\",\n      \"elementType\": \"labels.text.fill\",\n      \"stylers\": [\n        {\n          \"color\": \"#3C7680\"\n        }\n      ]\n    },\n    {\n      \"featureType\": \"road\",\n      \"elementType\": \"geometry\",\n      \"stylers\": [\n        {\n          \"color\": \"#304a7d\"\n        }\n      ]\n    },\n    {\n      \"featureType\": \"road\",\n      \"elementType\": \"labels.text.fill\",\n      \"stylers\": [\n        {\n          \"color\": \"#98a5be\"\n        }\n      ]\n    },\n    {\n      \"featureType\": \"road\",\n      \"elementType\": \"labels.text.stroke\",\n      \"stylers\": [\n        {\n          \"color\": \"#1d2c4d\"\n        }\n      ]\n    },\n    {\n      \"featureType\": \"road.highway\",\n      \"elementType\": \"geometry\",\n      \"stylers\": [\n        {\n          \"color\": \"#2c6675\"\n        }\n      ]\n    },\n    {\n      \"featureType\": \"road.highway\",\n      \"elementType\": \"geometry.stroke\",\n      \"stylers\": [\n        {\n          \"color\": \"#255763\"\n        }\n      ]\n    },\n    {\n      \"featureType\": \"road.highway\",\n      \"elementType\": \"labels.text.fill\",\n      \"stylers\": [\n        {\n          \"color\": \"#b0d5ce\"\n        }\n      ]\n    },\n    {\n      \"featureType\": \"road.highway\",\n      \"elementType\": \"labels.text.stroke\",\n      \"stylers\": [\n        {\n          \"color\": \"#023e58\"\n        }\n      ]\n    },\n    {\n      \"featureType\": \"transit\",\n      \"elementType\": \"labels.text.fill\",\n      \"stylers\": [\n        {\n          \"color\": \"#98a5be\"\n        }\n      ]\n    },\n    {\n      \"featureType\": \"transit\",\n      \"elementType\": \"labels.text.stroke\",\n      \"stylers\": [\n        {\n          \"color\": \"#1d2c4d\"\n        }\n      ]\n    },\n    {\n      \"featureType\": \"transit.line\",\n      \"elementType\": \"geometry.fill\",\n      \"stylers\": [\n        {\n          \"color\": \"#283d6a\"\n        }\n      ]\n    },\n    {\n      \"featureType\": \"transit.station\",\n      \"elementType\": \"geometry\",\n      \"stylers\": [\n        {\n          \"color\": \"#3a4762\"\n        }\n      ]\n    },\n    {\n      \"featureType\": \"water\",\n      \"elementType\": \"geometry\",\n      \"stylers\": [\n        {\n          \"color\": \"#222222\"\n        }\n      ]\n    },\n    {\n      \"featureType\": \"water\",\n      \"elementType\": \"labels.text.fill\",\n      \"stylers\": [\n        {\n          \"color\": \"#4e6d70\"\n        }\n      ]\n    }\n  ]\n                        \n                    \n\n\n            \n        \n\n    fusioncharts/chart/chart.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            defaultChart\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         object\n\n                        \n                    \n                    \n                        \n                            Default value : {\n    \"theme\": \"fusion\",\n    \"labelDisplay\": \"rotate\",\n    \"slantLabel\": \"1\"\n}\n                        \n                    \n\n\n            \n        \n\n    network/network.component.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            defaultOptions\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Options\n\n                        \n                    \n                    \n                        \n                            Default value : {\n    height: '500px'\n}\n                        \n                    \n\n                \n                    \n                        Default options of the Vis.js network.\nSee: https://visjs.github.io/vis-network/docs/network/\n\n                    \n                \n\n            \n        \n\n    vis-timeline/result-timeline/result-timeline.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            defaultOptions\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     TimelineOptions\n\n                        \n                    \n                    \n                        \n                            Default value : {\n    minHeight : '150px',\n    maxHeight : '350px',\n    margin: {\n        axis: 5,\n        item: 5\n    }\n}\n                        \n                    \n\n\n            \n        \n\n    finance/messages/index.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            deFinance\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : Utils.merge({}, _deFinance, deFacet)\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            enFinance\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : Utils.merge({}, _enFinance, enFacet)\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            frFinance\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : Utils.merge({}, _frFinance, frFacet)\n                        \n                    \n\n\n            \n        \n\n    googlemaps/messages/index.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            deGooglemaps\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : Utils.merge({}, _deGooglemaps, deFacet)\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            enGooglemaps\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : Utils.merge({}, _enGooglemaps, enFacet)\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            frGooglemaps\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : Utils.merge({}, _frGooglemaps, frFacet)\n                        \n                    \n\n\n            \n        \n\n    heatmap/messages/index.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            deHeatmap\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : Utils.merge({}, _deHeatmap, deResultsView, deSearch)\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            enHeatmap\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : Utils.merge({}, _enHeatmap, enResultsView, enSearch)\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            frHeatmap\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : Utils.merge({}, _frHeatmap, frResultsView, frSearch)\n                        \n                    \n\n\n            \n        \n\n    public-api.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            sinequaComponentsModule\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : undefined\n                        \n                    \n\n\n            \n        \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
