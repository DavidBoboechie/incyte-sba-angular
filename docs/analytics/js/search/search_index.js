var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/modules/AgGridModule.html",[0,1.933,1,2.79]],["body/modules/AgGridModule.html",[1,5.845,2,2.619,3,3.108,4,5.045,5,5.045,6,5.045,7,3.092,8,0.015,9,2.862,10,2.862,11,2.406,12,1.544,13,2.395,14,0.145,15,0.145,16,0.145,17,2.566,18,4.538,19,5.815,20,3.599,21,3.599,22,0.237,23,3.599,24,0.846,25,3.599,26,3.032,27,4.936,28,4.936,29,3.2,30,5.815,31,2.611,32,3.856,33,3.599,34,1.486,35,4.278,36,2.744,37,4.278,38,0.774,39,6.901,40,5.815,41,4.936,42,1.948,43,6.901,44,5.815,45,5.815,46,0.399,47,5.045,48,1.544,49,5.045,50,3.032,51,5.815,52,0.168,53,0.031,54,0.013,55,0.013]],["title/interfaces/AggregationData.html",[56,0.141,57,2.418]],["body/interfaces/AggregationData.html",[8,0.015,14,0.085,15,0.186,16,0.085,22,0.197,38,0.456,46,0.425,52,0.197,53,0.018,54,0.01,55,0.009,56,0.246,57,4.222,58,0.616,59,1.998,60,1.149,61,1.196,62,3.773,63,2.547,64,3.493,65,1.646,66,1.4,67,2.744,68,2.562,69,3.239,70,2.305,71,3.247,72,1.16,73,4.361,74,0.172,75,0.382,76,0.865,77,3.552,78,3.247,79,1.92,80,3.233,81,3.093,82,0.68,83,0.392,84,0.608,85,2.244,86,2.805,87,0.642,88,0.477,89,1.078,90,1.109,91,1.952,92,0.876,93,1.4,94,1.07,95,1.104,96,1.218,97,2.195,98,2.245,99,0.668,100,0.68,101,0.592,102,1.927,103,1.476,104,1.51,105,1.927,106,1.699,107,1.71,108,2.452,109,2.125,110,1.295,111,2.479,112,2.688,113,2.012,114,2.547,115,1.887,116,0.787,117,0.689,118,0.642,119,1.887,120,2.274,121,2.792,122,2.102,123,2.274,124,1.476,125,3.239,126,1.887,127,2.305,128,1.297,129,3.239,130,2.152,131,2.343,132,2.547,133,1.631,134,1.887,135,1.412,136,2.274,137,3.315,138,2.452,139,2.452,140,1.4,141,2.668,142,1.819,143,1.022,144,0.335,145,2.967,146,2.066,147,2.152,148,1.695,149,0.613,150,1.936,151,1.699,152,2.452,153,1.788,154,2.452,155,1.791,156,0.868,157,0.786,158,1.544,159,0.811,160,2.125,161,2.452,162,2.251,163,0.828,164,0.689,165,3.028,166,1.156,167,1.353,168,1.788,169,1.353,170,1.297,171,1.324,172,2.562,173,2.274,174,2.452,175,1.618,176,3.247,177,1.848,178,2.125,179,2.125,180,2.274,181,1.276,182,1.104,183,2.452,184,0.499,185,0.521,186,1.551,187,1.612,188,1.544,189,1.353,190,2.274,191,1.276,192,2.102,193,1.879,194,5.124,195,2.688,196,0.983,197,1.476,198,2.452,199,2.452,200,0.864,201,2.452,202,2.452,203,1.618,204,1.618,205,1.618,206,4.069,207,2.452,208,3.131,209,3.493,210,2.452,211,1.297,212,2.452,213,2.452,214,2.452,215,2.452,216,2.452,217,2.452,218,2.452,219,2.125,220,1.196,221,2.452,222,1.476,223,1.788,224,1.245,225,2.452,226,2.452,227,2.452,228,2.819,229,2.274,230,1.927,231,1.631,232,2.452,233,2.452,234,1.887,235,1.887,236,2.452,237,2.452,238,1.887,239,2.452,240,2.452,241,2.452,242,2.452,243,2.199,244,0.946,245,1.887,246,2.452,247,3.239,248,3.773,249,2.274,250,1.544,251,2.452,252,1.998,253,2.452,254,0.872,255,3.493,256,1.788,257,2.452,258,3.493,259,1.887,260,2.452,261,2.274,262,1.476,263,2.452,264,2.452,265,1.104,266,1.887,267,1.788,268,1.399,269,2.452,270,2.452,271,1.699,272,2.452,273,2.452,274,2.452,275,2.452,276,2.452,277,2.452,278,2.452,279,0.756,280,2.547,281,2.452,282,2.452,283,2.452,284,2.452,285,0.415,286,2.452,287,2.688,288,2.452,289,1.412,290,1.887,291,0.983,292,2.274,293,1.998,294,1.245,295,1.245,296,1.887,297,1.104,298,1.412,299,1.476,300,1.887,301,1.887,302,2.452,303,4.434,304,3.072,305,2.343,306,2.452,307,4.069,308,0.946,309,1.906,310,1.381,311,0.781,312,1.887,313,2.926,314,0.983,315,3.493,316,2.668,317,4.434,318,3.493,319,1.927,320,1.513,321,2.305,322,3.493,323,3.493,324,3.493,325,3.493,326,3.493,327,3.493,328,1.395,329,2.012,330,1.788,331,1.196,332,2.452,333,1.104,334,1.887,335,2.792,336,1.436,337,2.251,338,1.596,339,4.434,340,4.434,341,3.526,342,1.477,343,2.452,344,2.251,345,2.452,346,3.493,347,3.239,348,2.452,349,3.093,350,3.493,351,2.452,352,3.493,353,0.91,354,0.983,355,1.476,356,2.452,357,1.788,358,1.104,359,1.618,360,2.125,361,2.452,362,2.452,363,0.983,364,2.452,365,4.069,366,2.452,367,2.452,368,2.452,369,2.452,370,2.452,371,2.452,372,3.493,373,2.452,374,2.452,375,2.452]],["title/interfaces/AggregationEdge.html",[56,0.141,109,2.418]],["body/interfaces/AggregationEdge.html",[8,0.015,14,0.086,15,0.187,16,0.086,22,0.198,38,0.462,46,0.427,52,0.198,53,0.018,54,0.01,55,0.009,56,0.254,57,3.865,58,0.624,59,2.023,60,1.163,61,1.211,62,3.268,63,1.81,64,2.483,65,1.308,66,0.995,67,2.723,68,2.219,69,2.302,70,1.638,71,3.089,72,1.072,73,4.321,74,0.174,75,0.386,77,2.987,78,2.442,79,1.075,80,1.81,81,2.325,82,0.541,83,0.386,84,0.563,85,2.261,86,3.089,87,0.65,88,0.483,89,1.079,90,1.133,91,1.962,92,0.887,93,1.412,94,1.079,95,1.118,96,1.221,97,2.206,98,2.26,99,0.676,100,0.686,101,0.599,102,1.944,103,1.494,104,1.521,105,2.26,106,2.442,107,1.816,108,3.524,109,3.054,110,1.42,111,2.491,112,2.712,113,2.029,114,2.57,115,1.91,116,0.792,117,0.694,118,0.65,119,1.91,120,2.302,121,2.808,122,2.121,123,2.302,124,1.494,125,3.268,126,1.91,127,2.325,128,1.313,129,3.268,130,2.167,131,2.359,132,2.57,133,1.642,134,1.91,135,1.43,136,2.302,137,3.338,138,2.483,139,2.483,140,1.412,141,2.683,142,1.823,143,1.034,144,0.338,145,2.987,146,2.08,147,2.167,148,1.707,149,0.616,150,1.941,151,1.72,152,2.483,153,1.81,154,2.483,155,1.797,156,0.871,157,0.789,158,1.563,159,0.822,160,2.152,161,2.483,162,2.264,163,0.834,164,0.694,165,3.054,166,1.166,167,1.37,168,1.81,169,1.37,170,1.308,171,1.327,172,2.579,173,2.302,174,2.483,175,1.638,176,3.262,177,1.864,178,2.152,179,2.152,180,2.302,181,1.282,182,1.118,183,2.483,184,0.505,185,0.528,186,1.558,187,1.619,188,1.563,189,1.37,190,2.302,191,1.282,192,2.121,193,1.887,194,5.141,195,2.712,196,0.995,197,1.494,198,2.483,199,2.483,200,0.865,201,2.483,202,2.483,203,1.638,204,1.638,205,1.638,206,4.097,207,2.483,208,3.152,209,3.524,210,2.483,211,1.313,212,2.483,213,2.483,214,2.483,215,2.483,216,2.483,217,2.483,218,2.483,219,2.152,220,1.211,221,2.483,222,1.494,223,1.81,224,1.261,225,2.483,226,2.483,227,2.483,228,2.838,229,2.302,230,1.944,231,1.642,232,2.483,233,2.483,234,1.91,235,1.91,236,2.483,237,2.483,238,1.91,239,2.483,240,2.483,241,2.483,242,2.483,243,2.219,244,0.958,245,1.91,246,2.483,247,3.268,248,3.799,249,2.302,250,1.563,251,2.483,252,2.023,253,2.483,254,0.876,255,3.524,256,1.81,257,2.483,258,3.524,259,1.91,260,2.483,261,2.302,262,1.494,263,2.483,264,2.483,265,1.118,266,1.91,267,1.81,268,1.409,269,2.483,270,2.483,271,1.72,272,2.483,273,2.483,274,2.483,275,2.483,276,2.483,277,2.483,278,2.483,279,0.76,280,2.57,281,2.483,282,2.483,283,2.483,284,2.483,285,0.421,286,2.483,287,2.712,288,2.483,289,1.43,290,1.91,291,0.995,292,2.302,293,2.023,294,1.261,295,1.261,296,1.91,297,1.118,298,1.43,299,1.494,300,1.91,301,1.91,302,2.483,303,4.459,304,3.089,305,2.359,306,2.483,307,4.097,308,0.958,309,1.919,310,1.387,311,0.791,312,1.91,313,2.942,314,0.995,315,3.524,316,2.683,317,4.459,318,3.524,319,1.944,320,1.526,321,2.325,322,3.524,323,3.524,324,3.524,325,3.524,326,3.524,327,3.524,328,1.4,329,2.029,330,1.81,331,1.211,332,2.483,333,1.118,334,1.91,335,2.808,336,1.442,337,2.264,338,1.602,339,4.459,340,4.459,341,3.551,342,1.482,343,2.483,344,2.264,345,2.483,346,3.524,347,3.268,348,2.483,349,3.107,350,3.524,351,2.483,352,3.524,353,0.922,354,0.995,355,1.494,356,2.483,357,1.81,358,1.118,359,1.638,360,2.152,361,2.483,362,2.483,363,0.995,364,2.483,365,4.097,366,2.483,367,2.483,368,2.483,369,2.483,370,2.483,371,2.483,372,3.524,373,2.483,374,2.483,375,2.483]],["title/interfaces/AggregationEdgeType.html",[56,0.141,73,2.274]],["body/interfaces/AggregationEdgeType.html",[8,0.015,14,0.085,15,0.186,16,0.085,22,0.197,38,0.453,46,0.424,52,0.197,53,0.018,54,0.01,55,0.009,56,0.253,57,3.832,58,0.612,59,1.985,60,1.141,61,1.188,62,3.224,63,1.776,64,2.436,65,1.291,66,0.977,67,2.713,68,2.189,69,2.259,70,1.608,71,3.544,72,1.223,73,4.355,74,0.171,75,0.38,76,0.785,77,2.956,78,2.409,79,1.055,80,1.776,81,2.294,82,0.533,83,0.39,84,0.578,85,2.257,86,2.799,87,0.637,88,0.474,89,1.077,90,1.108,91,2.084,92,0.87,93,1.394,94,1.065,95,1.097,96,1.217,97,2.19,98,2.237,99,0.663,100,0.677,101,0.588,102,1.918,103,1.466,104,1.505,105,2.237,106,1.688,107,1.803,108,2.436,109,2.112,110,1.408,111,2.473,112,2.675,113,2.002,114,2.535,115,1.875,116,0.785,117,0.749,118,0.637,119,1.875,120,2.259,121,2.944,122,2.44,123,2.259,124,1.466,125,3.224,126,1.875,127,2.294,128,1.289,129,4.099,130,2.145,131,2.335,132,2.535,133,1.625,134,1.875,135,1.403,136,2.259,137,3.602,138,2.436,139,3.477,140,1.772,141,2.813,142,1.856,143,1.448,144,0.389,145,3.224,146,2.244,147,2.339,148,1.842,149,0.636,150,2.004,151,2.409,152,3.477,153,2.535,154,3.477,155,1.787,156,0.866,157,0.784,158,1.534,159,0.806,160,3.013,161,3.477,162,2.54,163,0.9,164,0.823,165,3.514,166,1.547,167,1.344,168,1.776,169,1.344,170,1.291,171,1.323,172,2.553,173,2.259,174,2.436,175,1.608,176,3.239,177,1.839,178,2.112,179,2.112,180,2.259,181,1.273,182,1.097,183,2.436,184,0.496,185,0.518,186,1.547,187,1.608,188,1.534,189,1.344,190,2.259,191,1.273,192,2.092,193,1.875,194,5.116,195,2.675,196,0.977,197,1.466,198,2.436,199,2.436,200,0.863,201,2.436,202,2.436,203,1.608,204,1.608,205,1.608,206,4.054,207,2.436,208,3.119,209,3.477,210,2.436,211,1.289,212,2.436,213,2.436,214,2.436,215,2.436,216,2.436,217,2.436,218,2.436,219,2.112,220,1.188,221,2.436,222,1.466,223,1.776,224,1.237,225,2.436,226,2.436,227,2.436,228,2.809,229,2.259,230,1.918,231,1.625,232,2.436,233,2.436,234,1.875,235,1.875,236,2.436,237,2.436,238,1.875,239,2.436,240,2.436,241,2.436,242,2.436,243,2.189,244,0.94,245,1.875,246,2.436,247,3.224,248,3.759,249,2.259,250,1.534,251,2.436,252,1.985,253,2.436,254,0.87,255,3.477,256,1.776,257,2.436,258,3.477,259,1.875,260,2.436,261,2.259,262,1.466,263,2.436,264,2.436,265,1.097,266,1.875,267,1.776,268,1.394,269,2.436,270,2.436,271,1.688,272,2.436,273,2.436,274,2.436,275,2.436,276,2.436,277,2.436,278,2.436,279,0.754,280,2.535,281,2.436,282,2.436,283,2.436,284,2.436,285,0.413,286,2.436,287,2.675,288,2.436,289,1.403,290,1.875,291,0.977,292,2.259,293,1.985,294,1.237,295,1.237,296,1.875,297,1.097,298,1.403,299,1.466,300,1.875,301,1.875,302,2.436,303,4.421,304,3.063,305,2.335,306,2.436,307,4.054,308,0.94,309,1.899,310,1.377,311,0.776,312,1.875,313,2.917,314,0.977,315,3.477,316,2.66,317,4.421,318,3.477,319,1.918,320,1.506,321,2.294,322,3.477,323,3.477,324,3.477,325,3.477,326,3.477,327,3.477,328,1.393,329,2.002,330,1.776,331,1.188,332,2.436,333,1.097,334,1.875,335,2.784,336,1.432,337,2.244,338,1.593,339,4.421,340,4.421,341,3.514,342,1.474,343,2.436,344,2.244,345,2.436,346,3.477,347,3.224,348,2.436,349,3.085,350,3.477,351,2.436,352,3.477,353,0.904,354,0.977,355,1.466,356,2.436,357,1.776,358,1.097,359,1.608,360,2.112,361,2.436,362,2.436,363,0.977,364,2.436,365,4.054,366,2.436,367,2.436,368,2.436,369,2.436,370,2.436,371,2.436,372,3.477,373,2.436,374,2.436,375,2.436]],["title/classes/AggregationProvider.html",[53,0.021,178,2.418]],["body/classes/AggregationProvider.html",[8,0.015,12,0.778,14,0.073,15,0.186,16,0.073,22,0.187,38,0.39,46,0.442,52,0.187,53,0.016,54,0.01,55,0.008,56,0.233,57,3.568,59,3.354,60,0.981,61,2.145,62,2.888,63,1.528,64,2.095,65,1.156,66,0.84,67,2.628,68,1.961,69,1.943,70,1.383,71,3.048,72,1.077,73,4.355,74,0.147,75,0.341,76,0.89,77,2.711,78,2.158,79,1.349,80,1.528,81,2.055,82,0.478,83,0.401,84,0.573,85,2.25,86,2.825,87,0.548,88,0.408,89,1.086,90,1.148,91,1.833,92,1.471,93,1.764,94,1.139,95,0.943,96,1.244,97,2.348,98,2.051,99,0.57,100,0.606,101,0.505,102,3.058,103,1.874,104,1.821,105,1.718,106,1.452,107,1.779,108,2.095,109,1.816,110,1.311,111,2.328,112,2.397,113,1.794,114,2.271,115,1.612,116,0.781,117,0.809,118,0.815,119,1.612,120,1.943,121,2.903,122,1.874,123,1.943,124,2.237,125,2.888,126,1.612,127,2.055,128,1.108,129,2.888,130,2.178,131,2.371,132,2.271,133,1.65,134,1.612,135,1.206,136,1.943,137,3.354,138,2.095,139,2.095,140,1.248,141,2.775,142,1.852,143,0.873,144,0.512,145,2.711,146,1.888,147,1.967,148,1.715,149,0.624,150,1.966,151,1.452,152,2.095,153,1.528,154,2.095,155,1.849,156,0.864,157,0.744,158,1.319,159,1.031,160,1.816,161,2.095,162,2.341,163,1.02,164,0.63,165,2.7,166,1.031,167,1.156,168,1.528,169,1.156,170,1.156,171,1.289,172,2.341,173,1.943,174,2.095,175,2.055,176,3.195,177,2.178,178,2.7,179,2.7,180,2.888,181,1.3,182,2.257,183,3.718,184,0.634,185,1.145,186,1.456,187,1.526,188,2.341,189,1.156,190,1.943,191,1.3,192,2.237,193,1.997,194,5.176,195,2.397,196,0.84,197,1.261,198,2.095,199,2.095,200,0.847,201,2.095,202,2.095,203,1.383,204,1.383,205,1.383,206,3.718,207,2.095,208,2.861,209,3.115,210,2.095,211,1.108,212,2.095,213,2.095,214,2.095,215,2.095,216,2.095,217,2.095,218,2.095,219,1.816,220,1.021,221,2.095,222,1.261,223,1.528,224,1.064,225,2.095,226,2.095,227,2.095,228,2.852,229,1.943,230,2.051,231,1.764,232,2.095,233,2.095,234,1.612,235,1.612,236,2.095,237,2.095,238,1.612,239,2.095,240,2.095,241,2.095,242,2.095,243,1.961,244,1.201,245,2.397,246,3.115,247,3.448,248,4.08,249,2.888,250,1.961,251,3.115,252,2.538,253,3.115,254,0.858,255,3.718,256,2.271,257,3.115,258,3.115,259,1.612,260,2.095,261,1.943,262,1.261,263,2.095,264,2.095,265,0.943,266,1.612,267,1.528,268,1.513,269,2.095,270,2.095,271,1.452,272,2.095,273,2.095,274,2.095,275,2.095,276,2.095,277,2.095,278,2.095,279,0.71,280,2.271,281,2.095,282,2.095,283,2.095,284,2.095,285,0.355,286,2.095,287,2.397,288,2.095,289,1.206,290,1.612,291,0.84,292,2.888,293,2.538,294,1.581,295,1.581,296,1.612,297,1.854,298,1.206,299,1.261,300,1.612,301,1.612,302,2.095,303,4.117,304,2.852,305,2.141,306,2.095,307,3.718,308,0.808,309,2.16,310,1.544,311,0.992,312,2.397,313,3.043,314,1.248,315,3.115,316,2.477,317,4.117,318,3.115,319,1.718,320,1.349,321,2.055,322,3.115,323,3.115,324,3.115,325,3.115,326,3.115,327,3.115,328,1.427,329,2.371,330,2.271,331,1.519,332,3.115,333,1.854,334,1.612,335,2.592,336,1.348,337,2.09,338,1.52,339,4.117,340,4.117,341,3.223,342,1.407,343,2.095,344,2.09,345,2.095,346,3.115,347,2.888,348,2.095,349,2.903,350,3.115,351,2.095,352,3.115,353,1.156,354,1.248,355,1.261,356,2.095,357,1.528,358,0.943,359,1.383,360,1.816,361,2.095,362,2.095,363,0.84,364,2.095,365,3.718,366,2.095,367,2.095,368,2.095,369,2.095,370,2.095,371,2.095,372,3.115,373,2.095,374,2.095,375,2.095,376,1.528,377,2.538,378,1.248,379,2.538,380,2.538,381,1.156,382,4.355,383,2.397,384,2.397,385,2.397,386,2.141,387,2.055,388,1.278,389,2.397,390,2.397,391,1.707,392,2.058,393,4.355,394,2.088,395,2.576,396,4.732,397,2.929,398,1.319,399,1.816,400,1.707,401,1.816,402,1.816,403,1.816,404,1.816,405,1.816,406,2.929,407,0.963,408,1.463,409,2.929,410,2.929,411,2.929,412,2.929,413,1.206,414,1.816,415,1.707,416,0.72,417,1.707,418,1.201,419,1.452,420,1.206,421,1.206,422,0.72,423,1.206,424,1.261,425,0.667,426,1.816,427,1.021,428,1.206,429,2.929,430,1.943,431,1.206,432,1.816,433,1.206,434,1.816]],["title/classes/AsyncRecordsProvider.html",[53,0.021,435,3.045]],["body/classes/AsyncRecordsProvider.html",[8,0.015,12,1.191,14,0.112,15,0.112,16,0.112,22,0.189,52,0.13,53,0.024,54,0.011,55,0.011,56,0.162,60,1.503,61,2.511,72,0.839,74,0.225,75,0.459,76,0.981,79,1.39,83,0.402,84,0.564,89,1.057,90,1.124,92,1.672,93,2.064,94,0.983,95,1.445,96,1.225,97,2.722,99,0.874,100,0.625,102,3.181,103,1.931,104,1.842,105,2.316,110,1.337,116,0.746,117,0.792,118,0.839,119,2.469,121,2.643,124,2.986,127,2.77,130,1.697,140,1.683,142,1.609,144,0.545,148,1.749,149,0.612,150,1.961,156,0.792,159,1.062,163,1.01,165,3.638,167,2.738,171,0.774,177,2.221,181,1.143,182,2.379,184,0.854,185,1.229,186,1.704,187,1.642,188,3.125,189,1.77,192,2.526,193,2.038,224,1.629,243,2.02,285,0.543,291,1.286,295,2.131,296,2.469,297,2.235,304,2.223,310,1.517,311,1.022,314,1.286,328,1.143,331,1.564,333,2.107,353,1.191,354,1.286,376,2.34,377,3.421,378,1.683,379,3.421,380,3.421,381,1.558,383,3.23,384,3.23,385,3.23,386,2.694,387,2.77,388,1.609,389,3.23,390,3.23,391,2.615,392,2.152,394,2.3,395,2.223,396,4.998,399,2.781,400,2.615,401,2.781,402,2.781,403,2.781,404,2.781,405,2.781,407,1.044,408,1.649,413,1.848,414,2.781,415,2.615,416,1.103,417,2.615,418,1.619,419,2.223,420,1.848,421,1.848,422,1.103,423,1.848,424,2.526,425,1.022,426,2.781,427,1.564,428,1.848,430,2.975,431,1.848,432,2.781,433,1.848,434,2.781,435,4.58,436,5.676,437,2.754,438,5.87,439,2.526,440,2.909,441,1.683,442,1.52,443,2.815,444,5.87,445,2.662,446,2.858,447,4.301,448,4.487,449,4.487,450,4.487,451,6.939,452,4.044,453,2.417,454,5.87,455,3.892,456,3.061,457,2.316,458,3.893,459,2.047,460,1.337,461,3.501,462,2.223,463,2.781,464,3.638,465,1.683,466,2.781,467,2.643,468,1.39,469,1.564,470,1.697,471,2.781,472,2.469,473,2.975,474,2.975,475,2.975,476,2.02,477,1.629,478,2.34,479,2.047,480,2.975,481,2.975,482,1.697,483,3.501,484,1.848,485,2.615,486,3.892,487,4.487,488,3.209,489,4.487]],["title/classes/BaseProvider.html",[53,0.021,102,1.539]],["body/classes/BaseProvider.html",[8,0.015,12,1.637,14,0.084,15,0.084,16,0.084,22,0.179,38,0.451,46,0.332,52,0.098,53,0.018,54,0.009,55,0.009,56,0.204,60,1.136,61,1.971,62,3.213,65,1.286,72,0.907,74,0.17,75,0.483,76,0.924,77,2.948,79,2.102,83,0.396,84,0.6,89,1.085,90,1.178,91,1.684,92,1.734,93,1.945,94,1.238,95,1.092,96,1.296,98,2.23,100,0.472,101,0.585,102,1.911,103,3.074,104,2.07,111,1.833,116,0.907,117,0.928,118,1.337,124,2.085,133,1.389,142,1.39,143,2.128,144,0.517,148,1.443,149,0.653,150,1.855,156,0.894,157,0.839,159,1.146,163,1.153,166,1.746,170,1.501,171,1.345,181,0.943,182,2.376,184,0.705,185,1.204,187,1.606,193,1.701,196,0.972,200,0.827,244,1.559,250,2.182,254,0.821,262,1.459,268,1.39,280,3.402,285,0.587,291,1.945,292,2.248,295,1.759,296,3.111,297,2.25,298,1.396,305,1.995,310,1.505,314,1.389,328,1.201,333,1.986,335,2.546,336,1.429,337,2.594,338,1.732,341,4.044,342,1.375,344,1.759,347,4.5,353,0.9,354,1.389,358,2.342,359,2.286,376,1.768,377,3.294,378,1.621,379,3.294,380,3.294,381,1.637,383,2.666,384,2.666,385,2.666,386,2.54,387,2.286,388,1.517,389,2.666,390,2.666,391,1.976,392,2.079,394,2.128,400,3.594,407,1.003,408,1.487,413,1.995,415,3.954,416,1.604,417,3.294,418,2.035,419,2.401,420,1.995,421,1.995,422,1.191,423,1.995,424,2.085,425,1.404,427,2.151,428,1.995,431,1.995,433,1.995,442,1.429,445,2.151,455,2.941,457,1.911,462,2.401,468,1.5,490,6.822,491,4.905,492,4.845,493,3.749,494,1.191,495,4.845,496,3.39,497,3.39,498,3.39,499,3.39,500,3.39,501,3.39,502,3.39,503,3.39,504,3.39,505,3.39,506,3.39,507,3.39,508,3.39,509,3.39,510,3.39,511,0.714,512,4.845,513,5.351,514,4.845,515,4.845,516,3.39,517,2.941,518,2.645,519,4.845,520,4.845,521,3.39,522,1.68,523,3.39,524,3.39,525,2.526,526,1.8,527,1.6,528,3.39,529,3.39,530,3.39,531,3.39,532,3.39,533,3.39,534,3.39,535,3.39,536,3.39,537,2.666,538,3.074,539,6.786,540,4.203,541,1.621,542,4.845,543,1.5,544,4.845,545,2.182,546,3.39,547,1.866,548,3.39,549,3.781,550,3.39,551,3.39,552,3.39,553,3.39,554,3.781,555,2.401,556,4.845,557,3.39,558,4.203,559,5.351,560,1.768,561,3.39,562,2.941,563,2.425,564,3.213,565,3.39,566,3.39,567,3.39,568,3.39,569,4.845,570,3.39,571,3.39,572,3.39,573,3.39,574,3.39,575,3.39,576,1.866,577,3.39,578,3.39,579,1.976,580,1.396,581,3.39,582,1.459,583,4.845,584,3.39,585,3.39,586,3.39,587,3.39,588,4.845,589,3.39,590,3.39,591,3.39,592,3.39,593,3.39,594,3.39,595,3.39,596,4.845,597,3.39,598,3.39,599,3.39,600,5.653,601,3.39,602,4.845,603,4.845,604,4.845,605,3.39,606,3.39,607,3.39,608,3.39,609,3.39,610,4.845,611,3.39,612,4.845,613,3.39,614,3.39,615,3.39,616,4.845,617,3.39,618,3.39,619,3.39]],["title/components/BsEdgeInfoCard.html",[620,0.45,621,1.476]],["body/components/BsEdgeInfoCard.html",[7,1.798,8,0.015,9,1.725,10,1.725,14,0.201,15,0.118,16,0.118,17,1.657,22,0.176,24,0.692,31,1.798,46,0.326,48,1.947,52,0.138,53,0.025,54,0.012,55,0.011,66,1.362,74,0.239,75,0.477,76,0.604,82,0.805,83,0.377,89,1.069,90,1.153,94,1.334,95,1.53,116,0.774,144,0.461,156,0.576,157,0.548,159,1.442,162,1.725,196,1.362,200,0.521,279,0.891,285,0.814,328,0.925,342,1.284,344,2.212,359,2.875,363,1.362,381,1.617,392,2.025,394,1.416,407,0.81,408,1.041,442,1.473,494,1.498,558,5.834,559,5.834,620,0.776,621,2.683,622,2.509,623,1.657,624,2.253,625,1.725,626,2.14,627,6.704,628,3.398,629,1.718,630,1.729,631,1.726,632,5.722,633,2.544,634,5.247,635,2.544,636,2.166,637,2.416,638,5.247,639,5.247,640,5.247,641,5.855,642,2.166,643,3.919,644,4.809,645,4.459,646,4.459,647,5.247,648,1.498,649,4.754,650,3.506,651,4.809,652,5.285,653,3.052,654,2.622,655,4.752,656,4.754,657,4.752,658,4.122,659,4.752,660,4.752,661,4.122,662,4.752,663,1.387,664,3.708,665,3.708,666,4.752,667,4.752,668,4.752,669,4.752,670,3.708,671,3.708,672,1.875,673,2.354,674,2.242,675,3.708,676,3.708,677,3.708,678,3.708,679,4.754,680,3.708,681,1.725,682,3.708,683,2.615,684,1.725,685,3.708,686,1.041,687,3.398,688,6.153,689,5.526,690,3.352,691,6.092,692,4.752,693,6.092,694,4.752,695,4.752,696,5.285,697,5.285,698,3.352,699,2.622,700,2.041,701,2.404,702,2.14,703,3.194,704,2.14,705,4.752,706,4.752,707,4.752,708,2.743,709,2.743,710,1.657,711,2.14,712,1.875,713,2.743,714,1.472,715,3.194,716,1.725,717,1.725,718,1.875,719,1.798,720,1.657,721,1.798,722,2.14,723,2.14,724,1.725,725,1.442,726,3.028,727,2.14,728,1.875,729,1.957,730,1.798,731,2.14,732,1.798,733,2.404,734,2.14,735,1.798,736,1.798,737,2.14,738,1.657,739,1.798,740,1.798,741,1.725,742,1.214,743,2.14,744,2.14]],["title/components/BsFacetDate.html",[620,0.45,710,1.36]],["body/components/BsFacetDate.html",[7,1.258,8,0.015,9,1.207,10,1.207,14,0.139,15,0.083,16,0.083,17,1.159,22,0.219,24,0.484,29,1.83,31,1.258,38,0.442,42,1.114,46,0.328,48,1.995,52,0.162,53,0.018,54,0.013,55,0.009,56,0.173,65,1.269,66,0.953,74,0.167,75,0.374,76,0.856,82,0.849,83,0.4,84,0.598,85,2.121,86,2.981,87,0.622,88,0.463,89,0.442,90,0.484,96,1.102,97,1.874,98,2.555,99,0.648,100,0.665,101,0.574,107,1.687,110,1.273,116,0.977,117,0.91,118,0.894,126,2.63,144,0.51,149,0.447,155,1.775,156,0.937,157,0.778,163,1.082,164,0.403,166,0.787,184,0.695,185,1.1,186,0.787,187,1.682,196,0.953,200,0.806,203,1.569,204,1.569,205,1.569,224,1.207,254,0.636,268,1.175,279,0.645,285,0.677,289,2.303,328,1.261,331,1.159,336,0.728,338,0.757,342,0.701,378,0.953,381,1.269,388,1.375,392,2.135,394,2.009,407,0.924,408,1.477,416,0.818,422,1.175,425,1.475,460,1.088,470,1.258,494,1.175,511,0.701,541,0.953,580,2.667,620,0.645,621,1.258,622,1.968,623,1.159,624,1.114,625,1.207,626,1.497,629,1.429,630,1.675,631,1.67,635,1.258,636,1.071,648,1.175,653,2.056,654,2.056,663,1.693,686,0.728,689,3.417,699,2.056,700,1.601,701,1.885,702,1.497,703,2.753,704,1.497,708,2.152,709,2.152,710,2.132,711,1.497,712,1.312,713,2.152,714,1.48,715,2.753,716,1.207,717,1.207,718,1.312,719,1.258,720,1.159,721,1.258,722,1.497,723,1.497,724,1.207,725,1.131,726,2.519,727,1.497,728,1.312,729,1.37,730,1.258,731,1.497,732,1.258,733,1.885,734,1.497,735,1.258,736,1.258,737,1.497,738,1.159,739,1.258,740,1.258,741,1.207,742,1.723,743,1.497,744,1.497,745,4.2,746,2.378,747,2.407,748,3.709,749,2.916,750,3.014,751,1.666,752,4.364,753,3.729,754,2.916,755,4.364,756,4.364,757,3.79,758,2.777,759,2.771,760,4.778,761,4.146,762,2.631,763,3.03,764,4.778,765,4.778,766,4.771,767,4.771,768,4.771,769,5.053,770,4.771,771,4.771,772,3.03,773,2.962,774,2.885,775,3.036,776,4.968,777,2.422,778,2.237,779,5.42,780,2.327,781,2.916,782,4.778,783,2.63,784,3.325,785,3.325,786,3.325,787,3.325,788,3.325,789,3.325,790,3.325,791,3.325,792,3.325,793,3.325,794,3.325,795,3.729,796,2.22,797,3.325,798,3.169,799,3.325,800,1.48,801,1.894,802,3.325,803,1.874,804,3.325,805,3.325,806,3.729,807,3.325,808,3.729,809,3.325,810,3.774,811,3.325,812,3.325,813,4.373,814,3.325,815,4,816,3.325,817,3.325,818,3.325,819,2.207,820,3.325,821,3.325,822,2.595,823,3.325,824,2.378,825,3.729,826,1.114,827,2.595,828,1.968,829,2.595,830,0.991,831,1.938,832,2.152,833,2.205,834,2.595,835,2.595,836,1.497,837,2.205,838,4.364,839,2.595,840,2.595,841,2.061,842,1.114,843,1.938,844,1.431,845,2.595,846,2.595,847,1.431,848,2.595,849,1.312,850,1.431,851,1.37,852,2.595,853,3.729,854,3.729,855,3.729,856,2.595,857,2.595,858,2.378,859,2.378,860,2.595,861,2.63,862,3.729,863,2.595,864,2.595,865,3.729,866,2.595,867,3.729,868,2.595,869,2.595,870,2.595,871,1.648,872,2.595,873,3.729,874,2.595,875,2.595,876,2.595,877,2.595,878,2.595,879,1.734,880,2.771,881,2.595,882,2.595,883,2.595,884,2.595,885,2.378,886,2.595,887,2.595,888,2.205,889,2.595,890,2.595,891,2.595,892,2.595,893,3.729,894,2.378,895,2.048,896,2.595,897,2.378,898,2.595,899,2.595,900,2.595,901,2.595,902,1.938,903,3.259,904,1.938,905,2.595,906,2.595,907,2.595,908,3.078,909,1.648,910,1.938,911,2.595,912,1.569,913,1.938,914,2.378,915,2.595,916,2.595,917,1.938,918,2.595,919,1.938,920,1.938,921,2.595,922,2.595,923,1.569,924,0.85,925,1.569,926,2.595,927,2.595,928,2.595,929,2.595,930,2.595,931,2.595,932,2.595,933,2.595,934,1.258,935,2.595,936,2.595,937,2.378,938,2.595,939,2.595,940,2.595,941,2.595,942,2.595,943,1.569,944,2.595,945,4.778,946,4.778,947,3.325,948,5.593,949,3.325,950,2.595,951,3.325,952,4.778,953,3.325,954,2.378,955,2.885,956,2.205,957,4.146,958,3.325,959,3.325,960,2.205,961,3.325]],["title/components/BsHeatmapComponent.html",[620,0.45,716,1.417]],["body/components/BsHeatmapComponent.html",[7,1.228,8,0.015,9,1.179,10,1.179,14,0.137,15,0.081,16,0.081,17,1.132,22,0.136,24,0.473,31,1.228,32,3.115,46,0.501,48,1.703,52,0.136,53,0.017,54,0.01,55,0.009,56,0.117,66,0.931,72,0.879,74,0.163,75,0.368,76,0.876,82,0.775,83,0.407,84,0.54,89,0.432,90,0.473,107,1.522,116,0.815,117,0.928,136,2.153,140,1.346,144,0.473,149,0.439,151,2.327,155,1.639,160,2.911,163,1.099,164,0.96,166,1.306,171,0.952,184,0.684,191,0.632,200,0.802,230,1.281,244,0.896,254,0.625,268,1.487,279,0.698,289,1.337,308,0.896,309,2.149,331,1.132,344,2.329,353,0.862,381,1.247,392,2.161,394,2.177,395,1.609,407,0.917,408,1.465,422,1.155,452,1.892,460,0.739,470,1.228,484,1.337,485,2.737,494,1.155,541,1.582,543,1.709,580,2.642,620,0.637,621,1.228,622,1.934,623,1.924,624,1.088,625,1.179,626,1.462,629,1.41,630,1.671,631,1.675,633,2.088,635,2.427,636,2.154,637,1.947,642,1.777,646,2.153,648,1.155,653,2.968,654,2.021,663,1.719,672,1.281,684,1.705,686,1.029,699,2.761,700,1.849,701,1.853,702,1.462,703,2.723,704,1.462,708,2.115,709,2.115,710,1.132,711,1.462,712,1.281,713,2.115,714,1.006,715,2.723,716,2.195,717,1.179,718,1.281,719,2.53,720,1.132,721,1.228,722,1.462,723,1.462,724,1.179,725,1.111,726,2.485,727,1.462,728,1.281,729,1.337,730,1.228,731,1.462,732,1.228,733,1.853,734,1.462,735,1.228,736,1.228,737,1.462,738,1.132,739,1.228,740,1.228,741,1.179,742,0.83,743,1.462,744,1.462,751,1.638,796,2.195,803,1.573,880,2.327,895,1.088,924,1.2,954,4.783,955,2.817,960,3.115,962,2.534,963,3.216,964,4.787,965,4.075,966,4.787,967,3.524,968,3.524,969,4.787,970,3.216,971,3.216,972,3.216,973,3.216,974,3.216,975,3.216,976,4.697,977,4.258,978,3.216,979,4.193,980,3.216,981,5.566,982,5.518,983,3.739,984,4.697,985,4.697,986,4.697,987,4.787,988,5.246,989,3.216,990,4.787,991,2.375,992,5.566,993,5.566,994,2.177,995,5.566,996,3.665,997,4.787,998,4.787,999,3.247,1000,3.499,1001,4.697,1002,2.737,1003,3.247,1004,3.665,1005,3.247,1006,4.075,1007,3.247,1008,5.35,1009,3.247,1010,2.737,1011,2.854,1012,3.247,1013,3.247,1014,2.723,1015,2.49,1016,3.314,1017,2.115,1018,3.247,1019,3.247,1020,3.247,1021,2.49,1022,1.853,1023,3.247,1024,2.737,1025,3.247,1026,3.247,1027,2.531,1028,3.247,1029,3.247,1030,4.075,1031,3.247,1032,3.216,1033,4.787,1034,3.216,1035,2.602,1036,4.075,1037,5.246,1038,4.075,1039,3.682,1040,2.449,1041,3.18,1042,2.737,1043,4.075,1044,4.075,1045,4.787,1046,3.247,1047,3.247,1048,3.247,1049,3.665,1050,3.247,1051,3.247,1052,2.427,1053,2.911,1054,3.247,1055,3.247,1056,5.246,1057,4.075,1058,4.787,1059,3.247,1060,4.075,1061,3.115,1062,2.115,1063,4.787,1064,3.247,1065,3.247,1066,3.665,1067,3.247,1068,3.247,1069,3.247,1070,3.247,1071,3.247,1072,3.247,1073,3.247,1074,3.247,1075,3.247,1076,3.247,1077,3.247,1078,3.247,1079,3.247,1080,2.012,1081,3.247,1082,5.218,1083,3.247,1084,3.524,1085,3.247,1086,3.247,1087,3.247,1088,2.177,1089,2.327,1090,1.397,1091,2.817,1092,2.817,1093,1.609,1094,2.817,1095,1.532,1096,2.327,1097,1.609,1098,1.934,1099,1.892,1100,1.892,1101,2.642,1102,2.153,1103,2.534,1104,2.817,1105,4.075,1106,4.075,1107,2.817,1108,2.817,1109,2.817,1110,2.817,1111,2.817,1112,2.817,1113,2.817,1114,2.817,1115,2.817,1116,1.892,1117,2.817,1118,2.737,1119,3.216,1120,1.892,1121,1.892,1122,1.892,1123,2.817,1124,1.892,1125,1.892,1126,1.892,1127,2.817,1128,2.817,1129,2.817,1130,1.532,1131,1.693,1132,1.892,1133,2.817,1134,2.153,1135,1.787,1136,2.153,1137,1.892,1138,1.892,1139,1.892,1140,1.892,1141,1.892,1142,2.817,1143,2.012,1144,2.012,1145,2.817,1146,2.817,1147,2.817,1148,2.817,1149,3.115,1150,2.817,1151,2.817,1152,2.817,1153,2.817,1154,2.817,1155,2.817,1156,2.817,1157,2.449,1158,2.817,1159,2.817,1160,2.153,1161,2.534,1162,2.534,1163,2.817,1164,3.115,1165,2.012,1166,4.075,1167,4.075,1168,2.115,1169,4.075,1170,2.817,1171,2.817,1172,1.892,1173,2.817,1174,2.817,1175,1.892,1176,1.397,1177,2.584,1178,1.892,1179,1.892,1180,2.737,1181,2.737,1182,2.737,1183,1.892,1184,1.892,1185,1.088,1186,1.892,1187,1.892,1188,2.817,1189,2.817,1190,4.787,1191,4.075,1192,4.075,1193,2.817,1194,2.534,1195,2.817,1196,2.817,1197,2.817,1198,2.817,1199,4.697,1200,4.697,1201,4.697,1202,6.047,1203,4.697,1204,4.697,1205,4.697,1206,4.697,1207,4.697,1208,4.697,1209,4.697,1210,2.737,1211,3.247,1212,3.247,1213,2.817,1214,3.247,1215,4.787,1216,4.787,1217,3.247,1218,1.609,1219,3.247,1220,3.247,1221,3.247,1222,3.247,1223,3.247,1224,3.247,1225,4.697,1226,4.787,1227,4.697,1228,3.247,1229,3.247,1230,3.247,1231,3.247,1232,3.247,1233,2.322,1234,4.697,1235,2.115,1236,3.665,1237,3.247,1238,1.892,1239,2.012]],["title/modules/BsHeatmapModule.html",[0,1.933,1240,2.418]],["body/modules/BsHeatmapModule.html",[2,2.641,3,3.123,8,0.015,11,2.418,12,1.557,13,2.415,14,0.146,15,0.146,16,0.146,20,3.617,21,3.617,22,0.235,23,3.617,24,0.853,25,3.617,26,3.058,27,4.96,28,4.96,29,3.227,33,3.617,34,1.498,37,4.299,38,0.78,48,1.557,50,3.058,52,0.17,53,0.031,54,0.014,55,0.013,681,2.129,712,3.228,716,2.97,718,3.228,719,2.219,721,3.095,1240,5.117,1241,5.087,1242,5.087,1243,5.087,1244,5.864,1245,4.599,1246,2.415,1247,5.864,1248,6.935]],["title/components/BsNodeInfoCard.html",[620,0.45,717,1.417]],["body/components/BsNodeInfoCard.html",[7,1.706,8,0.015,9,1.637,10,1.637,14,0.2,15,0.112,16,0.112,17,1.572,22,0.17,24,0.656,31,1.706,46,0.404,48,1.915,52,0.17,53,0.024,54,0.012,55,0.011,56,0.163,66,1.292,74,0.226,75,0.461,76,0.573,82,0.791,83,0.388,84,0.353,89,1.093,90,0.857,94,1.29,95,1.452,116,0.833,118,0.844,142,1.448,144,0.477,156,0.546,157,0.756,159,1.393,162,1.637,164,0.713,166,1.809,196,1.292,200,0.763,220,1.572,244,1.244,279,0.9,285,0.794,289,1.857,299,1.94,328,0.878,342,1.241,344,2.138,353,1.197,358,1.452,363,1.292,381,1.563,392,2.001,394,1.343,398,2.03,407,0.783,408,0.988,442,1.436,460,1.027,477,1.637,494,1.448,526,1.244,620,0.756,621,1.706,622,2.425,623,1.572,624,2.197,625,1.637,626,2.03,628,3.224,629,1.675,630,1.722,631,1.719,632,5.629,633,2.481,634,5.117,635,2.481,636,2.112,637,2.383,638,5.117,639,5.117,640,5.117,641,5.773,642,2.112,643,3.821,644,4.69,645,4.349,646,4.349,647,5.117,648,1.448,649,4.595,650,3.419,651,4.69,652,5.108,653,2.992,654,2.534,656,4.595,658,3.911,661,3.911,663,1.341,664,3.518,665,3.518,670,3.518,671,3.518,672,1.779,673,2.234,674,2.128,675,3.518,676,3.518,677,3.518,678,3.518,679,4.595,680,3.518,681,1.637,682,3.518,683,2.481,684,1.637,685,3.518,686,0.988,687,3.224,688,5.108,689,4.972,696,5.108,697,5.108,699,2.534,700,1.973,701,2.323,702,2.03,703,3.131,704,2.03,708,2.652,709,2.652,710,1.572,711,2.03,712,1.779,713,2.652,714,1.396,715,3.131,716,1.637,717,2.524,718,1.779,719,1.706,720,1.572,721,1.706,722,2.03,723,2.03,724,1.637,725,1.393,726,2.953,727,2.03,728,1.779,729,1.857,730,1.706,731,2.03,732,1.706,733,2.323,734,2.03,735,1.706,736,1.706,737,2.03,738,1.572,739,1.706,740,1.706,741,1.637,742,1.152,743,2.03,744,2.03,1249,5.964,1250,4.309,1251,5.466,1252,4.508,1253,4.508,1254,4.508,1255,4.508,1256,4.508,1257,3.911,1258,3.911,1259,3.911,1260,3.911,1261,3.911,1262,3.911,1263,3.911,1264,3.419,1265,5.689,1266,3.071,1267,2.351,1268,3.911,1269,3.911,1270,3.224,1271,3.911,1272,3.911,1273,3.911,1274,3.518,1275,3.911,1276,3.911,1277,3.224,1278,3.911,1279,3.911,1280,3.911,1281,3.911,1282,3.911,1283,3.518,1284,3.911,1285,3.911,1286,3.911,1287,3.911,1288,3.911,1289,3.911,1290,5.888,1291,4.508,1292,5.888,1293,5.888,1294,4.508]],["title/modules/BsTimelineModule.html",[0,1.933,1295,2.79]],["body/modules/BsTimelineModule.html",[0,2.817,2,2.56,3,3.066,8,0.015,11,2.374,12,1.509,13,2.341,14,0.142,15,0.142,16,0.142,20,3.55,21,3.55,22,0.238,23,3.55,24,0.827,25,3.55,26,2.964,27,4.869,28,4.869,29,3.128,33,3.55,34,1.452,35,4.22,36,2.683,37,4.22,38,0.756,41,4.869,42,1.905,48,1.807,50,3.55,52,0.165,53,0.03,54,0.012,55,0.012,319,2.243,620,0.656,710,2.842,714,2.525,719,2.151,720,2.842,741,2.96,742,1.452,750,2.243,824,4.066,1101,2.341,1240,4.861,1245,4.515,1246,2.341,1295,5.907,1296,4.932,1297,4.932,1298,5.685,1299,4.932,1300,5.685,1301,4.932,1302,3.747,1303,3.77,1304,6.808,1305,5.907,1306,4.932]],["title/components/BsTooltipComponent.html",[620,0.45,721,1.476]],["body/components/BsTooltipComponent.html",[7,1.831,8,0.015,9,1.757,10,1.757,14,0.169,15,0.12,16,0.12,17,1.687,22,0.14,24,0.704,31,1.831,46,0.332,48,1.958,52,0.14,53,0.026,54,0.012,55,0.011,66,1.387,74,0.359,83,0.37,89,0.644,90,0.704,117,0.893,144,0.423,157,0.711,163,1.073,164,0.822,211,2.566,279,0.87,392,2.001,562,5.348,580,3.105,620,0.782,621,1.831,622,2.538,623,2.149,624,2.272,625,1.757,626,2.179,630,1.731,631,1.749,633,2.852,635,2.934,636,2.558,637,2.184,643,4.653,654,2.653,663,1.717,699,2.653,700,2.065,701,2.432,702,2.179,703,3.216,704,2.179,708,2.776,709,2.776,710,1.687,711,2.179,712,1.909,713,2.776,714,1.499,715,3.216,716,1.757,717,1.757,718,1.909,719,1.831,720,1.687,721,2.702,722,2.179,723,2.179,724,1.757,725,1.459,726,3.054,727,2.179,728,1.909,729,1.993,730,1.831,731,2.179,732,1.831,733,2.432,734,2.179,735,1.831,736,1.831,737,2.179,738,1.687,739,1.831,740,1.831,741,1.757,742,1.237,743,2.179,744,2.179,773,3.821,994,2.676,1021,2.941,1022,2.432,1101,3.155,1210,3.952,1307,4.199,1308,4.851,1309,6.782,1310,3.732,1311,6.782,1312,4.851,1313,6.782,1314,6.541,1315,6.782,1316,6.782,1317,7.539,1318,8.145,1319,7.539,1320,6.782,1321,5.293,1322,4.84,1323,4.84,1324,4.84,1325,4.84,1326,4.84,1327,4.84,1328,4.84,1329,4.84,1330,4.84,1331,4.84,1332,6.164,1333,6.164,1334,6.164,1335,4.81,1336,6.164,1337,4.84,1338,4.84]],["title/interfaces/ChartDataPoint.html",[56,0.141,1339,2.274]],["body/interfaces/ChartDataPoint.html",[8,0.015,14,0.135,15,0.135,16,0.135,22,0.224,24,0.789,34,1.386,36,2.559,46,0.372,52,0.207,53,0.029,54,0.012,55,0.012,56,0.239,58,0.975,74,0.272,75,0.518,82,0.595,83,0.383,84,0.629,100,0.755,101,0.935,116,0.84,117,0.951,143,1.616,144,0.51,149,0.507,157,0.88,163,0.963,164,0.865,184,0.789,187,1.283,196,1.555,285,0.801,388,1.627,408,1.188,468,1.68,494,1.334,511,1.143,580,2.725,620,0.763,629,1.691,630,1.143,631,1.143,648,1.334,663,1.626,725,1.69,738,1.891,749,3.451,751,1.891,762,2.334,763,2.687,800,1.68,801,2.049,828,2.725,895,2.217,989,3.856,1000,3.279,1027,2.818,1035,2.848,1088,2.14,1089,2.687,1095,3.123,1238,3.16,1339,4.333,1340,3.878,1341,5.164,1342,2.593,1343,5.164,1344,5.573,1345,5.164,1346,3.596,1347,3.641,1348,4.736,1349,3.856,1350,4.232,1351,3.596,1352,3.596,1353,4.232,1354,4.232,1355,2.334,1356,4.232,1357,4.232,1358,3.37,1359,2.559,1360,4.232,1361,4.232,1362,4.232,1363,3.596,1364,4.232,1365,2.984,1366,4.232,1367,4.232,1368,4.232,1369,3.93,1370,4.232,1371,5.164,1372,3.596,1373,3.596,1374,4.232,1375,3.596,1376,3.596,1377,4.232,1378,4.232,1379,4.232,1380,2.307,1381,4.232,1382,4.232,1383,2.687,1384,3.596,1385,1.283,1386,4.232,1387,4.232,1388,4.232,1389,3.16,1390,4.232,1391,4.232,1392,4.232,1393,2.559,1394,4.232,1395,4.232,1396,4.232,1397,5.164,1398,4.232,1399,4.232,1400,3.16,1401,4.232]],["title/interfaces/ChartOptions.html",[56,0.141,1349,2.274]],["body/interfaces/ChartOptions.html",[8,0.015,14,0.133,15,0.133,16,0.133,22,0.224,24,0.779,34,1.368,36,2.527,46,0.367,52,0.206,53,0.028,54,0.012,55,0.012,56,0.237,58,0.962,72,1.385,74,0.269,75,0.514,76,0.982,82,0.587,83,0.402,84,0.633,100,0.745,101,0.924,116,0.834,117,0.897,143,1.595,144,0.367,149,0.501,157,0.876,163,0.956,164,0.648,184,0.779,187,1.267,196,1.535,285,0.795,388,1.614,408,1.173,468,1.658,494,1.316,511,1.128,580,2.704,620,0.757,629,1.677,630,1.128,631,1.128,648,1.316,663,1.617,725,1.68,738,1.867,749,3.424,751,1.867,762,2.304,763,2.653,800,1.658,801,2.033,828,2.704,895,2.2,989,4.427,1000,3.253,1027,2.802,1035,2.825,1088,2.112,1089,2.653,1095,3.098,1238,3.12,1339,4.138,1340,3.829,1341,5.123,1342,2.578,1343,5.123,1344,5.541,1345,5.123,1346,3.55,1347,3.613,1348,4.709,1349,4.138,1350,5.777,1351,4.909,1352,3.55,1353,4.178,1354,4.178,1355,2.304,1356,4.178,1357,4.178,1358,3.351,1359,2.527,1360,4.178,1361,4.178,1362,4.178,1363,3.55,1364,4.178,1365,2.946,1366,4.178,1367,4.178,1368,4.178,1369,3.908,1370,4.178,1371,5.123,1372,3.55,1373,3.55,1374,4.178,1375,3.55,1376,3.55,1377,4.178,1378,4.178,1379,4.178,1380,2.289,1381,4.178,1382,4.178,1383,2.653,1384,3.55,1385,1.267,1386,4.178,1387,4.178,1388,4.178,1389,3.12,1390,4.178,1391,4.178,1392,4.178,1393,2.527,1394,4.178,1395,4.178,1396,4.178,1397,5.123,1398,4.178,1399,4.178,1400,3.12,1401,4.178]],["title/interfaces/Column.html",[56,0.141,1402,2.274]],["body/interfaces/Column.html",[7,1.021,8,0.015,9,0.98,10,1.487,12,0.717,14,0.067,15,0.067,16,0.102,17,2.672,18,2.107,22,0.219,24,0.393,31,3.051,34,0.69,36,1.274,38,0.359,42,0.904,46,0.487,47,2.342,48,1.314,49,2.342,52,0.143,53,0.014,54,0.013,55,0.008,56,0.098,58,0.485,65,1.577,72,1.216,74,0.136,75,0.321,76,0.629,83,0.206,84,0.547,87,0.505,88,0.376,96,1.236,97,2.441,99,0.526,100,0.57,101,0.466,110,0.933,116,0.943,117,0.6,118,1.282,119,2.254,133,0.774,144,0.185,146,0.98,147,1.021,149,0.608,153,1.408,156,0.846,157,0.791,163,0.596,164,0.327,165,1.673,167,2.344,170,1.314,171,1.079,177,1.021,181,0.526,184,0.393,185,1.042,186,0.639,191,1.157,196,1.584,200,0.807,231,1.862,244,1.846,249,1.79,268,0.664,271,2.738,279,0.311,285,0.6,309,2.177,320,0.836,328,1.076,330,1.408,336,1.37,337,2.157,338,1.727,341,4.248,342,1.251,344,2.43,353,1.467,360,1.673,363,0.774,378,1.419,388,1.007,407,0.735,416,0.664,418,1.13,422,0.664,425,1.258,439,1.162,441,1.174,442,0.591,459,0.941,465,1.792,472,2.254,486,2.342,491,2.342,493,3.282,494,0.664,511,0.569,513,3.554,517,2.342,522,2.03,526,1.13,540,3.554,543,0.836,549,4.312,560,1.408,582,1.162,620,0.473,622,1.112,629,1.047,630,0.569,631,0.569,637,1.913,642,1.319,648,0.664,663,1.761,681,0.98,684,0.98,686,1.084,700,0.904,749,2.136,750,1.065,751,0.941,758,2.446,762,1.162,763,1.338,775,2.229,778,1.594,780,1.658,796,2.27,800,0.836,801,1.269,803,1.372,826,0.904,828,2.038,836,1.845,843,1.573,844,1.763,849,2.18,851,2.276,894,1.931,914,1.931,923,1.933,956,1.79,994,2.563,1015,1.112,1022,1.616,1032,1.573,1049,2.107,1052,2.366,1090,1.162,1101,1.112,1176,1.162,1246,1.112,1283,5.223,1310,2.724,1342,1.797,1348,3.282,1355,1.162,1380,2.437,1384,1.79,1385,0.969,1393,1.274,1402,4.555,1403,2.342,1404,5.94,1405,5.153,1406,2.342,1407,2.581,1408,3.554,1409,2.342,1410,1.673,1411,3.952,1412,4.95,1413,2.342,1414,2.7,1415,4.096,1416,4.096,1417,4.95,1418,4.096,1419,4.096,1420,4.096,1421,4.096,1422,4.096,1423,4.95,1424,4.95,1425,4.096,1426,4.096,1427,4.096,1428,4.096,1429,4.096,1430,2.107,1431,4.096,1432,2.7,1433,2.107,1434,5.806,1435,2.7,1436,2.7,1437,1.408,1438,1.763,1439,4.794,1440,5.525,1441,1.274,1442,2.7,1443,2.7,1444,2.7,1445,2.7,1446,2.7,1447,4.096,1448,4.096,1449,4.096,1450,4.096,1451,4.096,1452,5.636,1453,4.95,1454,2.7,1455,3.097,1456,2.7,1457,2.7,1458,1.065,1459,1.22,1460,2.7,1461,5.525,1462,2.7,1463,2.7,1464,4.95,1465,2.7,1466,4.95,1467,1.79,1468,1.79,1469,2.7,1470,1.338,1471,2.7,1472,4.096,1473,2.7,1474,4.096,1475,3.664,1476,4.096,1477,2.7,1478,2.7,1479,2.93,1480,2.7,1481,2.7,1482,2.7,1483,4.95,1484,5.618,1485,3.425,1486,2.7,1487,2.7,1488,1.673,1489,2.608,1490,2.7,1491,4.096,1492,2.7,1493,2.7,1494,2.7,1495,2.93,1496,2.7,1497,4.096,1498,4.096,1499,4.096,1500,4.096,1501,2.7,1502,2.342,1503,2.7,1504,2.7,1505,2.7,1506,2.107,1507,2.7,1508,2.7,1509,2.7,1510,4.096,1511,3.554,1512,2.342,1513,4.096,1514,2.7,1515,1.79,1516,2.7,1517,2.7,1518,2.7,1519,2.7,1520,2.7,1521,4.096,1522,2.7,1523,2.7,1524,1.486,1525,2.342,1526,4.096,1527,2.7,1528,5.636,1529,2.7,1530,2.7,1531,2.7,1532,2.7,1533,2.7,1534,2.7,1535,1.673,1536,2.7,1537,4.096,1538,2.716,1539,2.7,1540,4.096,1541,2.7,1542,2.7,1543,2.7,1544,2.7,1545,4.95,1546,2.7,1547,2.7,1548,2.7,1549,2.7,1550,4.096,1551,2.7,1552,5.525,1553,2.7,1554,2.7,1555,6.497,1556,4.096,1557,4.096,1558,2.7,1559,2.7,1560,4.096,1561,2.7,1562,4.95,1563,6.252,1564,4.95,1565,4.096,1566,4.096,1567,4.096,1568,2.7,1569,2.7,1570,2.7,1571,2.7,1572,5.94,1573,4.096,1574,4.95,1575,2.7,1576,2.7,1577,2.7,1578,2.7,1579,4.096,1580,2.7,1581,2.7,1582,1.79,1583,2.7,1584,4.096,1585,2.7,1586,2.7,1587,2.7,1588,2.7,1589,2.7,1590,4.294,1591,2.7,1592,2.7,1593,4.95,1594,2.7,1595,2.7,1596,4.096,1597,4.096,1598,2.7,1599,2.7,1600,4.096,1601,4.096,1602,4.95,1603,2.7,1604,2.7,1605,2.7,1606,2.7,1607,4.096,1608,2.7,1609,2.7,1610,2.7,1611,2.7,1612,4.096,1613,2.7,1614,2.7,1615,2.13,1616,2.7,1617,2.7,1618,2.7,1619,4.096,1620,2.342,1621,2.7,1622,2.7,1623,2.7,1624,2.7,1625,2.7,1626,2.7,1627,2.7,1628,2.7,1629,2.7,1630,2.7,1631,5.525,1632,2.7,1633,2.7,1634,2.7,1635,2.7,1636,2.7,1637,2.7,1638,2.342,1639,2.7,1640,2.7,1641,2.7,1642,2.7,1643,6.252,1644,2.7,1645,5.94,1646,3.554,1647,2.7,1648,2.7,1649,2.7,1650,1.486,1651,2.7,1652,2.7,1653,2.7,1654,2.7,1655,3.554,1656,2.7,1657,2.7,1658,2.7,1659,4.096,1660,2.7,1661,2.7,1662,2.7,1663,3.068,1664,2.342,1665,2.7,1666,2.7,1667,2.107,1668,4.794,1669,2.7,1670,2.7,1671,2.7,1672,3.682,1673,2.7,1674,2.342,1675,2.7,1676,2.7,1677,4.95,1678,4.096,1679,2.7,1680,2.7,1681,1.573,1682,2.7,1683,2.7,1684,2.7,1685,2.7,1686,2.7,1687,1.79,1688,2.7,1689,2.7,1690,2.7,1691,1.79,1692,2.7,1693,4.096,1694,2.7,1695,2.7,1696,2.7,1697,2.7,1698,2.7,1699,2.7,1700,1.408,1701,1.726,1702,2.7,1703,4.096,1704,4.096,1705,2.7,1706,2.7,1707,4.95,1708,2.7,1709,2.7,1710,2.342,1711,2.7,1712,2.7,1713,4.096,1714,3.554,1715,2.7,1716,2.7,1717,2.342,1718,2.7,1719,4.096,1720,2.7,1721,2.7,1722,2.7,1723,2.7,1724,2.7,1725,2.7,1726,2.342,1727,2.7,1728,2.7,1729,2.7,1730,2.7,1731,2.7,1732,2.7,1733,1.673,1734,2.7,1735,2.7,1736,2.7,1737,2.7,1738,2.7,1739,5.94,1740,1.79,1741,2.7,1742,2.7,1743,2.7,1744,2.7,1745,1.673,1746,2.7,1747,4.096,1748,2.7,1749,2.7,1750,2.7,1751,2.7,1752,2.7,1753,2.7,1754,2.7,1755,2.7,1756,2.7,1757,2.7,1758,2.7,1759,2.7,1760,2.7,1761,2.7,1762,2.7,1763,2.7,1764,2.7,1765,4.096,1766,2.7,1767,2.7,1768,2.7,1769,2.7,1770,2.7,1771,2.7,1772,2.7,1773,1.79,1774,1.486,1775,2.7,1776,2.7,1777,2.7,1778,2.7,1779,2.7,1780,3.425,1781,1.486,1782,2.7,1783,2.7,1784,4.096,1785,2.7,1786,2.7,1787,4.096,1788,2.7,1789,3.196,1790,2.7,1791,2.7,1792,1.931,1793,2.7,1794,2.7,1795,2.7,1796,2.7,1797,2.7,1798,1.408,1799,2.342,1800,2.7,1801,2.7,1802,2.7,1803,2.7]],["title/interfaces/CustomData.html",[56,0.141,1804,2.418]],["body/interfaces/CustomData.html",[8,0.015,14,0.076,15,0.076,16,0.076,22,0.181,38,0.405,46,0.485,52,0.196,53,0.016,54,0.008,55,0.008,56,0.226,58,0.547,60,1.019,61,1.06,63,2.335,65,1.735,66,2.201,67,1.104,70,2.113,71,3.349,72,1.223,74,0.361,75,0.459,76,0.881,77,3.408,78,2.905,79,1.816,80,3.057,81,3.397,82,0.686,83,0.406,84,0.593,87,0.569,88,0.423,89,1.095,90,1.163,91,1.747,92,1.498,93,0.872,94,0.981,95,0.979,96,1.123,100,0.423,101,0.525,102,1.767,103,1.309,104,1.794,105,1.767,110,1.21,111,2.473,112,2.464,113,2.189,114,2.335,115,1.674,116,0.947,117,0.884,118,0.569,127,2.113,128,1.151,130,2.011,131,2.414,132,2.335,133,1.284,135,1.844,141,1.309,142,1.877,144,0.307,149,0.662,150,2.038,151,1.507,153,1.586,156,0.542,157,0.83,159,1.258,162,1.104,163,0.443,164,0.818,166,1.258,167,2.793,168,3.057,169,1.2,170,0.807,171,1.344,172,2.393,175,2.508,181,1.035,184,0.443,185,0.462,186,1.387,187,1.703,188,1.37,189,1.2,191,1.142,193,2.013,197,1.309,200,0.818,220,1.06,228,2.219,231,1.523,243,2.393,244,1.617,245,2.925,250,1.37,254,0.831,259,1.674,265,2.105,268,1.705,279,0.721,280,2.335,285,0.903,287,2.925,290,1.674,298,1.253,301,1.674,304,2.219,305,1.844,308,0.839,310,1.12,311,1.21,312,1.674,313,1.435,314,0.872,316,2.287,328,1.217,329,1.253,331,1.06,333,0.979,334,1.674,335,2.016,336,0.981,337,1.626,338,1.02,342,0.943,353,1.411,354,0.872,355,1.309,387,1.435,407,0.596,418,1.803,419,1.507,420,1.253,423,1.844,424,1.309,425,1.21,437,2.356,440,1.507,441,0.872,442,0.981,443,1.309,445,1.853,446,2.856,447,1.885,456,1.586,459,1.561,460,0.693,462,1.507,463,1.885,464,3.634,465,2.317,466,1.885,467,3.476,468,0.942,469,1.561,470,1.151,471,1.885,472,1.674,477,2.269,478,1.586,479,1.06,484,1.253,485,1.772,522,2.219,525,1.586,527,3.189,537,1.674,538,2.523,543,0.942,545,1.37,560,1.586,673,1.507,686,1.432,832,1.37,836,1.37,1040,1.586,1052,1.151,1062,2.393,1130,1.435,1143,3.294,1250,2.776,1380,1.06,1385,1.06,1389,1.772,1410,3.634,1437,1.586,1459,1.583,1488,1.885,1535,1.885,1538,2.017,1615,1.309,1650,2.464,1691,2.017,1804,3.873,1805,1.772,1806,2.925,1807,3.202,1808,3.202,1809,2.464,1810,1.586,1811,3.642,1812,2.175,1813,3.202,1814,2.609,1815,2.508,1816,2.175,1817,2.175,1818,1.435,1819,2.175,1820,2.175,1821,2.175,1822,2.175,1823,2.175,1824,2.175,1825,1.772,1826,2.609,1827,2.175,1828,1.586,1829,2.969,1830,2.175,1831,3.524,1832,2.175,1833,2.175,1834,2.969,1835,2.017,1836,2.175,1837,2.175,1838,2.017,1839,2.925,1840,1.772,1841,2.969,1842,1.772,1843,1.435,1844,2.175,1845,2.175,1846,2.175,1847,2.175,1848,1.885,1849,2.175,1850,2.175,1851,2.175,1852,3.202,1853,2.175,1854,2.175,1855,2.175,1856,2.175,1857,2.175,1858,1.885,1859,2.776,1860,2.969,1861,2.175,1862,2.175,1863,2.175,1864,3.634,1865,2.175,1866,2.175,1867,2.175,1868,3.801,1869,2.175,1870,2.175,1871,2.175,1872,2.175,1873,2.175,1874,3.202,1875,3.202,1876,3.202,1877,2.175,1878,3.202,1879,2.175,1880,1.507,1881,2.175,1882,1.885,1883,2.175,1884,3.801,1885,1.885,1886,2.175,1887,1.586,1888,2.175,1889,3.202,1890,2.175,1891,2.175,1892,1.674,1893,2.175,1894,2.175,1895,2.175,1896,2.175,1897,1.844,1898,2.175,1899,2.175,1900,1.151,1901,2.175,1902,2.175,1903,2.175,1904,2.175,1905,3.202,1906,2.175,1907,2.175,1908,2.175,1909,2.175,1910,2.175,1911,2.175,1912,2.175,1913,2.175,1914,2.175,1915,2.175,1916,2.017,1917,2.175,1918,2.175,1919,3.202,1920,2.175,1921,2.175,1922,2.175,1923,2.175,1924,2.175,1925,1.772,1926,2.175,1927,2.175,1928,2.175,1929,2.175,1930,2.175,1931,2.175,1932,2.175,1933,2.175,1934,2.175,1935,2.175,1936,3.801,1937,2.175,1938,2.175,1939,3.202,1940,2.175,1941,2.175,1942,4.193,1943,2.175,1944,3.272,1945,2.767,1946,4.193,1947,4.193,1948,2.767,1949,2.175,1950,2.175,1951,2.175,1952,4.193,1953,3.189,1954,2.175,1955,2.017,1956,3.801,1957,2.175,1958,3.801,1959,3.202,1960,3.202,1961,3.202,1962,3.202,1963,2.175,1964,2.175,1965,3.801,1966,3.801,1967,2.175,1968,2.113,1969,2.175,1970,2.175,1971,2.175,1972,2.175,1973,2.175,1974,2.175,1975,1.885,1976,1.586,1977,2.175,1978,1.772,1979,2.175,1980,2.175]],["title/components/DataModalComponent.html",[9,1.417,620,0.45]],["body/components/DataModalComponent.html",[7,1.839,8,0.015,9,2.597,10,1.765,14,0.169,15,0.121,16,0.121,17,2.771,22,0.222,24,0.708,31,1.839,36,2.295,38,0.647,46,0.541,48,1.961,52,0.141,53,0.026,54,0.012,55,0.011,66,1.394,74,0.244,75,0.484,76,0.618,79,1.915,82,0.533,83,0.385,84,0.532,87,0.91,88,0.677,89,0.647,90,0.708,96,1.172,99,0.947,100,0.677,101,0.839,116,0.785,117,0.589,144,0.466,149,0.455,163,0.708,184,0.9,185,1.191,336,1.065,338,1.107,342,1.024,381,1.641,392,2.081,394,1.449,407,0.822,408,1.354,541,1.948,620,0.784,621,1.839,622,2.546,623,1.695,624,2.277,625,1.765,626,2.189,630,1.732,631,1.729,642,2.189,648,1.52,689,4.421,699,2.66,700,2.071,701,2.439,702,2.189,703,3.221,704,2.189,708,2.784,709,2.784,710,1.695,711,2.189,712,1.918,713,2.784,714,1.506,715,3.221,716,1.765,717,1.765,718,1.918,719,1.839,720,1.695,721,1.839,722,2.189,723,2.189,724,1.765,725,1.463,726,3.061,727,2.189,728,1.918,729,2.002,730,1.839,731,2.189,732,1.839,733,2.439,734,2.189,735,1.839,736,1.839,737,2.189,738,1.695,739,1.839,740,1.839,741,1.765,742,1.242,743,2.189,744,2.189,763,3.544,849,1.918,880,3.063,960,4.508,1066,3.794,1096,3.368,1103,5.304,1176,2.925,1312,4.861,1348,5.237,1402,2.833,1405,5.897,1411,5.648,1413,4.218,1452,6.206,1455,2.535,1484,5.582,1528,4.218,1655,5.363,1664,5.363,1668,4.218,1674,4.218,1726,4.218,1981,6.163,1982,3.794,1983,6.182,1984,5.897,1985,6.797,1986,6.182,1987,6.797,1988,5.116,1989,4.862,1990,6.407,1991,6.182,1992,4.862,1993,4.862,1994,4.862,1995,4.862,1996,4.862,1997,6.182,1998,4.862,1999,4.862,2000,4.862,2001,5.363,2002,4.862,2003,4.862,2004,4.862,2005,4.862,2006,4.862,2007,3.477,2008,4.862,2009,4.862,2010,4.862]],["title/interfaces/DynamicEdge.html",[56,0.141,2011,2.587]],["body/interfaces/DynamicEdge.html",[8,0.015,14,0.101,15,0.2,16,0.101,22,0.208,38,0.538,46,0.477,52,0.193,53,0.021,54,0.014,55,0.01,56,0.259,58,0.727,60,1.355,61,1.41,70,1.909,72,1.025,74,0.203,75,0.486,82,0.444,83,0.368,84,0.429,87,0.757,88,0.563,89,1.094,90,1.145,91,2.073,92,1.4,94,1.2,95,1.302,96,1.138,97,2.605,99,0.788,100,0.563,104,1.847,105,2.627,106,2.004,110,1.516,116,0.514,121,2.467,130,2.519,131,2.558,133,1.159,135,2.865,141,1.74,142,1.86,144,0.277,146,1.468,148,1.632,149,0.581,150,2.123,156,0.806,157,0.632,162,2.255,164,0.663,166,1.296,169,1.596,170,1.074,171,1.287,172,2.797,177,2.35,181,1.355,184,0.589,185,0.615,186,1.47,187,1.79,189,1.596,191,1.453,193,1.713,200,0.763,220,1.41,223,2.109,224,1.468,230,3.017,231,1.781,254,0.538,256,2.856,279,0.717,285,0.49,291,1.57,293,3.192,294,1.989,298,2.256,305,2.558,308,1.116,310,1.572,311,1.247,313,1.909,314,1.159,316,2.673,320,1.252,328,1.21,329,2.256,330,2.109,335,1.821,336,0.886,337,1.468,338,0.921,342,0.852,353,1.074,354,1.159,355,1.74,357,2.109,358,1.302,359,1.909,407,0.826,416,0.994,418,1.511,437,2.166,439,2.357,440,2.004,441,1.57,442,1.2,443,2.673,446,2.256,456,2.109,457,2.161,459,2.321,465,2.243,467,1.821,468,1.252,469,1.41,479,1.41,482,1.53,488,2.892,511,0.852,522,2.004,526,1.116,543,1.252,560,2.109,636,1.302,683,2.225,686,1.2,830,1.984,842,1.355,861,2.225,924,1.701,1052,2.072,1053,3.85,1135,2.225,1218,2.004,1380,1.41,1385,1.296,1438,1.74,1441,2.585,1459,1.632,1495,2.892,1615,1.74,1650,2.225,1745,2.507,1798,2.109,1809,3.418,1810,3.239,1811,1.909,1825,2.357,1826,2.357,1828,2.109,1897,1.665,1900,1.53,2011,4.119,2012,2.357,2013,2.004,2014,3.789,2015,2.225,2016,4.446,2017,2.682,2018,2.682,2019,2.682,2020,2.682,2021,2.682,2022,3.891,2023,2.892,2024,3.156,2025,3.156,2026,3.156,2027,3.156,2028,2.507,2029,1.665,2030,2.682,2031,2.682,2032,4.415,2033,3.633,2034,2.856,2035,2.682,2036,4.119,2037,2.682,2038,4.274,2039,2.682,2040,2.682,2041,3.156,2042,2.682,2043,2.682,2044,2.682,2045,1.821,2046,2.682,2047,4.847,2048,2.682,2049,2.682,2050,2.892,2051,4.119,2052,2.682,2053,2.225,2054,2.682,2055,2.682,2056,3.156,2057,2.682,2058,2.682,2059,2.682,2060,2.682,2061,2.682,2062,2.682,2063,2.682,2064,2.682,2065,2.682,2066,4.274,2067,4.274,2068,2.682,2069,2.682,2070,2.682,2071,2.682,2072,2.682,2073,2.682,2074,4.274,2075,3.156,2076,2.507,2077,4.274,2078,3.156,2079,2.682,2080,2.109,2081,3.156,2082,3.156,2083,3.156,2084,2.682,2085,2.682,2086,2.682,2087,3.633,2088,3.633,2089,3.633,2090,3.633,2091,4.274,2092,4.274,2093,2.682,2094,4.274,2095,4.274,2096,3.633]],["title/classes/DynamicEdgeProvider.html",[53,0.021,2031,2.587]],["body/classes/DynamicEdgeProvider.html",[8,0.015,12,0.897,14,0.084,15,0.2,16,0.084,22,0.196,38,0.449,46,0.465,52,0.178,53,0.018,54,0.013,55,0.009,56,0.236,60,1.132,61,2.272,70,1.594,72,1.056,74,0.17,75,0.442,76,0.906,79,1.046,82,0.619,83,0.4,84,0.53,87,0.632,88,0.47,89,1.096,90,1.162,91,2.079,92,1.665,93,1.617,94,1.059,95,1.088,96,1.236,97,2.547,99,0.658,100,0.47,102,3.075,103,1.454,104,1.957,105,2.43,106,1.674,110,1.402,116,0.614,117,0.683,118,0.632,121,2.541,124,2.08,130,2.564,131,2.536,133,0.968,135,2.791,141,1.454,142,1.834,144,0.517,146,1.226,148,1.681,149,0.576,150,2.124,156,0.821,157,0.557,159,0.799,162,2.366,163,0.896,164,0.585,166,1.143,167,1.907,169,1.333,170,0.897,171,1.231,172,2.541,177,2.33,181,1.269,182,2.183,184,0.703,185,1.172,186,1.335,187,1.719,189,1.333,191,1.39,193,1.925,200,0.715,220,1.685,223,1.761,224,1.226,230,2.973,231,1.617,254,0.449,256,2.942,279,0.651,285,0.409,291,1.765,293,2.816,294,1.754,295,1.226,297,1.817,298,1.99,305,2.324,308,0.932,310,1.614,311,1.484,313,1.594,314,1.385,316,2.428,320,1.046,328,1.099,329,2.324,330,2.52,333,1.817,335,1.521,336,0.74,337,1.226,338,0.769,342,0.712,353,1.283,354,1.385,355,1.454,357,1.761,358,1.088,359,1.594,376,1.761,377,2.816,378,1.385,379,2.816,380,2.816,381,1.283,383,2.659,384,2.659,385,2.659,386,2.324,387,2.28,388,1.387,389,2.659,390,2.659,391,1.968,392,2.078,394,2.126,395,1.674,396,4.83,399,2.094,400,1.968,401,2.094,402,2.094,403,2.094,404,2.094,405,2.094,407,1.019,408,1.485,413,1.391,414,2.094,415,1.968,416,1.188,417,1.968,418,1.556,419,1.674,420,1.391,421,1.391,422,0.831,423,1.391,424,1.454,425,0.769,426,2.094,427,1.178,428,1.391,430,2.24,431,1.391,432,2.094,433,1.391,434,2.094,437,2.147,439,2.428,440,2.394,441,1.617,442,1.059,443,2.804,446,2.536,456,1.761,457,2.43,459,2.147,465,2.046,467,2.176,468,1.497,469,1.178,473,2.24,474,2.24,475,2.24,476,1.521,477,1.226,478,1.761,479,1.967,480,2.24,481,2.24,482,1.828,488,2.416,511,0.712,522,1.674,526,0.932,543,1.497,560,1.761,636,1.556,683,1.859,686,1.236,830,1.835,842,1.132,861,2.659,924,1.573,1052,2.33,1053,4.038,1135,1.859,1218,1.674,1380,1.178,1385,1.143,1438,1.454,1441,2.906,1459,1.44,1495,3.456,1615,1.454,1650,1.859,1745,2.094,1798,2.52,1809,2.659,1810,2.942,1811,1.594,1825,1.968,1826,1.968,1828,1.761,1897,1.391,1900,1.278,2011,3.204,2012,2.816,2013,1.674,2014,3.734,2015,1.859,2016,4.503,2017,2.24,2018,2.24,2019,2.24,2020,2.24,2021,2.24,2022,3.722,2023,2.416,2024,2.636,2025,3.771,2026,3.771,2027,3.771,2028,2.995,2029,1.99,2030,3.204,2031,3.204,2032,4.084,2033,3.204,2034,2.52,2035,2.24,2036,3.741,2037,2.24,2038,4.805,2039,3.741,2040,3.741,2041,2.636,2042,2.24,2043,2.24,2044,2.24,2045,1.521,2046,2.24,2047,4.403,2048,2.24,2049,2.24,2050,2.416,2051,3.741,2052,2.24,2053,1.859,2054,2.24,2055,2.24,2056,2.636,2057,2.24,2058,2.24,2059,2.24,2060,2.24,2061,2.24,2062,2.24,2063,2.24,2064,2.24,2065,2.24,2066,3.771,2067,3.771,2068,2.24,2069,2.24,2070,2.24,2071,2.24,2072,2.24,2073,2.24,2074,3.771,2075,2.636,2076,2.094,2077,3.771,2078,2.636,2079,2.24,2080,1.761,2081,2.636,2082,2.636,2083,2.636,2084,2.24,2085,2.24,2086,2.24,2087,3.204,2088,3.204,2089,3.204,2090,3.204,2091,3.771,2092,3.771,2093,2.24,2094,3.771,2095,3.771,2096,3.204,2097,3.378,2098,3.378,2099,3.378,2100,3.378,2101,2.636]],["title/interfaces/DynamicEdgeType.html",[56,0.141,2016,2.418]],["body/interfaces/DynamicEdgeType.html",[8,0.015,14,0.098,15,0.2,16,0.098,22,0.206,38,0.523,46,0.472,52,0.19,53,0.021,54,0.014,55,0.01,56,0.257,58,0.707,60,1.317,61,1.371,70,2.536,72,1.289,74,0.197,75,0.515,76,0.683,82,0.431,83,0.377,84,0.421,87,0.736,88,0.547,89,1.094,90,1.126,91,2.169,92,1.373,94,1.177,95,1.266,96,1.129,97,2.639,99,0.766,100,0.547,104,1.829,105,2.596,106,1.948,110,1.498,116,0.499,121,2.42,130,2.691,131,2.837,133,1.127,135,3.053,141,2.313,142,1.888,144,0.27,146,1.951,148,1.601,149,0.573,150,2.117,156,0.797,157,0.62,162,2.583,164,0.835,166,1.683,169,1.551,170,1.044,171,1.279,172,2.757,177,2.316,181,1.385,184,0.572,185,0.598,186,1.449,187,1.779,189,1.551,191,1.444,193,1.689,200,0.756,220,1.371,223,2.05,224,1.428,230,3.001,231,1.755,254,0.523,256,2.802,279,0.706,285,0.476,291,1.54,293,3.132,294,1.951,298,2.213,305,2.521,308,1.085,310,1.562,311,1.224,313,1.856,314,1.127,316,2.635,320,1.218,328,1.192,329,2.521,330,2.05,335,1.771,336,0.861,337,1.428,338,0.895,342,0.828,353,1.044,354,1.127,355,1.692,357,2.05,358,1.266,359,1.856,407,0.917,416,0.967,418,1.085,437,2.294,439,2.313,440,1.948,441,1.54,442,1.442,443,2.635,446,2.213,456,2.05,457,2.12,459,2.294,465,2.087,467,1.771,468,1.218,469,1.371,479,1.371,482,1.488,488,2.812,511,0.828,522,1.948,526,1.085,543,1.218,560,2.802,636,1.266,683,2.957,686,1.177,830,1.96,842,1.317,861,2.164,924,1.681,1052,2.033,1053,3.795,1135,2.164,1218,1.948,1380,1.371,1385,1.272,1438,1.692,1441,2.536,1459,1.824,1495,2.812,1615,1.692,1650,2.164,1745,2.437,1798,2.05,1809,3.369,1810,2.802,1811,1.856,1825,3.132,1826,3.132,1828,2.802,1897,1.619,1900,1.488,2011,3.564,2012,2.291,2013,1.948,2014,3.861,2015,2.957,2016,4.513,2017,3.564,2018,3.564,2019,4.364,2020,3.564,2021,3.564,2022,3.921,2023,2.812,2024,3.068,2025,3.068,2026,3.068,2027,3.068,2028,2.437,2029,1.619,2030,2.607,2031,2.607,2032,4.364,2033,3.564,2034,2.802,2035,2.607,2036,4.06,2037,2.607,2038,4.193,2039,2.607,2040,2.607,2041,3.068,2042,2.607,2043,2.607,2044,2.607,2045,1.771,2046,2.607,2047,4.777,2048,2.607,2049,2.607,2050,2.812,2051,4.06,2052,2.607,2053,2.164,2054,2.607,2055,2.607,2056,3.068,2057,2.607,2058,2.607,2059,2.607,2060,2.607,2061,2.607,2062,2.607,2063,2.607,2064,2.607,2065,2.607,2066,4.193,2067,4.193,2068,2.607,2069,2.607,2070,2.607,2071,2.607,2072,2.607,2073,2.607,2074,4.193,2075,3.068,2076,2.437,2077,4.193,2078,3.068,2079,2.607,2080,2.05,2081,3.068,2082,3.068,2083,3.068,2084,2.607,2085,2.607,2086,2.607,2087,3.564,2088,3.564,2089,3.564,2090,3.564,2091,4.193,2092,4.193,2093,2.607,2094,4.193,2095,4.193,2096,3.564]],["title/classes/DynamicNodeProvider.html",[53,0.021,2102,2.79]],["body/classes/DynamicNodeProvider.html",[8,0.015,12,0.914,14,0.086,15,0.186,16,0.086,22,0.203,38,0.458,46,0.426,52,0.142,53,0.018,54,0.01,55,0.009,56,0.206,60,1.154,61,2.288,66,1.404,67,2.477,72,1.162,74,0.173,75,0.446,76,0.911,79,1.066,82,0.626,83,0.388,84,0.534,87,0.644,88,0.479,89,1.101,90,1.062,92,1.677,93,1.635,94,1.073,95,1.109,96,1.227,97,2.48,99,0.671,100,0.682,101,0.594,102,3.082,103,1.482,104,1.904,105,2.25,106,1.706,110,1.298,113,2.017,116,0.437,117,0.795,118,0.644,121,2.568,124,2.108,130,2.35,131,2.558,135,2.558,137,2.006,140,1.404,141,1.482,142,1.402,143,1.955,144,0.519,149,0.581,150,2.118,156,0.795,157,0.565,159,0.815,162,2.383,163,0.904,167,1.933,171,1.237,177,2.157,181,1.21,182,2.197,184,0.713,185,1.175,186,1.553,187,1.752,188,2.797,189,1.358,191,1.441,193,1.936,200,0.72,220,1.708,223,1.795,224,1.25,228,1.706,230,2.955,231,1.635,243,2.206,250,3.23,254,0.759,256,2.554,279,0.757,285,0.417,291,1.781,294,1.25,295,1.25,297,1.836,298,1.418,305,2.348,308,0.95,310,1.578,311,0.784,314,1.404,316,2.454,320,1.066,328,1.11,329,1.418,333,1.836,336,0.754,337,1.25,338,0.784,342,0.725,354,1.404,355,1.482,357,1.795,358,1.109,359,1.625,376,1.795,377,2.855,378,1.404,379,2.855,380,2.855,381,1.3,383,2.696,384,2.696,385,2.696,386,2.348,387,2.312,388,1.402,389,2.696,390,2.696,391,2.006,392,2.083,394,2.137,395,1.706,396,4.843,399,2.134,400,2.006,401,2.134,402,2.134,403,2.134,404,2.134,405,2.134,407,1.006,408,1.494,413,1.418,414,3.036,415,2.006,416,0.847,417,2.006,418,1.351,419,1.706,420,1.418,421,1.418,422,0.847,423,1.418,424,1.482,425,0.784,426,2.134,427,1.201,428,1.418,430,2.283,431,1.418,432,2.134,433,1.418,434,2.134,437,2.447,441,1.781,442,0.754,443,2.825,445,2.447,446,2.558,457,2.451,459,2.166,462,2.427,465,2.056,467,2.206,469,1.201,473,2.283,474,2.283,475,2.283,476,1.55,477,1.25,478,1.795,479,1.988,480,2.283,481,2.283,482,1.853,511,0.725,526,0.95,537,3.754,543,1.517,554,2.687,555,1.706,654,1.482,683,1.895,686,1.249,830,1.851,842,1.154,861,2.696,924,1.252,1053,2.134,1218,1.706,1277,2.462,1380,1.201,1438,2.108,1459,1.459,1615,1.482,1745,2.134,1810,2.554,1811,3.534,1814,2.006,1828,1.795,1840,2.855,1858,2.134,1864,3.85,1900,1.303,1975,2.134,2012,2.855,2013,1.706,2014,3.779,2015,1.895,2017,2.283,2018,2.283,2019,3.781,2020,2.283,2021,2.283,2022,3.806,2028,3.036,2029,2.017,2030,3.249,2032,3.781,2033,3.249,2034,1.795,2035,2.283,2036,3.781,2037,2.283,2039,3.781,2040,3.781,2042,2.283,2043,2.283,2044,2.283,2045,1.55,2046,2.283,2048,2.283,2049,2.283,2051,3.249,2052,2.283,2053,2.696,2054,2.283,2055,2.283,2057,2.283,2058,2.283,2059,2.283,2060,2.283,2061,2.283,2062,2.283,2063,3.781,2064,2.283,2065,2.283,2068,2.283,2069,2.283,2070,2.283,2071,2.283,2072,2.283,2073,2.283,2079,3.249,2080,1.795,2084,2.283,2085,2.283,2086,2.283,2087,2.283,2088,2.283,2089,2.283,2090,2.283,2093,2.283,2096,3.249,2101,2.687,2102,3.503,2103,4.947,2104,3.249,2105,4.25,2106,2.673,2107,3.62,2108,2.312,2109,3.823,2110,4.25,2111,2.554,2112,4.25,2113,4.25,2114,4.25,2115,4.442,2116,3.443,2117,2.987,2118,3.443,2119,2.987,2120,4.25,2121,4.25,2122,2.987,2123,2.987,2124,2.987,2125,2.987,2126,4.947,2127,2.987,2128,4.25,2129,2.987,2130,2.987,2131,2.987,2132,2.987,2133,2.987,2134,2.987,2135,2.987,2136,2.987,2137,2.687,2138,2.687,2139,2.987,2140,4.25,2141,2.987,2142,4.25,2143,2.987,2144,2.987,2145,2.987]],["title/interfaces/DynamicNodeType.html",[56,0.141,2115,2.79]],["body/interfaces/DynamicNodeType.html",[8,0.015,14,0.101,15,0.19,16,0.101,22,0.212,38,0.539,46,0.426,52,0.159,53,0.022,54,0.011,55,0.01,56,0.241,58,0.728,60,1.358,61,1.413,66,1.162,67,2.258,72,1.343,74,0.204,75,0.522,82,0.445,83,0.312,84,0.429,87,0.759,88,0.564,89,1.101,92,1.402,94,1.202,95,1.306,96,1.105,97,2.606,99,0.789,100,0.764,101,0.699,104,1.769,105,2.454,106,2.009,110,1.416,113,1.67,117,0.491,121,2.471,130,2.634,131,2.868,135,3.023,137,3.197,140,1.162,141,2.361,142,1.349,143,2.075,144,0.278,149,0.582,150,2.117,156,0.753,157,0.633,162,2.606,171,1.288,177,2.076,181,1.356,184,0.59,185,0.616,186,1.648,187,1.81,188,2.471,189,1.599,191,1.49,193,1.716,200,0.764,220,1.413,223,2.114,224,1.472,228,2.009,230,2.985,231,1.783,243,2.471,250,3.001,254,0.827,256,2.114,279,0.803,285,0.491,291,1.573,294,1.472,298,1.67,305,2.561,308,1.118,310,1.467,314,1.162,316,2.677,320,1.256,328,1.211,329,2.26,336,0.888,337,1.472,338,0.923,342,0.854,354,1.162,355,1.745,357,2.114,358,1.306,359,1.913,407,0.887,437,2.503,441,1.783,442,1.202,443,2.677,445,2.559,446,2.26,457,2.165,459,2.324,462,2.009,465,2.14,467,1.826,469,1.413,479,1.413,482,1.534,511,0.854,526,1.118,537,3.422,543,1.256,554,3.163,555,2.009,654,1.745,683,3.019,686,1.202,830,1.985,842,1.358,861,2.231,924,1.402,1053,2.513,1218,2.009,1277,2.899,1380,1.413,1438,2.361,1459,1.853,1615,1.745,1745,2.513,1810,2.114,1811,3.464,1814,2.362,1828,2.861,1840,2.362,1858,2.513,1864,4.131,1900,1.534,1975,2.513,2012,2.362,2013,2.009,2014,3.749,2015,3.019,2017,3.638,2018,3.638,2019,4.867,2020,3.638,2021,3.638,2022,3.989,2028,2.513,2029,1.67,2030,2.688,2032,4.124,2033,3.638,2034,2.114,2035,2.688,2036,4.124,2037,2.688,2039,2.688,2040,2.688,2042,2.688,2043,2.688,2044,2.688,2045,1.826,2046,2.688,2048,2.688,2049,2.688,2051,3.638,2052,2.688,2053,3.019,2054,2.688,2055,2.688,2057,2.688,2058,2.688,2059,2.688,2060,2.688,2061,2.688,2062,2.688,2063,4.124,2064,2.688,2065,2.688,2068,2.688,2069,2.688,2070,2.688,2071,2.688,2072,2.688,2073,2.688,2079,3.638,2080,2.114,2084,2.688,2085,2.688,2086,2.688,2087,2.688,2088,2.688,2089,2.688,2090,2.688,2093,2.688,2096,3.638,2102,2.899,2103,4.76,2104,2.688,2105,3.517,2106,2.361,2107,3.197,2108,1.913,2109,3.163,2110,3.517,2111,2.114,2112,3.517,2113,3.517,2114,3.517,2115,4.448,2119,3.517,2120,4.76,2121,4.76,2122,3.517,2123,3.517,2124,3.517,2125,3.517,2126,5.396,2127,3.517,2128,4.76,2129,3.517,2130,3.517,2131,3.517,2132,3.517,2133,3.517,2134,3.517,2135,3.517,2136,3.517,2137,3.163,2138,3.163,2139,3.517,2140,4.76,2141,3.517,2142,4.76,2143,3.517,2144,3.517,2145,3.517]],["title/interfaces/Edge.html",[56,0.141,90,0.568]],["body/interfaces/Edge.html",[8,0.015,14,0.083,15,0.083,16,0.083,22,0.206,34,0.855,38,0.445,46,0.445,52,0.201,53,0.018,54,0.009,55,0.009,56,0.258,58,0.602,65,1.275,67,1.743,68,1.508,72,1.05,74,0.308,75,0.529,76,0.61,79,1.899,82,0.781,83,0.394,84,0.64,85,0.924,88,0.668,89,1.095,90,1.185,91,1.934,92,1.659,93,1.995,94,1.343,96,1.104,99,0.652,100,0.668,101,0.578,104,2.015,107,0.924,111,1.267,117,0.743,118,1.148,122,2.066,128,2.124,133,1.376,140,1.609,142,1.893,143,2.219,144,0.445,147,1.267,148,1.934,149,0.666,150,2.066,155,0.855,156,0.743,157,0.882,159,0.792,163,0.699,164,0.786,166,1.78,170,1.49,171,0.578,181,1.194,182,1.546,185,1.189,191,1.412,193,2.136,200,0.673,254,0.445,262,1.441,265,1.808,279,0.648,285,0.406,291,1.861,294,1.216,295,1.216,297,2.335,308,1.325,309,2.175,310,1.012,311,1.621,314,0.96,320,1.487,321,2.266,333,1.078,354,0.96,358,1.975,363,1.376,378,1.376,386,1.379,388,0.823,407,0.864,408,0.733,413,1.379,416,1.181,418,1.549,421,2.674,422,0.823,425,1.621,427,2.138,428,1.379,431,1.379,433,1.379,441,1.376,442,0.733,445,2.138,453,2.312,457,1.894,460,1.278,468,1.037,476,2.762,477,1.743,479,2.138,482,2.457,511,0.705,526,1.92,538,3.12,541,1.376,545,2.528,547,2.642,555,2.379,576,1.842,582,2.908,672,1.894,674,1.58,681,1.743,690,2.642,698,1.842,725,0.792,777,1.958,778,1.808,780,1.881,826,1.122,830,1.827,842,1.122,844,1.441,895,2.332,924,1.434,1097,1.659,1098,1.977,1185,1.122,1264,2.504,1266,2.504,1267,1.746,1342,2.038,1359,1.58,1385,0.792,1393,1.58,1438,2.066,1441,1.58,1458,1.894,1459,1.827,1524,2.642,1701,1.167,1774,1.842,1815,3.064,1818,2.266,1843,1.58,1897,1.379,1900,1.267,1944,1.58,1945,1.58,1948,2.266,1953,1.58,1968,1.58,2045,1.508,2106,2.066,2111,2.504,2146,1.746,2147,1.842,2148,2.798,2149,2.798,2150,2.526,2151,2.932,2152,1.842,2153,2.642,2154,2.066,2155,2.504,2156,1.951,2157,2.798,2158,1.894,2159,1.951,2160,1.951,2161,1.951,2162,2.798,2163,1.951,2164,1.951,2165,2.649,2166,2.798,2167,1.951,2168,1.951,2169,1.951,2170,1.951,2171,1.842,2172,1.951,2173,1.951,2174,1.951,2175,1.951,2176,1.842,2177,2.066,2178,1.951,2179,1.951,2180,1.321,2181,1.746,2182,1.951,2183,1.842,2184,1.951,2185,1.951,2186,1.951,2187,1.951,2188,1.951,2189,1.951,2190,1.951,2191,1.951,2192,1.951,2193,1.951,2194,1.951,2195,1.951,2196,1.951,2197,1.951,2198,1.951,2199,1.951,2200,1.951,2201,1.951,2202,2.798,2203,2.642,2204,1.951,2205,1.951,2206,1.951,2207,1.951,2208,1.951,2209,1.951,2210,1.951,2211,1.951,2212,1.951,2213,2.798,2214,1.951,2215,1.951,2216,1.951,2217,1.951,2218,2.798,2219,1.951,2220,1.951,2221,1.951,2222,1.951,2223,2.798,2224,2.798,2225,1.951,2226,1.951,2227,1.951,2228,1.951,2229,1.951,2230,2.798,2231,1.951,2232,1.951,2233,1.951,2234,1.951,2235,1.951,2236,3.574,2237,1.951,2238,1.951,2239,1.951,2240,1.951,2241,1.951,2242,1.951,2243,1.951,2244,1.951,2245,1.951,2246,1.951,2247,1.951,2248,1.842,2249,2.798,2250,1.951,2251,2.066,2252,1.951,2253,1.951,2254,2.798,2255,1.977,2256,1.951,2257,1.951,2258,1.951,2259,1.951,2260,2.798,2261,1.951,2262,2.798,2263,1.951,2264,2.798,2265,2.798,2266,1.951,2267,1.951,2268,1.951,2269,1.951,2270,1.951,2271,1.951,2272,1.951,2273,2.798,2274,1.951,2275,1.951,2276,2.798,2277,1.951,2278,1.951,2279,1.951,2280,1.951,2281,1.951,2282,1.951,2283,1.951,2284,1.951,2285,2.798,2286,1.951,2287,1.951,2288,1.951,2289,1.951,2290,1.951,2291,1.951,2292,1.951,2293,1.951,2294,1.951,2295,1.951,2296,1.951,2297,1.951,2298,1.951,2299,1.951,2300,1.951,2301,1.951,2302,1.951,2303,1.951,2304,1.951,2305,2.798,2306,1.951,2307,1.951,2308,1.951,2309,1.951,2310,1.951,2311,1.951,2312,1.951,2313,1.951]],["title/interfaces/EdgeType.html",[56,0.141,91,1.162]],["body/interfaces/EdgeType.html",[8,0.015,14,0.084,15,0.084,16,0.084,22,0.206,34,0.862,38,0.449,46,0.447,52,0.202,53,0.018,54,0.009,55,0.009,56,0.258,58,0.606,65,1.282,67,2.047,68,2.174,72,1.055,74,0.309,75,0.53,76,0.613,79,1.045,82,0.743,83,0.378,84,0.636,85,1.332,88,0.672,89,1.096,90,1.185,91,1.834,92,1.664,93,1.867,94,1.348,96,1.107,99,0.657,100,0.672,101,0.582,104,1.956,107,1.332,111,1.276,117,0.745,118,1.152,122,2.078,128,2.133,133,1.384,140,1.764,142,1.895,143,2.245,144,0.447,147,1.276,148,1.94,149,0.667,150,2.058,155,0.862,156,0.745,157,0.889,159,1.143,163,0.703,164,0.683,166,1.651,170,1.497,171,0.582,181,1.198,182,1.555,185,1.19,191,1.414,193,2.138,200,0.675,254,0.449,262,1.452,265,1.816,279,0.65,285,0.409,291,1.616,294,1.225,295,1.225,297,2.182,308,1.332,309,2.182,310,1.017,311,1.625,314,0.967,320,1.495,321,2.278,333,1.087,354,0.967,358,2.097,363,1.384,378,1.384,386,1.389,388,0.83,398,2.174,407,0.866,408,0.739,413,1.389,416,0.83,418,1.332,421,2.535,422,0.83,425,1.678,427,2.146,428,1.389,431,1.389,433,1.389,441,1.384,442,0.739,445,2.362,453,2.322,457,1.905,460,1.284,468,1.495,476,2.771,477,1.753,479,2.146,482,2.464,511,0.711,526,1.698,538,2.916,541,1.384,545,2.771,547,3.103,555,2.392,576,1.857,582,2.916,672,2.224,674,1.592,681,1.753,690,2.657,698,1.857,725,0.798,777,1.966,778,1.816,780,1.889,826,1.13,830,1.834,842,1.13,844,1.452,895,2.337,924,1.441,1097,1.672,1098,1.389,1185,1.13,1264,2.518,1266,2.518,1267,1.759,1342,2.047,1359,1.592,1385,0.798,1393,1.592,1438,2.426,1441,2.278,1458,1.905,1459,1.834,1524,2.657,1701,1.176,1774,1.857,1815,3.073,1818,2.278,1843,1.592,1897,1.389,1900,1.276,1944,1.592,1945,1.592,1948,2.278,1953,1.592,1968,1.592,2045,1.519,2106,2.078,2111,2.518,2146,1.759,2147,1.857,2148,1.966,2149,1.966,2150,2.322,2151,2.991,2152,1.857,2153,2.657,2154,2.426,2155,2.94,2156,1.966,2157,2.813,2158,2.224,2159,2.813,2160,3.586,2161,2.813,2162,3.795,2163,1.966,2164,1.966,2165,2.661,2166,2.813,2167,1.966,2168,1.966,2169,1.966,2170,1.966,2171,1.857,2172,1.966,2173,1.966,2174,1.966,2175,1.966,2176,1.857,2177,2.078,2178,1.966,2179,1.966,2180,1.331,2181,1.759,2182,1.966,2183,1.857,2184,1.966,2185,1.966,2186,1.966,2187,1.966,2188,1.966,2189,1.966,2190,1.966,2191,1.966,2192,1.966,2193,1.966,2194,1.966,2195,1.966,2196,1.966,2197,1.966,2198,1.966,2199,1.966,2200,1.966,2201,1.966,2202,2.813,2203,2.657,2204,1.966,2205,1.966,2206,1.966,2207,1.966,2208,1.966,2209,1.966,2210,1.966,2211,1.966,2212,1.966,2213,2.813,2214,1.966,2215,1.966,2216,1.966,2217,1.966,2218,2.813,2219,1.966,2220,1.966,2221,1.966,2222,1.966,2223,2.813,2224,2.813,2225,1.966,2226,1.966,2227,1.966,2228,1.966,2229,1.966,2230,2.813,2231,1.966,2232,1.966,2233,1.966,2234,1.966,2235,1.966,2236,3.586,2237,1.966,2238,1.966,2239,1.966,2240,1.966,2241,1.966,2242,1.966,2243,1.966,2244,1.966,2245,1.966,2246,1.966,2247,1.966,2248,1.857,2249,2.813,2250,1.966,2251,2.078,2252,1.966,2253,1.966,2254,2.813,2255,1.988,2256,1.966,2257,1.966,2258,1.966,2259,1.966,2260,2.813,2261,1.966,2262,2.813,2263,1.966,2264,2.813,2265,2.813,2266,1.966,2267,1.966,2268,1.966,2269,1.966,2270,1.966,2271,1.966,2272,1.966,2273,2.813,2274,1.966,2275,1.966,2276,2.813,2277,1.966,2278,1.966,2279,1.966,2280,1.966,2281,1.966,2282,1.966,2283,1.966,2284,1.966,2285,2.813,2286,1.966,2287,1.966,2288,1.966,2289,1.966,2290,1.966,2291,1.966,2292,1.966,2293,1.966,2294,1.966,2295,1.966,2296,1.966,2297,1.966,2298,1.966,2299,1.966,2300,1.966,2301,1.966,2302,1.966,2303,1.966,2304,1.966,2305,2.813,2306,1.966,2307,1.966,2308,1.966,2309,1.966,2310,1.966,2311,1.966,2312,1.966,2313,1.966]],["title/interfaces/FacetChartDataPoint.html",[56,0.141,2314,2.79]],["body/interfaces/FacetChartDataPoint.html",[8,0.015,14,0.107,15,0.107,16,0.107,22,0.224,24,0.625,34,1.097,38,0.571,42,1.438,46,0.468,48,1.937,52,0.165,53,0.023,54,0.014,55,0.01,56,0.155,58,0.771,74,0.321,75,0.446,81,2.026,82,0.702,83,0.286,84,0.61,85,1.958,86,3.067,87,0.803,88,0.598,96,1.237,99,0.836,100,0.794,101,0.741,110,1.458,116,0.902,117,0.916,140,1.231,143,1.699,144,0.391,146,1.559,149,0.638,155,2.036,156,0.775,157,0.919,163,0.625,171,0.741,175,2.026,176,2.127,181,0.836,182,2.062,184,0.83,186,1.349,196,1.231,197,1.848,200,0.817,219,2.661,244,1.573,254,0.759,268,1.056,279,0.658,289,1.768,297,1.383,300,2.362,328,1.421,336,0.94,338,0.978,342,1.201,344,1.559,349,2.026,353,1.14,378,1.231,381,1.14,388,1.402,407,0.852,422,1.056,425,0.978,442,0.94,453,1.768,494,1.056,511,0.905,518,3.35,580,1.768,620,0.658,629,1.457,630,0.905,631,1.349,648,1.056,654,1.848,663,1.76,686,0.94,724,1.559,725,1.349,747,2.755,749,2.973,758,2.348,762,1.848,763,2.127,775,2.883,780,2.145,798,2.847,800,1.33,801,1.766,803,1.91,828,2.636,844,1.848,847,1.848,849,1.694,850,1.848,851,1.768,879,2.239,880,3.69,888,2.847,895,2.629,912,2.026,923,2.691,934,2.157,950,3.35,989,3.323,1035,2.935,1090,2.755,1095,2.026,1130,2.026,1246,1.768,1339,4.137,1342,2.324,1347,2.362,1349,3.323,1351,3.781,1352,2.847,1363,2.847,1372,2.847,1373,2.847,1375,2.847,1376,2.847,1385,1.016,1407,3.338,1458,1.694,1485,2.661,1489,2.026,1506,4.449,1701,1.497,1848,2.661,1882,2.661,1885,2.661,1887,2.239,2180,1.694,2314,4.578,2315,3.35,2316,3.07,2317,3.35,2318,3.07,2319,4.947,2320,3.725,2321,3.725,2322,3.725,2323,3.725,2324,3.725,2325,3.725,2326,3.725,2327,3.725,2328,3.725,2329,3.725,2330,2.127,2331,3.725,2332,2.847,2333,2.127,2334,2.127,2335,3.725,2336,3.725,2337,3.725,2338,3.725,2339,3.725,2340,3.725,2341,4.947,2342,3.725,2343,3.725,2344,2.661,2345,3.725,2346,4.947,2347,4.947,2348,3.725,2349,3.725,2350,3.725,2351,3.725,2352,2.362,2353,3.725,2354,3.725,2355,3.725,2356,3.725,2357,3.725,2358,3.725,2359,3.725,2360,4.947,2361,3.781,2362,4.947,2363,3.725,2364,3.725,2365,3.35,2366,3.725,2367,3.725,2368,2.661,2369,3.725,2370,3.725,2371,3.725,2372,2.502,2373,3.725,2374,3.725,2375,3.725,2376,3.725,2377,3.725,2378,3.725,2379,3.725,2380,3.725,2381,3.725,2382,3.725,2383,3.725,2384,3.725,2385,3.725,2386,3.725,2387,3.725,2388,4.947,2389,3.725,2390,3.725,2391,4.947,2392,3.725,2393,3.725,2394,3.725,2395,3.725,2396,3.725,2397,3.725,2398,3.725,2399,3.725,2400,3.725,2401,2.847,2402,3.725,2403,3.725,2404,3.725,2405,4.947,2406,3.725,2407,2.661,2408,3.725,2409,3.725,2410,3.725,2411,3.725,2412,3.725,2413,3.725,2414,3.725,2415,3.725,2416,3.725,2417,3.725,2418,3.725,2419,3.725,2420,3.725,2421,3.725,2422,4.947,2423,3.725,2424,3.725,2425,3.725,2426,3.725,2427,4.947,2428,3.725,2429,3.725,2430,3.725]],["title/interfaces/FacetDateConfig.html",[56,0.141,833,2.587]],["body/interfaces/FacetDateConfig.html",[8,0.015,14,0.106,15,0.106,16,0.106,22,0.228,24,0.621,29,2.349,38,0.568,42,1.43,46,0.293,48,1.695,52,0.185,53,0.023,54,0.013,55,0.01,56,0.205,58,0.767,65,1.508,74,0.214,75,0.445,82,0.839,83,0.342,84,0.604,85,2.176,86,2.803,87,0.799,88,0.594,96,1.156,97,2.139,98,2.796,99,0.831,100,0.791,101,0.736,107,1.567,110,1.454,116,0.981,117,0.517,118,1.063,126,3.126,144,0.293,149,0.531,155,1.631,156,0.96,157,0.841,164,0.517,166,1.01,184,0.621,185,0.97,186,1.01,187,1.787,196,1.224,200,0.847,203,2.015,204,2.015,205,2.015,224,1.55,254,0.756,268,1.397,279,0.736,285,0.688,289,1.758,328,1.243,331,1.488,336,0.935,338,0.972,342,0.899,388,1.397,416,1.05,422,1.397,425,0.972,460,1.293,470,1.615,494,1.05,511,0.899,620,0.655,629,1.451,630,0.899,631,0.899,648,1.05,663,1.773,686,0.935,710,1.488,714,1.322,742,1.739,745,2.226,746,3.053,747,2.445,748,3.767,749,2.962,750,2.98,751,1.488,752,3.331,753,3.331,754,1.922,755,3.331,756,3.331,757,3.521,758,2.803,759,2.115,762,1.837,763,2.115,766,4.433,767,4.433,768,4.433,769,4.982,770,4.433,771,4.433,772,2.815,775,2.875,776,4.566,777,2.226,778,2.056,779,4.982,780,2.139,781,2.558,783,2.349,795,3.331,796,1.55,798,2.831,800,1.322,801,1.759,803,1.903,806,3.331,808,3.331,810,3.966,813,4.566,815,4.062,819,2.241,824,3.053,825,4.982,826,1.43,827,3.331,828,2.339,829,3.331,830,1.272,831,2.488,832,2.558,833,3.767,834,3.331,835,3.331,836,1.922,837,2.831,838,4.982,839,3.331,840,3.331,841,2.646,842,1.43,843,2.488,844,1.837,845,3.331,846,3.331,847,1.837,848,3.331,849,1.684,850,1.837,851,1.758,852,3.331,853,4.433,854,4.433,855,4.433,856,3.331,857,3.331,858,3.053,859,3.053,860,3.331,861,3.126,862,4.433,863,3.331,864,3.331,865,4.433,866,3.331,867,4.433,868,3.331,869,3.331,870,3.331,871,2.115,872,3.331,873,4.433,874,3.331,875,3.331,876,3.331,877,3.331,878,3.331,879,2.226,880,3.163,881,3.331,882,3.331,883,3.331,884,3.331,885,3.053,886,3.331,887,3.331,888,2.831,889,3.331,890,3.331,891,3.331,892,3.331,893,4.433,894,3.053,895,2.28,896,3.331,897,3.053,898,3.331,899,3.331,900,3.331,901,3.331,902,2.488,903,3.72,904,2.488,905,3.331,906,3.331,907,3.331,908,3.513,909,2.115,910,2.488,911,3.331,912,2.015,913,2.488,914,3.053,915,3.331,916,3.331,917,2.488,918,3.331,919,2.488,920,2.488,921,3.331,922,3.331,923,2.015,924,1.091,925,2.015,926,3.331,927,3.331,928,3.331,929,3.331,930,3.331,931,3.331,932,3.331,933,3.331,934,1.615,935,3.331,936,3.331,937,3.053,938,3.331,939,3.331,940,3.331,941,3.331,942,3.331,943,2.015,944,3.331]],["title/interfaces/FacetDateParams.html",[56,0.141,748,2.587]],["body/interfaces/FacetDateParams.html",[8,0.015,14,0.103,15,0.103,16,0.103,22,0.227,24,0.601,29,2.274,38,0.55,42,1.384,46,0.283,48,1.667,52,0.182,53,0.022,54,0.013,55,0.01,56,0.201,58,0.743,65,1.475,74,0.207,75,0.435,76,1.002,82,0.887,83,0.381,84,0.618,85,2.196,86,2.766,87,0.773,88,0.575,96,1.145,97,2.104,98,2.765,99,0.805,100,0.774,101,0.713,107,1.533,110,1.265,116,0.975,117,0.5,118,1.04,126,3.058,144,0.283,149,0.52,155,1.605,156,0.956,157,0.833,164,0.5,166,0.978,184,0.601,185,0.955,186,0.978,187,1.774,196,1.184,200,0.842,203,1.95,204,1.95,205,1.95,224,1.5,254,0.739,268,1.367,279,0.724,285,0.673,289,1.702,328,1.223,331,1.441,336,0.905,338,0.941,342,0.871,388,1.367,416,1.016,422,1.367,425,0.941,460,1.265,470,1.563,494,1.016,511,0.871,620,0.641,629,1.42,630,0.871,631,0.871,648,1.016,663,1.763,686,0.905,710,1.441,714,1.28,742,1.716,745,2.155,746,2.955,747,2.392,748,4.165,749,2.898,750,2.958,751,1.441,752,3.224,753,3.224,754,1.861,755,3.224,756,3.224,757,3.445,758,2.766,759,2.047,762,1.778,763,2.047,766,5.469,767,5.469,768,5.469,769,5.633,770,5.469,771,5.469,772,3.473,775,2.828,776,4.491,777,2.19,778,2.023,779,4.901,780,2.104,781,2.503,783,2.274,795,3.224,796,1.5,798,2.74,800,1.28,801,1.721,803,1.862,806,3.224,808,3.224,810,3.914,813,4.491,815,3.975,819,2.193,824,2.955,825,4.337,826,1.384,827,3.224,828,2.289,829,3.224,830,1.231,831,2.408,832,2.503,833,2.74,834,3.224,835,3.224,836,1.861,837,2.74,838,4.901,839,3.224,840,3.224,841,2.561,842,1.384,843,2.408,844,1.778,845,3.224,846,3.224,847,1.778,848,3.224,849,1.63,850,1.778,851,1.702,852,3.224,853,4.337,854,4.337,855,4.337,856,3.224,857,3.224,858,2.955,859,2.955,860,3.224,861,3.058,862,4.337,863,3.224,864,3.224,865,4.337,866,3.224,867,4.337,868,3.224,869,3.224,870,3.224,871,2.047,872,3.224,873,4.337,874,3.224,875,3.224,876,3.224,877,3.224,878,3.224,879,2.155,880,3.112,881,3.224,882,3.224,883,3.224,884,3.224,885,2.955,886,3.224,887,3.224,888,2.74,889,3.224,890,3.224,891,3.224,892,3.224,893,4.337,894,2.955,895,2.25,896,3.224,897,2.955,898,3.224,899,3.224,900,3.224,901,3.224,902,2.408,903,3.66,904,2.408,905,3.224,906,3.224,907,3.224,908,3.456,909,2.047,910,2.408,911,3.224,912,1.95,913,2.408,914,2.955,915,3.224,916,3.224,917,2.408,918,3.224,919,2.408,920,2.408,921,3.224,922,3.224,923,1.95,924,1.056,925,1.95,926,3.224,927,3.224,928,3.224,929,3.224,930,3.224,931,3.224,932,3.224,933,3.224,934,1.563,935,3.224,936,3.224,937,2.955,938,3.224,939,3.224,940,3.224,941,3.224,942,3.224,943,1.95,944,3.224]],["title/components/FacetNgxChart.html",[620,0.45,724,1.417]],["body/components/FacetNgxChart.html",[7,1.297,8,0.015,9,1.245,10,1.245,14,0.142,15,0.085,16,0.085,17,1.196,22,0.214,24,0.499,31,1.297,34,0.876,38,0.456,42,1.149,46,0.491,48,2.063,52,0.141,53,0.018,54,0.014,55,0.009,56,0.124,66,0.983,74,0.286,75,0.382,76,0.832,81,1.618,82,0.747,83,0.392,84,0.616,85,1.976,86,3.003,87,0.642,88,0.477,89,0.456,90,0.499,96,1.199,99,0.668,100,0.68,101,0.592,110,1.295,116,0.89,117,0.915,140,1.4,143,1.847,144,0.507,146,1.773,149,0.58,155,1.947,156,0.794,157,0.891,163,0.954,171,0.592,175,1.618,176,2.819,181,0.951,182,1.832,184,0.828,186,1.156,196,0.983,197,2.102,200,0.769,219,2.125,244,1.569,254,0.65,268,0.843,279,0.563,289,1.412,297,1.573,300,1.887,328,1.42,336,0.751,338,0.781,342,1.029,344,1.245,349,1.618,353,0.91,378,1.4,381,1.51,388,1.399,392,2.117,394,1.952,407,1.034,408,1.358,422,1.201,425,0.781,442,0.751,453,2.012,494,1.201,511,0.722,518,2.676,580,1.412,620,0.656,621,1.297,622,2.012,623,1.196,625,1.245,626,1.544,629,1.454,630,1.68,631,1.684,648,1.201,653,2.102,654,2.448,663,1.684,686,0.751,699,2.102,700,1.636,701,1.927,702,1.544,703,2.792,704,1.544,708,2.199,709,2.199,710,1.196,711,1.544,712,1.353,713,2.199,714,1.062,715,2.792,716,1.245,717,1.245,718,1.353,719,1.297,720,1.196,721,1.297,722,1.544,723,1.544,724,2.251,725,1.908,726,2.562,727,1.544,728,1.353,729,1.412,730,1.297,731,1.544,732,1.297,733,1.927,734,1.544,735,1.297,736,1.297,737,1.544,738,1.196,739,1.297,740,1.297,741,1.245,742,0.876,743,1.544,744,1.544,747,2.668,749,2.967,758,2.553,761,4.238,762,2.668,763,3.072,773,3.028,774,2.975,775,3.067,780,2.348,798,3.239,800,1.513,801,1.92,803,2.195,822,2.676,828,2.343,844,1.476,847,1.476,849,1.353,850,1.476,851,1.412,879,1.788,880,3.473,888,2.274,895,2.532,912,1.618,923,2.926,934,2.152,950,2.676,989,3.613,1035,2.82,1090,2.668,1095,1.618,1130,1.618,1246,1.412,1339,4.175,1342,2.545,1347,1.887,1349,3.315,1351,4.112,1352,3.239,1355,2.102,1363,2.274,1372,2.274,1373,2.274,1375,2.274,1376,3.773,1385,0.811,1400,2.846,1407,3.655,1458,1.353,1485,2.125,1489,1.618,1506,4.838,1701,1.196,1848,2.125,1882,2.125,1885,2.125,1887,1.788,2180,1.927,2314,4.069,2315,6.238,2316,5.718,2317,2.676,2318,2.452,2319,5.379,2320,4.238,2321,2.975,2322,4.936,2323,4.238,2324,4.936,2325,4.238,2326,4.936,2327,2.975,2328,2.975,2329,2.975,2330,1.699,2331,2.975,2332,2.274,2333,1.699,2334,1.699,2335,2.975,2336,2.975,2337,2.975,2338,2.975,2339,2.975,2340,2.975,2341,4.238,2342,2.975,2343,2.975,2344,2.125,2345,2.975,2346,4.238,2347,4.238,2348,4.238,2349,5.379,2350,4.238,2351,2.975,2352,1.887,2353,2.975,2354,2.975,2355,4.238,2356,5.379,2357,2.975,2358,2.975,2359,2.975,2360,4.238,2361,3.239,2362,4.238,2363,2.975,2364,2.975,2365,2.676,2366,2.975,2367,2.975,2368,2.125,2369,2.975,2370,2.975,2371,2.975,2372,1.998,2373,2.975,2374,2.975,2375,2.975,2376,2.975,2377,2.975,2378,2.975,2379,2.975,2380,2.975,2381,2.975,2382,2.975,2383,2.975,2384,2.975,2385,2.975,2386,2.975,2387,2.975,2388,4.238,2389,2.975,2390,2.975,2391,4.238,2392,2.975,2393,2.975,2394,2.975,2395,2.975,2396,2.975,2397,2.975,2398,2.975,2399,2.975,2400,2.975,2401,3.239,2402,4.238,2403,4.238,2404,4.238,2405,4.238,2406,2.975,2407,2.125,2408,2.975,2409,2.975,2410,2.975,2411,2.975,2412,2.975,2413,2.975,2414,2.975,2415,4.238,2416,2.975,2417,2.975,2418,2.975,2419,2.975,2420,2.975,2421,4.238,2422,4.238,2423,2.975,2424,2.975,2425,2.975,2426,2.975,2427,4.238,2428,2.975,2429,5.379,2430,2.975,2431,4.884,2432,3.429,2433,3.429,2434,3.429,2435,3.429,2436,3.429,2437,3.429,2438,3.429,2439,3.429,2440,3.429,2441,3.429,2442,3.429,2443,3.429,2444,3.429,2445,3.429,2446,3.429,2447,3.429,2448,3.429,2449,3.429,2450,3.429,2451,3.429,2452,3.429,2453,3.429,2454,3.429]],["title/components/FacetWrapperComponent.html",[10,1.417,620,0.45]],["body/components/FacetWrapperComponent.html",[7,1.679,8,0.015,9,1.611,10,2.509,14,0.162,15,0.11,16,0.11,17,2.816,22,0.217,24,0.646,31,2.462,42,1.486,46,0.304,48,2.154,52,0.128,53,0.024,54,0.014,55,0.011,66,1.272,74,0.223,75,0.456,76,0.826,82,0.824,83,0.382,84,0.576,85,2.032,87,0.83,88,0.618,89,0.59,90,0.646,99,0.864,100,0.811,101,0.765,116,0.74,118,0.83,144,0.522,156,0.706,157,0.889,159,1.54,191,1.5,200,0.714,265,1.877,268,1.699,309,1.952,319,1.75,349,2.75,381,1.547,392,2.131,394,1.938,407,0.955,408,1.425,425,1.634,549,3.462,620,0.751,621,1.679,622,2.4,623,2.032,624,2.18,625,1.611,626,3.381,630,1.72,631,1.733,633,2.462,637,2.095,699,2.508,700,1.952,701,2.299,702,1.998,703,3.111,704,1.998,708,2.624,709,2.624,710,1.547,711,1.998,712,1.75,713,2.624,714,1.374,715,3.111,716,1.611,717,1.611,718,1.75,719,1.679,720,1.547,721,1.679,722,1.998,723,1.998,724,1.611,725,1.379,726,2.93,727,1.998,728,1.75,729,1.827,730,1.679,731,1.998,732,1.679,733,2.299,734,1.998,735,1.679,736,1.679,737,1.998,738,1.547,739,1.679,740,1.679,741,1.611,742,1.134,743,1.998,744,1.998,773,3.612,775,3.231,780,2.404,885,3.173,908,3.58,937,4.941,943,2.75,957,6.39,1014,2.93,1213,5.645,1215,5.645,1216,5.645,1359,2.75,1430,3.462,1433,4.547,1434,5.994,1439,3.849,1455,2.313,1475,2.942,1484,4.547,1620,5.055,1672,4.565,2455,6.965,2456,3.849,2457,6.506,2458,6.506,2459,4.653,2460,6.506,2461,7.365,2462,6.506,2463,5.827,2464,5.827,2465,6.909,2466,6.909,2467,5.827,2468,5.827,2469,7.365,2470,4.437,2471,5.827,2472,6.909,2473,4.437,2474,4.437,2475,4.437,2476,5.827,2477,4.437,2478,4.437,2479,4.437,2480,4.437,2481,4.437,2482,4.437,2483,4.437,2484,4.437,2485,4.437,2486,4.437,2487,2.942,2488,4.437,2489,4.437,2490,4.437,2491,4.437,2492,4.437,2493,4.437,2494,4.437,2495,4.437,2496,4.437,2497,5.827,2498,4.437,2499,4.437,2500,4.437,2501,4.437,2502,4.437,2503,4.437,2504,4.437,2505,4.437,2506,4.437,2507,4.437,2508,4.437,2509,4.437,2510,4.437,2511,2.75,2512,4.437,2513,4.437,2514,4.437,2515,4.437]],["title/modules/FinanceModule.html",[0,1.933,2516,2.79]],["body/modules/FinanceModule.html",[2,2.669,3,3.143,8,0.015,11,2.433,12,1.573,13,2.441,14,0.148,15,0.148,16,0.148,20,3.639,21,3.639,22,0.233,23,3.639,24,0.863,25,3.639,26,3.09,33,3.639,34,1.514,35,4.326,36,2.797,37,4.326,38,0.788,50,3.639,52,0.172,53,0.031,54,0.013,55,0.013,732,3.099,733,2.753,735,3.099,1240,4.907,1301,5.142,1302,3.261,2516,5.858,2517,5.142,2518,5.142,2519,5.926,2520,5.142,2521,5.926,2522,4.625,2523,4.625,2524,5.926]],["title/modules/FusionChartsModule.html",[0,1.933,2525,2.79]],["body/modules/FusionChartsModule.html",[2,3.137,3,3.137,8,0.015,11,2.429,12,1.569,13,2.434,14,0.147,15,0.147,16,0.147,20,3.633,21,3.633,22,0.237,23,3.633,24,0.86,25,3.633,26,3.082,32,3.919,33,3.633,34,1.51,35,4.319,36,2.789,50,3.082,52,0.171,53,0.031,54,0.013,55,0.013,285,0.716,728,3.231,729,2.434,994,2.749,1021,2.434,1022,2.332,1035,2.543,1245,4.62,1246,2.434,1347,3.834,2318,4.226,2525,5.755,2526,5.127,2527,5.127,2528,5.127,2529,5.91,2530,6.967,2531,6.639,2532,5.127,2533,5.91,2534,6.967,2535,5.91,2536,6.967,2537,5.91,2538,5.91,2539,5.91,2540,5.91]],["title/modules/GoogleMapsModule.html",[0,1.933,2541,2.79]],["body/modules/GoogleMapsModule.html",[2,2.723,3,3.18,8,0.015,11,2.462,12,1.605,13,2.49,14,0.151,15,0.151,16,0.151,20,3.682,21,3.682,22,0.234,23,3.682,24,0.88,25,3.682,26,3.153,33,3.682,34,1.545,37,4.377,38,0.804,41,5.05,42,2.026,50,3.153,52,0.175,53,0.032,54,0.013,55,0.013,730,3.106,1245,4.683,1246,2.49,2541,5.738,2542,5.246,2543,5.246,2544,5.246,2545,6.046,2546,7.061,2547,4.718,2548,6.046]],["title/interfaces/HeatmapItem.html",[56,0.141,1008,2.79]],["body/interfaces/HeatmapItem.html",[8,0.015,14,0.112,15,0.112,16,0.112,22,0.17,24,0.654,32,2.982,46,0.494,52,0.17,53,0.024,54,0.011,55,0.011,56,0.163,58,0.808,72,0.841,74,0.226,75,0.46,76,0.747,82,0.791,83,0.371,84,0.618,107,1.621,116,0.832,117,0.841,140,1.289,149,0.55,151,2.228,155,1.502,160,2.787,164,0.936,166,1.644,171,1.13,184,0.654,200,0.855,230,1.774,244,1.24,254,0.598,268,1.772,279,0.678,289,1.852,308,1.24,309,1.969,331,1.568,344,2.378,353,1.194,394,2.069,422,1.106,452,2.62,460,1.024,470,1.701,484,1.852,494,1.106,541,1.289,543,1.82,580,2.697,620,0.678,623,1.568,629,1.502,630,0.947,631,0.947,633,1.701,635,2.224,636,2.109,637,1.448,642,1.448,648,1.106,653,2.818,663,1.809,672,1.774,684,1.632,686,0.985,700,1.506,716,1.632,719,2.224,751,1.568,796,2.134,803,1.506,880,2.913,895,1.506,924,1.502,962,3.509,963,3.425,964,3.901,965,3.901,966,3.901,967,3.425,968,3.425,969,3.901,970,2.62,971,2.62,972,2.62,973,2.62,974,2.62,975,2.62,977,4.501,978,2.62,979,4.451,980,2.62,981,5.1,983,3.425,987,3.901,988,5.1,989,2.62,990,3.901,991,1.935,992,5.1,993,5.1,994,1.774,995,5.1,997,3.901,998,3.901,1000,3.441,1002,2.62,1004,3.509,1006,3.901,1008,5.287,1010,2.62,1011,2.774,1014,2.025,1015,2.421,1016,3.245,1017,2.025,1021,2.421,1022,1.774,1024,2.62,1027,2.584,1030,3.901,1032,3.425,1033,3.901,1034,3.425,1035,2.53,1036,3.901,1037,5.1,1038,3.901,1039,3.415,1040,2.345,1041,3.329,1042,2.62,1043,3.901,1044,3.901,1045,5.1,1049,3.509,1052,2.224,1056,3.901,1057,3.901,1058,3.901,1060,3.901,1061,2.982,1062,2.025,1063,5.1,1082,5.42,1084,3.425,1088,2.584,1089,2.913,1090,2.989,1091,3.901,1092,3.901,1093,2.228,1094,3.901,1095,2.122,1096,2.913,1097,2.228,1098,2.421,1099,2.62,1100,2.62,1101,2.421,1102,2.982,1103,3.509,1104,3.901,1105,5.1,1106,5.1,1107,3.901,1108,3.901,1109,3.901,1110,3.901,1111,3.901,1112,3.901,1113,3.901,1114,3.901,1115,3.901,1116,2.62,1117,3.901,1118,3.425,1119,3.816,1120,2.62,1121,2.62,1122,2.62,1123,3.901,1124,2.62,1125,2.62,1126,2.62,1127,3.901,1128,3.901,1129,3.901,1130,2.122,1131,2.345,1132,2.62,1133,3.901,1134,2.982,1135,2.474,1136,2.982,1137,2.62,1138,2.62,1139,2.62,1140,2.62,1141,2.62,1142,3.901,1143,2.787,1144,2.787,1145,3.901,1146,3.901,1147,3.901,1148,3.901,1149,3.898,1150,3.901,1151,3.901,1152,3.901,1153,3.901,1154,3.901,1155,3.901,1156,3.901,1157,3.065,1158,3.901,1159,3.901,1160,2.982,1161,3.509,1162,3.509,1163,3.901,1164,2.982,1165,2.787,1166,5.1,1167,5.1,1168,2.647,1169,5.1,1170,3.901,1171,3.901,1172,2.62,1173,3.901,1174,3.901,1175,2.62,1176,1.935,1177,3.235,1178,2.62,1179,2.62,1180,3.425,1181,3.425,1182,3.425,1183,2.62,1184,2.62,1185,1.506,1186,2.62,1187,2.62,1188,3.901,1189,3.901,1190,5.682,1191,5.1,1192,5.1,1193,3.901,1194,3.509,1195,3.901,1196,3.901,1197,3.901,1198,3.901]],["title/components/MapComponent.html",[620,0.45,730,1.476]],["body/components/MapComponent.html",[7,1.443,8,0.015,9,1.385,10,1.385,14,0.175,15,0.095,16,0.095,17,1.33,22,0.213,24,0.555,31,1.443,38,0.508,42,1.278,46,0.262,48,1.917,52,0.11,53,0.02,54,0.014,55,0.01,65,1.013,66,1.094,74,0.192,75,0.412,76,0.917,82,0.578,83,0.404,84,0.508,87,0.714,88,0.531,89,0.508,90,0.555,96,1.185,98,1.505,99,0.743,100,0.531,110,1.199,116,0.485,117,0.854,118,0.714,119,2.897,140,1.509,144,0.541,149,0.564,156,0.638,163,1.051,164,0.826,184,0.766,185,1.136,191,1.265,197,1.642,200,0.748,229,3.491,254,0.508,279,0.44,285,0.462,308,1.052,310,1.109,328,1.174,336,1.153,337,1.385,338,1.199,342,1.109,353,1.397,381,1.397,392,2.143,394,2.031,395,1.891,407,0.907,408,1.493,416,0.938,422,1.294,425,1.479,437,2.265,442,1.153,465,2.237,494,1.294,620,0.695,621,1.443,622,2.168,623,1.33,624,1.764,625,1.385,626,1.718,629,1.54,630,1.698,631,1.694,636,1.229,642,2.195,648,1.294,650,3.388,653,2.265,654,2.265,663,1.645,681,1.911,699,2.265,700,1.764,701,2.077,702,1.718,703,2.926,704,1.718,708,2.37,709,2.37,710,1.33,711,1.718,712,1.505,713,2.37,714,1.182,715,2.926,716,1.385,717,1.385,718,1.505,719,1.443,720,1.33,721,1.443,722,1.718,723,1.718,724,1.385,725,1.246,726,2.714,727,1.718,728,1.505,729,1.571,730,2.458,731,1.718,732,1.443,733,2.077,734,1.718,735,1.443,736,1.443,737,1.718,738,1.33,739,1.443,740,1.443,741,1.385,742,0.975,743,1.718,744,1.718,747,2.594,758,1.571,773,3.263,775,3.405,777,2.636,778,2.406,796,2.745,800,1.182,801,1.867,803,1.278,822,2.977,826,1.278,830,2.367,847,1.642,849,1.505,850,1.642,851,1.571,934,1.443,996,4.108,1021,2.676,1022,2.564,1027,2.378,1042,3.068,1052,2.458,1088,2.077,1090,1.642,1093,2.608,1097,1.891,1185,1.278,1218,2.986,1314,6.115,1458,1.505,1459,1.568,1488,2.365,1489,1.801,1638,4.567,1700,1.99,1701,1.33,1859,3.263,1860,3.491,2248,2.897,2251,2.265,2330,2.986,2333,1.891,2334,1.891,2365,2.977,2547,2.977,2549,3.31,2550,5.264,2551,5.264,2552,7.36,2553,6.027,2554,6.027,2555,6.027,2556,6.027,2557,6.027,2558,6.497,2559,5.264,2560,5.264,2561,5.264,2562,6.027,2563,6.027,2564,5.229,2565,3.815,2566,5.264,2567,5.264,2568,3.815,2569,5.264,2570,6.817,2571,3.815,2572,6.497,2573,6.497,2574,6.817,2575,3.815,2576,3.815,2577,4.567,2578,5.264,2579,3.815,2580,3.815,2581,5.264,2582,3.815,2583,5.264,2584,5.264,2585,3.815,2586,3.815,2587,5.264,2588,6.817,2589,3.815,2590,5.264,2591,3.815,2592,5.264,2593,6.497,2594,7.048,2595,3.815,2596,3.815,2597,3.815,2598,3.815,2599,3.815,2600,3.815,2601,5.264,2602,3.815,2603,5.264,2604,5.264,2605,3.815,2606,5.264,2607,5.264,2608,3.815,2609,5.229,2610,6.497,2611,3.815,2612,3.815,2613,4.108,2614,3.815,2615,3.263,2616,3.815,2617,2.897,2618,3.815,2619,3.815,2620,2.53,2621,5.264,2622,3.815,2623,3.815,2624,3.815,2625,5.264,2626,3.815,2627,3.815,2628,3.815,2629,3.815,2630,5.264,2631,3.815,2632,3.815,2633,6.027,2634,3.815,2635,3.815,2636,3.815,2637,3.815,2638,5.264,2639,6.027,2640,5.264,2641,5.264,2642,3.31,2643,3.815,2644,5.264,2645,6.497,2646,3.815,2647,5.264,2648,3.815,2649,3.815,2650,3.815,2651,3.815,2652,5.264,2653,3.815,2654,3.815,2655,3.815,2656,3.815,2657,3.815]],["title/interfaces/MoneyCloudDatum.html",[56,0.141,2658,3.045]],["body/interfaces/MoneyCloudDatum.html",[8,0.015,14,0.098,15,0.098,16,0.098,22,0.218,24,0.575,38,0.526,42,1.324,46,0.37,52,0.156,53,0.021,54,0.013,55,0.01,56,0.143,58,0.71,71,1.958,72,0.74,74,0.198,75,0.422,82,0.434,83,0.358,84,0.606,85,1.488,86,2.221,87,0.74,88,0.55,96,1.13,98,1.559,99,0.77,100,0.751,101,0.682,107,1.09,110,0.9,116,0.78,117,0.931,144,0.271,149,0.574,155,1.01,156,0.799,157,0.796,164,0.955,166,1.561,179,2.45,184,0.575,185,1.049,186,0.935,187,1.561,200,0.875,211,1.495,222,1.701,254,0.717,267,2.061,271,1.958,279,0.708,300,3.629,319,1.559,328,1.195,336,0.866,338,0.9,342,0.833,407,0.526,460,0.9,484,1.628,494,0.972,527,1.865,541,1.133,580,1.628,620,0.622,625,1.958,629,1.01,630,0.833,631,0.833,633,1.495,635,2.04,636,1.977,637,1.273,642,1.273,644,2.827,648,0.972,663,1.75,686,1.345,700,1.324,732,1.495,733,2.928,747,2.321,751,1.378,754,1.78,757,2.45,777,2.14,778,1.977,781,2.428,800,1.224,801,1.67,826,1.324,830,1.607,837,2.621,847,1.701,849,1.559,850,1.701,851,1.628,880,2.672,895,1.324,912,1.865,923,1.865,924,1.378,934,1.495,943,1.865,963,2.303,967,2.303,968,2.303,970,2.303,971,2.303,972,2.303,973,2.303,974,2.303,975,2.303,977,4.151,978,3.143,979,3.843,980,3.143,983,3.143,991,1.701,994,1.559,1000,3.42,1002,2.303,1011,1.865,1014,1.78,1017,1.78,1021,2.221,1022,1.559,1034,3.143,1039,3.599,1041,2.428,1062,1.78,1080,2.45,1082,4.208,1084,3.143,1089,1.958,1098,2.528,1099,2.303,1100,2.303,1101,2.221,1116,2.303,1118,3.143,1119,3.577,1120,2.303,1121,2.303,1122,2.303,1124,2.303,1125,2.303,1126,2.303,1132,3.577,1137,2.303,1138,2.303,1139,2.303,1140,2.303,1141,2.303,1157,3.201,1168,2.428,1172,3.577,1175,2.303,1176,1.701,1177,2.968,1178,2.303,1179,2.303,1180,3.143,1181,3.143,1182,3.143,1183,2.303,1184,2.303,1185,1.324,1186,2.303,1187,2.303,1233,2.827,1235,1.78,1246,1.628,1270,2.827,1365,2.968,1369,2.968,1385,1.276,1402,3.577,1407,3.201,1411,4.39,1470,1.958,1489,1.865,1663,3.343,1681,2.303,1700,2.812,1701,1.378,1710,3.429,1733,2.45,1780,2.45,1880,1.958,1887,2.812,1976,2.061,1988,2.827,2001,4.679,2007,2.827,2029,2.221,2076,2.45,2107,3.143,2108,1.865,2177,1.701,2180,1.559,2251,1.701,2330,1.958,2333,1.958,2334,1.958,2352,2.175,2511,2.45,2523,3.084,2617,2.175,2658,5.69,2659,3.084,2660,3.429,2661,6.902,2662,6.181,2663,5.988,2664,5.393,2665,3.952,2666,3.952,2667,3.429,2668,3.952,2669,3.952,2670,3.429,2671,3.952,2672,3.952,2673,3.429,2674,3.429,2675,3.952,2676,2.812,2677,3.429,2678,2.061,2679,3.952,2680,3.952,2681,3.576,2682,6.139,2683,3.857,2684,4.679,2685,2.621,2686,2.621,2687,3.343,2688,3.429,2689,4.679,2690,3.576,2691,3.429,2692,3.429,2693,3.429,2694,3.952,2695,5.393,2696,2.45,2697,2.621,2698,2.621,2699,2.621,2700,4.071,2701,5.393,2702,4.679,2703,2.621,2704,3.429,2705,3.429,2706,3.429,2707,3.429,2708,2.621,2709,2.621,2710,3.576,2711,2.621,2712,2.621,2713,3.576,2714,3.429,2715,2.621,2716,3.429,2717,2.621,2718,2.621,2719,2.621,2720,2.621,2721,2.621,2722,2.621,2723,2.621,2724,2.621,2725,2.621,2726,2.621,2727,2.621,2728,3.429,2729,2.621,2730,3.429,2731,3.429,2732,3.429,2733,3.429,2734,5.326,2735,3.952,2736,3.429,2737,3.429,2738,3.952,2739,5.393,2740,3.952,2741,3.952,2742,3.429,2743,3.429,2744,3.429,2745,3.429,2746,3.952,2747,3.952,2748,3.952,2749,3.952,2750,3.952,2751,3.952,2752,3.429,2753,3.952,2754,2.621,2755,3.429,2756,3.429,2757,3.429,2758,3.952,2759,3.429,2760,3.429,2761,3.429,2762,3.952,2763,3.952,2764,3.952,2765,3.952,2766,3.429,2767,3.429,2768,3.429,2769,3.952,2770,3.952,2771,2.827,2772,3.952,2773,3.952,2774,3.952,2775,3.952,2776,3.952,2777,2.621,2778,3.576,2779,2.621,2780,3.429,2781,3.429,2782,2.621,2783,2.621,2784,2.621,2785,3.429,2786,2.621,2787,2.621,2788,2.621,2789,2.621,2790,2.621,2791,2.621,2792,2.621,2793,2.621,2794,2.621,2795,2.621,2796,2.621,2797,3.952,2798,2.621,2799,3.429,2800,2.621,2801,2.621,2802,2.621,2803,2.621,2804,2.621,2805,2.621,2806,3.429,2807,3.952,2808,3.429,2809,2.45,2810,3.429,2811,3.952,2812,3.952,2813,3.429,2814,3.429,2815,3.952,2816,3.952,2817,3.429,2818,3.429,2819,2.621]],["title/interfaces/MoneyDatum.html",[56,0.141,2820,3.045]],["body/interfaces/MoneyDatum.html",[8,0.015,14,0.096,15,0.096,16,0.096,22,0.217,24,0.562,38,0.514,42,1.294,46,0.469,52,0.154,53,0.021,54,0.013,55,0.01,56,0.14,58,0.694,71,1.914,72,0.723,74,0.194,75,0.415,78,1.914,82,0.424,83,0.355,84,0.567,85,1.464,87,0.723,88,0.538,96,1.123,98,1.524,99,1.034,100,0.844,101,0.666,107,1.066,110,0.88,116,0.77,117,0.829,118,0.723,144,0.265,148,1.151,149,0.567,156,0.878,157,0.79,164,0.941,166,1.62,171,1.046,179,2.394,184,0.562,185,0.922,186,0.914,187,1.546,195,2.126,200,0.866,211,1.461,222,1.662,254,0.514,268,0.95,271,1.914,279,0.612,289,1.591,300,2.126,310,1.119,319,1.524,328,1.181,336,0.846,338,0.88,342,0.814,353,1.026,407,0.514,416,0.95,460,0.88,465,2.212,484,1.591,494,0.95,541,1.107,620,0.7,625,1.928,629,0.987,630,0.814,631,0.814,633,1.461,635,2.009,636,1.954,637,1.244,642,1.244,648,0.95,663,1.757,686,1.431,700,1.294,733,3.044,735,1.461,742,1.356,747,2.285,750,2.912,751,1.347,754,1.74,757,2.394,777,2.115,778,1.954,781,2.391,800,1.196,801,1.644,826,1.294,830,1.151,837,2.562,847,1.662,849,1.524,850,1.662,851,1.591,880,2.631,895,1.294,912,1.823,923,1.823,924,1.55,934,2.009,943,1.823,963,2.251,967,2.251,968,2.251,970,2.251,971,2.251,972,2.251,973,2.251,974,2.251,975,2.251,977,3.99,978,3.094,979,3.806,980,3.094,983,3.094,991,1.662,994,1.524,1000,3.393,1002,2.251,1010,2.251,1011,1.823,1014,1.74,1017,1.74,1021,2.186,1022,1.524,1024,2.251,1027,2.095,1034,3.094,1035,1.662,1039,3.57,1041,2.391,1062,1.74,1080,2.394,1084,3.094,1088,2.095,1089,1.914,1098,2.498,1099,2.251,1100,2.251,1101,2.82,1116,2.251,1118,2.251,1119,3.535,1120,2.251,1121,2.251,1122,2.251,1124,2.251,1125,2.251,1126,2.251,1132,3.535,1137,2.251,1138,2.251,1139,2.251,1140,2.251,1141,2.251,1157,3.406,1168,2.732,1172,3.535,1175,2.251,1176,1.662,1177,2.922,1178,2.251,1179,2.251,1180,3.094,1181,3.094,1182,3.094,1183,2.251,1184,2.251,1185,1.294,1186,2.251,1187,2.251,1210,2.251,1235,1.74,1270,2.763,1365,2.922,1369,2.922,1402,3.535,1411,4.338,1470,1.914,1489,1.823,1663,3.291,1681,2.251,1700,2.768,1701,1.347,1733,2.394,1780,2.394,1789,3.014,1880,1.914,1887,2.768,1976,2.014,1988,2.763,2007,2.763,2029,2.186,2076,2.394,2107,3.094,2108,2.505,2137,3.014,2177,1.662,2180,1.524,2251,1.662,2330,1.914,2333,1.914,2334,1.914,2352,2.126,2372,2.251,2511,2.394,2522,3.014,2564,3.351,2617,2.126,2659,3.014,2662,5.94,2663,5.94,2667,3.351,2670,3.351,2673,3.351,2674,3.351,2676,2.768,2677,3.351,2678,2.014,2681,2.562,2684,4.606,2685,2.562,2686,2.562,2687,3.291,2688,3.351,2689,4.606,2690,3.521,2691,3.351,2692,3.351,2693,3.351,2696,2.394,2697,2.562,2698,2.562,2699,2.562,2700,3.521,2702,4.606,2703,2.562,2704,3.351,2705,3.351,2706,3.351,2707,3.351,2708,2.562,2709,2.562,2710,3.521,2711,2.562,2712,2.562,2713,3.521,2714,3.351,2715,2.562,2716,3.351,2717,2.562,2718,2.562,2719,2.562,2720,2.562,2721,2.562,2722,2.562,2723,2.562,2724,2.562,2725,2.562,2726,2.562,2727,2.562,2728,3.351,2729,2.562,2730,3.351,2731,3.351,2732,3.351,2733,3.351,2734,6.138,2736,3.351,2737,3.351,2742,3.351,2743,3.351,2744,3.351,2745,4.606,2752,3.351,2754,2.562,2755,3.351,2756,4.606,2757,3.351,2759,3.351,2760,3.351,2761,3.351,2766,3.351,2767,3.351,2768,3.351,2777,2.562,2778,3.521,2779,2.562,2780,3.351,2781,3.351,2782,2.562,2783,2.562,2784,2.562,2785,3.351,2786,2.562,2787,2.562,2788,2.562,2789,2.562,2790,2.562,2791,2.562,2792,2.562,2793,2.562,2794,2.562,2795,2.562,2796,2.562,2798,2.562,2799,3.351,2800,2.562,2801,2.562,2802,2.562,2803,2.562,2804,3.521,2805,2.562,2806,3.351,2808,3.351,2809,2.394,2810,3.351,2813,3.351,2814,3.351,2817,3.351,2818,3.351,2819,2.562,2820,5.76,2821,2.251,2822,2.126,2823,2.126,2824,5.309,2825,3.863,2826,3.351,2827,2.763,2828,2.763,2829,2.763,2830,2.763,2831,2.763,2832,3.863,2833,3.863,2834,2.763,2835,3.863,2836,3.863,2837,3.863,2838,3.863,2839,3.863,2840,3.863,2841,3.863,2842,3.863,2843,3.863,2844,3.863,2845,3.863,2846,2.763,2847,3.863,2848,2.763,2849,2.763,2850,3.863,2851,3.863,2852,3.863,2853,3.863,2854,3.797,2855,2.763,2856,4.338,2857,3.863,2858,2.126,2859,3.863,2860,3.863,2861,3.863,2862,3.863,2863,3.863,2864,2.763,2865,3.863,2866,3.863,2867,3.863,2868,3.863]],["title/interfaces/NetworkContext.html",[56,0.141,93,1.118]],["body/interfaces/NetworkContext.html",[8,0.015,14,0.083,15,0.083,16,0.083,22,0.206,34,0.851,38,0.443,46,0.462,52,0.201,53,0.018,54,0.009,55,0.009,56,0.257,58,0.598,65,1.27,67,1.736,68,1.499,72,1.047,74,0.307,75,0.528,76,0.423,79,1.031,82,0.74,83,0.386,84,0.635,85,0.918,88,0.779,89,1.096,90,1.185,91,1.667,92,1.655,93,1.933,94,1.419,96,1.103,99,0.648,100,0.666,101,0.574,104,1.951,107,0.918,111,1.26,117,0.678,118,1.047,122,2.058,128,2.117,133,1.371,140,1.604,142,1.921,143,2.216,144,0.504,147,1.26,148,1.823,149,0.665,150,2.083,155,0.851,156,0.741,157,0.881,159,0.788,163,0.696,164,0.678,166,1.644,170,1.486,171,0.574,181,1.191,182,1.54,185,1.188,191,1.41,193,2.173,196,1.371,200,0.671,254,0.443,262,1.433,265,1.802,279,0.646,285,0.403,291,1.604,294,1.209,295,1.209,297,2.172,308,1.319,309,2.171,310,1.008,311,1.619,314,0.954,320,1.481,321,2.257,333,1.072,354,0.954,358,1.97,363,1.371,378,1.371,381,1.27,386,1.371,388,0.819,392,0.884,394,0.992,395,2.37,407,0.897,408,1.048,413,1.371,416,0.819,418,1.319,421,2.519,422,0.819,425,1.536,427,2.133,428,1.371,431,1.371,433,1.371,441,1.371,442,0.729,445,2.133,453,2.305,457,1.887,460,1.393,468,1.031,476,2.755,477,1.736,479,2.133,482,2.451,511,0.701,526,1.687,538,2.903,541,1.371,545,2.52,547,2.632,555,2.37,576,1.832,582,2.903,672,1.887,674,2.887,681,1.736,690,2.632,698,1.832,725,0.788,777,2.479,778,2.29,780,2.382,826,1.115,830,1.823,842,1.115,844,1.433,895,2.328,924,1.43,1097,2.37,1098,1.371,1185,1.115,1264,2.494,1266,2.494,1267,1.736,1342,2.581,1359,1.571,1385,0.788,1393,1.571,1438,2.058,1441,1.571,1458,1.887,1459,1.823,1524,2.632,1701,1.161,1774,2.632,1815,3.058,1818,2.257,1843,1.571,1897,1.371,1900,1.26,1944,1.571,1945,1.571,1948,2.257,1953,1.571,1968,1.571,2045,1.499,2106,2.058,2111,2.494,2146,2.494,2147,1.832,2148,1.94,2149,1.94,2150,2.305,2151,2.928,2152,1.832,2153,3.366,2154,2.058,2155,2.494,2156,1.94,2157,2.787,2158,1.887,2159,1.94,2160,1.94,2161,1.94,2162,2.787,2163,1.94,2164,1.94,2165,2.641,2166,2.787,2167,1.94,2168,1.94,2169,1.94,2170,1.94,2171,1.832,2172,1.94,2173,1.94,2174,1.94,2175,1.94,2176,1.832,2177,2.058,2178,1.94,2179,1.94,2180,1.887,2181,2.494,2182,2.787,2183,2.632,2184,1.94,2185,1.94,2186,1.94,2187,1.94,2188,1.94,2189,1.94,2190,1.94,2191,1.94,2192,1.94,2193,1.94,2194,1.94,2195,1.94,2196,1.94,2197,1.94,2198,1.94,2199,1.94,2200,1.94,2201,1.94,2202,2.787,2203,2.632,2204,1.94,2205,1.94,2206,1.94,2207,1.94,2208,1.94,2209,1.94,2210,1.94,2211,1.94,2212,1.94,2213,2.787,2214,1.94,2215,1.94,2216,1.94,2217,1.94,2218,2.787,2219,1.94,2220,1.94,2221,1.94,2222,1.94,2223,2.787,2224,2.787,2225,1.94,2226,1.94,2227,1.94,2228,1.94,2229,1.94,2230,2.787,2231,1.94,2232,1.94,2233,1.94,2234,1.94,2235,1.94,2236,3.565,2237,1.94,2238,1.94,2239,1.94,2240,1.94,2241,1.94,2242,1.94,2243,1.94,2244,1.94,2245,1.94,2246,1.94,2247,1.94,2248,1.832,2249,2.787,2250,1.94,2251,2.058,2252,1.94,2253,1.94,2254,2.787,2255,1.97,2256,1.94,2257,1.94,2258,1.94,2259,1.94,2260,2.787,2261,1.94,2262,2.787,2263,1.94,2264,2.787,2265,2.787,2266,1.94,2267,1.94,2268,1.94,2269,1.94,2270,1.94,2271,1.94,2272,1.94,2273,2.787,2274,1.94,2275,1.94,2276,2.787,2277,1.94,2278,1.94,2279,1.94,2280,1.94,2281,1.94,2282,1.94,2283,1.94,2284,1.94,2285,2.787,2286,1.94,2287,1.94,2288,1.94,2289,1.94,2290,1.94,2291,1.94,2292,1.94,2293,1.94,2294,1.94,2295,1.94,2296,1.94,2297,1.94,2298,1.94,2299,1.94,2300,1.94,2301,1.94,2302,1.94,2303,1.94,2304,1.94,2305,2.787,2306,1.94,2307,1.94,2308,1.94,2309,1.94,2310,1.94,2311,1.94,2312,1.94,2313,1.94,2869,3.329]],["title/classes/NetworkDataset.html",[53,0.021,92,0.997]],["body/classes/NetworkDataset.html",[8,0.015,14,0.073,15,0.073,16,0.073,22,0.199,34,0.75,38,0.391,46,0.422,52,0.193,53,0.016,54,0.008,55,0.008,56,0.248,65,1.158,67,1.584,68,1.322,72,0.974,74,0.289,75,0.505,76,0.931,79,0.91,82,0.783,83,0.386,84,0.641,85,0.81,88,0.607,89,1.097,90,1.184,91,1.551,92,1.792,93,1.765,94,1.262,96,1.06,99,0.572,100,0.607,101,0.507,104,1.895,107,0.81,111,1.111,117,0.631,118,0.974,122,2.241,128,2.18,133,1.652,140,1.492,142,1.95,143,2.158,144,0.524,147,1.111,148,1.717,149,0.642,150,2.1,155,1.115,156,0.782,157,0.863,159,0.695,163,0.758,164,0.631,166,1.624,170,1.635,171,0.507,181,1.257,182,1.405,185,1.246,191,1.468,193,2.163,200,0.632,254,0.391,262,1.264,265,1.677,279,0.601,285,0.528,291,1.492,294,1.066,295,1.066,297,2.078,308,1.204,309,2.063,310,0.919,311,1.669,314,0.842,320,1.351,321,2.457,333,0.946,354,0.842,358,1.856,363,1.652,376,1.531,378,1.251,381,1.158,386,1.209,388,0.722,392,2.049,394,2.184,395,1.455,407,1.058,408,1.464,413,1.209,416,0.722,418,1.204,421,2.658,422,0.722,425,1.469,427,2.01,428,1.209,431,1.209,433,1.209,441,1.492,442,0.643,445,2.01,453,2.144,457,1.722,460,1.186,468,0.91,476,2.595,477,1.89,479,2.33,482,2.442,511,0.619,526,1.969,538,3.018,541,1.251,545,2.345,547,2.401,555,2.162,576,1.616,582,2.777,672,1.722,674,1.386,681,1.584,690,2.401,698,1.616,725,0.695,777,1.815,778,1.677,780,1.744,826,0.984,830,1.717,842,0.984,844,1.264,895,2.239,924,1.574,1097,1.455,1098,1.209,1185,0.984,1264,2.275,1266,2.275,1267,1.531,1342,1.89,1359,1.386,1385,0.695,1393,1.386,1438,1.878,1441,1.386,1458,2.054,1459,1.991,1524,3.172,1701,2.01,1774,1.616,1815,2.906,1818,2.059,1843,2.059,1897,1.209,1900,1.111,1944,1.386,1945,1.386,1948,2.059,1953,1.386,1968,1.386,2045,1.322,2106,1.878,2111,2.275,2146,4.043,2147,1.616,2148,1.711,2149,1.711,2150,2.144,2151,2.888,2152,1.616,2153,2.401,2154,1.878,2155,2.275,2156,1.711,2157,3.034,2158,1.722,2159,1.711,2160,1.711,2161,1.711,2162,3.034,2163,1.711,2164,1.711,2165,2.72,2166,2.543,2167,1.711,2168,1.711,2169,1.711,2170,1.711,2171,1.616,2172,1.711,2173,1.711,2174,1.711,2175,1.711,2176,1.616,2177,1.878,2178,1.711,2179,1.711,2180,1.159,2181,1.531,2182,1.711,2183,1.616,2184,1.711,2185,1.711,2186,2.543,2187,1.711,2188,2.543,2189,1.711,2190,2.543,2191,1.711,2192,2.543,2193,1.711,2194,3.359,2195,1.711,2196,3.359,2197,1.711,2198,3.359,2199,1.711,2200,1.711,2201,3.359,2202,2.543,2203,3.389,2204,3.359,2205,1.711,2206,3.359,2207,1.711,2208,1.711,2209,1.711,2210,2.543,2211,1.711,2212,1.711,2213,2.543,2214,1.711,2215,2.543,2216,1.711,2217,1.711,2218,2.543,2219,1.711,2220,1.711,2221,3.034,2222,1.711,2223,2.543,2224,2.543,2225,1.711,2226,1.711,2227,2.543,2228,1.711,2229,1.711,2230,3.589,2231,2.543,2232,2.543,2233,2.543,2234,1.711,2235,1.711,2236,3.894,2237,1.711,2238,1.711,2239,1.711,2240,1.711,2241,1.711,2242,2.543,2243,2.543,2244,2.543,2245,2.543,2246,1.711,2247,1.711,2248,2.401,2249,3.034,2250,2.543,2251,2.48,2252,2.543,2253,2.543,2254,2.543,2255,1.797,2256,1.711,2257,1.711,2258,1.711,2259,1.711,2260,2.543,2261,1.711,2262,2.543,2263,1.711,2264,2.543,2265,2.543,2266,1.711,2267,1.711,2268,1.711,2269,1.711,2270,1.711,2271,1.711,2272,1.711,2273,2.543,2274,1.711,2275,1.711,2276,2.543,2277,1.711,2278,1.711,2279,1.711,2280,1.711,2281,1.711,2282,1.711,2283,1.711,2284,1.711,2285,2.543,2286,1.711,2287,1.711,2288,1.711,2289,1.711,2290,1.711,2291,1.711,2292,2.543,2293,2.543,2294,1.711,2295,1.711,2296,1.711,2297,1.711,2298,1.711,2299,1.711,2300,1.711,2301,1.711,2302,1.711,2303,1.711,2304,1.711,2305,2.543,2306,1.711,2307,1.711,2308,1.711,2309,1.711,2310,1.711,2311,1.711,2312,1.711,2313,1.711,2870,4.363,2871,4.363,2872,4.363,2873,4.363,2874,4.363,2875,4.363,2876,4.363,2877,4.363,2878,4.363,2879,4.363,2880,2.937,2881,2.937,2882,2.937,2883,2.937,2884,2.937,2885,2.937,2886,2.937,2887,2.937,2888,2.937,2889,2.937,2890,2.937,2891,2.937,2892,2.937,2893,2.937,2894,2.937,2895,2.937,2896,2.937,2897,2.937,2898,2.937]],["title/modules/NetworkModule.html",[0,1.933,2899,2.79]],["body/modules/NetworkModule.html",[2,2.606,3,3.099,8,0.015,11,2.399,12,1.536,13,2.383,14,0.183,15,0.144,16,0.144,20,3.588,21,3.588,22,0.236,23,3.588,24,0.842,25,3.588,26,3.018,27,4.921,28,4.921,29,3.185,33,3.588,34,1.479,35,4.265,36,2.731,37,4.265,38,0.77,41,4.921,42,1.939,50,3.018,52,0.167,53,0.031,54,0.013,55,0.013,89,0.77,90,0.842,621,3.09,717,2.966,725,1.369,736,3.09,1305,5.97,1306,5.021,2151,2.383,2899,5.859,2900,5.021,2901,5.021,2902,5.021,2903,5.787,2904,5.97,2905,5.787,2906,6.881]],["title/interfaces/NetworkProvider.html",[56,0.141,291,1.118]],["body/interfaces/NetworkProvider.html",[8,0.015,14,0.078,15,0.078,16,0.078,22,0.202,34,0.799,38,0.416,46,0.467,52,0.197,53,0.017,54,0.008,55,0.008,56,0.253,58,0.562,65,1.213,67,1.659,68,1.407,72,1.01,74,0.298,75,0.516,76,0.866,79,0.968,82,0.767,83,0.387,84,0.632,85,0.862,88,0.752,89,1.097,90,1.185,91,1.609,92,1.821,93,2.043,94,1.493,96,1.19,99,0.609,100,0.636,101,0.539,104,2.057,107,0.862,111,1.182,117,0.654,118,1.01,122,1.966,124,1.966,128,2.043,133,1.31,140,1.548,142,1.885,143,2.187,144,0.526,147,1.182,148,1.882,149,0.653,150,2.057,155,0.799,156,0.846,157,0.872,159,0.74,163,0.665,164,0.654,166,1.613,170,1.577,171,0.539,181,1.285,182,1.471,185,1.178,191,1.446,193,2.178,200,0.652,254,0.416,262,1.345,265,1.739,279,0.623,285,0.379,291,1.702,294,1.659,295,1.659,297,2.364,308,1.26,309,2.427,310,1.251,311,1.591,314,1.31,320,1.415,321,2.156,333,1.913,354,1.31,358,1.913,363,1.31,378,1.892,381,1.213,383,2.514,384,2.514,385,2.514,386,2.446,387,2.156,388,1.46,389,2.514,390,2.514,392,1.923,394,2.031,407,1.02,408,0.685,413,1.881,416,0.769,418,1.26,421,2.446,422,1.123,425,1.503,427,2.377,428,1.881,431,1.881,433,1.881,441,1.548,442,0.685,445,2.071,453,2.718,457,2.343,460,1.352,468,0.968,476,2.675,477,1.659,479,2.071,482,2.579,511,0.659,526,1.638,538,2.84,541,1.31,545,2.675,547,2.514,555,2.264,576,1.72,582,2.84,672,1.802,674,1.475,681,2.156,690,2.514,698,1.72,725,0.74,777,1.883,778,1.739,780,1.809,826,1.047,830,1.769,842,1.047,844,1.966,895,2.283,924,1.38,1097,1.549,1098,1.287,1185,1.047,1264,2.382,1266,2.382,1267,1.63,1342,1.96,1359,2.156,1385,0.74,1393,2.156,1438,1.966,1441,1.475,1458,2.13,1459,1.769,1524,2.514,1701,1.09,1774,1.72,1815,2.982,1818,2.156,1843,1.475,1897,1.287,1900,1.182,1944,1.475,1945,1.475,1948,2.156,1953,1.475,1968,1.475,2045,1.407,2106,1.966,2111,3.097,2146,3.828,2147,1.72,2148,1.821,2149,1.821,2150,2.224,2151,2.935,2152,1.72,2153,2.514,2154,1.966,2155,2.382,2156,1.821,2157,2.662,2158,1.802,2159,1.821,2160,1.821,2161,1.821,2162,2.662,2163,1.821,2164,1.821,2165,2.548,2166,2.662,2167,1.821,2168,2.662,2169,2.662,2170,2.662,2171,2.514,2172,2.662,2173,1.821,2174,1.821,2175,1.821,2176,2.514,2177,2.556,2178,2.662,2179,2.662,2180,1.233,2181,1.63,2182,1.821,2183,1.72,2184,1.821,2185,1.821,2186,1.821,2187,1.821,2188,1.821,2189,1.821,2190,1.821,2191,1.821,2192,1.821,2193,1.821,2194,1.821,2195,1.821,2196,1.821,2197,1.821,2198,1.821,2199,1.821,2200,1.821,2201,1.821,2202,2.662,2203,2.514,2204,1.821,2205,1.821,2206,1.821,2207,1.821,2208,1.821,2209,1.821,2210,1.821,2211,1.821,2212,1.821,2213,2.662,2214,1.821,2215,1.821,2216,1.821,2217,1.821,2218,2.662,2219,1.821,2220,1.821,2221,1.821,2222,1.821,2223,2.662,2224,2.662,2225,1.821,2226,1.821,2227,1.821,2228,1.821,2229,1.821,2230,2.662,2231,1.821,2232,1.821,2233,1.821,2234,1.821,2235,1.821,2236,3.461,2237,1.821,2238,1.821,2239,1.821,2240,1.821,2241,1.821,2242,1.821,2243,1.821,2244,1.821,2245,1.821,2246,1.821,2247,1.821,2248,1.72,2249,2.662,2250,1.821,2251,1.966,2252,1.821,2253,1.821,2254,2.662,2255,1.881,2256,1.821,2257,1.821,2258,1.821,2259,1.821,2260,2.662,2261,1.821,2262,2.662,2263,1.821,2264,2.662,2265,2.662,2266,1.821,2267,1.821,2268,1.821,2269,1.821,2270,1.821,2271,1.821,2272,1.821,2273,2.662,2274,1.821,2275,1.821,2276,2.662,2277,1.821,2278,1.821,2279,1.821,2280,1.821,2281,1.821,2282,1.821,2283,1.821,2284,1.821,2285,2.662,2286,1.821,2287,1.821,2288,1.821,2289,1.821,2290,1.821,2291,1.821,2292,1.821,2293,1.821,2294,1.821,2295,1.821,2296,1.821,2297,1.821,2298,1.821,2299,1.821,2300,1.821,2301,1.821,2302,1.821,2303,1.821,2304,1.821,2305,2.662,2306,1.821,2307,1.821,2308,1.821,2309,1.821,2310,1.821,2311,1.821,2312,1.821,2313,1.821,2907,3.125,2908,3.125,2909,3.125,2910,3.125,2911,3.125,2912,3.125,2913,3.125,2914,3.125,2915,3.125,2916,3.125]],["title/components/NgxChart.html",[620,0.45,738,1.36]],["body/components/NgxChart.html",[7,1.666,8,0.015,9,1.599,10,1.599,14,0.161,15,0.11,16,0.11,17,1.536,22,0.213,24,0.641,31,1.666,34,1.125,36,2.078,46,0.472,48,1.9,52,0.188,53,0.023,54,0.012,55,0.011,56,0.21,66,1.262,74,0.221,75,0.454,76,0.823,82,0.636,83,0.401,84,0.608,89,0.586,90,0.641,100,0.613,101,0.76,116,0.823,117,0.867,143,1.931,144,0.504,149,0.412,155,1.482,157,0.826,163,0.944,164,0.533,167,2.288,184,0.844,187,1.042,196,1.858,285,0.834,381,1.539,388,1.594,392,2.142,394,1.931,407,0.978,408,1.61,468,2.134,494,1.426,511,0.928,538,1.895,580,2.388,620,0.748,621,1.666,622,2.388,623,1.536,624,1.475,625,1.599,626,1.983,629,1.656,630,1.719,631,1.721,637,1.418,642,1.418,648,1.426,653,2.495,654,2.495,663,1.476,699,2.495,700,1.943,701,2.288,702,1.983,703,3.102,704,1.983,708,2.611,709,2.611,710,1.536,711,1.983,712,1.738,713,2.611,714,1.364,715,3.102,716,1.599,717,1.599,718,1.738,719,1.666,720,1.536,721,1.666,722,1.983,723,1.983,724,1.599,725,1.933,726,2.919,727,1.983,728,1.738,729,1.814,730,1.666,731,1.983,732,1.666,733,2.288,734,1.983,735,1.666,736,1.666,737,1.983,738,2.402,739,1.666,740,1.666,741,1.599,742,1.125,743,1.983,744,1.983,749,3.381,751,2.022,762,2.965,763,3.414,773,3.594,800,1.796,801,2.134,803,1.475,828,2.67,895,1.943,989,4.015,996,4.525,1000,3.212,1015,1.814,1027,2.718,1035,3.163,1066,5.059,1088,1.738,1089,2.182,1095,2.736,1238,2.566,1339,4.015,1340,3.15,1341,5.059,1342,2.669,1343,5.059,1344,5.059,1345,4.525,1346,2.92,1347,3.191,1348,4.969,1349,3.778,1350,3.436,1351,2.92,1352,3.845,1353,5.059,1354,3.436,1355,2.79,1356,3.436,1357,3.436,1358,3.469,1359,3.251,1360,3.436,1361,5.059,1362,3.436,1363,4.299,1364,3.436,1365,3.791,1366,3.436,1367,3.436,1368,3.436,1369,3.567,1370,3.436,1371,4.525,1372,2.92,1373,2.92,1374,3.436,1375,2.92,1376,4.299,1377,3.436,1378,3.436,1379,3.436,1380,2.022,1381,3.436,1382,3.436,1383,2.182,1384,2.92,1385,1.042,1386,3.436,1387,3.436,1388,3.436,1389,2.566,1390,3.436,1391,3.436,1392,3.436,1393,2.078,1394,3.436,1395,3.436,1396,5.376,1397,4.525,1398,3.436,1399,3.436,1400,2.566,1401,3.436,1984,3.821,2917,5.799,2918,4.404,2919,5.799,2920,4.404,2921,4.404,2922,4.404,2923,4.404,2924,4.404,2925,4.404,2926,4.404,2927,4.404,2928,4.404,2929,4.404,2930,4.404,2931,4.404,2932,4.404,2933,4.404,2934,4.404,2935,4.404,2936,4.404,2937,4.404,2938,4.404,2939,4.404,2940,4.404,2941,4.404,2942,5.799,2943,5.799,2944,5.799,2945,5.031,2946,4.404]],["title/modules/NgxChartsModule.html",[0,1.933,2947,2.79]],["body/modules/NgxChartsModule.html",[2,3.135,3,3.135,8,0.015,11,2.427,12,1.567,13,2.43,14,0.147,15,0.147,16,0.147,20,3.63,21,3.63,22,0.233,23,3.63,24,0.859,25,3.63,26,3.077,33,3.63,34,1.508,35,4.315,36,2.785,48,1.567,50,3.077,52,0.171,53,0.031,54,0.013,55,0.013,724,2.973,725,1.647,738,2.855,1035,2.54,1245,4.617,1246,2.43,1346,3.913,1347,3.831,2316,4.221,2318,4.221,2947,5.814,2948,5.12,2949,5.12,2950,5.12,2951,5.901,2952,5.901,2953,6.961,2954,6.961,2955,6.961,2956,6.961,2957,6.961,2958,6.961]],["title/interfaces/Node.html",[56,0.141,89,0.519]],["body/interfaces/Node.html",[8,0.015,14,0.083,15,0.083,16,0.083,22,0.206,34,0.854,38,0.445,46,0.445,52,0.201,53,0.018,54,0.009,55,0.009,56,0.257,58,0.6,65,1.273,67,1.741,68,1.505,72,1.146,74,0.308,75,0.528,76,0.609,79,1.035,82,0.781,83,0.391,84,0.637,85,0.922,88,0.668,89,1.098,90,1.18,91,1.671,92,1.658,93,1.994,94,1.342,96,1.104,99,0.651,100,0.668,101,0.576,104,2.014,107,0.922,111,1.264,117,0.679,118,1.049,122,2.063,128,2.122,133,1.374,140,1.756,142,1.904,143,2.218,144,0.445,147,1.264,148,1.826,149,0.665,150,2.055,155,0.854,156,0.742,157,0.882,159,0.791,163,0.698,164,0.843,166,1.762,170,1.489,171,0.576,181,1.193,182,1.544,185,1.188,191,1.411,193,2.146,200,0.672,254,0.445,262,2.063,265,1.806,279,0.647,285,0.405,291,1.86,294,1.213,295,1.213,297,2.334,308,1.323,309,2.174,310,1.01,311,1.62,314,0.958,320,1.485,321,2.263,333,1.076,354,0.958,358,2.24,363,1.374,378,1.374,386,1.376,388,0.822,407,0.863,408,0.732,413,1.376,416,0.822,418,1.547,421,2.672,422,0.822,425,1.538,427,2.136,428,1.376,431,1.376,433,1.376,441,1.374,442,1.05,445,2.355,453,2.31,457,1.892,460,1.277,468,1.035,476,2.759,477,1.741,479,2.136,482,2.455,511,0.704,526,1.919,538,3.118,541,1.756,545,2.525,547,2.639,555,2.376,576,1.839,582,2.906,672,1.892,674,1.577,681,1.741,690,2.639,698,1.839,725,0.791,777,1.955,778,1.806,780,1.879,826,1.119,830,1.826,842,1.119,844,1.438,895,2.33,924,1.433,1097,1.656,1098,1.376,1185,1.606,1264,2.5,1266,2.5,1267,1.742,1342,2.036,1359,1.577,1385,0.791,1393,1.577,1438,2.063,1441,1.577,1458,1.892,1459,1.826,1524,2.639,1701,1.165,1774,1.839,1815,3.47,1818,2.263,1843,1.577,1897,1.376,1900,1.264,1944,1.577,1945,1.577,1948,2.263,1953,1.577,1968,1.577,2045,1.505,2106,2.063,2111,2.5,2146,1.742,2147,1.839,2148,1.947,2149,1.947,2150,2.31,2151,2.931,2152,1.839,2153,2.639,2154,2.063,2155,2.5,2156,1.947,2157,2.794,2158,1.892,2159,1.947,2160,1.947,2161,1.947,2162,2.794,2163,2.794,2164,2.794,2165,3.062,2166,3.268,2167,2.794,2168,1.947,2169,1.947,2170,1.947,2171,1.839,2172,1.947,2173,1.947,2174,1.947,2175,1.947,2176,1.839,2177,2.063,2178,1.947,2179,1.947,2180,1.318,2181,1.742,2182,1.947,2183,1.839,2184,1.947,2185,1.947,2186,1.947,2187,1.947,2188,1.947,2189,1.947,2190,1.947,2191,1.947,2192,1.947,2193,1.947,2194,1.947,2195,1.947,2196,1.947,2197,1.947,2198,1.947,2199,1.947,2200,1.947,2201,1.947,2202,2.794,2203,2.639,2204,1.947,2205,1.947,2206,1.947,2207,1.947,2208,1.947,2209,1.947,2210,1.947,2211,1.947,2212,1.947,2213,2.794,2214,1.947,2215,1.947,2216,1.947,2217,1.947,2218,2.794,2219,1.947,2220,1.947,2221,1.947,2222,1.947,2223,2.794,2224,2.794,2225,1.947,2226,1.947,2227,1.947,2228,1.947,2229,1.947,2230,2.794,2231,1.947,2232,1.947,2233,1.947,2234,1.947,2235,1.947,2236,3.571,2237,1.947,2238,1.947,2239,1.947,2240,1.947,2241,1.947,2242,1.947,2243,1.947,2244,1.947,2245,1.947,2246,1.947,2247,1.947,2248,1.839,2249,2.794,2250,1.947,2251,2.063,2252,1.947,2253,1.947,2254,2.794,2255,1.975,2256,1.947,2257,1.947,2258,1.947,2259,1.947,2260,2.794,2261,1.947,2262,2.794,2263,1.947,2264,2.794,2265,2.794,2266,1.947,2267,1.947,2268,1.947,2269,1.947,2270,1.947,2271,1.947,2272,1.947,2273,2.794,2274,1.947,2275,1.947,2276,2.794,2277,1.947,2278,1.947,2279,1.947,2280,1.947,2281,1.947,2282,1.947,2283,1.947,2284,1.947,2285,2.794,2286,1.947,2287,1.947,2288,1.947,2289,1.947,2290,1.947,2291,1.947,2292,1.947,2293,1.947,2294,1.947,2295,1.947,2296,1.947,2297,1.947,2298,1.947,2299,1.947,2300,1.947,2301,1.947,2302,1.947,2303,1.947,2304,1.947,2305,2.794,2306,1.947,2307,1.947,2308,1.947,2309,1.947,2310,1.947,2311,1.947,2312,1.947,2313,1.947]],["title/interfaces/NodeData.html",[56,0.141,1251,2.79]],["body/interfaces/NodeData.html",[8,0.015,14,0.189,15,0.133,16,0.133,22,0.19,24,0.776,46,0.366,52,0.19,53,0.028,54,0.012,55,0.012,56,0.193,58,0.958,74,0.268,75,0.513,76,0.832,82,0.719,83,0.371,84,0.417,89,1.101,90,0.776,94,1.435,95,1.718,116,0.9,118,0.998,142,1.611,144,0.366,156,0.646,157,0.818,162,1.936,164,0.895,166,1.906,196,1.529,200,0.811,220,1.86,244,1.471,279,0.853,285,0.859,289,2.196,299,2.295,328,1.039,353,1.416,358,1.718,363,1.529,442,1.168,460,1.214,477,1.936,494,1.311,526,1.471,620,0.756,624,1.787,628,3.814,629,1.674,630,1.124,631,1.124,632,5.111,633,2.018,634,4.162,635,2.018,636,1.718,637,2.109,638,4.162,639,4.162,640,4.162,641,5.111,642,1.718,643,3.108,644,3.814,645,3.537,646,3.537,647,4.162,648,1.311,649,4.162,650,2.781,651,3.814,653,2.295,656,4.162,663,1.491,664,4.162,665,4.162,670,4.162,671,4.162,672,2.104,673,2.643,674,2.517,675,4.162,676,4.162,677,4.162,678,4.162,679,5.111,680,4.162,681,1.936,682,4.162,683,2.935,684,1.936,685,4.162,686,1.168,687,3.814,717,1.936,1249,4.162,1250,4.06,1251,5.525,1257,4.627,1258,4.627,1259,4.627,1260,4.627,1261,4.627,1262,4.627,1263,4.627,1264,3.697,1265,6.15,1266,3.416,1267,2.781,1268,4.627,1269,4.627,1270,3.814,1271,4.627,1272,4.627,1273,4.627,1274,4.162,1275,4.627,1276,4.627,1277,3.814,1278,4.627,1279,4.627,1280,4.627,1281,4.627,1282,4.627,1283,4.162,1284,4.627,1285,4.627,1286,4.627,1287,4.627,1288,4.627,1289,4.627]],["title/interfaces/NodeType.html",[56,0.141,445,1.36]],["body/interfaces/NodeType.html",[8,0.015,14,0.084,15,0.084,16,0.084,22,0.207,34,0.866,38,0.451,46,0.447,52,0.202,53,0.018,54,0.009,55,0.009,56,0.258,58,0.609,65,1.286,67,1.759,68,1.527,72,1.058,74,0.31,75,0.531,76,0.615,79,1.05,82,0.745,83,0.375,84,0.637,85,0.935,88,0.674,89,1.097,90,1.181,91,1.684,92,1.667,93,1.87,94,1.351,96,1.108,99,0.66,100,0.674,101,0.585,104,1.958,107,0.935,111,1.283,117,0.747,118,1.154,122,2.085,128,2.139,133,1.389,140,1.768,142,1.897,143,2.247,144,0.49,147,1.283,148,1.944,149,0.668,150,2.059,155,0.866,156,0.747,157,0.884,159,0.802,163,0.705,164,0.685,166,1.653,170,1.501,171,0.585,181,1.201,182,1.56,185,1.191,191,1.416,193,2.14,200,0.677,254,0.451,262,1.459,265,1.821,279,0.652,285,0.411,291,1.621,294,1.231,295,1.231,297,2.185,308,1.336,309,2.186,310,1.021,311,1.627,314,0.972,320,1.5,321,2.286,333,1.092,354,0.972,358,2.101,363,1.389,378,1.389,386,1.396,388,0.834,398,2.182,407,0.868,408,0.743,413,1.396,416,0.834,418,1.336,421,2.54,422,0.834,425,1.68,427,2.151,428,1.396,431,1.396,433,1.396,441,1.389,442,0.743,445,2.275,453,2.328,457,1.911,460,1.287,468,1.05,476,2.778,477,1.759,479,2.151,482,2.468,511,0.714,526,1.701,538,2.92,541,1.389,545,2.778,547,3.111,555,2.401,576,1.866,582,2.92,672,2.23,674,1.6,681,1.759,690,2.666,698,1.866,725,0.802,777,1.971,778,1.821,780,1.894,826,1.136,830,1.838,842,1.136,844,1.459,895,2.34,924,1.444,1097,1.68,1098,1.396,1185,1.136,1264,2.526,1266,2.526,1267,1.768,1342,2.053,1359,1.6,1385,0.802,1393,1.6,1438,2.433,1441,1.6,1458,1.911,1459,1.838,1524,2.666,1701,1.182,1774,1.866,1815,3.079,1818,2.286,1843,1.6,1897,1.396,1900,1.283,1944,1.6,1945,1.6,1948,2.286,1953,1.6,1968,1.6,2045,1.527,2106,2.085,2111,2.526,2146,1.768,2147,1.866,2148,1.976,2149,1.976,2150,2.328,2151,2.995,2152,1.866,2153,2.666,2154,2.433,2155,2.948,2156,2.823,2157,3.802,2158,2.23,2159,1.976,2160,1.976,2161,1.976,2162,2.823,2163,1.976,2164,1.976,2165,2.668,2166,2.823,2167,1.976,2168,1.976,2169,1.976,2170,1.976,2171,1.866,2172,1.976,2173,1.976,2174,1.976,2175,1.976,2176,1.866,2177,2.085,2178,1.976,2179,1.976,2180,1.338,2181,1.768,2182,1.976,2183,1.866,2184,1.976,2185,1.976,2186,1.976,2187,1.976,2188,1.976,2189,1.976,2190,1.976,2191,1.976,2192,1.976,2193,1.976,2194,1.976,2195,1.976,2196,1.976,2197,1.976,2198,1.976,2199,1.976,2200,1.976,2201,1.976,2202,2.823,2203,2.666,2204,1.976,2205,1.976,2206,1.976,2207,1.976,2208,1.976,2209,1.976,2210,1.976,2211,1.976,2212,1.976,2213,2.823,2214,1.976,2215,1.976,2216,1.976,2217,1.976,2218,2.823,2219,1.976,2220,1.976,2221,1.976,2222,1.976,2223,2.823,2224,2.823,2225,1.976,2226,1.976,2227,1.976,2228,1.976,2229,1.976,2230,2.823,2231,1.976,2232,1.976,2233,1.976,2234,1.976,2235,1.976,2236,3.594,2237,1.976,2238,1.976,2239,1.976,2240,1.976,2241,1.976,2242,1.976,2243,1.976,2244,1.976,2245,1.976,2246,1.976,2247,1.976,2248,1.866,2249,2.823,2250,1.976,2251,2.085,2252,1.976,2253,1.976,2254,2.823,2255,1.995,2256,1.976,2257,1.976,2258,1.976,2259,1.976,2260,2.823,2261,1.976,2262,2.823,2263,1.976,2264,2.823,2265,2.823,2266,1.976,2267,1.976,2268,1.976,2269,1.976,2270,1.976,2271,1.976,2272,1.976,2273,2.823,2274,1.976,2275,1.976,2276,2.823,2277,1.976,2278,1.976,2279,1.976,2280,1.976,2281,1.976,2282,1.976,2283,1.976,2284,1.976,2285,2.823,2286,1.976,2287,1.976,2288,1.976,2289,1.976,2290,1.976,2291,1.976,2292,1.976,2293,1.976,2294,1.976,2295,1.976,2296,1.976,2297,1.976,2298,1.976,2299,1.976,2300,1.976,2301,1.976,2302,1.976,2303,1.976,2304,1.976,2305,2.823,2306,1.976,2307,1.976,2308,1.976,2309,1.976,2310,1.976,2311,1.976,2312,1.976,2313,1.976]],["title/interfaces/RecordNode.html",[56,0.141,1811,1.841]],["body/interfaces/RecordNode.html",[8,0.015,14,0.077,15,0.077,16,0.077,22,0.182,38,0.411,46,0.478,52,0.197,53,0.016,54,0.008,55,0.008,56,0.238,58,0.555,60,1.035,61,1.077,63,1.611,65,1.745,66,2.206,67,1.121,70,1.458,71,3.256,72,1.177,74,0.363,75,0.462,76,0.392,77,2.796,78,1.53,79,0.957,80,1.611,81,3.101,82,0.588,83,0.403,84,0.531,87,0.578,88,0.43,89,1.098,90,1.162,91,1.759,92,1.509,93,0.885,94,0.992,95,0.995,96,1.128,100,0.43,101,0.533,102,1.787,103,1.329,104,1.803,105,2.116,110,1.345,111,2.486,112,2.492,113,2.208,114,2.362,115,1.7,116,0.95,117,0.887,118,0.578,127,2.137,128,1.168,130,2.029,131,2.432,132,2.362,133,1.298,135,1.865,141,1.329,142,1.869,144,0.311,149,0.665,150,2.031,151,1.53,153,1.611,156,0.549,157,0.833,159,1.269,162,1.121,163,0.449,164,0.822,166,1.269,167,2.804,168,3.08,169,1.219,170,0.82,171,1.346,172,2.415,175,2.531,181,1.044,184,0.449,185,0.47,186,1.398,187,1.709,188,1.391,189,1.219,191,1.15,193,2.02,197,1.329,200,0.821,220,1.077,228,2.244,231,1.537,243,2.415,244,1.629,245,2.951,250,1.391,254,0.837,259,1.7,265,2.116,268,1.713,279,0.725,280,2.362,285,0.906,287,2.951,290,1.7,298,1.272,301,1.7,304,2.244,305,1.865,308,0.852,310,1.13,311,1.031,312,1.7,313,1.458,314,0.885,316,2.308,328,1.225,329,1.272,331,1.077,333,0.995,334,1.7,335,2.039,336,0.992,337,1.644,338,1.031,342,0.954,353,1.424,354,0.885,355,1.329,387,1.458,407,0.603,418,1.735,419,1.53,420,1.272,423,1.865,424,1.329,425,1.221,437,2.368,440,1.53,441,0.885,442,1.175,443,1.329,445,1.87,446,2.868,447,1.914,456,1.611,459,1.579,460,0.703,462,1.53,463,1.914,464,3.661,465,2.335,466,1.914,467,3.465,468,0.957,469,1.579,470,1.168,471,1.914,472,1.7,477,2.283,478,1.611,479,1.077,484,1.272,485,1.8,522,2.244,525,1.611,527,3.205,537,1.7,538,2.542,543,0.957,545,1.391,560,1.611,673,1.53,686,1.44,832,1.391,836,1.391,1040,1.611,1052,1.168,1062,2.415,1130,1.458,1143,3.324,1250,2.807,1380,1.077,1385,1.072,1389,1.8,1410,3.661,1437,1.611,1459,1.349,1488,1.914,1535,1.914,1538,2.048,1615,1.329,1650,2.492,1691,2.048,1804,3.661,1805,1.8,1806,2.492,1807,2.209,1808,2.209,1809,2.951,1810,2.362,1811,3.667,1812,2.209,1813,3.239,1814,2.639,1815,2.531,1816,2.209,1817,2.209,1818,1.458,1819,2.209,1820,2.209,1821,2.209,1822,2.209,1823,2.209,1824,2.209,1825,1.8,1826,2.639,1827,2.209,1828,1.611,1829,3.003,1830,2.209,1831,3.556,1832,2.209,1833,2.209,1834,3.003,1835,2.048,1836,2.209,1837,2.209,1838,2.048,1839,2.951,1840,1.8,1841,3.003,1842,1.8,1843,1.458,1844,2.209,1845,2.209,1846,2.209,1847,2.209,1848,1.914,1849,2.209,1850,2.209,1851,2.209,1852,3.239,1853,2.209,1854,2.209,1855,2.209,1856,2.209,1857,2.209,1858,1.914,1859,2.807,1860,3.003,1861,2.209,1862,2.209,1863,2.209,1864,3.661,1865,2.209,1866,2.209,1867,2.209,1868,3.835,1869,2.209,1870,2.209,1871,2.209,1872,2.209,1873,2.209,1874,3.239,1875,3.239,1876,3.239,1877,2.209,1878,3.239,1879,2.209,1880,1.53,1881,2.209,1882,1.914,1883,2.209,1884,3.835,1885,1.914,1886,2.209,1887,1.611,1888,2.209,1889,3.239,1890,2.209,1891,2.209,1892,1.7,1893,2.209,1894,2.209,1895,2.209,1896,2.209,1897,1.865,1898,2.209,1899,2.209,1900,1.168,1901,2.209,1902,2.209,1903,2.209,1904,2.209,1905,3.239,1906,2.209,1907,2.209,1908,2.209,1909,2.209,1910,2.209,1911,2.209,1912,2.209,1913,2.209,1914,2.209,1915,2.209,1916,2.048,1917,2.209,1918,2.209,1919,3.239,1920,2.209,1921,2.209,1922,2.209,1923,2.209,1924,2.209,1925,1.8,1926,2.209,1927,2.209,1928,2.209,1929,2.209,1930,2.209,1931,2.209,1932,2.209,1933,2.209,1934,2.209,1935,2.209,1936,3.835,1937,2.209,1938,2.209,1939,3.239,1940,2.209,1941,2.209,1942,4.224,1943,2.209,1944,3.287,1945,2.787,1946,4.224,1947,4.224,1948,2.787,1949,2.209,1950,2.209,1951,2.209,1952,4.224,1953,3.205,1954,2.209,1955,2.048,1956,3.835,1957,2.209,1958,3.835,1959,3.239,1960,3.239,1961,3.239,1962,3.239,1963,2.209,1964,2.209,1965,3.835,1966,3.835,1967,2.209,1968,2.137,1969,2.209,1970,2.209,1971,2.209,1972,2.209,1973,2.209,1974,2.209,1975,1.914,1976,1.611,1977,2.209,1978,1.8,1979,2.209,1980,2.209]],["title/classes/RecordsProvider.html",[53,0.021,443,1.679]],["body/classes/RecordsProvider.html",[8,0.015,12,0.717,14,0.067,15,0.067,16,0.067,22,0.172,38,0.359,46,0.459,52,0.188,53,0.014,54,0.008,55,0.008,56,0.215,60,0.904,61,1.927,63,1.408,65,1.66,66,2.16,67,0.98,70,1.274,71,3.098,72,1.17,74,0.351,75,0.432,76,0.871,77,2.581,78,1.338,79,1.269,80,1.408,81,2.951,82,0.543,83,0.406,84,0.556,87,0.505,88,0.376,89,1.096,90,1.167,91,1.646,92,1.66,93,1.584,94,1.084,95,0.869,96,1.203,100,0.376,101,0.466,102,3.024,103,1.763,104,1.911,105,1.616,110,1.258,111,2.458,112,2.254,113,2.276,114,2.136,115,1.486,116,0.935,117,0.899,118,0.766,124,1.763,127,2.608,128,1.021,130,2.09,131,2.276,132,2.136,133,1.174,135,1.687,141,1.763,142,1.893,144,0.5,149,0.653,150,2.061,151,1.338,153,1.408,156,0.669,157,0.806,159,1.308,162,0.98,163,0.91,164,0.787,166,1.171,167,2.874,168,2.881,169,1.065,170,0.717,171,1.322,172,2.229,175,2.336,181,0.964,182,2.014,184,0.596,185,1.129,186,1.308,187,1.654,188,2.229,189,1.065,191,1.076,193,2.048,197,1.763,200,0.799,220,0.941,228,2.03,231,1.419,243,2.229,244,1.524,245,2.724,250,1.845,254,0.79,259,1.486,265,2.014,268,1.646,279,0.685,280,2.136,285,0.882,287,2.724,290,1.486,295,0.98,297,1.594,298,1.112,301,1.486,304,2.453,305,1.687,308,0.745,310,1.41,311,1.127,312,1.486,313,1.274,314,1.174,316,2.13,328,1.265,329,1.112,331,1.428,333,1.779,334,1.486,335,1.845,336,0.897,337,1.487,338,0.933,342,0.863,353,1.467,354,1.174,355,1.162,376,1.408,377,2.387,378,1.174,379,2.387,380,2.387,381,1.087,383,2.254,384,2.254,385,2.254,386,2.038,387,2.336,388,1.217,389,2.254,390,2.254,391,1.573,392,2.013,394,1.994,395,1.338,396,4.671,399,1.673,400,1.573,401,1.673,402,1.673,403,1.673,404,1.673,405,1.673,407,0.958,408,1.37,413,1.112,414,1.673,415,1.573,416,0.664,417,1.573,418,1.792,419,2.03,420,1.687,421,1.112,422,0.664,423,2.038,424,2.13,425,1.258,426,1.673,427,0.941,428,1.112,430,1.79,431,1.112,432,1.673,433,1.112,434,1.673,437,2.437,440,1.338,441,0.774,442,0.897,443,1.763,445,2.265,446,2.878,447,3.068,456,1.408,459,1.428,460,0.615,461,2.107,462,2.03,463,2.539,464,3.876,465,2.317,466,2.539,467,3.467,468,1.269,469,1.726,470,1.55,471,2.539,472,2.254,473,1.79,474,1.79,475,1.79,476,1.216,477,2.27,478,2.136,479,1.726,480,1.79,481,1.79,482,1.021,483,2.107,484,1.687,485,2.387,522,2.03,525,1.408,527,3.159,537,2.254,538,2.378,543,0.836,545,1.216,560,1.408,673,1.338,686,1.37,832,1.216,836,1.216,1040,1.408,1052,1.021,1062,2.229,1130,1.274,1143,3.068,1250,2.539,1380,0.941,1385,0.969,1389,1.573,1410,3.425,1437,1.408,1459,1.22,1488,1.673,1535,1.673,1538,1.79,1615,1.162,1650,2.254,1691,1.79,1804,3.425,1805,2.387,1806,2.724,1807,1.931,1808,1.931,1809,2.254,1810,1.408,1811,3.579,1812,1.931,1813,2.93,1814,2.387,1815,2.336,1816,1.931,1817,1.931,1818,1.274,1819,1.931,1820,1.931,1821,1.931,1822,1.931,1823,1.931,1824,1.931,1825,1.573,1826,2.387,1827,1.931,1828,1.408,1829,2.716,1830,1.931,1831,3.282,1832,1.931,1833,1.931,1834,2.716,1835,1.79,1836,1.931,1837,2.93,1838,2.716,1839,3.269,1840,2.387,1841,3.664,1842,2.387,1843,1.274,1844,1.931,1845,1.931,1846,1.931,1847,1.931,1848,1.673,1849,1.931,1850,1.931,1851,1.931,1852,2.93,1853,1.931,1854,1.931,1855,1.931,1856,1.931,1857,1.931,1858,1.673,1859,2.539,1860,2.716,1861,1.931,1862,1.931,1863,1.931,1864,3.425,1865,1.931,1866,1.931,1867,1.931,1868,3.54,1869,1.931,1870,1.931,1871,1.931,1872,1.931,1873,1.931,1874,2.93,1875,2.93,1876,2.93,1877,1.931,1878,2.93,1879,1.931,1880,1.338,1881,1.931,1882,1.673,1883,1.931,1884,3.54,1885,1.673,1886,1.931,1887,1.408,1888,1.931,1889,2.93,1890,1.931,1891,1.931,1892,1.486,1893,1.931,1894,1.931,1895,1.931,1896,1.931,1897,1.687,1898,1.931,1899,1.931,1900,1.021,1901,1.931,1902,1.931,1903,1.931,1904,1.931,1905,2.93,1906,1.931,1907,1.931,1908,1.931,1909,1.931,1910,1.931,1911,1.931,1912,1.931,1913,1.931,1914,1.931,1915,1.931,1916,1.79,1917,1.931,1918,1.931,1919,2.93,1920,1.931,1921,1.931,1922,1.931,1923,1.931,1924,1.931,1925,1.573,1926,1.931,1927,1.931,1928,1.931,1929,1.931,1930,1.931,1931,1.931,1932,1.931,1933,1.931,1934,1.931,1935,1.931,1936,3.54,1937,1.931,1938,1.931,1939,2.93,1940,1.931,1941,1.931,1942,3.952,1943,1.931,1944,3.159,1945,2.608,1946,3.952,1947,3.952,1948,2.608,1949,1.931,1950,1.931,1951,1.931,1952,3.952,1953,3.066,1954,1.931,1955,1.79,1956,3.54,1957,1.931,1958,3.54,1959,2.93,1960,2.93,1961,2.93,1962,2.93,1963,1.931,1964,1.931,1965,3.54,1966,3.54,1967,1.931,1968,1.933,1969,1.931,1970,1.931,1971,1.931,1972,1.931,1973,1.931,1974,1.931,1975,1.673,1976,1.408,1977,1.931,1978,1.573,1979,1.931,1980,1.931,2101,2.107,2959,2.7,2960,2.7]],["title/components/ResultTimeline.html",[620,0.45,739,1.476]],["body/components/ResultTimeline.html",[7,1.609,8,0.015,9,1.544,10,1.544,14,0.159,15,0.106,16,0.106,17,1.483,22,0.197,24,0.619,31,1.609,46,0.292,48,1.879,52,0.164,53,0.023,54,0.012,55,0.01,66,1.219,74,0.214,75,0.499,76,0.72,83,0.396,84,0.499,87,0.796,88,0.592,89,0.566,90,0.619,107,1.875,116,0.54,117,0.914,143,1.899,144,0.509,149,0.398,155,1.087,163,1.098,164,0.914,184,0.619,185,0.861,200,0.873,254,0.942,279,0.654,285,0.686,381,1.504,392,2.121,394,1.688,407,0.848,408,1.396,465,2.087,494,1.394,526,1.952,579,3.302,620,0.735,621,1.609,622,2.334,623,1.483,625,1.544,626,1.916,629,1.628,630,1.714,631,1.711,648,1.394,653,2.439,654,2.439,663,1.757,684,2.467,699,2.439,700,1.899,701,2.236,702,1.916,703,3.346,704,1.916,708,2.552,709,2.552,710,1.483,711,1.916,712,1.678,713,2.552,714,1.317,715,3.06,716,1.544,717,1.544,718,1.678,719,1.609,720,1.483,721,1.609,722,1.916,723,1.916,724,1.544,725,1.508,726,2.87,727,1.916,728,1.678,729,1.752,730,1.609,731,1.916,732,1.609,733,2.236,734,1.916,735,1.609,736,1.609,737,1.916,738,1.483,739,2.571,740,2.678,741,1.544,742,1.86,743,1.916,744,1.916,750,2.978,783,3.507,800,1.317,801,1.974,803,1.425,832,2.552,897,3.042,925,3.207,991,1.831,1015,2.334,1039,2.218,1165,3.513,1274,3.319,1310,3.118,2151,3.329,2961,5.896,2962,3.319,2963,5.667,2964,6.373,2965,7.641,2966,6.796,2967,6.796,2968,6.373,2969,6.373,2970,6.373,2971,6.373,2972,4.254,2973,5.667,2974,7.078,2975,4.254,2976,4.254,2977,4.254,2978,5.667,2979,4.254,2980,4.254,2981,4.254,2982,4.254,2983,5.896,2984,4.558,2985,4.254,2986,4.254,2987,4.254,2988,4.254,2989,4.254,2990,4.254,2991,6.373,2992,4.254,2993,3.69,2994,3.69,2995,3.69,2996,3.69,2997,4.254,2998,4.254,2999,4.254,3000,4.254,3001,4.254,3002,4.254,3003,5.667,3004,4.254,3005,2.821,3006,4.254,3007,4.254,3008,4.254,3009,5.667,3010,4.254,3011,4.254,3012,4.254,3013,4.254,3014,4.254,3015,4.254,3016,5.667,3017,4.254,3018,4.254,3019,4.226,3020,5.667,3021,4.254,3022,4.254,3023,4.254,3024,4.254,3025,5.667,3026,5.667,3027,5.667,3028,5.667,3029,5.667,3030,4.254,3031,4.254,3032,5.667,3033,4.254,3034,4.254,3035,4.254,3036,4.254,3037,4.254,3038,4.254,3039,4.254,3040,5.667,3041,4.254,3042,5.667,3043,4.254,3044,4.254,3045,4.254,3046,4.254,3047,4.254,3048,4.254,3049,4.254,3050,4.254,3051,4.254,3052,4.254,3053,4.254,3054,4.254,3055,4.254,3056,4.254,3057,4.254,3058,4.254,3059,4.254,3060,4.254,3061,4.254,3062,4.254,3063,4.254,3064,4.254,3065,4.254,3066,4.254,3067,4.254,3068,4.254]],["title/classes/SelectedRecordsProvider.html",[53,0.021,3069,3.045]],["body/classes/SelectedRecordsProvider.html",[8,0.015,12,1.19,14,0.112,15,0.112,16,0.112,22,0.208,52,0.13,53,0.024,54,0.011,55,0.011,56,0.162,60,1.502,61,2.419,72,0.839,74,0.225,75,0.459,76,0.97,79,1.389,83,0.402,84,0.543,87,0.839,88,0.624,89,1.066,90,1.124,92,1.671,93,2.064,94,0.982,95,1.444,96,1.225,102,3.181,103,1.93,104,1.842,105,2.315,106,2.908,110,1.336,116,0.57,117,0.84,118,0.839,124,2.525,127,2.769,130,1.697,142,1.608,144,0.542,146,2.13,148,1.748,149,0.419,150,1.961,156,0.711,159,1.061,163,1.048,167,2.737,182,2.379,184,0.854,185,1.218,186,1.748,187,1.642,188,3.124,189,1.769,191,0.873,193,1.914,197,2.525,200,0.492,243,2.642,285,0.543,291,1.285,295,2.13,296,2.468,297,2.234,304,2.222,310,1.517,311,1.021,314,1.285,328,1.143,330,2.338,331,1.563,333,2.106,353,1.19,354,1.285,376,2.338,377,3.419,378,1.682,379,3.419,380,3.419,381,1.558,383,3.229,384,3.229,385,3.229,386,2.694,387,2.769,388,1.706,389,3.229,390,3.229,391,2.613,392,2.152,394,2.274,395,2.222,396,4.998,399,2.779,400,2.613,401,2.779,402,2.779,403,2.779,404,2.779,405,2.779,407,1.036,408,1.618,413,1.847,414,2.779,415,2.613,416,1.103,417,2.613,418,1.619,419,2.222,420,1.847,421,1.847,422,1.103,423,1.847,424,2.525,425,1.021,426,2.779,427,1.563,428,1.847,431,1.847,432,2.779,433,1.847,434,2.779,437,2.754,439,2.525,440,3.438,443,3.099,445,2.662,446,2.857,447,4.3,461,3.499,462,2.222,463,2.779,464,3.637,465,2.118,466,2.779,467,2.642,468,1.389,469,1.563,470,2.474,471,2.779,472,2.468,473,2.974,474,2.974,475,2.974,476,2.019,477,1.628,478,2.338,479,2.046,480,2.974,481,2.974,482,1.697,483,3.499,484,1.847,485,2.613,511,0.945,543,1.817,828,2.857,1090,2.986,1246,1.847,1406,3.89,1407,4.119,1511,3.89,1512,3.89,2117,3.89,2154,2.525,2203,3.229,3069,4.579,3070,5.674,3071,4.196,3072,5.091,3073,5.091,3074,5.868,3075,5.868,3076,5.868,3077,6.54,3078,5.868,3079,4.484,3080,4.484,3081,2.338,3082,5.868,3083,4.484,3084,4.484,3085,4.484,3086,4.484,3087,4.484,3088,4.484]],["title/interfaces/StructuralEdgeType.html",[56,0.141,446,1.607]],["body/interfaces/StructuralEdgeType.html",[8,0.015,14,0.073,15,0.073,16,0.073,22,0.179,38,0.392,46,0.471,52,0.194,53,0.016,54,0.008,55,0.008,56,0.234,58,0.53,60,0.988,61,1.028,63,1.537,65,1.776,66,2.214,67,1.07,70,1.391,71,3.54,72,1.286,74,0.359,75,0.483,76,0.783,77,2.721,78,1.461,79,0.913,80,1.537,81,3.313,82,0.573,83,0.404,84,0.549,87,0.552,88,0.41,89,1.094,90,1.162,91,1.925,92,1.475,93,0.845,94,0.959,95,0.949,96,1.15,100,0.41,101,0.509,102,1.726,103,1.269,104,1.824,105,2.059,110,1.315,111,2.445,112,2.408,113,2.149,114,2.282,115,1.622,116,0.942,117,0.889,118,0.552,127,2.065,128,1.656,130,1.974,131,2.755,132,2.282,133,1.254,135,1.802,141,1.269,142,1.879,144,0.358,149,0.657,150,2.04,151,1.461,153,1.537,156,0.53,157,0.824,159,1.235,162,2.097,163,0.429,164,0.865,166,1.583,167,2.86,168,3.217,169,1.163,170,0.783,171,1.338,172,2.35,175,2.463,181,1.016,184,0.429,185,0.448,186,1.366,187,1.691,188,1.328,189,1.163,191,1.124,193,2.045,197,1.269,200,0.814,220,1.028,228,2.168,231,1.655,243,2.35,244,1.593,245,3.178,250,1.328,254,0.821,259,1.622,265,2.081,268,1.84,279,0.746,280,2.282,285,0.92,287,2.872,290,1.622,298,1.214,301,1.622,304,2.168,305,1.802,308,0.813,310,1.099,311,0.996,312,2.408,313,1.391,314,0.845,316,2.246,328,1.201,329,1.802,331,1.028,333,0.949,334,1.622,335,1.971,336,0.959,337,1.589,338,0.996,342,0.922,353,1.638,354,0.845,355,1.269,387,2.065,407,0.582,418,1.702,419,1.461,420,1.214,423,1.802,424,1.269,425,1.565,437,2.333,440,1.461,441,0.845,442,0.959,443,1.269,445,1.82,446,2.891,447,1.827,456,1.537,459,1.526,460,0.996,462,1.461,463,1.827,464,3.579,465,2.323,466,1.827,467,3.46,468,0.913,469,1.526,470,1.115,471,1.827,472,1.622,477,2.24,478,2.282,479,1.028,484,1.214,485,1.718,522,2.168,525,1.537,527,3.243,537,1.622,538,2.485,543,0.913,545,1.328,560,2.282,673,1.461,686,1.416,832,1.971,836,1.971,1040,2.282,1052,1.656,1062,2.91,1130,2.065,1143,3.235,1250,2.712,1380,1.028,1385,1.366,1389,2.55,1410,4.26,1437,1.537,1459,1.304,1488,1.827,1535,1.827,1538,1.955,1615,1.269,1650,2.408,1691,1.955,1804,3.579,1805,1.718,1806,2.408,1807,2.108,1808,2.108,1809,2.872,1810,1.537,1811,3.626,1812,3.13,1813,4.13,1814,3.365,1815,3.05,1816,3.13,1817,3.13,1818,2.065,1819,3.13,1820,3.13,1821,3.13,1822,3.13,1823,3.13,1824,3.13,1825,2.55,1826,3.365,1827,3.13,1828,2.282,1829,3.829,1830,3.13,1831,3.829,1832,3.13,1833,3.13,1834,3.829,1835,1.955,1836,2.108,1837,2.108,1838,1.955,1839,2.872,1840,1.718,1841,2.902,1842,1.718,1843,1.391,1844,2.108,1845,2.108,1846,2.108,1847,2.108,1848,1.827,1849,2.108,1850,2.108,1851,2.108,1852,3.13,1853,2.108,1854,2.108,1855,2.108,1856,2.108,1857,2.108,1858,1.827,1859,2.712,1860,2.902,1861,2.108,1862,2.108,1863,2.108,1864,3.579,1865,2.108,1866,2.108,1867,2.108,1868,3.732,1869,2.108,1870,2.108,1871,2.108,1872,2.108,1873,2.108,1874,3.13,1875,3.13,1876,3.13,1877,2.108,1878,3.13,1879,2.108,1880,1.461,1881,2.108,1882,1.827,1883,2.108,1884,3.732,1885,1.827,1886,2.108,1887,1.537,1888,2.108,1889,3.13,1890,2.108,1891,2.108,1892,1.622,1893,2.108,1894,2.108,1895,2.108,1896,2.108,1897,1.802,1898,2.108,1899,2.108,1900,1.115,1901,2.108,1902,2.108,1903,2.108,1904,2.108,1905,3.13,1906,2.108,1907,2.108,1908,2.108,1909,2.108,1910,2.108,1911,2.108,1912,2.108,1913,2.108,1914,2.108,1915,2.108,1916,1.955,1917,2.108,1918,2.108,1919,3.13,1920,2.108,1921,2.108,1922,2.108,1923,2.108,1924,2.108,1925,1.718,1926,2.108,1927,2.108,1928,2.108,1929,2.108,1930,2.108,1931,2.108,1932,2.108,1933,2.108,1934,2.108,1935,2.108,1936,3.732,1937,2.108,1938,2.108,1939,3.13,1940,2.108,1941,2.108,1942,4.13,1943,2.108,1944,3.243,1945,2.725,1946,4.13,1947,4.13,1948,2.725,1949,2.108,1950,2.108,1951,2.108,1952,4.13,1953,3.157,1954,2.108,1955,1.955,1956,3.732,1957,2.108,1958,3.732,1959,3.13,1960,3.13,1961,3.13,1962,3.13,1963,2.108,1964,2.108,1965,3.732,1966,3.732,1967,2.108,1968,2.065,1969,2.108,1970,2.108,1971,2.108,1972,2.108,1973,2.108,1974,2.108,1975,1.827,1976,1.537,1977,2.108,1978,1.718,1979,2.108,1980,2.108]],["title/interfaces/TimelineAggregation.html",[56,0.141,772,1.933]],["body/interfaces/TimelineAggregation.html",[8,0.015,11,1.695,12,0.696,13,1.65,14,0.065,15,0.065,16,0.065,22,0.212,24,0.382,38,0.349,42,0.878,46,0.424,48,1.445,52,0.186,53,0.014,54,0.012,55,0.007,56,0.197,58,0.471,65,1.064,72,1.018,74,0.132,75,0.314,76,0.842,82,0.746,83,0.363,84,0.605,85,2.207,86,2.546,87,0.491,88,0.365,96,1.052,97,1.342,98,1.918,99,0.511,100,0.558,101,0.452,107,1.501,110,0.597,113,1.08,116,0.617,118,0.491,144,0.424,145,1.367,146,1.455,147,2.433,148,0.781,149,0.659,155,1.643,156,0.929,157,0.913,158,1.181,163,0.792,164,0.803,171,1.356,176,2.697,177,1.516,181,1.06,184,0.382,185,0.978,186,0.62,191,1.291,192,1.724,196,1.56,200,0.845,203,1.237,204,1.237,205,1.237,208,1.443,211,0.992,222,1.128,224,0.952,231,1.394,234,1.443,235,1.443,238,1.443,244,1.341,254,0.724,265,1.29,266,1.443,267,3.223,268,1.195,279,0.814,285,0.485,299,1.724,310,0.552,311,0.912,319,1.034,320,0.812,328,1.06,336,0.574,338,0.597,342,0.552,349,2.294,363,1.56,378,1.148,381,1.064,398,2.451,407,0.533,408,0.574,416,0.985,418,0.723,420,1.08,422,0.645,423,1.08,425,1.107,427,1.898,437,1.695,439,1.128,441,1.56,442,0.574,453,1.08,458,3.224,459,1.397,460,0.912,465,1.901,469,0.914,470,1.839,494,0.645,511,0.552,525,1.367,526,1.105,527,1.891,541,1.681,543,0.812,564,3.224,582,2.768,620,0.561,624,1.964,629,1.024,630,0.552,631,0.552,633,0.992,635,0.992,636,0.844,637,1.566,642,1.29,648,0.645,650,1.367,663,1.774,684,2.468,686,1.409,714,0.812,742,1.85,745,1.367,747,1.724,750,3.183,751,0.914,754,1.181,758,2.946,759,3.187,772,3.368,775,2.189,777,1.695,778,1.566,780,1.629,781,1.804,783,2.675,796,2.129,800,0.812,801,1.241,803,1.342,810,4.579,819,2.147,826,0.878,830,0.781,831,1.528,832,1.804,836,1.181,842,0.878,847,1.128,849,1.034,850,1.128,851,1.08,871,2.905,879,1.367,902,1.528,903,4.489,904,1.528,908,2.205,909,2.905,910,1.528,912,1.237,913,1.528,917,1.528,919,1.528,920,1.528,924,1.024,925,1.891,934,2.624,943,1.237,991,1.128,994,1.034,1010,1.528,1011,1.237,1014,1.181,1015,1.65,1016,1.299,1017,1.181,1021,1.65,1022,1.034,1027,1.581,1041,1.804,1042,1.528,1052,2.059,1062,1.181,1088,1.581,1090,2.66,1093,1.985,1095,1.237,1096,1.985,1101,1.08,1131,1.367,1144,1.625,1168,2.189,1176,1.128,1185,2.071,1235,1.181,1246,1.08,1302,1.443,1303,1.739,1310,1.443,1355,1.724,1358,3.035,1380,2.37,1383,1.299,1385,1.288,1407,2.535,1455,1.367,1459,0.781,1467,1.739,1468,1.739,1470,1.299,1489,1.237,1515,1.739,1582,2.657,1672,1.625,1681,1.528,1687,1.739,1700,2.089,1701,0.914,1773,2.657,1781,1.443,1839,1.443,2013,1.299,2014,1.299,2022,1.367,2029,1.08,2034,1.367,2080,1.367,2108,1.237,2150,1.65,2158,1.581,2165,1.237,2255,1.08,2330,1.299,2333,1.299,2334,1.299,2344,1.625,2352,1.443,2368,1.625,2372,1.528,2407,1.625,2487,2.657,2617,2.675,2620,1.739,2676,2.535,2678,1.367,2687,1.625,2696,1.625,2809,1.625,2821,1.528,2822,1.443,2823,1.443,2858,1.443,3005,1.739,3019,1.739,3081,1.367,3089,3.172,3090,3.172,3091,3.172,3092,4.743,3093,3.892,3094,2.865,3095,1.875,3096,2.535,3097,3.187,3098,2.205,3099,3.417,3100,3.892,3101,1.528,3102,2.865,3103,1.875,3104,3.602,3105,3.172,3106,1.875,3107,1.875,3108,2.657,3109,2.657,3110,1.528,3111,1.528,3112,1.528,3113,1.528,3114,1.875,3115,2.833,3116,1.875,3117,2.865,3118,1.875,3119,1.875,3120,1.528,3121,1.528,3122,1.528,3123,1.528,3124,1.528,3125,2.335,3126,1.528,3127,1.528,3128,1.875,3129,1.625,3130,1.367,3131,1.875,3132,1.875,3133,1.875,3134,1.875,3135,1.625,3136,1.875,3137,1.875,3138,3.892,3139,2.335,3140,1.875,3141,1.875,3142,1.875,3143,1.875,3144,1.875,3145,2.865,3146,1.875,3147,1.875,3148,1.875,3149,1.528,3150,1.875,3151,1.875,3152,1.528,3153,2.865,3154,1.875,3155,1.875,3156,4.193,3157,1.875,3158,1.528,3159,1.875,3160,2.865,3161,1.528,3162,1.875,3163,1.875,3164,1.875,3165,1.875,3166,1.875,3167,2.865,3168,1.875,3169,1.875,3170,1.875,3171,1.875,3172,1.875,3173,1.875,3174,1.875,3175,1.875,3176,2.865,3177,2.335,3178,1.875,3179,1.875,3180,1.528,3181,1.875,3182,1.875,3183,1.875,3184,1.875,3185,1.875,3186,1.875,3187,1.875,3188,1.875,3189,2.865,3190,1.875,3191,1.875,3192,1.875,3193,1.875,3194,1.875,3195,1.875,3196,1.875,3197,1.875,3198,1.875,3199,1.875,3200,1.528,3201,2.865,3202,1.875,3203,3.477,3204,2.865,3205,4.193,3206,1.875,3207,2.865,3208,5.281,3209,1.875,3210,1.875,3211,1.875,3212,2.865,3213,3.892,3214,1.875,3215,2.865,3216,2.865,3217,1.875,3218,2.865,3219,1.875,3220,3.477,3221,3.477,3222,2.865,3223,1.528,3224,1.875,3225,1.875,3226,1.875,3227,1.875,3228,1.875,3229,1.875,3230,1.875,3231,1.875,3232,1.875,3233,1.875,3234,2.865,3235,2.865,3236,1.875,3237,2.865,3238,2.865,3239,1.875,3240,1.875,3241,1.875,3242,1.875,3243,1.875,3244,1.875,3245,2.865,3246,1.875,3247,4.421,3248,2.833,3249,3.892,3250,1.875,3251,2.865,3252,4.421,3253,1.875,3254,1.875,3255,1.875,3256,1.875,3257,1.875,3258,1.875,3259,1.875,3260,2.865,3261,1.875,3262,1.875,3263,1.875,3264,1.875,3265,1.875,3266,1.875,3267,1.875,3268,1.875,3269,1.875,3270,1.528,3271,1.875,3272,1.875,3273,3.477,3274,1.875,3275,1.875,3276,1.875,3277,1.875,3278,1.875,3279,1.875,3280,1.875,3281,1.875,3282,2.865,3283,1.875,3284,1.875,3285,1.875,3286,1.875,3287,1.875,3288,1.875,3289,1.528,3290,1.875,3291,1.875,3292,1.875,3293,1.875,3294,1.875,3295,1.875,3296,1.875,3297,1.875,3298,1.875,3299,2.865,3300,1.875,3301,1.875,3302,1.875,3303,1.875,3304,1.875,3305,1.875,3306,1.875,3307,1.875,3308,1.875,3309,1.875,3310,1.875,3311,1.875,3312,1.875,3313,1.875,3314,1.875,3315,1.875,3316,1.875,3317,1.875,3318,3.477,3319,1.875,3320,1.875,3321,1.875,3322,3.057,3323,1.875,3324,1.875,3325,1.875,3326,1.875,3327,1.875,3328,1.875,3329,1.875,3330,1.875,3331,1.875,3332,1.875,3333,1.875,3334,1.528,3335,1.875,3336,1.875,3337,1.528,3338,1.875,3339,4.193,3340,1.875,3341,1.875,3342,1.528,3343,1.875,3344,1.875,3345,1.875,3346,1.875,3347,1.875,3348,1.875,3349,1.875,3350,1.739,3351,1.875,3352,1.875,3353,1.875,3354,1.875,3355,1.875,3356,1.875,3357,1.875,3358,1.875,3359,1.875,3360,1.875,3361,1.875,3362,2.865,3363,4.743,3364,3.892,3365,2.865,3366,2.865,3367,2.865,3368,2.865,3369,1.875,3370,1.875,3371,1.875,3372,1.875,3373,1.875,3374,1.875,3375,2.865,3376,1.875,3377,1.875,3378,1.875,3379,1.875,3380,2.865,3381,1.875,3382,2.483,3383,1.875]],["title/interfaces/TimelineCombinedAggregations.html",[56,0.141,3099,2.274]],["body/interfaces/TimelineCombinedAggregations.html",[8,0.015,11,1.703,12,0.701,13,1.659,14,0.066,15,0.066,16,0.066,22,0.212,24,0.384,38,0.351,42,0.885,46,0.425,48,1.451,52,0.187,53,0.014,54,0.012,55,0.007,56,0.198,58,0.475,65,1.07,72,1.022,74,0.133,75,0.315,76,0.512,82,0.646,83,0.324,84,0.595,85,2.198,86,2.553,87,0.494,88,0.368,96,1.055,97,1.35,98,1.927,99,0.514,100,0.561,101,0.456,107,1.507,110,0.602,113,1.088,116,0.62,118,0.494,144,0.335,145,1.378,146,1.463,147,2.44,148,0.787,149,0.661,155,1.648,156,0.93,157,0.914,158,1.19,163,0.938,164,0.842,171,1.357,176,3.195,177,1.524,181,1.064,184,0.384,185,0.98,186,0.625,191,1.295,192,1.734,196,1.566,200,0.846,203,1.247,204,1.247,205,1.247,208,1.454,211,0.999,222,1.137,224,0.959,231,1.4,234,1.454,235,1.454,238,1.454,244,1.347,254,0.727,265,1.298,266,1.454,267,3.233,268,1.201,279,0.815,285,0.488,299,1.734,310,0.557,311,0.917,319,1.042,320,0.818,328,1.064,336,0.579,338,0.602,342,0.557,349,2.305,363,1.566,378,1.155,381,1.07,407,0.536,408,0.579,416,0.991,418,0.729,420,1.088,422,0.65,423,1.088,425,1.112,427,1.905,437,1.703,439,1.137,441,1.566,442,0.579,453,1.088,458,3.239,459,1.405,460,0.917,465,1.906,469,0.921,470,1.848,494,0.65,511,0.557,525,1.378,526,1.111,527,1.901,541,1.686,543,0.818,564,3.239,582,2.775,620,0.563,624,1.971,629,1.029,630,0.557,631,0.557,633,0.999,635,0.999,636,0.851,637,1.573,642,1.298,648,0.65,650,1.378,663,1.775,684,2.473,686,1.413,714,0.818,742,1.853,745,1.378,747,1.734,750,3.184,751,0.921,754,1.19,758,2.951,759,3.195,772,3.631,775,2.199,777,1.703,778,1.573,780,1.636,781,1.814,783,2.688,796,2.136,800,0.818,801,1.248,803,1.35,810,4.583,819,2.156,826,0.885,830,0.787,831,1.539,832,1.814,836,1.19,842,0.885,847,1.137,849,1.042,850,1.137,851,1.088,871,2.915,879,1.378,902,1.539,903,4.493,904,1.539,908,2.217,909,1.997,910,1.539,912,1.247,913,1.539,917,1.539,919,1.539,920,1.539,924,1.029,925,1.901,934,2.744,943,1.247,991,1.137,994,1.042,1010,1.539,1011,1.247,1014,1.19,1015,1.659,1016,1.309,1017,1.19,1021,1.659,1022,1.042,1027,1.59,1041,1.814,1042,1.539,1052,2.067,1062,1.19,1088,1.59,1090,2.668,1093,1.997,1095,1.247,1096,1.997,1101,1.088,1131,1.378,1144,1.637,1168,2.199,1176,1.137,1185,2.077,1235,1.19,1246,1.088,1302,1.454,1303,1.752,1310,1.454,1355,1.734,1358,3.043,1380,2.375,1383,1.309,1385,1.293,1407,2.547,1455,1.378,1459,0.787,1467,1.752,1468,1.752,1470,1.309,1489,1.247,1515,1.752,1582,2.672,1672,1.637,1681,1.539,1687,1.752,1700,2.101,1701,0.921,1773,2.672,1781,1.454,1839,1.454,2013,1.309,2014,1.309,2022,1.378,2029,1.088,2034,1.378,2080,1.378,2108,1.247,2150,1.659,2158,1.59,2165,1.247,2255,1.088,2330,1.309,2333,1.309,2334,1.309,2344,1.637,2352,1.454,2368,1.637,2372,1.539,2407,1.637,2487,2.672,2617,2.688,2620,1.752,2676,2.547,2678,1.378,2687,1.637,2696,1.637,2809,1.637,2821,1.539,2822,1.454,2823,1.454,2858,1.454,3005,1.752,3019,1.752,3081,1.378,3089,1.539,3090,1.539,3091,1.539,3092,4.754,3093,3.908,3094,2.882,3095,1.889,3096,2.547,3097,3.195,3098,2.217,3099,3.613,3100,4.612,3101,1.539,3102,2.882,3103,1.889,3104,3.613,3105,3.184,3106,1.889,3107,1.889,3108,2.672,3109,2.672,3110,1.539,3111,1.539,3112,1.539,3113,1.539,3114,1.889,3115,2.846,3116,1.889,3117,2.882,3118,1.889,3119,1.889,3120,1.539,3121,1.539,3122,1.539,3123,1.539,3124,1.539,3125,2.348,3126,1.539,3127,1.539,3128,1.889,3129,1.637,3130,1.378,3131,1.889,3132,1.889,3133,1.889,3134,1.889,3135,1.637,3136,1.889,3137,1.889,3138,3.908,3139,2.348,3140,1.889,3141,1.889,3142,1.889,3143,1.889,3144,1.889,3145,2.882,3146,1.889,3147,1.889,3148,1.889,3149,1.539,3150,1.889,3151,1.889,3152,1.539,3153,2.882,3154,1.889,3155,1.889,3156,4.207,3157,1.889,3158,1.539,3159,1.889,3160,2.882,3161,1.539,3162,1.889,3163,1.889,3164,1.889,3165,1.889,3166,1.889,3167,2.882,3168,1.889,3169,1.889,3170,1.889,3171,1.889,3172,1.889,3173,1.889,3174,1.889,3175,1.889,3176,2.882,3177,2.348,3178,1.889,3179,1.889,3180,1.539,3181,1.889,3182,1.889,3183,1.889,3184,1.889,3185,1.889,3186,1.889,3187,1.889,3188,1.889,3189,2.882,3190,1.889,3191,1.889,3192,1.889,3193,1.889,3194,1.889,3195,1.889,3196,1.889,3197,1.889,3198,1.889,3199,1.889,3200,1.539,3201,2.882,3202,1.889,3203,3.493,3204,2.882,3205,4.207,3206,1.889,3207,2.882,3208,5.289,3209,1.889,3210,1.889,3211,1.889,3212,2.882,3213,3.908,3214,1.889,3215,2.882,3216,2.882,3217,1.889,3218,2.882,3219,1.889,3220,3.493,3221,3.493,3222,2.882,3223,1.539,3224,1.889,3225,1.889,3226,1.889,3227,1.889,3228,1.889,3229,1.889,3230,1.889,3231,1.889,3232,1.889,3233,1.889,3234,2.882,3235,2.882,3236,1.889,3237,2.882,3238,2.882,3239,1.889,3240,1.889,3241,1.889,3242,1.889,3243,1.889,3244,1.889,3245,2.882,3246,1.889,3247,4.434,3248,2.846,3249,3.908,3250,1.889,3251,2.882,3252,4.434,3253,1.889,3254,1.889,3255,1.889,3256,1.889,3257,1.889,3258,1.889,3259,1.889,3260,2.882,3261,1.889,3262,1.889,3263,1.889,3264,1.889,3265,1.889,3266,1.889,3267,1.889,3268,1.889,3269,1.889,3270,1.539,3271,1.889,3272,1.889,3273,3.493,3274,1.889,3275,1.889,3276,1.889,3277,1.889,3278,1.889,3279,1.889,3280,1.889,3281,1.889,3282,2.882,3283,1.889,3284,1.889,3285,1.889,3286,1.889,3287,1.889,3288,1.889,3289,1.539,3290,1.889,3291,1.889,3292,1.889,3293,1.889,3294,1.889,3295,1.889,3296,1.889,3297,1.889,3298,1.889,3299,2.882,3300,1.889,3301,1.889,3302,1.889,3303,1.889,3304,1.889,3305,1.889,3306,1.889,3307,1.889,3308,1.889,3309,1.889,3310,1.889,3311,1.889,3312,1.889,3313,1.889,3314,1.889,3315,1.889,3316,1.889,3317,1.889,3318,3.493,3319,1.889,3320,1.889,3321,1.889,3322,3.068,3323,1.889,3324,1.889,3325,1.889,3326,1.889,3327,1.889,3328,1.889,3329,1.889,3330,1.889,3331,1.889,3332,1.889,3333,1.889,3334,1.539,3335,1.889,3336,1.889,3337,1.539,3338,1.889,3339,4.207,3340,1.889,3341,1.889,3342,1.539,3343,1.889,3344,1.889,3345,1.889,3346,1.889,3347,1.889,3348,1.889,3349,1.889,3350,1.752,3351,1.889,3352,1.889,3353,1.889,3354,1.889,3355,1.889,3356,1.889,3357,1.889,3358,1.889,3359,1.889,3360,1.889,3361,1.889,3362,2.882,3363,4.754,3364,3.908,3365,2.882,3366,2.882,3367,2.882,3368,2.882,3369,1.889,3370,1.889,3371,1.889,3372,1.889,3373,1.889,3374,1.889,3375,2.882,3376,1.889,3377,1.889,3378,1.889,3379,1.889,3380,2.882,3381,1.889,3382,2.497,3383,1.889]],["title/interfaces/TimelineDate.html",[56,0.141,3096,2.035]],["body/interfaces/TimelineDate.html",[8,0.015,11,2.213,12,0.671,14,0.063,15,0.063,16,0.063,22,0.167,24,0.368,34,0.645,46,0.492,52,0.154,53,0.013,54,0.007,55,0.007,56,0.172,58,0.454,74,0.195,75,0.305,82,0.696,83,0.238,84,0.451,87,0.473,88,0.352,116,0.832,117,0.646,133,0.724,134,1.39,140,0.724,144,0.173,149,0.539,156,0.832,157,0.871,159,1.551,164,0.942,169,0.997,170,0.671,171,1.13,181,0.492,184,0.368,187,1.735,191,0.925,192,2.297,195,1.39,200,0.886,211,0.956,220,0.881,222,1.087,230,0.997,231,1.116,244,1.074,252,1.472,254,0.767,268,1.168,271,1.252,279,0.838,285,0.646,299,1.087,309,1.304,311,1.082,319,1.874,331,0.881,344,1.725,363,1.116,388,0.957,392,0.671,407,0.518,424,1.087,439,1.087,452,1.472,459,1.357,460,0.575,465,1.362,469,0.881,484,1.04,493,1.675,494,0.621,511,0.532,526,0.697,541,1.819,543,1.653,563,2.784,579,2.269,620,0.449,623,0.881,624,0.846,625,1.725,629,0.995,630,0.532,631,0.532,633,1.473,635,1.797,636,1.53,637,0.814,642,0.814,643,1.472,648,0.621,653,1.087,663,1.719,672,0.997,673,1.252,681,0.917,684,2.575,686,1.531,700,0.846,701,1.536,720,0.881,740,0.956,742,0.645,750,2.893,751,0.881,754,1.138,758,3.046,759,1.929,762,1.087,781,1.753,796,2.493,800,0.782,801,1.206,803,1.932,819,2.275,828,1.603,841,1.566,843,1.472,871,1.252,909,1.929,923,1.192,924,1.214,925,1.837,934,1.797,956,1.675,963,2.269,967,2.269,968,2.269,970,1.472,971,1.472,972,1.472,973,1.472,974,1.472,975,2.269,977,4.372,978,1.472,979,3.819,980,2.269,983,3.11,991,1.087,994,0.997,1000,2.857,1002,1.472,1011,1.192,1014,1.138,1015,1.956,1016,1.252,1017,1.753,1021,1.603,1022,0.997,1024,1.472,1027,2.106,1032,1.472,1034,3.11,1035,1.087,1039,3.417,1040,1.317,1041,1.753,1061,1.675,1080,1.566,1084,3.11,1088,2.106,1089,1.929,1093,1.252,1096,1.929,1098,2.508,1099,1.472,1100,1.472,1101,2.374,1102,1.675,1116,3.11,1118,1.472,1119,2.768,1120,2.269,1121,1.472,1122,1.472,1124,1.472,1125,1.472,1126,1.472,1130,1.192,1131,1.317,1132,3.11,1134,1.675,1135,1.39,1136,1.675,1137,1.472,1138,1.472,1139,1.472,1140,1.472,1141,1.472,1149,1.675,1157,3.006,1160,1.675,1164,1.675,1165,1.566,1168,2.858,1172,2.269,1175,1.472,1176,1.087,1177,2.142,1178,1.472,1179,1.472,1180,2.269,1181,2.269,1182,2.269,1183,1.472,1184,1.472,1185,2.3,1186,1.472,1187,1.472,1210,1.472,1218,1.252,1235,1.138,1238,2.269,1239,2.944,1308,3.817,1342,1.725,1355,1.087,1358,2.242,1365,2.614,1369,2.142,1383,1.252,1385,0.598,1400,1.472,1437,1.317,1458,0.997,1470,1.252,1475,1.675,1479,1.807,1485,4.545,1615,1.087,1663,2.413,1733,1.566,1740,1.675,1780,2.413,1781,1.39,1792,2.784,1798,1.317,1806,1.39,1842,1.472,1880,1.252,1892,1.39,1925,1.472,1976,1.317,1978,2.269,2015,1.39,2029,1.603,2053,1.39,2104,2.582,2106,1.087,2107,1.472,2108,1.837,2150,1.04,2154,1.087,2158,0.997,2177,1.087,2180,0.997,2251,1.087,2255,1.04,2332,1.675,2361,1.675,2401,1.675,2459,2.784,2511,2.413,2615,1.566,2676,2.03,2678,1.317,2681,3.15,2683,2.784,2685,3.54,2686,2.582,2690,3.15,2697,1.675,2698,1.675,2699,1.675,2700,4.039,2703,1.675,2708,1.675,2709,1.675,2710,2.582,2711,1.675,2712,1.675,2713,3.54,2715,1.675,2717,1.675,2718,1.675,2719,1.675,2720,1.675,2721,1.675,2722,1.675,2723,1.675,2724,1.675,2725,1.675,2726,1.675,2727,3.823,2729,1.675,2754,1.675,2771,1.807,2777,1.675,2778,2.582,2779,1.675,2782,1.675,2783,1.675,2784,1.675,2786,1.675,2787,1.675,2788,3.54,2789,1.675,2790,1.675,2791,1.675,2792,1.675,2793,1.675,2794,1.675,2795,1.675,2796,1.675,2798,1.675,2800,1.675,2801,1.675,2802,1.675,2803,3.15,2804,2.582,2805,1.675,2819,3.15,2822,1.39,2823,1.39,2827,2.784,2828,1.807,2829,3.397,2830,1.807,2831,1.807,2834,1.807,2846,2.784,2848,1.807,2849,2.784,2854,2.784,2855,1.807,2856,4.123,2858,2.142,2864,1.807,3071,1.807,3081,1.317,3089,1.472,3090,1.472,3091,1.472,3096,2.477,3097,3.332,3101,2.269,3110,1.472,3111,1.472,3112,1.472,3113,1.472,3115,1.472,3120,1.472,3121,1.472,3122,1.472,3123,1.472,3124,1.472,3125,1.472,3126,1.472,3127,1.472,3130,2.477,3139,1.472,3149,3.11,3152,1.472,3158,1.472,3161,1.472,3177,1.472,3180,1.472,3200,2.269,3223,1.472,3248,1.472,3270,1.472,3289,1.472,3322,1.317,3334,1.472,3337,1.472,3342,2.768,3384,1.807,3385,3.038,3386,1.807,3387,2.784,3388,1.971,3389,3.707,3390,1.971,3391,1.971,3392,1.971,3393,1.971,3394,1.971,3395,1.971,3396,1.971,3397,3.038,3398,3.038,3399,3.038,3400,3.038,3401,1.971,3402,1.971,3403,1.971,3404,1.971,3405,1.971,3406,3.707,3407,1.971,3408,1.971,3409,5.452,3410,4.165,3411,1.971,3412,1.971,3413,1.971,3414,1.971,3415,1.971,3416,1.971,3417,1.971,3418,1.971,3419,1.971,3420,1.971,3421,1.971,3422,1.971,3423,1.971,3424,4.165,3425,1.971,3426,3.038,3427,3.038,3428,3.038,3429,1.971,3430,1.971,3431,3.038,3432,1.971,3433,1.971,3434,1.971,3435,1.971,3436,3.038,3437,4.953,3438,1.971,3439,3.038,3440,1.971,3441,3.038,3442,1.971,3443,1.971,3444,1.971,3445,3.038,3446,3.038,3447,3.038,3448,3.707,3449,1.971,3450,1.971,3451,1.971,3452,1.971,3453,1.971,3454,5.358,3455,3.038,3456,3.038,3457,1.971,3458,1.971,3459,1.971,3460,1.971,3461,1.971,3462,1.971,3463,3.038,3464,1.971,3465,1.971,3466,3.038,3467,1.971,3468,3.707,3469,1.971,3470,1.971,3471,1.971,3472,1.971,3473,1.971,3474,3.038,3475,1.971,3476,1.971,3477,4.165,3478,1.971,3479,1.971,3480,3.038,3481,3.038,3482,3.038,3483,1.971,3484,1.971,3485,1.971,3486,1.971,3487,3.707,3488,1.971,3489,1.971,3490,1.971,3491,1.971,3492,1.971,3493,1.971,3494,1.971,3495,1.971,3496,1.971,3497,1.971,3498,3.038,3499,1.971,3500,1.971,3501,1.971,3502,1.971,3503,1.971,3504,1.971,3505,1.971,3506,1.971,3507,3.038,3508,1.971,3509,1.971,3510,1.971,3511,1.971,3512,1.971,3513,1.971,3514,1.971,3515,4.165,3516,3.707,3517,1.971,3518,1.971,3519,1.971,3520,1.971,3521,1.971,3522,1.971,3523,1.971,3524,1.971,3525,1.971,3526,1.971,3527,3.038,3528,1.971,3529,1.971,3530,1.971,3531,3.707,3532,1.971,3533,1.971,3534,1.971,3535,3.038,3536,1.971,3537,1.971,3538,1.971,3539,1.971,3540,1.971,3541,1.971,3542,1.971,3543,1.971,3544,3.038,3545,1.971,3546,1.971,3547,1.971,3548,1.971,3549,1.971,3550,1.971,3551,1.971,3552,1.971,3553,1.971,3554,1.971,3555,1.971,3556,1.971,3557,1.971,3558,1.971,3559,1.971,3560,1.971,3561,1.971,3562,4.953,3563,4.953,3564,3.038,3565,3.038,3566,1.971,3567,1.971,3568,3.038,3569,3.038,3570,3.038,3571,3.038,3572,3.038,3573,3.038,3574,3.038,3575,3.038,3576,3.038,3577,1.971,3578,1.971,3579,3.707,3580,1.971,3581,1.971,3582,1.971,3583,1.971,3584,1.971,3585,1.971,3586,3.038,3587,1.971,3588,1.971,3589,1.971,3590,1.971,3591,1.971,3592,1.971,3593,1.971,3594,1.971,3595,1.971,3596,4.499,3597,1.971,3598,1.971,3599,3.038,3600,1.971,3601,1.971,3602,3.038,3603,1.971,3604,1.971,3605,1.971,3606,3.707,3607,1.971,3608,1.971,3609,1.971,3610,1.971,3611,1.971,3612,1.971,3613,1.971,3614,3.038,3615,1.971,3616,1.971,3617,1.971,3618,1.971,3619,1.971,3620,1.971,3621,1.971,3622,1.971,3623,1.971,3624,1.971,3625,1.971,3626,1.971,3627,1.971,3628,1.971,3629,1.971,3630,1.971,3631,3.038,3632,3.038,3633,3.707,3634,1.971,3635,3.038,3636,1.971,3637,1.971,3638,1.971,3639,3.707,3640,1.971,3641,1.971,3642,1.971,3643,1.971,3644,1.971,3645,1.971,3646,1.971,3647,3.038,3648,1.971,3649,1.971,3650,1.971,3651,1.971,3652,1.971,3653,1.971,3654,1.971,3655,1.971,3656,1.971,3657,3.038,3658,1.971,3659,1.971,3660,3.038,3661,1.971,3662,1.971,3663,1.971,3664,1.971,3665,1.971,3666,1.971,3667,1.971,3668,1.971,3669,1.971,3670,1.971,3671,3.038,3672,1.971,3673,1.971,3674,3.038,3675,1.971,3676,1.971,3677,1.971,3678,1.971,3679,1.971,3680,1.971,3681,3.707,3682,1.971,3683,3.707,3684,1.971,3685,3.038,3686,3.038,3687,1.971,3688,1.807,3689,1.971,3690,1.971,3691,1.807,3692,1.971,3693,1.971,3694,1.971,3695,1.971,3696,1.971,3697,1.971,3698,3.038,3699,4.953,3700,1.971,3701,1.971,3702,1.971,3703,1.807,3704,4.753,3705,3.707,3706,4.953,3707,1.971,3708,1.971,3709,3.038,3710,1.971,3711,1.971,3712,1.971,3713,1.971,3714,1.971,3715,3.038,3716,1.971]],["title/interfaces/TimelineEvent.html",[56,0.141,3097,1.933]],["body/interfaces/TimelineEvent.html",[8,0.015,11,2.202,12,0.662,14,0.062,15,0.062,16,0.062,22,0.166,24,0.363,34,0.637,46,0.491,52,0.153,53,0.013,54,0.007,55,0.007,56,0.17,58,0.448,74,0.193,75,0.302,76,0.829,82,0.693,83,0.343,84,0.524,87,0.466,88,0.347,116,0.829,117,0.302,133,0.714,134,1.371,140,0.714,144,0.171,149,0.536,156,0.829,157,0.869,159,1.544,164,0.947,169,0.983,170,0.662,171,1.125,181,0.485,184,0.363,187,1.731,191,0.917,192,2.281,195,1.371,200,0.885,211,0.943,220,0.869,222,1.073,230,0.983,231,1.104,244,1.063,252,1.452,254,0.762,268,1.49,271,1.235,279,0.835,285,0.642,299,1.073,309,1.291,311,1.072,319,1.858,331,0.869,344,1.71,363,1.104,388,0.947,392,0.662,398,1.735,407,0.513,424,1.073,439,1.073,452,1.452,459,1.343,460,0.567,465,1.87,469,0.869,484,1.026,493,1.653,494,0.613,511,0.525,526,1.462,541,1.961,543,1.641,563,2.756,579,2.245,620,0.444,623,0.869,624,1.775,625,1.71,629,0.984,630,0.525,631,0.525,633,1.458,635,1.782,636,1.517,637,0.803,642,0.803,643,1.452,648,0.613,653,1.073,663,1.715,672,0.983,673,1.235,681,0.905,684,2.567,686,1.525,700,0.835,701,1.52,720,0.869,740,0.943,742,0.637,750,2.885,751,0.869,754,1.122,758,3.038,759,1.909,762,1.073,781,1.735,796,2.484,800,0.772,801,1.193,803,1.92,819,2.261,828,1.587,841,1.545,843,1.452,871,1.235,909,1.909,923,1.176,924,1.203,925,1.818,934,1.782,956,1.653,963,2.245,967,2.245,968,2.245,970,1.452,971,1.452,972,1.452,973,1.452,974,1.452,975,2.245,977,4.362,978,1.452,979,3.802,980,2.245,983,3.088,991,1.073,994,0.983,1000,2.839,1002,1.452,1011,1.176,1014,1.122,1015,1.94,1016,1.235,1017,1.735,1021,1.587,1022,0.983,1024,1.452,1027,2.091,1032,1.452,1034,3.088,1035,1.073,1039,3.402,1040,1.3,1041,1.735,1061,1.653,1080,1.545,1084,3.088,1088,2.091,1089,1.909,1093,1.235,1096,1.909,1098,2.495,1099,1.452,1100,1.452,1101,2.36,1102,1.653,1116,3.088,1118,1.452,1119,2.745,1120,2.245,1121,1.452,1122,1.452,1124,1.452,1125,1.452,1126,1.452,1130,1.176,1131,1.3,1132,3.088,1134,1.653,1135,1.371,1136,1.653,1137,1.452,1138,1.452,1139,1.452,1140,1.452,1141,1.452,1149,1.653,1157,2.988,1160,1.653,1164,1.653,1165,1.545,1168,2.844,1172,2.245,1175,1.452,1176,1.073,1177,2.12,1178,1.452,1179,1.452,1180,2.245,1181,2.245,1182,2.245,1183,1.452,1184,1.452,1185,2.292,1186,1.452,1187,1.452,1210,1.452,1218,1.235,1235,1.122,1238,2.245,1239,2.92,1308,3.79,1342,1.71,1355,1.073,1358,2.223,1365,2.592,1369,2.12,1383,1.235,1385,0.59,1400,1.452,1437,1.3,1458,0.983,1470,1.235,1475,1.653,1479,1.782,1485,4.533,1615,1.073,1663,2.388,1733,1.545,1740,1.653,1780,2.388,1781,1.371,1792,2.756,1798,1.3,1806,1.371,1842,1.452,1880,1.235,1892,1.371,1925,1.452,1976,1.3,1978,2.245,2015,1.371,2029,1.587,2053,1.371,2104,2.555,2106,1.073,2107,1.452,2108,1.818,2150,1.026,2154,1.073,2158,0.983,2177,1.073,2180,0.983,2251,1.073,2255,1.026,2332,1.653,2361,1.653,2401,1.653,2459,2.756,2511,2.388,2615,1.545,2676,2.009,2678,1.3,2681,3.124,2683,2.756,2685,3.514,2686,2.555,2690,3.124,2697,1.653,2698,1.653,2699,1.653,2700,4.017,2703,1.653,2708,1.653,2709,1.653,2710,2.555,2711,1.653,2712,1.653,2713,3.514,2715,1.653,2717,1.653,2718,1.653,2719,1.653,2720,1.653,2721,1.653,2722,1.653,2723,1.653,2724,1.653,2725,1.653,2726,1.653,2727,3.8,2729,1.653,2754,1.653,2771,1.782,2777,1.653,2778,2.555,2779,1.653,2782,1.653,2783,1.653,2784,1.653,2786,1.653,2787,1.653,2788,3.514,2789,1.653,2790,1.653,2791,1.653,2792,1.653,2793,1.653,2794,1.653,2795,1.653,2796,1.653,2798,1.653,2800,1.653,2801,1.653,2802,1.653,2803,3.124,2804,2.555,2805,1.653,2819,3.124,2822,1.371,2823,1.371,2827,2.756,2828,1.782,2829,3.369,2830,1.782,2831,1.782,2834,1.782,2846,2.756,2848,1.782,2849,2.756,2854,2.756,2855,1.782,2856,4.098,2858,2.12,2864,1.782,3071,1.782,3081,1.3,3089,1.452,3090,1.452,3091,1.452,3096,2.009,3097,3.39,3101,2.245,3110,1.452,3111,1.452,3112,1.452,3113,1.452,3115,1.452,3120,1.452,3121,1.452,3122,1.452,3123,1.452,3124,1.452,3125,1.452,3126,1.452,3127,1.452,3130,2.456,3139,1.452,3149,3.088,3152,1.452,3158,1.452,3161,1.452,3177,1.452,3180,1.452,3200,2.245,3223,1.452,3248,1.452,3270,1.452,3289,1.452,3322,1.3,3334,1.452,3337,1.452,3342,2.745,3384,1.782,3385,3.007,3386,1.782,3387,2.756,3388,4.135,3389,3.675,3390,1.945,3391,1.945,3392,1.945,3393,1.945,3394,1.945,3395,1.945,3396,1.945,3397,3.007,3398,3.007,3399,3.007,3400,3.007,3401,1.945,3402,1.945,3403,1.945,3404,1.945,3405,1.945,3406,3.675,3407,1.945,3408,1.945,3409,5.434,3410,4.135,3411,1.945,3412,1.945,3413,1.945,3414,1.945,3415,1.945,3416,1.945,3417,1.945,3418,1.945,3419,1.945,3420,1.945,3421,1.945,3422,1.945,3423,1.945,3424,4.135,3425,1.945,3426,3.007,3427,3.007,3428,3.007,3429,1.945,3430,1.945,3431,3.007,3432,1.945,3433,1.945,3434,1.945,3435,1.945,3436,3.007,3437,4.929,3438,1.945,3439,3.007,3440,1.945,3441,3.007,3442,1.945,3443,1.945,3444,1.945,3445,3.007,3446,3.007,3447,3.007,3448,3.675,3449,1.945,3450,1.945,3451,1.945,3452,1.945,3453,1.945,3454,5.338,3455,3.007,3456,3.007,3457,1.945,3458,1.945,3459,1.945,3460,1.945,3461,1.945,3462,1.945,3463,3.007,3464,1.945,3465,1.945,3466,3.007,3467,1.945,3468,3.675,3469,1.945,3470,1.945,3471,1.945,3472,1.945,3473,1.945,3474,3.007,3475,1.945,3476,1.945,3477,4.135,3478,1.945,3479,1.945,3480,3.007,3481,3.007,3482,3.007,3483,1.945,3484,1.945,3485,1.945,3486,1.945,3487,3.675,3488,1.945,3489,1.945,3490,1.945,3491,1.945,3492,1.945,3493,1.945,3494,1.945,3495,1.945,3496,1.945,3497,1.945,3498,3.007,3499,1.945,3500,1.945,3501,1.945,3502,1.945,3503,1.945,3504,1.945,3505,1.945,3506,1.945,3507,3.007,3508,1.945,3509,1.945,3510,1.945,3511,1.945,3512,1.945,3513,1.945,3514,1.945,3515,4.135,3516,3.675,3517,1.945,3518,1.945,3519,1.945,3520,1.945,3521,1.945,3522,1.945,3523,1.945,3524,1.945,3525,1.945,3526,1.945,3527,3.007,3528,1.945,3529,1.945,3530,1.945,3531,3.675,3532,1.945,3533,1.945,3534,1.945,3535,3.007,3536,1.945,3537,1.945,3538,1.945,3539,1.945,3540,1.945,3541,1.945,3542,1.945,3543,1.945,3544,3.007,3545,1.945,3546,1.945,3547,1.945,3548,1.945,3549,1.945,3550,1.945,3551,1.945,3552,1.945,3553,1.945,3554,1.945,3555,1.945,3556,1.945,3557,1.945,3558,1.945,3559,1.945,3560,1.945,3561,1.945,3562,4.929,3563,4.929,3564,3.007,3565,3.007,3566,1.945,3567,1.945,3568,3.007,3569,3.007,3570,3.007,3571,3.007,3572,3.007,3573,3.007,3574,3.007,3575,3.007,3576,3.007,3577,1.945,3578,1.945,3579,3.675,3580,1.945,3581,1.945,3582,1.945,3583,1.945,3584,1.945,3585,1.945,3586,3.007,3587,1.945,3588,1.945,3589,1.945,3590,1.945,3591,1.945,3592,1.945,3593,1.945,3594,1.945,3595,1.945,3596,4.471,3597,1.945,3598,1.945,3599,3.007,3600,1.945,3601,1.945,3602,3.007,3603,1.945,3604,1.945,3605,1.945,3606,3.675,3607,1.945,3608,1.945,3609,1.945,3610,1.945,3611,1.945,3612,1.945,3613,1.945,3614,3.007,3615,1.945,3616,1.945,3617,1.945,3618,1.945,3619,1.945,3620,1.945,3621,1.945,3622,1.945,3623,1.945,3624,1.945,3625,1.945,3626,1.945,3627,1.945,3628,1.945,3629,1.945,3630,1.945,3631,3.007,3632,3.007,3633,3.675,3634,1.945,3635,3.007,3636,1.945,3637,1.945,3638,1.945,3639,3.675,3640,1.945,3641,1.945,3642,1.945,3643,1.945,3644,1.945,3645,1.945,3646,1.945,3647,3.007,3648,1.945,3649,1.945,3650,1.945,3651,1.945,3652,1.945,3653,1.945,3654,1.945,3655,1.945,3656,1.945,3657,3.007,3658,1.945,3659,1.945,3660,3.007,3661,1.945,3662,1.945,3663,1.945,3664,1.945,3665,1.945,3666,1.945,3667,1.945,3668,1.945,3669,1.945,3670,1.945,3671,3.007,3672,1.945,3673,1.945,3674,3.007,3675,1.945,3676,1.945,3677,1.945,3678,1.945,3679,1.945,3680,1.945,3681,3.675,3682,1.945,3683,3.675,3684,1.945,3685,3.007,3686,3.007,3687,1.945,3688,1.782,3689,1.945,3690,1.945,3691,1.782,3692,1.945,3693,1.945,3694,1.945,3695,1.945,3696,1.945,3697,1.945,3698,3.007,3699,4.929,3700,1.945,3701,1.945,3702,1.945,3703,1.782,3704,4.727,3705,3.675,3706,4.929,3707,1.945,3708,1.945,3709,3.007,3710,1.945,3711,1.945,3712,1.945,3713,1.945,3714,1.945,3715,3.007,3716,1.945]],["title/interfaces/TimelineEventAggregation.html",[56,0.141,3105,2.274]],["body/interfaces/TimelineEventAggregation.html",[8,0.015,11,1.701,12,0.7,13,1.657,14,0.066,15,0.066,16,0.066,22,0.212,24,0.384,38,0.351,42,0.883,46,0.425,48,1.449,52,0.186,53,0.014,54,0.012,55,0.007,56,0.197,58,0.474,65,1.068,72,1.021,74,0.132,75,0.315,76,0.693,82,0.645,83,0.334,84,0.601,85,2.208,86,2.551,87,0.493,88,0.367,96,1.054,97,1.348,98,1.924,99,0.513,100,0.56,101,0.455,107,1.506,110,0.6,113,1.086,116,0.62,118,0.493,144,0.334,145,1.375,146,1.46,147,2.438,148,0.785,149,0.66,155,1.646,156,0.93,157,0.914,158,1.187,163,0.794,164,0.841,171,1.356,176,2.704,177,1.522,181,1.063,184,0.384,185,0.979,186,0.624,191,1.294,192,1.731,196,1.564,200,0.846,203,1.244,204,1.244,205,1.244,208,1.451,211,0.997,222,1.134,224,0.957,231,1.398,234,1.451,235,1.451,238,1.451,244,1.345,254,0.726,265,1.295,266,1.451,267,3.23,268,1.199,279,0.815,285,0.487,299,1.731,310,0.555,311,0.916,319,1.04,320,0.816,328,1.063,336,0.577,338,0.6,342,0.555,349,2.302,363,1.564,378,1.153,381,1.068,398,1.811,407,0.535,408,0.577,416,0.989,418,0.727,420,1.086,422,0.648,423,1.086,425,1.111,427,1.903,437,1.701,439,1.134,441,1.564,442,0.577,453,1.086,458,3.235,459,1.403,460,0.916,465,1.904,469,0.919,470,1.845,494,0.648,511,0.555,525,1.375,526,1.11,527,1.898,541,1.904,543,0.816,564,3.235,582,2.773,620,0.563,624,2.226,629,1.028,630,0.555,631,0.555,633,0.997,635,0.997,636,0.849,637,1.571,642,1.295,648,0.648,650,1.375,663,1.775,684,2.472,686,1.411,714,0.816,742,1.852,745,1.375,747,1.731,750,3.184,751,0.919,754,1.187,758,2.949,759,3.193,772,3.292,775,2.196,777,1.701,778,1.571,780,1.634,781,1.811,783,2.684,796,2.134,800,0.816,801,1.246,803,1.348,810,4.582,819,2.153,826,0.883,830,0.785,831,1.536,832,1.811,836,1.187,842,0.883,847,1.134,849,1.04,850,1.134,851,1.086,871,2.912,879,1.375,902,1.536,903,4.492,904,1.536,908,2.214,909,1.993,910,1.536,912,1.244,913,1.536,917,1.536,919,1.536,920,1.536,924,1.028,925,1.898,934,2.627,943,1.244,991,1.134,994,1.04,1010,1.536,1011,1.244,1014,1.187,1015,1.657,1016,1.306,1017,1.187,1021,1.657,1022,1.04,1027,1.587,1041,1.811,1042,1.536,1052,2.065,1062,1.187,1088,1.587,1090,2.666,1093,1.993,1095,1.244,1096,1.993,1101,1.086,1131,1.375,1144,1.634,1168,2.196,1176,1.134,1185,2.075,1235,1.187,1246,1.086,1302,1.451,1303,1.748,1310,1.451,1355,1.731,1358,3.041,1380,2.374,1383,1.306,1385,1.292,1407,2.543,1455,1.375,1459,0.785,1467,1.748,1468,1.748,1470,1.306,1489,1.244,1515,1.748,1582,2.667,1672,1.634,1681,1.536,1687,1.748,1700,2.098,1701,0.919,1773,2.667,1781,1.451,1839,1.451,2013,1.306,2014,1.306,2022,1.375,2029,1.086,2034,1.375,2080,1.375,2108,1.244,2150,1.657,2158,1.587,2165,1.244,2255,1.086,2330,1.306,2333,1.306,2334,1.306,2344,1.634,2352,1.451,2368,1.634,2372,1.536,2407,1.634,2487,2.667,2617,2.684,2620,1.748,2676,2.543,2678,1.375,2687,1.634,2696,1.634,2809,1.634,2821,1.536,2822,1.451,2823,1.451,2858,1.451,3005,1.748,3019,1.748,3081,1.375,3089,1.536,3090,1.536,3091,1.536,3092,4.751,3093,3.903,3094,2.877,3095,1.885,3096,2.543,3097,3.193,3098,2.214,3099,3.425,3100,3.903,3101,1.536,3102,2.877,3103,1.885,3104,3.61,3105,3.425,3106,3.903,3107,3.903,3108,2.667,3109,2.667,3110,1.536,3111,1.536,3112,1.536,3113,1.536,3114,1.885,3115,2.842,3116,1.885,3117,2.877,3118,1.885,3119,1.885,3120,1.536,3121,1.536,3122,1.536,3123,1.536,3124,1.536,3125,2.344,3126,1.536,3127,1.536,3128,1.885,3129,1.634,3130,1.375,3131,1.885,3132,1.885,3133,1.885,3134,1.885,3135,1.634,3136,1.885,3137,1.885,3138,3.903,3139,2.344,3140,1.885,3141,1.885,3142,1.885,3143,1.885,3144,1.885,3145,2.877,3146,1.885,3147,1.885,3148,1.885,3149,1.536,3150,1.885,3151,1.885,3152,1.536,3153,2.877,3154,1.885,3155,1.885,3156,4.203,3157,1.885,3158,1.536,3159,1.885,3160,2.877,3161,1.536,3162,1.885,3163,1.885,3164,1.885,3165,1.885,3166,1.885,3167,2.877,3168,1.885,3169,1.885,3170,1.885,3171,1.885,3172,1.885,3173,1.885,3174,1.885,3175,1.885,3176,2.877,3177,2.344,3178,1.885,3179,1.885,3180,1.536,3181,1.885,3182,1.885,3183,1.885,3184,1.885,3185,1.885,3186,1.885,3187,1.885,3188,1.885,3189,2.877,3190,1.885,3191,1.885,3192,1.885,3193,1.885,3194,1.885,3195,1.885,3196,1.885,3197,1.885,3198,1.885,3199,1.885,3200,1.536,3201,2.877,3202,1.885,3203,3.488,3204,2.877,3205,4.203,3206,1.885,3207,2.877,3208,5.287,3209,1.885,3210,1.885,3211,1.885,3212,2.877,3213,3.903,3214,1.885,3215,2.877,3216,2.877,3217,1.885,3218,2.877,3219,1.885,3220,3.488,3221,3.488,3222,2.877,3223,1.536,3224,1.885,3225,1.885,3226,1.885,3227,1.885,3228,1.885,3229,1.885,3230,1.885,3231,1.885,3232,1.885,3233,1.885,3234,2.877,3235,2.877,3236,1.885,3237,2.877,3238,2.877,3239,1.885,3240,1.885,3241,1.885,3242,1.885,3243,1.885,3244,1.885,3245,2.877,3246,1.885,3247,4.43,3248,2.842,3249,3.903,3250,1.885,3251,2.877,3252,4.43,3253,1.885,3254,1.885,3255,1.885,3256,1.885,3257,1.885,3258,1.885,3259,1.885,3260,2.877,3261,1.885,3262,1.885,3263,1.885,3264,1.885,3265,1.885,3266,1.885,3267,1.885,3268,1.885,3269,1.885,3270,1.536,3271,1.885,3272,1.885,3273,3.488,3274,1.885,3275,1.885,3276,1.885,3277,1.885,3278,1.885,3279,1.885,3280,1.885,3281,1.885,3282,2.877,3283,1.885,3284,1.885,3285,1.885,3286,1.885,3287,1.885,3288,1.885,3289,1.536,3290,1.885,3291,1.885,3292,1.885,3293,1.885,3294,1.885,3295,1.885,3296,1.885,3297,1.885,3298,1.885,3299,2.877,3300,1.885,3301,1.885,3302,1.885,3303,1.885,3304,1.885,3305,1.885,3306,1.885,3307,1.885,3308,1.885,3309,1.885,3310,1.885,3311,1.885,3312,1.885,3313,1.885,3314,1.885,3315,1.885,3316,1.885,3317,1.885,3318,3.488,3319,1.885,3320,1.885,3321,1.885,3322,3.065,3323,1.885,3324,1.885,3325,1.885,3326,1.885,3327,1.885,3328,1.885,3329,1.885,3330,1.885,3331,1.885,3332,1.885,3333,1.885,3334,1.536,3335,1.885,3336,1.885,3337,1.536,3338,1.885,3339,4.203,3340,1.885,3341,1.885,3342,1.536,3343,1.885,3344,1.885,3345,1.885,3346,1.885,3347,1.885,3348,1.885,3349,1.885,3350,1.748,3351,1.885,3352,1.885,3353,1.885,3354,1.885,3355,1.885,3356,1.885,3357,1.885,3358,1.885,3359,1.885,3360,1.885,3361,1.885,3362,2.877,3363,4.751,3364,3.903,3365,2.877,3366,2.877,3367,2.877,3368,2.877,3369,1.885,3370,1.885,3371,1.885,3372,1.885,3373,1.885,3374,1.885,3375,2.877,3376,1.885,3377,1.885,3378,1.885,3379,1.885,3380,2.877,3381,1.885,3382,2.493,3383,1.885]],["title/interfaces/TimelineEventType.html",[56,0.141,3098,2.147]],["body/interfaces/TimelineEventType.html",[8,0.015,14,0.148,15,0.148,16,0.148,22,0.202,24,0.863,46,0.406,52,0.202,53,0.031,54,0.013,55,0.013,56,0.214,58,1.065,74,0.298,75,0.546,76,0.886,83,0.385,84,0.581,144,0.536,158,2.669,159,1.402,164,0.718,398,3.143,541,1.699,580,2.441,620,0.805,623,2.066,624,2.617,630,1.249,631,1.249,637,1.909,663,1.802,684,2.152,699,2.55,741,2.152,742,1.514,796,2.152,819,2.753,954,4.238,960,3.93,1157,3.09,1233,4.238,1235,3.34,1236,4.625,1239,3.673,1302,3.261,1312,4.238,1321,4.625,1455,3.09,2615,3.673,3098,4.082,3129,3.673,3130,3.639,3135,3.673,3322,3.639,3382,4.326,3717,4.625,3718,4.625,3719,5.142,3720,5.142,3721,5.142,3722,5.142,3723,5.142,3724,5.142,3725,5.142,3726,5.142]],["title/components/TimelineLegendComponent.html",[620,0.45,741,1.417]],["body/components/TimelineLegendComponent.html",[7,1.903,8,0.015,9,1.826,10,1.826,14,0.172,15,0.125,16,0.125,17,1.753,22,0.183,24,0.732,31,1.903,46,0.497,48,1.98,52,0.183,53,0.027,54,0.013,55,0.012,56,0.182,66,1.441,74,0.252,83,0.382,84,0.394,89,0.669,90,0.732,117,0.765,144,0.522,158,2.844,159,1.634,163,0.919,164,0.765,392,1.98,398,2.264,541,1.979,580,2.843,620,0.796,621,1.903,622,2.601,623,2.202,624,2.426,625,1.826,626,2.264,630,1.736,631,1.734,637,2.223,654,2.718,663,1.734,684,2.507,699,3.116,700,2.116,701,2.492,702,2.264,703,3.261,704,2.264,708,2.844,709,2.844,710,1.753,711,2.264,712,1.984,713,2.844,714,1.557,715,3.261,716,1.826,717,1.826,718,1.984,719,1.903,720,1.753,721,1.903,722,2.264,723,2.264,724,1.826,725,1.494,726,3.109,727,2.264,728,1.984,729,2.071,730,1.903,731,2.264,732,1.903,733,2.492,734,2.264,735,1.903,736,1.903,737,2.264,738,1.753,739,1.903,740,1.903,741,2.629,742,1.764,743,2.264,744,2.264,796,2.507,819,2.724,954,4.937,960,4.578,1157,3.6,1233,4.937,1235,3.55,1236,5.387,1239,4.279,1302,2.767,1312,4.937,1321,5.387,1402,2.93,1455,3.6,2615,4.279,3098,3.799,3129,4.279,3130,3.293,3135,3.117,3322,3.97,3382,4.719,3717,5.941,3718,3.924,3719,5.989,3720,5.989,3721,5.989,3722,5.989,3723,5.989,3724,5.989,3725,5.989,3726,5.989,3727,5.029,3728,5.029,3729,5.029,3730,5.029,3731,5.029]],["title/interfaces/TimelineRecords.html",[56,0.141,3104,2.274]],["body/interfaces/TimelineRecords.html",[8,0.015,11,1.7,12,0.699,13,1.655,14,0.066,15,0.066,16,0.066,22,0.212,24,0.383,38,0.35,42,0.882,46,0.425,48,1.448,52,0.186,53,0.014,54,0.012,55,0.007,56,0.197,58,0.473,65,1.067,72,1.159,74,0.132,75,0.315,76,0.787,82,0.645,83,0.342,84,0.601,85,2.197,86,2.55,87,0.493,88,0.367,96,1.054,97,1.347,98,1.923,99,0.513,100,0.56,101,0.454,107,1.505,110,0.6,113,1.085,116,0.619,118,0.493,144,0.334,145,1.373,146,1.459,147,2.437,148,0.785,149,0.66,155,1.646,156,0.929,157,0.913,158,1.186,163,0.794,164,0.841,171,1.356,176,2.703,177,1.521,181,1.062,184,0.383,185,0.979,186,0.623,191,1.293,192,1.73,196,1.564,200,0.846,203,1.243,204,1.243,205,1.243,208,1.449,211,0.996,222,1.133,224,0.956,231,1.397,234,1.449,235,1.449,238,1.449,244,1.345,254,0.726,265,1.295,266,1.449,267,3.229,268,1.523,279,0.814,285,0.487,299,1.73,310,0.555,311,0.915,319,1.039,320,0.816,328,1.062,336,0.577,338,0.6,342,0.555,349,2.301,363,1.564,378,1.152,381,1.067,398,1.81,407,0.535,408,0.577,416,0.988,418,0.726,420,1.085,422,0.648,423,1.085,425,1.41,427,1.902,437,1.7,439,1.133,441,1.564,442,0.577,453,1.085,458,3.233,459,1.401,460,0.915,465,1.904,469,0.918,470,1.844,494,0.648,511,0.555,525,1.373,526,1.109,527,1.897,541,1.904,543,0.816,564,3.233,582,2.772,620,0.562,624,2.225,629,1.027,630,0.555,631,0.555,633,0.996,635,0.996,636,0.848,637,1.57,642,1.295,648,0.648,650,1.373,663,1.774,684,2.471,686,1.411,714,0.816,742,1.852,745,1.373,747,1.73,750,3.184,751,0.918,754,1.186,758,2.949,759,3.192,772,3.291,775,2.195,777,1.7,778,1.57,780,1.633,781,1.81,783,2.683,796,2.133,800,0.816,801,1.245,803,1.347,810,4.581,819,2.152,826,0.882,830,0.785,831,1.535,832,1.81,836,1.186,842,0.882,847,1.133,849,1.039,850,1.133,851,1.085,871,2.911,879,1.373,902,1.535,903,4.491,904,1.535,908,2.212,909,1.992,910,1.535,912,1.243,913,1.535,917,1.535,919,1.535,920,1.535,924,1.027,925,1.897,934,2.627,943,1.243,991,1.133,994,1.039,1010,1.535,1011,1.243,1014,1.186,1015,1.655,1016,1.305,1017,1.186,1021,1.655,1022,1.039,1027,1.586,1041,1.81,1042,1.535,1052,2.064,1062,1.186,1088,1.586,1090,2.665,1093,1.992,1095,1.243,1096,1.992,1101,1.085,1131,1.373,1144,1.632,1168,2.195,1176,1.133,1185,2.075,1235,1.186,1246,1.085,1302,1.449,1303,1.746,1310,1.449,1355,1.73,1358,3.04,1380,2.373,1383,1.305,1385,1.291,1407,2.542,1455,1.373,1459,0.785,1467,1.746,1468,1.746,1470,1.305,1489,1.243,1515,1.746,1582,2.666,1672,1.632,1681,1.535,1687,1.746,1700,2.096,1701,0.918,1773,2.666,1781,1.449,1839,1.449,2013,1.305,2014,1.305,2022,1.373,2029,1.085,2034,1.373,2080,1.373,2108,1.243,2150,1.655,2158,1.586,2165,1.243,2255,1.085,2330,1.305,2333,1.305,2334,1.305,2344,1.632,2352,1.449,2368,1.632,2372,1.535,2407,1.632,2487,2.666,2617,2.683,2620,1.746,2676,2.542,2678,1.373,2687,1.632,2696,1.632,2809,1.632,2821,1.535,2822,1.449,2823,1.449,2858,1.449,3005,1.746,3019,1.746,3081,1.373,3089,1.535,3090,1.535,3091,1.535,3092,4.75,3093,3.901,3094,2.875,3095,1.883,3096,2.542,3097,3.192,3098,2.212,3099,3.423,3100,3.901,3101,1.535,3102,2.875,3103,1.883,3104,3.753,3105,3.179,3106,1.883,3107,1.883,3108,2.666,3109,2.666,3110,1.535,3111,1.535,3112,1.535,3113,1.535,3114,1.883,3115,2.841,3116,1.883,3117,2.875,3118,1.883,3119,1.883,3120,1.535,3121,1.535,3122,1.535,3123,1.535,3124,1.535,3125,2.342,3126,1.535,3127,1.535,3128,1.883,3129,1.632,3130,1.373,3131,1.883,3132,1.883,3133,1.883,3134,1.883,3135,1.632,3136,1.883,3137,1.883,3138,3.901,3139,2.342,3140,1.883,3141,1.883,3142,1.883,3143,1.883,3144,1.883,3145,2.875,3146,1.883,3147,1.883,3148,1.883,3149,1.535,3150,1.883,3151,1.883,3152,1.535,3153,2.875,3154,1.883,3155,1.883,3156,4.201,3157,1.883,3158,1.535,3159,1.883,3160,2.875,3161,1.535,3162,1.883,3163,1.883,3164,1.883,3165,1.883,3166,1.883,3167,2.875,3168,1.883,3169,1.883,3170,1.883,3171,1.883,3172,1.883,3173,1.883,3174,1.883,3175,1.883,3176,2.875,3177,2.342,3178,1.883,3179,1.883,3180,1.535,3181,1.883,3182,1.883,3183,1.883,3184,1.883,3185,1.883,3186,1.883,3187,1.883,3188,1.883,3189,2.875,3190,1.883,3191,1.883,3192,1.883,3193,1.883,3194,1.883,3195,1.883,3196,1.883,3197,1.883,3198,1.883,3199,1.883,3200,1.535,3201,2.875,3202,1.883,3203,3.486,3204,2.875,3205,4.201,3206,1.883,3207,2.875,3208,5.286,3209,1.883,3210,1.883,3211,1.883,3212,2.875,3213,3.901,3214,1.883,3215,2.875,3216,2.875,3217,1.883,3218,2.875,3219,1.883,3220,3.486,3221,3.486,3222,2.875,3223,1.535,3224,1.883,3225,1.883,3226,1.883,3227,1.883,3228,1.883,3229,1.883,3230,1.883,3231,1.883,3232,1.883,3233,1.883,3234,2.875,3235,2.875,3236,1.883,3237,2.875,3238,2.875,3239,1.883,3240,1.883,3241,1.883,3242,1.883,3243,1.883,3244,1.883,3245,2.875,3246,1.883,3247,4.429,3248,2.841,3249,3.901,3250,1.883,3251,2.875,3252,4.429,3253,1.883,3254,1.883,3255,1.883,3256,1.883,3257,1.883,3258,1.883,3259,1.883,3260,2.875,3261,1.883,3262,1.883,3263,1.883,3264,1.883,3265,1.883,3266,1.883,3267,1.883,3268,1.883,3269,1.883,3270,1.535,3271,1.883,3272,1.883,3273,3.486,3274,1.883,3275,1.883,3276,1.883,3277,1.883,3278,1.883,3279,1.883,3280,1.883,3281,1.883,3282,2.875,3283,1.883,3284,1.883,3285,1.883,3286,1.883,3287,1.883,3288,1.883,3289,1.535,3290,1.883,3291,1.883,3292,1.883,3293,1.883,3294,1.883,3295,1.883,3296,1.883,3297,1.883,3298,1.883,3299,2.875,3300,1.883,3301,1.883,3302,1.883,3303,1.883,3304,1.883,3305,1.883,3306,1.883,3307,1.883,3308,1.883,3309,1.883,3310,1.883,3311,1.883,3312,1.883,3313,1.883,3314,1.883,3315,1.883,3316,1.883,3317,1.883,3318,3.486,3319,1.883,3320,1.883,3321,1.883,3322,3.063,3323,1.883,3324,1.883,3325,1.883,3326,1.883,3327,1.883,3328,1.883,3329,1.883,3330,1.883,3331,1.883,3332,1.883,3333,1.883,3334,1.535,3335,1.883,3336,1.883,3337,1.535,3338,1.883,3339,4.201,3340,1.883,3341,1.883,3342,1.535,3343,1.883,3344,1.883,3345,1.883,3346,1.883,3347,1.883,3348,1.883,3349,1.883,3350,1.746,3351,1.883,3352,1.883,3353,1.883,3354,1.883,3355,1.883,3356,1.883,3357,1.883,3358,1.883,3359,1.883,3360,1.883,3361,1.883,3362,2.875,3363,4.75,3364,3.901,3365,2.875,3366,2.875,3367,2.875,3368,2.875,3369,1.883,3370,1.883,3371,1.883,3372,1.883,3373,1.883,3374,1.883,3375,2.875,3376,1.883,3377,1.883,3378,1.883,3379,1.883,3380,2.875,3381,1.883,3382,2.491,3383,1.883]],["title/interfaces/TimelineSeries.html",[56,0.141,819,1.539]],["body/interfaces/TimelineSeries.html",[8,0.015,11,2.204,12,0.663,14,0.062,15,0.062,16,0.062,22,0.166,24,0.363,34,0.638,46,0.491,52,0.154,53,0.013,54,0.007,55,0.007,56,0.171,58,0.449,74,0.194,75,0.302,76,0.77,82,0.764,83,0.35,84,0.495,87,0.467,88,0.348,116,0.829,117,0.302,133,0.716,134,1.374,140,0.716,144,0.364,149,0.536,156,0.829,157,0.869,159,1.545,164,0.934,169,0.985,170,0.663,171,1.126,181,0.486,184,0.363,187,1.731,191,0.918,192,2.283,195,1.374,200,0.885,211,0.945,220,0.871,222,1.075,230,0.985,231,1.106,244,1.065,252,1.455,254,0.763,268,1.16,271,1.238,279,0.836,285,0.643,299,1.075,309,1.293,311,1.074,319,1.861,331,0.871,344,1.712,363,1.106,388,0.949,392,0.663,398,2.389,407,0.513,424,1.075,439,1.075,452,1.455,459,1.346,460,0.569,465,1.352,469,0.871,484,1.029,493,1.656,494,0.614,511,0.526,526,0.689,541,1.812,543,1.643,563,2.76,579,2.249,620,0.445,623,0.871,624,0.837,625,1.712,629,0.986,630,0.526,631,0.526,633,1.46,635,1.784,636,1.519,637,0.804,642,0.804,643,1.455,648,0.614,653,1.075,663,1.716,672,0.985,673,1.238,681,0.907,684,2.568,686,1.526,700,0.837,701,1.523,720,0.871,740,0.945,742,0.638,750,2.701,751,0.871,754,1.125,758,3.039,759,1.912,762,1.075,781,1.738,796,2.485,800,0.773,801,1.195,803,1.921,819,2.392,828,1.589,841,1.548,843,1.455,871,1.238,909,2.842,923,1.179,924,1.205,925,2.707,934,1.784,956,1.656,963,2.249,967,2.249,968,2.249,970,1.455,971,1.455,972,1.455,973,1.455,974,1.455,975,2.249,977,4.364,978,1.455,979,3.805,980,2.249,983,3.092,991,1.075,994,0.985,1000,2.842,1002,1.455,1011,1.179,1014,1.125,1015,1.942,1016,1.238,1017,1.738,1021,1.589,1022,0.985,1024,1.455,1027,2.093,1032,1.455,1034,3.092,1035,1.075,1039,3.405,1040,1.302,1041,1.738,1061,1.656,1080,1.548,1084,3.092,1088,2.093,1089,1.912,1093,1.238,1096,1.912,1098,2.497,1099,1.455,1100,1.455,1101,2.362,1102,1.656,1116,3.092,1118,1.455,1119,2.748,1120,2.249,1121,1.455,1122,1.455,1124,1.455,1125,1.455,1126,1.455,1130,1.179,1131,1.302,1132,3.092,1134,1.656,1135,1.374,1136,1.656,1137,1.455,1138,1.455,1139,1.455,1140,1.455,1141,1.455,1149,1.656,1157,2.991,1160,1.656,1164,1.656,1165,1.548,1168,2.846,1172,2.249,1175,1.455,1176,1.075,1177,2.124,1178,1.455,1179,1.455,1180,2.249,1181,2.249,1182,2.249,1183,1.455,1184,1.455,1185,2.293,1186,1.455,1187,1.455,1210,1.455,1218,1.238,1235,1.125,1238,2.249,1239,2.923,1308,3.794,1342,1.712,1355,1.075,1358,2.226,1365,2.595,1369,2.124,1383,1.238,1385,0.591,1400,1.455,1437,1.302,1458,0.985,1470,1.238,1475,1.656,1479,1.786,1485,4.535,1615,1.075,1663,2.392,1733,1.548,1740,1.656,1780,2.392,1781,1.374,1792,2.76,1798,1.302,1806,1.374,1842,1.455,1880,1.238,1892,1.374,1925,1.455,1976,1.302,1978,2.249,2015,1.374,2029,1.589,2053,1.374,2104,2.559,2106,1.075,2107,1.455,2108,1.821,2150,1.029,2154,1.075,2158,0.985,2177,1.075,2180,0.985,2251,1.075,2255,1.029,2332,1.656,2361,1.656,2401,1.656,2459,2.76,2511,2.392,2615,1.548,2676,2.012,2678,1.302,2681,3.128,2683,2.76,2685,3.518,2686,2.559,2690,3.128,2697,1.656,2698,1.656,2699,1.656,2700,4.021,2703,1.656,2708,1.656,2709,1.656,2710,2.559,2711,1.656,2712,1.656,2713,3.518,2715,1.656,2717,1.656,2718,1.656,2719,1.656,2720,1.656,2721,1.656,2722,1.656,2723,1.656,2724,1.656,2725,1.656,2726,1.656,2727,3.803,2729,1.656,2754,1.656,2771,1.786,2777,1.656,2778,2.559,2779,1.656,2782,1.656,2783,1.656,2784,1.656,2786,1.656,2787,1.656,2788,3.518,2789,1.656,2790,1.656,2791,1.656,2792,1.656,2793,1.656,2794,1.656,2795,1.656,2796,1.656,2798,1.656,2800,1.656,2801,1.656,2802,1.656,2803,3.128,2804,2.559,2805,1.656,2819,3.128,2822,1.374,2823,1.374,2827,2.76,2828,1.786,2829,3.373,2830,1.786,2831,1.786,2834,1.786,2846,2.76,2848,1.786,2849,2.76,2854,2.76,2855,1.786,2856,4.102,2858,2.124,2864,1.786,3071,1.786,3081,1.302,3089,3.092,3090,3.092,3091,3.092,3096,2.767,3097,3.32,3101,2.249,3110,1.455,3111,1.455,3112,1.455,3113,1.455,3115,1.455,3120,1.455,3121,1.455,3122,1.455,3123,1.455,3124,1.455,3125,1.455,3126,1.455,3127,1.455,3130,2.459,3139,1.455,3149,3.092,3152,1.455,3158,1.455,3161,1.455,3177,1.455,3180,1.455,3200,2.249,3223,1.455,3248,1.455,3270,1.455,3289,1.455,3322,1.302,3334,1.455,3337,1.455,3342,2.748,3384,1.786,3385,3.011,3386,1.786,3387,2.76,3388,1.949,3389,3.68,3390,1.949,3391,1.949,3392,1.949,3393,1.949,3394,1.949,3395,1.949,3396,1.949,3397,3.011,3398,3.011,3399,3.011,3400,3.011,3401,1.949,3402,1.949,3403,1.949,3404,1.949,3405,1.949,3406,3.68,3407,1.949,3408,1.949,3409,5.437,3410,4.14,3411,1.949,3412,1.949,3413,1.949,3414,1.949,3415,1.949,3416,1.949,3417,1.949,3418,1.949,3419,1.949,3420,1.949,3421,1.949,3422,1.949,3423,1.949,3424,4.14,3425,1.949,3426,3.011,3427,3.011,3428,3.011,3429,1.949,3430,1.949,3431,3.011,3432,1.949,3433,1.949,3434,1.949,3435,1.949,3436,3.011,3437,4.932,3438,1.949,3439,3.011,3440,1.949,3441,3.011,3442,1.949,3443,1.949,3444,1.949,3445,3.011,3446,3.011,3447,3.011,3448,3.68,3449,1.949,3450,1.949,3451,1.949,3452,1.949,3453,1.949,3454,5.341,3455,3.011,3456,3.011,3457,1.949,3458,1.949,3459,1.949,3460,1.949,3461,1.949,3462,1.949,3463,3.011,3464,1.949,3465,1.949,3466,3.011,3467,1.949,3468,3.68,3469,1.949,3470,1.949,3471,1.949,3472,1.949,3473,1.949,3474,3.011,3475,1.949,3476,1.949,3477,4.14,3478,1.949,3479,1.949,3480,3.011,3481,3.011,3482,3.011,3483,1.949,3484,1.949,3485,1.949,3486,1.949,3487,3.68,3488,1.949,3489,1.949,3490,1.949,3491,1.949,3492,1.949,3493,1.949,3494,1.949,3495,1.949,3496,1.949,3497,1.949,3498,3.011,3499,1.949,3500,1.949,3501,1.949,3502,1.949,3503,1.949,3504,1.949,3505,1.949,3506,1.949,3507,3.011,3508,1.949,3509,1.949,3510,1.949,3511,1.949,3512,1.949,3513,1.949,3514,1.949,3515,4.14,3516,3.68,3517,1.949,3518,1.949,3519,1.949,3520,1.949,3521,1.949,3522,1.949,3523,1.949,3524,1.949,3525,1.949,3526,1.949,3527,3.011,3528,1.949,3529,1.949,3530,1.949,3531,3.68,3532,1.949,3533,1.949,3534,1.949,3535,3.011,3536,1.949,3537,1.949,3538,1.949,3539,1.949,3540,1.949,3541,1.949,3542,1.949,3543,1.949,3544,3.011,3545,1.949,3546,1.949,3547,1.949,3548,1.949,3549,1.949,3550,1.949,3551,1.949,3552,1.949,3553,1.949,3554,1.949,3555,1.949,3556,1.949,3557,1.949,3558,1.949,3559,1.949,3560,1.949,3561,1.949,3562,4.932,3563,4.932,3564,3.011,3565,3.011,3566,1.949,3567,1.949,3568,3.011,3569,3.011,3570,3.011,3571,3.011,3572,3.011,3573,3.011,3574,3.011,3575,3.011,3576,3.011,3577,1.949,3578,1.949,3579,3.68,3580,1.949,3581,1.949,3582,1.949,3583,1.949,3584,1.949,3585,1.949,3586,3.011,3587,1.949,3588,1.949,3589,1.949,3590,1.949,3591,1.949,3592,1.949,3593,1.949,3594,1.949,3595,1.949,3596,4.476,3597,1.949,3598,1.949,3599,3.011,3600,1.949,3601,1.949,3602,3.011,3603,1.949,3604,1.949,3605,1.949,3606,3.68,3607,1.949,3608,1.949,3609,1.949,3610,1.949,3611,1.949,3612,1.949,3613,1.949,3614,3.011,3615,1.949,3616,1.949,3617,1.949,3618,1.949,3619,1.949,3620,1.949,3621,1.949,3622,1.949,3623,1.949,3624,1.949,3625,1.949,3626,1.949,3627,1.949,3628,1.949,3629,1.949,3630,1.949,3631,3.011,3632,3.011,3633,3.68,3634,1.949,3635,3.011,3636,1.949,3637,1.949,3638,1.949,3639,3.68,3640,1.949,3641,1.949,3642,1.949,3643,1.949,3644,1.949,3645,1.949,3646,1.949,3647,3.011,3648,1.949,3649,1.949,3650,1.949,3651,1.949,3652,1.949,3653,1.949,3654,1.949,3655,1.949,3656,1.949,3657,3.011,3658,1.949,3659,1.949,3660,3.011,3661,1.949,3662,1.949,3663,1.949,3664,1.949,3665,1.949,3666,1.949,3667,1.949,3668,1.949,3669,1.949,3670,1.949,3671,3.011,3672,1.949,3673,1.949,3674,3.011,3675,1.949,3676,1.949,3677,1.949,3678,1.949,3679,1.949,3680,1.949,3681,3.68,3682,1.949,3683,3.68,3684,1.949,3685,3.011,3686,3.011,3687,1.949,3688,1.786,3689,1.949,3690,1.949,3691,1.786,3692,1.949,3693,1.949,3694,1.949,3695,1.949,3696,1.949,3697,1.949,3698,3.011,3699,4.932,3700,1.949,3701,1.949,3702,1.949,3703,1.786,3704,4.731,3705,3.68,3706,4.932,3707,1.949,3708,1.949,3709,3.011,3710,1.949,3711,1.949,3712,1.949,3713,1.949,3714,1.949,3715,3.011,3716,1.949]],["title/interfaces/VisEvent.html",[56,0.141,3732,3.045]],["body/interfaces/VisEvent.html",[8,0.015,11,1.213,14,0.123,15,0.087,16,0.087,22,0.223,24,0.506,29,1.914,34,0.889,38,0.463,42,1.165,46,0.483,48,1.31,52,0.166,53,0.018,54,0.013,55,0.009,56,0.178,58,0.625,61,1.213,63,2.573,74,0.175,75,0.449,81,2.706,82,0.541,83,0.331,84,0.536,87,0.651,88,0.484,89,1.03,90,1.112,92,1.594,93,1.414,94,1.673,95,1.12,96,1.202,99,0.677,100,0.687,101,0.6,104,1.31,107,1.721,110,0.792,116,0.942,117,0.421,124,1.497,132,1.813,140,1.414,142,1.731,143,2.179,144,0.393,145,1.813,146,1.791,149,0.732,150,1.942,157,0.812,158,1.566,162,2.265,163,0.834,164,0.798,167,1.372,170,0.923,171,0.989,175,1.641,180,2.306,182,1.12,184,0.506,185,1.07,186,1.167,187,1.476,192,2.123,193,1.817,196,0.997,200,0.823,211,1.316,230,1.372,231,1.643,244,0.959,254,0.656,279,0.401,285,0.598,291,1.414,296,1.914,297,1.589,308,1.361,309,1.921,310,1.208,311,0.792,328,1.444,329,1.432,336,1.256,337,1.791,338,1.306,342,1.315,344,1.263,353,1.31,360,3.058,363,1.889,378,0.997,388,1.213,452,2.027,456,1.813,457,2.886,460,0.792,472,2.715,478,1.813,482,1.866,484,1.432,494,0.855,511,0.733,522,1.723,620,0.661,623,1.213,629,1.26,630,0.733,631,0.733,642,1.12,645,2.306,646,3.272,648,0.855,650,2.573,663,1.558,674,2.945,681,1.263,684,2.265,686,1.542,687,2.487,725,1.167,736,1.316,747,2.467,750,1.372,757,3.554,762,1.497,776,4.1,777,2.297,778,2.122,780,2.207,796,2.555,800,1.077,801,1.528,813,2.487,815,3.528,826,1.165,828,2.032,847,1.497,849,1.372,850,1.497,851,1.432,858,2.487,859,2.487,934,1.316,943,2.706,1015,2.361,1024,2.027,1027,2.262,1052,2.493,1088,2.262,1090,2.123,1168,1.566,1210,2.027,1226,5.413,1310,1.914,1342,2.392,1355,2.123,1358,2.328,1384,2.306,1408,4.28,1409,3.017,1410,4.534,1458,1.372,1489,2.328,1502,3.017,1525,4.974,1590,3.017,1646,3.017,1700,1.813,1701,1.72,1714,4.28,1717,4.28,1740,2.306,1789,4.869,1798,2.573,1814,2.027,1880,1.723,1892,1.914,1916,2.306,1955,2.306,1988,2.487,2007,4.1,2013,2.445,2028,2.156,2050,2.487,2076,2.156,2138,3.85,2151,2.713,2152,1.914,2153,2.715,2154,1.497,2155,2.573,2171,1.914,2176,1.914,2180,1.372,2181,2.99,2183,1.914,2330,1.723,2333,1.723,2334,1.723,2532,3.017,2609,4.974,2617,1.914,2984,3.528,3081,2.99,3386,2.487,3387,4.1,3688,2.487,3691,4.1,3703,2.487,3732,4.474,3733,2.714,3734,4.933,3735,4.28,3736,3.017,3737,3.478,3738,3.478,3739,3.478,3740,3.478,3741,3.478,3742,4.933,3743,4.933,3744,3.478,3745,4.933,3746,4.933,3747,3.478,3748,3.478,3749,3.478,3750,3.478,3751,3.478,3752,3.478,3753,3.478,3754,3.478,3755,7.038,3756,3.478,3757,3.478,3758,3.478,3759,3.478,3760,3.478,3761,6.588,3762,3.478,3763,3.478,3764,3.478,3765,3.478,3766,5.733,3767,6.239,3768,5.733,3769,3.478,3770,3.478,3771,3.478,3772,3.478,3773,4.933,3774,4.933,3775,3.478,3776,4.933,3777,3.478,3778,3.478,3779,3.478,3780,3.478,3781,3.478,3782,3.478,3783,3.478,3784,3.478,3785,3.478,3786,3.478,3787,3.478,3788,3.478,3789,3.478,3790,4.933,3791,4.933,3792,3.478,3793,6.239,3794,3.478,3795,3.478,3796,3.017,3797,3.478,3798,3.478,3799,3.478,3800,3.478,3801,3.478,3802,3.478,3803,4.933,3804,4.933,3805,3.478,3806,3.478,3807,3.478,3808,3.478,3809,3.478,3810,4.933,3811,3.478,3812,3.478,3813,3.478,3814,3.478,3815,3.478,3816,3.478,3817,3.478,3818,3.478,3819,3.478,3820,3.478,3821,3.478,3822,3.478,3823,3.478,3824,3.478,3825,3.478,3826,4.933,3827,5.733,3828,3.478,3829,3.478,3830,3.478,3831,3.478,3832,3.478,3833,3.478,3834,3.478,3835,3.478,3836,3.478,3837,3.478,3838,3.478,3839,3.478,3840,3.478,3841,3.478,3842,3.478,3843,3.478,3844,3.478,3845,3.478,3846,3.478,3847,3.478,3848,3.478,3849,3.478,3850,3.478,3851,3.478,3852,3.478,3853,3.478,3854,3.478,3855,3.478,3856,3.478,3857,3.478,3858,3.478,3859,3.478,3860,3.478,3861,3.478,3862,3.478,3863,3.478,3864,3.478,3865,3.478,3866,3.478,3867,3.478,3868,4.933,3869,3.478,3870,4.933,3871,3.478,3872,4.933,3873,3.478,3874,4.933,3875,3.478,3876,4.933,3877,3.478,3878,3.478,3879,3.478,3880,6.239,3881,6.239,3882,6.239,3883,3.478,3884,6.588,3885,6.843,3886,3.478,3887,4.933,3888,3.478,3889,3.478,3890,3.478,3891,3.478,3892,3.478,3893,3.478,3894,3.478,3895,3.478,3896,3.478,3897,3.478,3898,3.478,3899,6.588,3900,3.478,3901,3.478,3902,3.478,3903,3.478,3904,3.478,3905,6.588,3906,3.478,3907,3.478,3908,3.478,3909,3.478,3910,3.478]],["title/modules/VisTimelineModule.html",[0,1.933,3911,2.79]],["body/modules/VisTimelineModule.html",[2,2.765,3,3.208,8,0.015,11,2.484,12,1.63,13,2.528,14,0.153,15,0.153,16,0.153,20,3.715,21,3.715,22,0.228,23,3.715,24,0.894,25,3.715,26,3.202,33,3.715,34,1.569,50,3.202,52,0.178,53,0.033,54,0.013,55,0.013,725,1.453,739,3.111,740,2.323,742,1.82,2151,2.934,2904,6.181,2961,4.391,3911,5.755,3912,5.326,3913,5.326,3914,5.326,3915,6.14,3916,6.14]],["title/coverage.html",[3917,4.638]],["body/coverage.html",[7,1.573,8,0.015,9,1.51,10,1.51,14,0.157,16,0.104,17,2.618,18,4.356,31,2.112,53,0.04,54,0.01,55,0.01,56,0.298,57,2.578,59,4.093,60,2.695,72,1.496,73,2.423,83,0.209,89,0.838,90,1.022,91,1.239,92,1.063,93,1.192,102,1.641,109,2.578,149,0.389,178,2.578,185,0.632,211,2.112,279,0.956,291,1.192,435,3.245,436,3.608,437,1.946,443,1.79,445,1.45,446,1.713,490,3.608,620,0.933,621,1.573,627,3.608,628,4.506,645,4.466,710,1.45,712,1.641,714,1.288,716,1.51,717,1.51,718,1.641,719,1.573,720,1.45,721,1.573,724,1.51,725,1.662,728,1.641,730,1.573,732,1.573,735,1.573,736,1.573,738,1.45,739,1.573,741,1.51,745,3.916,746,4.506,748,2.758,772,2.061,819,1.641,833,2.758,962,4.356,1008,2.974,1015,3.337,1016,2.766,1017,1.873,1162,3.245,1194,3.245,1249,4.356,1251,2.974,1307,3.608,1335,3.245,1339,2.423,1340,4.506,1349,2.423,1402,2.423,1403,4.843,1433,3.245,1799,3.608,1804,2.578,1805,4.093,1811,1.963,1981,3.245,1982,3.245,2011,2.758,2012,4.214,2016,2.578,2031,2.758,2102,2.974,2115,2.974,2146,4.216,2147,4.065,2151,2.299,2314,2.974,2315,4.356,2316,3.992,2317,4.356,2455,3.608,2456,3.608,2522,4.356,2523,4.356,2549,3.608,2577,3.608,2613,3.245,2658,3.245,2659,5.255,2660,4.843,2820,3.245,2821,4.305,2961,4.816,2962,4.356,2984,3.992,3069,3.245,3070,3.608,3096,2.169,3097,2.061,3098,2.288,3099,2.423,3104,2.423,3105,2.423,3384,4.816,3717,4.356,3718,4.356,3732,3.245,3733,4.917,3796,6.937,3917,3.608,3918,4.159,3919,4.159,3920,4.159,3921,4.159,3922,7.024,3923,4.159,3924,3.608,3925,4.159,3926,4.159,3927,4.159,3928,5.466,3929,3.608,3930,7.968,3931,3.608,3932,3.608,3933,5.466,3934,3.608,3935,3.608,3936,3.608,3937,4.159,3938,7.024,3939,4.159,3940,4.159,3941,4.843,3942,5.582,3943,4.159,3944,3.608,3945,3.608,3946,3.608,3947,4.159,3948,5.466,3949,3.608,3950,3.608,3951,3.608,3952,4.159,3953,4.159,3954,4.159,3955,4.159,3956,4.159,3957,4.159,3958,4.159,3959,4.159,3960,6.301,3961,5.466,3962,3.608,3963,3.608,3964,3.608,3965,6.301,3966,4.159,3967,4.159,3968,4.159,3969,4.159,3970,4.159,3971,4.159,3972,4.159,3973,4.159,3974,4.159,3975,4.159,3976,4.159,3977,6.853,3978,6.853,3979,3.608,3980,8.022,3981,3.608,3982,3.608,3983,3.608,3984,3.608,3985,3.608,3986,3.608,3987,3.608,3988,3.608,3989,3.608,3990,3.608,3991,3.608,3992,3.608,3993,3.608,3994,4.159,3995,6.301,3996,6.301,3997,4.159,3998,4.159,3999,4.159,4000,4.159,4001,4.159,4002,3.608,4003,4.159,4004,4.159,4005,4.159,4006,4.159,4007,6.301,4008,6.301,4009,5.582,4010,4.159,4011,3.608,4012,4.159,4013,4.159,4014,4.159,4015,3.608,4016,3.608,4017,4.159,4018,4.159,4019,3.608,4020,4.159,4021,5.582,4022,6.301,4023,4.159,4024,4.159,4025,5.582,4026,3.608,4027,3.608,4028,4.159,4029,4.159,4030,4.159,4031,4.159,4032,4.159,4033,4.159]],["title/dependencies.html",[3,2.116,4034,3.248]],["body/dependencies.html",[3,3.236,8,0.015,17,2.505,31,2.719,32,4.765,46,0.427,54,0.013,55,0.013,94,1.365,725,1.475,742,1.592,1041,2.806,1346,4.132,1347,3.429,1430,4.862,2151,3.259,2531,6.234,2547,4.862,4035,6.231,4036,6.231,4037,6.231,4038,6.231,4039,6.231,4040,6.231,4041,6.231,4042,6.231,4043,6.231,4044,6.231,4045,6.231,4046,7.186,4047,6.231,4048,6.231,4049,6.231,4050,7.186]],["title/miscellaneous/functions.html",[1667,3.666,4051,2.013]],["body/miscellaneous/functions.html",[8,0.015,54,0.01,55,0.01,59,2.38,60,2.41,61,2.782,66,1.789,68,3.239,69,5.197,73,3.213,74,0.205,76,1.014,78,2.732,80,2.875,83,0.408,85,1.722,89,0.831,90,1.115,91,2.191,94,1.742,97,2.239,104,2.092,114,2.129,121,3.01,122,1.757,137,2.38,142,1.717,144,0.547,146,2.535,149,0.516,150,2.148,158,2.483,163,0.594,169,2.463,170,1.657,172,2.811,173,2.708,177,2.362,181,1.216,190,2.708,191,1.456,197,2.687,231,1.581,247,4.876,248,4.14,250,2.811,261,4.14,262,2.373,268,1.808,291,2.259,294,1.483,310,0.86,336,1.367,344,1.483,353,1.775,358,1.776,394,2.377,407,1.065,416,1.717,437,2.782,440,2.732,441,1.581,446,1.682,462,3.904,465,2.232,467,2.811,468,1.933,470,1.545,527,3.675,537,2.247,579,3.213,651,2.92,778,2.593,803,1.847,1032,2.38,1090,3.096,1380,2.177,1437,2.129,1535,2.531,1667,3.187,1798,2.875,1805,2.38,1806,3.034,1809,2.247,1835,2.708,1838,4.876,1840,4.358,1841,2.708,1859,4.143,1887,2.875,2012,2.38,2014,3.312,2016,3.418,2023,2.92,2106,2.373,2109,4.303,2146,2.129,2158,1.611,2177,1.757,2642,5.799,2826,3.543,2945,3.543,3072,3.543,3073,3.543,3350,2.708,3977,6.868,3978,6.868,3979,4.784,3981,4.784,3982,4.784,3983,4.784,3984,4.784,3985,4.784,3986,4.784,3987,4.784,3988,4.784,3989,4.784,3990,4.784,3991,4.784,3992,4.784,3993,4.784,4002,4.784,4011,4.784,4016,7.178,4019,4.784,4051,2.531,4052,7.879,4053,3.543,4054,4.084,4055,3.543,4056,4.084,4057,6.243,4058,4.084,4059,6.684,4060,6.243,4061,7.879,4062,4.084,4063,8.052,4064,7.786,4065,4.084,4066,4.084,4067,4.084,4068,5.514,4069,4.084,4070,4.084,4071,4.084,4072,4.084,4073,5.514,4074,4.084,4075,4.084,4076,4.084,4077,5.514,4078,5.514,4079,6.243,4080,5.514,4081,4.084,4082,4.084,4083,4.084,4084,4.084,4085,4.084,4086,4.084,4087,4.084,4088,5.514,4089,5.514,4090,5.514,4091,4.084,4092,4.084,4093,4.084,4094,4.084,4095,4.084,4096,4.084,4097,4.084,4098,4.084,4099,4.084,4100,4.084,4101,4.084,4102,6.243,4103,4.084,4104,4.084]],["title/index.html",[74,0.196,4105,3.385]],["body/index.html",[1,5.677,2,2.358,3,2.916,4,4.543,5,4.543,6,4.543,7,2.949,8,0.015,9,2.553,10,2.553,11,2.258,12,1.39,13,2.157,54,0.012,55,0.012,58,0.941,254,0.697,376,2.731,621,2.949,622,2.157,710,2.718,712,3.075,714,2.414,716,2.83,717,2.83,718,3.075,720,2.718,721,2.949,724,2.83,728,3.075,730,2.949,732,2.949,735,2.949,736,2.949,738,2.718,739,2.949,741,2.83,1004,5.054,1240,5.064,1241,4.543,1242,4.543,1243,4.543,1295,5.842,1296,4.543,1297,4.543,1299,4.543,1335,4.086,2516,5.714,2517,4.543,2518,4.543,2520,4.543,2525,5.399,2526,4.543,2527,4.543,2528,4.543,2541,5.399,2542,4.543,2543,4.543,2544,4.543,2899,5.745,2900,4.543,2901,4.543,2902,4.543,2947,5.632,2948,4.543,2949,4.543,2950,4.543,3911,5.399,3912,4.543,3913,4.543,3914,4.543,4015,4.543,4105,4.543,4106,5.236]],["title/modules.html",[2,2.407]],["body/modules.html",[1,4.486,2,2.825,8,0.013,54,0.013,55,0.013,134,4.494,1177,4.494,1240,3.888,1295,4.486,2516,4.486,2525,4.486,2541,4.486,2899,4.486,2947,4.486,3911,4.486,4107,8.166,4108,8.166]],["title/miscellaneous/typealiases.html",[4051,2.013,4109,4.698]],["body/miscellaneous/typealiases.html",[8,0.015,15,0.176,17,2.693,54,0.013,55,0.013,59,3.547,60,2.635,74,0.306,83,0.377,89,0.943,118,1.326,119,3.349,120,4.036,121,2.741,122,2.619,123,4.036,124,2.619,125,4.036,126,3.349,127,2.872,128,2.303,129,4.701,130,2.682,131,2.919,135,2.506,168,3.174,398,3.192,745,3.174,772,3.016,819,2.401,1805,3.547,1829,4.701,1831,4.036,1834,4.701,1981,4.749,1982,5.531,1990,6.15,2821,4.371,3097,3.016,3099,3.547,3104,3.547,3105,3.547,3108,4.701,3109,4.701,3924,5.28,4051,3.772,4053,5.28,4055,6.15,4110,6.086,4111,6.086,4112,6.086,4113,7.088]],["title/miscellaneous/variables.html",[4051,2.013,4114,4.076]],["body/miscellaneous/variables.html",[8,0.015,17,2.436,54,0.011,55,0.011,74,0.229,83,0.351,94,1.001,117,0.978,143,1.769,155,1.167,156,0.553,163,1.179,185,0.903,254,0.608,442,1.001,579,3.461,580,3.383,642,1.471,729,1.881,991,1.966,994,1.802,1039,2.382,1161,3.564,2151,2.446,2154,1.966,2155,2.382,2181,2.382,2613,4.634,2961,4.247,2962,4.634,2983,3.962,2984,4.997,2993,3.962,2994,3.962,2995,3.962,2996,3.962,3733,3.564,3735,3.962,3736,3.962,3928,3.962,3929,5.152,3931,5.152,3932,5.152,3933,3.962,3934,5.152,3935,5.152,3936,5.152,3941,3.962,3944,5.152,3945,3.962,3946,5.152,3948,3.962,3949,5.152,3950,5.152,3951,5.152,3961,3.962,3962,5.152,3963,5.152,3964,5.152,4026,5.152,4027,5.152,4051,2.831,4114,3.962,4115,4.567,4116,4.567,4117,4.567,4118,4.567,4119,6.599,4120,6.599,4121,6.599,4122,6.599,4123,8.215,4124,7.559,4125,8.215,4126,6.987,4127,7.664,4128,4.567,4129,7.243,4130,4.567,4131,8.181,4132,4.567,4133,6.987,4134,5.938,4135,4.567,4136,4.567,4137,4.567,4138,4.567,4139,4.567,4140,4.567,4141,6.599,4142,6.599,4143,5.938,4144,4.567,4145,5.938,4146,5.938,4147,4.567,4148,6.599,4149,4.567,4150,5.938,4151,6.987,4152,4.567,4153,4.567,4154,4.567,4155,5.938,4156,4.567,4157,4.567,4158,4.567,4159,5.938,4160,4.567,4161,4.567,4162,4.567,4163,4.567,4164,7.92,4165,4.567,4166,5.938,4167,4.567,4168,5.938,4169,4.567,4170,5.938,4171,4.567,4172,4.567,4173,4.567,4174,4.567,4175,4.567,4176,4.567,4177,4.567,4178,4.567,4179,4.567,4180,4.567,4181,4.567,4182,4.567,4183,4.567,4184,4.567,4185,4.567]]],"invertedIndex":[["",{"_index":8,"title":{},"body":{"modules/AgGridModule.html":{},"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"components/BsEdgeInfoCard.html":{},"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"modules/BsHeatmapModule.html":{},"components/BsNodeInfoCard.html":{},"modules/BsTimelineModule.html":{},"components/BsTooltipComponent.html":{},"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/Column.html":{},"interfaces/CustomData.html":{},"components/DataModalComponent.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/FacetChartDataPoint.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{},"components/FacetNgxChart.html":{},"components/FacetWrapperComponent.html":{},"modules/FinanceModule.html":{},"modules/FusionChartsModule.html":{},"modules/GoogleMapsModule.html":{},"interfaces/HeatmapItem.html":{},"components/MapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"modules/NetworkModule.html":{},"interfaces/NetworkProvider.html":{},"components/NgxChart.html":{},"modules/NgxChartsModule.html":{},"interfaces/Node.html":{},"interfaces/NodeData.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"components/ResultTimeline.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineEventType.html":{},"components/TimelineLegendComponent.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{},"modules/VisTimelineModule.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":279,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"components/BsEdgeInfoCard.html":{},"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"components/BsTooltipComponent.html":{},"interfaces/Column.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/FacetChartDataPoint.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{},"components/FacetNgxChart.html":{},"interfaces/HeatmapItem.html":{},"components/MapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeData.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"components/ResultTimeline.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{},"coverage.html":{}}}],["0(n",{"_index":2244,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["0.0.1",{"_index":4036,"title":{},"body":{"dependencies.html":{}}}],["0.02",{"_index":2645,"title":{},"body":{"components/MapComponent.html":{}}}],["0.25rem!important",{"_index":2461,"title":{},"body":{"components/FacetWrapperComponent.html":{}}}],["0.2s",{"_index":1229,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["0.3",{"_index":573,"title":{},"body":{"classes/BaseProvider.html":{}}}],["0.5",{"_index":1233,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/TimelineEventType.html":{},"components/TimelineLegendComponent.html":{}}}],["0.8",{"_index":955,"title":{},"body":{"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{}}}],["0.9",{"_index":1227,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["0/1",{"_index":3930,"title":{},"body":{"coverage.html":{}}}],["0/10",{"_index":3923,"title":{},"body":{"coverage.html":{}}}],["0/11",{"_index":3927,"title":{},"body":{"coverage.html":{}}}],["0/17",{"_index":4021,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":4025,"title":{},"body":{"coverage.html":{}}}],["0/27",{"_index":4028,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":3922,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":4022,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":3960,"title":{},"body":{"coverage.html":{}}}],["0/7",{"_index":3938,"title":{},"body":{"coverage.html":{}}}],["0/8",{"_index":3965,"title":{},"body":{"coverage.html":{}}}],["0/9",{"_index":4029,"title":{},"body":{"coverage.html":{}}}],["023e58",{"_index":4141,"title":{},"body":{"miscellaneous/variables.html":{}}}],["0f5132",{"_index":951,"title":{},"body":{"components/BsFacetDate.html":{}}}],["0s",{"_index":1231,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["1",{"_index":254,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"classes/BaseProvider.html":{},"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/FacetChartDataPoint.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{},"components/FacetNgxChart.html":{},"interfaces/HeatmapItem.html":{},"components/MapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"components/ResultTimeline.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["1).split",{"_index":3013,"title":{},"body":{"components/ResultTimeline.html":{}}}],["1.0",{"_index":1200,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["1.5em",{"_index":641,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsNodeInfoCard.html":{},"interfaces/NodeData.html":{}}}],["1/1",{"_index":3980,"title":{},"body":{"coverage.html":{}}}],["1/2",{"_index":4009,"title":{},"body":{"coverage.html":{}}}],["1/3",{"_index":4000,"title":{},"body":{"coverage.html":{}}}],["1/6",{"_index":3996,"title":{},"body":{"coverage.html":{}}}],["10",{"_index":211,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"components/BsTooltipComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{},"coverage.html":{}}}],["10/21",{"_index":3998,"title":{},"body":{"coverage.html":{}}}],["100",{"_index":1015,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/Column.html":{},"interfaces/HeatmapItem.html":{},"components/NgxChart.html":{},"components/ResultTimeline.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{},"coverage.html":{}}}],["1000",{"_index":1024,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{}}}],["10000",{"_index":2978,"title":{},"body":{"components/ResultTimeline.html":{}}}],["10px",{"_index":1234,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["11/26",{"_index":3926,"title":{},"body":{"coverage.html":{}}}],["11/60",{"_index":3959,"title":{},"body":{"coverage.html":{}}}],["12",{"_index":3367,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["12/24",{"_index":3947,"title":{},"body":{"coverage.html":{}}}],["12px",{"_index":1312,"title":{},"body":{"components/BsTooltipComponent.html":{},"components/DataModalComponent.html":{},"interfaces/TimelineEventType.html":{},"components/TimelineLegendComponent.html":{}}}],["13/45",{"_index":3940,"title":{},"body":{"coverage.html":{}}}],["13/56",{"_index":3954,"title":{},"body":{"coverage.html":{}}}],["14.0.0",{"_index":4040,"title":{},"body":{"dependencies.html":{}}}],["14/15",{"_index":3973,"title":{},"body":{"coverage.html":{}}}],["15",{"_index":2676,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{}}}],["15/60",{"_index":4031,"title":{},"body":{"coverage.html":{}}}],["150px",{"_index":2994,"title":{},"body":{"components/ResultTimeline.html":{},"miscellaneous/variables.html":{}}}],["16",{"_index":3995,"title":{},"body":{"coverage.html":{}}}],["16rem",{"_index":2946,"title":{},"body":{"components/NgxChart.html":{}}}],["17",{"_index":4023,"title":{},"body":{"coverage.html":{}}}],["17px",{"_index":1317,"title":{},"body":{"components/BsTooltipComponent.html":{}}}],["18",{"_index":3958,"title":{},"body":{"coverage.html":{}}}],["187",{"_index":3723,"title":{},"body":{"interfaces/TimelineEventType.html":{},"components/TimelineLegendComponent.html":{}}}],["19/20",{"_index":3967,"title":{},"body":{"coverage.html":{}}}],["1950",{"_index":3024,"title":{},"body":{"components/ResultTimeline.html":{}}}],["1].date",{"_index":3353,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["1a3646",{"_index":4130,"title":{},"body":{"miscellaneous/variables.html":{}}}],["1d2c4d",{"_index":4126,"title":{},"body":{"miscellaneous/variables.html":{}}}],["2",{"_index":159,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"components/BsEdgeInfoCard.html":{},"components/BsNodeInfoCard.html":{},"interfaces/CustomData.html":{},"classes/DynamicEdgeProvider.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"components/FacetWrapperComponent.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventType.html":{},"components/TimelineLegendComponent.html":{},"interfaces/TimelineSeries.html":{}}}],["2).split",{"_index":2748,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{}}}],["2*size",{"_index":3716,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["2/10",{"_index":3968,"title":{},"body":{"coverage.html":{}}}],["2/4",{"_index":3976,"title":{},"body":{"coverage.html":{}}}],["2/9",{"_index":3975,"title":{},"body":{"coverage.html":{}}}],["20",{"_index":1016,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"coverage.html":{}}}],["200",{"_index":1470,"title":{},"body":{"interfaces/Column.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{}}}],["2000",{"_index":3909,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["200px",{"_index":2457,"title":{},"body":{"components/FacetWrapperComponent.html":{}}}],["2020",{"_index":3358,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["206",{"_index":3724,"title":{},"body":{"interfaces/TimelineEventType.html":{},"components/TimelineLegendComponent.html":{}}}],["21",{"_index":1335,"title":{},"body":{"components/BsTooltipComponent.html":{},"coverage.html":{},"index.html":{}}}],["22",{"_index":3974,"title":{},"body":{"coverage.html":{}}}],["222222",{"_index":4160,"title":{},"body":{"miscellaneous/variables.html":{}}}],["23",{"_index":3942,"title":{},"body":{"coverage.html":{}}}],["24",{"_index":3526,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["25",{"_index":4030,"title":{},"body":{"coverage.html":{}}}],["25.2.0",{"_index":4050,"title":{},"body":{"dependencies.html":{}}}],["255763",{"_index":4153,"title":{},"body":{"miscellaneous/variables.html":{}}}],["28",{"_index":3939,"title":{},"body":{"coverage.html":{}}}],["283d6a",{"_index":4143,"title":{},"body":{"miscellaneous/variables.html":{}}}],["2c6675",{"_index":4152,"title":{},"body":{"miscellaneous/variables.html":{}}}],["2px",{"_index":3383,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["3",{"_index":158,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineEventType.html":{},"components/TimelineLegendComponent.html":{},"interfaces/TimelineRecords.html":{},"interfaces/VisEvent.html":{},"miscellaneous/functions.html":{}}}],["3*24",{"_index":3370,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["3*size/2",{"_index":3715,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["3.0.0",{"_index":4038,"title":{},"body":{"dependencies.html":{}}}],["3.0.4",{"_index":4041,"title":{},"body":{"dependencies.html":{}}}],["3.1.0",{"_index":4044,"title":{},"body":{"dependencies.html":{}}}],["3.15.1",{"_index":4042,"title":{},"body":{"dependencies.html":{}}}],["3/3",{"_index":4012,"title":{},"body":{"coverage.html":{}}}],["3/4",{"_index":3970,"title":{},"body":{"coverage.html":{}}}],["30",{"_index":2677,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{}}}],["30/33",{"_index":4017,"title":{},"body":{"coverage.html":{}}}],["300",{"_index":2567,"title":{},"body":{"components/MapComponent.html":{}}}],["304a7d",{"_index":4149,"title":{},"body":{"miscellaneous/variables.html":{}}}],["31",{"_index":4005,"title":{},"body":{"coverage.html":{}}}],["33",{"_index":3999,"title":{},"body":{"coverage.html":{}}}],["334e87",{"_index":4139,"title":{},"body":{"miscellaneous/variables.html":{}}}],["34",{"_index":4106,"title":{},"body":{"index.html":{}}}],["35",{"_index":1162,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{},"coverage.html":{}}}],["350px",{"_index":2996,"title":{},"body":{"components/ResultTimeline.html":{},"miscellaneous/variables.html":{}}}],["36",{"_index":4007,"title":{},"body":{"coverage.html":{}}}],["365",{"_index":3124,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{}}}],["3a4762",{"_index":4158,"title":{},"body":{"miscellaneous/variables.html":{}}}],["3c7680",{"_index":4147,"title":{},"body":{"miscellaneous/variables.html":{}}}],["4",{"_index":3703,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{}}}],["4.0.0",{"_index":4048,"title":{},"body":{"dependencies.html":{}}}],["4/10",{"_index":3971,"title":{},"body":{"coverage.html":{}}}],["4/23",{"_index":4024,"title":{},"body":{"coverage.html":{}}}],["4/4",{"_index":4010,"title":{},"body":{"coverage.html":{}}}],["40",{"_index":1017,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"coverage.html":{}}}],["42",{"_index":3925,"title":{},"body":{"coverage.html":{}}}],["45",{"_index":4003,"title":{},"body":{"coverage.html":{}}}],["45/61",{"_index":3921,"title":{},"body":{"coverage.html":{}}}],["47",{"_index":3997,"title":{},"body":{"coverage.html":{}}}],["4b6878",{"_index":4134,"title":{},"body":{"miscellaneous/variables.html":{}}}],["4e6d70",{"_index":4161,"title":{},"body":{"miscellaneous/variables.html":{}}}],["4px",{"_index":958,"title":{},"body":{"components/BsFacetDate.html":{}}}],["5",{"_index":579,"title":{},"body":{"classes/BaseProvider.html":{},"components/ResultTimeline.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["5.15.1",{"_index":4049,"title":{},"body":{"dependencies.html":{}}}],["5/46",{"_index":3937,"title":{},"body":{"coverage.html":{}}}],["5/5",{"_index":4001,"title":{},"body":{"coverage.html":{}}}],["50",{"_index":645,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsNodeInfoCard.html":{},"interfaces/NodeData.html":{},"interfaces/VisEvent.html":{},"coverage.html":{}}}],["500px",{"_index":3736,"title":{},"body":{"interfaces/VisEvent.html":{},"miscellaneous/variables.html":{}}}],["50vh",{"_index":1985,"title":{},"body":{"components/DataModalComponent.html":{}}}],["5px",{"_index":634,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsNodeInfoCard.html":{},"interfaces/NodeData.html":{}}}],["6",{"_index":3248,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{}}}],["6)*2",{"_index":3711,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["6.5.1",{"_index":4045,"title":{},"body":{"dependencies.html":{}}}],["6/19",{"_index":4006,"title":{},"body":{"coverage.html":{}}}],["6/6",{"_index":4018,"title":{},"body":{"coverage.html":{}}}],["60",{"_index":3527,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["600",{"_index":1011,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{}}}],["600px",{"_index":1444,"title":{},"body":{"interfaces/Column.html":{}}}],["600x400",{"_index":1394,"title":{},"body":{"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"components/NgxChart.html":{}}}],["64779e",{"_index":4136,"title":{},"body":{"miscellaneous/variables.html":{}}}],["69420",{"_index":2670,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{}}}],["6f9ba5",{"_index":4144,"title":{},"body":{"miscellaneous/variables.html":{}}}],["6px",{"_index":959,"title":{},"body":{"components/BsFacetDate.html":{}}}],["7",{"_index":1332,"title":{},"body":{"components/BsTooltipComponent.html":{}}}],["7.3.4",{"_index":4046,"title":{},"body":{"dependencies.html":{}}}],["7/19",{"_index":4008,"title":{},"body":{"coverage.html":{}}}],["7/20",{"_index":4020,"title":{},"body":{"coverage.html":{}}}],["7/65",{"_index":4032,"title":{},"body":{"coverage.html":{}}}],["73",{"_index":3920,"title":{},"body":{"coverage.html":{}}}],["75",{"_index":3969,"title":{},"body":{"coverage.html":{}}}],["7aa3e5",{"_index":2320,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["7acce5",{"_index":2325,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["7c7c7c",{"_index":3725,"title":{},"body":{"interfaces/TimelineEventType.html":{},"components/TimelineLegendComponent.html":{}}}],["7rem",{"_index":961,"title":{},"body":{"components/BsFacetDate.html":{}}}],["8",{"_index":3702,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["8/38",{"_index":3994,"title":{},"body":{"coverage.html":{}}}],["8/39",{"_index":3955,"title":{},"body":{"coverage.html":{}}}],["80",{"_index":638,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsNodeInfoCard.html":{},"interfaces/NodeData.html":{}}}],["808080",{"_index":581,"title":{},"body":{"classes/BaseProvider.html":{}}}],["84",{"_index":3369,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["86400000",{"_index":3547,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["8ec3b9",{"_index":4128,"title":{},"body":{"miscellaneous/variables.html":{}}}],["8px",{"_index":1313,"title":{},"body":{"components/BsTooltipComponent.html":{}}}],["9",{"_index":1004,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{},"index.html":{}}}],["9/20",{"_index":4004,"title":{},"body":{"coverage.html":{}}}],["9/38",{"_index":3943,"title":{},"body":{"coverage.html":{}}}],["90",{"_index":1194,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{},"coverage.html":{}}}],["90px",{"_index":1081,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["93",{"_index":3972,"title":{},"body":{"coverage.html":{}}}],["95",{"_index":3966,"title":{},"body":{"coverage.html":{}}}],["98a5be",{"_index":4150,"title":{},"body":{"miscellaneous/variables.html":{}}}],["_action",{"_index":3795,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["_actions",{"_index":3747,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["_datapoint",{"_index":2422,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["_datapoint.$item",{"_index":2427,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["_datapoint.name",{"_index":2424,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["_datapoint.value",{"_index":2425,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["_definance",{"_index":4165,"title":{},"body":{"miscellaneous/variables.html":{}}}],["_degooglemaps",{"_index":4171,"title":{},"body":{"miscellaneous/variables.html":{}}}],["_degrid",{"_index":4174,"title":{},"body":{"miscellaneous/variables.html":{}}}],["_deheatmap",{"_index":4177,"title":{},"body":{"miscellaneous/variables.html":{}}}],["_enfinance",{"_index":4167,"title":{},"body":{"miscellaneous/variables.html":{}}}],["_engooglemaps",{"_index":4172,"title":{},"body":{"miscellaneous/variables.html":{}}}],["_engrid",{"_index":4175,"title":{},"body":{"miscellaneous/variables.html":{}}}],["_enheatmap",{"_index":4180,"title":{},"body":{"miscellaneous/variables.html":{}}}],["_field",{"_index":835,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{}}}],["_filterinput",{"_index":1491,"title":{},"body":{"interfaces/Column.html":{}}}],["_frfinance",{"_index":4169,"title":{},"body":{"miscellaneous/variables.html":{}}}],["_frgooglemaps",{"_index":4173,"title":{},"body":{"miscellaneous/variables.html":{}}}],["_frgrid",{"_index":4176,"title":{},"body":{"miscellaneous/variables.html":{}}}],["_frheatmap",{"_index":4183,"title":{},"body":{"miscellaneous/variables.html":{}}}],["_items",{"_index":3344,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["_networkinitialized",{"_index":3744,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["_queries",{"_index":2068,"title":{},"body":{"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{}}}],["_selectededge",{"_index":3746,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["_selectednode",{"_index":3745,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["a.count",{"_index":1289,"title":{},"body":{"components/BsNodeInfoCard.html":{},"interfaces/NodeData.html":{}}}],["a.date.gettime",{"_index":3667,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["a.name",{"_index":1710,"title":{},"body":{"interfaces/Column.html":{},"interfaces/MoneyCloudDatum.html":{}}}],["above",{"_index":1445,"title":{},"body":{"interfaces/Column.html":{}}}],["absolute",{"_index":1311,"title":{},"body":{"components/BsTooltipComponent.html":{}}}],["absolutely",{"_index":1211,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["abstract",{"_index":2428,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["abstractfacet",{"_index":747,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/FacetChartDataPoint.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{},"components/FacetNgxChart.html":{},"components/MapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/VisEvent.html":{}}}],["abstractions",{"_index":1044,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["access",{"_index":672,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/HeatmapItem.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeData.html":{},"interfaces/NodeType.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["accessible",{"_index":3491,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["accessor",{"_index":3902,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["accessors",{"_index":773,"title":{},"body":{"components/BsFacetDate.html":{},"components/BsTooltipComponent.html":{},"components/FacetNgxChart.html":{},"components/FacetWrapperComponent.html":{},"components/MapComponent.html":{},"components/NgxChart.html":{}}}],["accordingly",{"_index":2030,"title":{},"body":{"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{}}}],["account",{"_index":2279,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["accumulates",{"_index":544,"title":{},"body":{"classes/BaseProvider.html":{}}}],["act",{"_index":466,"title":{},"body":{"classes/AsyncRecordsProvider.html":{},"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["action",{"_index":96,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"components/BsFacetDate.html":{},"interfaces/Column.html":{},"interfaces/CustomData.html":{},"components/DataModalComponent.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/FacetChartDataPoint.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{},"components/FacetNgxChart.html":{},"components/MapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/VisEvent.html":{}}}],["action.children",{"_index":2340,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["action.icon",{"_index":517,"title":{},"body":{"classes/BaseProvider.html":{},"interfaces/Column.html":{}}}],["action.selected",{"_index":1593,"title":{},"body":{"interfaces/Column.html":{}}}],["action.text",{"_index":518,"title":{},"body":{"classes/BaseProvider.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["actions",{"_index":328,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"components/BsEdgeInfoCard.html":{},"components/BsFacetDate.html":{},"components/BsNodeInfoCard.html":{},"interfaces/Column.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/FacetChartDataPoint.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{},"components/FacetNgxChart.html":{},"components/MapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/NodeData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/VisEvent.html":{}}}],["actions.length",{"_index":886,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{}}}],["actions.push(new",{"_index":335,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"classes/BaseProvider.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["actions.push(this.clearfilters",{"_index":2352,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["actions.push(this.clearfiltersaction",{"_index":887,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{}}}],["actions.push(this.createexpandaction(types[0",{"_index":356,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{}}}],["actions.push(this.selectfield",{"_index":2354,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["actions.unshift(new",{"_index":2143,"title":{},"body":{"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{}}}],["activateaction",{"_index":377,"title":{},"body":{"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"classes/DynamicEdgeProvider.html":{},"classes/DynamicNodeProvider.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{}}}],["activated",{"_index":1833,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["active",{"_index":378,"title":{},"body":{"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"components/BsFacetDate.html":{},"interfaces/Column.html":{},"classes/DynamicEdgeProvider.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/VisEvent.html":{}}}],["actual",{"_index":1479,"title":{},"body":{"interfaces/Column.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["actual_component",{"_index":744,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"components/BsTooltipComponent.html":{},"components/DataModalComponent.html":{},"components/FacetNgxChart.html":{},"components/FacetWrapperComponent.html":{},"components/MapComponent.html":{},"components/NgxChart.html":{},"components/ResultTimeline.html":{},"components/TimelineLegendComponent.html":{}}}],["actually",{"_index":1032,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/Column.html":{},"interfaces/HeatmapItem.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{},"miscellaneous/functions.html":{}}}],["actualwidth",{"_index":1182,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["adapted",{"_index":3212,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["add",{"_index":133,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"classes/BaseProvider.html":{},"interfaces/Column.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["add/replace",{"_index":3293,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["addaggregationnodes",{"_index":382,"title":{},"body":{"classes/AggregationProvider.html":{}}}],["addaggregationnodes(item",{"_index":257,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{}}}],["addcustomedge(recordnode",{"_index":1917,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["adddynamicedges(sourcenodes",{"_index":2078,"title":{},"body":{"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{}}}],["added",{"_index":122,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["addedge(edge",{"_index":2303,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["addedges",{"_index":2870,"title":{},"body":{"classes/NetworkDataset.html":{}}}],["addedges(edges",{"_index":2215,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["addition",{"_index":1924,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["additional",{"_index":137,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"miscellaneous/functions.html":{}}}],["additionally",{"_index":1838,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"miscellaneous/functions.html":{}}}],["addnode(node",{"_index":2300,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["addnodes",{"_index":2871,"title":{},"body":{"classes/NetworkDataset.html":{}}}],["addnodes(nodes",{"_index":2210,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["addrecordnodes(records",{"_index":1849,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["adds",{"_index":245,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["addstructuraledge(dataset",{"_index":1895,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["addstructuraledges(node",{"_index":1862,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["adjacent",{"_index":421,"title":{},"body":{"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"classes/DynamicEdgeProvider.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{}}}],["adjust",{"_index":484,"title":{},"body":{"classes/AsyncRecordsProvider.html":{},"components/BsHeatmapComponent.html":{},"interfaces/CustomData.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{}}}],["adjusts",{"_index":475,"title":{},"body":{"classes/AsyncRecordsProvider.html":{},"classes/DynamicEdgeProvider.html":{},"classes/DynamicNodeProvider.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{}}}],["administrative.country",{"_index":4132,"title":{},"body":{"miscellaneous/variables.html":{}}}],["administrative.land_parcel",{"_index":4135,"title":{},"body":{"miscellaneous/variables.html":{}}}],["administrative.province",{"_index":4137,"title":{},"body":{"miscellaneous/variables.html":{}}}],["advancedservice",{"_index":779,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{}}}],["afterviewinit",{"_index":963,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["ag",{"_index":17,"title":{},"body":{"modules/AgGridModule.html":{},"components/BsEdgeInfoCard.html":{},"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"components/BsTooltipComponent.html":{},"interfaces/Column.html":{},"components/DataModalComponent.html":{},"components/FacetNgxChart.html":{},"components/FacetWrapperComponent.html":{},"components/MapComponent.html":{},"components/NgxChart.html":{},"components/ResultTimeline.html":{},"components/TimelineLegendComponent.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["agdatecolumnfilter",{"_index":1579,"title":{},"body":{"interfaces/Column.html":{}}}],["agg",{"_index":349,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"components/FacetWrapperComponent.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["aggregate",{"_index":204,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"components/BsFacetDate.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["aggregation",{"_index":85,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"components/BsFacetDate.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/FacetChartDataPoint.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{},"components/FacetNgxChart.html":{},"components/FacetWrapperComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"miscellaneous/functions.html":{}}}],["aggregation.items",{"_index":235,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["aggregation.items.foreach(item",{"_index":241,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{}}}],["aggregation.items.length",{"_index":240,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{}}}],["aggregation.items.map(item",{"_index":3328,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["aggregation.name",{"_index":238,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["aggregationdata",{"_index":57,"title":{"interfaces/AggregationData.html":{}},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"coverage.html":{}}}],["aggregationedge",{"_index":109,"title":{"interfaces/AggregationEdge.html":{}},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"coverage.html":{}}}],["aggregationedgetype",{"_index":73,"title":{"interfaces/AggregationEdgeType.html":{}},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["aggregationedgetype).aggregation",{"_index":174,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{}}}],["aggregationitem",{"_index":86,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"components/BsFacetDate.html":{},"interfaces/FacetChartDataPoint.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{},"components/FacetNgxChart.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["aggregationname",{"_index":908,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{},"components/FacetWrapperComponent.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["aggregationprovider",{"_index":178,"title":{"classes/AggregationProvider.html":{}},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"coverage.html":{}}}],["aggregations",{"_index":176,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["aggregations.foreach(aggregation",{"_index":233,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{}}}],["aggregationtriggertype",{"_index":129,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"miscellaneous/typealiases.html":{}}}],["aggridmodule",{"_index":1,"title":{"modules/AgGridModule.html":{}},"body":{"modules/AgGridModule.html":{},"index.html":{},"modules.html":{}}}],["aggridviewcomponent",{"_index":7,"title":{},"body":{"modules/AgGridModule.html":{},"components/BsEdgeInfoCard.html":{},"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"components/BsTooltipComponent.html":{},"interfaces/Column.html":{},"components/DataModalComponent.html":{},"components/FacetNgxChart.html":{},"components/FacetWrapperComponent.html":{},"components/MapComponent.html":{},"components/NgxChart.html":{},"components/ResultTimeline.html":{},"components/TimelineLegendComponent.html":{},"coverage.html":{},"index.html":{}}}],["aginit",{"_index":2463,"title":{},"body":{"components/FacetWrapperComponent.html":{}}}],["aginit(params",{"_index":2468,"title":{},"body":{"components/FacetWrapperComponent.html":{}}}],["agm/core",{"_index":2547,"title":{},"body":{"modules/GoogleMapsModule.html":{},"components/MapComponent.html":{},"dependencies.html":{}}}],["agmcoremodule",{"_index":2546,"title":{},"body":{"modules/GoogleMapsModule.html":{}}}],["agminfowindow",{"_index":2594,"title":{},"body":{"components/MapComponent.html":{}}}],["agmodule",{"_index":30,"title":{},"body":{"modules/AgGridModule.html":{}}}],["agmodule.withcomponents([facetwrappercomponent",{"_index":51,"title":{},"body":{"modules/AgGridModule.html":{}}}],["agnumbercolumnfilter",{"_index":1573,"title":{},"body":{"interfaces/Column.html":{}}}],["algorithm",{"_index":3654,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["alias",{"_index":2497,"title":{},"body":{"components/FacetWrapperComponent.html":{}}}],["aliases",{"_index":4110,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["align",{"_index":1336,"title":{},"body":{"components/BsTooltipComponent.html":{}}}],["all_dates",{"_index":3007,"title":{},"body":{"components/ResultTimeline.html":{}}}],["all_dates.indexof(dateobj.display",{"_index":3038,"title":{},"body":{"components/ResultTimeline.html":{}}}],["all_dates.push(cooc[1",{"_index":3031,"title":{},"body":{"components/ResultTimeline.html":{}}}],["all_ids",{"_index":3006,"title":{},"body":{"components/ResultTimeline.html":{}}}],["all_ids.indexof(id",{"_index":3028,"title":{},"body":{"components/ResultTimeline.html":{}}}],["all_ids.push(id",{"_index":3032,"title":{},"body":{"components/ResultTimeline.html":{}}}],["allcolumns",{"_index":1721,"title":{},"body":{"interfaces/Column.html":{}}}],["allen",{"_index":4101,"title":{},"body":{"miscellaneous/functions.html":{}}}],["allow",{"_index":126,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"components/BsFacetDate.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{},"miscellaneous/typealiases.html":{}}}],["allowcustomrange",{"_index":766,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{}}}],["allowed",{"_index":840,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{}}}],["allowing",{"_index":330,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"interfaces/Column.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/SelectedRecordsProvider.html":{}}}],["allowpredefinedrange",{"_index":767,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{}}}],["allows",{"_index":560,"title":{},"body":{"classes/BaseProvider.html":{},"interfaces/Column.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["allprimarydates",{"_index":3502,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["allprimarydates.length",{"_index":3512,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["along",{"_index":3184,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["alpine",{"_index":1466,"title":{},"body":{"interfaces/Column.html":{}}}],["already",{"_index":320,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"interfaces/Column.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["alt",{"_index":522,"title":{},"body":{"classes/BaseProvider.html":{},"interfaces/Column.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/VisEvent.html":{}}}],["alternative",{"_index":1220,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["alternatively",{"_index":419,"title":{},"body":{"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"interfaces/CustomData.html":{},"classes/DynamicEdgeProvider.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["always",{"_index":1130,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/CustomData.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"interfaces/HeatmapItem.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["amount",{"_index":2745,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{}}}],["amount.split",{"_index":2750,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{}}}],["anchor",{"_index":1164,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["and/or",{"_index":463,"title":{},"body":{"classes/AsyncRecordsProvider.html":{},"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["angular",{"_index":32,"title":{},"body":{"modules/AgGridModule.html":{},"components/BsHeatmapComponent.html":{},"modules/FusionChartsModule.html":{},"interfaces/HeatmapItem.html":{},"dependencies.html":{}}}],["angular/common",{"_index":26,"title":{},"body":{"modules/AgGridModule.html":{},"modules/BsHeatmapModule.html":{},"modules/BsTimelineModule.html":{},"modules/FinanceModule.html":{},"modules/FusionChartsModule.html":{},"modules/GoogleMapsModule.html":{},"modules/NetworkModule.html":{},"modules/NgxChartsModule.html":{},"modules/VisTimelineModule.html":{}}}],["angular/core",{"_index":24,"title":{},"body":{"modules/AgGridModule.html":{},"components/BsEdgeInfoCard.html":{},"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"modules/BsHeatmapModule.html":{},"components/BsNodeInfoCard.html":{},"modules/BsTimelineModule.html":{},"components/BsTooltipComponent.html":{},"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/Column.html":{},"components/DataModalComponent.html":{},"interfaces/FacetChartDataPoint.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{},"components/FacetNgxChart.html":{},"components/FacetWrapperComponent.html":{},"modules/FinanceModule.html":{},"modules/FusionChartsModule.html":{},"modules/GoogleMapsModule.html":{},"interfaces/HeatmapItem.html":{},"components/MapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"modules/NetworkModule.html":{},"components/NgxChart.html":{},"modules/NgxChartsModule.html":{},"interfaces/NodeData.html":{},"components/ResultTimeline.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineEventType.html":{},"components/TimelineLegendComponent.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{},"modules/VisTimelineModule.html":{}}}],["angular/forms",{"_index":29,"title":{},"body":{"modules/AgGridModule.html":{},"components/BsFacetDate.html":{},"modules/BsHeatmapModule.html":{},"modules/BsTimelineModule.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{},"modules/NetworkModule.html":{},"interfaces/VisEvent.html":{}}}],["angular/modules/components/selection.html#selection",{"_index":3076,"title":{},"body":{"classes/SelectedRecordsProvider.html":{}}}],["animation",{"_index":679,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsNodeInfoCard.html":{},"interfaces/NodeData.html":{}}}],["another",{"_index":2248,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"components/MapComponent.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["any).getmodelfromui",{"_index":1786,"title":{},"body":{"interfaces/Column.html":{}}}],["anymore",{"_index":2061,"title":{},"body":{"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{}}}],["api",{"_index":1483,"title":{},"body":{"interfaces/Column.html":{}}}],["api.ts",{"_index":4026,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["app",{"_index":3738,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["appear",{"_index":3473,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["append(\"g",{"_index":3479,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["apple/steve",{"_index":272,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{}}}],["apply",{"_index":493,"title":{},"body":{"classes/BaseProvider.html":{},"interfaces/Column.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["applycolumnstateparams",{"_index":1431,"title":{},"body":{"interfaces/Column.html":{}}}],["applyorder",{"_index":1716,"title":{},"body":{"interfaces/Column.html":{}}}],["appropriate",{"_index":3828,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["appservice",{"_index":780,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/Column.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/FacetChartDataPoint.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{},"components/FacetNgxChart.html":{},"components/FacetWrapperComponent.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/VisEvent.html":{}}}],["april",{"_index":3359,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["area",{"_index":2615,"title":{},"body":{"components/MapComponent.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventType.html":{},"components/TimelineLegendComponent.html":{},"interfaces/TimelineSeries.html":{}}}],["areachartmodule",{"_index":2953,"title":{},"body":{"modules/NgxChartsModule.html":{}}}],["areastyles",{"_index":3089,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{}}}],["around",{"_index":2641,"title":{},"body":{"components/MapComponent.html":{}}}],["array",{"_index":1280,"title":{},"body":{"components/BsNodeInfoCard.html":{},"interfaces/NodeData.html":{}}}],["array.from(new",{"_index":1105,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["array.from(this.edgeidx.keys",{"_index":2207,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["array.from(this.edgeidx.values",{"_index":2197,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["array.from(this.nodeidx.keys",{"_index":2205,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["array.from(this.nodeidx.values",{"_index":2195,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["array.isarray(edges",{"_index":2216,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["array.isarray(ids",{"_index":2223,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["array.isarray(nodes",{"_index":2211,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["arrow",{"_index":562,"title":{},"body":{"classes/BaseProvider.html":{},"components/BsTooltipComponent.html":{}}}],["arrows",{"_index":1650,"title":{},"body":{"interfaces/Column.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["articles",{"_index":4093,"title":{},"body":{"miscellaneous/functions.html":{}}}],["asks",{"_index":4084,"title":{},"body":{"miscellaneous/functions.html":{}}}],["associate",{"_index":2578,"title":{},"body":{"components/MapComponent.html":{}}}],["assume",{"_index":253,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{}}}],["assumed",{"_index":246,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{}}}],["assuming",{"_index":270,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{}}}],["async",{"_index":3688,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{}}}],["asynchronous",{"_index":451,"title":{},"body":{"classes/AsyncRecordsProvider.html":{}}}],["asynchronously",{"_index":294,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"miscellaneous/functions.html":{}}}],["asyncrecordsprovider",{"_index":435,"title":{"classes/AsyncRecordsProvider.html":{}},"body":{"classes/AsyncRecordsProvider.html":{},"coverage.html":{}}}],["asyncrecordsproviderdemo",{"_index":3979,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["asyncrecordsproviderdemo(providerfactory",{"_index":4056,"title":{},"body":{"miscellaneous/functions.html":{}}}],["attach",{"_index":256,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{}}}],["attached",{"_index":468,"title":{},"body":{"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"components/NgxChart.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"miscellaneous/functions.html":{}}}],["attr(\"class",{"_index":3480,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["attr(\"d",{"_index":3484,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["attr(\"display",{"_index":3482,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["attr(\"text",{"_index":3486,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["attr(\"transform",{"_index":1160,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["attr(\"x",{"_index":3488,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["attr(\"y",{"_index":3489,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["audit",{"_index":3150,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["auditeventtype",{"_index":3095,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["auditwebservice",{"_index":3094,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["auto",{"_index":1176,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/Column.html":{},"components/DataModalComponent.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{}}}],["automatically",{"_index":151,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"components/BsHeatmapComponent.html":{},"interfaces/CustomData.html":{},"interfaces/HeatmapItem.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["autoresize",{"_index":1734,"title":{},"body":{"interfaces/Column.html":{}}}],["autosize",{"_index":1449,"title":{},"body":{"interfaces/Column.html":{}}}],["available",{"_index":1745,"title":{},"body":{"interfaces/Column.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{}}}],["avoid",{"_index":308,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"components/BsHeatmapComponent.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/HeatmapItem.html":{},"components/MapComponent.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/VisEvent.html":{}}}],["avoiding",{"_index":1390,"title":{},"body":{"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"components/NgxChart.html":{}}}],["axes",{"_index":1034,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["axis",{"_index":1039,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"components/ResultTimeline.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{},"miscellaneous/variables.html":{}}}],["axis.clickable",{"_index":1221,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["axis/scales",{"_index":1094,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["axisclickable",{"_index":987,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["axisclicked",{"_index":997,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["b",{"_index":3608,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["b.count",{"_index":1288,"title":{},"body":{"components/BsNodeInfoCard.html":{},"interfaces/NodeData.html":{}}}],["b.date.gettime",{"_index":3668,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["b0d5ce",{"_index":4154,"title":{},"body":{"miscellaneous/variables.html":{}}}],["background",{"_index":948,"title":{},"body":{"components/BsFacetDate.html":{}}}],["balham",{"_index":1464,"title":{},"body":{"interfaces/Column.html":{}}}],["ballmer",{"_index":4099,"title":{},"body":{"miscellaneous/functions.html":{}}}],["bar",{"_index":2321,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["barack",{"_index":4085,"title":{},"body":{"miscellaneous/functions.html":{}}}],["barchartmodule",{"_index":2954,"title":{},"body":{"modules/NgxChartsModule.html":{}}}],["barhorizontalcomponent",{"_index":1345,"title":{},"body":{"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"components/NgxChart.html":{}}}],["barverticalcomponent",{"_index":1344,"title":{},"body":{"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"components/NgxChart.html":{}}}],["base",{"_index":103,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"interfaces/CustomData.html":{},"classes/DynamicEdgeProvider.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["basechartcomponent",{"_index":1343,"title":{},"body":{"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"components/NgxChart.html":{}}}],["based",{"_index":2150,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{}}}],["baseprovider",{"_index":102,"title":{"classes/BaseProvider.html":{}},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"interfaces/CustomData.html":{},"classes/DynamicEdgeProvider.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"coverage.html":{}}}],["baseprovider:13",{"_index":449,"title":{},"body":{"classes/AsyncRecordsProvider.html":{}}}],["baseprovider:15",{"_index":403,"title":{},"body":{"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"classes/DynamicEdgeProvider.html":{},"classes/DynamicNodeProvider.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{}}}],["baseprovider:151",{"_index":426,"title":{},"body":{"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"classes/DynamicEdgeProvider.html":{},"classes/DynamicNodeProvider.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{}}}],["baseprovider:159",{"_index":429,"title":{},"body":{"classes/AggregationProvider.html":{}}}],["baseprovider:16",{"_index":401,"title":{},"body":{"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"classes/DynamicEdgeProvider.html":{},"classes/DynamicNodeProvider.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{}}}],["baseprovider:163",{"_index":434,"title":{},"body":{"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"classes/DynamicEdgeProvider.html":{},"classes/DynamicNodeProvider.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{}}}],["baseprovider:171",{"_index":432,"title":{},"body":{"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"classes/DynamicEdgeProvider.html":{},"classes/DynamicNodeProvider.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{}}}],["baseprovider:18",{"_index":404,"title":{},"body":{"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"classes/DynamicEdgeProvider.html":{},"classes/DynamicNodeProvider.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{}}}],["baseprovider:190",{"_index":2100,"title":{},"body":{"classes/DynamicEdgeProvider.html":{}}}],["baseprovider:195",{"_index":409,"title":{},"body":{"classes/AggregationProvider.html":{}}}],["baseprovider:199",{"_index":2118,"title":{},"body":{"classes/DynamicNodeProvider.html":{}}}],["baseprovider:202",{"_index":2099,"title":{},"body":{"classes/DynamicEdgeProvider.html":{}}}],["baseprovider:21",{"_index":399,"title":{},"body":{"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"classes/DynamicEdgeProvider.html":{},"classes/DynamicNodeProvider.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{}}}],["baseprovider:211",{"_index":414,"title":{},"body":{"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"classes/DynamicEdgeProvider.html":{},"classes/DynamicNodeProvider.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{}}}],["baseprovider:219",{"_index":412,"title":{},"body":{"classes/AggregationProvider.html":{}}}],["baseprovider:22",{"_index":3079,"title":{},"body":{"classes/SelectedRecordsProvider.html":{}}}],["baseprovider:23",{"_index":405,"title":{},"body":{"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"classes/DynamicEdgeProvider.html":{},"classes/DynamicNodeProvider.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{}}}],["baseprovider:241",{"_index":411,"title":{},"body":{"classes/AggregationProvider.html":{}}}],["baseprovider:245",{"_index":430,"title":{},"body":{"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"classes/DynamicEdgeProvider.html":{},"classes/DynamicNodeProvider.html":{},"classes/RecordsProvider.html":{}}}],["baseprovider:25",{"_index":402,"title":{},"body":{"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"classes/DynamicEdgeProvider.html":{},"classes/DynamicNodeProvider.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{}}}],["baseprovider:265",{"_index":2101,"title":{},"body":{"classes/DynamicEdgeProvider.html":{},"classes/DynamicNodeProvider.html":{},"classes/RecordsProvider.html":{}}}],["baseprovider:278",{"_index":474,"title":{},"body":{"classes/AsyncRecordsProvider.html":{},"classes/DynamicEdgeProvider.html":{},"classes/DynamicNodeProvider.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{}}}],["baseprovider:279",{"_index":410,"title":{},"body":{"classes/AggregationProvider.html":{}}}],["baseprovider:305",{"_index":483,"title":{},"body":{"classes/AsyncRecordsProvider.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{}}}],["baseprovider:328",{"_index":473,"title":{},"body":{"classes/AsyncRecordsProvider.html":{},"classes/DynamicEdgeProvider.html":{},"classes/DynamicNodeProvider.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{}}}],["baseprovider:340",{"_index":461,"title":{},"body":{"classes/AsyncRecordsProvider.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{}}}],["baseprovider:38",{"_index":450,"title":{},"body":{"classes/AsyncRecordsProvider.html":{}}}],["baseprovider:42",{"_index":2117,"title":{},"body":{"classes/DynamicNodeProvider.html":{},"classes/SelectedRecordsProvider.html":{}}}],["baseprovider:48",{"_index":3080,"title":{},"body":{"classes/SelectedRecordsProvider.html":{}}}],["baseprovider:61",{"_index":2098,"title":{},"body":{"classes/DynamicEdgeProvider.html":{}}}],["baseprovider:68",{"_index":397,"title":{},"body":{"classes/AggregationProvider.html":{}}}],["baseprovider:77",{"_index":2960,"title":{},"body":{"classes/RecordsProvider.html":{}}}],["become",{"_index":4089,"title":{},"body":{"miscellaneous/functions.html":{}}}],["before",{"_index":1131,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{}}}],["behavior",{"_index":3535,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["behaviors",{"_index":3400,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["bellow",{"_index":3453,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["belong",{"_index":219,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["below",{"_index":3338,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["benefit",{"_index":1043,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["bestaggregation",{"_index":3285,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["beta.0",{"_index":4039,"title":{},"body":{"dependencies.html":{}}}],["better",{"_index":1219,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["between",{"_index":527,"title":{},"body":{"classes/BaseProvider.html":{},"interfaces/CustomData.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"miscellaneous/functions.html":{}}}],["bill",{"_index":250,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"classes/BaseProvider.html":{},"interfaces/CustomData.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"miscellaneous/functions.html":{}}}],["bin",{"_index":3647,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["bisectdate",{"_index":3413,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["black",{"_index":950,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["block",{"_index":1213,"title":{},"body":{"components/BsHeatmapComponent.html":{},"components/FacetWrapperComponent.html":{}}}],["boolean",{"_index":82,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"components/BsEdgeInfoCard.html":{},"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/CustomData.html":{},"components/DataModalComponent.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/FacetChartDataPoint.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{},"components/FacetNgxChart.html":{},"components/FacetWrapperComponent.html":{},"interfaces/HeatmapItem.html":{},"components/MapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"components/NgxChart.html":{},"interfaces/Node.html":{},"interfaces/NodeData.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{}}}],["border",{"_index":643,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsNodeInfoCard.html":{},"components/BsTooltipComponent.html":{},"interfaces/NodeData.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["both",{"_index":424,"title":{},"body":{"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"interfaces/CustomData.html":{},"classes/DynamicEdgeProvider.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["bottom",{"_index":1014,"title":{},"body":{"components/BsHeatmapComponent.html":{},"components/FacetWrapperComponent.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{}}}],["bounds",{"_index":2552,"title":{},"body":{"components/MapComponent.html":{}}}],["bracket",{"_index":3357,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["breadcrumb",{"_index":927,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{}}}],["break",{"_index":1574,"title":{},"body":{"interfaces/Column.html":{}}}],["briefly",{"_index":1391,"title":{},"body":{"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"components/NgxChart.html":{}}}],["browse",{"_index":4108,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":4107,"title":{},"body":{"modules.html":{}}}],["brush",{"_index":3409,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["brush's",{"_index":3592,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["brushbehavior",{"_index":3401,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["brushing",{"_index":3417,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["brushselection",{"_index":3405,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["bsactionmodule",{"_index":37,"title":{},"body":{"modules/AgGridModule.html":{},"modules/BsHeatmapModule.html":{},"modules/BsTimelineModule.html":{},"modules/FinanceModule.html":{},"modules/GoogleMapsModule.html":{},"modules/NetworkModule.html":{}}}],["bsadvancedmodule",{"_index":1304,"title":{},"body":{"modules/BsTimelineModule.html":{}}}],["bsedgeinfocard",{"_index":621,"title":{"components/BsEdgeInfoCard.html":{}},"body":{"components/BsEdgeInfoCard.html":{},"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"components/BsTooltipComponent.html":{},"components/DataModalComponent.html":{},"components/FacetNgxChart.html":{},"components/FacetWrapperComponent.html":{},"components/MapComponent.html":{},"modules/NetworkModule.html":{},"components/NgxChart.html":{},"components/ResultTimeline.html":{},"components/TimelineLegendComponent.html":{},"coverage.html":{},"index.html":{}}}],["bsfacetdate",{"_index":710,"title":{"components/BsFacetDate.html":{}},"body":{"components/BsEdgeInfoCard.html":{},"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"modules/BsTimelineModule.html":{},"components/BsTooltipComponent.html":{},"components/DataModalComponent.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{},"components/FacetNgxChart.html":{},"components/FacetWrapperComponent.html":{},"components/MapComponent.html":{},"components/NgxChart.html":{},"components/ResultTimeline.html":{},"components/TimelineLegendComponent.html":{},"coverage.html":{},"index.html":{}}}],["bsfacetheatmapcomponent",{"_index":712,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"modules/BsHeatmapModule.html":{},"components/BsNodeInfoCard.html":{},"components/BsTooltipComponent.html":{},"components/DataModalComponent.html":{},"components/FacetNgxChart.html":{},"components/FacetWrapperComponent.html":{},"components/MapComponent.html":{},"components/NgxChart.html":{},"components/ResultTimeline.html":{},"components/TimelineLegendComponent.html":{},"coverage.html":{},"index.html":{}}}],["bsfacetmodule",{"_index":41,"title":{},"body":{"modules/AgGridModule.html":{},"modules/BsTimelineModule.html":{},"modules/GoogleMapsModule.html":{},"modules/NetworkModule.html":{}}}],["bsfacettimelinecomponent",{"_index":714,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"modules/BsTimelineModule.html":{},"components/BsTooltipComponent.html":{},"components/DataModalComponent.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{},"components/FacetNgxChart.html":{},"components/FacetWrapperComponent.html":{},"components/MapComponent.html":{},"components/NgxChart.html":{},"components/ResultTimeline.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"components/TimelineLegendComponent.html":{},"interfaces/TimelineRecords.html":{},"coverage.html":{},"index.html":{}}}],["bsfacettimelinecomponent.createaggregationevents(config",{"_index":3241,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["bsfacettimelinecomponent.createtimeseries",{"_index":907,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{}}}],["bsfacettimelinecomponent.createtimeseries(config",{"_index":3236,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["bsfacettimelinecomponent.defaultrecordstyle(r.$selected",{"_index":3253,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["bsheatmapcomponent",{"_index":716,"title":{"components/BsHeatmapComponent.html":{}},"body":{"components/BsEdgeInfoCard.html":{},"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"modules/BsHeatmapModule.html":{},"components/BsNodeInfoCard.html":{},"components/BsTooltipComponent.html":{},"components/DataModalComponent.html":{},"components/FacetNgxChart.html":{},"components/FacetWrapperComponent.html":{},"interfaces/HeatmapItem.html":{},"components/MapComponent.html":{},"components/NgxChart.html":{},"components/ResultTimeline.html":{},"components/TimelineLegendComponent.html":{},"coverage.html":{},"index.html":{}}}],["bsheatmapmodule",{"_index":1240,"title":{"modules/BsHeatmapModule.html":{}},"body":{"modules/BsHeatmapModule.html":{},"modules/BsTimelineModule.html":{},"modules/FinanceModule.html":{},"index.html":{},"modules.html":{}}}],["bsmodalmodule",{"_index":39,"title":{},"body":{"modules/AgGridModule.html":{}}}],["bsnodeinfocard",{"_index":717,"title":{"components/BsNodeInfoCard.html":{}},"body":{"components/BsEdgeInfoCard.html":{},"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"components/BsTooltipComponent.html":{},"components/DataModalComponent.html":{},"components/FacetNgxChart.html":{},"components/FacetWrapperComponent.html":{},"components/MapComponent.html":{},"modules/NetworkModule.html":{},"components/NgxChart.html":{},"interfaces/NodeData.html":{},"components/ResultTimeline.html":{},"components/TimelineLegendComponent.html":{},"coverage.html":{},"index.html":{}}}],["bsresultsheatmapview",{"_index":718,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"modules/BsHeatmapModule.html":{},"components/BsNodeInfoCard.html":{},"components/BsTooltipComponent.html":{},"components/DataModalComponent.html":{},"components/FacetNgxChart.html":{},"components/FacetWrapperComponent.html":{},"components/MapComponent.html":{},"components/NgxChart.html":{},"components/ResultTimeline.html":{},"components/TimelineLegendComponent.html":{},"coverage.html":{},"index.html":{}}}],["bsselectionmodule",{"_index":1245,"title":{},"body":{"modules/BsHeatmapModule.html":{},"modules/BsTimelineModule.html":{},"modules/FusionChartsModule.html":{},"modules/GoogleMapsModule.html":{},"modules/NgxChartsModule.html":{}}}],["bstimelinecomponent",{"_index":720,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"modules/BsTimelineModule.html":{},"components/BsTooltipComponent.html":{},"components/DataModalComponent.html":{},"components/FacetNgxChart.html":{},"components/FacetWrapperComponent.html":{},"components/MapComponent.html":{},"components/NgxChart.html":{},"components/ResultTimeline.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"components/TimelineLegendComponent.html":{},"interfaces/TimelineSeries.html":{},"coverage.html":{},"index.html":{}}}],["bstimelinecomponent.counter",{"_index":3423,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["bstimelinemodule",{"_index":1295,"title":{"modules/BsTimelineModule.html":{}},"body":{"modules/BsTimelineModule.html":{},"index.html":{},"modules.html":{}}}],["bstooltipcomponent",{"_index":721,"title":{"components/BsTooltipComponent.html":{}},"body":{"components/BsEdgeInfoCard.html":{},"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"modules/BsHeatmapModule.html":{},"components/BsNodeInfoCard.html":{},"components/BsTooltipComponent.html":{},"components/DataModalComponent.html":{},"components/FacetNgxChart.html":{},"components/FacetWrapperComponent.html":{},"components/MapComponent.html":{},"components/NgxChart.html":{},"components/ResultTimeline.html":{},"components/TimelineLegendComponent.html":{},"coverage.html":{},"index.html":{}}}],["buckets",{"_index":988,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["bugs",{"_index":3816,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["build",{"_index":1037,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["buildchart",{"_index":981,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["buildchart(update",{"_index":1030,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["builds",{"_index":1033,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["built",{"_index":2329,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["button",{"_index":1495,"title":{},"body":{"interfaces/Column.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{}}}],["buttons",{"_index":1493,"title":{},"body":{"interfaces/Column.html":{}}}],["c",{"_index":2688,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{}}}],["c.field",{"_index":1707,"title":{},"body":{"interfaces/Column.html":{}}}],["c.hide",{"_index":1713,"title":{},"body":{"interfaces/Column.html":{}}}],["c3e6cb",{"_index":2323,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["cache",{"_index":2036,"title":{},"body":{"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{}}}],["call",{"_index":452,"title":{},"body":{"classes/AsyncRecordsProvider.html":{},"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{}}}],["call(d3.axisleft(this.y).ticksize(0",{"_index":1152,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["call(d3.axistop(this.x).ticksize(0",{"_index":1148,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["call(this.brushbehavior",{"_index":3470,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["call(this.zoombehavior",{"_index":3555,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["callback",{"_index":1739,"title":{},"body":{"interfaces/Column.html":{}}}],["callbacks",{"_index":3289,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{}}}],["called",{"_index":309,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"components/BsHeatmapComponent.html":{},"interfaces/Column.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"components/FacetWrapperComponent.html":{},"interfaces/HeatmapItem.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{}}}],["calling",{"_index":2722,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["calls",{"_index":3895,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["cancel",{"_index":2179,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["candy",{"_index":2539,"title":{},"body":{"modules/FusionChartsModule.html":{}}}],["candytheme",{"_index":2536,"title":{},"body":{"modules/FusionChartsModule.html":{}}}],["capture",{"_index":1775,"title":{},"body":{"interfaces/Column.html":{}}}],["card",{"_index":632,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsNodeInfoCard.html":{},"interfaces/NodeData.html":{}}}],["card'},{'name",{"_index":709,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"components/BsTooltipComponent.html":{},"components/DataModalComponent.html":{},"components/FacetNgxChart.html":{},"components/FacetWrapperComponent.html":{},"components/MapComponent.html":{},"components/NgxChart.html":{},"components/ResultTimeline.html":{},"components/TimelineLegendComponent.html":{}}}],["card.component",{"_index":2906,"title":{},"body":{"modules/NetworkModule.html":{}}}],["card.component.html",{"_index":649,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsNodeInfoCard.html":{},"interfaces/NodeData.html":{}}}],["card.component.ts",{"_index":628,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsNodeInfoCard.html":{},"interfaces/NodeData.html":{},"coverage.html":{}}}],["card.component.ts:24",{"_index":655,"title":{},"body":{"components/BsEdgeInfoCard.html":{}}}],["card.component.ts:26",{"_index":659,"title":{},"body":{"components/BsEdgeInfoCard.html":{}}}],["card.component.ts:27",{"_index":660,"title":{},"body":{"components/BsEdgeInfoCard.html":{}}}],["card.component.ts:29",{"_index":661,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsNodeInfoCard.html":{}}}],["card.component.ts:30",{"_index":662,"title":{},"body":{"components/BsEdgeInfoCard.html":{}}}],["card.component.ts:31",{"_index":1254,"title":{},"body":{"components/BsNodeInfoCard.html":{}}}],["card.component.ts:32",{"_index":658,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsNodeInfoCard.html":{}}}],["card.component.ts:34",{"_index":1256,"title":{},"body":{"components/BsNodeInfoCard.html":{}}}],["card.component.ts:36",{"_index":1255,"title":{},"body":{"components/BsNodeInfoCard.html":{}}}],["card.component.ts:38",{"_index":1253,"title":{},"body":{"components/BsNodeInfoCard.html":{}}}],["card.component.ts:40",{"_index":657,"title":{},"body":{"components/BsEdgeInfoCard.html":{}}}],["card.component.ts:70",{"_index":1252,"title":{},"body":{"components/BsNodeInfoCard.html":{}}}],["cards",{"_index":687,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsNodeInfoCard.html":{},"interfaces/NodeData.html":{},"interfaces/VisEvent.html":{}}}],["case",{"_index":1380,"title":{},"body":{"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/Column.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"components/NgxChart.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"miscellaneous/functions.html":{}}}],["catch",{"_index":3045,"title":{},"body":{"components/ResultTimeline.html":{}}}],["categories",{"_index":2679,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{}}}],["category",{"_index":2661,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{}}}],["cause",{"_index":3687,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["caused",{"_index":2721,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["cc",{"_index":369,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{}}}],["cc?.column.split",{"_index":371,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{}}}],["ccaggregation",{"_index":903,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["ccaggregation?.mask",{"_index":3326,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["cccolumn",{"_index":1405,"title":{},"body":{"interfaces/Column.html":{},"components/DataModalComponent.html":{}}}],["cdref",{"_index":754,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{}}}],["cell",{"_index":1668,"title":{},"body":{"interfaces/Column.html":{},"components/DataModalComponent.html":{}}}],["cell's",{"_index":1678,"title":{},"body":{"interfaces/Column.html":{}}}],["celldoubleclickedevent",{"_index":1421,"title":{},"body":{"interfaces/Column.html":{}}}],["cellrenderer",{"_index":1536,"title":{},"body":{"interfaces/Column.html":{}}}],["center",{"_index":3132,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["centered",{"_index":2640,"title":{},"body":{"components/MapComponent.html":{}}}],["change",{"_index":3454,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["change.currentvalue",{"_index":3684,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["change.previousvalue",{"_index":3682,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["changed",{"_index":1780,"title":{},"body":{"interfaces/Column.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["changedetectorref",{"_index":781,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{}}}],["changes",{"_index":803,"title":{},"body":{"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"interfaces/Column.html":{},"interfaces/FacetChartDataPoint.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{},"components/FacetNgxChart.html":{},"interfaces/HeatmapItem.html":{},"components/MapComponent.html":{},"components/NgxChart.html":{},"components/ResultTimeline.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"miscellaneous/functions.html":{}}}],["changes.events",{"_index":3164,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["changes.results",{"_index":879,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/FacetChartDataPoint.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{},"components/FacetNgxChart.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["changes.toolbaractions",{"_index":1523,"title":{},"body":{"interfaces/Column.html":{}}}],["changes[\"data",{"_index":3461,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["changes[\"events",{"_index":3194,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["changes[\"results",{"_index":2714,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{}}}],["changes[\"selection",{"_index":3456,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["changes[\"timeseries",{"_index":3187,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["changes[\"width",{"_index":3465,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["changes['dates",{"_index":3000,"title":{},"body":{"components/ResultTimeline.html":{}}}],["changes['events",{"_index":3001,"title":{},"body":{"components/ResultTimeline.html":{}}}],["changes['providers",{"_index":3764,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["chart",{"_index":1035,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"modules/FusionChartsModule.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyDatum.html":{},"components/NgxChart.html":{},"modules/NgxChartsModule.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["chart's",{"_index":2833,"title":{},"body":{"interfaces/MoneyDatum.html":{}}}],["chart'},{'name",{"_index":726,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"components/BsTooltipComponent.html":{},"components/DataModalComponent.html":{},"components/FacetNgxChart.html":{},"components/FacetWrapperComponent.html":{},"components/MapComponent.html":{},"components/NgxChart.html":{},"components/ResultTimeline.html":{},"components/TimelineLegendComponent.html":{}}}],["chart.html",{"_index":1352,"title":{},"body":{"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"components/NgxChart.html":{}}}],["chart.scss",{"_index":1353,"title":{},"body":{"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"components/NgxChart.html":{}}}],["chart.ts",{"_index":2317,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"coverage.html":{}}}],["chart.ts:112",{"_index":2444,"title":{},"body":{"components/FacetNgxChart.html":{}}}],["chart.ts:189",{"_index":2453,"title":{},"body":{"components/FacetNgxChart.html":{}}}],["chart.ts:204",{"_index":2449,"title":{},"body":{"components/FacetNgxChart.html":{}}}],["chart.ts:21",{"_index":2439,"title":{},"body":{"components/FacetNgxChart.html":{}}}],["chart.ts:215",{"_index":2447,"title":{},"body":{"components/FacetNgxChart.html":{}}}],["chart.ts:22",{"_index":2433,"title":{},"body":{"components/FacetNgxChart.html":{}}}],["chart.ts:23",{"_index":2434,"title":{},"body":{"components/FacetNgxChart.html":{}}}],["chart.ts:230",{"_index":2448,"title":{},"body":{"components/FacetNgxChart.html":{}}}],["chart.ts:235",{"_index":2441,"title":{},"body":{"components/FacetNgxChart.html":{}}}],["chart.ts:24",{"_index":2435,"title":{},"body":{"components/FacetNgxChart.html":{}}}],["chart.ts:25",{"_index":2437,"title":{},"body":{"components/FacetNgxChart.html":{}}}],["chart.ts:251",{"_index":2445,"title":{},"body":{"components/FacetNgxChart.html":{}}}],["chart.ts:255",{"_index":2442,"title":{},"body":{"components/FacetNgxChart.html":{}}}],["chart.ts:26",{"_index":2436,"title":{},"body":{"components/FacetNgxChart.html":{}}}],["chart.ts:264",{"_index":2446,"title":{},"body":{"components/FacetNgxChart.html":{}}}],["chart.ts:27",{"_index":2438,"title":{},"body":{"components/FacetNgxChart.html":{}}}],["chart.ts:28",{"_index":2440,"title":{},"body":{"components/FacetNgxChart.html":{}}}],["chart.ts:31",{"_index":2450,"title":{},"body":{"components/FacetNgxChart.html":{}}}],["chart.ts:34",{"_index":2451,"title":{},"body":{"components/FacetNgxChart.html":{}}}],["chart.ts:35",{"_index":2452,"title":{},"body":{"components/FacetNgxChart.html":{}}}],["chart.ts:46",{"_index":2432,"title":{},"body":{"components/FacetNgxChart.html":{}}}],["chart.ts:91",{"_index":2443,"title":{},"body":{"components/FacetNgxChart.html":{}}}],["chart.ts:98",{"_index":2454,"title":{},"body":{"components/FacetNgxChart.html":{}}}],["chart/chart",{"_index":2318,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"modules/FusionChartsModule.html":{},"modules/NgxChartsModule.html":{}}}],["chart/facet",{"_index":2316,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"modules/NgxChartsModule.html":{},"coverage.html":{}}}],["chartcomponent",{"_index":2917,"title":{},"body":{"components/NgxChart.html":{}}}],["chartcomponent(type",{"_index":2923,"title":{},"body":{"components/NgxChart.html":{}}}],["chartcomponent(type:string",{"_index":1378,"title":{},"body":{"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"components/NgxChart.html":{}}}],["chartdatapoint",{"_index":1339,"title":{"interfaces/ChartDataPoint.html":{}},"body":{"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"components/NgxChart.html":{},"coverage.html":{}}}],["chartoptions",{"_index":1349,"title":{"interfaces/ChartOptions.html":{}},"body":{"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"components/NgxChart.html":{},"coverage.html":{}}}],["charts",{"_index":1347,"title":{},"body":{"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"modules/FusionChartsModule.html":{},"components/NgxChart.html":{},"modules/NgxChartsModule.html":{},"dependencies.html":{}}}],["charts.module.ts",{"_index":2952,"title":{},"body":{"modules/NgxChartsModule.html":{}}}],["charts/chart/chart.ts",{"_index":1340,"title":{},"body":{"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"components/NgxChart.html":{},"coverage.html":{}}}],["charts/chart/chart.ts:28",{"_index":2921,"title":{},"body":{"components/NgxChart.html":{}}}],["charts/chart/chart.ts:29",{"_index":2920,"title":{},"body":{"components/NgxChart.html":{}}}],["charts/chart/chart.ts:30",{"_index":2922,"title":{},"body":{"components/NgxChart.html":{}}}],["charts/chart/chart.ts:31",{"_index":2937,"title":{},"body":{"components/NgxChart.html":{}}}],["charts/chart/chart.ts:32",{"_index":2935,"title":{},"body":{"components/NgxChart.html":{}}}],["charts/chart/chart.ts:33",{"_index":2931,"title":{},"body":{"components/NgxChart.html":{}}}],["charts/chart/chart.ts:34",{"_index":2932,"title":{},"body":{"components/NgxChart.html":{}}}],["charts/chart/chart.ts:35",{"_index":2919,"title":{},"body":{"components/NgxChart.html":{}}}],["charts/chart/chart.ts:43",{"_index":2929,"title":{},"body":{"components/NgxChart.html":{}}}],["charts/chart/chart.ts:49",{"_index":2928,"title":{},"body":{"components/NgxChart.html":{}}}],["charts/chart/chart.ts:57",{"_index":2927,"title":{},"body":{"components/NgxChart.html":{}}}],["charts/chart/chart.ts:62",{"_index":2939,"title":{},"body":{"components/NgxChart.html":{}}}],["charts/chart/chart.ts:66",{"_index":2924,"title":{},"body":{"components/NgxChart.html":{}}}],["charts/chart/chart.ts:75",{"_index":2941,"title":{},"body":{"components/NgxChart.html":{}}}],["charts/chart/chart.ts:79",{"_index":2926,"title":{},"body":{"components/NgxChart.html":{}}}],["charts/chart/chart.ts:83",{"_index":2925,"title":{},"body":{"components/NgxChart.html":{}}}],["charts/chart/chart.ts:92",{"_index":2933,"title":{},"body":{"components/NgxChart.html":{}}}],["charts/facet",{"_index":2315,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"coverage.html":{}}}],["charts/ngx",{"_index":2951,"title":{},"body":{"modules/NgxChartsModule.html":{}}}],["charttype",{"_index":1376,"title":{},"body":{"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"components/NgxChart.html":{}}}],["check",{"_index":1663,"title":{},"body":{"interfaces/Column.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["checkbox",{"_index":1584,"title":{},"body":{"interfaces/Column.html":{}}}],["checkboxes",{"_index":1460,"title":{},"body":{"interfaces/Column.html":{}}}],["checkdatachanges(change",{"_index":3680,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["children",{"_index":360,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"interfaces/Column.html":{},"interfaces/VisEvent.html":{}}}],["choice",{"_index":1463,"title":{},"body":{"interfaces/Column.html":{}}}],["circle",{"_index":340,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{}}}],["circular",{"_index":639,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsNodeInfoCard.html":{},"interfaces/NodeData.html":{}}}],["class",{"_index":53,"title":{"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"classes/DynamicEdgeProvider.html":{},"classes/DynamicNodeProvider.html":{},"classes/NetworkDataset.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{}},"body":{"modules/AgGridModule.html":{},"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"components/BsEdgeInfoCard.html":{},"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"modules/BsHeatmapModule.html":{},"components/BsNodeInfoCard.html":{},"modules/BsTimelineModule.html":{},"components/BsTooltipComponent.html":{},"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/Column.html":{},"interfaces/CustomData.html":{},"components/DataModalComponent.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/FacetChartDataPoint.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{},"components/FacetNgxChart.html":{},"components/FacetWrapperComponent.html":{},"modules/FinanceModule.html":{},"modules/FusionChartsModule.html":{},"modules/GoogleMapsModule.html":{},"interfaces/HeatmapItem.html":{},"components/MapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"modules/NetworkModule.html":{},"interfaces/NetworkProvider.html":{},"components/NgxChart.html":{},"modules/NgxChartsModule.html":{},"interfaces/Node.html":{},"interfaces/NodeData.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"components/ResultTimeline.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineEventType.html":{},"components/TimelineLegendComponent.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{},"modules/VisTimelineModule.html":{},"coverage.html":{}}}],["class=\"me",{"_index":696,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsNodeInfoCard.html":{}}}],["classes",{"_index":376,"title":{},"body":{"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"classes/DynamicEdgeProvider.html":{},"classes/DynamicNodeProvider.html":{},"classes/NetworkDataset.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{},"index.html":{}}}],["clause",{"_index":1628,"title":{},"body":{"interfaces/Column.html":{}}}],["clean",{"_index":1500,"title":{},"body":{"interfaces/Column.html":{}}}],["cleanremovenode",{"_index":2221,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["cleanremovenode(nodeid",{"_index":2233,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["clear",{"_index":1701,"title":{},"body":{"interfaces/Column.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"components/MapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/VisEvent.html":{}}}],["clearfilters",{"_index":2330,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"components/MapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/VisEvent.html":{}}}],["clearfiltersaction",{"_index":755,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{}}}],["clearing",{"_index":2616,"title":{},"body":{"components/MapComponent.html":{}}}],["clearly",{"_index":3693,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["clears",{"_index":1843,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["click",{"_index":1355,"title":{},"body":{"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/Column.html":{},"components/FacetNgxChart.html":{},"components/NgxChart.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{}}}],["click(datapoint",{"_index":2415,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["clicked",{"_index":310,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"components/MapComponent.html":{},"interfaces/MoneyDatum.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/VisEvent.html":{},"miscellaneous/functions.html":{}}}],["clicks",{"_index":1053,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{}}}],["clientside",{"_index":1498,"title":{},"body":{"interfaces/Column.html":{}}}],["clipboard",{"_index":1726,"title":{},"body":{"interfaces/Column.html":{},"components/DataModalComponent.html":{}}}],["close",{"_index":1978,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["closed",{"_index":650,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsNodeInfoCard.html":{},"components/MapComponent.html":{},"interfaces/NodeData.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/VisEvent.html":{}}}],["closeness",{"_index":3649,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["closetooltip",{"_index":3318,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["closewindow",{"_index":2558,"title":{},"body":{"components/MapComponent.html":{}}}],["cloud",{"_index":2664,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{}}}],["cloud'},{'name",{"_index":734,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"components/BsTooltipComponent.html":{},"components/DataModalComponent.html":{},"components/FacetNgxChart.html":{},"components/FacetWrapperComponent.html":{},"components/MapComponent.html":{},"components/NgxChart.html":{},"components/ResultTimeline.html":{},"components/TimelineLegendComponent.html":{}}}],["cloud.component",{"_index":2524,"title":{},"body":{"modules/FinanceModule.html":{}}}],["cloud.component.html",{"_index":2665,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{}}}],["cloud.component.scss",{"_index":2666,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{}}}],["cloud.component.ts",{"_index":2660,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"coverage.html":{}}}],["cloud/money",{"_index":2523,"title":{},"body":{"modules/FinanceModule.html":{},"interfaces/MoneyCloudDatum.html":{},"coverage.html":{}}}],["clunky",{"_index":1388,"title":{},"body":{"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"components/NgxChart.html":{}}}],["cluster_aggridmodule",{"_index":4,"title":{},"body":{"modules/AgGridModule.html":{},"index.html":{}}}],["cluster_aggridmodule_declarations",{"_index":5,"title":{},"body":{"modules/AgGridModule.html":{},"index.html":{}}}],["cluster_aggridmodule_exports",{"_index":6,"title":{},"body":{"modules/AgGridModule.html":{},"index.html":{}}}],["cluster_bsheatmapmodule",{"_index":1241,"title":{},"body":{"modules/BsHeatmapModule.html":{},"index.html":{}}}],["cluster_bsheatmapmodule_declarations",{"_index":1243,"title":{},"body":{"modules/BsHeatmapModule.html":{},"index.html":{}}}],["cluster_bsheatmapmodule_exports",{"_index":1242,"title":{},"body":{"modules/BsHeatmapModule.html":{},"index.html":{}}}],["cluster_bstimelinemodule",{"_index":1296,"title":{},"body":{"modules/BsTimelineModule.html":{},"index.html":{}}}],["cluster_bstimelinemodule_declarations",{"_index":1299,"title":{},"body":{"modules/BsTimelineModule.html":{},"index.html":{}}}],["cluster_bstimelinemodule_exports",{"_index":1297,"title":{},"body":{"modules/BsTimelineModule.html":{},"index.html":{}}}],["cluster_bstimelinemodule_imports",{"_index":1298,"title":{},"body":{"modules/BsTimelineModule.html":{}}}],["cluster_financemodule",{"_index":2517,"title":{},"body":{"modules/FinanceModule.html":{},"index.html":{}}}],["cluster_financemodule_declarations",{"_index":2520,"title":{},"body":{"modules/FinanceModule.html":{},"index.html":{}}}],["cluster_financemodule_exports",{"_index":2518,"title":{},"body":{"modules/FinanceModule.html":{},"index.html":{}}}],["cluster_financemodule_imports",{"_index":2519,"title":{},"body":{"modules/FinanceModule.html":{}}}],["cluster_fusionchartsmodule",{"_index":2526,"title":{},"body":{"modules/FusionChartsModule.html":{},"index.html":{}}}],["cluster_fusionchartsmodule_declarations",{"_index":2527,"title":{},"body":{"modules/FusionChartsModule.html":{},"index.html":{}}}],["cluster_fusionchartsmodule_exports",{"_index":2528,"title":{},"body":{"modules/FusionChartsModule.html":{},"index.html":{}}}],["cluster_googlemapsmodule",{"_index":2542,"title":{},"body":{"modules/GoogleMapsModule.html":{},"index.html":{}}}],["cluster_googlemapsmodule_declarations",{"_index":2543,"title":{},"body":{"modules/GoogleMapsModule.html":{},"index.html":{}}}],["cluster_googlemapsmodule_exports",{"_index":2544,"title":{},"body":{"modules/GoogleMapsModule.html":{},"index.html":{}}}],["cluster_networkmodule",{"_index":2900,"title":{},"body":{"modules/NetworkModule.html":{},"index.html":{}}}],["cluster_networkmodule_declarations",{"_index":2901,"title":{},"body":{"modules/NetworkModule.html":{},"index.html":{}}}],["cluster_networkmodule_exports",{"_index":2902,"title":{},"body":{"modules/NetworkModule.html":{},"index.html":{}}}],["cluster_ngxchartsmodule",{"_index":2948,"title":{},"body":{"modules/NgxChartsModule.html":{},"index.html":{}}}],["cluster_ngxchartsmodule_declarations",{"_index":2950,"title":{},"body":{"modules/NgxChartsModule.html":{},"index.html":{}}}],["cluster_ngxchartsmodule_exports",{"_index":2949,"title":{},"body":{"modules/NgxChartsModule.html":{},"index.html":{}}}],["cluster_vistimelinemodule",{"_index":3912,"title":{},"body":{"modules/VisTimelineModule.html":{},"index.html":{}}}],["cluster_vistimelinemodule_declarations",{"_index":3914,"title":{},"body":{"modules/VisTimelineModule.html":{},"index.html":{}}}],["cluster_vistimelinemodule_exports",{"_index":3913,"title":{},"body":{"modules/VisTimelineModule.html":{},"index.html":{}}}],["clustering",{"_index":3656,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["col",{"_index":549,"title":{},"body":{"classes/BaseProvider.html":{},"interfaces/Column.html":{},"components/FacetWrapperComponent.html":{}}}],["col.$column",{"_index":1548,"title":{},"body":{"interfaces/Column.html":{}}}],["col.$column?.label",{"_index":1553,"title":{},"body":{"interfaces/Column.html":{}}}],["col.cellrenderer",{"_index":1557,"title":{},"body":{"interfaces/Column.html":{}}}],["col.cellrendererframework",{"_index":1558,"title":{},"body":{"interfaces/Column.html":{}}}],["col.checkboxselection",{"_index":1587,"title":{},"body":{"interfaces/Column.html":{}}}],["col.field",{"_index":1555,"title":{},"body":{"interfaces/Column.html":{}}}],["col.filter",{"_index":1572,"title":{},"body":{"interfaces/Column.html":{}}}],["col.headername",{"_index":1552,"title":{},"body":{"interfaces/Column.html":{}}}],["col.headertooltip",{"_index":1556,"title":{},"body":{"interfaces/Column.html":{}}}],["col.hide",{"_index":1564,"title":{},"body":{"interfaces/Column.html":{}}}],["col.sortable",{"_index":1560,"title":{},"body":{"interfaces/Column.html":{}}}],["col.tooltipvaluegetter",{"_index":1550,"title":{},"body":{"interfaces/Column.html":{}}}],["col.width",{"_index":1565,"title":{},"body":{"interfaces/Column.html":{}}}],["coldef",{"_index":1404,"title":{},"body":{"interfaces/Column.html":{}}}],["coldefs",{"_index":1482,"title":{},"body":{"interfaces/Column.html":{}}}],["colid",{"_index":1631,"title":{},"body":{"interfaces/Column.html":{}}}],["collapsed",{"_index":480,"title":{},"body":{"classes/AsyncRecordsProvider.html":{},"classes/DynamicEdgeProvider.html":{},"classes/DynamicNodeProvider.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{}}}],["collapsemodule",{"_index":1305,"title":{},"body":{"modules/BsTimelineModule.html":{},"modules/NetworkModule.html":{}}}],["collapsing",{"_index":464,"title":{},"body":{"classes/AsyncRecordsProvider.html":{},"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["color",{"_index":580,"title":{},"body":{"classes/BaseProvider.html":{},"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"components/BsTooltipComponent.html":{},"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"components/NgxChart.html":{},"interfaces/TimelineEventType.html":{},"components/TimelineLegendComponent.html":{},"miscellaneous/variables.html":{}}}],["colors",{"_index":2319,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["colorscheme",{"_index":989,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"interfaces/HeatmapItem.html":{},"components/NgxChart.html":{}}}],["column",{"_index":1402,"title":{"interfaces/Column.html":{}},"body":{"interfaces/Column.html":{},"components/DataModalComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"components/TimelineLegendComponent.html":{},"coverage.html":{}}}],["column's",{"_index":1496,"title":{},"body":{"interfaces/Column.html":{}}}],["column).$column",{"_index":1756,"title":{},"body":{"interfaces/Column.html":{}}}],["columnapi",{"_index":1418,"title":{},"body":{"interfaces/Column.html":{}}}],["columns",{"_index":1440,"title":{},"body":{"interfaces/Column.html":{}}}],["columnsaction",{"_index":1497,"title":{},"body":{"interfaces/Column.html":{}}}],["columnvisibility",{"_index":1447,"title":{},"body":{"interfaces/Column.html":{}}}],["combination",{"_index":3140,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["combined",{"_index":3115,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{}}}],["combinelastest",{"_index":3141,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["combinelatest",{"_index":2013,"title":{},"body":{"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/VisEvent.html":{}}}],["combinelatest(sourceproviders.map(p",{"_index":2042,"title":{},"body":{"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{}}}],["combinelatest(this.events$).pipe",{"_index":3197,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["combinelatest(this.timeseries",{"_index":3191,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["come",{"_index":2028,"title":{},"body":{"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/VisEvent.html":{}}}],["comes",{"_index":252,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["commonmodule",{"_index":25,"title":{},"body":{"modules/AgGridModule.html":{},"modules/BsHeatmapModule.html":{},"modules/BsTimelineModule.html":{},"modules/FinanceModule.html":{},"modules/FusionChartsModule.html":{},"modules/GoogleMapsModule.html":{},"modules/NetworkModule.html":{},"modules/NgxChartsModule.html":{},"modules/VisTimelineModule.html":{}}}],["community",{"_index":1430,"title":{},"body":{"interfaces/Column.html":{},"components/FacetWrapperComponent.html":{},"dependencies.html":{}}}],["community/dist/lib/columncontroller/columnapi",{"_index":1432,"title":{},"body":{"interfaces/Column.html":{}}}],["companies",{"_index":4078,"title":{},"body":{"miscellaneous/functions.html":{}}}],["company",{"_index":4064,"title":{},"body":{"miscellaneous/functions.html":{}}}],["compare",{"_index":3697,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["compares",{"_index":3315,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["compatible",{"_index":1813,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["completed",{"_index":3335,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["complexity",{"_index":138,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{}}}],["component",{"_index":620,"title":{"components/BsEdgeInfoCard.html":{},"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"components/BsTooltipComponent.html":{},"components/DataModalComponent.html":{},"components/FacetNgxChart.html":{},"components/FacetWrapperComponent.html":{},"components/MapComponent.html":{},"components/NgxChart.html":{},"components/ResultTimeline.html":{},"components/TimelineLegendComponent.html":{}},"body":{"components/BsEdgeInfoCard.html":{},"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"modules/BsTimelineModule.html":{},"components/BsTooltipComponent.html":{},"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/Column.html":{},"components/DataModalComponent.html":{},"interfaces/FacetChartDataPoint.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{},"components/FacetNgxChart.html":{},"components/FacetWrapperComponent.html":{},"interfaces/HeatmapItem.html":{},"components/MapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"components/NgxChart.html":{},"interfaces/NodeData.html":{},"components/ResultTimeline.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineEventType.html":{},"components/TimelineLegendComponent.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{},"coverage.html":{}}}],["component_template",{"_index":704,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"components/BsTooltipComponent.html":{},"components/DataModalComponent.html":{},"components/FacetNgxChart.html":{},"components/FacetWrapperComponent.html":{},"components/MapComponent.html":{},"components/NgxChart.html":{},"components/ResultTimeline.html":{},"components/TimelineLegendComponent.html":{}}}],["components",{"_index":622,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"components/BsTooltipComponent.html":{},"interfaces/Column.html":{},"components/DataModalComponent.html":{},"components/FacetNgxChart.html":{},"components/FacetWrapperComponent.html":{},"components/MapComponent.html":{},"components/NgxChart.html":{},"components/ResultTimeline.html":{},"components/TimelineLegendComponent.html":{},"index.html":{}}}],["compress",{"_index":1972,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["compute",{"_index":195,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["computed",{"_index":2673,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{}}}],["computes",{"_index":2137,"title":{},"body":{"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/MoneyDatum.html":{}}}],["concretely",{"_index":2025,"title":{},"body":{"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{}}}],["config",{"_index":3208,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["config.aggregations.length",{"_index":3277,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["config.current",{"_index":3213,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["config.default",{"_index":3214,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["config.display",{"_index":3255,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["config.display(r",{"_index":3256,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["config.getdate(item",{"_index":3330,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["config.getdate(item).toutcstring()+\"|\"+config.getdisplay(item",{"_index":3329,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["config.getdisplay(item",{"_index":3333,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["config.maxnmonths.foreach((maxnmonths",{"_index":3283,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["config.maxnmonths.length",{"_index":3276,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["config.name",{"_index":3324,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["config.size",{"_index":3247,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["config.size(item",{"_index":3331,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["config.size(r",{"_index":3250,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["config.styles",{"_index":3252,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["config.styles(item",{"_index":3332,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["config.styles(r",{"_index":3254,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["configs.ts",{"_index":3978,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["configuration",{"_index":147,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"interfaces/Column.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["configure",{"_index":1471,"title":{},"body":{"interfaces/Column.html":{}}}],["configured",{"_index":3074,"title":{},"body":{"classes/SelectedRecordsProvider.html":{}}}],["conflicts",{"_index":1922,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["connected",{"_index":321,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["connectednodes",{"_index":322,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{}}}],["connectednodes.length",{"_index":327,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{}}}],["console.error('invalid",{"_index":3513,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["console.error(config",{"_index":3278,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["console.log",{"_index":3023,"title":{},"body":{"components/ResultTimeline.html":{}}}],["console.log(\"aginit",{"_index":2513,"title":{},"body":{"components/FacetWrapperComponent.html":{}}}],["console.log(\"cooc1:\",data_date[i+2",{"_index":3015,"title":{},"body":{"components/ResultTimeline.html":{}}}],["console.log(\"date:\",data_date[i+1",{"_index":3035,"title":{},"body":{"components/ResultTimeline.html":{}}}],["console.log(\"no",{"_index":3064,"title":{},"body":{"components/ResultTimeline.html":{}}}],["console.log('event",{"_index":3052,"title":{},"body":{"components/ResultTimeline.html":{}}}],["console.log('selected",{"_index":3050,"title":{},"body":{"components/ResultTimeline.html":{}}}],["console.log(cooc",{"_index":3018,"title":{},"body":{"components/ResultTimeline.html":{}}}],["console.log(data",{"_index":3043,"title":{},"body":{"components/ResultTimeline.html":{}}}],["console.log(properties",{"_index":3054,"title":{},"body":{"components/ResultTimeline.html":{}}}],["console.log(regdate.test(date",{"_index":3022,"title":{},"body":{"components/ResultTimeline.html":{}}}],["console.log(this.items.get(properties.items[0",{"_index":3057,"title":{},"body":{"components/ResultTimeline.html":{}}}],["console.log(year",{"_index":3021,"title":{},"body":{"components/ResultTimeline.html":{}}}],["console.warn(`aggregation",{"_index":221,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{}}}],["const",{"_index":200,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"classes/BaseProvider.html":{},"components/BsEdgeInfoCard.html":{},"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"interfaces/Column.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/FacetChartDataPoint.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{},"components/FacetNgxChart.html":{},"components/FacetWrapperComponent.html":{},"interfaces/HeatmapItem.html":{},"components/MapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeData.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"components/ResultTimeline.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{}}}],["constant",{"_index":3887,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["constant',true",{"_index":3900,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["constructed",{"_index":108,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{}}}],["constructor",{"_index":184,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/Column.html":{},"interfaces/CustomData.html":{},"components/DataModalComponent.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/FacetChartDataPoint.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{},"components/FacetNgxChart.html":{},"interfaces/HeatmapItem.html":{},"components/MapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"components/NgxChart.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"components/ResultTimeline.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{}}}],["constructor(el",{"_index":999,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["constructor(facetservice",{"_index":774,"title":{},"body":{"components/BsFacetDate.html":{},"components/FacetNgxChart.html":{}}}],["constructor(intlservice",{"_index":2918,"title":{},"body":{"components/NgxChart.html":{}}}],["constructor(model",{"_index":1989,"title":{},"body":{"components/DataModalComponent.html":{}}}],["constructor(name",{"_index":391,"title":{},"body":{"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"classes/DynamicEdgeProvider.html":{},"classes/DynamicNodeProvider.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{}}}],["constructor(public",{"_index":2997,"title":{},"body":{"components/ResultTimeline.html":{}}}],["constructor(searchservice",{"_index":2565,"title":{},"body":{"components/MapComponent.html":{}}}],["constructor(vistimelineservice",{"_index":2972,"title":{},"body":{"components/ResultTimeline.html":{}}}],["contain",{"_index":1535,"title":{},"body":{"interfaces/Column.html":{},"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"miscellaneous/functions.html":{}}}],["contained",{"_index":1859,"title":{},"body":{"interfaces/CustomData.html":{},"components/MapComponent.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"miscellaneous/functions.html":{}}}],["container",{"_index":1178,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["containing",{"_index":1437,"title":{},"body":{"interfaces/Column.html":{},"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{},"miscellaneous/functions.html":{}}}],["contains",{"_index":1806,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{},"miscellaneous/functions.html":{}}}],["content",{"_index":1310,"title":{},"body":{"components/BsTooltipComponent.html":{},"interfaces/Column.html":{},"components/ResultTimeline.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/VisEvent.html":{}}}],["contentchild",{"_index":3386,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{}}}],["contentchild(\"edgetpl",{"_index":3751,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["contentchild(\"nodetpl",{"_index":3749,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["contentchild(\"tooltiptpl",{"_index":3392,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["context",{"_index":297,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"classes/DynamicEdgeProvider.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/VisEvent.html":{}}}],["convenience",{"_index":62,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"classes/BaseProvider.html":{}}}],["convert",{"_index":1179,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["converted",{"_index":152,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{}}}],["cooc",{"_index":3011,"title":{},"body":{"components/ResultTimeline.html":{}}}],["cooc[0",{"_index":3030,"title":{},"body":{"components/ResultTimeline.html":{}}}],["coocaggregationdemo",{"_index":3981,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["coocaggregationdemo(providerfactory",{"_index":4062,"title":{},"body":{"miscellaneous/functions.html":{}}}],["cooccurrence",{"_index":68,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"miscellaneous/functions.html":{}}}],["coocrecorddemo",{"_index":3982,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["coocrecorddemo(providerfactory",{"_index":4065,"title":{},"body":{"miscellaneous/functions.html":{}}}],["cool",{"_index":1387,"title":{},"body":{"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"components/NgxChart.html":{}}}],["coordinate",{"_index":1180,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["coordinates",{"_index":3712,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["copy",{"_index":1655,"title":{},"body":{"interfaces/Column.html":{},"components/DataModalComponent.html":{}}}],["copyaction",{"_index":1987,"title":{},"body":{"components/DataModalComponent.html":{}}}],["copyselection",{"_index":1450,"title":{},"body":{"interfaces/Column.html":{}}}],["copytoclipboard",{"_index":1727,"title":{},"body":{"interfaces/Column.html":{}}}],["corresponding",{"_index":228,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"interfaces/CustomData.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["count",{"_index":166,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"classes/BaseProvider.html":{},"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeData.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["counter",{"_index":956,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/Column.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["counts",{"_index":300,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{}}}],["counts.get(d.category",{"_index":2740,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{}}}],["counts.get(money.value",{"_index":2840,"title":{},"body":{"interfaces/MoneyDatum.html":{}}}],["counts.set(item.value.tostring",{"_index":2836,"title":{},"body":{"interfaces/MoneyDatum.html":{}}}],["cover",{"_index":647,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsNodeInfoCard.html":{},"interfaces/NodeData.html":{}}}],["coverage",{"_index":3917,"title":{"coverage.html":{}},"body":{"coverage.html":{}}}],["create",{"_index":244,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"classes/BaseProvider.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"interfaces/Column.html":{},"interfaces/CustomData.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"interfaces/HeatmapItem.html":{},"interfaces/NodeData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{}}}],["createactions",{"_index":1637,"title":{},"body":{"interfaces/Column.html":{}}}],["createaggregationevents(config",{"_index":3327,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["createchartoptions",{"_index":2382,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["createcolumns",{"_index":1544,"title":{},"body":{"interfaces/Column.html":{}}}],["created",{"_index":420,"title":{},"body":{"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"interfaces/CustomData.html":{},"classes/DynamicEdgeProvider.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["createdatapoints(items",{"_index":3340,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["createedge(type",{"_index":565,"title":{},"body":{"classes/BaseProvider.html":{}}}],["createexpandaction(type",{"_index":366,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{}}}],["createnode(type",{"_index":546,"title":{},"body":{"classes/BaseProvider.html":{}}}],["createrows",{"_index":1598,"title":{},"body":{"interfaces/Column.html":{}}}],["creates",{"_index":462,"title":{},"body":{"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"interfaces/CustomData.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"miscellaneous/functions.html":{}}}],["createtimeseries(config",{"_index":3323,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["cross",{"_index":247,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"miscellaneous/functions.html":{}}}],["crossaggregationdemo",{"_index":3983,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["crossaggregationdemo(providerfactory",{"_index":4069,"title":{},"body":{"miscellaneous/functions.html":{}}}],["crossaggregationexpanddemo",{"_index":3984,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["crossaggregationexpanddemo(providerfactory",{"_index":4070,"title":{},"body":{"miscellaneous/functions.html":{}}}],["csv",{"_index":1719,"title":{},"body":{"interfaces/Column.html":{}}}],["csvexportparams",{"_index":1424,"title":{},"body":{"interfaces/Column.html":{}}}],["cur",{"_index":3784,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["currency",{"_index":2662,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{}}}],["current",{"_index":934,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/FacetChartDataPoint.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{},"components/FacetNgxChart.html":{},"components/MapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{}}}],["currently",{"_index":1218,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"components/MapComponent.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["currentrange",{"_index":3145,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["currentselection",{"_index":3406,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["currentvalue",{"_index":3683,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["currentvalue.length",{"_index":3696,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["cursor",{"_index":1225,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["curve(d3[this.curvetype",{"_index":3426,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["curvemonotonex",{"_index":3127,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{}}}],["curvetype",{"_index":3126,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{}}}],["custom",{"_index":65,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"classes/BaseProvider.html":{},"components/BsFacetDate.html":{},"interfaces/Column.html":{},"interfaces/CustomData.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{},"components/MapComponent.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["customdata",{"_index":1804,"title":{"interfaces/CustomData.html":{}},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"coverage.html":{}}}],["customprops",{"_index":539,"title":{},"body":{"classes/BaseProvider.html":{}}}],["d",{"_index":1168,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{}}}],["d.aggregation",{"_index":3237,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["d.category",{"_index":2763,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{}}}],["d.ccaggregation",{"_index":3238,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["d.count",{"_index":2757,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{}}}],["d.currency",{"_index":2769,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{}}}],["d.date",{"_index":2846,"title":{},"body":{"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["d.i",{"_index":2739,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{}}}],["d.record.id",{"_index":2852,"title":{},"body":{"interfaces/MoneyDatum.html":{}}}],["d.type",{"_index":3487,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["d.value",{"_index":2754,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["d0",{"_index":3631,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["d0.date.gettime",{"_index":3636,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["d1",{"_index":3633,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["d1.date.gettime",{"_index":3637,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["d1e7dd",{"_index":952,"title":{},"body":{"components/BsFacetDate.html":{}}}],["d3",{"_index":1041,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"dependencies.html":{}}}],["d3.area",{"_index":3398,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["d3.axisbottom(this.x",{"_index":2780,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{}}}],["d3.axisleft(this.y",{"_index":2796,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["d3.bisector(d",{"_index":3414,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["d3.brushbehavior",{"_index":3402,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["d3.brushselection(this.gbrush.nativeelement",{"_index":3603,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["d3.brushx",{"_index":3435,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["d3.countabletimeinterval",{"_index":3374,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["d3.extent(allprimarydates",{"_index":3506,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["d3.extent(this.data",{"_index":2756,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{}}}],["d3.line",{"_index":3399,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["d3.max(data",{"_index":3508,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["d3.max(s.dates",{"_index":3510,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["d3.mouse(this.gbrush.nativeelement)[0",{"_index":3625,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["d3.mouse(this.overlay.nativeelement)[0",{"_index":2857,"title":{},"body":{"interfaces/MoneyDatum.html":{}}}],["d3.scaleband",{"_index":1082,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{}}}],["d3.scalelinear",{"_index":2683,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["d3.scalelog",{"_index":2702,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{}}}],["d3.scalelogarithmic",{"_index":2684,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{}}}],["d3.scaleordinal",{"_index":2689,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{}}}],["d3.scalequantile",{"_index":1063,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["d3.scaletime",{"_index":2827,"title":{},"body":{"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["d3.scaleutc",{"_index":2829,"title":{},"body":{"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["d3.select(nodes[i",{"_index":1189,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["d3.select(this.gbrush.nativeelement",{"_index":3469,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["d3.select(this.gx.nativeelement",{"_index":1138,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["d3.select(this.gy.nativeelement",{"_index":1140,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["d3.select(this.overlay.nativeelement",{"_index":2716,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{}}}],["d3.selection",{"_index":1084,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["d3.timeday",{"_index":3375,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["d3.timeday.offset(date",{"_index":3371,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["d3.timeformat(\"%y",{"_index":3148,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["d3.timehour.offset(date",{"_index":3366,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["d3.timemonth",{"_index":3377,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["d3.timemonth.count(range[0",{"_index":3274,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["d3.timemonth.offset(date",{"_index":3372,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["d3.timeweek",{"_index":3376,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["d3.timeyear",{"_index":3378,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["d3.transition",{"_index":1146,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["d3.transition().duration(this.transition",{"_index":1145,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["d3.zoom",{"_index":3549,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["d3.zoombehavior",{"_index":3404,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["d3.zoomidentity",{"_index":3542,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["d3.zoomtransform(this.brush$.node",{"_index":3618,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["damping",{"_index":3880,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["dampingcontrol",{"_index":3872,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["dampingcontrol.value",{"_index":3889,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["dampingpref",{"_index":3907,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["dark",{"_index":1022,"title":{},"body":{"components/BsHeatmapComponent.html":{},"components/BsTooltipComponent.html":{},"interfaces/Column.html":{},"modules/FusionChartsModule.html":{},"interfaces/HeatmapItem.html":{},"components/MapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{}}}],["darkgrey",{"_index":1236,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/TimelineEventType.html":{},"components/TimelineLegendComponent.html":{}}}],["darkstyle",{"_index":2613,"title":{},"body":{"components/MapComponent.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["data",{"_index":46,"title":{},"body":{"modules/AgGridModule.html":{},"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"classes/BaseProvider.html":{},"components/BsEdgeInfoCard.html":{},"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"components/BsTooltipComponent.html":{},"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/Column.html":{},"interfaces/CustomData.html":{},"components/DataModalComponent.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/FacetChartDataPoint.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{},"components/FacetNgxChart.html":{},"components/FacetWrapperComponent.html":{},"interfaces/HeatmapItem.html":{},"components/MapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"components/NgxChart.html":{},"interfaces/Node.html":{},"interfaces/NodeData.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"components/ResultTimeline.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineEventType.html":{},"components/TimelineLegendComponent.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{},"dependencies.html":{}}}],["data([{type",{"_index":3476,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["data.addedges(this.createedge(type",{"_index":286,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{}}}],["data.addnodes(node",{"_index":1881,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["data.directed",{"_index":1928,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["data.directed[i",{"_index":1929,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["data.fieldvalue",{"_index":1931,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["data.filter(s",{"_index":3499,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["data.length",{"_index":1205,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["data.relations",{"_index":1926,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["data.relations[i",{"_index":1927,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["data.values.length",{"_index":1919,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["data/peer/esm/vis",{"_index":2152,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/VisEvent.html":{}}}],["data[0",{"_index":3501,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["data_date",{"_index":3009,"title":{},"body":{"components/ResultTimeline.html":{}}}],["data_date.substring(1,data_date.length",{"_index":3012,"title":{},"body":{"components/ResultTimeline.html":{}}}],["datafiltered",{"_index":966,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["datafiltered.length",{"_index":1203,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["dataitem",{"_index":2991,"title":{},"body":{"components/ResultTimeline.html":{}}}],["datamodalcomponent",{"_index":9,"title":{"components/DataModalComponent.html":{}},"body":{"modules/AgGridModule.html":{},"components/BsEdgeInfoCard.html":{},"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"components/BsTooltipComponent.html":{},"interfaces/Column.html":{},"components/DataModalComponent.html":{},"components/FacetNgxChart.html":{},"components/FacetWrapperComponent.html":{},"components/MapComponent.html":{},"components/NgxChart.html":{},"components/ResultTimeline.html":{},"components/TimelineLegendComponent.html":{},"coverage.html":{},"index.html":{}}}],["datamodel",{"_index":1990,"title":{},"body":{"components/DataModalComponent.html":{},"miscellaneous/typealiases.html":{}}}],["datapoint",{"_index":1400,"title":{},"body":{"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"components/FacetNgxChart.html":{},"components/NgxChart.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["datapoint.name",{"_index":2391,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["datapoint.value",{"_index":2426,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["datapoints",{"_index":2326,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["dataset",{"_index":193,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/VisEvent.html":{}}}],["dataset.addedges(edge",{"_index":1915,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["dataset.addedges(this.createedge(type",{"_index":1930,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["dataset.addnodes(node",{"_index":1911,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["dataset.addnodes(recordnode",{"_index":1923,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["dataset.foreach(dataset",{"_index":2044,"title":{},"body":{"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{}}}],["dataset.getadjacentedges(neighbor.id",{"_index":1950,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["dataset.getadjacentedges(node.id",{"_index":1938,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["dataset.getedges().foreach(edge",{"_index":2269,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["dataset.getnode(node.id",{"_index":1943,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["dataset.getnodes().foreach(node",{"_index":2045,"title":{},"body":{"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["dataset.updatedatasets(this.context.nodes",{"_index":3788,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["datasets",{"_index":482,"title":{},"body":{"classes/AsyncRecordsProvider.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/VisEvent.html":{}}}],["datasets.reduce((prev",{"_index":3783,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["datasource",{"_index":1434,"title":{},"body":{"interfaces/Column.html":{},"components/FacetWrapperComponent.html":{}}}],["date",{"_index":750,"title":{},"body":{"components/BsFacetDate.html":{},"modules/BsTimelineModule.html":{},"interfaces/Column.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{},"interfaces/MoneyDatum.html":{},"components/ResultTimeline.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{}}}],["date'},{'name",{"_index":711,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"components/BsTooltipComponent.html":{},"components/DataModalComponent.html":{},"components/FacetNgxChart.html":{},"components/FacetWrapperComponent.html":{},"components/MapComponent.html":{},"components/NgxChart.html":{},"components/ResultTimeline.html":{},"components/TimelineLegendComponent.html":{}}}],["date(cooc[1",{"_index":3014,"title":{},"body":{"components/ResultTimeline.html":{}}}],["date(parsedexpr.values[0",{"_index":3173,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["date(parsedexpr.values[1",{"_index":3174,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["date(this.selection[0].gettime",{"_index":3181,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["date(this.selection[1].gettime()+interval*0.1",{"_index":3183,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["date.getfullyear",{"_index":3020,"title":{},"body":{"components/ResultTimeline.html":{}}}],["date.gettime",{"_index":3635,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["date.html",{"_index":753,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{}}}],["date.scss",{"_index":752,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{}}}],["date.ts",{"_index":746,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{},"coverage.html":{}}}],["date.ts:102",{"_index":805,"title":{},"body":{"components/BsFacetDate.html":{}}}],["date.ts:142",{"_index":802,"title":{},"body":{"components/BsFacetDate.html":{}}}],["date.ts:153",{"_index":804,"title":{},"body":{"components/BsFacetDate.html":{}}}],["date.ts:157",{"_index":823,"title":{},"body":{"components/BsFacetDate.html":{}}}],["date.ts:165",{"_index":797,"title":{},"body":{"components/BsFacetDate.html":{}}}],["date.ts:176",{"_index":807,"title":{},"body":{"components/BsFacetDate.html":{}}}],["date.ts:305",{"_index":809,"title":{},"body":{"components/BsFacetDate.html":{}}}],["date.ts:311",{"_index":799,"title":{},"body":{"components/BsFacetDate.html":{}}}],["date.ts:56",{"_index":789,"title":{},"body":{"components/BsFacetDate.html":{}}}],["date.ts:57",{"_index":791,"title":{},"body":{"components/BsFacetDate.html":{}}}],["date.ts:58",{"_index":784,"title":{},"body":{"components/BsFacetDate.html":{}}}],["date.ts:59",{"_index":794,"title":{},"body":{"components/BsFacetDate.html":{}}}],["date.ts:60",{"_index":788,"title":{},"body":{"components/BsFacetDate.html":{}}}],["date.ts:61",{"_index":792,"title":{},"body":{"components/BsFacetDate.html":{}}}],["date.ts:62",{"_index":787,"title":{},"body":{"components/BsFacetDate.html":{}}}],["date.ts:63",{"_index":786,"title":{},"body":{"components/BsFacetDate.html":{}}}],["date.ts:64",{"_index":785,"title":{},"body":{"components/BsFacetDate.html":{}}}],["date.ts:65",{"_index":793,"title":{},"body":{"components/BsFacetDate.html":{}}}],["date.ts:66",{"_index":790,"title":{},"body":{"components/BsFacetDate.html":{}}}],["date.ts:68",{"_index":812,"title":{},"body":{"components/BsFacetDate.html":{}}}],["date.ts:69",{"_index":817,"title":{},"body":{"components/BsFacetDate.html":{}}}],["date.ts:71",{"_index":816,"title":{},"body":{"components/BsFacetDate.html":{}}}],["date.ts:72",{"_index":814,"title":{},"body":{"components/BsFacetDate.html":{}}}],["date.ts:74",{"_index":820,"title":{},"body":{"components/BsFacetDate.html":{}}}],["date.ts:75",{"_index":818,"title":{},"body":{"components/BsFacetDate.html":{}}}],["date.ts:80",{"_index":782,"title":{},"body":{"components/BsFacetDate.html":{}}}],["date.ts:89",{"_index":811,"title":{},"body":{"components/BsFacetDate.html":{}}}],["dateobj.display",{"_index":3037,"title":{},"body":{"components/ResultTimeline.html":{}}}],["dateobj.locations.split(\",\")[0",{"_index":3036,"title":{},"body":{"components/ResultTimeline.html":{}}}],["datepickers",{"_index":838,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{}}}],["daterange",{"_index":860,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{}}}],["daterangecontrol",{"_index":756,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{}}}],["dates",{"_index":925,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{},"components/ResultTimeline.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{}}}],["dates.foreach(dateobj",{"_index":3033,"title":{},"body":{"components/ResultTimeline.html":{}}}],["date|undefined",{"_index":3389,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["datum",{"_index":2734,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{}}}],["datum.currency",{"_index":2862,"title":{},"body":{"interfaces/MoneyDatum.html":{}}}],["datum.rawvalue",{"_index":2808,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{}}}],["day",{"_index":3122,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{}}}],["days",{"_index":3270,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{}}}],["dd",{"_index":3365,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["deactivate",{"_index":3557,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["deal)#(usd",{"_index":2669,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{}}}],["debounce",{"_index":3893,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["debouncesync",{"_index":3896,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["debouncetime",{"_index":829,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{}}}],["debouncetime(500",{"_index":874,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{}}}],["decimal",{"_index":2573,"title":{},"body":{"components/MapComponent.html":{}}}],["declarations",{"_index":20,"title":{},"body":{"modules/AgGridModule.html":{},"modules/BsHeatmapModule.html":{},"modules/BsTimelineModule.html":{},"modules/FinanceModule.html":{},"modules/FusionChartsModule.html":{},"modules/GoogleMapsModule.html":{},"modules/NetworkModule.html":{},"modules/NgxChartsModule.html":{},"modules/VisTimelineModule.html":{}}}],["declare",{"_index":2003,"title":{},"body":{"components/DataModalComponent.html":{}}}],["decoration",{"_index":1223,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["decorators",{"_index":1066,"title":{},"body":{"components/BsHeatmapComponent.html":{},"components/DataModalComponent.html":{},"components/NgxChart.html":{}}}],["decreasing",{"_index":1284,"title":{},"body":{"components/BsNodeInfoCard.html":{},"interfaces/NodeData.html":{}}}],["deep",{"_index":1216,"title":{},"body":{"components/BsHeatmapComponent.html":{},"components/FacetWrapperComponent.html":{}}}],["defacet",{"_index":4166,"title":{},"body":{"miscellaneous/variables.html":{}}}],["default",{"_index":163,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"components/BsTooltipComponent.html":{},"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/Column.html":{},"interfaces/CustomData.html":{},"components/DataModalComponent.html":{},"classes/DynamicEdgeProvider.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"components/MapComponent.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"components/NgxChart.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"components/ResultTimeline.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"components/TimelineLegendComponent.html":{},"interfaces/TimelineRecords.html":{},"interfaces/VisEvent.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["defaultchart",{"_index":3944,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["defaultcoldef",{"_index":1477,"title":{},"body":{"interfaces/Column.html":{}}}],["defaultcolumnwidth",{"_index":1469,"title":{},"body":{"interfaces/Column.html":{}}}],["defaultoptions",{"_index":2984,"title":{},"body":{"components/ResultTimeline.html":{},"interfaces/VisEvent.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["defaultrecordstyle(selected",{"_index":3379,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["defaults",{"_index":1442,"title":{},"body":{"interfaces/Column.html":{}}}],["defaultstate",{"_index":1704,"title":{},"body":{"interfaces/Column.html":{}}}],["definance",{"_index":3934,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["define",{"_index":161,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{}}}],["defined",{"_index":392,"title":{},"body":{"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"components/BsEdgeInfoCard.html":{},"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"components/BsTooltipComponent.html":{},"components/DataModalComponent.html":{},"classes/DynamicEdgeProvider.html":{},"classes/DynamicNodeProvider.html":{},"components/FacetNgxChart.html":{},"components/FacetWrapperComponent.html":{},"components/MapComponent.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"components/NgxChart.html":{},"classes/RecordsProvider.html":{},"components/ResultTimeline.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"components/TimelineLegendComponent.html":{},"interfaces/TimelineSeries.html":{}}}],["defines",{"_index":1828,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["definition",{"_index":1476,"title":{},"body":{"interfaces/Column.html":{}}}],["definitions",{"_index":1439,"title":{},"body":{"interfaces/Column.html":{},"components/FacetWrapperComponent.html":{}}}],["degooglemaps",{"_index":3949,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["degrid",{"_index":3929,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["deheatmap",{"_index":3962,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["delay",{"_index":3814,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["delete",{"_index":1693,"title":{},"body":{"interfaces/Column.html":{}}}],["denser",{"_index":1465,"title":{},"body":{"interfaces/Column.html":{}}}],["dependencies",{"_index":3,"title":{"dependencies.html":{}},"body":{"modules/AgGridModule.html":{},"modules/BsHeatmapModule.html":{},"modules/BsTimelineModule.html":{},"modules/FinanceModule.html":{},"modules/FusionChartsModule.html":{},"modules/GoogleMapsModule.html":{},"modules/NetworkModule.html":{},"modules/NgxChartsModule.html":{},"modules/VisTimelineModule.html":{},"dependencies.html":{},"index.html":{}}}],["depending",{"_index":1933,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["deprecated",{"_index":1217,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["deresultsview",{"_index":4178,"title":{},"body":{"miscellaneous/variables.html":{}}}],["derived",{"_index":1480,"title":{},"body":{"interfaces/Column.html":{}}}],["deriving",{"_index":1533,"title":{},"body":{"interfaces/Column.html":{}}}],["description",{"_index":61,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/VisEvent.html":{},"miscellaneous/functions.html":{}}}],["desearch",{"_index":4179,"title":{},"body":{"miscellaneous/variables.html":{}}}],["desired",{"_index":2569,"title":{},"body":{"components/MapComponent.html":{}}}],["destroy",{"_index":1501,"title":{},"body":{"interfaces/Column.html":{}}}],["detail",{"_index":3308,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["determined",{"_index":3242,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["determines",{"_index":2164,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["diff",{"_index":3521,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["difference",{"_index":3686,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["different",{"_index":220,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"components/BsNodeInfoCard.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/NodeData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["dimensional",{"_index":255,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{}}}],["dimensions",{"_index":1395,"title":{},"body":{"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"components/NgxChart.html":{}}}],["directed",{"_index":77,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"classes/BaseProvider.html":{},"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["directive",{"_index":702,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"components/BsTooltipComponent.html":{},"components/DataModalComponent.html":{},"components/FacetNgxChart.html":{},"components/FacetWrapperComponent.html":{},"components/MapComponent.html":{},"components/NgxChart.html":{},"components/ResultTimeline.html":{},"components/TimelineLegendComponent.html":{}}}],["directives",{"_index":743,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"components/BsTooltipComponent.html":{},"components/DataModalComponent.html":{},"components/FacetNgxChart.html":{},"components/FacetWrapperComponent.html":{},"components/MapComponent.html":{},"components/NgxChart.html":{},"components/ResultTimeline.html":{},"components/TimelineLegendComponent.html":{}}}],["directly",{"_index":439,"title":{},"body":{"classes/AsyncRecordsProvider.html":{},"interfaces/Column.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{}}}],["disabled",{"_index":346,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{}}}],["discarded",{"_index":2178,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["display",{"_index":268,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"classes/BaseProvider.html":{},"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"interfaces/Column.html":{},"interfaces/CustomData.html":{},"interfaces/FacetChartDataPoint.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{},"components/FacetNgxChart.html":{},"components/FacetWrapperComponent.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyDatum.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"miscellaneous/functions.html":{}}}],["display=existingnodes",{"_index":1817,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["display=paginate",{"_index":1894,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["displaycheckbox",{"_index":1462,"title":{},"body":{"interfaces/Column.html":{}}}],["displayed",{"_index":353,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"interfaces/Column.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"interfaces/HeatmapItem.html":{},"components/MapComponent.html":{},"interfaces/MoneyDatum.html":{},"interfaces/NodeData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/VisEvent.html":{},"miscellaneous/functions.html":{}}}],["displayemptydistributionintervals",{"_index":768,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{}}}],["displays",{"_index":78,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"interfaces/CustomData.html":{},"interfaces/MoneyDatum.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"miscellaneous/functions.html":{}}}],["distribution",{"_index":248,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"miscellaneous/functions.html":{}}}],["distributions",{"_index":261,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"miscellaneous/functions.html":{}}}],["div.pb",{"_index":2460,"title":{},"body":{"components/FacetWrapperComponent.html":{}}}],["doc",{"_index":3065,"title":{},"body":{"components/ResultTimeline.html":{}}}],["docheck",{"_index":1341,"title":{},"body":{"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"components/NgxChart.html":{}}}],["document",{"_index":2365,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"components/MapComponent.html":{}}}],["document.body.contains(this.wrapper.nativeelement",{"_index":1399,"title":{},"body":{"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"components/NgxChart.html":{}}}],["documentation",{"_index":3918,"title":{},"body":{"coverage.html":{}}}],["documents",{"_index":197,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"interfaces/CustomData.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"components/MapComponent.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"miscellaneous/functions.html":{}}}],["doesfilterpass",{"_index":2464,"title":{},"body":{"components/FacetWrapperComponent.html":{}}}],["doesfilterpass(params",{"_index":2471,"title":{},"body":{"components/FacetWrapperComponent.html":{}}}],["doesn't",{"_index":1585,"title":{},"body":{"interfaces/Column.html":{}}}],["dom",{"_index":625,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"components/BsTooltipComponent.html":{},"components/DataModalComponent.html":{},"components/FacetNgxChart.html":{},"components/FacetWrapperComponent.html":{},"components/MapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"components/NgxChart.html":{},"components/ResultTimeline.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"components/TimelineLegendComponent.html":{},"interfaces/TimelineSeries.html":{}}}],["domain",{"_index":2686,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["domain([0",{"_index":2764,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{}}}],["domain(this.datafiltered.map(item",{"_index":1128,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["domain(this.x.domain",{"_index":3582,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["domain(this.xt.domain",{"_index":3584,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["domain(xlabels",{"_index":1117,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["domain(ylabels",{"_index":1123,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["domain[0].gettime",{"_index":3664,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["domain[1].gettime",{"_index":3663,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["don't",{"_index":1383,"title":{},"body":{"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"components/NgxChart.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{}}}],["double",{"_index":1748,"title":{},"body":{"interfaces/Column.html":{}}}],["download",{"_index":1659,"title":{},"body":{"interfaces/Column.html":{}}}],["downloadcsv",{"_index":1731,"title":{},"body":{"interfaces/Column.html":{}}}],["downloadselection",{"_index":1451,"title":{},"body":{"interfaces/Column.html":{}}}],["draw",{"_index":2725,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["drawevents(events",{"_index":3713,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["drawn",{"_index":563,"title":{},"body":{"classes/BaseProvider.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["draws",{"_index":2778,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["drawxaxis",{"_index":2779,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["drawyaxis",{"_index":2783,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["due",{"_index":3396,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["duplicate",{"_index":1905,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["duplicates",{"_index":2249,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["dynamic",{"_index":2014,"title":{},"body":{"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"miscellaneous/functions.html":{}}}],["dynamicedge",{"_index":2011,"title":{"interfaces/DynamicEdge.html":{}},"body":{"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"coverage.html":{}}}],["dynamicedgeprovider",{"_index":2031,"title":{"classes/DynamicEdgeProvider.html":{}},"body":{"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"coverage.html":{}}}],["dynamicedgetype",{"_index":2016,"title":{"interfaces/DynamicEdgeType.html":{}},"body":{"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["dynamicedgetype).getquery",{"_index":2024,"title":{},"body":{"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{}}}],["dynamicnodeprovider",{"_index":2102,"title":{"classes/DynamicNodeProvider.html":{}},"body":{"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"coverage.html":{}}}],["dynamicnodetype",{"_index":2115,"title":{"interfaces/DynamicNodeType.html":{}},"body":{"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"coverage.html":{}}}],["e",{"_index":3152,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{}}}],["e.count",{"_index":1269,"title":{},"body":{"components/BsNodeInfoCard.html":{},"interfaces/NodeData.html":{}}}],["e.from",{"_index":1264,"title":{},"body":{"components/BsNodeInfoCard.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeData.html":{},"interfaces/NodeType.html":{}}}],["e.to",{"_index":1266,"title":{},"body":{"components/BsNodeInfoCard.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeData.html":{},"interfaces/NodeType.html":{}}}],["e.value",{"_index":277,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{}}}],["e.visible",{"_index":1968,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["each",{"_index":231,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"interfaces/Column.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{},"miscellaneous/functions.html":{}}}],["each(this.wrap",{"_index":1166,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["ease",{"_index":1230,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["east",{"_index":2643,"title":{},"body":{"components/MapComponent.html":{}}}],["edge",{"_index":90,"title":{"interfaces/Edge.html":{}},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"components/BsEdgeInfoCard.html":{},"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"components/BsTooltipComponent.html":{},"interfaces/CustomData.html":{},"components/DataModalComponent.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"components/FacetNgxChart.html":{},"components/FacetWrapperComponent.html":{},"components/MapComponent.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"modules/NetworkModule.html":{},"interfaces/NetworkProvider.html":{},"components/NgxChart.html":{},"interfaces/Node.html":{},"interfaces/NodeData.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"components/ResultTimeline.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"components/TimelineLegendComponent.html":{},"interfaces/VisEvent.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["edge.context.name",{"_index":603,"title":{},"body":{"classes/BaseProvider.html":{}}}],["edge.context.nodes.get(edge.from",{"_index":595,"title":{},"body":{"classes/BaseProvider.html":{}}}],["edge.context.nodes.get(edge.to",{"_index":597,"title":{},"body":{"classes/BaseProvider.html":{}}}],["edge.context.searchservice.query.addselect(expr",{"_index":602,"title":{},"body":{"classes/BaseProvider.html":{}}}],["edge.context.searchservice.search",{"_index":604,"title":{},"body":{"classes/BaseProvider.html":{}}}],["edge.count",{"_index":690,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["edge.fieldvalue",{"_index":600,"title":{},"body":{"classes/BaseProvider.html":{}}}],["edge.from",{"_index":1945,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["edge.id",{"_index":1948,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["edge.provider",{"_index":598,"title":{},"body":{"classes/BaseProvider.html":{}}}],["edge.to",{"_index":1944,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["edge.type",{"_index":1940,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["edge.type['trigger",{"_index":1957,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["edge.visible",{"_index":1953,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["edge[\"arrows",{"_index":571,"title":{},"body":{"classes/BaseProvider.html":{}}}],["edge[\"font",{"_index":578,"title":{},"body":{"classes/BaseProvider.html":{}}}],["edge[\"label",{"_index":576,"title":{},"body":{"classes/BaseProvider.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["edge[\"labels",{"_index":577,"title":{},"body":{"classes/BaseProvider.html":{}}}],["edge[\"labels\"].foreach(label",{"_index":2281,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["edge['aggregation'].name",{"_index":692,"title":{},"body":{"components/BsEdgeInfoCard.html":{}}}],["edge['record']['title",{"_index":694,"title":{},"body":{"components/BsEdgeInfoCard.html":{}}}],["edge[\\'aggregation\\'].name",{"_index":705,"title":{},"body":{"components/BsEdgeInfoCard.html":{}}}],["edge[\\'record\\'][\\'title",{"_index":706,"title":{},"body":{"components/BsEdgeInfoCard.html":{}}}],["edgeclicked",{"_index":3743,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["edgeidx",{"_index":2185,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["edgeoptions",{"_index":2162,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["edges",{"_index":142,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"components/BsNodeInfoCard.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeData.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/VisEvent.html":{},"miscellaneous/functions.html":{}}}],["edges.foreach(edge",{"_index":2217,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["edges.remove(edges.get().filter(e",{"_index":2296,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["edges.update(this.getvisibleedges",{"_index":2299,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["edgeseparator",{"_index":379,"title":{},"body":{"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"classes/DynamicEdgeProvider.html":{},"classes/DynamicNodeProvider.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{}}}],["edgetpl",{"_index":3752,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["edgetype",{"_index":91,"title":{"interfaces/EdgeType.html":{}},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"classes/BaseProvider.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["edgetype.nodetypes[1",{"_index":2041,"title":{},"body":{"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{}}}],["edgetypes",{"_index":188,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"interfaces/CustomData.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["effect",{"_index":3290,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["eg",{"_index":111,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"classes/BaseProvider.html":{},"interfaces/CustomData.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["el",{"_index":1002,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["element",{"_index":701,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"components/BsTooltipComponent.html":{},"components/DataModalComponent.html":{},"components/FacetNgxChart.html":{},"components/FacetWrapperComponent.html":{},"components/MapComponent.html":{},"components/NgxChart.html":{},"components/ResultTimeline.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"components/TimelineLegendComponent.html":{},"interfaces/TimelineSeries.html":{}}}],["elementref",{"_index":1000,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"components/NgxChart.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["elements",{"_index":2690,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["elementtype",{"_index":4123,"title":{},"body":{"miscellaneous/variables.html":{}}}],["elusive",{"_index":3815,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["email",{"_index":1908,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["emitevent",{"_index":870,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{}}}],["emits",{"_index":229,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"components/MapComponent.html":{}}}],["emitted",{"_index":3734,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["emitter",{"_index":2583,"title":{},"body":{"components/MapComponent.html":{}}}],["empty",{"_index":2169,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["enabled",{"_index":574,"title":{},"body":{"classes/BaseProvider.html":{}}}],["end",{"_index":1238,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"components/NgxChart.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["enfacet",{"_index":4168,"title":{},"body":{"miscellaneous/variables.html":{}}}],["enfinance",{"_index":3935,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["enforce",{"_index":3515,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["enginetype",{"_index":1414,"title":{},"body":{"interfaces/Column.html":{}}}],["enginetype.csv",{"_index":1581,"title":{},"body":{"interfaces/Column.html":{}}}],["enginetype.date",{"_index":1575,"title":{},"body":{"interfaces/Column.html":{}}}],["enginetype.dates",{"_index":1576,"title":{},"body":{"interfaces/Column.html":{}}}],["enginetype.datetime",{"_index":1577,"title":{},"body":{"interfaces/Column.html":{}}}],["enginetype.datetimes",{"_index":1578,"title":{},"body":{"interfaces/Column.html":{}}}],["enginetype.double",{"_index":1569,"title":{},"body":{"interfaces/Column.html":{}}}],["enginetype.float",{"_index":1570,"title":{},"body":{"interfaces/Column.html":{}}}],["enginetype.integer",{"_index":1571,"title":{},"body":{"interfaces/Column.html":{}}}],["enginetype.string",{"_index":1580,"title":{},"body":{"interfaces/Column.html":{}}}],["engooglemaps",{"_index":3950,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["engrid",{"_index":3931,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["enheatmap",{"_index":3963,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["enresultsview",{"_index":4181,"title":{},"body":{"miscellaneous/variables.html":{}}}],["enrich",{"_index":2105,"title":{},"body":{"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{}}}],["enriched",{"_index":2109,"title":{},"body":{"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"miscellaneous/functions.html":{}}}],["ensearch",{"_index":4182,"title":{},"body":{"miscellaneous/variables.html":{}}}],["enter",{"_index":3478,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["entities",{"_index":69,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"miscellaneous/functions.html":{}}}],["entity",{"_index":1887,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"miscellaneous/functions.html":{}}}],["entityitem",{"_index":2974,"title":{},"body":{"components/ResultTimeline.html":{}}}],["err",{"_index":3221,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["error",{"_index":3220,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["error(\"column",{"_index":2504,"title":{},"body":{"components/FacetWrapperComponent.html":{}}}],["error(\"maxnmonths",{"_index":3279,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["error(`aggregation",{"_index":266,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["error(`an",{"_index":2510,"title":{},"body":{"components/FacetWrapperComponent.html":{}}}],["error(`edge",{"_index":2305,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["error(`inconsistent",{"_index":1865,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["error(`missing",{"_index":1947,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["error(`node",{"_index":2302,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["error(`wrong",{"_index":1920,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["errors",{"_index":2720,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["especially",{"_index":3520,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["essentially",{"_index":3640,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["et",{"_index":172,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"miscellaneous/functions.html":{}}}],["etc",{"_index":2158,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"miscellaneous/functions.html":{}}}],["even",{"_index":3463,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["event",{"_index":796,"title":{},"body":{"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"interfaces/Column.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{},"interfaces/HeatmapItem.html":{},"components/MapComponent.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineEventType.html":{},"components/TimelineLegendComponent.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{}}}],["event.api",{"_index":1743,"title":{},"body":{"interfaces/Column.html":{}}}],["event.coldef",{"_index":1755,"title":{},"body":{"interfaces/Column.html":{}}}],["event.coldef.field",{"_index":1753,"title":{},"body":{"interfaces/Column.html":{}}}],["event.coldef.headername",{"_index":1752,"title":{},"body":{"interfaces/Column.html":{}}}],["event.columnapi",{"_index":1744,"title":{},"body":{"interfaces/Column.html":{}}}],["event.data",{"_index":1751,"title":{},"body":{"interfaces/Column.html":{}}}],["event.display",{"_index":3010,"title":{},"body":{"components/ResultTimeline.html":{}}}],["event.filterinstance",{"_index":1785,"title":{},"body":{"interfaces/Column.html":{}}}],["event.filterinstance.getmodel",{"_index":1783,"title":{},"body":{"interfaces/Column.html":{}}}],["event.locations.split(\",\")[0",{"_index":3017,"title":{},"body":{"components/ResultTimeline.html":{}}}],["event.name",{"_index":3720,"title":{},"body":{"interfaces/TimelineEventType.html":{},"components/TimelineLegendComponent.html":{}}}],["event.nodes.length",{"_index":3836,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["event.preventdefault",{"_index":892,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{}}}],["event.stoppropagation",{"_index":894,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/Column.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{}}}],["event.type",{"_index":1510,"title":{},"body":{"interfaces/Column.html":{}}}],["event.value",{"_index":1754,"title":{},"body":{"interfaces/Column.html":{}}}],["eventclicked",{"_index":3137,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["eventdata",{"_index":3829,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["eventdata[0",{"_index":3831,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["eventdata[1",{"_index":3832,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["eventemitter",{"_index":1027,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/HeatmapItem.html":{},"components/MapComponent.html":{},"interfaces/MoneyDatum.html":{},"components/NgxChart.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{}}}],["events",{"_index":684,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"interfaces/Column.html":{},"interfaces/HeatmapItem.html":{},"interfaces/NodeData.html":{},"components/ResultTimeline.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineEventType.html":{},"components/TimelineLegendComponent.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{}}}],["events.foreach(event",{"_index":3008,"title":{},"body":{"components/ResultTimeline.html":{}}}],["events.push([event",{"_index":3671,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["events[0].size",{"_index":3709,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["events[0].sizeopened",{"_index":3710,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["events[events.length",{"_index":3673,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["eventsize(events",{"_index":3707,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["example",{"_index":2107,"title":{},"body":{"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["exanding",{"_index":1963,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["except",{"_index":3459,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["exclusion",{"_index":2355,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["execute",{"_index":2017,"title":{},"body":{"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{}}}],["executed",{"_index":2020,"title":{},"body":{"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{}}}],["exist",{"_index":222,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{}}}],["existing",{"_index":128,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"interfaces/CustomData.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"miscellaneous/typealiases.html":{}}}],["existingedge",{"_index":2273,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["existingedge.count",{"_index":2275,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["existingedge.from",{"_index":2286,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["existingedge.to].map(id",{"_index":2287,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["existingedge.type",{"_index":2290,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["existingedge.type.edgeoptions",{"_index":2285,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["existingedge.type.edgeoptions(nodes",{"_index":2289,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["existingedge.visible",{"_index":2276,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["existingedge[\"label",{"_index":2283,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["existingedge[\"labels\"].push(label",{"_index":2284,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["existingnode",{"_index":476,"title":{},"body":{"classes/AsyncRecordsProvider.html":{},"classes/DynamicEdgeProvider.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{}}}],["existingnode.count",{"_index":2263,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["existingnode.precedence",{"_index":2259,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["existingnode.type",{"_index":2267,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["existingnode.type.nodeoptions",{"_index":2265,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["existingnode.type.nodeoptions(existingnode",{"_index":2266,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["existingnode.visible",{"_index":2264,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["existingnodes",{"_index":168,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"miscellaneous/typealiases.html":{}}}],["exists",{"_index":1524,"title":{},"body":{"interfaces/Column.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["expand",{"_index":313,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["expandable",{"_index":4073,"title":{},"body":{"miscellaneous/functions.html":{}}}],["expanded",{"_index":651,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsNodeInfoCard.html":{},"interfaces/NodeData.html":{},"miscellaneous/functions.html":{}}}],["expanding",{"_index":127,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"miscellaneous/typealiases.html":{}}}],["expected",{"_index":3460,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["export",{"_index":52,"title":{},"body":{"modules/AgGridModule.html":{},"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"components/BsEdgeInfoCard.html":{},"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"modules/BsHeatmapModule.html":{},"components/BsNodeInfoCard.html":{},"modules/BsTimelineModule.html":{},"components/BsTooltipComponent.html":{},"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/Column.html":{},"interfaces/CustomData.html":{},"components/DataModalComponent.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/FacetChartDataPoint.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{},"components/FacetNgxChart.html":{},"components/FacetWrapperComponent.html":{},"modules/FinanceModule.html":{},"modules/FusionChartsModule.html":{},"modules/GoogleMapsModule.html":{},"interfaces/HeatmapItem.html":{},"components/MapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"modules/NetworkModule.html":{},"interfaces/NetworkProvider.html":{},"components/NgxChart.html":{},"modules/NgxChartsModule.html":{},"interfaces/Node.html":{},"interfaces/NodeData.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"components/ResultTimeline.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineEventType.html":{},"components/TimelineLegendComponent.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{},"modules/VisTimelineModule.html":{}}}],["exporting",{"_index":1718,"title":{},"body":{"interfaces/Column.html":{}}}],["exports",{"_index":21,"title":{},"body":{"modules/AgGridModule.html":{},"modules/BsHeatmapModule.html":{},"modules/BsTimelineModule.html":{},"modules/FinanceModule.html":{},"modules/FusionChartsModule.html":{},"modules/GoogleMapsModule.html":{},"modules/NetworkModule.html":{},"modules/NgxChartsModule.html":{},"modules/VisTimelineModule.html":{}}}],["exportvaluegetter",{"_index":1679,"title":{},"body":{"interfaces/Column.html":{}}}],["expr",{"_index":98,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"classes/BaseProvider.html":{},"components/BsFacetDate.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{},"components/MapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["expr.operands.map(e",{"_index":276,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{}}}],["expr.value",{"_index":940,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{}}}],["expr.values",{"_index":939,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{}}}],["exprbuilder",{"_index":777,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{},"components/MapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/VisEvent.html":{}}}],["expression",{"_index":2719,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["exprfrom",{"_index":613,"title":{},"body":{"classes/BaseProvider.html":{}}}],["exproperator",{"_index":827,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{}}}],["exprs",{"_index":3298,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["exprs.push(this.exprbuilder.makerangeexpr(ccaggregation.column",{"_index":3303,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["exprto",{"_index":616,"title":{},"body":{"classes/BaseProvider.html":{}}}],["extends",{"_index":110,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"components/BsFacetDate.html":{},"interfaces/Column.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/FacetChartDataPoint.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{},"components/FacetNgxChart.html":{},"components/MapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/VisEvent.html":{}}}],["extension",{"_index":105,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["extent([[0",{"_index":3436,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["external",{"_index":1507,"title":{},"body":{"interfaces/Column.html":{}}}],["extract",{"_index":2730,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{}}}],["f8f9fa",{"_index":949,"title":{},"body":{"components/BsFacetDate.html":{}}}],["fa",{"_index":338,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"classes/BaseProvider.html":{},"components/BsFacetDate.html":{},"interfaces/Column.html":{},"interfaces/CustomData.html":{},"components/DataModalComponent.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/FacetChartDataPoint.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{},"components/FacetNgxChart.html":{},"components/MapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/VisEvent.html":{}}}],["facet",{"_index":48,"title":{},"body":{"modules/AgGridModule.html":{},"components/BsEdgeInfoCard.html":{},"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"modules/BsHeatmapModule.html":{},"components/BsNodeInfoCard.html":{},"modules/BsTimelineModule.html":{},"components/BsTooltipComponent.html":{},"interfaces/Column.html":{},"components/DataModalComponent.html":{},"interfaces/FacetChartDataPoint.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{},"components/FacetNgxChart.html":{},"components/FacetWrapperComponent.html":{},"components/MapComponent.html":{},"components/NgxChart.html":{},"modules/NgxChartsModule.html":{},"components/ResultTimeline.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"components/TimelineLegendComponent.html":{},"interfaces/TimelineRecords.html":{},"interfaces/VisEvent.html":{}}}],["facetactive",{"_index":1620,"title":{},"body":{"interfaces/Column.html":{},"components/FacetWrapperComponent.html":{}}}],["facetchartdatapoint",{"_index":2314,"title":{"interfaces/FacetChartDataPoint.html":{}},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"coverage.html":{}}}],["facetconfig",{"_index":825,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{}}}],["facetdateconfig",{"_index":833,"title":{"interfaces/FacetDateConfig.html":{}},"body":{"components/BsFacetDate.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{},"coverage.html":{}}}],["facetdateparams",{"_index":748,"title":{"interfaces/FacetDateParams.html":{}},"body":{"components/BsFacetDate.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{},"coverage.html":{}}}],["facetname",{"_index":2410,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["facetngxchart",{"_index":724,"title":{"components/FacetNgxChart.html":{}},"body":{"components/BsEdgeInfoCard.html":{},"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"components/BsTooltipComponent.html":{},"components/DataModalComponent.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"components/FacetWrapperComponent.html":{},"components/MapComponent.html":{},"components/NgxChart.html":{},"modules/NgxChartsModule.html":{},"components/ResultTimeline.html":{},"components/TimelineLegendComponent.html":{},"coverage.html":{},"index.html":{}}}],["facets",{"_index":1618,"title":{},"body":{"interfaces/Column.html":{}}}],["facetservice",{"_index":775,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/Column.html":{},"interfaces/FacetChartDataPoint.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{},"components/FacetNgxChart.html":{},"components/FacetWrapperComponent.html":{},"components/MapComponent.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["facetwrappercomponent",{"_index":10,"title":{"components/FacetWrapperComponent.html":{}},"body":{"modules/AgGridModule.html":{},"components/BsEdgeInfoCard.html":{},"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"components/BsTooltipComponent.html":{},"interfaces/Column.html":{},"components/DataModalComponent.html":{},"components/FacetNgxChart.html":{},"components/FacetWrapperComponent.html":{},"components/MapComponent.html":{},"components/NgxChart.html":{},"components/ResultTimeline.html":{},"components/TimelineLegendComponent.html":{},"coverage.html":{},"index.html":{}}}],["fact",{"_index":1776,"title":{},"body":{"interfaces/Column.html":{}}}],["factory",{"_index":4061,"title":{},"body":{"miscellaneous/functions.html":{}}}],["factory.ts",{"_index":4014,"title":{},"body":{"coverage.html":{}}}],["false",{"_index":285,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"components/BsEdgeInfoCard.html":{},"components/BsFacetDate.html":{},"components/BsNodeInfoCard.html":{},"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/Column.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{},"modules/FusionChartsModule.html":{},"components/MapComponent.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"components/NgxChart.html":{},"interfaces/Node.html":{},"interfaces/NodeData.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"components/ResultTimeline.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{}}}],["far",{"_index":849,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/Column.html":{},"components/DataModalComponent.html":{},"interfaces/FacetChartDataPoint.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{},"components/FacetNgxChart.html":{},"components/MapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/VisEvent.html":{}}}],["fas",{"_index":337,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"classes/BaseProvider.html":{},"interfaces/Column.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"components/MapComponent.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/VisEvent.html":{}}}],["fcmodule",{"_index":2530,"title":{},"body":{"modules/FusionChartsModule.html":{}}}],["fcmodule.fcroot(fusioncharts",{"_index":2540,"title":{},"body":{"modules/FusionChartsModule.html":{}}}],["features",{"_index":492,"title":{},"body":{"classes/BaseProvider.html":{}}}],["featuretype",{"_index":4131,"title":{},"body":{"miscellaneous/variables.html":{}}}],["fetch",{"_index":165,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"interfaces/Column.html":{}}}],["fetchaggregation(aggregation",{"_index":3262,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["fetchaggregations(types",{"_index":199,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{}}}],["fetched",{"_index":121,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["fetches",{"_index":190,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"miscellaneous/functions.html":{}}}],["fetching",{"_index":2034,"title":{},"body":{"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["field",{"_index":425,"title":{},"body":{"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"components/BsFacetDate.html":{},"interfaces/Column.html":{},"interfaces/CustomData.html":{},"classes/DynamicEdgeProvider.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/FacetChartDataPoint.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{},"components/FacetNgxChart.html":{},"components/FacetWrapperComponent.html":{},"components/MapComponent.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["fields",{"_index":1839,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["fieldvalue",{"_index":79,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"interfaces/CustomData.html":{},"components/DataModalComponent.html":{},"classes/DynamicEdgeProvider.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["file",{"_index":16,"title":{},"body":{"modules/AgGridModule.html":{},"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"components/BsEdgeInfoCard.html":{},"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"modules/BsHeatmapModule.html":{},"components/BsNodeInfoCard.html":{},"modules/BsTimelineModule.html":{},"components/BsTooltipComponent.html":{},"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/Column.html":{},"interfaces/CustomData.html":{},"components/DataModalComponent.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/FacetChartDataPoint.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{},"components/FacetNgxChart.html":{},"components/FacetWrapperComponent.html":{},"modules/FinanceModule.html":{},"modules/FusionChartsModule.html":{},"modules/GoogleMapsModule.html":{},"interfaces/HeatmapItem.html":{},"components/MapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"modules/NetworkModule.html":{},"interfaces/NetworkProvider.html":{},"components/NgxChart.html":{},"modules/NgxChartsModule.html":{},"interfaces/Node.html":{},"interfaces/NodeData.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"components/ResultTimeline.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineEventType.html":{},"components/TimelineLegendComponent.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{},"modules/VisTimelineModule.html":{},"coverage.html":{}}}],["fill",{"_index":1235,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineEventType.html":{},"components/TimelineLegendComponent.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{}}}],["fills",{"_index":227,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{}}}],["filter",{"_index":118,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"components/BsFacetDate.html":{},"components/BsNodeInfoCard.html":{},"interfaces/Column.html":{},"interfaces/CustomData.html":{},"classes/DynamicEdgeProvider.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{},"components/FacetWrapperComponent.html":{},"components/MapComponent.html":{},"interfaces/MoneyDatum.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeData.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"miscellaneous/typealiases.html":{}}}],["filter(e",{"_index":1263,"title":{},"body":{"components/BsNodeInfoCard.html":{},"interfaces/NodeData.html":{}}}],["filter(edge",{"_index":1939,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["filter(item",{"_index":3351,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["filter(node",{"_index":324,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{}}}],["filter(r",{"_index":3244,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["filter(record",{"_index":2369,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["filter(tick",{"_index":2786,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["filter(v",{"_index":2342,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["filterarea",{"_index":2553,"title":{},"body":{"components/MapComponent.html":{}}}],["filterchangedevent",{"_index":1427,"title":{},"body":{"interfaces/Column.html":{}}}],["filterdatum(datum",{"_index":2806,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{}}}],["filtered",{"_index":422,"title":{},"body":{"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"interfaces/Column.html":{},"classes/DynamicEdgeProvider.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/FacetChartDataPoint.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{},"components/FacetNgxChart.html":{},"interfaces/HeatmapItem.html":{},"components/MapComponent.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["filteredcolor",{"_index":2322,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["filtering",{"_index":1687,"title":{},"body":{"interfaces/Column.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["filteritem",{"_index":760,"title":{},"body":{"components/BsFacetDate.html":{}}}],["filteritem(item",{"_index":795,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{}}}],["filtermodifiedevent",{"_index":1428,"title":{},"body":{"interfaces/Column.html":{}}}],["filters",{"_index":1489,"title":{},"body":{"interfaces/Column.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"components/MapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/VisEvent.html":{}}}],["filtertype",{"_index":1623,"title":{},"body":{"interfaces/Column.html":{}}}],["finally",{"_index":1613,"title":{},"body":{"interfaces/Column.html":{}}}],["finance/.../index.ts",{"_index":4119,"title":{},"body":{"miscellaneous/variables.html":{}}}],["finance/finance.module.ts",{"_index":2521,"title":{},"body":{"modules/FinanceModule.html":{}}}],["finance/messages/index.ts",{"_index":3933,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["finance/money",{"_index":2659,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"coverage.html":{}}}],["financemodule",{"_index":2516,"title":{"modules/FinanceModule.html":{}},"body":{"modules/FinanceModule.html":{},"index.html":{},"modules.html":{}}}],["find",{"_index":3280,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["find(a",{"_index":2732,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{}}}],["fire",{"_index":3623,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["first",{"_index":843,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/Column.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["fit",{"_index":646,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"interfaces/NodeData.html":{},"interfaces/VisEvent.html":{}}}],["fitbounds",{"_index":2554,"title":{},"body":{"components/MapComponent.html":{}}}],["fitnetwork",{"_index":3817,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["fitting",{"_index":2603,"title":{},"body":{"components/MapComponent.html":{}}}],["flag",{"_index":1791,"title":{},"body":{"interfaces/Column.html":{}}}],["flags",{"_index":1487,"title":{},"body":{"interfaces/Column.html":{}}}],["focus",{"_index":675,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsNodeInfoCard.html":{},"interfaces/NodeData.html":{}}}],["focusnode",{"_index":652,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsNodeInfoCard.html":{}}}],["focusnode(node",{"_index":656,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsNodeInfoCard.html":{},"interfaces/NodeData.html":{}}}],["following",{"_index":3337,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{}}}],["font",{"_index":960,"title":{},"body":{"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"components/DataModalComponent.html":{},"interfaces/TimelineEventType.html":{},"components/TimelineLegendComponent.html":{}}}],["for(let",{"_index":1615,"title":{},"body":{"interfaces/Column.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["foreach",{"_index":3316,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["foreach(edge",{"_index":1942,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["foreach(event",{"_index":3669,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["foreach(item",{"_index":1270,"title":{},"body":{"components/BsNodeInfoCard.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/NodeData.html":{}}}],["foreach(list",{"_index":1286,"title":{},"body":{"components/BsNodeInfoCard.html":{},"interfaces/NodeData.html":{}}}],["foreach(node",{"_index":1937,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["foreach(record",{"_index":2371,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["forget",{"_index":2060,"title":{},"body":{"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{}}}],["form",{"_index":757,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/VisEvent.html":{}}}],["format",{"_index":271,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"interfaces/Column.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["formatcontent",{"_index":1452,"title":{},"body":{"interfaces/Column.html":{},"components/DataModalComponent.html":{}}}],["formatdayrequest",{"_index":3147,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["formating",{"_index":3146,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["formatservice",{"_index":1411,"title":{},"body":{"interfaces/Column.html":{},"components/DataModalComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{}}}],["formatted",{"_index":249,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"interfaces/Column.html":{}}}],["formatter",{"_index":547,"title":{},"body":{"classes/BaseProvider.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["formatting",{"_index":2358,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["formbuilder",{"_index":776,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{},"interfaces/VisEvent.html":{}}}],["formcontrol",{"_index":813,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{},"interfaces/VisEvent.html":{}}}],["formcontrol(this.dampingpref",{"_index":3873,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["formcontrol(this.gravitypref",{"_index":3877,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["formcontrol(this.repulsionpref",{"_index":3875,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["formcontrol(this.springconstantpref",{"_index":3871,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["formcontrol(this.springlengthpref",{"_index":3869,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["formgroup",{"_index":815,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{},"interfaces/VisEvent.html":{}}}],["formsmodule",{"_index":27,"title":{},"body":{"modules/AgGridModule.html":{},"modules/BsHeatmapModule.html":{},"modules/BsTimelineModule.html":{},"modules/NetworkModule.html":{}}}],["forwarded",{"_index":1456,"title":{},"body":{"interfaces/Column.html":{}}}],["found",{"_index":2250,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["foundid",{"_index":1769,"title":{},"body":{"interfaces/Column.html":{}}}],["foundrow",{"_index":1763,"title":{},"body":{"interfaces/Column.html":{}}}],["fractional",{"_index":2399,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["frame",{"_index":3794,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["frameworkcomponents",{"_index":1492,"title":{},"body":{"interfaces/Column.html":{}}}],["frfacet",{"_index":4170,"title":{},"body":{"miscellaneous/variables.html":{}}}],["frfinance",{"_index":3936,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["frgooglemaps",{"_index":3951,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["frgrid",{"_index":3932,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["frheatmap",{"_index":3964,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["from?.sethours(0",{"_index":928,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{}}}],["from?.setminutes(0",{"_index":929,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{}}}],["from?.setseconds(0",{"_index":930,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{}}}],["fromnode",{"_index":558,"title":{},"body":{"classes/BaseProvider.html":{},"components/BsEdgeInfoCard.html":{}}}],["fromnode.id",{"_index":567,"title":{},"body":{"classes/BaseProvider.html":{}}}],["frresultsview",{"_index":4184,"title":{},"body":{"miscellaneous/variables.html":{}}}],["frsearch",{"_index":4185,"title":{},"body":{"miscellaneous/variables.html":{}}}],["fulltext",{"_index":1193,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["function",{"_index":72,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"components/BsHeatmapComponent.html":{},"interfaces/ChartOptions.html":{},"interfaces/Column.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"coverage.html":{}}}],["functionality",{"_index":1473,"title":{},"body":{"interfaces/Column.html":{}}}],["functions",{"_index":1667,"title":{"miscellaneous/functions.html":{}},"body":{"interfaces/Column.html":{},"miscellaneous/functions.html":{}}}],["fusion",{"_index":729,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"components/BsTooltipComponent.html":{},"components/DataModalComponent.html":{},"components/FacetNgxChart.html":{},"components/FacetWrapperComponent.html":{},"modules/FusionChartsModule.html":{},"components/MapComponent.html":{},"components/NgxChart.html":{},"components/ResultTimeline.html":{},"components/TimelineLegendComponent.html":{},"miscellaneous/variables.html":{}}}],["fusionchart",{"_index":728,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"components/BsTooltipComponent.html":{},"components/DataModalComponent.html":{},"components/FacetNgxChart.html":{},"components/FacetWrapperComponent.html":{},"modules/FusionChartsModule.html":{},"components/MapComponent.html":{},"components/NgxChart.html":{},"components/ResultTimeline.html":{},"components/TimelineLegendComponent.html":{},"coverage.html":{},"index.html":{}}}],["fusioncharts",{"_index":2531,"title":{},"body":{"modules/FusionChartsModule.html":{},"dependencies.html":{}}}],["fusioncharts.options.creditlabel",{"_index":2538,"title":{},"body":{"modules/FusionChartsModule.html":{}}}],["fusioncharts/.../chart.ts",{"_index":4116,"title":{},"body":{"miscellaneous/variables.html":{}}}],["fusioncharts/chart/chart.ts",{"_index":3941,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["fusioncharts/fusioncharts.charts",{"_index":2533,"title":{},"body":{"modules/FusionChartsModule.html":{}}}],["fusioncharts/fusioncharts.module.ts",{"_index":2529,"title":{},"body":{"modules/FusionChartsModule.html":{}}}],["fusioncharts/themes/fusioncharts.theme.candy",{"_index":2537,"title":{},"body":{"modules/FusionChartsModule.html":{}}}],["fusioncharts/themes/fusioncharts.theme.fusion",{"_index":2535,"title":{},"body":{"modules/FusionChartsModule.html":{}}}],["fusionchartsmodule",{"_index":2525,"title":{"modules/FusionChartsModule.html":{}},"body":{"modules/FusionChartsModule.html":{},"index.html":{},"modules.html":{}}}],["fusiontheme",{"_index":2534,"title":{},"body":{"modules/FusionChartsModule.html":{}}}],["fw",{"_index":341,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"classes/BaseProvider.html":{},"interfaces/Column.html":{}}}],["gain",{"_index":671,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsNodeInfoCard.html":{},"interfaces/NodeData.html":{}}}],["gate",{"_index":2110,"title":{},"body":{"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{}}}],["gates",{"_index":537,"title":{},"body":{"classes/BaseProvider.html":{},"interfaces/CustomData.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"miscellaneous/functions.html":{}}}],["gates)#(ceo)#(microsoft",{"_index":4080,"title":{},"body":{"miscellaneous/functions.html":{}}}],["gates/microsoft",{"_index":251,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{}}}],["gaugemodule",{"_index":2958,"title":{},"body":{"modules/NgxChartsModule.html":{}}}],["gaxis",{"_index":2724,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["gbrush",{"_index":3408,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["general",{"_index":2171,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/VisEvent.html":{}}}],["generate",{"_index":141,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["generated",{"_index":1810,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["generates",{"_index":175,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"interfaces/CustomData.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/VisEvent.html":{}}}],["generating",{"_index":1837,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["generic",{"_index":4060,"title":{},"body":{"miscellaneous/functions.html":{}}}],["geo",{"_index":2642,"title":{},"body":{"components/MapComponent.html":{},"miscellaneous/functions.html":{}}}],["geolocated",{"_index":2607,"title":{},"body":{"components/MapComponent.html":{}}}],["geometry",{"_index":4124,"title":{},"body":{"miscellaneous/variables.html":{}}}],["geometry.fill",{"_index":4146,"title":{},"body":{"miscellaneous/variables.html":{}}}],["geometry.stroke",{"_index":4133,"title":{},"body":{"miscellaneous/variables.html":{}}}],["georecords",{"_index":2555,"title":{},"body":{"components/MapComponent.html":{}}}],["getactions",{"_index":822,"title":{},"body":{"components/BsFacetDate.html":{},"components/FacetNgxChart.html":{},"components/MapComponent.html":{}}}],["getadjacentedges",{"_index":2872,"title":{},"body":{"classes/NetworkDataset.html":{}}}],["getadjacentedges(nodeid",{"_index":2243,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["getaggregation",{"_index":2487,"title":{},"body":{"components/FacetWrapperComponent.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["getaggregation(aggregationname",{"_index":910,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["getaggregationlabel(aggregation",{"_index":368,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{}}}],["getappservice",{"_index":2489,"title":{},"body":{"components/FacetWrapperComponent.html":{}}}],["getcharttype",{"_index":2938,"title":{},"body":{"components/NgxChart.html":{}}}],["getcolorscheme",{"_index":2940,"title":{},"body":{"components/NgxChart.html":{}}}],["getconnectednodes",{"_index":2873,"title":{},"body":{"classes/NetworkDataset.html":{}}}],["getconnectednodes(nodeid",{"_index":2245,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["getd3timeinterval(resolution",{"_index":3373,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["getdata",{"_index":124,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"classes/DynamicEdgeProvider.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/NetworkProvider.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/VisEvent.html":{},"miscellaneous/typealiases.html":{}}}],["getdata(context",{"_index":295,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"classes/DynamicEdgeProvider.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{}}}],["getdatasource",{"_index":2483,"title":{},"body":{"components/FacetWrapperComponent.html":{}}}],["getdate",{"_index":3106,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["getdisplay",{"_index":3107,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["getedge",{"_index":2874,"title":{},"body":{"classes/NetworkDataset.html":{}}}],["getedge(id",{"_index":2192,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["getedgeactions",{"_index":385,"title":{},"body":{"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"classes/DynamicEdgeProvider.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/NetworkProvider.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{}}}],["getedgeactions(edge",{"_index":413,"title":{},"body":{"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"classes/DynamicEdgeProvider.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{}}}],["getedgeid(node1",{"_index":528,"title":{},"body":{"classes/BaseProvider.html":{}}}],["getedgeids",{"_index":2206,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["getedges",{"_index":2196,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["geteventaggregation(config",{"_index":3239,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["getexportparams",{"_index":1720,"title":{},"body":{"interfaces/Column.html":{}}}],["getfacetservice",{"_index":2491,"title":{},"body":{"components/FacetWrapperComponent.html":{}}}],["getfield",{"_index":821,"title":{},"body":{"components/BsFacetDate.html":{}}}],["getitem",{"_index":2431,"title":{},"body":{"components/FacetNgxChart.html":{}}}],["getitem(datapoint",{"_index":2421,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["getitemcolor",{"_index":1350,"title":{},"body":{"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"components/NgxChart.html":{}}}],["getlegend",{"_index":982,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["getmaxdate",{"_index":3159,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["getmindate",{"_index":3155,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["getmodel",{"_index":2465,"title":{},"body":{"components/FacetWrapperComponent.html":{}}}],["getname",{"_index":2349,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["getnode",{"_index":2875,"title":{},"body":{"classes/NetworkDataset.html":{}}}],["getnode(id",{"_index":2190,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["getnodeactions",{"_index":383,"title":{},"body":{"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"classes/DynamicEdgeProvider.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/NetworkProvider.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{}}}],["getnodeactions(node",{"_index":354,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["getnodeid(type",{"_index":533,"title":{},"body":{"classes/BaseProvider.html":{}}}],["getnodeids",{"_index":2204,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["getnodes",{"_index":2194,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["getnodevalue(node",{"_index":535,"title":{},"body":{"classes/BaseProvider.html":{}}}],["getprovider",{"_index":386,"title":{},"body":{"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"classes/DynamicEdgeProvider.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{}}}],["getprovideractions",{"_index":333,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"interfaces/CustomData.html":{},"classes/DynamicEdgeProvider.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["getquery",{"_index":2019,"title":{},"body":{"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{}}}],["getrecordsasevents(config",{"_index":3243,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["getresults",{"_index":2485,"title":{},"body":{"components/FacetWrapperComponent.html":{}}}],["getresults(query",{"_index":915,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{}}}],["getrows",{"_index":1686,"title":{},"body":{"interfaces/Column.html":{}}}],["gets",{"_index":3350,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"miscellaneous/functions.html":{}}}],["getstyle",{"_index":1327,"title":{},"body":{"components/BsTooltipComponent.html":{}}}],["gettimeseries(config",{"_index":3232,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["getvisibleedges",{"_index":2201,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["getvisiblenodes",{"_index":2198,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["given",{"_index":181,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"interfaces/Column.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"miscellaneous/functions.html":{}}}],["global",{"_index":1691,"title":{},"body":{"interfaces/Column.html":{},"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["google",{"_index":114,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"miscellaneous/functions.html":{}}}],["google.maps.latlngbounds",{"_index":2588,"title":{},"body":{"components/MapComponent.html":{}}}],["google.maps.latlngboundsliteral",{"_index":2601,"title":{},"body":{"components/MapComponent.html":{}}}],["googlemaps",{"_index":2550,"title":{},"body":{"components/MapComponent.html":{}}}],["googlemaps'},{'name",{"_index":731,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"components/BsTooltipComponent.html":{},"components/DataModalComponent.html":{},"components/FacetNgxChart.html":{},"components/FacetWrapperComponent.html":{},"components/MapComponent.html":{},"components/NgxChart.html":{},"components/ResultTimeline.html":{},"components/TimelineLegendComponent.html":{}}}],["googlemaps/.../dark",{"_index":4115,"title":{},"body":{"miscellaneous/variables.html":{}}}],["googlemaps/.../index.ts",{"_index":4120,"title":{},"body":{"miscellaneous/variables.html":{}}}],["googlemaps/dark",{"_index":3945,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["googlemaps/googlemaps.module.ts",{"_index":2545,"title":{},"body":{"modules/GoogleMapsModule.html":{}}}],["googlemaps/map.component.ts",{"_index":2549,"title":{},"body":{"components/MapComponent.html":{},"coverage.html":{}}}],["googlemaps/map.component.ts:102",{"_index":2586,"title":{},"body":{"components/MapComponent.html":{}}}],["googlemaps/map.component.ts:134",{"_index":2585,"title":{},"body":{"components/MapComponent.html":{}}}],["googlemaps/map.component.ts:144",{"_index":2591,"title":{},"body":{"components/MapComponent.html":{}}}],["googlemaps/map.component.ts:148",{"_index":2595,"title":{},"body":{"components/MapComponent.html":{}}}],["googlemaps/map.component.ts:154",{"_index":2589,"title":{},"body":{"components/MapComponent.html":{}}}],["googlemaps/map.component.ts:19",{"_index":2576,"title":{},"body":{"components/MapComponent.html":{}}}],["googlemaps/map.component.ts:21",{"_index":2579,"title":{},"body":{"components/MapComponent.html":{}}}],["googlemaps/map.component.ts:23",{"_index":2568,"title":{},"body":{"components/MapComponent.html":{}}}],["googlemaps/map.component.ts:25",{"_index":2571,"title":{},"body":{"components/MapComponent.html":{}}}],["googlemaps/map.component.ts:27",{"_index":2575,"title":{},"body":{"components/MapComponent.html":{}}}],["googlemaps/map.component.ts:29",{"_index":2580,"title":{},"body":{"components/MapComponent.html":{}}}],["googlemaps/map.component.ts:31",{"_index":2582,"title":{},"body":{"components/MapComponent.html":{}}}],["googlemaps/map.component.ts:34",{"_index":2605,"title":{},"body":{"components/MapComponent.html":{}}}],["googlemaps/map.component.ts:36",{"_index":2602,"title":{},"body":{"components/MapComponent.html":{}}}],["googlemaps/map.component.ts:39",{"_index":2600,"title":{},"body":{"components/MapComponent.html":{}}}],["googlemaps/map.component.ts:40",{"_index":2597,"title":{},"body":{"components/MapComponent.html":{}}}],["googlemaps/map.component.ts:43",{"_index":2596,"title":{},"body":{"components/MapComponent.html":{}}}],["googlemaps/map.component.ts:45",{"_index":2608,"title":{},"body":{"components/MapComponent.html":{}}}],["googlemaps/map.component.ts:48",{"_index":2566,"title":{},"body":{"components/MapComponent.html":{}}}],["googlemaps/map.component.ts:51",{"_index":2611,"title":{},"body":{"components/MapComponent.html":{}}}],["googlemaps/map.component.ts:52",{"_index":2599,"title":{},"body":{"components/MapComponent.html":{}}}],["googlemaps/map.component.ts:53",{"_index":2598,"title":{},"body":{"components/MapComponent.html":{}}}],["googlemaps/map.component.ts:91",{"_index":2612,"title":{},"body":{"components/MapComponent.html":{}}}],["googlemaps/messages/index.ts",{"_index":3948,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["googlemapsmodule",{"_index":2541,"title":{"modules/GoogleMapsModule.html":{}},"body":{"modules/GoogleMapsModule.html":{},"index.html":{},"modules.html":{}}}],["goup",{"_index":3471,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["graph",{"_index":3490,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["graphical",{"_index":1091,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["gravity",{"_index":3882,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["gravitycontrol",{"_index":3876,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["gravitycontrol.value",{"_index":3891,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["gravitypref",{"_index":3910,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["green",{"_index":3381,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["grid",{"_index":31,"title":{},"body":{"modules/AgGridModule.html":{},"components/BsEdgeInfoCard.html":{},"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"components/BsTooltipComponent.html":{},"interfaces/Column.html":{},"components/DataModalComponent.html":{},"components/FacetNgxChart.html":{},"components/FacetWrapperComponent.html":{},"components/MapComponent.html":{},"components/NgxChart.html":{},"components/ResultTimeline.html":{},"components/TimelineLegendComponent.html":{},"coverage.html":{},"dependencies.html":{}}}],["grid.module.ts",{"_index":19,"title":{},"body":{"modules/AgGridModule.html":{}}}],["grid/.../data",{"_index":4111,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["grid/.../datasource.ts",{"_index":4112,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["grid/.../index.ts",{"_index":4121,"title":{},"body":{"miscellaneous/variables.html":{}}}],["grid/ag",{"_index":18,"title":{},"body":{"modules/AgGridModule.html":{},"interfaces/Column.html":{},"coverage.html":{}}}],["grid/data",{"_index":1981,"title":{},"body":{"components/DataModalComponent.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["grid/datasource.ts",{"_index":3924,"title":{},"body":{"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["grid/facet",{"_index":2455,"title":{},"body":{"components/FacetWrapperComponent.html":{},"coverage.html":{}}}],["grid/messages/index.ts",{"_index":3928,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["gridactions",{"_index":1494,"title":{},"body":{"interfaces/Column.html":{}}}],["gridapi",{"_index":1417,"title":{},"body":{"interfaces/Column.html":{}}}],["gridcolumnapi",{"_index":1486,"title":{},"body":{"interfaces/Column.html":{}}}],["gridreadyevent",{"_index":1419,"title":{},"body":{"interfaces/Column.html":{}}}],["gridreset",{"_index":1448,"title":{},"body":{"interfaces/Column.html":{}}}],["grip",{"_index":3481,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["gripheight",{"_index":3699,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["grips",{"_index":3410,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["gripwidth",{"_index":3704,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["group",{"_index":2459,"title":{},"body":{"components/FacetWrapperComponent.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["groupedevents",{"_index":3394,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["groupevents(pixperevent",{"_index":3658,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["grouping",{"_index":3531,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["guess",{"_index":3175,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["gx",{"_index":967,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["gy",{"_index":968,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["h",{"_index":1651,"title":{},"body":{"interfaces/Column.html":{}}}],["hack",{"_index":670,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsNodeInfoCard.html":{},"interfaces/NodeData.html":{}}}],["handled",{"_index":2174,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["handling",{"_index":1880,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{}}}],["happens",{"_index":4090,"title":{},"body":{"miscellaneous/functions.html":{}}}],["hascollapsededge",{"_index":1966,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["hasedge",{"_index":2876,"title":{},"body":{"classes/NetworkDataset.html":{}}}],["hasedge(id",{"_index":2188,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["hasexpandededge",{"_index":1965,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["hasfiltered",{"_index":2356,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["hasn't",{"_index":1781,"title":{},"body":{"interfaces/Column.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{}}}],["hasnode",{"_index":2877,"title":{},"body":{"classes/NetworkDataset.html":{}}}],["hasnode(id",{"_index":2186,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["header",{"_index":1540,"title":{},"body":{"interfaces/Column.html":{}}}],["heatmap",{"_index":719,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"modules/BsHeatmapModule.html":{},"components/BsNodeInfoCard.html":{},"modules/BsTimelineModule.html":{},"components/BsTooltipComponent.html":{},"components/DataModalComponent.html":{},"components/FacetNgxChart.html":{},"components/FacetWrapperComponent.html":{},"interfaces/HeatmapItem.html":{},"components/MapComponent.html":{},"components/NgxChart.html":{},"components/ResultTimeline.html":{},"components/TimelineLegendComponent.html":{},"coverage.html":{}}}],["heatmap'},{'name",{"_index":713,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"components/BsTooltipComponent.html":{},"components/DataModalComponent.html":{},"components/FacetNgxChart.html":{},"components/FacetWrapperComponent.html":{},"components/MapComponent.html":{},"components/NgxChart.html":{},"components/ResultTimeline.html":{},"components/TimelineLegendComponent.html":{}}}],["heatmap.component",{"_index":1248,"title":{},"body":{"modules/BsHeatmapModule.html":{}}}],["heatmap.component.html",{"_index":965,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["heatmap.component.scss",{"_index":964,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["heatmap.component.ts",{"_index":3953,"title":{},"body":{"coverage.html":{}}}],["heatmap/.../index.ts",{"_index":4122,"title":{},"body":{"miscellaneous/variables.html":{}}}],["heatmap/bootstrap/facet",{"_index":3952,"title":{},"body":{"coverage.html":{}}}],["heatmap/bootstrap/heatmap.component.ts",{"_index":962,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{},"coverage.html":{}}}],["heatmap/bootstrap/heatmap.component.ts:108",{"_index":1047,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["heatmap/bootstrap/heatmap.component.ts:123",{"_index":1031,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["heatmap/bootstrap/heatmap.component.ts:160",{"_index":1059,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["heatmap/bootstrap/heatmap.component.ts:189",{"_index":1055,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["heatmap/bootstrap/heatmap.component.ts:200",{"_index":1051,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["heatmap/bootstrap/heatmap.component.ts:209",{"_index":1046,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["heatmap/bootstrap/heatmap.component.ts:23",{"_index":1009,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["heatmap/bootstrap/heatmap.component.ts:230",{"_index":1077,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["heatmap/bootstrap/heatmap.component.ts:26",{"_index":1012,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["heatmap/bootstrap/heatmap.component.ts:27",{"_index":1026,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["heatmap/bootstrap/heatmap.component.ts:28",{"_index":1018,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["heatmap/bootstrap/heatmap.component.ts:29",{"_index":1025,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["heatmap/bootstrap/heatmap.component.ts:32",{"_index":1013,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["heatmap/bootstrap/heatmap.component.ts:33",{"_index":1003,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["heatmap/bootstrap/heatmap.component.ts:36",{"_index":1005,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["heatmap/bootstrap/heatmap.component.ts:37",{"_index":1007,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["heatmap/bootstrap/heatmap.component.ts:38",{"_index":1019,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["heatmap/bootstrap/heatmap.component.ts:39",{"_index":1020,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["heatmap/bootstrap/heatmap.component.ts:40",{"_index":1023,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["heatmap/bootstrap/heatmap.component.ts:43",{"_index":1029,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["heatmap/bootstrap/heatmap.component.ts:44",{"_index":1028,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["heatmap/bootstrap/heatmap.component.ts:47",{"_index":1083,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["heatmap/bootstrap/heatmap.component.ts:48",{"_index":1086,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["heatmap/bootstrap/heatmap.component.ts:49",{"_index":1064,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["heatmap/bootstrap/heatmap.component.ts:52",{"_index":1068,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["heatmap/bootstrap/heatmap.component.ts:53",{"_index":1070,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["heatmap/bootstrap/heatmap.component.ts:54",{"_index":1085,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["heatmap/bootstrap/heatmap.component.ts:55",{"_index":1087,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["heatmap/bootstrap/heatmap.component.ts:58",{"_index":1065,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["heatmap/bootstrap/heatmap.component.ts:61",{"_index":1071,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["heatmap/bootstrap/heatmap.component.ts:62",{"_index":1073,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["heatmap/bootstrap/heatmap.component.ts:63",{"_index":1075,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["heatmap/bootstrap/heatmap.component.ts:64",{"_index":1074,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["heatmap/bootstrap/heatmap.component.ts:65",{"_index":1072,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["heatmap/bootstrap/heatmap.component.ts:68",{"_index":1076,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["heatmap/bootstrap/heatmap.component.ts:69",{"_index":1001,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["heatmap/bootstrap/heatmap.component.ts:78",{"_index":1048,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["heatmap/bootstrap/heatmap.module.ts",{"_index":1244,"title":{},"body":{"modules/BsHeatmapModule.html":{}}}],["heatmap/bootstrap/results",{"_index":3956,"title":{},"body":{"coverage.html":{}}}],["heatmap/bootstrap/tooltip.component.ts",{"_index":1307,"title":{},"body":{"components/BsTooltipComponent.html":{},"coverage.html":{}}}],["heatmap/bootstrap/tooltip.component.ts:37",{"_index":1323,"title":{},"body":{"components/BsTooltipComponent.html":{}}}],["heatmap/bootstrap/tooltip.component.ts:38",{"_index":1322,"title":{},"body":{"components/BsTooltipComponent.html":{}}}],["heatmap/bootstrap/tooltip.component.ts:39",{"_index":1324,"title":{},"body":{"components/BsTooltipComponent.html":{}}}],["heatmap/bootstrap/tooltip.component.ts:40",{"_index":1326,"title":{},"body":{"components/BsTooltipComponent.html":{}}}],["heatmap/bootstrap/tooltip.component.ts:41",{"_index":1325,"title":{},"body":{"components/BsTooltipComponent.html":{}}}],["heatmap/bootstrap/tooltip.component.ts:43",{"_index":1328,"title":{},"body":{"components/BsTooltipComponent.html":{}}}],["heatmap/messages/index.ts",{"_index":3961,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["heatmapitem",{"_index":1008,"title":{"interfaces/HeatmapItem.html":{}},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{},"coverage.html":{}}}],["height",{"_index":642,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"interfaces/Column.html":{},"components/DataModalComponent.html":{},"interfaces/HeatmapItem.html":{},"components/MapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"components/NgxChart.html":{},"interfaces/NodeData.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{},"miscellaneous/variables.html":{}}}],["hh:mm:ss",{"_index":926,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{}}}],["hidden",{"_index":2945,"title":{},"body":{"components/NgxChart.html":{},"miscellaneous/functions.html":{}}}],["hide",{"_index":1563,"title":{},"body":{"interfaces/Column.html":{}}}],["hidepref",{"_index":1562,"title":{},"body":{"interfaces/Column.html":{}}}],["hiderecordnode",{"_index":447,"title":{},"body":{"classes/AsyncRecordsProvider.html":{},"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["hiderecordnode=true",{"_index":4067,"title":{},"body":{"miscellaneous/functions.html":{}}}],["hides",{"_index":3561,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["highest",{"_index":2167,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["highlight",{"_index":2404,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["histogram",{"_index":3653,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["horizontalbar",{"_index":1381,"title":{},"body":{"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"components/NgxChart.html":{}}}],["host",{"_index":1212,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["hover",{"_index":953,"title":{},"body":{"components/BsFacetDate.html":{}}}],["hovered",{"_index":2865,"title":{},"body":{"interfaces/MoneyDatum.html":{}}}],["hovers",{"_index":1060,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["html",{"_index":700,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"components/BsTooltipComponent.html":{},"interfaces/Column.html":{},"components/DataModalComponent.html":{},"components/FacetNgxChart.html":{},"components/FacetWrapperComponent.html":{},"interfaces/HeatmapItem.html":{},"components/MapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"components/NgxChart.html":{},"components/ResultTimeline.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"components/TimelineLegendComponent.html":{},"interfaces/TimelineSeries.html":{}}}],["htmlelement",{"_index":1673,"title":{},"body":{"interfaces/Column.html":{}}}],["htmlelement).offsetwidth",{"_index":1184,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["http://localhost:4000/sba",{"_index":3075,"title":{},"body":{"classes/SelectedRecordsProvider.html":{}}}],["https://github.com/angular/angular/issues/16982",{"_index":3689,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["https://github.com/d3/d3",{"_index":2800,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["https://stackoverflow.com/questions/13576906/d3",{"_index":2791,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["https://visjs.github.io/vis",{"_index":2155,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/VisEvent.html":{},"miscellaneous/variables.html":{}}}],["human",{"_index":4058,"title":{},"body":{"miscellaneous/functions.html":{}}}],["humans",{"_index":4094,"title":{},"body":{"miscellaneous/functions.html":{}}}],["hybrid",{"_index":1902,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["i=0",{"_index":1925,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["i=this.searchservice.query.select.length",{"_index":1696,"title":{},"body":{"interfaces/Column.html":{}}}],["i>=0",{"_index":1697,"title":{},"body":{"interfaces/Column.html":{}}}],["icellrendererfunc",{"_index":1415,"title":{},"body":{"interfaces/Column.html":{}}}],["icon",{"_index":336,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"classes/BaseProvider.html":{},"components/BsFacetDate.html":{},"interfaces/Column.html":{},"interfaces/CustomData.html":{},"components/DataModalComponent.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/FacetChartDataPoint.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{},"components/FacetNgxChart.html":{},"components/MapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/VisEvent.html":{},"miscellaneous/functions.html":{}}}],["id",{"_index":526,"title":{},"body":{"classes/BaseProvider.html":{},"components/BsNodeInfoCard.html":{},"interfaces/Column.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeData.html":{},"interfaces/NodeType.html":{},"components/ResultTimeline.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{}}}],["idatasource",{"_index":1423,"title":{},"body":{"interfaces/Column.html":{}}}],["identifier",{"_index":2577,"title":{},"body":{"components/MapComponent.html":{},"coverage.html":{}}}],["idoesfilterpassparams",{"_index":2472,"title":{},"body":{"components/FacetWrapperComponent.html":{}}}],["ids",{"_index":2203,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"classes/SelectedRecordsProvider.html":{}}}],["ids.foreach(id",{"_index":2224,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["ie",{"_index":423,"title":{},"body":{"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"interfaces/CustomData.html":{},"classes/DynamicEdgeProvider.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["if(!!changes['record",{"_index":2999,"title":{},"body":{"components/ResultTimeline.html":{}}}],["if(!!existingedge[\"label",{"_index":2280,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["if(!!item.value",{"_index":3346,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["if(!!this.selectfield.text",{"_index":2353,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["if(!agg",{"_index":2509,"title":{},"body":{"components/FacetWrapperComponent.html":{}}}],["if(!changes.timeseries",{"_index":3163,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["if(!changes[\"height",{"_index":3449,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["if(!config.maxnmonths",{"_index":3275,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["if(!d0",{"_index":3634,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["if(!dataset.hasedge(edge.id",{"_index":1914,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["if(!dataset.hasnode(node.id",{"_index":1904,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["if(!foundid",{"_index":1771,"title":{},"body":{"interfaces/Column.html":{}}}],["if(!foundrow",{"_index":1766,"title":{},"body":{"interfaces/Column.html":{}}}],["if(!item.display",{"_index":264,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{}}}],["if(!items",{"_index":3341,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["if(!keepdanglingnodes",{"_index":2239,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["if(!neighbor",{"_index":1946,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["if(!neighbor.visible",{"_index":1959,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["if(!node",{"_index":1853,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["if(!previousvalue",{"_index":3694,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["if(!record.modified",{"_index":2843,"title":{},"body":{"interfaces/MoneyDatum.html":{}}}],["if(!select",{"_index":3185,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["if(!series.showdatapoints",{"_index":3629,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["if(!sourcenode",{"_index":263,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{}}}],["if(!this._filterinput",{"_index":1779,"title":{},"body":{"interfaces/Column.html":{}}}],["if(!this.active",{"_index":1845,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["if(!this.context.appservice.getccaggregation(aggregation",{"_index":217,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{}}}],["if(!this.currentrange",{"_index":3176,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["if(!this.events",{"_index":3193,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["if(!this.gridactions",{"_index":1522,"title":{},"body":{"interfaces/Column.html":{}}}],["if(!this.hasedge(edge.id",{"_index":2270,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["if(!this.hasnode(edge.from",{"_index":2306,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["if(!this.hasnode(node.id",{"_index":2256,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["if(!this.isfiltered(item",{"_index":2417,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["if(!this.neighbors[type",{"_index":1278,"title":{},"body":{"components/BsNodeInfoCard.html":{},"interfaces/NodeData.html":{}}}],["if(!this.optionsprefs.physics",{"_index":3851,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["if(!this.optionsprefs.physics.barneshut",{"_index":3853,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["if(!this.params.coldef.field",{"_index":2503,"title":{},"body":{"components/FacetWrapperComponent.html":{}}}],["if(!this.permanent",{"_index":2087,"title":{},"body":{"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{}}}],["if(!this.query",{"_index":1690,"title":{},"body":{"interfaces/Column.html":{}}}],["if(!this.showtooltip",{"_index":2867,"title":{},"body":{"interfaces/MoneyDatum.html":{}}}],["if(!this.timeseries",{"_index":3186,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["if(!this.tooltipitem",{"_index":2854,"title":{},"body":{"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["if(!this.x",{"_index":2699,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["if(!this.zoomable",{"_index":3537,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["if(!utils.isstring(action",{"_index":1641,"title":{},"body":{"interfaces/Column.html":{}}}],["if(!utils.isstring(parsedexpr",{"_index":3169,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["if(!xextent[0",{"_index":2848,"title":{},"body":{"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["if(!yextent[0",{"_index":2758,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{}}}],["if((config",{"_index":3205,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["if((neighbor.visible",{"_index":1974,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["if((node.precedence",{"_index":2258,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["if(_queries.length",{"_index":2071,"title":{},"body":{"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{}}}],["if(action",{"_index":1643,"title":{},"body":{"interfaces/Column.html":{}}}],["if(action.selected",{"_index":1595,"title":{},"body":{"interfaces/Column.html":{}}}],["if(actions.length",{"_index":3803,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["if(agg.aggregation",{"_index":3209,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["if(aggregation",{"_index":234,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["if(array.isarray(config",{"_index":3231,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["if(bin",{"_index":3677,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["if(ccaggregation",{"_index":3260,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["if(changes.columns",{"_index":1518,"title":{},"body":{"interfaces/Column.html":{}}}],["if(changes.results",{"_index":1520,"title":{},"body":{"interfaces/Column.html":{}}}],["if(changes[\"events",{"_index":3467,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["if(changes[\"height",{"_index":2708,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["if(changes[\"width",{"_index":2711,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["if(changes['options",{"_index":3769,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["if(changes['results",{"_index":3763,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["if(changes['style",{"_index":2634,"title":{},"body":{"components/MapComponent.html":{}}}],["if(col.field",{"_index":1617,"title":{},"body":{"interfaces/Column.html":{}}}],["if(col.filter",{"_index":1567,"title":{},"body":{"interfaces/Column.html":{}}}],["if(col?.formatter",{"_index":551,"title":{},"body":{"classes/BaseProvider.html":{}}}],["if(currentvalue",{"_index":3690,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["if(data",{"_index":1729,"title":{},"body":{"interfaces/Column.html":{}}}],["if(datum",{"_index":2736,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{}}}],["if(diff",{"_index":3528,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["if(directed",{"_index":570,"title":{},"body":{"classes/BaseProvider.html":{}}}],["if(edge.type.field",{"_index":599,"title":{},"body":{"classes/BaseProvider.html":{}}}],["if(event.edges.length",{"_index":3835,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["if(event.event.type",{"_index":3833,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["if(event.nodes.length",{"_index":3838,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["if(event.records.find(r",{"_index":1514,"title":{},"body":{"interfaces/Column.html":{}}}],["if(event.source",{"_index":1509,"title":{},"body":{"interfaces/Column.html":{}}}],["if(event.type",{"_index":3085,"title":{},"body":{"classes/SelectedRecordsProvider.html":{}}}],["if(events!==this.tooltipitem",{"_index":3708,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["if(events.length",{"_index":3670,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["if(existingedge[\"labels\"].indexof(label",{"_index":2282,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["if(exprs.length",{"_index":3304,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["if(formatcontent",{"_index":1527,"title":{},"body":{"interfaces/Column.html":{}}}],["if(hascollapsededge",{"_index":1969,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["if(hasexpandededge",{"_index":1971,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["if(i",{"_index":1582,"title":{},"body":{"interfaces/Column.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["if(isnan(value",{"_index":2753,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{}}}],["if(item.node",{"_index":1271,"title":{},"body":{"components/BsNodeInfoCard.html":{},"interfaces/NodeData.html":{}}}],["if(maxnmonths",{"_index":3284,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["if(neighborsneighbors.length",{"_index":1951,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["if(node.data?.$selected",{"_index":1801,"title":{},"body":{"interfaces/Column.html":{}}}],["if(node.visible",{"_index":2046,"title":{},"body":{"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{}}}],["if(nodefrom",{"_index":605,"title":{},"body":{"classes/BaseProvider.html":{}}}],["if(opened",{"_index":3867,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["if(parsedexpr.values",{"_index":3172,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["if(properties.items.length>0",{"_index":3055,"title":{},"body":{"components/ResultTimeline.html":{}}}],["if(query",{"_index":2085,"title":{},"body":{"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{}}}],["if(query.orderby",{"_index":1630,"title":{},"body":{"interfaces/Column.html":{}}}],["if(range",{"_index":3263,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["if(recorddata",{"_index":1870,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["if(recordnode.id",{"_index":1899,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["if(relation",{"_index":575,"title":{},"body":{"classes/BaseProvider.html":{}}}],["if(relativex",{"_index":1187,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["if(results.records.length",{"_index":2131,"title":{},"body":{"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{}}}],["if(select",{"_index":3166,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["if(selection",{"_index":3295,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["if(sourcenode",{"_index":212,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{}}}],["if(this._filterinput",{"_index":1794,"title":{},"body":{"interfaces/Column.html":{}}}],["if(this._networkinitialized",{"_index":3790,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["if(this._selectededge",{"_index":3805,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["if(this._selectednode",{"_index":3801,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["if(this.active",{"_index":305,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"classes/BaseProvider.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["if(this.aggregations",{"_index":2338,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["if(this.checkselectionchange(this.currentselection",{"_index":3611,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["if(this.currentselection",{"_index":3568,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["if(this.data",{"_index":2361,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["if(this.edgetype.trigger",{"_index":2056,"title":{},"body":{"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{}}}],["if(this.events",{"_index":3659,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["if(this.facetservice.hasfiltered(this.name",{"_index":2620,"title":{},"body":{"components/MapComponent.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["if(this.formatcontent",{"_index":1674,"title":{},"body":{"interfaces/Column.html":{},"components/DataModalComponent.html":{}}}],["if(this.georecords.length",{"_index":2638,"title":{},"body":{"components/MapComponent.html":{}}}],["if(this.gridapi",{"_index":1599,"title":{},"body":{"interfaces/Column.html":{}}}],["if(this.gridapi?.getselectedrows().length",{"_index":1724,"title":{},"body":{"interfaces/Column.html":{}}}],["if(this.hasedge(edge.id",{"_index":2304,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["if(this.hasfiltered",{"_index":2351,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["if(this.hasnode(node.id",{"_index":2301,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["if(this.initdone",{"_index":3066,"title":{},"body":{"components/ResultTimeline.html":{}}}],["if(this.items.length",{"_index":3040,"title":{},"body":{"components/ResultTimeline.html":{}}}],["if(this.maxdate",{"_index":3519,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["if(this.mindate",{"_index":3517,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["if(this.nodecache.has(node.id",{"_index":2086,"title":{},"body":{"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{}}}],["if(this.nodetype.trigger",{"_index":2119,"title":{},"body":{"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{}}}],["if(this.openedwindow",{"_index":2650,"title":{},"body":{"components/MapComponent.html":{}}}],["if(this.orientation",{"_index":1329,"title":{},"body":{"components/BsTooltipComponent.html":{}}}],["if(this.providerssubscription",{"_index":3773,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["if(this.results",{"_index":1681,"title":{},"body":{"interfaces/Column.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["if(this.searchservice.breadcrumbs",{"_index":3798,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["if(this.searchservice.query.findselect(this.name",{"_index":2696,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["if(this.searchservice.query.select?.length",{"_index":1695,"title":{},"body":{"interfaces/Column.html":{}}}],["if(this.searchservice.query.select[i].facet.startswith(\"grid",{"_index":1698,"title":{},"body":{"interfaces/Column.html":{}}}],["if(this.selectedvalues.has(utils.tosqlvalue(item.value).tolowercase",{"_index":2394,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["if(this.skips[type.aggregation+node.id",{"_index":318,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{}}}],["if(this.tooltipitem",{"_index":2819,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["if(this.viewinit",{"_index":1132,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["if(this.zoombehavior",{"_index":3538,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["if(type",{"_index":239,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{}}}],["if(type.display",{"_index":1936,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["if(type.field",{"_index":548,"title":{},"body":{"classes/BaseProvider.html":{}}}],["if(type.nodetypes.length",{"_index":1918,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["if(type.nodetypes[0",{"_index":1863,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["if(type.parse",{"_index":259,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["if(typeof",{"_index":555,"title":{},"body":{"classes/BaseProvider.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["if(types.length",{"_index":317,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{}}}],["if(update",{"_index":1143,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/CustomData.html":{},"interfaces/HeatmapItem.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["if(utils.isarray(recorddata",{"_index":1874,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["if(utils.isarray(val",{"_index":2377,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["if(utils.isstring(recorddata",{"_index":1883,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["if(utils.isstring(this.record.modified",{"_index":3046,"title":{},"body":{"components/ResultTimeline.html":{}}}],["if(utils.isstring(v",{"_index":2379,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["if(utils.isstring(val",{"_index":2375,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["if(utils.isstring(value",{"_index":1886,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["if(utils.isundefined(x",{"_index":2815,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{}}}],["if(val",{"_index":2374,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["if(value[\"value",{"_index":1888,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["if(values.length",{"_index":278,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{}}}],["if(visibilityaction",{"_index":1711,"title":{},"body":{"interfaces/Column.html":{}}}],["if(year",{"_index":3026,"title":{},"body":{"components/ResultTimeline.html":{}}}],["ifilterparams",{"_index":2469,"title":{},"body":{"components/FacetWrapperComponent.html":{}}}],["ignore",{"_index":1792,"title":{},"body":{"interfaces/Column.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["ignored",{"_index":3114,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["image",{"_index":640,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsNodeInfoCard.html":{},"interfaces/NodeData.html":{}}}],["implementation",{"_index":491,"title":{},"body":{"classes/BaseProvider.html":{},"interfaces/Column.html":{}}}],["implemented",{"_index":1819,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["implements",{"_index":494,"title":{},"body":{"classes/BaseProvider.html":{},"components/BsEdgeInfoCard.html":{},"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/Column.html":{},"interfaces/FacetChartDataPoint.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{},"components/FacetNgxChart.html":{},"interfaces/HeatmapItem.html":{},"components/MapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"components/NgxChart.html":{},"interfaces/NodeData.html":{},"components/ResultTimeline.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{}}}],["import",{"_index":22,"title":{},"body":{"modules/AgGridModule.html":{},"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"components/BsEdgeInfoCard.html":{},"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"modules/BsHeatmapModule.html":{},"components/BsNodeInfoCard.html":{},"modules/BsTimelineModule.html":{},"components/BsTooltipComponent.html":{},"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/Column.html":{},"interfaces/CustomData.html":{},"components/DataModalComponent.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/FacetChartDataPoint.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{},"components/FacetNgxChart.html":{},"components/FacetWrapperComponent.html":{},"modules/FinanceModule.html":{},"modules/FusionChartsModule.html":{},"modules/GoogleMapsModule.html":{},"interfaces/HeatmapItem.html":{},"components/MapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"modules/NetworkModule.html":{},"interfaces/NetworkProvider.html":{},"components/NgxChart.html":{},"modules/NgxChartsModule.html":{},"interfaces/Node.html":{},"interfaces/NodeData.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"components/ResultTimeline.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineEventType.html":{},"components/TimelineLegendComponent.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{},"modules/VisTimelineModule.html":{}}}],["importance",{"_index":542,"title":{},"body":{"classes/BaseProvider.html":{}}}],["important",{"_index":3450,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["imports",{"_index":50,"title":{},"body":{"modules/AgGridModule.html":{},"modules/BsHeatmapModule.html":{},"modules/BsTimelineModule.html":{},"modules/FinanceModule.html":{},"modules/FusionChartsModule.html":{},"modules/GoogleMapsModule.html":{},"modules/NetworkModule.html":{},"modules/NgxChartsModule.html":{},"modules/VisTimelineModule.html":{}}}],["improved",{"_index":3655,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["inactive",{"_index":2168,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["incl",{"_index":2742,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{}}}],["include",{"_index":1809,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"miscellaneous/functions.html":{}}}],["includes",{"_index":415,"title":{},"body":{"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"classes/DynamicEdgeProvider.html":{},"classes/DynamicNodeProvider.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{}}}],["including",{"_index":1848,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["index",{"_index":74,"title":{"index.html":{}},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"components/BsEdgeInfoCard.html":{},"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"components/BsTooltipComponent.html":{},"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/Column.html":{},"interfaces/CustomData.html":{},"components/DataModalComponent.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/FacetChartDataPoint.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{},"components/FacetNgxChart.html":{},"components/FacetWrapperComponent.html":{},"interfaces/HeatmapItem.html":{},"components/MapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"components/NgxChart.html":{},"interfaces/Node.html":{},"interfaces/NodeData.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"components/ResultTimeline.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineEventType.html":{},"components/TimelineLegendComponent.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["individually",{"_index":332,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{}}}],["infinite",{"_index":1475,"title":{},"body":{"interfaces/Column.html":{},"components/FacetWrapperComponent.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["influence",{"_index":1893,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["info",{"_index":14,"title":{},"body":{"modules/AgGridModule.html":{},"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"components/BsEdgeInfoCard.html":{},"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"modules/BsHeatmapModule.html":{},"components/BsNodeInfoCard.html":{},"modules/BsTimelineModule.html":{},"components/BsTooltipComponent.html":{},"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/Column.html":{},"interfaces/CustomData.html":{},"components/DataModalComponent.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/FacetChartDataPoint.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{},"components/FacetNgxChart.html":{},"components/FacetWrapperComponent.html":{},"modules/FinanceModule.html":{},"modules/FusionChartsModule.html":{},"modules/GoogleMapsModule.html":{},"interfaces/HeatmapItem.html":{},"components/MapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"modules/NetworkModule.html":{},"interfaces/NetworkProvider.html":{},"components/NgxChart.html":{},"modules/NgxChartsModule.html":{},"interfaces/Node.html":{},"interfaces/NodeData.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"components/ResultTimeline.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineEventType.html":{},"components/TimelineLegendComponent.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{},"modules/VisTimelineModule.html":{},"coverage.html":{}}}],["information",{"_index":2114,"title":{},"body":{"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{}}}],["infowindow",{"_index":2593,"title":{},"body":{"components/MapComponent.html":{}}}],["inherited",{"_index":396,"title":{},"body":{"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"classes/DynamicEdgeProvider.html":{},"classes/DynamicNodeProvider.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{}}}],["initdone",{"_index":2964,"title":{},"body":{"components/ResultTimeline.html":{}}}],["initial",{"_index":3110,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{}}}],["initialization",{"_index":1638,"title":{},"body":{"interfaces/Column.html":{},"components/MapComponent.html":{}}}],["initialize",{"_index":299,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"components/BsNodeInfoCard.html":{},"interfaces/NodeData.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{}}}],["initialized",{"_index":1740,"title":{},"body":{"interfaces/Column.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{}}}],["inject",{"_index":2000,"title":{},"body":{"components/DataModalComponent.html":{}}}],["inject(modal_model",{"_index":1997,"title":{},"body":{"components/DataModalComponent.html":{}}}],["injectable",{"_index":4015,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["innerheight",{"_index":2698,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["innerwidth",{"_index":2697,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["input",{"_index":663,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"components/BsTooltipComponent.html":{},"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/Column.html":{},"interfaces/FacetChartDataPoint.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{},"components/FacetNgxChart.html":{},"interfaces/HeatmapItem.html":{},"components/MapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"components/NgxChart.html":{},"interfaces/NodeData.html":{},"components/ResultTimeline.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineEventType.html":{},"components/TimelineLegendComponent.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{}}}],["input(\"field",{"_index":834,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{}}}],["inputs",{"_index":654,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"components/BsTooltipComponent.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"components/MapComponent.html":{},"components/NgxChart.html":{},"components/ResultTimeline.html":{},"components/TimelineLegendComponent.html":{}}}],["insert",{"_index":2092,"title":{},"body":{"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{}}}],["inserted",{"_index":1798,"title":{},"body":{"interfaces/Column.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{},"miscellaneous/functions.html":{}}}],["inside",{"_index":1080,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["instance",{"_index":673,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsNodeInfoCard.html":{},"interfaces/CustomData.html":{},"interfaces/NodeData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["instanceof",{"_index":3347,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["instead",{"_index":440,"title":{},"body":{"classes/AsyncRecordsProvider.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"miscellaneous/functions.html":{}}}],["integer",{"_index":2789,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["integers",{"_index":2794,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["interaction",{"_index":1093,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{},"components/MapComponent.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{}}}],["interactions",{"_index":1097,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/HeatmapItem.html":{},"components/MapComponent.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["interface",{"_index":56,"title":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/Column.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/FacetChartDataPoint.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/NetworkContext.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeData.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineEventType.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{}},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/Column.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/FacetChartDataPoint.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{},"components/FacetNgxChart.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"components/NgxChart.html":{},"interfaces/Node.html":{},"interfaces/NodeData.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineEventType.html":{},"components/TimelineLegendComponent.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{},"coverage.html":{}}}],["interfaces",{"_index":58,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/Column.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/FacetChartDataPoint.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/NetworkContext.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeData.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineEventType.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{},"index.html":{}}}],["intermediate",{"_index":471,"title":{},"body":{"classes/AsyncRecordsProvider.html":{},"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["internally",{"_index":2175,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["interval",{"_index":3177,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{}}}],["interval*0.1",{"_index":3182,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["intervals",{"_index":3566,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["intlmodule",{"_index":33,"title":{},"body":{"modules/AgGridModule.html":{},"modules/BsHeatmapModule.html":{},"modules/BsTimelineModule.html":{},"modules/FinanceModule.html":{},"modules/FusionChartsModule.html":{},"modules/GoogleMapsModule.html":{},"modules/NetworkModule.html":{},"modules/NgxChartsModule.html":{},"modules/VisTimelineModule.html":{}}}],["intlservice",{"_index":1342,"title":{},"body":{"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/Column.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"components/NgxChart.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{}}}],["intlsubscription",{"_index":3415,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["invalid/empty",{"_index":3494,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["invisible",{"_index":1961,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["is(sq",{"_index":2458,"title":{},"body":{"components/FacetWrapperComponent.html":{}}}],["isaggregationedgetype",{"_index":4002,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["isaggregationedgetype(et",{"_index":173,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"miscellaneous/functions.html":{}}}],["isdynamicedgetype",{"_index":4011,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["isdynamicedgetype(et",{"_index":2023,"title":{},"body":{"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"miscellaneous/functions.html":{}}}],["isedgevisible(type",{"_index":1935,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["isfilteractive",{"_index":2466,"title":{},"body":{"components/FacetWrapperComponent.html":{}}}],["isfiltered",{"_index":761,"title":{},"body":{"components/BsFacetDate.html":{},"components/FacetNgxChart.html":{}}}],["isfiltered(item",{"_index":798,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/FacetChartDataPoint.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{},"components/FacetNgxChart.html":{}}}],["ishidden",{"_index":2429,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["isnan(val[1",{"_index":2844,"title":{},"body":{"interfaces/MoneyDatum.html":{}}}],["isoltated",{"_index":1979,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["isstructuraledgetype",{"_index":4019,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["isstructuraledgetype(et",{"_index":1835,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"miscellaneous/functions.html":{}}}],["istree",{"_index":2462,"title":{},"body":{"components/FacetWrapperComponent.html":{}}}],["it's",{"_index":2172,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["item",{"_index":155,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/FacetChartDataPoint.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{},"components/FacetNgxChart.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"components/NgxChart.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"components/ResultTimeline.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"miscellaneous/variables.html":{}}}],["item.count",{"_index":289,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"interfaces/FacetChartDataPoint.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{},"components/FacetNgxChart.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyDatum.html":{},"interfaces/NodeData.html":{}}}],["item.date",{"_index":3354,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["item.display!.length",{"_index":2747,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{}}}],["item.display!.substr(1",{"_index":2746,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{}}}],["item.display.split",{"_index":274,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{}}}],["item.node",{"_index":1282,"title":{},"body":{"components/BsNodeInfoCard.html":{},"interfaces/NodeData.html":{}}}],["item.node.context.appservice.getplurallabel(item.node.type.field",{"_index":1273,"title":{},"body":{"components/BsNodeInfoCard.html":{},"interfaces/NodeData.html":{}}}],["item.node.type.field",{"_index":1272,"title":{},"body":{"components/BsNodeInfoCard.html":{},"interfaces/NodeData.html":{}}}],["item.node.type.name",{"_index":1276,"title":{},"body":{"components/BsNodeInfoCard.html":{},"interfaces/NodeData.html":{}}}],["item.start",{"_index":1199,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["item.unsubscribe",{"_index":884,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{}}}],["item.value",{"_index":267,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["item.value.tostring",{"_index":3348,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["item:hover",{"_index":947,"title":{},"body":{"components/BsFacetDate.html":{}}}],["itemclicked",{"_index":998,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["itemclickevent",{"_index":1356,"title":{},"body":{"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"components/NgxChart.html":{}}}],["items",{"_index":107,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"components/ResultTimeline.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/VisEvent.html":{}}}],["items._data[properties.items[0]].start",{"_index":3058,"title":{},"body":{"components/ResultTimeline.html":{}}}],["itemsclickable",{"_index":990,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["itimeseries",{"_index":3271,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["itooltipparams",{"_index":1416,"title":{},"body":{"interfaces/Column.html":{}}}],["itself",{"_index":1903,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["j",{"_index":2080,"title":{},"body":{"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["jmin",{"_index":3282,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["job",{"_index":4079,"title":{},"body":{"miscellaneous/functions.html":{}}}],["jobs",{"_index":273,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{}}}],["join",{"_index":375,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{}}}],["justify",{"_index":3131,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["keep",{"_index":2788,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["keepdanglingnodes",{"_index":2230,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["keeping",{"_index":2606,"title":{},"body":{"components/MapComponent.html":{}}}],["kept",{"_index":2165,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["key",{"_index":582,"title":{},"body":{"classes/BaseProvider.html":{},"interfaces/Column.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["key:string",{"_index":3130,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineEventType.html":{},"components/TimelineLegendComponent.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{}}}],["keyword",{"_index":2668,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{}}}],["l",{"_index":3706,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["label",{"_index":358,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"classes/BaseProvider.html":{},"components/BsNodeInfoCard.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeData.html":{},"interfaces/NodeType.html":{},"miscellaneous/functions.html":{}}}],["label1",{"_index":609,"title":{},"body":{"classes/BaseProvider.html":{}}}],["label2",{"_index":611,"title":{},"body":{"classes/BaseProvider.html":{}}}],["labeldisplay",{"_index":4162,"title":{},"body":{"miscellaneous/variables.html":{}}}],["labels",{"_index":2277,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["labels.text.fill",{"_index":4127,"title":{},"body":{"miscellaneous/variables.html":{}}}],["labels.text.stroke",{"_index":4129,"title":{},"body":{"miscellaneous/variables.html":{}}}],["landscape.man_made",{"_index":4138,"title":{},"body":{"miscellaneous/variables.html":{}}}],["landscape.natural",{"_index":4140,"title":{},"body":{"miscellaneous/variables.html":{}}}],["language",{"_index":2401,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["larry",{"_index":112,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["last",{"_index":3672,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["last.push(event",{"_index":3678,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["lastbin",{"_index":3674,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["lastnode",{"_index":287,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["latitude",{"_index":2570,"title":{},"body":{"components/MapComponent.html":{}}}],["latitudefield",{"_index":2562,"title":{},"body":{"components/MapComponent.html":{}}}],["left",{"_index":635,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"components/BsTooltipComponent.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/NodeData.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{}}}],["left.px",{"_index":1330,"title":{},"body":{"components/BsTooltipComponent.html":{}}}],["legend",{"_index":699,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"components/BsTooltipComponent.html":{},"components/DataModalComponent.html":{},"components/FacetNgxChart.html":{},"components/FacetWrapperComponent.html":{},"components/MapComponent.html":{},"components/NgxChart.html":{},"components/ResultTimeline.html":{},"interfaces/TimelineEventType.html":{},"components/TimelineLegendComponent.html":{}}}],["legend.component",{"_index":1303,"title":{},"body":{"modules/BsTimelineModule.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["legend.component.ts",{"_index":3718,"title":{},"body":{"interfaces/TimelineEventType.html":{},"components/TimelineLegendComponent.html":{},"coverage.html":{}}}],["legend.component.ts:54",{"_index":3727,"title":{},"body":{"components/TimelineLegendComponent.html":{}}}],["legend.component.ts:55",{"_index":3728,"title":{},"body":{"components/TimelineLegendComponent.html":{}}}],["legend.component.ts:56",{"_index":3730,"title":{},"body":{"components/TimelineLegendComponent.html":{}}}],["legend.component.ts:57",{"_index":3731,"title":{},"body":{"components/TimelineLegendComponent.html":{}}}],["legend.component.ts:58",{"_index":3729,"title":{},"body":{"components/TimelineLegendComponent.html":{}}}],["legendevents",{"_index":3133,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["legendorientation",{"_index":3134,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["legendstyles",{"_index":3129,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineEventType.html":{},"components/TimelineLegendComponent.html":{},"interfaces/TimelineRecords.html":{}}}],["legendyoffset",{"_index":3136,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["length",{"_index":3691,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{}}}],["lets",{"_index":1621,"title":{},"body":{"interfaces/Column.html":{}}}],["library",{"_index":2532,"title":{},"body":{"modules/FusionChartsModule.html":{},"interfaces/VisEvent.html":{}}}],["life",{"_index":2145,"title":{},"body":{"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{}}}],["light",{"_index":1021,"title":{},"body":{"components/BsHeatmapComponent.html":{},"components/BsTooltipComponent.html":{},"modules/FusionChartsModule.html":{},"interfaces/HeatmapItem.html":{},"components/MapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{}}}],["lightblue",{"_index":3721,"title":{},"body":{"interfaces/TimelineEventType.html":{},"components/TimelineLegendComponent.html":{}}}],["limit",{"_index":3616,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["limits",{"_index":1825,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["line",{"_index":1157,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventType.html":{},"components/TimelineLegendComponent.html":{},"interfaces/TimelineSeries.html":{}}}],["linestyles",{"_index":3090,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{}}}],["link",{"_index":1832,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["linked",{"_index":4068,"title":{},"body":{"miscellaneous/functions.html":{}}}],["links",{"_index":1977,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["list",{"_index":191,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"components/BsHeatmapComponent.html":{},"interfaces/Column.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"components/FacetWrapperComponent.html":{},"components/MapComponent.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"miscellaneous/functions.html":{}}}],["list.sort((a,b",{"_index":1287,"title":{},"body":{"components/BsNodeInfoCard.html":{},"interfaces/NodeData.html":{}}}],["listen",{"_index":861,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{}}}],["listener",{"_index":3770,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["literal",{"_index":398,"title":{},"body":{"classes/AggregationProvider.html":{},"components/BsNodeInfoCard.html":{},"interfaces/EdgeType.html":{},"interfaces/NodeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineEventType.html":{},"components/TimelineLegendComponent.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"miscellaneous/typealiases.html":{}}}],["locale",{"_index":3418,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["localechange",{"_index":1363,"title":{},"body":{"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"components/NgxChart.html":{}}}],["longitude",{"_index":2574,"title":{},"body":{"components/MapComponent.html":{}}}],["longitudefield",{"_index":2563,"title":{},"body":{"components/MapComponent.html":{}}}],["look",{"_index":1611,"title":{},"body":{"interfaces/Column.html":{}}}],["lot",{"_index":2112,"title":{},"body":{"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{}}}],["m",{"_index":3149,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{}}}],["made",{"_index":3211,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["make",{"_index":1962,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["makedata",{"_index":2359,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["makedatasource",{"_index":1680,"title":{},"body":{"interfaces/Column.html":{}}}],["manage",{"_index":1488,"title":{},"body":{"interfaces/Column.html":{},"interfaces/CustomData.html":{},"components/MapComponent.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["manages",{"_index":2103,"title":{},"body":{"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{}}}],["managing",{"_index":64,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{}}}],["manual",{"_index":131,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"miscellaneous/typealiases.html":{}}}],["manually",{"_index":4104,"title":{},"body":{"miscellaneous/functions.html":{}}}],["many",{"_index":180,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"interfaces/VisEvent.html":{}}}],["map",{"_index":830,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{},"components/MapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["map((results",{"_index":916,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{}}}],["map(agg",{"_index":2344,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["map(col",{"_index":372,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{}}}],["map(d",{"_index":3235,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["map(e",{"_index":1267,"title":{},"body":{"components/BsNodeInfoCard.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeData.html":{},"interfaces/NodeType.html":{}}}],["map(events",{"_index":3198,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["map(item",{"_index":3345,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["map(r",{"_index":3246,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["map(results",{"_index":3267,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["map(x",{"_index":3609,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["map.component",{"_index":2548,"title":{},"body":{"modules/GoogleMapsModule.html":{}}}],["map.component.html",{"_index":2551,"title":{},"body":{"components/MapComponent.html":{}}}],["map.set(node.id",{"_index":2048,"title":{},"body":{"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{}}}],["mapcomponent",{"_index":730,"title":{"components/MapComponent.html":{}},"body":{"components/BsEdgeInfoCard.html":{},"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"components/BsTooltipComponent.html":{},"components/DataModalComponent.html":{},"components/FacetNgxChart.html":{},"components/FacetWrapperComponent.html":{},"modules/GoogleMapsModule.html":{},"components/MapComponent.html":{},"components/NgxChart.html":{},"components/ResultTimeline.html":{},"components/TimelineLegendComponent.html":{},"coverage.html":{},"index.html":{}}}],["mapstyles",{"_index":2556,"title":{},"body":{"components/MapComponent.html":{}}}],["margin",{"_index":991,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"components/ResultTimeline.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"miscellaneous/variables.html":{}}}],["marker",{"_index":2584,"title":{},"body":{"components/MapComponent.html":{}}}],["markers",{"_index":2604,"title":{},"body":{"components/MapComponent.html":{}}}],["marks",{"_index":2793,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["matching",{"_index":55,"title":{},"body":{"modules/AgGridModule.html":{},"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"components/BsEdgeInfoCard.html":{},"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"modules/BsHeatmapModule.html":{},"components/BsNodeInfoCard.html":{},"modules/BsTimelineModule.html":{},"components/BsTooltipComponent.html":{},"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/Column.html":{},"interfaces/CustomData.html":{},"components/DataModalComponent.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/FacetChartDataPoint.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{},"components/FacetNgxChart.html":{},"components/FacetWrapperComponent.html":{},"modules/FinanceModule.html":{},"modules/FusionChartsModule.html":{},"modules/GoogleMapsModule.html":{},"interfaces/HeatmapItem.html":{},"components/MapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"modules/NetworkModule.html":{},"interfaces/NetworkProvider.html":{},"components/NgxChart.html":{},"modules/NgxChartsModule.html":{},"interfaces/Node.html":{},"interfaces/NodeData.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"components/ResultTimeline.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineEventType.html":{},"components/TimelineLegendComponent.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{},"modules/VisTimelineModule.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["math.floor(event.date.gettime",{"_index":3676,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["math.floor(last[0].date.gettime",{"_index":3675,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["math.floor(this.innerwidth",{"_index":3661,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["math.max((this.innerheight",{"_index":3701,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["math.min(10",{"_index":3700,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["math.round(this.height",{"_index":3589,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["math.round(this.width",{"_index":3587,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["max",{"_index":1096,"title":{},"body":{"components/BsHeatmapComponent.html":{},"components/DataModalComponent.html":{},"interfaces/HeatmapItem.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{}}}],["max_dates",{"_index":2968,"title":{},"body":{"components/ResultTimeline.html":{}}}],["max_year",{"_index":2969,"title":{},"body":{"components/ResultTimeline.html":{}}}],["maxaggregationdate",{"_index":3119,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["maxdate",{"_index":3113,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{}}}],["maxheight",{"_index":2995,"title":{},"body":{"components/ResultTimeline.html":{},"miscellaneous/variables.html":{}}}],["maximum",{"_index":3101,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{}}}],["maxlat",{"_index":2623,"title":{},"body":{"components/MapComponent.html":{}}}],["maxlng",{"_index":2627,"title":{},"body":{"components/MapComponent.html":{}}}],["maxnmonths",{"_index":3100,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["maxx",{"_index":992,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["maxy",{"_index":993,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["maxzoomdays",{"_index":3123,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{}}}],["meaning",{"_index":4088,"title":{},"body":{"miscellaneous/functions.html":{}}}],["means",{"_index":120,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"miscellaneous/typealiases.html":{}}}],["measured",{"_index":3650,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["menu",{"_index":2328,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["merge",{"_index":479,"title":{},"body":{"classes/AsyncRecordsProvider.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["merge(dataset",{"_index":2253,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["merged",{"_index":545,"title":{},"body":{"classes/BaseProvider.html":{},"interfaces/CustomData.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["mergedatasets(datasets",{"_index":3782,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["mergedevents",{"_index":3143,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["mergedtimeseries",{"_index":3142,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["merges",{"_index":1916,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/VisEvent.html":{}}}],["merging",{"_index":2166,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["metadata",{"_index":66,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"components/BsEdgeInfoCard.html":{},"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"components/BsTooltipComponent.html":{},"interfaces/CustomData.html":{},"components/DataModalComponent.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"components/FacetNgxChart.html":{},"components/FacetWrapperComponent.html":{},"components/MapComponent.html":{},"components/NgxChart.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"components/ResultTimeline.html":{},"interfaces/StructuralEdgeType.html":{},"components/TimelineLegendComponent.html":{},"miscellaneous/functions.html":{}}}],["method",{"_index":363,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"components/BsEdgeInfoCard.html":{},"components/BsNodeInfoCard.html":{},"interfaces/Column.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeData.html":{},"interfaces/NodeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{}}}],["methods",{"_index":381,"title":{},"body":{"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"components/BsEdgeInfoCard.html":{},"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"components/DataModalComponent.html":{},"classes/DynamicEdgeProvider.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"components/FacetWrapperComponent.html":{},"components/MapComponent.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"components/NgxChart.html":{},"classes/RecordsProvider.html":{},"components/ResultTimeline.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["microsoft",{"_index":1841,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"miscellaneous/functions.html":{}}}],["middle",{"_index":564,"title":{},"body":{"classes/BaseProvider.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["min",{"_index":3281,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["min_dates",{"_index":2970,"title":{},"body":{"components/ResultTimeline.html":{}}}],["min_year",{"_index":2971,"title":{},"body":{"components/ResultTimeline.html":{}}}],["minaggregationdate",{"_index":3118,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["mindate",{"_index":3112,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{}}}],["mindiff",{"_index":3524,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["minheight",{"_index":2993,"title":{},"body":{"components/ResultTimeline.html":{},"miscellaneous/variables.html":{}}}],["minimum",{"_index":3516,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["minlat",{"_index":2621,"title":{},"body":{"components/MapComponent.html":{}}}],["minlng",{"_index":2625,"title":{},"body":{"components/MapComponent.html":{}}}],["minus",{"_index":850,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/FacetChartDataPoint.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{},"components/FacetNgxChart.html":{},"components/MapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/VisEvent.html":{}}}],["minzoomdays",{"_index":3121,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{}}}],["misc",{"_index":1102,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["miscellaneous",{"_index":4051,"title":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["missing",{"_index":2308,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["mistake",{"_index":218,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{}}}],["mm",{"_index":3364,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["modal",{"_index":1983,"title":{},"body":{"components/DataModalComponent.html":{}}}],["modal'},{'name",{"_index":723,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"components/BsTooltipComponent.html":{},"components/DataModalComponent.html":{},"components/FacetNgxChart.html":{},"components/FacetWrapperComponent.html":{},"components/MapComponent.html":{},"components/NgxChart.html":{},"components/ResultTimeline.html":{},"components/TimelineLegendComponent.html":{}}}],["modal.component",{"_index":47,"title":{},"body":{"modules/AgGridModule.html":{},"interfaces/Column.html":{}}}],["modal.component.html",{"_index":1986,"title":{},"body":{"components/DataModalComponent.html":{}}}],["modal.component.ts",{"_index":1982,"title":{},"body":{"components/DataModalComponent.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["modal.component.ts:30",{"_index":1994,"title":{},"body":{"components/DataModalComponent.html":{}}}],["modal.component.ts:31",{"_index":1995,"title":{},"body":{"components/DataModalComponent.html":{}}}],["modal.component.ts:32",{"_index":1991,"title":{},"body":{"components/DataModalComponent.html":{}}}],["modal.component.ts:35",{"_index":1998,"title":{},"body":{"components/DataModalComponent.html":{}}}],["modal.component.ts:36",{"_index":1999,"title":{},"body":{"components/DataModalComponent.html":{}}}],["modal.component.ts:37",{"_index":1996,"title":{},"body":{"components/DataModalComponent.html":{}}}],["modal.component.ts:42",{"_index":1992,"title":{},"body":{"components/DataModalComponent.html":{}}}],["modal.component.ts:53",{"_index":1993,"title":{},"body":{"components/DataModalComponent.html":{}}}],["modal_model",{"_index":2002,"title":{},"body":{"components/DataModalComponent.html":{}}}],["modalservice",{"_index":1412,"title":{},"body":{"interfaces/Column.html":{}}}],["mode",{"_index":119,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"interfaces/Column.html":{},"components/MapComponent.html":{},"miscellaneous/typealiases.html":{}}}],["model",{"_index":1484,"title":{},"body":{"interfaces/Column.html":{},"components/DataModalComponent.html":{},"components/FacetWrapperComponent.html":{}}}],["model.defaultstate",{"_index":1635,"title":{},"body":{"interfaces/Column.html":{}}}],["model.formatcontent",{"_index":2004,"title":{},"body":{"components/DataModalComponent.html":{}}}],["model.name",{"_index":2942,"title":{},"body":{"components/NgxChart.html":{}}}],["model.state",{"_index":1634,"title":{},"body":{"interfaces/Column.html":{}}}],["model.value",{"_index":2943,"title":{},"body":{"components/NgxChart.html":{}}}],["model[col.field",{"_index":1619,"title":{},"body":{"interfaces/Column.html":{}}}],["models",{"_index":95,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"components/BsEdgeInfoCard.html":{},"components/BsNodeInfoCard.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/NodeData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/VisEvent.html":{}}}],["models.ts",{"_index":2147,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"coverage.html":{}}}],["models.ts:100",{"_index":2914,"title":{},"body":{"interfaces/NetworkProvider.html":{}}}],["models.ts:103",{"_index":2911,"title":{},"body":{"interfaces/NetworkProvider.html":{}}}],["models.ts:106",{"_index":2909,"title":{},"body":{"interfaces/NetworkProvider.html":{}}}],["models.ts:109",{"_index":2908,"title":{},"body":{"interfaces/NetworkProvider.html":{}}}],["models.ts:112",{"_index":2913,"title":{},"body":{"interfaces/NetworkProvider.html":{}}}],["models.ts:128",{"_index":2869,"title":{},"body":{"interfaces/NetworkContext.html":{}}}],["models.ts:142",{"_index":2895,"title":{},"body":{"classes/NetworkDataset.html":{}}}],["models.ts:147",{"_index":2894,"title":{},"body":{"classes/NetworkDataset.html":{}}}],["models.ts:152",{"_index":2889,"title":{},"body":{"classes/NetworkDataset.html":{}}}],["models.ts:157",{"_index":2886,"title":{},"body":{"classes/NetworkDataset.html":{}}}],["models.ts:162",{"_index":2891,"title":{},"body":{"classes/NetworkDataset.html":{}}}],["models.ts:167",{"_index":2888,"title":{},"body":{"classes/NetworkDataset.html":{}}}],["models.ts:172",{"_index":2893,"title":{},"body":{"classes/NetworkDataset.html":{}}}],["models.ts:177",{"_index":2892,"title":{},"body":{"classes/NetworkDataset.html":{}}}],["models.ts:182",{"_index":2890,"title":{},"body":{"classes/NetworkDataset.html":{}}}],["models.ts:187",{"_index":2887,"title":{},"body":{"classes/NetworkDataset.html":{}}}],["models.ts:192",{"_index":2883,"title":{},"body":{"classes/NetworkDataset.html":{}}}],["models.ts:198",{"_index":2881,"title":{},"body":{"classes/NetworkDataset.html":{}}}],["models.ts:203",{"_index":2880,"title":{},"body":{"classes/NetworkDataset.html":{}}}],["models.ts:213",{"_index":2897,"title":{},"body":{"classes/NetworkDataset.html":{}}}],["models.ts:218",{"_index":2882,"title":{},"body":{"classes/NetworkDataset.html":{}}}],["models.ts:230",{"_index":2884,"title":{},"body":{"classes/NetworkDataset.html":{}}}],["models.ts:235",{"_index":2885,"title":{},"body":{"classes/NetworkDataset.html":{}}}],["models.ts:251",{"_index":2896,"title":{},"body":{"classes/NetworkDataset.html":{}}}],["models.ts:318",{"_index":2898,"title":{},"body":{"classes/NetworkDataset.html":{}}}],["models.ts:85",{"_index":2910,"title":{},"body":{"interfaces/NetworkProvider.html":{}}}],["models.ts:88",{"_index":2907,"title":{},"body":{"interfaces/NetworkProvider.html":{}}}],["models.ts:91",{"_index":2912,"title":{},"body":{"interfaces/NetworkProvider.html":{}}}],["models.ts:94",{"_index":2916,"title":{},"body":{"interfaces/NetworkProvider.html":{}}}],["models.ts:97",{"_index":2915,"title":{},"body":{"interfaces/NetworkProvider.html":{}}}],["modelupdatedevent",{"_index":1429,"title":{},"body":{"interfaces/Column.html":{}}}],["modes",{"_index":125,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"miscellaneous/typealiases.html":{}}}],["modified",{"_index":783,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{},"components/ResultTimeline.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["modifying",{"_index":2255,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{}}}],["module",{"_index":0,"title":{"modules/AgGridModule.html":{},"modules/BsHeatmapModule.html":{},"modules/BsTimelineModule.html":{},"modules/FinanceModule.html":{},"modules/FusionChartsModule.html":{},"modules/GoogleMapsModule.html":{},"modules/NetworkModule.html":{},"modules/NgxChartsModule.html":{},"modules/VisTimelineModule.html":{}},"body":{"modules/BsTimelineModule.html":{}}}],["module.ts",{"_index":3916,"title":{},"body":{"modules/VisTimelineModule.html":{}}}],["modules",{"_index":2,"title":{"modules.html":{}},"body":{"modules/AgGridModule.html":{},"modules/BsHeatmapModule.html":{},"modules/BsTimelineModule.html":{},"modules/FinanceModule.html":{},"modules/FusionChartsModule.html":{},"modules/GoogleMapsModule.html":{},"modules/NetworkModule.html":{},"modules/NgxChartsModule.html":{},"modules/VisTimelineModule.html":{},"index.html":{},"modules.html":{}}}],["moment",{"_index":832,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/CustomData.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"components/ResultTimeline.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["moment(date).format('ll",{"_index":3039,"title":{},"body":{"components/ResultTimeline.html":{}}}],["moment(dateobj.display).todate",{"_index":3034,"title":{},"body":{"components/ResultTimeline.html":{}}}],["moment(val.length",{"_index":3349,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["moment(value[0]).todate",{"_index":866,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{}}}],["moment(value[1]).todate",{"_index":868,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{}}}],["money",{"_index":733,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"components/BsTooltipComponent.html":{},"components/DataModalComponent.html":{},"components/FacetNgxChart.html":{},"components/FacetWrapperComponent.html":{},"modules/FinanceModule.html":{},"components/MapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"components/NgxChart.html":{},"components/ResultTimeline.html":{},"components/TimelineLegendComponent.html":{}}}],["moneyaggregation",{"_index":2674,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{}}}],["moneycloudcomponent",{"_index":732,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"components/BsTooltipComponent.html":{},"components/DataModalComponent.html":{},"components/FacetNgxChart.html":{},"components/FacetWrapperComponent.html":{},"modules/FinanceModule.html":{},"components/MapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"components/NgxChart.html":{},"components/ResultTimeline.html":{},"components/TimelineLegendComponent.html":{},"coverage.html":{},"index.html":{}}}],["moneyclouddatum",{"_index":2658,"title":{"interfaces/MoneyCloudDatum.html":{}},"body":{"interfaces/MoneyCloudDatum.html":{},"coverage.html":{}}}],["moneycolumn",{"_index":2825,"title":{},"body":{"interfaces/MoneyDatum.html":{}}}],["moneydatum",{"_index":2820,"title":{"interfaces/MoneyDatum.html":{}},"body":{"interfaces/MoneyDatum.html":{},"coverage.html":{}}}],["moneytimelinecomponent",{"_index":735,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"components/BsTooltipComponent.html":{},"components/DataModalComponent.html":{},"components/FacetNgxChart.html":{},"components/FacetWrapperComponent.html":{},"modules/FinanceModule.html":{},"components/MapComponent.html":{},"interfaces/MoneyDatum.html":{},"components/NgxChart.html":{},"components/ResultTimeline.html":{},"components/TimelineLegendComponent.html":{},"coverage.html":{},"index.html":{}}}],["moneyvaluecolumn",{"_index":2671,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{}}}],["mono",{"_index":1871,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["month",{"_index":3360,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["months",{"_index":3102,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["more",{"_index":1441,"title":{},"body":{"interfaces/Column.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["mouse",{"_index":1061,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["mouseevent",{"_index":1058,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["move",{"_index":680,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsNodeInfoCard.html":{},"interfaces/NodeData.html":{}}}],["moved",{"_index":3593,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["ms",{"_index":1092,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["msg#facet.clearselects",{"_index":2334,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"components/MapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/VisEvent.html":{}}}],["msg#facet.date.custom",{"_index":946,"title":{},"body":{"components/BsFacetDate.html":{}}}],["msg#facet.filters.clear",{"_index":852,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{}}}],["msg#googlemaps.filterarea",{"_index":2619,"title":{},"body":{"components/MapComponent.html":{}}}],["msg#grid.autosize",{"_index":1652,"title":{},"body":{"interfaces/Column.html":{}}}],["msg#grid.autosizetitle",{"_index":1653,"title":{},"body":{"interfaces/Column.html":{}}}],["msg#grid.columns",{"_index":1504,"title":{},"body":{"interfaces/Column.html":{}}}],["msg#grid.copy",{"_index":1656,"title":{},"body":{"interfaces/Column.html":{}}}],["msg#grid.copytitle",{"_index":1657,"title":{},"body":{"interfaces/Column.html":{}}}],["msg#grid.download",{"_index":1660,"title":{},"body":{"interfaces/Column.html":{}}}],["msg#grid.downloadtitle",{"_index":1661,"title":{},"body":{"interfaces/Column.html":{}}}],["msg#grid.formatdata",{"_index":1664,"title":{},"body":{"interfaces/Column.html":{},"components/DataModalComponent.html":{}}}],["msg#grid.formatdatatitle",{"_index":1665,"title":{},"body":{"interfaces/Column.html":{}}}],["msg#grid.reset",{"_index":1647,"title":{},"body":{"interfaces/Column.html":{}}}],["msg#grid.resettitle",{"_index":1648,"title":{},"body":{"interfaces/Column.html":{}}}],["msg#heatmap.showing",{"_index":1201,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["msg#heatmap.tooltip",{"_index":1208,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["msg#network.actions.active",{"_index":514,"title":{},"body":{"classes/BaseProvider.html":{}}}],["msg#network.actions.collapsemeta",{"_index":1973,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["msg#network.actions.expandmeta",{"_index":1970,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["msg#network.actions.fetchmoreall",{"_index":343,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{}}}],["msg#network.actions.fetchmorealltext",{"_index":345,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{}}}],["msg#network.actions.inactive",{"_index":515,"title":{},"body":{"classes/BaseProvider.html":{}}}],["msg#network.actions.providers",{"_index":3809,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["msg#network.actions.refresh",{"_index":3760,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["msg#network.actions.reset",{"_index":523,"title":{},"body":{"classes/BaseProvider.html":{}}}],["msg#network.actions.resettitle",{"_index":524,"title":{},"body":{"classes/BaseProvider.html":{}}}],["msg#network.actions.toggle",{"_index":516,"title":{},"body":{"classes/BaseProvider.html":{}}}],["msg#network.infocards.aggregation",{"_index":691,"title":{},"body":{"components/BsEdgeInfoCard.html":{}}}],["msg#network.infocards.count",{"_index":688,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsNodeInfoCard.html":{}}}],["msg#network.infocards.record",{"_index":693,"title":{},"body":{"components/BsEdgeInfoCard.html":{}}}],["msgfrom",{"_index":1909,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["msgto",{"_index":1910,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["multi",{"_index":1872,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["multiple",{"_index":1459,"title":{},"body":{"interfaces/Column.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"components/MapComponent.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["multivalued",{"_index":2430,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["mutable",{"_index":2163,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["mutate",{"_index":2126,"title":{},"body":{"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{}}}],["mutatenodes(nodes",{"_index":2134,"title":{},"body":{"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{}}}],["mutates",{"_index":2133,"title":{},"body":{"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{}}}],["mutation",{"_index":2138,"title":{},"body":{"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/VisEvent.html":{}}}],["muted",{"_index":697,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsNodeInfoCard.html":{}}}],["n.visible",{"_index":2200,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["name",{"_index":144,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"components/BsEdgeInfoCard.html":{},"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"components/BsTooltipComponent.html":{},"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/Column.html":{},"interfaces/CustomData.html":{},"components/DataModalComponent.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/FacetChartDataPoint.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{},"components/FacetNgxChart.html":{},"components/FacetWrapperComponent.html":{},"components/MapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"components/NgxChart.html":{},"interfaces/Node.html":{},"interfaces/NodeData.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"components/ResultTimeline.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineEventType.html":{},"components/TimelineLegendComponent.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{},"miscellaneous/functions.html":{}}}],["names",{"_index":1541,"title":{},"body":{"interfaces/Column.html":{}}}],["native",{"_index":2715,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["nbins",{"_index":3660,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["necessarily",{"_index":1534,"title":{},"body":{"interfaces/Column.html":{}}}],["necessary",{"_index":2029,"title":{},"body":{"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{}}}],["need",{"_index":319,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"modules/BsTimelineModule.html":{},"components/FacetWrapperComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{}}}],["needs",{"_index":2511,"title":{},"body":{"components/FacetWrapperComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["neighbor",{"_index":477,"title":{},"body":{"classes/AsyncRecordsProvider.html":{},"components/BsNodeInfoCard.html":{},"interfaces/CustomData.html":{},"classes/DynamicEdgeProvider.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeData.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["neighbor.count",{"_index":2238,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["neighbor.key",{"_index":1290,"title":{},"body":{"components/BsNodeInfoCard.html":{}}}],["neighbor.visible",{"_index":1952,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["neighbors",{"_index":1250,"title":{},"body":{"components/BsNodeInfoCard.html":{},"interfaces/CustomData.html":{},"interfaces/NodeData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["neighborsneighbors",{"_index":1949,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["network",{"_index":94,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"components/BsEdgeInfoCard.html":{},"components/BsNodeInfoCard.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeData.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/VisEvent.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["network'},{'name",{"_index":737,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"components/BsTooltipComponent.html":{},"components/DataModalComponent.html":{},"components/FacetNgxChart.html":{},"components/FacetWrapperComponent.html":{},"components/MapComponent.html":{},"components/NgxChart.html":{},"components/ResultTimeline.html":{},"components/TimelineLegendComponent.html":{}}}],["network.component",{"_index":2905,"title":{},"body":{"modules/NetworkModule.html":{}}}],["network.component.html",{"_index":3737,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["network/.../aggregation",{"_index":4053,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["network/.../dynamic",{"_index":4054,"title":{},"body":{"miscellaneous/functions.html":{}}}],["network/.../network",{"_index":4052,"title":{},"body":{"miscellaneous/functions.html":{}}}],["network/.../network.component.ts",{"_index":4117,"title":{},"body":{"miscellaneous/variables.html":{}}}],["network/.../records",{"_index":4055,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["network/docs/network",{"_index":3735,"title":{},"body":{"interfaces/VisEvent.html":{},"miscellaneous/variables.html":{}}}],["network/docs/network/edges.html",{"_index":2161,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["network/docs/network/nodes.html",{"_index":2156,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["network/edge",{"_index":627,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"coverage.html":{}}}],["network/network",{"_index":2146,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["network/network.component.ts",{"_index":3733,"title":{},"body":{"interfaces/VisEvent.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["network/network.module.ts",{"_index":2903,"title":{},"body":{"modules/NetworkModule.html":{}}}],["network/node",{"_index":1249,"title":{},"body":{"components/BsNodeInfoCard.html":{},"interfaces/NodeData.html":{},"coverage.html":{}}}],["network/providers/aggregation",{"_index":59,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["network/providers/async",{"_index":436,"title":{},"body":{"classes/AsyncRecordsProvider.html":{},"coverage.html":{}}}],["network/providers/base",{"_index":490,"title":{},"body":{"classes/BaseProvider.html":{},"coverage.html":{}}}],["network/providers/dynamic",{"_index":2012,"title":{},"body":{"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["network/providers/provider",{"_index":4013,"title":{},"body":{"coverage.html":{}}}],["network/providers/records",{"_index":1805,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["network/providers/selected",{"_index":3070,"title":{},"body":{"classes/SelectedRecordsProvider.html":{},"coverage.html":{}}}],["networkcomponent",{"_index":736,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"components/BsTooltipComponent.html":{},"components/DataModalComponent.html":{},"components/FacetNgxChart.html":{},"components/FacetWrapperComponent.html":{},"components/MapComponent.html":{},"modules/NetworkModule.html":{},"components/NgxChart.html":{},"components/ResultTimeline.html":{},"components/TimelineLegendComponent.html":{},"interfaces/VisEvent.html":{},"coverage.html":{},"index.html":{}}}],["networkcontext",{"_index":93,"title":{"interfaces/NetworkContext.html":{}},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"interfaces/CustomData.html":{},"classes/DynamicEdgeProvider.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/VisEvent.html":{},"coverage.html":{}}}],["networkdataset",{"_index":92,"title":{"classes/NetworkDataset.html":{}},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/VisEvent.html":{},"coverage.html":{}}}],["networkinitialized",{"_index":3819,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["networkinstance",{"_index":676,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsNodeInfoCard.html":{},"interfaces/NodeData.html":{}}}],["networkinstance.focus(node.id",{"_index":678,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsNodeInfoCard.html":{},"interfaces/NodeData.html":{}}}],["networkinstance.selectnodes([node.id",{"_index":682,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsNodeInfoCard.html":{},"interfaces/NodeData.html":{}}}],["networkmodule",{"_index":2899,"title":{"modules/NetworkModule.html":{}},"body":{"modules/NetworkModule.html":{},"index.html":{},"modules.html":{}}}],["networkprovider",{"_index":291,"title":{"interfaces/NetworkProvider.html":{}},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/VisEvent.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["networkservice",{"_index":674,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsNodeInfoCard.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeData.html":{},"interfaces/NodeType.html":{},"interfaces/VisEvent.html":{}}}],["new",{"_index":149,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/Column.html":{},"interfaces/CustomData.html":{},"components/DataModalComponent.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/FacetChartDataPoint.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{},"components/FacetNgxChart.html":{},"interfaces/HeatmapItem.html":{},"components/MapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"components/NgxChart.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"components/ResultTimeline.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["newmodel",{"_index":1784,"title":{},"body":{"interfaces/Column.html":{}}}],["newrows",{"_index":1758,"title":{},"body":{"interfaces/Column.html":{}}}],["newrows?.find(row",{"_index":1764,"title":{},"body":{"interfaces/Column.html":{}}}],["newrows?.foreach(row",{"_index":1768,"title":{},"body":{"interfaces/Column.html":{}}}],["newselection",{"_index":3606,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["next",{"_index":458,"title":{},"body":{"classes/AsyncRecordsProvider.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["ng",{"_index":1215,"title":{},"body":{"components/BsHeatmapComponent.html":{},"components/FacetWrapperComponent.html":{}}}],["ngafterviewinit",{"_index":983,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["ngdocheck",{"_index":1396,"title":{},"body":{"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"components/NgxChart.html":{}}}],["ngmodule",{"_index":23,"title":{},"body":{"modules/AgGridModule.html":{},"modules/BsHeatmapModule.html":{},"modules/BsTimelineModule.html":{},"modules/FinanceModule.html":{},"modules/FusionChartsModule.html":{},"modules/GoogleMapsModule.html":{},"modules/NetworkModule.html":{},"modules/NgxChartsModule.html":{},"modules/VisTimelineModule.html":{}}}],["ngonchanges",{"_index":653,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"components/FacetNgxChart.html":{},"interfaces/HeatmapItem.html":{},"components/MapComponent.html":{},"components/NgxChart.html":{},"interfaces/NodeData.html":{},"components/ResultTimeline.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["ngonchanges(changes",{"_index":800,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/Column.html":{},"interfaces/FacetChartDataPoint.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{},"components/FacetNgxChart.html":{},"components/MapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"components/NgxChart.html":{},"components/ResultTimeline.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{}}}],["ngonchanges(changes:simplechanges",{"_index":2998,"title":{},"body":{"components/ResultTimeline.html":{}}}],["ngondestroy",{"_index":762,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/Column.html":{},"interfaces/FacetChartDataPoint.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{},"components/FacetNgxChart.html":{},"components/NgxChart.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{}}}],["ngoninit",{"_index":763,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/Column.html":{},"components/DataModalComponent.html":{},"interfaces/FacetChartDataPoint.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{},"components/FacetNgxChart.html":{},"components/NgxChart.html":{}}}],["ngx",{"_index":725,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"components/BsTooltipComponent.html":{},"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"components/DataModalComponent.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"components/FacetWrapperComponent.html":{},"components/MapComponent.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"modules/NetworkModule.html":{},"interfaces/NetworkProvider.html":{},"components/NgxChart.html":{},"modules/NgxChartsModule.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"components/ResultTimeline.html":{},"components/TimelineLegendComponent.html":{},"interfaces/VisEvent.html":{},"modules/VisTimelineModule.html":{},"coverage.html":{},"dependencies.html":{}}}],["ngxchart",{"_index":738,"title":{"components/NgxChart.html":{}},"body":{"components/BsEdgeInfoCard.html":{},"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"components/BsTooltipComponent.html":{},"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"components/DataModalComponent.html":{},"components/FacetNgxChart.html":{},"components/FacetWrapperComponent.html":{},"components/MapComponent.html":{},"components/NgxChart.html":{},"modules/NgxChartsModule.html":{},"components/ResultTimeline.html":{},"components/TimelineLegendComponent.html":{},"coverage.html":{},"index.html":{}}}],["ngxchartsmodule",{"_index":2947,"title":{"modules/NgxChartsModule.html":{}},"body":{"modules/NgxChartsModule.html":{},"index.html":{},"modules.html":{}}}],["nmonths",{"_index":3273,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["node",{"_index":89,"title":{"interfaces/Node.html":{}},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"components/BsEdgeInfoCard.html":{},"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"components/BsTooltipComponent.html":{},"interfaces/CustomData.html":{},"components/DataModalComponent.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"components/FacetNgxChart.html":{},"components/FacetWrapperComponent.html":{},"components/MapComponent.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"modules/NetworkModule.html":{},"interfaces/NetworkProvider.html":{},"components/NgxChart.html":{},"interfaces/Node.html":{},"interfaces/NodeData.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"components/ResultTimeline.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"components/TimelineLegendComponent.html":{},"interfaces/VisEvent.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["node's",{"_index":4097,"title":{},"body":{"miscellaneous/functions.html":{}}}],["node.context.name",{"_index":592,"title":{},"body":{"classes/BaseProvider.html":{}}}],["node.context.networkservice['networks'][node.context.name",{"_index":677,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsNodeInfoCard.html":{},"interfaces/NodeData.html":{}}}],["node.context.searchservice.query.addselect(expr",{"_index":591,"title":{},"body":{"classes/BaseProvider.html":{}}}],["node.context.searchservice.search",{"_index":593,"title":{},"body":{"classes/BaseProvider.html":{}}}],["node.context.select(node",{"_index":685,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsNodeInfoCard.html":{},"interfaces/NodeData.html":{}}}],["node.count",{"_index":698,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["node.data.id",{"_index":1516,"title":{},"body":{"interfaces/Column.html":{}}}],["node.id",{"_index":1900,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["node.id.substr(node.type.name.length+1",{"_index":536,"title":{},"body":{"classes/BaseProvider.html":{}}}],["node.isselected",{"_index":1802,"title":{},"body":{"interfaces/Column.html":{}}}],["node.label",{"_index":359,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"classes/BaseProvider.html":{},"components/BsEdgeInfoCard.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{}}}],["node.provider",{"_index":586,"title":{},"body":{"classes/BaseProvider.html":{}}}],["node.record",{"_index":1878,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["node.record[type.field",{"_index":1869,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["node.setselected(event.type",{"_index":1517,"title":{},"body":{"interfaces/Column.html":{}}}],["node.setselected(true",{"_index":1803,"title":{},"body":{"interfaces/Column.html":{}}}],["node.type",{"_index":316,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["node.type.field",{"_index":587,"title":{},"body":{"classes/BaseProvider.html":{}}}],["node.visible",{"_index":1897,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["node1.id",{"_index":530,"title":{},"body":{"classes/BaseProvider.html":{}}}],["node2",{"_index":529,"title":{},"body":{"classes/BaseProvider.html":{}}}],["node2.id",{"_index":532,"title":{},"body":{"classes/BaseProvider.html":{}}}],["node['icon']['code",{"_index":695,"title":{},"body":{"components/BsEdgeInfoCard.html":{}}}],["node[\\'icon\\'][\\'code",{"_index":707,"title":{},"body":{"components/BsEdgeInfoCard.html":{}}}],["nodecache",{"_index":2037,"title":{},"body":{"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{}}}],["nodeclicked",{"_index":3742,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["nodedata",{"_index":1251,"title":{"interfaces/NodeData.html":{}},"body":{"components/BsNodeInfoCard.html":{},"interfaces/NodeData.html":{},"coverage.html":{}}}],["nodedata.count",{"_index":1293,"title":{},"body":{"components/BsNodeInfoCard.html":{}}}],["nodedata.node.label",{"_index":1292,"title":{},"body":{"components/BsNodeInfoCard.html":{}}}],["nodedata.node['icon']['code",{"_index":1291,"title":{},"body":{"components/BsNodeInfoCard.html":{}}}],["nodedata.node[\\'icon\\'][\\'code",{"_index":1294,"title":{},"body":{"components/BsNodeInfoCard.html":{}}}],["nodefrom",{"_index":594,"title":{},"body":{"classes/BaseProvider.html":{}}}],["nodefrom.label",{"_index":610,"title":{},"body":{"classes/BaseProvider.html":{}}}],["nodefrom.type.field",{"_index":606,"title":{},"body":{"classes/BaseProvider.html":{}}}],["nodeid",{"_index":2236,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["nodeidx",{"_index":2184,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["nodeoptions",{"_index":2157,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["nodes",{"_index":150,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/VisEvent.html":{},"miscellaneous/functions.html":{}}}],["nodes.foreach(node",{"_index":2212,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["nodes.remove(nodes.get().filter(n",{"_index":2294,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["nodes.update(this.getvisiblenodes",{"_index":2298,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["nodes/edges",{"_index":1906,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["nodes[i].getcomputedtextlength",{"_index":1191,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["nodeto",{"_index":596,"title":{},"body":{"classes/BaseProvider.html":{}}}],["nodeto.label",{"_index":612,"title":{},"body":{"classes/BaseProvider.html":{}}}],["nodeto.type.field",{"_index":607,"title":{},"body":{"classes/BaseProvider.html":{}}}],["nodetpl",{"_index":3750,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["nodetype",{"_index":445,"title":{"interfaces/NodeType.html":{}},"body":{"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"interfaces/CustomData.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"coverage.html":{}}}],["nodetypes",{"_index":2160,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["nodetypes[1",{"_index":154,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{}}}],["none",{"_index":1239,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventType.html":{},"components/TimelineLegendComponent.html":{},"interfaces/TimelineSeries.html":{}}}],["normalize",{"_index":2741,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{}}}],["north",{"_index":2646,"title":{},"body":{"components/MapComponent.html":{}}}],["note",{"_index":543,"title":{},"body":{"classes/BaseProvider.html":{},"components/BsHeatmapComponent.html":{},"interfaces/Column.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/HeatmapItem.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{}}}],["nothing",{"_index":3679,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["notify",{"_index":1789,"title":{},"body":{"interfaces/Column.html":{},"interfaces/MoneyDatum.html":{},"interfaces/VisEvent.html":{}}}],["now",{"_index":3821,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["nticks",{"_index":3586,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["null",{"_index":1485,"title":{},"body":{"interfaces/Column.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["null/undefined",{"_index":3685,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["number",{"_index":164,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"components/BsTooltipComponent.html":{},"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/Column.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{},"interfaces/HeatmapItem.html":{},"components/MapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"components/NgxChart.html":{},"interfaces/Node.html":{},"interfaces/NodeData.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"components/ResultTimeline.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineEventType.html":{},"components/TimelineLegendComponent.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{}}}],["number.isinteger(tick",{"_index":2787,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["number.max_value",{"_index":3563,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["number.min_value",{"_index":3562,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["numbercardmodule",{"_index":2957,"title":{},"body":{"modules/NgxChartsModule.html":{}}}],["numerical",{"_index":2743,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{}}}],["o(n",{"_index":2242,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["obama",{"_index":4086,"title":{},"body":{"miscellaneous/functions.html":{}}}],["object",{"_index":442,"title":{},"body":{"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"components/BsEdgeInfoCard.html":{},"components/BsNodeInfoCard.html":{},"interfaces/Column.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"components/MapComponent.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeData.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"miscellaneous/variables.html":{}}}],["object.assign",{"_index":2254,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["object.keys(query.aggregations).foreach(aggregation",{"_index":216,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{}}}],["object.values(this.neighbors",{"_index":1285,"title":{},"body":{"components/BsNodeInfoCard.html":{},"interfaces/NodeData.html":{}}}],["objects",{"_index":1438,"title":{},"body":{"interfaces/Column.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["observable",{"_index":3092,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["observables",{"_index":3138,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["obtain",{"_index":2018,"title":{},"body":{"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{}}}],["obtained",{"_index":1135,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/HeatmapItem.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["occurrences",{"_index":837,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{}}}],["of({aggregation",{"_index":3259,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["oldmodel",{"_index":1782,"title":{},"body":{"interfaces/Column.html":{}}}],["oldrows",{"_index":1760,"title":{},"body":{"interfaces/Column.html":{}}}],["oldrows.find(id",{"_index":1770,"title":{},"body":{"interfaces/Column.html":{}}}],["oldrows.foreach(id",{"_index":1762,"title":{},"body":{"interfaces/Column.html":{}}}],["ommit",{"_index":921,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{}}}],["on(\"click",{"_index":1167,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["on(\"end",{"_index":1149,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["on(\"mousedown.zoom",{"_index":3556,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["on(\"mousemove",{"_index":2717,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["on(\"mouseout",{"_index":2830,"title":{},"body":{"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["on(\"start",{"_index":3438,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["on(\"touchend.zoom",{"_index":3560,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["on(\"touchmove.zoom",{"_index":3559,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["on(\"touchstart.zoom",{"_index":3558,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["on(\"zoom",{"_index":3552,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["on('brush",{"_index":3440,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["on('end",{"_index":3442,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["on/off",{"_index":3642,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["onafterviewinit",{"_index":1134,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["onaxisclicked",{"_index":984,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["onaxisclicked(value",{"_index":1050,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["onboundschange",{"_index":2559,"title":{},"body":{"components/MapComponent.html":{}}}],["onboundschange(bounds",{"_index":2587,"title":{},"body":{"components/MapComponent.html":{}}}],["onbrush",{"_index":3601,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["onbrushend",{"_index":3605,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["once",{"_index":331,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"interfaces/CustomData.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{},"interfaces/HeatmapItem.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["oncelldoubleclicked(event",{"_index":1749,"title":{},"body":{"interfaces/Column.html":{}}}],["onchange",{"_index":3740,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["onchanges",{"_index":629,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/Column.html":{},"interfaces/FacetChartDataPoint.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{},"components/FacetNgxChart.html":{},"interfaces/HeatmapItem.html":{},"components/MapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"components/NgxChart.html":{},"interfaces/NodeData.html":{},"components/ResultTimeline.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{}}}],["onchanges,afterviewinit",{"_index":2667,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{}}}],["onclick",{"_index":130,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"miscellaneous/typealiases.html":{}}}],["ondatasetsmerged",{"_index":387,"title":{},"body":{"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"interfaces/CustomData.html":{},"classes/DynamicEdgeProvider.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/NetworkProvider.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["ondatasetsmerged(dataset",{"_index":428,"title":{},"body":{"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"classes/DynamicEdgeProvider.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{}}}],["ondestroy",{"_index":388,"title":{},"body":{"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"components/BsFacetDate.html":{},"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/Column.html":{},"classes/DynamicEdgeProvider.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/FacetChartDataPoint.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{},"components/FacetNgxChart.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"components/NgxChart.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{}}}],["one",{"_index":311,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{}}}],["onedgeclicked",{"_index":389,"title":{},"body":{"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"classes/DynamicEdgeProvider.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/NetworkProvider.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{}}}],["onedgeclicked(edge",{"_index":431,"title":{},"body":{"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"classes/DynamicEdgeProvider.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{}}}],["ones",{"_index":1980,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["oneventclick(event",{"_index":3643,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["oneventclicked(event",{"_index":3319,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["onfilterchanged",{"_index":1777,"title":{},"body":{"interfaces/Column.html":{}}}],["onfilterchanged(event",{"_index":1790,"title":{},"body":{"interfaces/Column.html":{}}}],["onfiltermodified(event",{"_index":1778,"title":{},"body":{"interfaces/Column.html":{}}}],["ongridready(event",{"_index":1741,"title":{},"body":{"interfaces/Column.html":{}}}],["oninit",{"_index":749,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/Column.html":{},"interfaces/FacetChartDataPoint.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{},"components/FacetNgxChart.html":{},"components/NgxChart.html":{}}}],["oninsert",{"_index":135,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"miscellaneous/typealiases.html":{}}}],["onitemclicked",{"_index":985,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["onitemclicked(item",{"_index":1054,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["only/56821215",{"_index":2795,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["onmapclick",{"_index":2560,"title":{},"body":{"components/MapComponent.html":{}}}],["onmapclick(event",{"_index":2590,"title":{},"body":{"components/MapComponent.html":{}}}],["onmarkerclick",{"_index":2561,"title":{},"body":{"components/MapComponent.html":{}}}],["onmarkerclick(event",{"_index":2592,"title":{},"body":{"components/MapComponent.html":{}}}],["onmodelupdated(event",{"_index":1800,"title":{},"body":{"interfaces/Column.html":{}}}],["onmouseenterdatum(datum",{"_index":2810,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{}}}],["onmousemove",{"_index":2805,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["onmouseout",{"_index":2864,"title":{},"body":{"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["onmouseover",{"_index":986,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["onmouseover(item",{"_index":1057,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["onnetworkclick(eventdata",{"_index":3830,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["onnodeclicked",{"_index":384,"title":{},"body":{"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"classes/DynamicEdgeProvider.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/NetworkProvider.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{}}}],["onnodeclicked(node",{"_index":314,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["onnodesinserted",{"_index":390,"title":{},"body":{"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"classes/DynamicEdgeProvider.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/NetworkProvider.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{}}}],["onnodesinserted(nodes",{"_index":433,"title":{},"body":{"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"classes/DynamicEdgeProvider.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{}}}],["onopensettings(opened",{"_index":3866,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["onrangechange(range",{"_index":3311,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["onrecordclicked(datum",{"_index":2859,"title":{},"body":{"interfaces/MoneyDatum.html":{}}}],["onresize",{"_index":1368,"title":{},"body":{"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"components/NgxChart.html":{}}}],["onrowdatachanged(event",{"_index":1746,"title":{},"body":{"interfaces/Column.html":{}}}],["onselectionchange(selection",{"_index":3294,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["onselectionchanged(event",{"_index":1757,"title":{},"body":{"interfaces/Column.html":{}}}],["onsortchanged(event",{"_index":1796,"title":{},"body":{"interfaces/Column.html":{}}}],["onzoom",{"_index":3613,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["onzoomend",{"_index":3621,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["ootbconfig",{"_index":3985,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["ootbconfig(providerfactory",{"_index":4071,"title":{},"body":{"miscellaneous/functions.html":{}}}],["opacity",{"_index":954,"title":{},"body":{"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"interfaces/TimelineEventType.html":{},"components/TimelineLegendComponent.html":{}}}],["open",{"_index":3565,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["opened",{"_index":2609,"title":{},"body":{"components/MapComponent.html":{},"interfaces/VisEvent.html":{}}}],["openedwindow",{"_index":2557,"title":{},"body":{"components/MapComponent.html":{}}}],["optional",{"_index":76,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"components/BsEdgeInfoCard.html":{},"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"interfaces/ChartOptions.html":{},"interfaces/Column.html":{},"interfaces/CustomData.html":{},"components/DataModalComponent.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/FacetDateParams.html":{},"components/FacetNgxChart.html":{},"components/FacetWrapperComponent.html":{},"interfaces/HeatmapItem.html":{},"components/MapComponent.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"components/NgxChart.html":{},"interfaces/Node.html":{},"interfaces/NodeData.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"components/ResultTimeline.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineEventType.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"miscellaneous/functions.html":{}}}],["options",{"_index":143,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"classes/BaseProvider.html":{},"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"components/NgxChart.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"components/ResultTimeline.html":{},"interfaces/VisEvent.html":{},"miscellaneous/variables.html":{}}}],["optionsprefs",{"_index":3741,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["order",{"_index":923,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/Column.html":{},"interfaces/FacetChartDataPoint.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{},"components/FacetNgxChart.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["orderby",{"_index":1627,"title":{},"body":{"interfaces/Column.html":{}}}],["ordering",{"_index":1715,"title":{},"body":{"interfaces/Column.html":{}}}],["ored",{"_index":2252,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["orientation",{"_index":1321,"title":{},"body":{"components/BsTooltipComponent.html":{},"interfaces/TimelineEventType.html":{},"components/TimelineLegendComponent.html":{}}}],["original",{"_index":2106,"title":{},"body":{"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{},"miscellaneous/functions.html":{}}}],["originalcount",{"_index":969,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["others",{"_index":1816,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["out",{"_index":13,"title":{},"body":{"modules/AgGridModule.html":{},"modules/BsHeatmapModule.html":{},"modules/BsTimelineModule.html":{},"modules/FinanceModule.html":{},"modules/FusionChartsModule.html":{},"modules/GoogleMapsModule.html":{},"modules/NetworkModule.html":{},"modules/NgxChartsModule.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"modules/VisTimelineModule.html":{},"index.html":{}}}],["output",{"_index":1088,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/HeatmapItem.html":{},"components/MapComponent.html":{},"interfaces/MoneyDatum.html":{},"components/NgxChart.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{}}}],["output(\"item",{"_index":1354,"title":{},"body":{"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"components/NgxChart.html":{}}}],["outputs",{"_index":996,"title":{},"body":{"components/BsHeatmapComponent.html":{},"components/MapComponent.html":{},"components/NgxChart.html":{}}}],["outside",{"_index":3452,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["over",{"_index":1062,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/CustomData.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["overflow",{"_index":1984,"title":{},"body":{"components/DataModalComponent.html":{},"components/NgxChart.html":{}}}],["overlay",{"_index":2692,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{}}}],["override",{"_index":186,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"components/BsFacetDate.html":{},"interfaces/Column.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/FacetChartDataPoint.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{},"components/FacetNgxChart.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/VisEvent.html":{}}}],["overriden",{"_index":1468,"title":{},"body":{"interfaces/Column.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["overview",{"_index":4105,"title":{"index.html":{}},"body":{"index.html":{}}}],["p.getdata(this.context",{"_index":3780,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["p.getedgeactions(this._selectededge",{"_index":3806,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["p.getnodeactions(this._selectednode",{"_index":3802,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["p.getprovider",{"_index":3777,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["p.getprovider())).subscribe(dataset",{"_index":2043,"title":{},"body":{"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{}}}],["p.getprovideractions",{"_index":3811,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["p.ondatasetsmerged(dataset",{"_index":3786,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["p.onedgeclicked(edge",{"_index":3758,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["p.onnodeclicked(node",{"_index":3756,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["p.onnodesinserted(this.context.nodes.get",{"_index":3792,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["package",{"_index":4034,"title":{"dependencies.html":{}},"body":{}}],["padding",{"_index":957,"title":{},"body":{"components/BsFacetDate.html":{},"components/FacetWrapperComponent.html":{}}}],["page",{"_index":113,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"interfaces/CustomData.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["pages",{"_index":4091,"title":{},"body":{"miscellaneous/functions.html":{}}}],["paginate",{"_index":1831,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"miscellaneous/typealiases.html":{}}}],["pagination",{"_index":1826,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["panel",{"_index":3865,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["param",{"_index":171,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"components/BsHeatmapComponent.html":{},"interfaces/Column.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyDatum.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{}}}],["parameter",{"_index":160,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["parameters",{"_index":394,"title":{},"body":{"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"components/BsEdgeInfoCard.html":{},"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"components/DataModalComponent.html":{},"classes/DynamicEdgeProvider.html":{},"classes/DynamicNodeProvider.html":{},"components/FacetNgxChart.html":{},"components/FacetWrapperComponent.html":{},"interfaces/HeatmapItem.html":{},"components/MapComponent.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"components/NgxChart.html":{},"classes/RecordsProvider.html":{},"components/ResultTimeline.html":{},"classes/SelectedRecordsProvider.html":{},"miscellaneous/functions.html":{}}}],["params",{"_index":1672,"title":{},"body":{"interfaces/Column.html":{},"components/FacetWrapperComponent.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["params.coldef",{"_index":1670,"title":{},"body":{"interfaces/Column.html":{}}}],["params.coldef.$column",{"_index":1676,"title":{},"body":{"interfaces/Column.html":{}}}],["params.onlyselected",{"_index":1725,"title":{},"body":{"interfaces/Column.html":{}}}],["params.value",{"_index":1669,"title":{},"body":{"interfaces/Column.html":{}}}],["parent",{"_index":2858,"title":{},"body":{"interfaces/MoneyDatum.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{}}}],["parse",{"_index":71,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"interfaces/CustomData.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["parsed",{"_index":1807,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["parsedexpr",{"_index":3167,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["parsedexpr.operands[0",{"_index":3171,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["parseentity",{"_index":2744,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{}}}],["parsefloat(val[1",{"_index":2845,"title":{},"body":{"interfaces/MoneyDatum.html":{}}}],["parsefloat(valuestr",{"_index":2751,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{}}}],["parseint(id[1",{"_index":3062,"title":{},"body":{"components/ResultTimeline.html":{}}}],["parsing",{"_index":269,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{}}}],["part",{"_index":922,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{}}}],["particular",{"_index":2015,"title":{},"body":{"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["passed",{"_index":2176,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/VisEvent.html":{}}}],["path",{"_index":3705,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["paul",{"_index":4100,"title":{},"body":{"miscellaneous/functions.html":{}}}],["peer",{"_index":4037,"title":{},"body":{"dependencies.html":{}}}],["people",{"_index":4102,"title":{},"body":{"miscellaneous/functions.html":{}}}],["per",{"_index":3139,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{}}}],["performs",{"_index":1823,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["permanent",{"_index":2039,"title":{},"body":{"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{}}}],["persist",{"_index":1589,"title":{},"body":{"interfaces/Column.html":{}}}],["person",{"_index":4063,"title":{},"body":{"miscellaneous/functions.html":{}}}],["piece",{"_index":3698,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["piechartmodule",{"_index":2955,"title":{},"body":{"modules/NgxChartsModule.html":{}}}],["pipe",{"_index":873,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{}}}],["pixel",{"_index":3651,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["pixperevent",{"_index":3657,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["plus",{"_index":339,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{}}}],["poi",{"_index":4142,"title":{},"body":{"miscellaneous/variables.html":{}}}],["poi.park",{"_index":4145,"title":{},"body":{"miscellaneous/variables.html":{}}}],["point",{"_index":1136,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["pointer",{"_index":1226,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/VisEvent.html":{}}}],["points",{"_index":2403,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["populate",{"_index":1588,"title":{},"body":{"interfaces/Column.html":{}}}],["popup_extract(id[0",{"_index":3061,"title":{},"body":{"components/ResultTimeline.html":{}}}],["pos",{"_index":3016,"title":{},"body":{"components/ResultTimeline.html":{}}}],["position",{"_index":1210,"title":{},"body":{"components/BsHeatmapComponent.html":{},"components/BsTooltipComponent.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{}}}],["possible",{"_index":1860,"title":{},"body":{"interfaces/CustomData.html":{},"components/MapComponent.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["possibly",{"_index":1467,"title":{},"body":{"interfaces/Column.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["post",{"_index":478,"title":{},"body":{"classes/AsyncRecordsProvider.html":{},"interfaces/CustomData.html":{},"classes/DynamicEdgeProvider.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/VisEvent.html":{}}}],["potentially",{"_index":312,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["pre",{"_index":1103,"title":{},"body":{"components/BsHeatmapComponent.html":{},"components/DataModalComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["precedence",{"_index":1815,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["preference",{"_index":1590,"title":{},"body":{"interfaces/Column.html":{},"interfaces/VisEvent.html":{}}}],["preferences",{"_index":1525,"title":{},"body":{"interfaces/Column.html":{},"interfaces/VisEvent.html":{}}}],["prefs",{"_index":1502,"title":{},"body":{"interfaces/Column.html":{},"interfaces/VisEvent.html":{}}}],["present",{"_index":1907,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["pretty",{"_index":1275,"title":{},"body":{"components/BsNodeInfoCard.html":{},"interfaces/NodeData.html":{}}}],["prev.merge(cur",{"_index":3785,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["prevent",{"_index":1976,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["previous",{"_index":841,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["previously",{"_index":2088,"title":{},"body":{"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{}}}],["previousvalue",{"_index":3681,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["previousvalue.length",{"_index":3695,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["primary",{"_index":909,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{}}}],["primaryseries",{"_index":3498,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["primitives",{"_index":2834,"title":{},"body":{"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["prior",{"_index":3111,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{}}}],["private",{"_index":895,"title":{},"body":{"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/FacetChartDataPoint.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{},"components/FacetNgxChart.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"components/NgxChart.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["probably",{"_index":1842,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["process",{"_index":230,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"components/BsHeatmapComponent.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/HeatmapItem.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{}}}],["processcellcallback",{"_index":1722,"title":{},"body":{"interfaces/Column.html":{}}}],["processcellforexportparams",{"_index":1425,"title":{},"body":{"interfaces/Column.html":{}}}],["processed",{"_index":2032,"title":{},"body":{"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{}}}],["processednodes",{"_index":2033,"title":{},"body":{"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{}}}],["processes",{"_index":2125,"title":{},"body":{"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{}}}],["processing",{"_index":1820,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["processnode(node",{"_index":2084,"title":{},"body":{"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{}}}],["produce",{"_index":3739,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["produced",{"_index":3781,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["programmatic",{"_index":1793,"title":{},"body":{"interfaces/Column.html":{}}}],["programmatically",{"_index":1040,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/CustomData.html":{},"interfaces/HeatmapItem.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["propagate",{"_index":1960,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["propagated",{"_index":3317,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["properties",{"_index":75,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"components/BsEdgeInfoCard.html":{},"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/Column.html":{},"interfaces/CustomData.html":{},"components/DataModalComponent.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/FacetChartDataPoint.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{},"components/FacetNgxChart.html":{},"components/FacetWrapperComponent.html":{},"interfaces/HeatmapItem.html":{},"components/MapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"components/NgxChart.html":{},"interfaces/Node.html":{},"interfaces/NodeData.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"components/ResultTimeline.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineEventType.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{}}}],["properties.event",{"_index":3053,"title":{},"body":{"components/ResultTimeline.html":{}}}],["properties.event.target,url",{"_index":3063,"title":{},"body":{"components/ResultTimeline.html":{}}}],["properties.items",{"_index":3051,"title":{},"body":{"components/ResultTimeline.html":{}}}],["properties.items[0].split",{"_index":3056,"title":{},"body":{"components/ResultTimeline.html":{}}}],["property",{"_index":418,"title":{},"body":{"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"interfaces/Column.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["protected",{"_index":187,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"components/BsFacetDate.html":{},"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"components/NgxChart.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{}}}],["provide",{"_index":2111,"title":{},"body":{"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["provided",{"_index":148,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/MoneyDatum.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["provider",{"_index":104,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/VisEvent.html":{},"miscellaneous/functions.html":{}}}],["provider.ts",{"_index":60,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["provider.ts:10",{"_index":448,"title":{},"body":{"classes/AsyncRecordsProvider.html":{}}}],["provider.ts:141",{"_index":406,"title":{},"body":{"classes/AggregationProvider.html":{}}}],["provider.ts:15",{"_index":498,"title":{},"body":{"classes/BaseProvider.html":{}}}],["provider.ts:151",{"_index":504,"title":{},"body":{"classes/BaseProvider.html":{}}}],["provider.ts:155",{"_index":501,"title":{},"body":{"classes/BaseProvider.html":{}}}],["provider.ts:159",{"_index":506,"title":{},"body":{"classes/BaseProvider.html":{}}}],["provider.ts:16",{"_index":497,"title":{},"body":{"classes/BaseProvider.html":{}}}],["provider.ts:163",{"_index":510,"title":{},"body":{"classes/BaseProvider.html":{}}}],["provider.ts:167",{"_index":509,"title":{},"body":{"classes/BaseProvider.html":{}}}],["provider.ts:171",{"_index":508,"title":{},"body":{"classes/BaseProvider.html":{}}}],["provider.ts:179",{"_index":505,"title":{},"body":{"classes/BaseProvider.html":{}}}],["provider.ts:18",{"_index":499,"title":{},"body":{"classes/BaseProvider.html":{}}}],["provider.ts:188",{"_index":503,"title":{},"body":{"classes/BaseProvider.html":{}}}],["provider.ts:19",{"_index":3078,"title":{},"body":{"classes/SelectedRecordsProvider.html":{}}}],["provider.ts:21",{"_index":496,"title":{},"body":{"classes/BaseProvider.html":{}}}],["provider.ts:211",{"_index":502,"title":{},"body":{"classes/BaseProvider.html":{}}}],["provider.ts:23",{"_index":500,"title":{},"body":{"classes/BaseProvider.html":{}}}],["provider.ts:245",{"_index":507,"title":{},"body":{"classes/BaseProvider.html":{}}}],["provider.ts:25",{"_index":495,"title":{},"body":{"classes/BaseProvider.html":{}}}],["provider.ts:28",{"_index":455,"title":{},"body":{"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{}}}],["provider.ts:39",{"_index":2116,"title":{},"body":{"classes/DynamicNodeProvider.html":{}}}],["provider.ts:58",{"_index":2097,"title":{},"body":{"classes/DynamicEdgeProvider.html":{}}}],["provider.ts:65",{"_index":393,"title":{},"body":{"classes/AggregationProvider.html":{}}}],["provider.ts:74",{"_index":2959,"title":{},"body":{"classes/RecordsProvider.html":{}}}],["providerfactory",{"_index":4016,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["providers",{"_index":457,"title":{},"body":{"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/VisEvent.html":{}}}],["providersactionlist",{"_index":3807,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["providerssubscription",{"_index":3753,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["provides",{"_index":1539,"title":{},"body":{"interfaces/Column.html":{}}}],["providing",{"_index":1861,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["public",{"_index":185,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"components/BsFacetDate.html":{},"interfaces/Column.html":{},"interfaces/CustomData.html":{},"components/DataModalComponent.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{},"components/MapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"components/ResultTimeline.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/VisEvent.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["q",{"_index":2070,"title":{},"body":{"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{}}}],["queries",{"_index":2022,"title":{},"body":{"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["queries.filter(q",{"_index":2069,"title":{},"body":{"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{}}}],["query",{"_index":97,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"components/BsFacetDate.html":{},"interfaces/Column.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"miscellaneous/functions.html":{}}}],["query.action",{"_index":203,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"components/BsFacetDate.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["query.addselect(`${ccaggregation.column}:[${this.formatdayrequest(range[0])}..${this.formatdayrequest(range[1",{"_index":3264,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["query.addselect(this.context.exprbuilder.makeexpr(sourcenode.type.field",{"_index":214,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{}}}],["query.aggregations",{"_index":205,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"components/BsFacetDate.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["query.aggregations[type.aggregation",{"_index":207,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{}}}],["query.findselect(\"grid",{"_index":1616,"title":{},"body":{"interfaces/Column.html":{}}}],["query.orderby.split",{"_index":1632,"title":{},"body":{"interfaces/Column.html":{}}}],["query.select",{"_index":3292,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["query|undefined",{"_index":2079,"title":{},"body":{"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{}}}],["r",{"_index":2687,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["r.$selected",{"_index":3251,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["r.id",{"_index":1515,"title":{},"body":{"interfaces/Column.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["r.records.length",{"_index":2123,"title":{},"body":{"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{}}}],["r.records[0",{"_index":2124,"title":{},"body":{"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{}}}],["r.title",{"_index":3257,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["r[this.latitudefield",{"_index":2632,"title":{},"body":{"components/MapComponent.html":{}}}],["r[this.moneyvaluecolumn]?.foreach((item",{"_index":2775,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{}}}],["radius",{"_index":644,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsNodeInfoCard.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/NodeData.html":{}}}],["range",{"_index":810,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["range([0",{"_index":1118,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["range([4",{"_index":2705,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{}}}],["range([this.innerheight",{"_index":2703,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["range(d3.schemecategory10",{"_index":2707,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{}}}],["range(d3[this.colorscheme][this.buckets",{"_index":1129,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["range(this.x.range",{"_index":3583,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["range(this.xt.range",{"_index":3585,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["range).pipe",{"_index":3234,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["range).subscribe",{"_index":3218,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["range[0",{"_index":919,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["range[1",{"_index":920,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["rangechange",{"_index":3391,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["rangeinit",{"_index":3390,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["raw",{"_index":1010,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["rawdata",{"_index":258,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{}}}],["rawdata.directed",{"_index":283,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{}}}],["rawdata.directed[i",{"_index":284,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{}}}],["rawdata.fieldvalue",{"_index":288,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{}}}],["rawdata.relations",{"_index":281,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{}}}],["rawdata.relations[i",{"_index":282,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{}}}],["rawvalue",{"_index":2663,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{}}}],["rawvalue.split",{"_index":2841,"title":{},"body":{"interfaces/MoneyDatum.html":{}}}],["re",{"_index":2136,"title":{},"body":{"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{}}}],["reactiveformsmodule",{"_index":28,"title":{},"body":{"modules/AgGridModule.html":{},"modules/BsHeatmapModule.html":{},"modules/BsTimelineModule.html":{},"modules/NetworkModule.html":{}}}],["read",{"_index":2685,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["read/write",{"_index":2681,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["readable",{"_index":2170,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["readonly",{"_index":182,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"classes/DynamicEdgeProvider.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/VisEvent.html":{}}}],["rebuild",{"_index":2053,"title":{},"body":{"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["rebuilds",{"_index":2050,"title":{},"body":{"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/VisEvent.html":{}}}],["recomputed",{"_index":3116,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["recomputes",{"_index":2832,"title":{},"body":{"interfaces/MoneyDatum.html":{}}}],["record",{"_index":465,"title":{},"body":{"classes/AsyncRecordsProvider.html":{},"interfaces/Column.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"components/MapComponent.html":{},"interfaces/MoneyDatum.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"components/ResultTimeline.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"miscellaneous/functions.html":{}}}],["record.$selected",{"_index":2370,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["record.id",{"_index":1852,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["record.title",{"_index":1855,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["record?.[this.moneycolumn]?.foreach(money",{"_index":2838,"title":{},"body":{"interfaces/MoneyDatum.html":{}}}],["record['title",{"_index":2656,"title":{},"body":{"components/MapComponent.html":{}}}],["record[\\'title",{"_index":2657,"title":{},"body":{"components/MapComponent.html":{}}}],["record[this.appservice.getcolumnalias(this.appservice.getcolumn(this.data.column",{"_index":2373,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["recordclicked",{"_index":2564,"title":{},"body":{"components/MapComponent.html":{},"interfaces/MoneyDatum.html":{}}}],["recorddata",{"_index":1868,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["recorddata.foreach((value,i",{"_index":1875,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["recordnode",{"_index":1811,"title":{"interfaces/RecordNode.html":{}},"body":{"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"coverage.html":{}}}],["recordnode).record",{"_index":1975,"title":{},"body":{"interfaces/CustomData.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["recordnode.record",{"_index":1913,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["records",{"_index":437,"title":{},"body":{"classes/AsyncRecordsProvider.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"components/MapComponent.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["records.length",{"_index":1846,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["records.map(record",{"_index":1850,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["recordsprovider",{"_index":443,"title":{"classes/RecordsProvider.html":{}},"body":{"classes/AsyncRecordsProvider.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"coverage.html":{}}}],["recordsproviderdemo",{"_index":3986,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["recordsproviderdemo(providerfactory",{"_index":4074,"title":{},"body":{"miscellaneous/functions.html":{}}}],["recordsproviders",{"_index":438,"title":{},"body":{"classes/AsyncRecordsProvider.html":{}}}],["record|undefined",{"_index":2135,"title":{},"body":{"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{}}}],["recreate",{"_index":3580,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["rect",{"_index":1237,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["rectangle",{"_index":3472,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["red",{"_index":3380,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["redraw",{"_index":2803,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["redrawing",{"_index":3458,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["referencing",{"_index":198,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{}}}],["reflect",{"_index":540,"title":{},"body":{"classes/BaseProvider.html":{},"interfaces/Column.html":{}}}],["reformat",{"_index":2402,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["refresh",{"_index":3081,"title":{},"body":{"classes/SelectedRecordsProvider.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{}}}],["refreshaction",{"_index":3748,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["refreshed",{"_index":3072,"title":{},"body":{"classes/SelectedRecordsProvider.html":{},"miscellaneous/functions.html":{}}}],["refreshnodeoptions(node",{"_index":2139,"title":{},"body":{"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{}}}],["register",{"_index":3822,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["relation",{"_index":280,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"classes/BaseProvider.html":{},"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["relations",{"_index":80,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"miscellaneous/functions.html":{}}}],["relative",{"_index":1214,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["relativex",{"_index":1186,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["relevant",{"_index":2350,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["remaining",{"_index":2232,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["remove",{"_index":924,"title":{},"body":{"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{}}}],["removed",{"_index":842,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["removeedge(id",{"_index":2312,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["removeedges",{"_index":2878,"title":{},"body":{"classes/NetworkDataset.html":{}}}],["removeedges(ids",{"_index":2227,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["removenode(id",{"_index":2310,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["removenodes(ids",{"_index":2222,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["removes",{"_index":2231,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["rendercell",{"_index":1671,"title":{},"body":{"interfaces/Column.html":{}}}],["rendered",{"_index":2177,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{},"miscellaneous/functions.html":{}}}],["rendering",{"_index":1393,"title":{},"body":{"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/Column.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"components/NgxChart.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["reorganize",{"_index":3622,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["replacecurrent",{"_index":769,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{}}}],["replaysubject",{"_index":3093,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["replaysubject(1",{"_index":3189,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["representing",{"_index":2148,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["repulsion",{"_index":3881,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["repulsioncontrol",{"_index":3874,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["repulsioncontrol.value",{"_index":3890,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["repulsionpref",{"_index":3908,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["require",{"_index":3162,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["required",{"_index":136,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"components/BsHeatmapComponent.html":{}}}],["res",{"_index":2077,"title":{},"body":{"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{}}}],["res.results",{"_index":2075,"title":{},"body":{"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{}}}],["res.results.map(r",{"_index":2122,"title":{},"body":{"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{}}}],["reset",{"_index":12,"title":{},"body":{"modules/AgGridModule.html":{},"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"modules/BsHeatmapModule.html":{},"modules/BsTimelineModule.html":{},"interfaces/Column.html":{},"classes/DynamicEdgeProvider.html":{},"classes/DynamicNodeProvider.html":{},"modules/FinanceModule.html":{},"modules/FusionChartsModule.html":{},"modules/GoogleMapsModule.html":{},"modules/NetworkModule.html":{},"modules/NgxChartsModule.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"modules/VisTimelineModule.html":{},"index.html":{}}}],["resetaction",{"_index":380,"title":{},"body":{"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"classes/DynamicEdgeProvider.html":{},"classes/DynamicNodeProvider.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{}}}],["resets",{"_index":1714,"title":{},"body":{"interfaces/Column.html":{},"interfaces/VisEvent.html":{}}}],["resetstate",{"_index":1689,"title":{},"body":{"interfaces/Column.html":{}}}],["resizable",{"_index":1478,"title":{},"body":{"interfaces/Column.html":{}}}],["resize",{"_index":1733,"title":{},"body":{"interfaces/Column.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["resolution",{"_index":3339,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["respond",{"_index":1049,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/Column.html":{},"interfaces/HeatmapItem.html":{}}}],["responds",{"_index":3638,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["rest",{"_index":1036,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["result",{"_index":740,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"components/BsTooltipComponent.html":{},"components/DataModalComponent.html":{},"components/FacetNgxChart.html":{},"components/FacetWrapperComponent.html":{},"components/MapComponent.html":{},"components/NgxChart.html":{},"components/ResultTimeline.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"components/TimelineLegendComponent.html":{},"interfaces/TimelineSeries.html":{},"modules/VisTimelineModule.html":{}}}],["resulting",{"_index":481,"title":{},"body":{"classes/AsyncRecordsProvider.html":{},"classes/DynamicEdgeProvider.html":{},"classes/DynamicNodeProvider.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{}}}],["resultmodule",{"_index":43,"title":{},"body":{"modules/AgGridModule.html":{}}}],["results",{"_index":54,"title":{},"body":{"modules/AgGridModule.html":{},"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"components/BsEdgeInfoCard.html":{},"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"modules/BsHeatmapModule.html":{},"components/BsNodeInfoCard.html":{},"modules/BsTimelineModule.html":{},"components/BsTooltipComponent.html":{},"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/Column.html":{},"interfaces/CustomData.html":{},"components/DataModalComponent.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/FacetChartDataPoint.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{},"components/FacetNgxChart.html":{},"components/FacetWrapperComponent.html":{},"modules/FinanceModule.html":{},"modules/FusionChartsModule.html":{},"modules/GoogleMapsModule.html":{},"interfaces/HeatmapItem.html":{},"components/MapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"modules/NetworkModule.html":{},"interfaces/NetworkProvider.html":{},"components/NgxChart.html":{},"modules/NgxChartsModule.html":{},"interfaces/Node.html":{},"interfaces/NodeData.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"components/ResultTimeline.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineEventType.html":{},"components/TimelineLegendComponent.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{},"modules/VisTimelineModule.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["results.aggregations[0",{"_index":917,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["results.records[0",{"_index":2132,"title":{},"body":{"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{}}}],["resulttimeline",{"_index":739,"title":{"components/ResultTimeline.html":{}},"body":{"components/BsEdgeInfoCard.html":{},"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"components/BsTooltipComponent.html":{},"components/DataModalComponent.html":{},"components/FacetNgxChart.html":{},"components/FacetWrapperComponent.html":{},"components/MapComponent.html":{},"components/NgxChart.html":{},"components/ResultTimeline.html":{},"components/TimelineLegendComponent.html":{},"modules/VisTimelineModule.html":{},"coverage.html":{},"index.html":{}}}],["retrieve",{"_index":453,"title":{},"body":{"classes/AsyncRecordsProvider.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["retrieves",{"_index":292,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"classes/BaseProvider.html":{}}}],["return",{"_index":157,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"classes/BaseProvider.html":{},"components/BsEdgeInfoCard.html":{},"components/BsFacetDate.html":{},"components/BsNodeInfoCard.html":{},"components/BsTooltipComponent.html":{},"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/Column.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/FacetChartDataPoint.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{},"components/FacetNgxChart.html":{},"components/FacetWrapperComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"components/NgxChart.html":{},"interfaces/Node.html":{},"interfaces/NodeData.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{}}}],["returned",{"_index":70,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["returns",{"_index":407,"title":{},"body":{"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"components/BsEdgeInfoCard.html":{},"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"interfaces/Column.html":{},"interfaces/CustomData.html":{},"components/DataModalComponent.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"components/FacetWrapperComponent.html":{},"components/MapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"components/NgxChart.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"components/ResultTimeline.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"miscellaneous/functions.html":{}}}],["rextent",{"_index":2755,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{}}}],["rextent[0",{"_index":2760,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{}}}],["rextent[1",{"_index":2761,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{}}}],["rgb(0,0,0,0.125",{"_index":1319,"title":{},"body":{"components/BsTooltipComponent.html":{}}}],["rgb(132",{"_index":3722,"title":{},"body":{"interfaces/TimelineEventType.html":{},"components/TimelineLegendComponent.html":{}}}],["right",{"_index":636,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"components/BsTooltipComponent.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/HeatmapItem.html":{},"components/MapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/NodeData.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{}}}],["right.px",{"_index":1337,"title":{},"body":{"components/BsTooltipComponent.html":{}}}],["rnode",{"_index":2082,"title":{},"body":{"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{}}}],["rnode.record",{"_index":2083,"title":{},"body":{"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{}}}],["road",{"_index":4148,"title":{},"body":{"miscellaneous/variables.html":{}}}],["road.highway",{"_index":4151,"title":{},"body":{"miscellaneous/variables.html":{}}}],["rolling",{"_index":2397,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["rotate",{"_index":1161,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{},"miscellaneous/variables.html":{}}}],["row",{"_index":1455,"title":{},"body":{"interfaces/Column.html":{},"components/DataModalComponent.html":{},"components/FacetWrapperComponent.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineEventType.html":{},"components/TimelineLegendComponent.html":{},"interfaces/TimelineRecords.html":{}}}],["row\"|\"column",{"_index":3135,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineEventType.html":{},"components/TimelineLegendComponent.html":{},"interfaces/TimelineRecords.html":{}}}],["row.id",{"_index":1765,"title":{},"body":{"interfaces/Column.html":{}}}],["rowdata",{"_index":1499,"title":{},"body":{"interfaces/Column.html":{}}}],["rowdatachangedevent",{"_index":1420,"title":{},"body":{"interfaces/Column.html":{}}}],["rowmodeltype",{"_index":1474,"title":{},"body":{"interfaces/Column.html":{}}}],["rows",{"_index":1461,"title":{},"body":{"interfaces/Column.html":{}}}],["rowselection",{"_index":1457,"title":{},"body":{"interfaces/Column.html":{}}}],["rxjs",{"_index":511,"title":{},"body":{"classes/BaseProvider.html":{},"components/BsFacetDate.html":{},"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/Column.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/FacetChartDataPoint.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{},"components/FacetNgxChart.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"components/NgxChart.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{}}}],["rxjs/operators",{"_index":831,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["s",{"_index":3509,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["s.dates",{"_index":3504,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["s.primary",{"_index":3500,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["s.unsubscribe",{"_index":1532,"title":{},"body":{"interfaces/Column.html":{}}}],["same",{"_index":469,"title":{},"body":{"classes/AsyncRecordsProvider.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{}}}],["sample",{"_index":3977,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["saved",{"_index":3903,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["scale",{"_index":1185,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/HeatmapItem.html":{},"components/MapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{}}}],["scaleextent",{"_index":3544,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["scaleextent([scaleextent/this.maxzoomdays",{"_index":3550,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["scaleextent/this.minzoomdays",{"_index":3551,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["scalefactor",{"_index":572,"title":{},"body":{"classes/BaseProvider.html":{}}}],["scales",{"_index":1098,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["scaling",{"_index":3144,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["scheme",{"_index":1095,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"interfaces/HeatmapItem.html":{},"components/NgxChart.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["schemeblues",{"_index":1006,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["scratch",{"_index":2054,"title":{},"body":{"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{}}}],["scrollable",{"_index":1505,"title":{},"body":{"interfaces/Column.html":{}}}],["scrolling",{"_index":1472,"title":{},"body":{"interfaces/Column.html":{}}}],["search",{"_index":416,"title":{},"body":{"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"components/BsFacetDate.html":{},"interfaces/Column.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{},"components/MapComponent.html":{},"interfaces/MoneyDatum.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"miscellaneous/functions.html":{}}}],["search?action=select&resultid=\"+resultid+\"&item=%22tag%3b\"+settings.date_column+\"%3b\"+date+\"%3b\"+date+\"%22",{"_index":3060,"title":{},"body":{"components/ResultTimeline.html":{}}}],["searches",{"_index":3268,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["searchinactive",{"_index":224,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"components/BsFacetDate.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["searchservice",{"_index":778,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/Column.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{},"components/MapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/VisEvent.html":{},"miscellaneous/functions.html":{}}}],["searchservice.query",{"_index":1443,"title":{},"body":{"interfaces/Column.html":{}}}],["secondaryedgetypes",{"_index":2038,"title":{},"body":{"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{}}}],["see",{"_index":2154,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{},"miscellaneous/variables.html":{}}}],["seeing",{"_index":1392,"title":{},"body":{"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"components/NgxChart.html":{}}}],["select",{"_index":196,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"classes/BaseProvider.html":{},"components/BsEdgeInfoCard.html":{},"components/BsFacetDate.html":{},"components/BsNodeInfoCard.html":{},"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/Column.html":{},"interfaces/FacetChartDataPoint.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{},"components/FacetNgxChart.html":{},"interfaces/NetworkContext.html":{},"components/NgxChart.html":{},"interfaces/NodeData.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/VisEvent.html":{}}}],["select(node",{"_index":2183,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/VisEvent.html":{}}}],["select.expression",{"_index":1625,"title":{},"body":{"interfaces/Column.html":{}}}],["selected",{"_index":1090,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/Column.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"interfaces/HeatmapItem.html":{},"components/MapComponent.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/VisEvent.html":{},"miscellaneous/functions.html":{}}}],["selectedcolor",{"_index":2324,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["selectedge(edge",{"_index":3845,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["selecteditems",{"_index":2680,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{}}}],["selectedrecordsprovider",{"_index":3069,"title":{"classes/SelectedRecordsProvider.html":{}},"body":{"classes/SelectedRecordsProvider.html":{},"coverage.html":{}}}],["selectedrecordsproviderdemo",{"_index":3987,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["selectedrecordsproviderdemo(providerfactory",{"_index":4075,"title":{},"body":{"miscellaneous/functions.html":{}}}],["selectedvalues",{"_index":2327,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["selectfield",{"_index":2331,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["selecting",{"_index":2614,"title":{},"body":{"components/MapComponent.html":{}}}],["selection",{"_index":758,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/Column.html":{},"interfaces/FacetChartDataPoint.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{},"components/FacetNgxChart.html":{},"components/MapComponent.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{}}}],["selection[i",{"_index":3596,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["selection[index",{"_index":3599,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["selectionchange",{"_index":2332,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["selectionchanged",{"_index":3455,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["selectionchangedevent",{"_index":1422,"title":{},"body":{"interfaces/Column.html":{}}}],["selectioneventtype",{"_index":1406,"title":{},"body":{"interfaces/Column.html":{},"classes/SelectedRecordsProvider.html":{}}}],["selectioneventtype.select",{"_index":1511,"title":{},"body":{"interfaces/Column.html":{},"classes/SelectedRecordsProvider.html":{}}}],["selectioneventtype.unselect",{"_index":1512,"title":{},"body":{"interfaces/Column.html":{},"classes/SelectedRecordsProvider.html":{}}}],["selections",{"_index":2180,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{}}}],["selectionservice",{"_index":1407,"title":{},"body":{"interfaces/Column.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"interfaces/MoneyCloudDatum.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["selectionservice.events.subscribe(event",{"_index":3084,"title":{},"body":{"classes/SelectedRecordsProvider.html":{}}}],["selectionservice.getselecteditems",{"_index":3082,"title":{},"body":{"classes/SelectedRecordsProvider.html":{}}}],["selectionsubscription",{"_index":3077,"title":{},"body":{"classes/SelectedRecordsProvider.html":{}}}],["selectnode(node",{"_index":3842,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["selector",{"_index":630,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"components/BsTooltipComponent.html":{},"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/Column.html":{},"components/DataModalComponent.html":{},"interfaces/FacetChartDataPoint.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{},"components/FacetNgxChart.html":{},"components/FacetWrapperComponent.html":{},"interfaces/HeatmapItem.html":{},"components/MapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"components/NgxChart.html":{},"interfaces/NodeData.html":{},"components/ResultTimeline.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineEventType.html":{},"components/TimelineLegendComponent.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{}}}],["selects",{"_index":1042,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{},"components/MapComponent.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["self",{"_index":1188,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["self.append('svg:title').text(fulltext",{"_index":1198,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["self.text",{"_index":1192,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["self.text(text",{"_index":1197,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["semantic",{"_index":2272,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["semi",{"_index":3564,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["separator",{"_index":348,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{}}}],["series",{"_index":3322,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineEventType.html":{},"components/TimelineLegendComponent.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{}}}],["series.dates[i",{"_index":3632,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["server",{"_index":177,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"interfaces/Column.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"miscellaneous/functions.html":{}}}],["service",{"_index":146,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"interfaces/Column.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/VisEvent.html":{},"miscellaneous/functions.html":{}}}],["services",{"_index":88,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"components/BsFacetDate.html":{},"interfaces/Column.html":{},"interfaces/CustomData.html":{},"components/DataModalComponent.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/FacetChartDataPoint.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{},"components/FacetNgxChart.html":{},"components/FacetWrapperComponent.html":{},"components/MapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"components/ResultTimeline.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{}}}],["set",{"_index":1385,"title":{},"body":{"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/Column.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"components/NgxChart.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{}}}],["set(this.data.map(value",{"_index":1106,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["setcustomdateselect(range",{"_index":918,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{}}}],["setdefaults",{"_index":3898,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["setmodel",{"_index":2467,"title":{},"body":{"components/FacetWrapperComponent.html":{}}}],["setmodel(model",{"_index":2476,"title":{},"body":{"components/FacetWrapperComponent.html":{}}}],["setquery",{"_index":444,"title":{},"body":{"classes/AsyncRecordsProvider.html":{}}}],["setquery(query",{"_index":454,"title":{},"body":{"classes/AsyncRecordsProvider.html":{}}}],["sets",{"_index":456,"title":{},"body":{"classes/AsyncRecordsProvider.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/VisEvent.html":{}}}],["settings",{"_index":1410,"title":{},"body":{"interfaces/Column.html":{},"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/VisEvent.html":{}}}],["setup",{"_index":2514,"title":{},"body":{"components/FacetWrapperComponent.html":{}}}],["shapes",{"_index":3397,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["shift",{"_index":3356,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["shiftdate(date",{"_index":3361,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["show",{"_index":836,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/Column.html":{},"interfaces/CustomData.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["show/hide",{"_index":839,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{}}}],["showall",{"_index":1830,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["showcount",{"_index":770,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{}}}],["showcounter",{"_index":1454,"title":{},"body":{"interfaces/Column.html":{}}}],["showcustomrange",{"_index":771,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{}}}],["showdatapoints",{"_index":3091,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{}}}],["showing",{"_index":2826,"title":{},"body":{"interfaces/MoneyDatum.html":{},"miscellaneous/functions.html":{}}}],["showlegend",{"_index":3128,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["shown",{"_index":485,"title":{},"body":{"classes/AsyncRecordsProvider.html":{},"components/BsHeatmapComponent.html":{},"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["shows",{"_index":2637,"title":{},"body":{"components/MapComponent.html":{}}}],["showtooltip",{"_index":2678,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{}}}],["side",{"_index":3180,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{}}}],["simple",{"_index":2108,"title":{},"body":{"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{}}}],["simplechange",{"_index":3385,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["simplechanges",{"_index":801,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/Column.html":{},"interfaces/FacetChartDataPoint.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{},"components/FacetNgxChart.html":{},"components/MapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"components/NgxChart.html":{},"components/ResultTimeline.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{}}}],["simply",{"_index":3530,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["simultaneous",{"_index":2021,"title":{},"body":{"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{}}}],["sinequa",{"_index":1538,"title":{},"body":{"interfaces/Column.html":{},"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["sinequa/analytics/heatmap",{"_index":1301,"title":{},"body":{"modules/BsTimelineModule.html":{},"modules/FinanceModule.html":{}}}],["sinequa/components",{"_index":4035,"title":{},"body":{"dependencies.html":{}}}],["sinequa/components/action",{"_index":38,"title":{},"body":{"modules/AgGridModule.html":{},"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"classes/BaseProvider.html":{},"components/BsFacetDate.html":{},"modules/BsHeatmapModule.html":{},"modules/BsTimelineModule.html":{},"interfaces/Column.html":{},"interfaces/CustomData.html":{},"components/DataModalComponent.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/FacetChartDataPoint.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{},"components/FacetNgxChart.html":{},"modules/FinanceModule.html":{},"modules/GoogleMapsModule.html":{},"components/MapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"modules/NetworkModule.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/VisEvent.html":{}}}],["sinequa/components/advanced",{"_index":824,"title":{},"body":{"components/BsFacetDate.html":{},"modules/BsTimelineModule.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{}}}],["sinequa/components/collapse",{"_index":1306,"title":{},"body":{"modules/BsTimelineModule.html":{},"modules/NetworkModule.html":{}}}],["sinequa/components/facet",{"_index":42,"title":{},"body":{"modules/AgGridModule.html":{},"components/BsFacetDate.html":{},"modules/BsTimelineModule.html":{},"interfaces/Column.html":{},"interfaces/FacetChartDataPoint.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{},"components/FacetNgxChart.html":{},"components/FacetWrapperComponent.html":{},"modules/GoogleMapsModule.html":{},"components/MapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"modules/NetworkModule.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/VisEvent.html":{}}}],["sinequa/components/modal",{"_index":40,"title":{},"body":{"modules/AgGridModule.html":{}}}],["sinequa/components/result",{"_index":44,"title":{},"body":{"modules/AgGridModule.html":{}}}],["sinequa/components/search",{"_index":826,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/Column.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{},"components/MapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/VisEvent.html":{}}}],["sinequa/components/selection",{"_index":1246,"title":{},"body":{"modules/BsHeatmapModule.html":{},"modules/BsTimelineModule.html":{},"interfaces/Column.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"modules/FusionChartsModule.html":{},"modules/GoogleMapsModule.html":{},"interfaces/MoneyCloudDatum.html":{},"modules/NgxChartsModule.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["sinequa/components/user",{"_index":1409,"title":{},"body":{"interfaces/Column.html":{},"interfaces/VisEvent.html":{}}}],["sinequa/components/utils",{"_index":36,"title":{},"body":{"modules/AgGridModule.html":{},"modules/BsTimelineModule.html":{},"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/Column.html":{},"components/DataModalComponent.html":{},"modules/FinanceModule.html":{},"modules/FusionChartsModule.html":{},"modules/NetworkModule.html":{},"components/NgxChart.html":{},"modules/NgxChartsModule.html":{}}}],["sinequa/core/app",{"_index":99,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"components/BsFacetDate.html":{},"interfaces/Column.html":{},"components/DataModalComponent.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/FacetChartDataPoint.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{},"components/FacetNgxChart.html":{},"components/FacetWrapperComponent.html":{},"components/MapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/VisEvent.html":{}}}],["sinequa/core/base",{"_index":101,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"classes/BaseProvider.html":{},"components/BsFacetDate.html":{},"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/Column.html":{},"interfaces/CustomData.html":{},"components/DataModalComponent.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/FacetChartDataPoint.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{},"components/FacetNgxChart.html":{},"components/FacetWrapperComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"components/NgxChart.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/VisEvent.html":{}}}],["sinequa/core/intl",{"_index":34,"title":{},"body":{"modules/AgGridModule.html":{},"modules/BsHeatmapModule.html":{},"modules/BsTimelineModule.html":{},"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/Column.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"modules/FinanceModule.html":{},"modules/FusionChartsModule.html":{},"modules/GoogleMapsModule.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"modules/NetworkModule.html":{},"interfaces/NetworkProvider.html":{},"components/NgxChart.html":{},"modules/NgxChartsModule.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{},"modules/VisTimelineModule.html":{}}}],["sinequa/core/modal",{"_index":1413,"title":{},"body":{"interfaces/Column.html":{},"components/DataModalComponent.html":{}}}],["sinequa/core/web",{"_index":87,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"components/BsFacetDate.html":{},"interfaces/Column.html":{},"interfaces/CustomData.html":{},"components/DataModalComponent.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/FacetChartDataPoint.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{},"components/FacetNgxChart.html":{},"components/FacetWrapperComponent.html":{},"components/MapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"components/ResultTimeline.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{}}}],["sinequacomponentsmodule",{"_index":4027,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["single",{"_index":1458,"title":{},"body":{"interfaces/Column.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"components/MapComponent.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{}}}],["size",{"_index":541,"title":{},"body":{"classes/BaseProvider.html":{},"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"components/DataModalComponent.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineEventType.html":{},"components/TimelineLegendComponent.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{}}}],["sizeopened",{"_index":3388,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["skip",{"_index":208,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["skip/count",{"_index":2173,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["skips",{"_index":183,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{}}}],["slantlabel",{"_index":4163,"title":{},"body":{"miscellaneous/variables.html":{}}}],["solid",{"_index":1315,"title":{},"body":{"components/BsTooltipComponent.html":{}}}],["somehow",{"_index":3787,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["sort",{"_index":1283,"title":{},"body":{"components/BsNodeInfoCard.html":{},"interfaces/Column.html":{},"interfaces/NodeData.html":{}}}],["sort((a,b",{"_index":3666,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["sort((a,b)=>a",{"_index":3607,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["sortchangedevent",{"_index":1426,"title":{},"body":{"interfaces/Column.html":{}}}],["sorted",{"_index":1543,"title":{},"body":{"interfaces/Column.html":{}}}],["sorting",{"_index":1688,"title":{},"body":{"interfaces/Column.html":{}}}],["sorts",{"_index":1490,"title":{},"body":{"interfaces/Column.html":{}}}],["source",{"_index":15,"title":{},"body":{"modules/AgGridModule.html":{},"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"components/BsEdgeInfoCard.html":{},"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"modules/BsHeatmapModule.html":{},"components/BsNodeInfoCard.html":{},"modules/BsTimelineModule.html":{},"components/BsTooltipComponent.html":{},"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/Column.html":{},"interfaces/CustomData.html":{},"components/DataModalComponent.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/FacetChartDataPoint.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{},"components/FacetNgxChart.html":{},"components/FacetWrapperComponent.html":{},"modules/FinanceModule.html":{},"modules/FusionChartsModule.html":{},"modules/GoogleMapsModule.html":{},"interfaces/HeatmapItem.html":{},"components/MapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"modules/NetworkModule.html":{},"interfaces/NetworkProvider.html":{},"components/NgxChart.html":{},"modules/NgxChartsModule.html":{},"interfaces/Node.html":{},"interfaces/NodeData.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"components/ResultTimeline.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineEventType.html":{},"components/TimelineLegendComponent.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{},"modules/VisTimelineModule.html":{},"miscellaneous/typealiases.html":{}}}],["sourcecsv",{"_index":1885,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["sourcenode",{"_index":194,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{}}}],["sourcenode.type.field",{"_index":213,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{}}}],["sourcenodes",{"_index":2051,"title":{},"body":{"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{}}}],["sourcenodes.filter(node",{"_index":2062,"title":{},"body":{"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{}}}],["sourcenodes.find(node",{"_index":2059,"title":{},"body":{"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{}}}],["sourcenodes.map(node",{"_index":2064,"title":{},"body":{"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{}}}],["sourceproviders",{"_index":2040,"title":{},"body":{"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{}}}],["sourcestr",{"_index":1882,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["south",{"_index":2648,"title":{},"body":{"components/MapComponent.html":{}}}],["special",{"_index":1901,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["specific",{"_index":329,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/VisEvent.html":{}}}],["specifically",{"_index":4057,"title":{},"body":{"miscellaneous/functions.html":{}}}],["specified",{"_index":2027,"title":{},"body":{"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{}}}],["specifying",{"_index":139,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{}}}],["split",{"_index":2842,"title":{},"body":{"interfaces/MoneyDatum.html":{}}}],["spring",{"_index":3885,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["springconstant",{"_index":3879,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["springconstantcontrol",{"_index":3870,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["springconstantcontrol.value",{"_index":3888,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["springconstantpref",{"_index":3906,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["springlength",{"_index":3878,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["springlengthcontrol",{"_index":3868,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["springlengthcontrol.value",{"_index":3886,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["springlengthpref",{"_index":3904,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["sq",{"_index":631,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"components/BsTooltipComponent.html":{},"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/Column.html":{},"components/DataModalComponent.html":{},"interfaces/FacetChartDataPoint.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{},"components/FacetNgxChart.html":{},"components/FacetWrapperComponent.html":{},"interfaces/HeatmapItem.html":{},"components/MapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"components/NgxChart.html":{},"interfaces/NodeData.html":{},"components/ResultTimeline.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineEventType.html":{},"components/TimelineLegendComponent.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{}}}],["sqdatasource",{"_index":1433,"title":{},"body":{"interfaces/Column.html":{},"components/FacetWrapperComponent.html":{},"coverage.html":{}}}],["sqdatasource(this.results",{"_index":1682,"title":{},"body":{"interfaces/Column.html":{}}}],["sqdatasource)?.filterchanged",{"_index":1795,"title":{},"body":{"interfaces/Column.html":{}}}],["sqdatasource)?.sortchanged",{"_index":1797,"title":{},"body":{"interfaces/Column.html":{}}}],["sqdatasource.exprtomodel(filtertype",{"_index":1624,"title":{},"body":{"interfaces/Column.html":{}}}],["sqmessage",{"_index":689,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsFacetDate.html":{},"components/BsNodeInfoCard.html":{},"components/DataModalComponent.html":{}}}],["sqmessage:{values",{"_index":1202,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["square",{"_index":851,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/Column.html":{},"interfaces/FacetChartDataPoint.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{},"components/FacetNgxChart.html":{},"components/MapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/VisEvent.html":{}}}],["sqvalue",{"_index":2944,"title":{},"body":{"components/NgxChart.html":{}}}],["sqvalue:item.$column",{"_index":945,"title":{},"body":{"components/BsFacetDate.html":{}}}],["sr.1",{"_index":4043,"title":{},"body":{"dependencies.html":{}}}],["standard",{"_index":525,"title":{},"body":{"classes/BaseProvider.html":{},"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["star",{"_index":2144,"title":{},"body":{"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{}}}],["start",{"_index":1165,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{},"components/ResultTimeline.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["state",{"_index":472,"title":{},"body":{"classes/AsyncRecordsProvider.html":{},"interfaces/Column.html":{},"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/VisEvent.html":{}}}],["statement",{"_index":3451,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["statements",{"_index":3919,"title":{},"body":{"coverage.html":{}}}],["static",{"_index":1358,"title":{},"body":{"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"components/NgxChart.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{}}}],["statistical",{"_index":2271,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["steve",{"_index":4098,"title":{},"body":{"miscellaneous/functions.html":{}}}],["stop",{"_index":3493,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["store",{"_index":106,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"classes/SelectedRecordsProvider.html":{}}}],["stored",{"_index":2076,"title":{},"body":{"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/VisEvent.html":{}}}],["stores",{"_index":179,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{}}}],["storing",{"_index":2572,"title":{},"body":{"components/MapComponent.html":{}}}],["stream",{"_index":1262,"title":{},"body":{"components/BsNodeInfoCard.html":{},"interfaces/NodeData.html":{}}}],["strength",{"_index":2149,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["string",{"_index":84,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/Column.html":{},"interfaces/CustomData.html":{},"components/DataModalComponent.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/FacetChartDataPoint.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{},"components/FacetNgxChart.html":{},"components/FacetWrapperComponent.html":{},"interfaces/HeatmapItem.html":{},"components/MapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"components/NgxChart.html":{},"interfaces/Node.html":{},"interfaces/NodeData.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"components/ResultTimeline.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineEventType.html":{},"components/TimelineLegendComponent.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{}}}],["strings",{"_index":1079,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["stroke",{"_index":3382,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineEventType.html":{},"components/TimelineLegendComponent.html":{},"interfaces/TimelineRecords.html":{}}}],["structural",{"_index":467,"title":{},"body":{"classes/AsyncRecordsProvider.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"miscellaneous/functions.html":{}}}],["structuraldisplaytype",{"_index":1834,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"miscellaneous/typealiases.html":{}}}],["structuraledgetype",{"_index":446,"title":{"interfaces/StructuralEdgeType.html":{}},"body":{"classes/AsyncRecordsProvider.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["structuraledgetype).display",{"_index":1941,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["structuraledgetype).field",{"_index":1836,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["structuraltriggertype",{"_index":1829,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"miscellaneous/typealiases.html":{}}}],["structure",{"_index":63,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/VisEvent.html":{}}}],["structured",{"_index":2113,"title":{},"body":{"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{}}}],["structures",{"_index":2182,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["style",{"_index":1314,"title":{},"body":{"components/BsTooltipComponent.html":{},"components/MapComponent.html":{}}}],["style(\"text",{"_index":1163,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["style.ts",{"_index":3946,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["stylers",{"_index":4125,"title":{},"body":{"miscellaneous/variables.html":{}}}],["styles",{"_index":624,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"components/BsTooltipComponent.html":{},"components/DataModalComponent.html":{},"components/FacetWrapperComponent.html":{},"components/MapComponent.html":{},"components/NgxChart.html":{},"interfaces/NodeData.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineEventType.html":{},"components/TimelineLegendComponent.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{}}}],["styleurls",{"_index":751,"title":{},"body":{"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/Column.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"components/NgxChart.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{}}}],["subject",{"_index":427,"title":{},"body":{"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"classes/DynamicEdgeProvider.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["subject.error(err",{"_index":3222,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["subject.next(config",{"_index":3207,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["subject.next(d",{"_index":3219,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["subject.next(t",{"_index":3230,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["subject.next(this.getrecordsasevents(config",{"_index":3226,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["subscribe",{"_index":1506,"title":{},"body":{"interfaces/Column.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["subscribe((value",{"_index":876,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{}}}],["subscribe(datasets",{"_index":3778,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["subscribe(results",{"_index":488,"title":{},"body":{"classes/AsyncRecordsProvider.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{}}}],["subscription",{"_index":828,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/Column.html":{},"interfaces/FacetChartDataPoint.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{},"components/FacetNgxChart.html":{},"components/NgxChart.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{}}}],["subscriptions",{"_index":844,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/Column.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/FacetChartDataPoint.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{},"components/FacetNgxChart.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["super",{"_index":847,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/FacetChartDataPoint.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{},"components/FacetNgxChart.html":{},"components/MapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/VisEvent.html":{}}}],["super(name",{"_index":189,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["super.getnodeactions(node",{"_index":355,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["super.getprovideractions",{"_index":334,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["super.onnodeclicked(node",{"_index":2093,"title":{},"body":{"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{}}}],["support",{"_index":134,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{},"modules.html":{}}}],["supported",{"_index":2581,"title":{},"body":{"components/MapComponent.html":{}}}],["svg",{"_index":1177,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{},"modules.html":{}}}],["swap",{"_index":2261,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["swimlane/ngx",{"_index":1346,"title":{},"body":{"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"components/NgxChart.html":{},"modules/NgxChartsModule.html":{},"dependencies.html":{}}}],["switch(col.$column?.etype",{"_index":1568,"title":{},"body":{"interfaces/Column.html":{}}}],["switch(resolution",{"_index":3362,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["switch(type",{"_index":1379,"title":{},"body":{"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"components/NgxChart.html":{}}}],["switching",{"_index":3103,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["sync",{"_index":1646,"title":{},"body":{"interfaces/Column.html":{},"interfaces/VisEvent.html":{}}}],["synchronously",{"_index":293,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{}}}],["syncing",{"_index":3894,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["syntax",{"_index":1038,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["system",{"_index":1181,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["systematically",{"_index":123,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"miscellaneous/typealiases.html":{}}}],["t",{"_index":1144,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["table",{"_index":1799,"title":{},"body":{"interfaces/Column.html":{},"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":4033,"title":{},"body":{"coverage.html":{}}}],["take",{"_index":1814,"title":{},"body":{"interfaces/CustomData.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/VisEvent.html":{}}}],["taken",{"_index":3071,"title":{},"body":{"classes/SelectedRecordsProvider.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["takes",{"_index":1818,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["taking",{"_index":2278,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["talking",{"_index":4095,"title":{},"body":{"miscellaneous/functions.html":{}}}],["tap",{"_index":3834,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["target",{"_index":1891,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["tasks",{"_index":3808,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["tell",{"_index":1622,"title":{},"body":{"interfaces/Column.html":{}}}],["tells",{"_index":1542,"title":{},"body":{"interfaces/Column.html":{}}}],["temp",{"_index":2262,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["template",{"_index":623,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"components/BsTooltipComponent.html":{},"components/DataModalComponent.html":{},"components/FacetNgxChart.html":{},"components/FacetWrapperComponent.html":{},"interfaces/HeatmapItem.html":{},"components/MapComponent.html":{},"components/NgxChart.html":{},"components/ResultTimeline.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventType.html":{},"components/TimelineLegendComponent.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{}}}],["templateref",{"_index":3387,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{}}}],["templateurl",{"_index":648,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/Column.html":{},"components/DataModalComponent.html":{},"interfaces/FacetChartDataPoint.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{},"components/FacetNgxChart.html":{},"interfaces/HeatmapItem.html":{},"components/MapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"components/NgxChart.html":{},"interfaces/NodeData.html":{},"components/ResultTimeline.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{}}}],["test",{"_index":1954,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["tests",{"_index":169,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{},"miscellaneous/functions.html":{}}}],["text",{"_index":344,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"classes/BaseProvider.html":{},"components/BsEdgeInfoCard.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"interfaces/Column.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"interfaces/HeatmapItem.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{},"miscellaneous/functions.html":{}}}],["text.length",{"_index":1195,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["text.slice(0",{"_index":1196,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["text:hover",{"_index":1222,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["textlength",{"_index":1190,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["theme",{"_index":994,"title":{},"body":{"components/BsHeatmapComponent.html":{},"components/BsTooltipComponent.html":{},"interfaces/Column.html":{},"modules/FusionChartsModule.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"miscellaneous/variables.html":{}}}],["themselves",{"_index":4066,"title":{},"body":{"miscellaneous/functions.html":{}}}],["there's",{"_index":3692,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this._actions",{"_index":3793,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["this._actions.concat(actions",{"_index":3804,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["this._actions.push(providersactionlist",{"_index":3812,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["this._actions.push(this.clearfilters",{"_index":3800,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["this._actions.push(this.refreshaction",{"_index":3813,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["this._field",{"_index":845,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{}}}],["this._filterinput",{"_index":1787,"title":{},"body":{"interfaces/Column.html":{}}}],["this._networkinitialized",{"_index":3820,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["this._selectededge",{"_index":3846,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["this._selectednode",{"_index":3843,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["this.activateaction",{"_index":512,"title":{},"body":{"classes/BaseProvider.html":{}}}],["this.active",{"_index":347,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"classes/BaseProvider.html":{}}}],["this.addaggregationnodes(item",{"_index":242,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{}}}],["this.addcustomedge(node",{"_index":1876,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["this.adddynamicedges([node",{"_index":2091,"title":{},"body":{"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{}}}],["this.adddynamicedges(sourcenodes",{"_index":2074,"title":{},"body":{"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{}}}],["this.addedge(edge",{"_index":2218,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["this.addedge(edges",{"_index":2219,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["this.addnode(node",{"_index":2213,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["this.addnode(nodes",{"_index":2214,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["this.addrecordnodes(records",{"_index":1847,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["this.addstructuraledge(data",{"_index":1884,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["this.addstructuraledges(node",{"_index":1858,"title":{},"body":{"interfaces/CustomData.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["this.advancedservice.validators.date(this.field",{"_index":857,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{}}}],["this.advancedservice.validators.range(this.field",{"_index":856,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{}}}],["this.aggregation",{"_index":2346,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["this.aggregation?.name",{"_index":2508,"title":{},"body":{"components/FacetWrapperComponent.html":{}}}],["this.aggregationname",{"_index":2512,"title":{},"body":{"components/FacetWrapperComponent.html":{}}}],["this.aggregations",{"_index":2341,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["this.allowcustomrange",{"_index":854,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{}}}],["this.appservice",{"_index":1683,"title":{},"body":{"interfaces/Column.html":{}}}],["this.appservice.getccaggregation(aggregation",{"_index":3302,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["this.appservice.getccaggregation(aggregationname",{"_index":904,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["this.appservice.getcolumn(a.column",{"_index":2496,"title":{},"body":{"components/FacetWrapperComponent.html":{}}}],["this.appservice.getcolumn(col.field",{"_index":1549,"title":{},"body":{"interfaces/Column.html":{}}}],["this.appservice.getcolumnalias(col",{"_index":2498,"title":{},"body":{"components/FacetWrapperComponent.html":{}}}],["this.appservice.getcolumnalias(this.appservice.getcolumn(colid",{"_index":1633,"title":{},"body":{"interfaces/Column.html":{}}}],["this.appservice.issortable(col.field",{"_index":1561,"title":{},"body":{"interfaces/Column.html":{}}}],["this.appservice.istree(this.field",{"_index":2507,"title":{},"body":{"components/FacetWrapperComponent.html":{}}}],["this.appservice.parseexpr(select.expression",{"_index":3168,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["this.area",{"_index":3425,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.area.y0(this.y(0",{"_index":3444,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.attached",{"_index":1397,"title":{},"body":{"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"components/NgxChart.html":{}}}],["this.autoresize",{"_index":1654,"title":{},"body":{"interfaces/Column.html":{}}}],["this.bisectdate(series.dates",{"_index":3630,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.bounds",{"_index":2655,"title":{},"body":{"components/MapComponent.html":{}}}],["this.bounds.getnortheast().lat",{"_index":2624,"title":{},"body":{"components/MapComponent.html":{}}}],["this.bounds.getnortheast().lng",{"_index":2628,"title":{},"body":{"components/MapComponent.html":{}}}],["this.bounds.getsouthwest().lat",{"_index":2622,"title":{},"body":{"components/MapComponent.html":{}}}],["this.bounds.getsouthwest().lng",{"_index":2626,"title":{},"body":{"components/MapComponent.html":{}}}],["this.brush",{"_index":3468,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.brush$.call(this.brushbehavior",{"_index":3446,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.brush$.call(this.brushbehavior.move",{"_index":3576,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.brush$.selectall(\".grip",{"_index":3475,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.brushbehavior",{"_index":3434,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.brushbehavior.extent([[0",{"_index":3445,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.brushbehavior.move(this.brush",{"_index":3620,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.brushing",{"_index":3439,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.brushselection",{"_index":3602,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.buildchart",{"_index":1142,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["this.buildchart(!!this.transition",{"_index":1133,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["this.c",{"_index":2706,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{}}}],["this.c.domain(this.data.map(d",{"_index":2768,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{}}}],["this.categories",{"_index":2770,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{}}}],["this.cdref.detectchanges",{"_index":2726,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.chart",{"_index":1366,"title":{},"body":{"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"components/NgxChart.html":{}}}],["this.chart.update",{"_index":1367,"title":{},"body":{"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"components/NgxChart.html":{}}}],["this.charttype",{"_index":2384,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["this.checkdatachanges(changes[\"data",{"_index":3462,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.checkselectionchange(this.selection",{"_index":3578,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.clearfilters",{"_index":2333,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"components/MapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/VisEvent.html":{}}}],["this.clearfiltersaction",{"_index":848,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{}}}],["this.closed",{"_index":664,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsNodeInfoCard.html":{},"interfaces/NodeData.html":{}}}],["this.closewindow",{"_index":2633,"title":{},"body":{"components/MapComponent.html":{}}}],["this.coldefs",{"_index":1545,"title":{},"body":{"interfaces/Column.html":{}}}],["this.coldefs.map(col",{"_index":1592,"title":{},"body":{"interfaces/Column.html":{}}}],["this.color",{"_index":1127,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["this.colors",{"_index":2387,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["this.colors.length",{"_index":2388,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["this.colors[index",{"_index":2396,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["this.colorscheme",{"_index":2386,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["this.columns",{"_index":1481,"title":{},"body":{"interfaces/Column.html":{}}}],["this.columns.map(c",{"_index":1706,"title":{},"body":{"interfaces/Column.html":{}}}],["this.columns?.map((col,i",{"_index":1546,"title":{},"body":{"interfaces/Column.html":{}}}],["this.columnsaction",{"_index":1503,"title":{},"body":{"interfaces/Column.html":{}}}],["this.columnsaction.children",{"_index":1591,"title":{},"body":{"interfaces/Column.html":{}}}],["this.columnsaction.children?.find(a",{"_index":1709,"title":{},"body":{"interfaces/Column.html":{}}}],["this.context",{"_index":296,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/VisEvent.html":{}}}],["this.context.appservice.formatservice.formatfieldvalue({value",{"_index":552,"title":{},"body":{"classes/BaseProvider.html":{}}}],["this.context.appservice.getccaggregation(aggregation",{"_index":370,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{}}}],["this.context.appservice.getcolumn(type.field",{"_index":550,"title":{},"body":{"classes/BaseProvider.html":{}}}],["this.context.appservice.getplurallabel(col",{"_index":373,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{}}}],["this.context.appservice.parseexpr(item.value.tostring",{"_index":275,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{}}}],["this.context.edges",{"_index":3789,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["this.context.edges.clear",{"_index":3772,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["this.context.exprbuilder.concatandexpr([exprfrom",{"_index":619,"title":{},"body":{"classes/BaseProvider.html":{}}}],["this.context.exprbuilder.makeexpr(edge.type.field",{"_index":601,"title":{},"body":{"classes/BaseProvider.html":{}}}],["this.context.exprbuilder.makeexpr(node.type.field",{"_index":589,"title":{},"body":{"classes/BaseProvider.html":{}}}],["this.context.exprbuilder.makeexpr(nodefrom.type.field",{"_index":614,"title":{},"body":{"classes/BaseProvider.html":{}}}],["this.context.exprbuilder.makeexpr(nodeto.type.field",{"_index":617,"title":{},"body":{"classes/BaseProvider.html":{}}}],["this.context.intlservice.formatmessage(\"msg#network.actions.expandnode",{"_index":357,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{}}}],["this.context.intlservice.formatmessage(\"msg#network.actions.expandnodewith",{"_index":367,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{}}}],["this.context.intlservice.formatmessage(\"msg#network.actions.fetchmoreagg",{"_index":351,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{}}}],["this.context.intlservice.formatmessage(\"msg#network.actions.filtersearch",{"_index":588,"title":{},"body":{"classes/BaseProvider.html":{}}}],["this.context.intlservice.formatmessage(\"msg#network.actions.filtersearch2",{"_index":608,"title":{},"body":{"classes/BaseProvider.html":{}}}],["this.context.intlservice.formatmessage(col",{"_index":374,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{}}}],["this.context.name",{"_index":3765,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["this.context.nodes.clear",{"_index":3771,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["this.context.searchservice.getmultipleresults(_queries",{"_index":2072,"title":{},"body":{"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{}}}],["this.context.searchservice.getresults(query",{"_index":223,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{}}}],["this.context.searchservice.getresults(this.query",{"_index":487,"title":{},"body":{"classes/AsyncRecordsProvider.html":{}}}],["this.context.searchservice.query",{"_index":202,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{}}}],["this.copyaction",{"_index":2005,"title":{},"body":{"components/DataModalComponent.html":{}}}],["this.copytoclipboard",{"_index":1658,"title":{},"body":{"interfaces/Column.html":{}}}],["this.createactions",{"_index":1529,"title":{},"body":{"interfaces/Column.html":{}}}],["this.createchartoptions",{"_index":2413,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["this.createcolumns",{"_index":1519,"title":{},"body":{"interfaces/Column.html":{}}}],["this.createdatapoints(aggregation.items",{"_index":3325,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["this.createedge(this.edgetype",{"_index":2081,"title":{},"body":{"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{}}}],["this.createedge(type",{"_index":1912,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["this.createexpandaction(type",{"_index":362,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{}}}],["this.createnode(this.nodetype",{"_index":1854,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["this.createnode(type.nodetypes[1",{"_index":1896,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["this.createrows",{"_index":1521,"title":{},"body":{"interfaces/Column.html":{}}}],["this.currentrange",{"_index":3156,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["this.currentrange[0",{"_index":3157,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["this.currentrange[1",{"_index":3160,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["this.currentselection",{"_index":3579,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.currentselection[0",{"_index":3570,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.currentselection[1",{"_index":3573,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.dampingpref",{"_index":3860,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["this.data",{"_index":880,"title":{},"body":{"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"components/DataModalComponent.html":{},"interfaces/FacetChartDataPoint.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{},"components/FacetNgxChart.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{}}}],["this.data.filter(value",{"_index":1113,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["this.data.foreach(d",{"_index":2738,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{}}}],["this.data.items",{"_index":2362,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["this.data.length",{"_index":3492,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.data.push(datum",{"_index":2737,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{}}}],["this.data?.column",{"_index":846,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{}}}],["this.data?.items",{"_index":899,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{}}}],["this.data?.items?.filter((item",{"_index":900,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{}}}],["this.data?.map(series",{"_index":3628,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.datafiltered",{"_index":1112,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["this.datapoints",{"_index":2360,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["this.datapoints.find(_datapoint",{"_index":2423,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["this.datapoints.findindex(datapoint",{"_index":2390,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["this.datapoints.push",{"_index":2363,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["this.dataset",{"_index":2055,"title":{},"body":{"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{}}}],["this.dataset.addnodes(node",{"_index":1857,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["this.dataset.clear",{"_index":298,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"classes/BaseProvider.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["this.dataset.getadjacentedges(node.id",{"_index":1956,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["this.dataset.getadjacentedges(node.id).foreach(e",{"_index":1967,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["this.dataset.getconnectednodes(node.id",{"_index":323,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{}}}],["this.dataset.getnode(node.id",{"_index":1958,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["this.dataset.getnode(this.getnodeid(this.nodetype",{"_index":1851,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["this.dataset.hasnode(node.id",{"_index":2095,"title":{},"body":{"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{}}}],["this.dataset.merge(data",{"_index":290,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["this.dataset.merge(dataset",{"_index":1932,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["this.datasource",{"_index":1602,"title":{},"body":{"interfaces/Column.html":{}}}],["this.datasource.appservice",{"_index":2500,"title":{},"body":{"components/FacetWrapperComponent.html":{}}}],["this.datasource.facetservice",{"_index":2501,"title":{},"body":{"components/FacetWrapperComponent.html":{}}}],["this.datasource.latestresults",{"_index":2494,"title":{},"body":{"components/FacetWrapperComponent.html":{}}}],["this.datasource?.destroy",{"_index":1692,"title":{},"body":{"interfaces/Column.html":{}}}],["this.daterangecontrol",{"_index":855,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{}}}],["this.daterangecontrol.setvalue([from",{"_index":869,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{}}}],["this.daterangecontrol.valuechanges",{"_index":872,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{}}}],["this.dates",{"_index":3004,"title":{},"body":{"components/ResultTimeline.html":{}}}],["this.debouncesync",{"_index":3892,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["this.defaultcolumnwidth",{"_index":1566,"title":{},"body":{"interfaces/Column.html":{}}}],["this.displaycheckbox",{"_index":1583,"title":{},"body":{"interfaces/Column.html":{}}}],["this.displayemptydistributionintervals",{"_index":898,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{}}}],["this.downloadcsv",{"_index":1662,"title":{},"body":{"interfaces/Column.html":{}}}],["this.drawgrips",{"_index":3448,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.drawxaxis",{"_index":2713,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.drawyaxis",{"_index":2710,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.edge.context.nodes.get(this.edge.from",{"_index":667,"title":{},"body":{"components/BsEdgeInfoCard.html":{}}}],["this.edge.context.nodes.get(this.edge.to",{"_index":669,"title":{},"body":{"components/BsEdgeInfoCard.html":{}}}],["this.edgeclicked.next",{"_index":3847,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["this.edgeclicked.subscribe((edge",{"_index":3757,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["this.edgeidx.clear",{"_index":2209,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["this.edgeidx.delete(id",{"_index":2313,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["this.edgeidx.get(id",{"_index":2193,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["this.edgeidx.has(id",{"_index":2189,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["this.edgeidx.set(edge.id",{"_index":2309,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["this.edgeseparator",{"_index":531,"title":{},"body":{"classes/BaseProvider.html":{}}}],["this.edgetype",{"_index":2067,"title":{},"body":{"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{}}}],["this.edgetype.getquery(node",{"_index":2066,"title":{},"body":{"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{}}}],["this.edgetype.nodetypes[0",{"_index":2047,"title":{},"body":{"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{}}}],["this.edgetype.trigger",{"_index":2094,"title":{},"body":{"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{}}}],["this.edgetypes.filter(type",{"_index":303,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{}}}],["this.edgetypes.foreach(type",{"_index":301,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["this.edgetypes.length",{"_index":1964,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["this.el.nativeelement",{"_index":1183,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.eventclicked.next(event",{"_index":3320,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["this.events",{"_index":3005,"title":{},"body":{"components/ResultTimeline.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["this.events$[i",{"_index":3225,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["this.events$[i].next(this.getrecordsasevents(this.events[i",{"_index":3154,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["this.events.concat",{"_index":3665,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.events.findindex(e",{"_index":3151,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["this.events.foreach((config",{"_index":3224,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["this.events.map(_",{"_index":3195,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["this.expanded",{"_index":665,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsNodeInfoCard.html":{},"interfaces/NodeData.html":{}}}],["this.exportvaluegetter",{"_index":1723,"title":{},"body":{"interfaces/Column.html":{}}}],["this.exprbuilder.concatandexpr",{"_index":2629,"title":{},"body":{"components/MapComponent.html":{}}}],["this.exprbuilder.concatorexpr(exprs",{"_index":3305,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["this.exprbuilder.makeexpr(this.moneycolumn",{"_index":2861,"title":{},"body":{"interfaces/MoneyDatum.html":{}}}],["this.exprbuilder.makeexpr(this.moneyvaluecolumn",{"_index":2807,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{}}}],["this.exprbuilder.makenumericalexpr",{"_index":936,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{}}}],["this.exprbuilder.makenumericalexpr(this.field",{"_index":938,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{}}}],["this.exprbuilder.makenumericalexpr(this.latitudefield",{"_index":2630,"title":{},"body":{"components/MapComponent.html":{}}}],["this.exprbuilder.makenumericalexpr(this.longitudefield",{"_index":2631,"title":{},"body":{"components/MapComponent.html":{}}}],["this.exprbuilder.makerangeexpr(this.field",{"_index":935,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{}}}],["this.facetservice",{"_index":1684,"title":{},"body":{"interfaces/Column.html":{}}}],["this.facetservice.addfiltersearch(this.getname",{"_index":2418,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["this.facetservice.addfiltersearch(this.name",{"_index":889,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{}}}],["this.facetservice.clearfilterssearch(this.getname",{"_index":2335,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["this.facetservice.clearfilterssearch(this.name",{"_index":853,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{}}}],["this.facetservice.filteredindex(this.data",{"_index":944,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{}}}],["this.facetservice.formatvalue(item",{"_index":2364,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["this.facetservice.getaggregation",{"_index":911,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{}}}],["this.facetservice.getaggregation(aggregationname",{"_index":3258,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["this.facetservice.getaggregation(this.aggregation",{"_index":2409,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["this.facetservice.getaggregationitemsfiltered",{"_index":942,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{}}}],["this.facetservice.getaggregationlabel(agg",{"_index":2345,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["this.facetservice.getaggregationlabel(this.aggregation",{"_index":2339,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["this.facetservice.hasfiltered(this.getname",{"_index":2357,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["this.facetservice.hasfiltered(this.name",{"_index":885,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{},"components/FacetWrapperComponent.html":{}}}],["this.facetservice.itemfiltered(this.getname",{"_index":2420,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["this.facetservice.removefiltersearch(this.getname",{"_index":2419,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["this.facetservice.removefiltersearch(this.name",{"_index":891,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{}}}],["this.fetchaggregation(aggregationname",{"_index":3261,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["this.fetchaggregations([type",{"_index":352,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{}}}],["this.fetchaggregations(types",{"_index":307,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{}}}],["this.field",{"_index":937,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{},"components/FacetWrapperComponent.html":{}}}],["this.filterarea",{"_index":2618,"title":{},"body":{"components/MapComponent.html":{}}}],["this.filteredcolor",{"_index":2393,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["this.fitbounds",{"_index":2639,"title":{},"body":{"components/MapComponent.html":{}}}],["this.fitnetwork",{"_index":3791,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["this.form",{"_index":858,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{},"interfaces/VisEvent.html":{}}}],["this.form.valid",{"_index":875,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{}}}],["this.form.valuechanges.subscribe(_",{"_index":3883,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["this.formatcontent",{"_index":1528,"title":{},"body":{"interfaces/Column.html":{},"components/DataModalComponent.html":{}}}],["this.formatdayrequest(selection[0",{"_index":3296,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["this.formatdayrequest(selection[1",{"_index":3297,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["this.formatservice.formatraw(params.value",{"_index":1677,"title":{},"body":{"interfaces/Column.html":{}}}],["this.formatservice.formatraw(this.model.cell",{"_index":2010,"title":{},"body":{"components/DataModalComponent.html":{}}}],["this.formatservice.formatvalue(params.value",{"_index":1675,"title":{},"body":{"interfaces/Column.html":{}}}],["this.formatservice.formatvalue(this.model.cell",{"_index":2008,"title":{},"body":{"components/DataModalComponent.html":{}}}],["this.formatservice.moneyformatter(datum.value",{"_index":2863,"title":{},"body":{"interfaces/MoneyDatum.html":{}}}],["this.formbuilder.group",{"_index":859,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{},"interfaces/VisEvent.html":{}}}],["this.fromnode",{"_index":666,"title":{},"body":{"components/BsEdgeInfoCard.html":{}}}],["this.georecords[0][this.latitudefield",{"_index":2647,"title":{},"body":{"components/MapComponent.html":{}}}],["this.georecords[0][this.longitudefield",{"_index":2644,"title":{},"body":{"components/MapComponent.html":{}}}],["this.getadjacentedges(neighbor.id).length",{"_index":2240,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["this.getadjacentedges(nodeid",{"_index":2246,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["this.getadjacentedges(nodeid).foreach(edge",{"_index":2234,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["this.getaggregation(aggregationname",{"_index":905,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{}}}],["this.getaggregation(config.aggregation",{"_index":3233,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["this.getaggregation(config.aggregation).pipe",{"_index":3240,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["this.getaggregation(this.aggregation",{"_index":881,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{}}}],["this.getaggregationlabel(type.aggregation",{"_index":350,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{}}}],["this.getd3timeinterval(resolution",{"_index":3343,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["this.getdata(this.context",{"_index":519,"title":{},"body":{"classes/BaseProvider.html":{}}}],["this.getedge(e.id)?.visible",{"_index":2297,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["this.getedge(edge.id",{"_index":2274,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["this.getedgeid(fromnode",{"_index":566,"title":{},"body":{"classes/BaseProvider.html":{}}}],["this.getedges().filter(e",{"_index":2202,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["this.geteventaggregation(config",{"_index":3228,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["this.getitem(datapoint",{"_index":2416,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["this.getitem(this.datapoints[index",{"_index":2392,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["this.getname",{"_index":2411,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["this.getnode(e.from",{"_index":2247,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["this.getnode(edge.from",{"_index":2235,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["this.getnode(n.id)?.visible",{"_index":2295,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["this.getnode(node.id",{"_index":2257,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["this.getnodeid(type",{"_index":553,"title":{},"body":{"classes/BaseProvider.html":{}}}],["this.getnodes().filter(n",{"_index":2199,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["this.getnodevalue(node",{"_index":590,"title":{},"body":{"classes/BaseProvider.html":{}}}],["this.getnodevalue(nodefrom",{"_index":615,"title":{},"body":{"classes/BaseProvider.html":{}}}],["this.getnodevalue(nodeto",{"_index":618,"title":{},"body":{"classes/BaseProvider.html":{}}}],["this.getnodevalue(sourcenode",{"_index":215,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{}}}],["this.getrangevalue",{"_index":864,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{}}}],["this.gettimeseries(agg",{"_index":3217,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["this.gettimeseries(bestaggregation",{"_index":3286,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["this.gravitypref",{"_index":3864,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["this.gridactions",{"_index":1639,"title":{},"body":{"interfaces/Column.html":{}}}],["this.gridactions.push(action",{"_index":1642,"title":{},"body":{"interfaces/Column.html":{}}}],["this.gridactions.push(new",{"_index":1645,"title":{},"body":{"interfaces/Column.html":{}}}],["this.gridactions.push(this.columnsaction",{"_index":1644,"title":{},"body":{"interfaces/Column.html":{}}}],["this.gridapi",{"_index":1742,"title":{},"body":{"interfaces/Column.html":{}}}],["this.gridapi.setdatasource(this.datasource",{"_index":1604,"title":{},"body":{"interfaces/Column.html":{}}}],["this.gridapi?.exportdataascsv(this.getexportparams",{"_index":1732,"title":{},"body":{"interfaces/Column.html":{}}}],["this.gridapi?.foreachnode(node",{"_index":1513,"title":{},"body":{"interfaces/Column.html":{}}}],["this.gridapi?.getdataascsv(this.getexportparams",{"_index":1728,"title":{},"body":{"interfaces/Column.html":{}}}],["this.gridapi?.getselectedrows",{"_index":1759,"title":{},"body":{"interfaces/Column.html":{}}}],["this.gridapi?.refreshcells({force",{"_index":1738,"title":{},"body":{"interfaces/Column.html":{}}}],["this.gridapi?.setfiltermodel",{"_index":1702,"title":{},"body":{"interfaces/Column.html":{}}}],["this.gridapi?.setfiltermodel(model",{"_index":1626,"title":{},"body":{"interfaces/Column.html":{}}}],["this.gridcolumnapi",{"_index":1600,"title":{},"body":{"interfaces/Column.html":{}}}],["this.gridcolumnapi?.applycolumnstate",{"_index":1703,"title":{},"body":{"interfaces/Column.html":{}}}],["this.gridcolumnapi?.applycolumnstate(model",{"_index":1636,"title":{},"body":{"interfaces/Column.html":{}}}],["this.gridcolumnapi?.autosizeallcolumns",{"_index":1735,"title":{},"body":{"interfaces/Column.html":{}}}],["this.gridcolumnapi?.setcolumnvisible(col.field",{"_index":1594,"title":{},"body":{"interfaces/Column.html":{}}}],["this.grips",{"_index":3474,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.grips$.append(\"path",{"_index":3483,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.grips$.append(\"text",{"_index":3485,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.grips$.attr(\"display",{"_index":3595,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.grips$.selectall(\"path\").attr(\"d",{"_index":3447,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.grips$.selectall('.grip",{"_index":3598,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.groupedevents",{"_index":3532,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.groupevents(5",{"_index":3533,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.hasnode(edge.to",{"_index":2307,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["this.height",{"_index":1124,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.hiderecordnode",{"_index":1856,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["this.initdone",{"_index":3068,"title":{},"body":{"components/ResultTimeline.html":{}}}],["this.innerheight",{"_index":3437,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.innerwidth",{"_index":2700,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.instance",{"_index":3422,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.intlservice.events.subscribe(e",{"_index":3420,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.intlservice.formatdate(this.xt.invert(selection[index",{"_index":3600,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.intlservice.formatmessage(col.$column?.label",{"_index":1554,"title":{},"body":{"interfaces/Column.html":{}}}],["this.intlservice.formatmessage(p.name",{"_index":3810,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["this.intlservice.formatnumber(value",{"_index":2400,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["this.intlsubscription",{"_index":3419,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.intlsubscription.unsubscribe",{"_index":3645,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.isedgevisible(type",{"_index":1898,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["this.isfilteractive",{"_index":2515,"title":{},"body":{"components/FacetWrapperComponent.html":{}}}],["this.isfiltered(item",{"_index":888,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/FacetChartDataPoint.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{},"components/FacetNgxChart.html":{}}}],["this.istree",{"_index":2506,"title":{},"body":{"components/FacetWrapperComponent.html":{}}}],["this.itemclickevent",{"_index":1364,"title":{},"body":{"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"components/NgxChart.html":{}}}],["this.itemclickevent.emit(datapoint",{"_index":1401,"title":{},"body":{"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"components/NgxChart.html":{}}}],["this.items",{"_index":897,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{},"components/ResultTimeline.html":{}}}],["this.items.push({id",{"_index":3029,"title":{},"body":{"components/ResultTimeline.html":{}}}],["this.items.splice(0",{"_index":3003,"title":{},"body":{"components/ResultTimeline.html":{}}}],["this.left",{"_index":1331,"title":{},"body":{"components/BsTooltipComponent.html":{}}}],["this.line",{"_index":3432,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.localechange",{"_index":1372,"title":{},"body":{"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"components/NgxChart.html":{}}}],["this.localechange.unsubscribe",{"_index":1375,"title":{},"body":{"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"components/NgxChart.html":{}}}],["this.makedata",{"_index":2405,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["this.makedatasource",{"_index":1603,"title":{},"body":{"interfaces/Column.html":{}}}],["this.mapstyles",{"_index":2635,"title":{},"body":{"components/MapComponent.html":{}}}],["this.margin.bottom",{"_index":1126,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.margin.left",{"_index":1120,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.margin.right",{"_index":1121,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.margin.top",{"_index":1125,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.max_dates",{"_index":3042,"title":{},"body":{"components/ResultTimeline.html":{}}}],["this.maxaggregationdate",{"_index":3216,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["this.maxdate",{"_index":3161,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{}}}],["this.maxx",{"_index":1108,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["this.maxy",{"_index":1111,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["this.mergedatasets(datasets.filter(d",{"_index":3779,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["this.mergedevents",{"_index":3196,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["this.mergedtimeseries",{"_index":3190,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["this.min_dates",{"_index":3041,"title":{},"body":{"components/ResultTimeline.html":{}}}],["this.min_year",{"_index":3027,"title":{},"body":{"components/ResultTimeline.html":{}}}],["this.minaggregationdate",{"_index":3215,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["this.mindate",{"_index":3158,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{}}}],["this.minzoomdays",{"_index":3525,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.modalservice.open(datamodalcomponent",{"_index":1750,"title":{},"body":{"interfaces/Column.html":{}}}],["this.model.cccolumn",{"_index":2009,"title":{},"body":{"components/DataModalComponent.html":{}}}],["this.moneyaggregation",{"_index":2733,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{}}}],["this.mutatenode(node",{"_index":2128,"title":{},"body":{"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{}}}],["this.mutatenodes(sourcenodes",{"_index":2121,"title":{},"body":{"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{}}}],["this.name",{"_index":943,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{},"components/FacetWrapperComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/VisEvent.html":{}}}],["this.neighbors",{"_index":1260,"title":{},"body":{"components/BsNodeInfoCard.html":{},"interfaces/NodeData.html":{}}}],["this.neighbors[type",{"_index":1279,"title":{},"body":{"components/BsNodeInfoCard.html":{},"interfaces/NodeData.html":{}}}],["this.neighbors[type].push",{"_index":1281,"title":{},"body":{"components/BsNodeInfoCard.html":{},"interfaces/NodeData.html":{}}}],["this.networkservice.click.subscribe((eventdata",{"_index":3824,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["this.networkservice.fit(this.name",{"_index":3818,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["this.networkservice.off(this.name",{"_index":3848,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["this.networkservice.on(this.name",{"_index":3823,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["this.networkservice.setoptions(this.name",{"_index":3826,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["this.ngonchanges",{"_index":2347,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["this.node",{"_index":1258,"title":{},"body":{"components/BsNodeInfoCard.html":{},"interfaces/NodeData.html":{}}}],["this.node.context.edges",{"_index":1261,"title":{},"body":{"components/BsNodeInfoCard.html":{},"interfaces/NodeData.html":{}}}],["this.node.context.nodes.get(id",{"_index":1268,"title":{},"body":{"components/BsNodeInfoCard.html":{},"interfaces/NodeData.html":{}}}],["this.node.count",{"_index":1259,"title":{},"body":{"components/BsNodeInfoCard.html":{},"interfaces/NodeData.html":{}}}],["this.node.id",{"_index":1265,"title":{},"body":{"components/BsNodeInfoCard.html":{},"interfaces/NodeData.html":{}}}],["this.nodecache.has(node.id",{"_index":2065,"title":{},"body":{"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{}}}],["this.nodecache[node.id",{"_index":2129,"title":{},"body":{"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{}}}],["this.nodeclicked.next(node",{"_index":3844,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["this.nodeclicked.subscribe((node",{"_index":3754,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["this.nodedata",{"_index":1257,"title":{},"body":{"components/BsNodeInfoCard.html":{},"interfaces/NodeData.html":{}}}],["this.nodeidx.clear",{"_index":2208,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["this.nodeidx.delete(id",{"_index":2311,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["this.nodeidx.get(id",{"_index":2191,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["this.nodeidx.has(id",{"_index":2187,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["this.nodeidx.set(node.id",{"_index":2260,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["this.nodeidx[id",{"_index":2288,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["this.nodetype",{"_index":1864,"title":{},"body":{"interfaces/CustomData.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["this.nodetype.getquery(node",{"_index":2120,"title":{},"body":{"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{}}}],["this.nodetype.name",{"_index":1867,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["this.nodetype.nodeoptions",{"_index":2140,"title":{},"body":{"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{}}}],["this.nodetype.nodeoptions(node",{"_index":2141,"title":{},"body":{"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{}}}],["this.nodetype.trigger",{"_index":2142,"title":{},"body":{"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{}}}],["this.onaxisclicked(d",{"_index":1169,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["this.onbrush",{"_index":3441,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.onbrushend",{"_index":3443,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.onmousemove",{"_index":2718,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.onmouseout",{"_index":2831,"title":{},"body":{"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.onnetworkclick(eventdata",{"_index":3825,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["this.onopensettings(true",{"_index":3901,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["this.onresize",{"_index":1371,"title":{},"body":{"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"components/NgxChart.html":{}}}],["this.onzoom",{"_index":3553,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.onzoomend",{"_index":3554,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.openedwindow",{"_index":2652,"title":{},"body":{"components/MapComponent.html":{}}}],["this.openedwindow.close",{"_index":2651,"title":{},"body":{"components/MapComponent.html":{}}}],["this.options",{"_index":2383,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["this.options.colorscheme",{"_index":1386,"title":{},"body":{"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"components/NgxChart.html":{}}}],["this.options.getitemcolor",{"_index":2389,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["this.optionsprefs",{"_index":3827,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["this.optionsprefs.physics",{"_index":3852,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["this.optionsprefs.physics.barneshut",{"_index":3854,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["this.optionsprefs.physics.barneshut.centralgravity",{"_index":3863,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["this.optionsprefs.physics.barneshut.damping",{"_index":3859,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["this.optionsprefs.physics.barneshut.gravitationalconstant",{"_index":3861,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["this.optionsprefs.physics.barneshut.springconstant",{"_index":3857,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["this.optionsprefs.physics.barneshut.springlength",{"_index":3855,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["this.params",{"_index":2502,"title":{},"body":{"components/FacetWrapperComponent.html":{}}}],["this.params.coldef.field",{"_index":2505,"title":{},"body":{"components/FacetWrapperComponent.html":{}}}],["this.params.rowmodel['datasource",{"_index":2493,"title":{},"body":{"components/FacetWrapperComponent.html":{}}}],["this.parseentity(item",{"_index":2735,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{}}}],["this.parseentity(money.value",{"_index":2839,"title":{},"body":{"interfaces/MoneyDatum.html":{}}}],["this.prefs.delete(\"ag",{"_index":1596,"title":{},"body":{"interfaces/Column.html":{}}}],["this.prefs.delete(this.name",{"_index":3899,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["this.prefs.get(\"ag",{"_index":1526,"title":{},"body":{"interfaces/Column.html":{}}}],["this.prefs.get(this.name",{"_index":3905,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["this.prefs.set(\"ag",{"_index":1597,"title":{},"body":{"interfaces/Column.html":{}}}],["this.prefs.set(this.name",{"_index":3884,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["this.prefs.sync",{"_index":1717,"title":{},"body":{"interfaces/Column.html":{},"interfaces/VisEvent.html":{}}}],["this.processednodes",{"_index":2057,"title":{},"body":{"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{}}}],["this.processednodes.filter(id",{"_index":2058,"title":{},"body":{"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{}}}],["this.processednodes.indexof(node.id",{"_index":2063,"title":{},"body":{"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{}}}],["this.processednodes.push(node.id",{"_index":2090,"title":{},"body":{"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{}}}],["this.processednodes.splice(0",{"_index":2089,"title":{},"body":{"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{}}}],["this.processnode(node",{"_index":2096,"title":{},"body":{"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{}}}],["this.provider",{"_index":585,"title":{},"body":{"classes/BaseProvider.html":{}}}],["this.provider.next(this.dataset",{"_index":243,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"interfaces/CustomData.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["this.providers.foreach(p",{"_index":3755,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["this.providers.map(p",{"_index":3776,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["this.providerssubscription",{"_index":3775,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["this.providerssubscription.unsubscribe",{"_index":3774,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["this.query",{"_index":486,"title":{},"body":{"classes/AsyncRecordsProvider.html":{},"interfaces/Column.html":{}}}],["this.r",{"_index":2704,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{}}}],["this.r(datum.count",{"_index":2814,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{}}}],["this.r.domain(rextent",{"_index":2767,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{}}}],["this.rangechange.next(this.xt.domain",{"_index":3624,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.rangeinit.next(this.xt.domain",{"_index":3529,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.record.id",{"_index":3025,"title":{},"body":{"components/ResultTimeline.html":{}}}],["this.record.modified.length>=10",{"_index":3047,"title":{},"body":{"components/ResultTimeline.html":{}}}],["this.recordclicked.next(datum.record",{"_index":2860,"title":{},"body":{"interfaces/MoneyDatum.html":{}}}],["this.recordclicked.next(record",{"_index":2654,"title":{},"body":{"components/MapComponent.html":{}}}],["this.refreshaction",{"_index":3759,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["this.removeedge(id",{"_index":2228,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["this.removeedge(ids",{"_index":2229,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["this.removeedges(edge.id",{"_index":2237,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["this.removenode(id",{"_index":2225,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["this.removenode(ids",{"_index":2226,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["this.removenodes(neighbor.id",{"_index":2241,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["this.rendercell",{"_index":1559,"title":{},"body":{"interfaces/Column.html":{}}}],["this.replacecurrent",{"_index":890,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{}}}],["this.repulsionpref",{"_index":3862,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["this.resetaction",{"_index":520,"title":{},"body":{"classes/BaseProvider.html":{}}}],["this.resetstate",{"_index":1649,"title":{},"body":{"interfaces/Column.html":{}}}],["this.results",{"_index":912,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/FacetChartDataPoint.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{},"components/FacetNgxChart.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["this.results.aggregations",{"_index":2731,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{}}}],["this.results.aggregations.find(a",{"_index":2495,"title":{},"body":{"components/FacetWrapperComponent.html":{}}}],["this.results.records",{"_index":2368,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["this.results.records?.foreach(record",{"_index":2837,"title":{},"body":{"interfaces/MoneyDatum.html":{}}}],["this.results?.records",{"_index":1610,"title":{},"body":{"interfaces/Column.html":{}}}],["this.right",{"_index":1338,"title":{},"body":{"components/BsTooltipComponent.html":{}}}],["this.rowdata",{"_index":1609,"title":{},"body":{"interfaces/Column.html":{}}}],["this.rowmodeltype",{"_index":1601,"title":{},"body":{"interfaces/Column.html":{}}}],["this.searchservice",{"_index":914,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/Column.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{}}}],["this.searchservice.breadcrumbs.findselect(this.name",{"_index":3799,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["this.searchservice.getresults(query",{"_index":3265,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["this.searchservice.query",{"_index":1607,"title":{},"body":{"interfaces/Column.html":{}}}],["this.searchservice.query.addselect(expr",{"_index":2809,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["this.searchservice.query.findselect(this.name",{"_index":3165,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["this.searchservice.query.orderby",{"_index":1694,"title":{},"body":{"interfaces/Column.html":{}}}],["this.searchservice.query.removeselect(i",{"_index":1699,"title":{},"body":{"interfaces/Column.html":{}}}],["this.searchservice.query.removeselect(this.name",{"_index":2617,"title":{},"body":{"components/MapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/VisEvent.html":{}}}],["this.searchservice.querystream.subscribe",{"_index":863,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{}}}],["this.searchservice.search",{"_index":1700,"title":{},"body":{"interfaces/Column.html":{},"components/MapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/VisEvent.html":{}}}],["this.searchservice.search(undefined",{"_index":3306,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["this.select(node",{"_index":3762,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["this.selectedcolor",{"_index":2395,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["this.selectedge",{"_index":3766,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["this.selectedge(edge",{"_index":3841,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["this.selectedge(this.context.edges.get(event.edges[0",{"_index":3837,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["this.selecteditems",{"_index":2773,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{}}}],["this.selecteditems.add(item.value",{"_index":2776,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{}}}],["this.selectedvalues.add(v.tolowercase",{"_index":2380,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["this.selectedvalues.add(v.value.tolowercase",{"_index":2381,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["this.selectedvalues.add(val.tolowercase",{"_index":2376,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["this.selectedvalues.clear",{"_index":2367,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["this.selectfield",{"_index":2336,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["this.selectfield.update",{"_index":2408,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["this.selection",{"_index":871,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{}}}],["this.selection[0].gettime",{"_index":3179,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["this.selection[1].gettime",{"_index":3178,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["this.selectionchange",{"_index":2406,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["this.selectionchange.next(this.currentselection",{"_index":3612,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.selectionchange.unsubscribe",{"_index":2414,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["this.selectionservice",{"_index":1685,"title":{},"body":{"interfaces/Column.html":{}}}],["this.selectionservice.events.subscribe(e",{"_index":2694,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{}}}],["this.selectionservice.events.subscribe(event",{"_index":2407,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["this.selectionservice.getselectedids",{"_index":1761,"title":{},"body":{"interfaces/Column.html":{}}}],["this.selectionservice.getselecteditems().foreach(r",{"_index":2774,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{}}}],["this.selectionservice.toggleselectedrecords(row",{"_index":1772,"title":{},"body":{"interfaces/Column.html":{}}}],["this.selectionservice.toggleselectedrecords({id",{"_index":1767,"title":{},"body":{"interfaces/Column.html":{}}}],["this.selectionsubscription",{"_index":3083,"title":{},"body":{"classes/SelectedRecordsProvider.html":{}}}],["this.selectionsubscription?.unsubscribe",{"_index":3088,"title":{},"body":{"classes/SelectedRecordsProvider.html":{}}}],["this.selectnode",{"_index":3767,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["this.selectnode(node",{"_index":3840,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["this.selectnode(this.context.nodes.get(event.nodes[0",{"_index":3839,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["this.setcustomdateselect(range",{"_index":941,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{}}}],["this.setcustomdateselect(value",{"_index":877,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{}}}],["this.shiftdate(item.date",{"_index":3355,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["this.showcustomrange",{"_index":893,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{}}}],["this.showtooltip",{"_index":2855,"title":{},"body":{"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.skips[type.aggregation",{"_index":302,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{}}}],["this.skips[type.aggregation+(sourcenode?.id",{"_index":209,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{}}}],["this.skips[type.aggregation+node.id",{"_index":326,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{}}}],["this.springconstantpref",{"_index":3858,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["this.springlengthpref",{"_index":3856,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["this.style",{"_index":2636,"title":{},"body":{"components/MapComponent.html":{}}}],["this.subscriptions.foreach(s",{"_index":1531,"title":{},"body":{"interfaces/Column.html":{}}}],["this.subscriptions.map((item",{"_index":883,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{}}}],["this.subscriptions.push",{"_index":862,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{}}}],["this.subscriptions.push(this.selectionservice.events.subscribe(event",{"_index":1508,"title":{},"body":{"interfaces/Column.html":{}}}],["this.tickformatter",{"_index":2385,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["this.timeline.addcustomtime(this.record.modified.substring(0,10",{"_index":3048,"title":{},"body":{"components/ResultTimeline.html":{}}}],["this.timeline.on('select",{"_index":3049,"title":{},"body":{"components/ResultTimeline.html":{}}}],["this.timeline.removecustomtime(\"date",{"_index":3044,"title":{},"body":{"components/ResultTimeline.html":{}}}],["this.timeseries",{"_index":902,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["this.timeseries$[i",{"_index":3204,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["this.timeseries.foreach((config",{"_index":3203,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["this.timeseries.map(_",{"_index":3188,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["this.timeseries.push",{"_index":906,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{}}}],["this.toggleformatcontent(action",{"_index":1666,"title":{},"body":{"interfaces/Column.html":{}}}],["this.tonode",{"_index":668,"title":{},"body":{"components/BsEdgeInfoCard.html":{}}}],["this.toolbaractions",{"_index":1640,"title":{},"body":{"interfaces/Column.html":{}}}],["this.tooltipdatapoints",{"_index":3627,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.tooltipitem",{"_index":1172,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.tooltipvaluegetter",{"_index":1551,"title":{},"body":{"interfaces/Column.html":{}}}],["this.tooltipx",{"_index":2856,"title":{},"body":{"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.top",{"_index":1334,"title":{},"body":{"components/BsTooltipComponent.html":{}}}],["this.turnofftooltip",{"_index":2727,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.uiservice.addelementresizelistener(this.wrapper.nativeelement",{"_index":1370,"title":{},"body":{"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"components/NgxChart.html":{}}}],["this.uiservice.copytoclipboard(data",{"_index":1730,"title":{},"body":{"interfaces/Column.html":{}}}],["this.uiservice.copytoclipboard(this.data",{"_index":2006,"title":{},"body":{"components/DataModalComponent.html":{}}}],["this.uiservice.removeelementresizelistener(this.wrapper.nativeelement",{"_index":1374,"title":{},"body":{"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"components/NgxChart.html":{}}}],["this.updateactions",{"_index":3761,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["this.updateaxes",{"_index":2729,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.updatebrush",{"_index":3466,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.updatechart",{"_index":1369,"title":{},"body":{"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"components/NgxChart.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.updatecombinedaggregation(config",{"_index":3313,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["this.updatedata",{"_index":2007,"title":{},"body":{"components/DataModalComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/VisEvent.html":{}}}],["this.updatedataset(records",{"_index":3086,"title":{},"body":{"classes/SelectedRecordsProvider.html":{}}}],["this.updatedataset(results.aggregations",{"_index":226,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{}}}],["this.updatedataset(results.records",{"_index":489,"title":{},"body":{"classes/AsyncRecordsProvider.html":{}}}],["this.updatedataset(this.selectionservice.getselecteditems",{"_index":3087,"title":{},"body":{"classes/SelectedRecordsProvider.html":{}}}],["this.updatedynamicdataset(array.from(map.values",{"_index":2049,"title":{},"body":{"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{}}}],["this.updateevents",{"_index":3200,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{}}}],["this.updatefilterstate(this.query",{"_index":1606,"title":{},"body":{"interfaces/Column.html":{}}}],["this.updategrips(this.brushselection",{"_index":3604,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.updateitems",{"_index":882,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{}}}],["this.updateoptions",{"_index":3768,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["this.updatescales",{"_index":2728,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{}}}],["this.updatescales(this.data",{"_index":3495,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.updateselecteditems",{"_index":2695,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{}}}],["this.updateselectedvalues",{"_index":2412,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["this.updateselection",{"_index":3457,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.updatesortstate(this.query",{"_index":1608,"title":{},"body":{"interfaces/Column.html":{}}}],["this.updatetimeline",{"_index":3002,"title":{},"body":{"components/ResultTimeline.html":{}}}],["this.updatetimeseries",{"_index":3192,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["this.updatetimeseries(this.timelineaggregation",{"_index":878,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{}}}],["this.updatexaxis",{"_index":3421,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.updatezoom",{"_index":3496,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.viewinit",{"_index":1141,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.vistimelineservice.setitems(this.name",{"_index":3067,"title":{},"body":{"components/ResultTimeline.html":{}}}],["this.width",{"_index":1119,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.wrapper",{"_index":1398,"title":{},"body":{"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"components/NgxChart.html":{}}}],["this.x",{"_index":1116,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.x(datum.category",{"_index":2811,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{}}}],["this.x(datum.date",{"_index":2866,"title":{},"body":{"interfaces/MoneyDatum.html":{}}}],["this.x(item.x",{"_index":1173,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["this.x.bandwidth",{"_index":2765,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{}}}],["this.x.domain",{"_index":2771,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.x.domain(this.data.map(d",{"_index":2762,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{}}}],["this.x.domain(this.xt.domain",{"_index":3514,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.x.domain(xextent",{"_index":2851,"title":{},"body":{"interfaces/MoneyDatum.html":{}}}],["this.x.range([0",{"_index":2712,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.x_inner",{"_index":2701,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{}}}],["this.x_inner(datum.i",{"_index":2812,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{}}}],["this.xaxis",{"_index":1137,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.xaxis$.call(d3.axisbottom(this.xt).ticks(nticks",{"_index":3588,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.xaxis$.call(xaxis",{"_index":2781,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{}}}],["this.xaxis$.selectall(\".domain\").remove",{"_index":2782,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.xaxis.call(d3.axistop(this.x).ticksize(0",{"_index":1154,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["this.xaxis.selectall(\".domain\").remove",{"_index":1156,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["this.xaxis.selectall(\"text",{"_index":1158,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["this.xaxis.selectall('text').each(this.wrap",{"_index":1150,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["this.xaxis.transition(t",{"_index":1147,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["this.xt",{"_index":3424,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.xt(d.date",{"_index":3428,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.xt(event[0].date",{"_index":3644,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.xt(events[0].date",{"_index":3714,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.xt(this.currentselection[0",{"_index":3571,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.xt(this.currentselection[1",{"_index":3574,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.xt.domain",{"_index":3662,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.xt.invert(this.tooltipx",{"_index":3626,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.xt.invert(x",{"_index":3610,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.y",{"_index":1122,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.y(d.value",{"_index":3431,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.y(datum.value",{"_index":2813,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{}}}],["this.y(item.y",{"_index":1174,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["this.y.domain(yextent",{"_index":2766,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{}}}],["this.y.range([this.innerheight",{"_index":2709,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.y.ticks(5",{"_index":2785,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{}}}],["this.y.ticks(nticks",{"_index":3590,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.yaxis",{"_index":1139,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.yaxis$.call(yaxis",{"_index":2801,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.yaxis$.selectall(\".domain\").remove",{"_index":2802,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.yaxis.call(d3.axisleft(this.y).ticksize(0",{"_index":1155,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["this.yaxis.selectall(\".domain\").remove",{"_index":1170,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["this.yaxis.selectall(\"text",{"_index":1171,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["this.yaxis.selectall('text').each(this.wrap",{"_index":1153,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["this.yaxis.transition(t",{"_index":1151,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["this.zoombehavior",{"_index":3548,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.zoombehavior.on(\"end",{"_index":3540,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.zoombehavior.on(\"zoom",{"_index":3539,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.zoombehavior.transform(this.brush",{"_index":3541,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.zooming",{"_index":3614,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["though",{"_index":3464,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["three",{"_index":4072,"title":{},"body":{"miscellaneous/functions.html":{}}}],["through",{"_index":2348,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["throw",{"_index":265,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"interfaces/CustomData.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"components/FacetWrapperComponent.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["thumbnail",{"_index":4059,"title":{},"body":{"miscellaneous/functions.html":{}}}],["tick",{"_index":2792,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["tickformat(d3.format(\"~s",{"_index":3591,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["tickformat(this.formatservice.moneyformatter",{"_index":2799,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{}}}],["tickformatter",{"_index":1351,"title":{},"body":{"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"components/NgxChart.html":{}}}],["ticks",{"_index":2790,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["ticks(5",{"_index":2853,"title":{},"body":{"interfaces/MoneyDatum.html":{}}}],["ticksizeinner",{"_index":2797,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{}}}],["tickvalues(yaxisticks",{"_index":2798,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["tile",{"_index":1056,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["tile.clickable:hover",{"_index":1228,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["tile.selected",{"_index":1232,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["tilt",{"_index":1159,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["time",{"_index":470,"title":{},"body":{"classes/AsyncRecordsProvider.html":{},"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"interfaces/CustomData.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{},"interfaces/HeatmapItem.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"miscellaneous/functions.html":{}}}],["timeinterval",{"_index":3342,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{}}}],["timeinterval.offset(series[series.length",{"_index":3352,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["timeline",{"_index":742,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"modules/BsTimelineModule.html":{},"components/BsTooltipComponent.html":{},"components/DataModalComponent.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{},"components/FacetNgxChart.html":{},"components/FacetWrapperComponent.html":{},"components/MapComponent.html":{},"interfaces/MoneyDatum.html":{},"components/NgxChart.html":{},"components/ResultTimeline.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineEventType.html":{},"components/TimelineLegendComponent.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"modules/VisTimelineModule.html":{},"dependencies.html":{}}}],["timeline'},{'name",{"_index":715,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"components/BsTooltipComponent.html":{},"components/DataModalComponent.html":{},"components/FacetNgxChart.html":{},"components/FacetWrapperComponent.html":{},"components/MapComponent.html":{},"components/NgxChart.html":{},"components/ResultTimeline.html":{},"components/TimelineLegendComponent.html":{}}}],["timeline.component",{"_index":1302,"title":{},"body":{"modules/BsTimelineModule.html":{},"modules/FinanceModule.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineEventType.html":{},"components/TimelineLegendComponent.html":{},"interfaces/TimelineRecords.html":{}}}],["timeline.component.html",{"_index":2822,"title":{},"body":{"interfaces/MoneyDatum.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{}}}],["timeline.component.scss",{"_index":2823,"title":{},"body":{"interfaces/MoneyDatum.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{}}}],["timeline.component.ts",{"_index":2821,"title":{},"body":{"interfaces/MoneyDatum.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["timeline.html",{"_index":2963,"title":{},"body":{"components/ResultTimeline.html":{}}}],["timeline.name",{"_index":3719,"title":{},"body":{"interfaces/TimelineEventType.html":{},"components/TimelineLegendComponent.html":{}}}],["timeline.ts",{"_index":2962,"title":{},"body":{"components/ResultTimeline.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["timeline.ts:122",{"_index":2988,"title":{},"body":{"components/ResultTimeline.html":{}}}],["timeline.ts:21",{"_index":2982,"title":{},"body":{"components/ResultTimeline.html":{}}}],["timeline.ts:22",{"_index":2986,"title":{},"body":{"components/ResultTimeline.html":{}}}],["timeline.ts:23",{"_index":2975,"title":{},"body":{"components/ResultTimeline.html":{}}}],["timeline.ts:24",{"_index":2976,"title":{},"body":{"components/ResultTimeline.html":{}}}],["timeline.ts:25",{"_index":2981,"title":{},"body":{"components/ResultTimeline.html":{}}}],["timeline.ts:26",{"_index":2979,"title":{},"body":{"components/ResultTimeline.html":{}}}],["timeline.ts:27",{"_index":2980,"title":{},"body":{"components/ResultTimeline.html":{}}}],["timeline.ts:28",{"_index":2977,"title":{},"body":{"components/ResultTimeline.html":{}}}],["timeline.ts:29",{"_index":2985,"title":{},"body":{"components/ResultTimeline.html":{}}}],["timeline.ts:31",{"_index":2990,"title":{},"body":{"components/ResultTimeline.html":{}}}],["timeline.ts:32",{"_index":2973,"title":{},"body":{"components/ResultTimeline.html":{}}}],["timeline.ts:34",{"_index":2992,"title":{},"body":{"components/ResultTimeline.html":{}}}],["timeline.ts:37",{"_index":2987,"title":{},"body":{"components/ResultTimeline.html":{}}}],["timeline.ts:43",{"_index":2989,"title":{},"body":{"components/ResultTimeline.html":{}}}],["timeline/.../facet",{"_index":4113,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["timeline/.../result",{"_index":4118,"title":{},"body":{"miscellaneous/variables.html":{}}}],["timeline/bootstrap/facet",{"_index":745,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["timeline/bootstrap/timeline",{"_index":3717,"title":{},"body":{"interfaces/TimelineEventType.html":{},"components/TimelineLegendComponent.html":{},"coverage.html":{}}}],["timeline/bootstrap/timeline.component.ts",{"_index":3384,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{},"coverage.html":{}}}],["timeline/bootstrap/timeline.module.ts",{"_index":1300,"title":{},"body":{"modules/BsTimelineModule.html":{}}}],["timeline/money",{"_index":2522,"title":{},"body":{"modules/FinanceModule.html":{},"interfaces/MoneyDatum.html":{},"coverage.html":{}}}],["timeline/result",{"_index":2961,"title":{},"body":{"components/ResultTimeline.html":{},"modules/VisTimelineModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["timeline/vis",{"_index":3915,"title":{},"body":{"modules/VisTimelineModule.html":{}}}],["timelineaggregation",{"_index":772,"title":{"interfaces/TimelineAggregation.html":{}},"body":{"components/BsFacetDate.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["timelineaggregation).aggregation",{"_index":3299,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["timelinecombinedaggregations",{"_index":3099,"title":{"interfaces/TimelineCombinedAggregations.html":{}},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["timelinecombinedaggregations).aggregations",{"_index":3312,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["timelinecombinedaggregations).default",{"_index":3300,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["timelinecombinedaggregations).default.aggregation",{"_index":3301,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["timelinedata",{"_index":3108,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"miscellaneous/typealiases.html":{}}}],["timelinedate",{"_index":3096,"title":{"interfaces/TimelineDate.html":{}},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"coverage.html":{}}}],["timelinedate[]).concat(...primaryseries.map(s",{"_index":3503,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["timelinedate|undefined",{"_index":3412,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["timelineevent",{"_index":3097,"title":{"interfaces/TimelineEvent.html":{}},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["timelineevent[]).concat(...events",{"_index":3199,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["timelineeventaggregation",{"_index":3105,"title":{"interfaces/TimelineEventAggregation.html":{}},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["timelineeventaggregation).aggregation",{"_index":3227,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["timelineeventaggregation).subscribe",{"_index":3229,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["timelineeventdata",{"_index":3109,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"miscellaneous/typealiases.html":{}}}],["timelineeventtype",{"_index":3098,"title":{"interfaces/TimelineEventType.html":{}},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineEventType.html":{},"components/TimelineLegendComponent.html":{},"interfaces/TimelineRecords.html":{},"coverage.html":{}}}],["timelineinitialized",{"_index":2966,"title":{},"body":{"components/ResultTimeline.html":{}}}],["timelinelegendcomponent",{"_index":741,"title":{"components/TimelineLegendComponent.html":{}},"body":{"components/BsEdgeInfoCard.html":{},"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"modules/BsTimelineModule.html":{},"components/BsTooltipComponent.html":{},"components/DataModalComponent.html":{},"components/FacetNgxChart.html":{},"components/FacetWrapperComponent.html":{},"components/MapComponent.html":{},"components/NgxChart.html":{},"components/ResultTimeline.html":{},"interfaces/TimelineEventType.html":{},"components/TimelineLegendComponent.html":{},"coverage.html":{},"index.html":{}}}],["timelineoptions",{"_index":2983,"title":{},"body":{"components/ResultTimeline.html":{},"miscellaneous/variables.html":{}}}],["timelinerecords",{"_index":3104,"title":{"interfaces/TimelineRecords.html":{}},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["timelinerecords).field",{"_index":3153,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["timelines",{"_index":3201,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["timelineseries",{"_index":819,"title":{"interfaces/TimelineSeries.html":{}},"body":{"components/BsFacetDate.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineEventType.html":{},"components/TimelineLegendComponent.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["timelineseries).dates",{"_index":3206,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["times",{"_index":2035,"title":{},"body":{"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{}}}],["timeseries",{"_index":759,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{}}}],["timeseries$.error(err",{"_index":3288,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["timeseries$.next(d",{"_index":3287,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["title",{"_index":342,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"classes/BaseProvider.html":{},"components/BsEdgeInfoCard.html":{},"components/BsFacetDate.html":{},"components/BsNodeInfoCard.html":{},"interfaces/Column.html":{},"interfaces/CustomData.html":{},"components/DataModalComponent.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/FacetChartDataPoint.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{},"components/FacetNgxChart.html":{},"components/MapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/VisEvent.html":{}}}],["to?.sethours(0",{"_index":931,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{}}}],["to?.setminutes(0",{"_index":932,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{}}}],["to?.setseconds(0",{"_index":933,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{}}}],["todo",{"_index":132,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/VisEvent.html":{}}}],["together",{"_index":3648,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["toggle",{"_index":513,"title":{},"body":{"classes/BaseProvider.html":{},"interfaces/Column.html":{}}}],["togglecustomrange",{"_index":764,"title":{},"body":{"components/BsFacetDate.html":{}}}],["togglecustomrange(event",{"_index":806,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{}}}],["toggleformatcontent(action",{"_index":1737,"title":{},"body":{"interfaces/Column.html":{}}}],["toggles",{"_index":1736,"title":{},"body":{"interfaces/Column.html":{}}}],["tonode",{"_index":559,"title":{},"body":{"classes/BaseProvider.html":{},"components/BsEdgeInfoCard.html":{}}}],["tonode.id",{"_index":568,"title":{},"body":{"classes/BaseProvider.html":{}}}],["toolbar",{"_index":1453,"title":{},"body":{"interfaces/Column.html":{}}}],["toolbaractions",{"_index":1446,"title":{},"body":{"interfaces/Column.html":{}}}],["tooltip",{"_index":1101,"title":{},"body":{"components/BsHeatmapComponent.html":{},"modules/BsTimelineModule.html":{},"components/BsTooltipComponent.html":{},"interfaces/Column.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{}}}],["tooltip'},{'name",{"_index":722,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"components/BsTooltipComponent.html":{},"components/DataModalComponent.html":{},"components/FacetNgxChart.html":{},"components/FacetWrapperComponent.html":{},"components/MapComponent.html":{},"components/NgxChart.html":{},"components/ResultTimeline.html":{},"components/TimelineLegendComponent.html":{}}}],["tooltip.component",{"_index":1247,"title":{},"body":{"modules/BsHeatmapModule.html":{}}}],["tooltip.left::after",{"_index":1320,"title":{},"body":{"components/BsTooltipComponent.html":{}}}],["tooltip.right::after",{"_index":1316,"title":{},"body":{"components/BsTooltipComponent.html":{}}}],["tooltip::after",{"_index":1309,"title":{},"body":{"components/BsTooltipComponent.html":{}}}],["tooltipdatapoints",{"_index":3411,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["tooltipitem",{"_index":970,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["tooltipitem.count",{"_index":1209,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["tooltipitem.display",{"_index":1206,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["tooltipitem.value",{"_index":1207,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["tooltipleft",{"_index":971,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["tooltiporientation",{"_index":972,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["tooltipright",{"_index":973,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["tooltips",{"_index":2693,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{}}}],["tooltiptemplate",{"_index":1361,"title":{},"body":{"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"components/NgxChart.html":{}}}],["tooltiptop",{"_index":974,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["tooltiptpl",{"_index":3393,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["tooltipvaluegetter",{"_index":1537,"title":{},"body":{"interfaces/Column.html":{}}}],["tooltipx",{"_index":2828,"title":{},"body":{"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["top",{"_index":633,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"components/BsTooltipComponent.html":{},"components/FacetWrapperComponent.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/NodeData.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{}}}],["top.px",{"_index":1333,"title":{},"body":{"components/BsTooltipComponent.html":{}}}],["total",{"_index":1204,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["transfer",{"_index":2292,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["transform",{"_index":3617,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["transform.rescalex(this.x",{"_index":3619,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["transformed",{"_index":2104,"title":{},"body":{"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["transforms",{"_index":3334,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{}}}],["transit",{"_index":4155,"title":{},"body":{"miscellaneous/variables.html":{}}}],["transit.line",{"_index":4156,"title":{},"body":{"miscellaneous/variables.html":{}}}],["transit.station",{"_index":4157,"title":{},"body":{"miscellaneous/variables.html":{}}}],["transition",{"_index":995,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["transitions",{"_index":1045,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["translate",{"_index":3597,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["transparent",{"_index":1318,"title":{},"body":{"components/BsTooltipComponent.html":{}}}],["trash",{"_index":521,"title":{},"body":{"classes/BaseProvider.html":{}}}],["tree",{"_index":626,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"components/BsTooltipComponent.html":{},"components/DataModalComponent.html":{},"components/FacetNgxChart.html":{},"components/FacetWrapperComponent.html":{},"components/MapComponent.html":{},"components/NgxChart.html":{},"components/ResultTimeline.html":{},"components/TimelineLegendComponent.html":{}}}],["treemapmodule",{"_index":2956,"title":{},"body":{"modules/NgxChartsModule.html":{}}}],["triangle",{"_index":3639,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["trigger",{"_index":162,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"components/BsEdgeInfoCard.html":{},"components/BsNodeInfoCard.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/NodeData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/VisEvent.html":{}}}],["trigger/display",{"_index":1812,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["trigger=onclick",{"_index":1821,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["trigger=oninsert",{"_index":1824,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["triggered",{"_index":1773,"title":{},"body":{"interfaces/Column.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["triggers",{"_index":3310,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["triple",{"_index":4077,"title":{},"body":{"miscellaneous/functions.html":{}}}],["true",{"_index":116,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"components/BsEdgeInfoCard.html":{},"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/Column.html":{},"interfaces/CustomData.html":{},"components/DataModalComponent.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/FacetChartDataPoint.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{},"components/FacetNgxChart.html":{},"components/FacetWrapperComponent.html":{},"interfaces/HeatmapItem.html":{},"components/MapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"components/NgxChart.html":{},"interfaces/NodeData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"components/ResultTimeline.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{}}}],["true}).pipe",{"_index":3266,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["true}).subscribe",{"_index":225,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{}}}],["true}).subscribe(results",{"_index":2130,"title":{},"body":{"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{}}}],["truncates",{"_index":1078,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["try",{"_index":1274,"title":{},"body":{"components/BsNodeInfoCard.html":{},"interfaces/NodeData.html":{},"components/ResultTimeline.html":{}}}],["turn",{"_index":400,"title":{},"body":{"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"classes/DynamicEdgeProvider.html":{},"classes/DynamicNodeProvider.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{}}}],["turned",{"_index":1808,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["turning",{"_index":3641,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["two",{"_index":262,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"classes/BaseProvider.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"miscellaneous/functions.html":{}}}],["type",{"_index":83,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"components/BsEdgeInfoCard.html":{},"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"components/BsTooltipComponent.html":{},"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/Column.html":{},"interfaces/CustomData.html":{},"components/DataModalComponent.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/FacetChartDataPoint.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{},"components/FacetNgxChart.html":{},"components/FacetWrapperComponent.html":{},"interfaces/HeatmapItem.html":{},"components/MapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"components/NgxChart.html":{},"interfaces/Node.html":{},"interfaces/NodeData.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"components/ResultTimeline.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineEventType.html":{},"components/TimelineLegendComponent.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["type's",{"_index":1277,"title":{},"body":{"components/BsNodeInfoCard.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/NodeData.html":{}}}],["type.count",{"_index":210,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{}}}],["type.display",{"_index":1934,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["type.edgeoptions",{"_index":583,"title":{},"body":{"classes/BaseProvider.html":{}}}],["type.edgeoptions([fromnode",{"_index":584,"title":{},"body":{"classes/BaseProvider.html":{}}}],["type.field",{"_index":417,"title":{},"body":{"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"classes/DynamicEdgeProvider.html":{},"classes/DynamicNodeProvider.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{}}}],["type.name}:${value",{"_index":534,"title":{},"body":{"classes/BaseProvider.html":{}}}],["type.nodeoptions",{"_index":556,"title":{},"body":{"classes/BaseProvider.html":{}}}],["type.nodeoptions(node",{"_index":557,"title":{},"body":{"classes/BaseProvider.html":{}}}],["type.nodetypes.length",{"_index":1921,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["type.nodetypes[0",{"_index":315,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{}}}],["type.nodetypes[0].name",{"_index":1866,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["type.nodetypes[1",{"_index":325,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{}}}],["type.parse!(recorddata",{"_index":1879,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["type.parse!(value",{"_index":1877,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["type.parse(item",{"_index":260,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{}}}],["type.trigger",{"_index":304,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["type:auditeventtype.search_timeline_usage",{"_index":3307,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["typealiases",{"_index":4109,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["typed",{"_index":4082,"title":{},"body":{"miscellaneous/functions.html":{}}}],["typedcoocaggregationdemo",{"_index":3988,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["typedcoocaggregationdemo(providerfactory",{"_index":4076,"title":{},"body":{"miscellaneous/functions.html":{}}}],["typedcoocrecorddemo",{"_index":3989,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["typedcoocrecorddemo(providerfactory",{"_index":4081,"title":{},"body":{"miscellaneous/functions.html":{}}}],["typeof",{"_index":3249,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["types",{"_index":67,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"interfaces/CustomData.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["types.find(type",{"_index":236,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{}}}],["types.foreach(type",{"_index":206,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{}}}],["types.length",{"_index":306,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{}}}],["types.map(type",{"_index":361,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{}}}],["typically",{"_index":2159,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["uiservice",{"_index":1348,"title":{},"body":{"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/Column.html":{},"components/DataModalComponent.html":{},"components/NgxChart.html":{}}}],["undefined",{"_index":156,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"components/BsEdgeInfoCard.html":{},"components/BsFacetDate.html":{},"components/BsNodeInfoCard.html":{},"interfaces/Column.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/FacetChartDataPoint.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{},"components/FacetNgxChart.html":{},"components/FacetWrapperComponent.html":{},"components/MapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeData.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"miscellaneous/variables.html":{}}}],["undefined).subscribe(res",{"_index":2073,"title":{},"body":{"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{}}}],["underline",{"_index":1224,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["understand",{"_index":1612,"title":{},"body":{"interfaces/Column.html":{}}}],["undirected",{"_index":561,"title":{},"body":{"classes/BaseProvider.html":{}}}],["unfortunately",{"_index":2723,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["unique",{"_index":1955,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/VisEvent.html":{}}}],["unlimited",{"_index":1827,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["unselected",{"_index":3073,"title":{},"body":{"classes/SelectedRecordsProvider.html":{},"miscellaneous/functions.html":{}}}],["unsubscribe",{"_index":1530,"title":{},"body":{"interfaces/Column.html":{}}}],["until",{"_index":1822,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["up",{"_index":1384,"title":{},"body":{"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/Column.html":{},"components/NgxChart.html":{},"interfaces/VisEvent.html":{}}}],["update",{"_index":686,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"interfaces/Column.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/FacetChartDataPoint.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{},"components/FacetNgxChart.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/NodeData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{}}}],["update/reset",{"_index":3534,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["updateactions",{"_index":3797,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["updateaxes",{"_index":2777,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["updatebrush",{"_index":3567,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["updatechart",{"_index":1365,"title":{},"body":{"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"components/NgxChart.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["updatecombinedaggregation",{"_index":3314,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["updatecombinedaggregation(config",{"_index":3272,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["updated",{"_index":2251,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"components/MapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["updatedata",{"_index":1988,"title":{},"body":{"components/DataModalComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/VisEvent.html":{}}}],["updatedataset(aggregations",{"_index":232,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{}}}],["updatedataset(records",{"_index":1844,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["updatedatasets",{"_index":2879,"title":{},"body":{"classes/NetworkDataset.html":{}}}],["updatedatasets(nodes",{"_index":2293,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["updatedynamicdataset(sourcenodes",{"_index":2052,"title":{},"body":{"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{}}}],["updateevents",{"_index":3223,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{}}}],["updatefilterstate(query",{"_index":1614,"title":{},"body":{"interfaces/Column.html":{}}}],["updategrips(selection",{"_index":3594,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["updateitems",{"_index":896,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{}}}],["updateoptions",{"_index":3849,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["updater",{"_index":2337,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["updaterange",{"_index":765,"title":{},"body":{"components/BsFacetDate.html":{}}}],["updaterange(range",{"_index":808,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{}}}],["updates",{"_index":192,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{}}}],["updatescales(data",{"_index":3497,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["updateselecteditems",{"_index":2772,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{}}}],["updateselectedvalues",{"_index":2366,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["updateselection",{"_index":3577,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["updatesortstate(query",{"_index":1629,"title":{},"body":{"interfaces/Column.html":{}}}],["updatetimeline",{"_index":2967,"title":{},"body":{"components/ResultTimeline.html":{}}}],["updatetimeseries",{"_index":3202,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["updatetimeseries(aggregationname",{"_index":901,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{}}}],["updatexaxis",{"_index":3581,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["updatezoom",{"_index":3536,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["updating",{"_index":3291,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["upon",{"_index":2127,"title":{},"body":{"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{}}}],["url",{"_index":3059,"title":{},"body":{"components/ResultTimeline.html":{}}}],["usd",{"_index":2824,"title":{},"body":{"interfaces/MoneyDatum.html":{}}}],["use",{"_index":460,"title":{},"body":{"classes/AsyncRecordsProvider.html":{},"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"interfaces/CustomData.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeData.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{}}}],["used",{"_index":140,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"components/BsHeatmapComponent.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"interfaces/HeatmapItem.html":{},"components/MapComponent.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{}}}],["useful",{"_index":1774,"title":{},"body":{"interfaces/Column.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["user",{"_index":1052,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/Column.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/HeatmapItem.html":{},"components/MapComponent.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/VisEvent.html":{}}}],["userpreferences",{"_index":1408,"title":{},"body":{"interfaces/Column.html":{},"interfaces/VisEvent.html":{}}}],["users",{"_index":1747,"title":{},"body":{"interfaces/Column.html":{}}}],["uses",{"_index":3652,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["using",{"_index":153,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"interfaces/Column.html":{},"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["util",{"_index":4047,"title":{},"body":{"dependencies.html":{}}}],["utilities",{"_index":3646,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["utility",{"_index":3321,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["utils",{"_index":100,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"components/BsFacetDate.html":{},"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/Column.html":{},"interfaces/CustomData.html":{},"components/DataModalComponent.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/FacetChartDataPoint.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{},"components/FacetNgxChart.html":{},"components/FacetWrapperComponent.html":{},"components/MapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"components/NgxChart.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/VisEvent.html":{}}}],["utils.copy(this.options",{"_index":3850,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["utils.copy(this.query",{"_index":201,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{}}}],["utils.copy(this.searchservice.query",{"_index":913,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["utils.debounce",{"_index":3897,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["utils.eqnc(a.name",{"_index":2835,"title":{},"body":{"interfaces/MoneyDatum.html":{}}}],["utils.eqnc(alias",{"_index":2499,"title":{},"body":{"components/FacetWrapperComponent.html":{}}}],["utils.eqnc(type.aggregation",{"_index":237,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{}}}],["utils.equals(oldmodel",{"_index":1788,"title":{},"body":{"interfaces/Column.html":{}}}],["utils.extend",{"_index":1547,"title":{},"body":{"interfaces/Column.html":{}}}],["utils.extend(edge",{"_index":569,"title":{},"body":{"classes/BaseProvider.html":{}}}],["utils.extend(existingedge",{"_index":2291,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["utils.extend(existingnode",{"_index":2268,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["utils.extend(node",{"_index":554,"title":{},"body":{"classes/BaseProvider.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{}}}],["utils.isnumber(value",{"_index":2398,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["utils.isundefined(r",{"_index":2817,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{}}}],["utils.isundefined(x",{"_index":2868,"title":{},"body":{"interfaces/MoneyDatum.html":{}}}],["utils.isundefined(x_inner",{"_index":2816,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{}}}],["utils.isundefined(y",{"_index":2818,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{}}}],["utils.merge",{"_index":4164,"title":{},"body":{"miscellaneous/variables.html":{}}}],["utils.subscribe(this.intlservice.events",{"_index":1373,"title":{},"body":{"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"components/NgxChart.html":{}}}],["utils.todate(r[config.field",{"_index":3245,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["utils.tolowercase(this.options.type",{"_index":1377,"title":{},"body":{"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"components/NgxChart.html":{}}}],["utilsmodule",{"_index":35,"title":{},"body":{"modules/AgGridModule.html":{},"modules/BsTimelineModule.html":{},"modules/FinanceModule.html":{},"modules/FusionChartsModule.html":{},"modules/NetworkModule.html":{},"modules/NgxChartsModule.html":{}}}],["v!==this.aggregation",{"_index":2343,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["val",{"_index":2372,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["val.foreach(v",{"_index":2378,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["valid",{"_index":2752,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{}}}],["validity",{"_index":3511,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["value",{"_index":117,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"components/BsTooltipComponent.html":{},"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/Column.html":{},"interfaces/CustomData.html":{},"components/DataModalComponent.html":{},"classes/DynamicEdgeProvider.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/FacetChartDataPoint.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{},"components/FacetNgxChart.html":{},"interfaces/HeatmapItem.html":{},"components/MapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"components/NgxChart.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"components/ResultTimeline.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"components/TimelineLegendComponent.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{},"miscellaneous/variables.html":{}}}],["value.x))).slice(0",{"_index":1107,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["value.y))).slice(0",{"_index":1110,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["value[\"display",{"_index":1890,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["value[\"value",{"_index":1889,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["value[0",{"_index":865,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{}}}],["value[1",{"_index":867,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{}}}],["value_amount",{"_index":2672,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{}}}],["valueamounts",{"_index":2675,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{}}}],["valued",{"_index":1873,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["valueitem",{"_index":2001,"title":{},"body":{"components/DataModalComponent.html":{},"interfaces/MoneyCloudDatum.html":{}}}],["values",{"_index":81,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"interfaces/CustomData.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/VisEvent.html":{}}}],["valuestr",{"_index":2749,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{}}}],["var",{"_index":703,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"components/BsTooltipComponent.html":{},"components/DataModalComponent.html":{},"components/FacetNgxChart.html":{},"components/FacetWrapperComponent.html":{},"components/MapComponent.html":{},"components/NgxChart.html":{},"components/ResultTimeline.html":{},"components/TimelineLegendComponent.html":{}}}],["variable",{"_index":3796,"title":{},"body":{"interfaces/VisEvent.html":{},"coverage.html":{}}}],["variables",{"_index":4114,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["vertical",{"_index":2804,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["verticaltalbar",{"_index":1382,"title":{},"body":{"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"components/NgxChart.html":{}}}],["via",{"_index":441,"title":{},"body":{"classes/AsyncRecordsProvider.html":{},"interfaces/Column.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"miscellaneous/functions.html":{}}}],["view",{"_index":681,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"modules/BsHeatmapModule.html":{},"components/BsNodeInfoCard.html":{},"interfaces/Column.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"components/MapComponent.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeData.html":{},"interfaces/NodeType.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{}}}],["view'},{'name",{"_index":708,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"components/BsTooltipComponent.html":{},"components/DataModalComponent.html":{},"components/FacetNgxChart.html":{},"components/FacetWrapperComponent.html":{},"components/MapComponent.html":{},"components/NgxChart.html":{},"components/ResultTimeline.html":{},"components/TimelineLegendComponent.html":{}}}],["view.component",{"_index":45,"title":{},"body":{"modules/AgGridModule.html":{}}}],["view.component.html",{"_index":1435,"title":{},"body":{"interfaces/Column.html":{}}}],["view.component.scss",{"_index":1436,"title":{},"body":{"interfaces/Column.html":{}}}],["view.component.ts",{"_index":1403,"title":{},"body":{"interfaces/Column.html":{},"coverage.html":{}}}],["view.ts",{"_index":3957,"title":{},"body":{"coverage.html":{}}}],["viewbox",{"_index":1175,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["viewchild",{"_index":1089,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"components/NgxChart.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["viewchild(\"brush",{"_index":3407,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["viewchild(\"chart",{"_index":1362,"title":{},"body":{"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"components/NgxChart.html":{}}}],["viewchild(\"overlay",{"_index":2691,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{}}}],["viewchild(\"tooltiptemplate",{"_index":1360,"title":{},"body":{"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"components/NgxChart.html":{}}}],["viewchild(\"wrapper",{"_index":1357,"title":{},"body":{"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"components/NgxChart.html":{}}}],["viewchild(\"xaxis",{"_index":1099,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["viewchild(\"yaxis",{"_index":1100,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["viewchild('chart",{"_index":2930,"title":{},"body":{"components/NgxChart.html":{}}}],["viewchild('tooltiptemplate",{"_index":2934,"title":{},"body":{"components/NgxChart.html":{}}}],["viewchild('wrapper",{"_index":2936,"title":{},"body":{"components/NgxChart.html":{}}}],["viewchild('xaxis",{"_index":1067,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["viewchild('yaxis",{"_index":1069,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["viewinit",{"_index":975,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["vis",{"_index":2151,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"modules/NetworkModule.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"components/ResultTimeline.html":{},"interfaces/VisEvent.html":{},"modules/VisTimelineModule.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/variables.html":{}}}],["vis.js",{"_index":2181,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/VisEvent.html":{},"miscellaneous/variables.html":{}}}],["visevent",{"_index":3732,"title":{"interfaces/VisEvent.html":{}},"body":{"interfaces/VisEvent.html":{},"coverage.html":{}}}],["visibility",{"_index":167,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"interfaces/Column.html":{},"interfaces/CustomData.html":{},"classes/DynamicEdgeProvider.html":{},"classes/DynamicNodeProvider.html":{},"components/NgxChart.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/VisEvent.html":{}}}],["visibilityaction",{"_index":1708,"title":{},"body":{"interfaces/Column.html":{}}}],["visibilityaction.selected",{"_index":1712,"title":{},"body":{"interfaces/Column.html":{}}}],["visible",{"_index":538,"title":{},"body":{"classes/BaseProvider.html":{},"interfaces/CustomData.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"components/NgxChart.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["visiblity",{"_index":1705,"title":{},"body":{"interfaces/Column.html":{}}}],["vismodule",{"_index":2904,"title":{},"body":{"modules/NetworkModule.html":{},"modules/VisTimelineModule.html":{}}}],["visnetworkservice",{"_index":2153,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/VisEvent.html":{}}}],["vistimelinemodule",{"_index":3911,"title":{"modules/VisTimelineModule.html":{}},"body":{"modules/VisTimelineModule.html":{},"index.html":{},"modules.html":{}}}],["vistimelineservice",{"_index":2965,"title":{},"body":{"components/ResultTimeline.html":{}}}],["void",{"_index":408,"title":{},"body":{"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"components/BsEdgeInfoCard.html":{},"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"components/DataModalComponent.html":{},"classes/DynamicEdgeProvider.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"components/FacetNgxChart.html":{},"components/FacetWrapperComponent.html":{},"components/MapComponent.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"components/NgxChart.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"classes/RecordsProvider.html":{},"components/ResultTimeline.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["w",{"_index":3477,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["want",{"_index":459,"title":{},"body":{"classes/AsyncRecordsProvider.html":{},"interfaces/Column.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{}}}],["warning",{"_index":683,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsNodeInfoCard.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/NodeData.html":{}}}],["water",{"_index":4159,"title":{},"body":{"miscellaneous/variables.html":{}}}],["way",{"_index":1389,"title":{},"body":{"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/CustomData.html":{},"components/NgxChart.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["web",{"_index":145,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/VisEvent.html":{}}}],["weeks",{"_index":3269,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["well",{"_index":2220,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["west",{"_index":2649,"title":{},"body":{"components/MapComponent.html":{}}}],["whatever",{"_index":4096,"title":{},"body":{"miscellaneous/functions.html":{}}}],["whether",{"_index":170,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"classes/BaseProvider.html":{},"interfaces/Column.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{},"miscellaneous/functions.html":{}}}],["while(!parsedexpr.isleaf",{"_index":3170,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["whose",{"_index":2026,"title":{},"body":{"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{}}}],["width",{"_index":637,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"components/BsTooltipComponent.html":{},"interfaces/Column.html":{},"components/FacetWrapperComponent.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"components/NgxChart.html":{},"interfaces/NodeData.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineEventType.html":{},"components/TimelineLegendComponent.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{}}}],["wikiasyncconfig",{"_index":3990,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["wikiasyncconfig(providerfactory",{"_index":4083,"title":{},"body":{"miscellaneous/functions.html":{}}}],["wikidynconfig",{"_index":3991,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["wikidynconfig(providerfactory",{"_index":4087,"title":{},"body":{"miscellaneous/functions.html":{}}}],["wikidynedgeconfig",{"_index":3992,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["wikidynedgeconfig(providerfactory",{"_index":4092,"title":{},"body":{"miscellaneous/functions.html":{}}}],["wikimultidynconfig",{"_index":3993,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["wikimultidynconfig(providerfactory",{"_index":4103,"title":{},"body":{"miscellaneous/functions.html":{}}}],["wikipedia",{"_index":1840,"title":{},"body":{"interfaces/CustomData.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"miscellaneous/functions.html":{}}}],["window",{"_index":2610,"title":{},"body":{"components/MapComponent.html":{}}}],["windows",{"_index":2653,"title":{},"body":{"components/MapComponent.html":{}}}],["wish",{"_index":364,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{}}}],["within",{"_index":1892,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{}}}],["without",{"_index":3615,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["withtext",{"_index":365,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{}}}],["work",{"_index":1586,"title":{},"body":{"interfaces/Column.html":{}}}],["works",{"_index":115,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["wrap",{"_index":976,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["wrapper",{"_index":1359,"title":{},"body":{"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"components/FacetWrapperComponent.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"components/NgxChart.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["wrapper'},{'name",{"_index":727,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"components/BsTooltipComponent.html":{},"components/DataModalComponent.html":{},"components/FacetNgxChart.html":{},"components/FacetWrapperComponent.html":{},"components/MapComponent.html":{},"components/NgxChart.html":{},"components/ResultTimeline.html":{},"components/TimelineLegendComponent.html":{}}}],["wrapper.component",{"_index":49,"title":{},"body":{"modules/AgGridModule.html":{},"interfaces/Column.html":{}}}],["wrapper.component.ts",{"_index":2456,"title":{},"body":{"components/FacetWrapperComponent.html":{},"coverage.html":{}}}],["wrapper.component.ts:28",{"_index":2482,"title":{},"body":{"components/FacetWrapperComponent.html":{}}}],["wrapper.component.ts:30",{"_index":2479,"title":{},"body":{"components/FacetWrapperComponent.html":{}}}],["wrapper.component.ts:31",{"_index":2480,"title":{},"body":{"components/FacetWrapperComponent.html":{}}}],["wrapper.component.ts:32",{"_index":2478,"title":{},"body":{"components/FacetWrapperComponent.html":{}}}],["wrapper.component.ts:33",{"_index":2481,"title":{},"body":{"components/FacetWrapperComponent.html":{}}}],["wrapper.component.ts:35",{"_index":2484,"title":{},"body":{"components/FacetWrapperComponent.html":{}}}],["wrapper.component.ts:39",{"_index":2486,"title":{},"body":{"components/FacetWrapperComponent.html":{}}}],["wrapper.component.ts:43",{"_index":2488,"title":{},"body":{"components/FacetWrapperComponent.html":{}}}],["wrapper.component.ts:51",{"_index":2490,"title":{},"body":{"components/FacetWrapperComponent.html":{}}}],["wrapper.component.ts:55",{"_index":2492,"title":{},"body":{"components/FacetWrapperComponent.html":{}}}],["wrapper.component.ts:59",{"_index":2470,"title":{},"body":{"components/FacetWrapperComponent.html":{}}}],["wrapper.component.ts:73",{"_index":2475,"title":{},"body":{"components/FacetWrapperComponent.html":{}}}],["wrapper.component.ts:78",{"_index":2473,"title":{},"body":{"components/FacetWrapperComponent.html":{}}}],["wrapper.component.ts:82",{"_index":2474,"title":{},"body":{"components/FacetWrapperComponent.html":{}}}],["wrapper.component.ts:86",{"_index":2477,"title":{},"body":{"components/FacetWrapperComponent.html":{}}}],["ww",{"_index":3368,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["x",{"_index":977,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["x(d",{"_index":3427,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["x0",{"_index":3569,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["x0,x1",{"_index":3575,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["x1",{"_index":3572,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["x_inner",{"_index":2682,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{}}}],["xaxis",{"_index":978,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["xdomain",{"_index":3543,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["xdomain[0].gettime",{"_index":3546,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["xdomain[1].gettime",{"_index":3545,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["xextent",{"_index":3505,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["xextent[0",{"_index":3518,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["xextent[0].gettime",{"_index":3523,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["xextent[1",{"_index":2849,"title":{},"body":{"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["xextent[1].gettime",{"_index":3522,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["xlabels",{"_index":1104,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["xlabels.includes(value.x",{"_index":1114,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["xt",{"_index":3395,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["y",{"_index":979,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["y(d",{"_index":3433,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["y0(this.y(0",{"_index":3429,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["y1(d",{"_index":3430,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["yaxis",{"_index":980,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["yaxisticks",{"_index":2784,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["year",{"_index":3019,"title":{},"body":{"components/ResultTimeline.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["years",{"_index":3125,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{}}}],["yes",{"_index":395,"title":{},"body":{"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"components/BsHeatmapComponent.html":{},"classes/DynamicEdgeProvider.html":{},"classes/DynamicNodeProvider.html":{},"components/MapComponent.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{}}}],["yextent",{"_index":2847,"title":{},"body":{"interfaces/MoneyDatum.html":{}}}],["yextent[0",{"_index":2850,"title":{},"body":{"interfaces/MoneyDatum.html":{}}}],["yextent[1",{"_index":2759,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{}}}],["yielded",{"_index":1605,"title":{},"body":{"interfaces/Column.html":{}}}],["ylabels",{"_index":1109,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["ylabels.includes(value.y",{"_index":1115,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["ymax",{"_index":3507,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["yoffset",{"_index":3726,"title":{},"body":{"interfaces/TimelineEventType.html":{},"components/TimelineLegendComponent.html":{}}}],["yyyy",{"_index":3363,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["z",{"_index":1308,"title":{},"body":{"components/BsTooltipComponent.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["zeros",{"_index":3336,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["zoom",{"_index":11,"title":{},"body":{"modules/AgGridModule.html":{},"modules/BsHeatmapModule.html":{},"modules/BsTimelineModule.html":{},"modules/FinanceModule.html":{},"modules/FusionChartsModule.html":{},"modules/GoogleMapsModule.html":{},"modules/NetworkModule.html":{},"modules/NgxChartsModule.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{},"modules/VisTimelineModule.html":{},"index.html":{}}}],["zoom/selection",{"_index":3210,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["zoomable",{"_index":3120,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{}}}],["zoombehavior",{"_index":3403,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["zoomed",{"_index":3117,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["zooming",{"_index":3416,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["zooms",{"_index":3309,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"modules/AgGridModule.html":{"url":"modules/AgGridModule.html","title":"module - AgGridModule","body":"\n                   \n\n\n\n\n    Modules\n    AgGridModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AgGridModule\n\n\n\ncluster_AgGridModule_declarations\n\n\n\ncluster_AgGridModule_exports\n\n\n\n\nAgGridViewComponent\n\nAgGridViewComponent\n\n\n\nAgGridModule\n\nAgGridModule\n\nAgGridModule -->\n\nAgGridViewComponent->AgGridModule\n\n\n\n\n\nDataModalComponent\n\nDataModalComponent\n\nAgGridModule -->\n\nDataModalComponent->AgGridModule\n\n\n\n\n\nFacetWrapperComponent\n\nFacetWrapperComponent\n\nAgGridModule -->\n\nFacetWrapperComponent->AgGridModule\n\n\n\n\n\nAgGridViewComponent \n\nAgGridViewComponent \n\nAgGridViewComponent  -->\n\nAgGridModule->AgGridViewComponent \n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            ag-grid/ag-grid.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Declarations\n                    \n                        \n                            AgGridViewComponent\n                        \n                        \n                            DataModalComponent\n                        \n                        \n                            FacetWrapperComponent\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            AgGridViewComponent\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { NgModule } from \"@angular/core\";\nimport { CommonModule } from \"@angular/common\";\nimport { FormsModule, ReactiveFormsModule } from \"@angular/forms\";\n\nimport { AgGridModule as AGModule } from 'ag-grid-angular';\n\nimport { IntlModule } from '@sinequa/core/intl';\nimport { UtilsModule } from \"@sinequa/components/utils\";\nimport { BsActionModule } from \"@sinequa/components/action\";\nimport { BsModalModule } from \"@sinequa/components/modal\";\nimport { BsFacetModule } from \"@sinequa/components/facet\";\nimport { ResultModule } from \"@sinequa/components/result\";\n\nimport { AgGridViewComponent } from \"./ag-grid-view.component\";\nimport { DataModalComponent } from \"./data-modal.component\";\nimport { FacetWrapperComponent } from \"./facet-wrapper.component\";\n\n@NgModule({\n\n    imports: [\n        CommonModule,\n        FormsModule, ReactiveFormsModule, \n        \n        IntlModule,\n        UtilsModule,\n        BsActionModule,\n        BsModalModule,\n        ResultModule,\n        BsFacetModule,\n        \n        AGModule.withComponents([FacetWrapperComponent]),\n    ],\n    declarations: [\n        AgGridViewComponent,\n        DataModalComponent,\n        FacetWrapperComponent\n    ],\n    exports: [\n        AgGridViewComponent\n    ],\n})\nexport class AgGridModule {}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/AggregationData.html":{"url":"interfaces/AggregationData.html","title":"interface - AggregationData","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  AggregationData\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            network/providers/aggregation-provider.ts\n        \n\n\n            \n                Description\n            \n            \n                Convenience structure for managing custom metadata types (like\ncooccurrence entities). AggregationData is returned by the custom\nparse() function of an AggregationEdgeType.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            directed\n                                        \n                                \n                                \n                                        \n                                            displays\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            fieldValue\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            relations\n                                        \n                                \n                                \n                                        \n                                            values\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        directed\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        directed:     boolean[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     boolean[]\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        displays\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        displays:     string[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        fieldValue\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        fieldValue:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        relations\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        relations:     string[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string[]\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        values\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        values:     string[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Aggregation, AggregationItem } from '@sinequa/core/web-services';\nimport { Node, Edge, EdgeType, NetworkDataset, NetworkContext } from '../network-models';\nimport { Action } from '@sinequa/components/action';\nimport { Query, Expr } from '@sinequa/core/app-utils';\nimport { Utils } from '@sinequa/core/base';\nimport { BaseProvider } from './base-provider';\n\n/**\n * Extension of the Edge interface, to store the aggregation and\n * aggregation items from which the edge is constructed\n */\nexport interface AggregationEdge extends Edge {\n    aggregationItem: AggregationItem;\n    aggregation: Aggregation;\n}\n\n/**\n * Convenience structure for managing custom metadata types (like\n * cooccurrence entities). AggregationData is returned by the custom\n * parse() function of an AggregationEdgeType.\n */\nexport interface AggregationData {\n    values: string[]; // eg. LARRY PAGE, GOOGLE\n    displays: string[]; // eg. Larry Page, Google\n    relations?: string[]; // eg. Works At\n    directed?: boolean[]; // eg. true\n    fieldValue?: string; // A value on which to filter the data\n}\n\n/** Mode \"source\" means node are fetched and added systematically on getData() / other modes allow expanding an existing node*/\nexport type AggregationTriggerType = \"source\" | \"onclick\" | \"manual\";\n// TODO: Add support for \"oninsert\" (which might required additional complexity)\n\n/**\n * Extension of the EdgeType interface, specifying which aggregation is used\n * to generate the Edges, and additional options.\n */\nexport interface AggregationEdgeType extends EdgeType {\n    /** Name of the aggregation in the Web Service configuration */\n    aggregation: string;\n    /** If parse is provided, it is used to get the new nodes and edges. If not, the value is automatically converted into nodes, using nodeTypes[1] */\n    parse?: (item: AggregationItem, type: AggregationEdgeType) => AggregationData | undefined; // A cooccurrence aggregation might return 3 nodes and 2 edges\n    /** A parameter to define when the aggregation is fetched and nodes are added */\n    trigger: AggregationTriggerType;\n    /** Default number of items to fetch */\n    count?: number;\n    // TODO: add visibility modes ? (eg. existingNodes)\n}\n\n/**\n * Tests whether an EdgeType is an AggregationEdgeType\n * @param et an edge type\n */\nexport function isAggregationEdgeType(et: EdgeType): et is AggregationEdgeType {\n    return !!(et as AggregationEdgeType).aggregation;\n}\n\n/**\n * The Aggregation Provider generates nodes and edges from aggregations\n * fetched from the server.\n */\nexport class AggregationProvider extends BaseProvider {\n\n    /** Stores how many aggregation items have been fetched from the server for a given aggregation */\n    readonly skips: {[aggregation: string]: number} = {};\n\n    constructor(\n        public override name: string,\n        protected edgeTypes: AggregationEdgeType[],\n        protected query?: Query\n    ) {\n        super(name);\n    }\n\n\n    /**\n     * Fetches the list of aggregations and updates the dataset\n     * @param types list of aggregation edge types\n     * @param sourceNode if provided, will compute the aggregation with a select to compute the aggregation for documents referencing that node\n     */\n    protected fetchAggregations(types: AggregationEdgeType[], sourceNode?: Node) {\n\n        const query = Utils.copy(this.query || this.context.searchService.query);\n        query.action = \"aggregate\";\n        query.aggregations = {};\n        types.forEach(type => query.aggregations[type.aggregation] = {\n            skip: this.skips[type.aggregation+(sourceNode?.id || \"\")],\n            count: type.count || 10\n        });\n\n        if(sourceNode && sourceNode.type.field) {\n            query.addSelect(this.context.exprBuilder.makeExpr(sourceNode.type.field, this.getNodeValue(sourceNode)));\n        }\n\n        Object.keys(query.aggregations).forEach(aggregation => {\n            if(!this.context.appService.getCCAggregation(aggregation)) {\n                // This may not be a mistake if the aggregation belong to a different web service configuration\n                console.warn(`Aggregation '${aggregation}' does not exist in the Query web service configuration`);\n            }\n        });\n\n        this.context.searchService.getResults(query, undefined, {searchInactive: true}).subscribe(\n            results => {\n                this.updateDataset(results.aggregations, types, sourceNode);\n            }\n        );\n\n    }\n\n    /**\n     * Fills the dataset with nodes and edges corresponding to\n     * the given aggregations data, and emits this new dataset.\n     * @param aggregations the list of aggregations to process\n     * @param types the corresponding edge types for each aggregation\n     */\n    protected updateDataset(aggregations: Aggregation[], types: AggregationEdgeType[], sourceNode?: Node) {\n\n        aggregations.forEach(aggregation => {\n            if(aggregation && aggregation.items) {\n                const type = types.find(type => Utils.eqNC(type.aggregation, aggregation.name));\n                if(type) {\n                    this.skips[type.aggregation+(sourceNode?.id || \"\")] += aggregation.items.length;\n                    aggregation.items.forEach(item => this.addAggregationNodes(item, aggregation, type, sourceNode));\n                }\n            }\n        });\n\n        this.provider.next(this.dataset);\n    }\n\n    /**\n     * Create nodes and edges for the given aggregation item and adds them\n     * to the dataset. By default (if the edge does not have a parse() function\n     * and there is no sourceNode), the aggregation is assumed to be a cross-\n     * distribution, with items formatted as \"Bill Gates/Microsoft\".\n     * @param item the aggregation item to process\n     * @param aggregation the aggregation from which the item comes from\n     * @param type the type of the edge corresponding to that aggregation\n     * @param sourceNode if provided, will assume the distribution is 1-dimensional and attach each new node to that source node\n     */\n    addAggregationNodes(item: AggregationItem, aggregation: Aggregation, type: AggregationEdgeType, sourceNode?: Node) {\n\n        let rawData: AggregationData | undefined;\n\n        if(type.parse) {\n            rawData = type.parse(item, type);\n        }\n        else {\n            // Source distributions are at least two-dimensional\n            if(!sourceNode) {\n                if(!item.display){\n                    throw new Error(`Aggregation Item '${item.value}' has no display value`);\n                }\n                // Default parsing, assuming cross-distribution format (\"Apple/Steve Jobs\")\n                const displays = item.display.split(\"/\");\n                const expr = this.context.appService.parseExpr(item.value.toString()) as Expr;\n                const values = expr.operands.map(e => e.value!);\n                if(values.length  0){\n                    const relation = rawData.relations? rawData.relations[i-1] : undefined;\n                    const directed = rawData.directed? rawData.directed[i-1] : false;\n                    data.addEdges(this.createEdge(type, lastNode!, node, rawData.fieldValue, true, {aggregation, aggregationItem: item}, item.count, directed, relation));\n                }\n                lastNode = node;\n            }\n            this.dataset.merge(data);\n        }\n    }\n\n\n    // NetworkProvider interface\n\n    /**\n     * Retrieves the aggregation data synchronously or asynchronously, and updates the dataset with it.\n     */\n    override getData(context: NetworkContext) {\n        this.context = context;\n        this.dataset.clear();\n\n        // Initialize the counts\n        this.edgeTypes.forEach(type => this.skips[type.aggregation] = 0);\n\n        // Fetch the \"source\" aggregation edges\n        const types = this.edgeTypes.filter(type => type.trigger === \"source\");\n\n        if(this.active && types.length > 0) {\n            this.fetchAggregations(types);\n        }\n        else {\n            this.provider.next(this.dataset); // avoid undefined dataset when edge trigger !== source\n        }\n    }\n\n    /**\n     * Called when a node in the network is clicked.\n     * If one edge has an \"onclick\" trigger we potentially expand that\n     * clicked node.\n     * @param node the clicked node\n     */\n    override onNodeClicked(node?: Node) {\n        if(this.active && node) {\n            const types = this.edgeTypes.filter(type => type.trigger === \"onclick\" && type.nodeTypes[0] === node.type);\n            if(types.length > 0) {\n                types.forEach(type => {\n                    if(this.skips[type.aggregation+node.id] === undefined) {\n                        // We need to skip the already connected nodes\n                        const connectedNodes = this.dataset.getConnectedNodes(node.id)\n                            .filter(node => node.type === type.nodeTypes[1]);\n                        this.skips[type.aggregation+node.id] = connectedNodes.length;\n                    }\n                });\n                this.fetchAggregations(types, node);\n            }\n        }\n    }\n\n    /**\n     * Called to generate the list of actions specific to this provider.\n     * We display actions allowing to add additional data for \"source\" edges\n     * (either all the source edges at once, or each individually).\n     */\n    override getProviderActions(): Action[] {\n        const actions = super.getProviderActions();\n        const types = this.edgeTypes.filter(type => type.trigger === \"source\");\n        if(types.length > 0) {\n            actions.push(new Action({\n                icon: \"fas fa-plus-circle fa-fw\",\n                title: \"msg#network.actions.fetchMoreAll\",\n                text: \"msg#network.actions.fetchMoreAllText\",\n                action: () => {\n                    this.fetchAggregations(types);\n                },\n                disabled: !this.active\n            }));\n            actions.push(new Action({\n                separator: true\n            }));\n            types.forEach(type => {\n                const agg =  this.getAggregationLabel(type.aggregation);\n                actions.push(new Action({\n                    icon: \"fas fa-plus-circle fa-fw\",\n                    title: this.context.intlService.formatMessage(\"msg#network.actions.fetchMoreAgg\", {agg}),\n                    text: agg,\n                    action: () => {\n                        this.fetchAggregations([type]);\n                    },\n                    disabled: !this.active\n                }))\n            });\n        }\n        return actions;\n    }\n\n    /**\n     * Called to generate the list of actions displayed for a specific node\n     * when it is clicked on.\n     * We display \"expand\" actions for the edges with a \"manual\" trigger.\n     * @param node The clicked node\n     */\n    override getNodeActions(node: Node): Action[] {\n        const actions = super.getNodeActions(node);\n        if(this.active) {\n            const types = this.edgeTypes.filter(type => type.trigger === \"manual\" && type.nodeTypes[0] === node.type);\n            if(types.length === 1){\n                actions.push(this.createExpandAction(types[0], node));\n            }\n            else if(types.length > 1) {\n                actions.push(new Action({\n                    icon: \"fas fa-plus-circle\",\n                    title: this.context.intlService.formatMessage(\"msg#network.actions.expandNode\", {label: node.label}),\n                    children: types.map(type => this.createExpandAction(type, node, true))\n                }));\n            }\n        }\n        return actions;\n    }\n\n    /**\n     * Convenience method to generate an expand action for a given node\n     * and given edge type.\n     * @param type The edge type for expanding the node\n     * @param node The node we wish to expand\n     * @param withtext Whether or not the action should have text (or just an icon)\n     */\n    protected createExpandAction(type: AggregationEdgeType, node: Node, withtext?: boolean): Action {\n      const agg =  this.getAggregationLabel(type.aggregation);\n      const title = this.context.intlService.formatMessage(\"msg#network.actions.expandNodeWith\", {agg});\n      return new Action({\n            icon: \"fas fa-plus-circle fa-fw\",\n            title: title,\n            text: withtext? title : undefined,\n            action: () => {\n                if(this.skips[type.aggregation+node.id] === undefined) {\n                    // We need to skip the already connected nodes\n                    const connectedNodes = this.dataset.getConnectedNodes(node.id)\n                        .filter(node => node.type === type.nodeTypes[1]);\n                    this.skips[type.aggregation+node.id] = connectedNodes.length;\n                }\n                this.fetchAggregations([type], node);\n            },\n        })\n    }\n\n    protected getAggregationLabel(aggregation: string) {\n      const cc = this.context.appService.getCCAggregation(aggregation);\n      return cc?.column.split('/')\n        .map(col => this.context.appService.getPluralLabel(col))\n        .map(col => this.context.intlService.formatMessage(col))\n        .join('/') || aggregation;\n    }\n\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/AggregationEdge.html":{"url":"interfaces/AggregationEdge.html","title":"interface - AggregationEdge","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  AggregationEdge\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            network/providers/aggregation-provider.ts\n        \n\n\n            \n                Description\n            \n            \n                Extension of the Edge interface, to store the aggregation and\naggregation items from which the edge is constructed\n\n            \n\n            \n                Extends\n            \n            \n                        Edge\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            aggregation\n                                        \n                                \n                                \n                                        \n                                            aggregationItem\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        aggregation\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        aggregation:     Aggregation\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Aggregation\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        aggregationItem\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        aggregationItem:     AggregationItem\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     AggregationItem\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Aggregation, AggregationItem } from '@sinequa/core/web-services';\nimport { Node, Edge, EdgeType, NetworkDataset, NetworkContext } from '../network-models';\nimport { Action } from '@sinequa/components/action';\nimport { Query, Expr } from '@sinequa/core/app-utils';\nimport { Utils } from '@sinequa/core/base';\nimport { BaseProvider } from './base-provider';\n\n/**\n * Extension of the Edge interface, to store the aggregation and\n * aggregation items from which the edge is constructed\n */\nexport interface AggregationEdge extends Edge {\n    aggregationItem: AggregationItem;\n    aggregation: Aggregation;\n}\n\n/**\n * Convenience structure for managing custom metadata types (like\n * cooccurrence entities). AggregationData is returned by the custom\n * parse() function of an AggregationEdgeType.\n */\nexport interface AggregationData {\n    values: string[]; // eg. LARRY PAGE, GOOGLE\n    displays: string[]; // eg. Larry Page, Google\n    relations?: string[]; // eg. Works At\n    directed?: boolean[]; // eg. true\n    fieldValue?: string; // A value on which to filter the data\n}\n\n/** Mode \"source\" means node are fetched and added systematically on getData() / other modes allow expanding an existing node*/\nexport type AggregationTriggerType = \"source\" | \"onclick\" | \"manual\";\n// TODO: Add support for \"oninsert\" (which might required additional complexity)\n\n/**\n * Extension of the EdgeType interface, specifying which aggregation is used\n * to generate the Edges, and additional options.\n */\nexport interface AggregationEdgeType extends EdgeType {\n    /** Name of the aggregation in the Web Service configuration */\n    aggregation: string;\n    /** If parse is provided, it is used to get the new nodes and edges. If not, the value is automatically converted into nodes, using nodeTypes[1] */\n    parse?: (item: AggregationItem, type: AggregationEdgeType) => AggregationData | undefined; // A cooccurrence aggregation might return 3 nodes and 2 edges\n    /** A parameter to define when the aggregation is fetched and nodes are added */\n    trigger: AggregationTriggerType;\n    /** Default number of items to fetch */\n    count?: number;\n    // TODO: add visibility modes ? (eg. existingNodes)\n}\n\n/**\n * Tests whether an EdgeType is an AggregationEdgeType\n * @param et an edge type\n */\nexport function isAggregationEdgeType(et: EdgeType): et is AggregationEdgeType {\n    return !!(et as AggregationEdgeType).aggregation;\n}\n\n/**\n * The Aggregation Provider generates nodes and edges from aggregations\n * fetched from the server.\n */\nexport class AggregationProvider extends BaseProvider {\n\n    /** Stores how many aggregation items have been fetched from the server for a given aggregation */\n    readonly skips: {[aggregation: string]: number} = {};\n\n    constructor(\n        public override name: string,\n        protected edgeTypes: AggregationEdgeType[],\n        protected query?: Query\n    ) {\n        super(name);\n    }\n\n\n    /**\n     * Fetches the list of aggregations and updates the dataset\n     * @param types list of aggregation edge types\n     * @param sourceNode if provided, will compute the aggregation with a select to compute the aggregation for documents referencing that node\n     */\n    protected fetchAggregations(types: AggregationEdgeType[], sourceNode?: Node) {\n\n        const query = Utils.copy(this.query || this.context.searchService.query);\n        query.action = \"aggregate\";\n        query.aggregations = {};\n        types.forEach(type => query.aggregations[type.aggregation] = {\n            skip: this.skips[type.aggregation+(sourceNode?.id || \"\")],\n            count: type.count || 10\n        });\n\n        if(sourceNode && sourceNode.type.field) {\n            query.addSelect(this.context.exprBuilder.makeExpr(sourceNode.type.field, this.getNodeValue(sourceNode)));\n        }\n\n        Object.keys(query.aggregations).forEach(aggregation => {\n            if(!this.context.appService.getCCAggregation(aggregation)) {\n                // This may not be a mistake if the aggregation belong to a different web service configuration\n                console.warn(`Aggregation '${aggregation}' does not exist in the Query web service configuration`);\n            }\n        });\n\n        this.context.searchService.getResults(query, undefined, {searchInactive: true}).subscribe(\n            results => {\n                this.updateDataset(results.aggregations, types, sourceNode);\n            }\n        );\n\n    }\n\n    /**\n     * Fills the dataset with nodes and edges corresponding to\n     * the given aggregations data, and emits this new dataset.\n     * @param aggregations the list of aggregations to process\n     * @param types the corresponding edge types for each aggregation\n     */\n    protected updateDataset(aggregations: Aggregation[], types: AggregationEdgeType[], sourceNode?: Node) {\n\n        aggregations.forEach(aggregation => {\n            if(aggregation && aggregation.items) {\n                const type = types.find(type => Utils.eqNC(type.aggregation, aggregation.name));\n                if(type) {\n                    this.skips[type.aggregation+(sourceNode?.id || \"\")] += aggregation.items.length;\n                    aggregation.items.forEach(item => this.addAggregationNodes(item, aggregation, type, sourceNode));\n                }\n            }\n        });\n\n        this.provider.next(this.dataset);\n    }\n\n    /**\n     * Create nodes and edges for the given aggregation item and adds them\n     * to the dataset. By default (if the edge does not have a parse() function\n     * and there is no sourceNode), the aggregation is assumed to be a cross-\n     * distribution, with items formatted as \"Bill Gates/Microsoft\".\n     * @param item the aggregation item to process\n     * @param aggregation the aggregation from which the item comes from\n     * @param type the type of the edge corresponding to that aggregation\n     * @param sourceNode if provided, will assume the distribution is 1-dimensional and attach each new node to that source node\n     */\n    addAggregationNodes(item: AggregationItem, aggregation: Aggregation, type: AggregationEdgeType, sourceNode?: Node) {\n\n        let rawData: AggregationData | undefined;\n\n        if(type.parse) {\n            rawData = type.parse(item, type);\n        }\n        else {\n            // Source distributions are at least two-dimensional\n            if(!sourceNode) {\n                if(!item.display){\n                    throw new Error(`Aggregation Item '${item.value}' has no display value`);\n                }\n                // Default parsing, assuming cross-distribution format (\"Apple/Steve Jobs\")\n                const displays = item.display.split(\"/\");\n                const expr = this.context.appService.parseExpr(item.value.toString()) as Expr;\n                const values = expr.operands.map(e => e.value!);\n                if(values.length  0){\n                    const relation = rawData.relations? rawData.relations[i-1] : undefined;\n                    const directed = rawData.directed? rawData.directed[i-1] : false;\n                    data.addEdges(this.createEdge(type, lastNode!, node, rawData.fieldValue, true, {aggregation, aggregationItem: item}, item.count, directed, relation));\n                }\n                lastNode = node;\n            }\n            this.dataset.merge(data);\n        }\n    }\n\n\n    // NetworkProvider interface\n\n    /**\n     * Retrieves the aggregation data synchronously or asynchronously, and updates the dataset with it.\n     */\n    override getData(context: NetworkContext) {\n        this.context = context;\n        this.dataset.clear();\n\n        // Initialize the counts\n        this.edgeTypes.forEach(type => this.skips[type.aggregation] = 0);\n\n        // Fetch the \"source\" aggregation edges\n        const types = this.edgeTypes.filter(type => type.trigger === \"source\");\n\n        if(this.active && types.length > 0) {\n            this.fetchAggregations(types);\n        }\n        else {\n            this.provider.next(this.dataset); // avoid undefined dataset when edge trigger !== source\n        }\n    }\n\n    /**\n     * Called when a node in the network is clicked.\n     * If one edge has an \"onclick\" trigger we potentially expand that\n     * clicked node.\n     * @param node the clicked node\n     */\n    override onNodeClicked(node?: Node) {\n        if(this.active && node) {\n            const types = this.edgeTypes.filter(type => type.trigger === \"onclick\" && type.nodeTypes[0] === node.type);\n            if(types.length > 0) {\n                types.forEach(type => {\n                    if(this.skips[type.aggregation+node.id] === undefined) {\n                        // We need to skip the already connected nodes\n                        const connectedNodes = this.dataset.getConnectedNodes(node.id)\n                            .filter(node => node.type === type.nodeTypes[1]);\n                        this.skips[type.aggregation+node.id] = connectedNodes.length;\n                    }\n                });\n                this.fetchAggregations(types, node);\n            }\n        }\n    }\n\n    /**\n     * Called to generate the list of actions specific to this provider.\n     * We display actions allowing to add additional data for \"source\" edges\n     * (either all the source edges at once, or each individually).\n     */\n    override getProviderActions(): Action[] {\n        const actions = super.getProviderActions();\n        const types = this.edgeTypes.filter(type => type.trigger === \"source\");\n        if(types.length > 0) {\n            actions.push(new Action({\n                icon: \"fas fa-plus-circle fa-fw\",\n                title: \"msg#network.actions.fetchMoreAll\",\n                text: \"msg#network.actions.fetchMoreAllText\",\n                action: () => {\n                    this.fetchAggregations(types);\n                },\n                disabled: !this.active\n            }));\n            actions.push(new Action({\n                separator: true\n            }));\n            types.forEach(type => {\n                const agg =  this.getAggregationLabel(type.aggregation);\n                actions.push(new Action({\n                    icon: \"fas fa-plus-circle fa-fw\",\n                    title: this.context.intlService.formatMessage(\"msg#network.actions.fetchMoreAgg\", {agg}),\n                    text: agg,\n                    action: () => {\n                        this.fetchAggregations([type]);\n                    },\n                    disabled: !this.active\n                }))\n            });\n        }\n        return actions;\n    }\n\n    /**\n     * Called to generate the list of actions displayed for a specific node\n     * when it is clicked on.\n     * We display \"expand\" actions for the edges with a \"manual\" trigger.\n     * @param node The clicked node\n     */\n    override getNodeActions(node: Node): Action[] {\n        const actions = super.getNodeActions(node);\n        if(this.active) {\n            const types = this.edgeTypes.filter(type => type.trigger === \"manual\" && type.nodeTypes[0] === node.type);\n            if(types.length === 1){\n                actions.push(this.createExpandAction(types[0], node));\n            }\n            else if(types.length > 1) {\n                actions.push(new Action({\n                    icon: \"fas fa-plus-circle\",\n                    title: this.context.intlService.formatMessage(\"msg#network.actions.expandNode\", {label: node.label}),\n                    children: types.map(type => this.createExpandAction(type, node, true))\n                }));\n            }\n        }\n        return actions;\n    }\n\n    /**\n     * Convenience method to generate an expand action for a given node\n     * and given edge type.\n     * @param type The edge type for expanding the node\n     * @param node The node we wish to expand\n     * @param withtext Whether or not the action should have text (or just an icon)\n     */\n    protected createExpandAction(type: AggregationEdgeType, node: Node, withtext?: boolean): Action {\n      const agg =  this.getAggregationLabel(type.aggregation);\n      const title = this.context.intlService.formatMessage(\"msg#network.actions.expandNodeWith\", {agg});\n      return new Action({\n            icon: \"fas fa-plus-circle fa-fw\",\n            title: title,\n            text: withtext? title : undefined,\n            action: () => {\n                if(this.skips[type.aggregation+node.id] === undefined) {\n                    // We need to skip the already connected nodes\n                    const connectedNodes = this.dataset.getConnectedNodes(node.id)\n                        .filter(node => node.type === type.nodeTypes[1]);\n                    this.skips[type.aggregation+node.id] = connectedNodes.length;\n                }\n                this.fetchAggregations([type], node);\n            },\n        })\n    }\n\n    protected getAggregationLabel(aggregation: string) {\n      const cc = this.context.appService.getCCAggregation(aggregation);\n      return cc?.column.split('/')\n        .map(col => this.context.appService.getPluralLabel(col))\n        .map(col => this.context.intlService.formatMessage(col))\n        .join('/') || aggregation;\n    }\n\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/AggregationEdgeType.html":{"url":"interfaces/AggregationEdgeType.html","title":"interface - AggregationEdgeType","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  AggregationEdgeType\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            network/providers/aggregation-provider.ts\n        \n\n\n            \n                Description\n            \n            \n                Extension of the EdgeType interface, specifying which aggregation is used\nto generate the Edges, and additional options.\n\n            \n\n            \n                Extends\n            \n            \n                        EdgeType\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            aggregation\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            count\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            parse\n                                        \n                                \n                                \n                                        \n                                            trigger\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        aggregation\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        aggregation:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Name of the aggregation in the Web Service configuration\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        count\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        count:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Default number of items to fetch\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        parse\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        parse:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    If parse is provided, it is used to get the new nodes and edges. If not, the value is automatically converted into nodes, using nodeTypes[1]\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        trigger\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        trigger:         AggregationTriggerType\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         AggregationTriggerType\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    A parameter to define when the aggregation is fetched and nodes are added\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { Aggregation, AggregationItem } from '@sinequa/core/web-services';\nimport { Node, Edge, EdgeType, NetworkDataset, NetworkContext } from '../network-models';\nimport { Action } from '@sinequa/components/action';\nimport { Query, Expr } from '@sinequa/core/app-utils';\nimport { Utils } from '@sinequa/core/base';\nimport { BaseProvider } from './base-provider';\n\n/**\n * Extension of the Edge interface, to store the aggregation and\n * aggregation items from which the edge is constructed\n */\nexport interface AggregationEdge extends Edge {\n    aggregationItem: AggregationItem;\n    aggregation: Aggregation;\n}\n\n/**\n * Convenience structure for managing custom metadata types (like\n * cooccurrence entities). AggregationData is returned by the custom\n * parse() function of an AggregationEdgeType.\n */\nexport interface AggregationData {\n    values: string[]; // eg. LARRY PAGE, GOOGLE\n    displays: string[]; // eg. Larry Page, Google\n    relations?: string[]; // eg. Works At\n    directed?: boolean[]; // eg. true\n    fieldValue?: string; // A value on which to filter the data\n}\n\n/** Mode \"source\" means node are fetched and added systematically on getData() / other modes allow expanding an existing node*/\nexport type AggregationTriggerType = \"source\" | \"onclick\" | \"manual\";\n// TODO: Add support for \"oninsert\" (which might required additional complexity)\n\n/**\n * Extension of the EdgeType interface, specifying which aggregation is used\n * to generate the Edges, and additional options.\n */\nexport interface AggregationEdgeType extends EdgeType {\n    /** Name of the aggregation in the Web Service configuration */\n    aggregation: string;\n    /** If parse is provided, it is used to get the new nodes and edges. If not, the value is automatically converted into nodes, using nodeTypes[1] */\n    parse?: (item: AggregationItem, type: AggregationEdgeType) => AggregationData | undefined; // A cooccurrence aggregation might return 3 nodes and 2 edges\n    /** A parameter to define when the aggregation is fetched and nodes are added */\n    trigger: AggregationTriggerType;\n    /** Default number of items to fetch */\n    count?: number;\n    // TODO: add visibility modes ? (eg. existingNodes)\n}\n\n/**\n * Tests whether an EdgeType is an AggregationEdgeType\n * @param et an edge type\n */\nexport function isAggregationEdgeType(et: EdgeType): et is AggregationEdgeType {\n    return !!(et as AggregationEdgeType).aggregation;\n}\n\n/**\n * The Aggregation Provider generates nodes and edges from aggregations\n * fetched from the server.\n */\nexport class AggregationProvider extends BaseProvider {\n\n    /** Stores how many aggregation items have been fetched from the server for a given aggregation */\n    readonly skips: {[aggregation: string]: number} = {};\n\n    constructor(\n        public override name: string,\n        protected edgeTypes: AggregationEdgeType[],\n        protected query?: Query\n    ) {\n        super(name);\n    }\n\n\n    /**\n     * Fetches the list of aggregations and updates the dataset\n     * @param types list of aggregation edge types\n     * @param sourceNode if provided, will compute the aggregation with a select to compute the aggregation for documents referencing that node\n     */\n    protected fetchAggregations(types: AggregationEdgeType[], sourceNode?: Node) {\n\n        const query = Utils.copy(this.query || this.context.searchService.query);\n        query.action = \"aggregate\";\n        query.aggregations = {};\n        types.forEach(type => query.aggregations[type.aggregation] = {\n            skip: this.skips[type.aggregation+(sourceNode?.id || \"\")],\n            count: type.count || 10\n        });\n\n        if(sourceNode && sourceNode.type.field) {\n            query.addSelect(this.context.exprBuilder.makeExpr(sourceNode.type.field, this.getNodeValue(sourceNode)));\n        }\n\n        Object.keys(query.aggregations).forEach(aggregation => {\n            if(!this.context.appService.getCCAggregation(aggregation)) {\n                // This may not be a mistake if the aggregation belong to a different web service configuration\n                console.warn(`Aggregation '${aggregation}' does not exist in the Query web service configuration`);\n            }\n        });\n\n        this.context.searchService.getResults(query, undefined, {searchInactive: true}).subscribe(\n            results => {\n                this.updateDataset(results.aggregations, types, sourceNode);\n            }\n        );\n\n    }\n\n    /**\n     * Fills the dataset with nodes and edges corresponding to\n     * the given aggregations data, and emits this new dataset.\n     * @param aggregations the list of aggregations to process\n     * @param types the corresponding edge types for each aggregation\n     */\n    protected updateDataset(aggregations: Aggregation[], types: AggregationEdgeType[], sourceNode?: Node) {\n\n        aggregations.forEach(aggregation => {\n            if(aggregation && aggregation.items) {\n                const type = types.find(type => Utils.eqNC(type.aggregation, aggregation.name));\n                if(type) {\n                    this.skips[type.aggregation+(sourceNode?.id || \"\")] += aggregation.items.length;\n                    aggregation.items.forEach(item => this.addAggregationNodes(item, aggregation, type, sourceNode));\n                }\n            }\n        });\n\n        this.provider.next(this.dataset);\n    }\n\n    /**\n     * Create nodes and edges for the given aggregation item and adds them\n     * to the dataset. By default (if the edge does not have a parse() function\n     * and there is no sourceNode), the aggregation is assumed to be a cross-\n     * distribution, with items formatted as \"Bill Gates/Microsoft\".\n     * @param item the aggregation item to process\n     * @param aggregation the aggregation from which the item comes from\n     * @param type the type of the edge corresponding to that aggregation\n     * @param sourceNode if provided, will assume the distribution is 1-dimensional and attach each new node to that source node\n     */\n    addAggregationNodes(item: AggregationItem, aggregation: Aggregation, type: AggregationEdgeType, sourceNode?: Node) {\n\n        let rawData: AggregationData | undefined;\n\n        if(type.parse) {\n            rawData = type.parse(item, type);\n        }\n        else {\n            // Source distributions are at least two-dimensional\n            if(!sourceNode) {\n                if(!item.display){\n                    throw new Error(`Aggregation Item '${item.value}' has no display value`);\n                }\n                // Default parsing, assuming cross-distribution format (\"Apple/Steve Jobs\")\n                const displays = item.display.split(\"/\");\n                const expr = this.context.appService.parseExpr(item.value.toString()) as Expr;\n                const values = expr.operands.map(e => e.value!);\n                if(values.length  0){\n                    const relation = rawData.relations? rawData.relations[i-1] : undefined;\n                    const directed = rawData.directed? rawData.directed[i-1] : false;\n                    data.addEdges(this.createEdge(type, lastNode!, node, rawData.fieldValue, true, {aggregation, aggregationItem: item}, item.count, directed, relation));\n                }\n                lastNode = node;\n            }\n            this.dataset.merge(data);\n        }\n    }\n\n\n    // NetworkProvider interface\n\n    /**\n     * Retrieves the aggregation data synchronously or asynchronously, and updates the dataset with it.\n     */\n    override getData(context: NetworkContext) {\n        this.context = context;\n        this.dataset.clear();\n\n        // Initialize the counts\n        this.edgeTypes.forEach(type => this.skips[type.aggregation] = 0);\n\n        // Fetch the \"source\" aggregation edges\n        const types = this.edgeTypes.filter(type => type.trigger === \"source\");\n\n        if(this.active && types.length > 0) {\n            this.fetchAggregations(types);\n        }\n        else {\n            this.provider.next(this.dataset); // avoid undefined dataset when edge trigger !== source\n        }\n    }\n\n    /**\n     * Called when a node in the network is clicked.\n     * If one edge has an \"onclick\" trigger we potentially expand that\n     * clicked node.\n     * @param node the clicked node\n     */\n    override onNodeClicked(node?: Node) {\n        if(this.active && node) {\n            const types = this.edgeTypes.filter(type => type.trigger === \"onclick\" && type.nodeTypes[0] === node.type);\n            if(types.length > 0) {\n                types.forEach(type => {\n                    if(this.skips[type.aggregation+node.id] === undefined) {\n                        // We need to skip the already connected nodes\n                        const connectedNodes = this.dataset.getConnectedNodes(node.id)\n                            .filter(node => node.type === type.nodeTypes[1]);\n                        this.skips[type.aggregation+node.id] = connectedNodes.length;\n                    }\n                });\n                this.fetchAggregations(types, node);\n            }\n        }\n    }\n\n    /**\n     * Called to generate the list of actions specific to this provider.\n     * We display actions allowing to add additional data for \"source\" edges\n     * (either all the source edges at once, or each individually).\n     */\n    override getProviderActions(): Action[] {\n        const actions = super.getProviderActions();\n        const types = this.edgeTypes.filter(type => type.trigger === \"source\");\n        if(types.length > 0) {\n            actions.push(new Action({\n                icon: \"fas fa-plus-circle fa-fw\",\n                title: \"msg#network.actions.fetchMoreAll\",\n                text: \"msg#network.actions.fetchMoreAllText\",\n                action: () => {\n                    this.fetchAggregations(types);\n                },\n                disabled: !this.active\n            }));\n            actions.push(new Action({\n                separator: true\n            }));\n            types.forEach(type => {\n                const agg =  this.getAggregationLabel(type.aggregation);\n                actions.push(new Action({\n                    icon: \"fas fa-plus-circle fa-fw\",\n                    title: this.context.intlService.formatMessage(\"msg#network.actions.fetchMoreAgg\", {agg}),\n                    text: agg,\n                    action: () => {\n                        this.fetchAggregations([type]);\n                    },\n                    disabled: !this.active\n                }))\n            });\n        }\n        return actions;\n    }\n\n    /**\n     * Called to generate the list of actions displayed for a specific node\n     * when it is clicked on.\n     * We display \"expand\" actions for the edges with a \"manual\" trigger.\n     * @param node The clicked node\n     */\n    override getNodeActions(node: Node): Action[] {\n        const actions = super.getNodeActions(node);\n        if(this.active) {\n            const types = this.edgeTypes.filter(type => type.trigger === \"manual\" && type.nodeTypes[0] === node.type);\n            if(types.length === 1){\n                actions.push(this.createExpandAction(types[0], node));\n            }\n            else if(types.length > 1) {\n                actions.push(new Action({\n                    icon: \"fas fa-plus-circle\",\n                    title: this.context.intlService.formatMessage(\"msg#network.actions.expandNode\", {label: node.label}),\n                    children: types.map(type => this.createExpandAction(type, node, true))\n                }));\n            }\n        }\n        return actions;\n    }\n\n    /**\n     * Convenience method to generate an expand action for a given node\n     * and given edge type.\n     * @param type The edge type for expanding the node\n     * @param node The node we wish to expand\n     * @param withtext Whether or not the action should have text (or just an icon)\n     */\n    protected createExpandAction(type: AggregationEdgeType, node: Node, withtext?: boolean): Action {\n      const agg =  this.getAggregationLabel(type.aggregation);\n      const title = this.context.intlService.formatMessage(\"msg#network.actions.expandNodeWith\", {agg});\n      return new Action({\n            icon: \"fas fa-plus-circle fa-fw\",\n            title: title,\n            text: withtext? title : undefined,\n            action: () => {\n                if(this.skips[type.aggregation+node.id] === undefined) {\n                    // We need to skip the already connected nodes\n                    const connectedNodes = this.dataset.getConnectedNodes(node.id)\n                        .filter(node => node.type === type.nodeTypes[1]);\n                    this.skips[type.aggregation+node.id] = connectedNodes.length;\n                }\n                this.fetchAggregations([type], node);\n            },\n        })\n    }\n\n    protected getAggregationLabel(aggregation: string) {\n      const cc = this.context.appService.getCCAggregation(aggregation);\n      return cc?.column.split('/')\n        .map(col => this.context.appService.getPluralLabel(col))\n        .map(col => this.context.intlService.formatMessage(col))\n        .join('/') || aggregation;\n    }\n\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/AggregationProvider.html":{"url":"classes/AggregationProvider.html","title":"class - AggregationProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AggregationProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            network/providers/aggregation-provider.ts\n        \n\n\n            \n                Description\n            \n            \n                The Aggregation Provider generates nodes and edges from aggregations\nfetched from the server.\n\n            \n\n            \n                Extends\n            \n            \n                        BaseProvider\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    \n                                name\n                            \n                            \n                                    Readonly\n                                skips\n                            \n                            \n                                    Public\n                                    Readonly\n                                activateAction\n                            \n                            \n                                    Public\n                                active\n                            \n                            \n                                    Public\n                                context\n                            \n                            \n                                    Public\n                                dataset\n                            \n                            \n                                    Public\n                                    Readonly\n                                EDGESEPARATOR\n                            \n                            \n                                    Public\n                                    Readonly\n                                resetAction\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                addAggregationNodes\n                            \n                            \n                                    \n                                getData\n                            \n                            \n                                    \n                                getNodeActions\n                            \n                            \n                                    \n                                getProviderActions\n                            \n                            \n                                    \n                                onNodeClicked\n                            \n                            \n                                getEdgeActions\n                            \n                            \n                                getProvider\n                            \n                            \n                                onDatasetsMerged\n                            \n                            \n                                onDestroy\n                            \n                            \n                                onEdgeClicked\n                            \n                            \n                                onNodesInserted\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(name: string, edgeTypes: AggregationEdgeType[], query?: Query)\n                    \n                \n                        \n                            \n                                Defined in network/providers/aggregation-provider.ts:65\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        name\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        edgeTypes\n                                                  \n                                                        \n                                                                    AggregationEdgeType[]\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        query\n                                                  \n                                                        \n                                                                        Query\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                        \n                            \n                                Inherited from         BaseProvider\n\n                            \n                        \n                    \n                        \n                                Defined in         BaseProvider:68\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        skips\n                        \n                    \n                \n            \n                \n                    \n                        Type :     literal type\n\n                    \n                \n                \n                    \n                        Default value : {}\n                    \n                \n                    \n                        \n                                Defined in network/providers/aggregation-provider.ts:65\n                        \n                    \n\n            \n                \n                    Stores how many aggregation items have been fetched from the server for a given aggregation\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        activateAction\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Action\n\n                    \n                \n                        \n                            \n                                Inherited from         BaseProvider\n\n                            \n                        \n                    \n                        \n                                Defined in         BaseProvider:21\n\n                        \n                    \n\n            \n                \n                    Action to turn the provider on or off\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        active\n                        \n                    \n                \n            \n                \n                    \n                        Default value : true\n                    \n                \n                        \n                            \n                                Inherited from         BaseProvider\n\n                            \n                        \n                    \n                        \n                                Defined in         BaseProvider:16\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        context\n                        \n                    \n                \n            \n                \n                    \n                        Type :         NetworkContext\n\n                    \n                \n                        \n                            \n                                Inherited from         BaseProvider\n\n                            \n                        \n                    \n                        \n                                Defined in         BaseProvider:25\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        dataset\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new NetworkDataset()\n                    \n                \n                        \n                            \n                                Inherited from         BaseProvider\n\n                            \n                        \n                    \n                        \n                                Defined in         BaseProvider:15\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        EDGESEPARATOR\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : \"~~~EDGE~~~\"\n                    \n                \n                        \n                            \n                                Inherited from         BaseProvider\n\n                            \n                        \n                    \n                        \n                                Defined in         BaseProvider:18\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        resetAction\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Action\n\n                    \n                \n                        \n                            \n                                Inherited from         BaseProvider\n\n                            \n                        \n                    \n                        \n                                Defined in         BaseProvider:23\n\n                        \n                    \n\n            \n                \n                    Action to reset the provider\n\n                \n            \n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        addAggregationNodes\n                        \n                    \n                \n            \n            \n                \naddAggregationNodes(item: AggregationItem, aggregation: Aggregation, type: AggregationEdgeType, sourceNode?: Node)\n                \n            \n\n\n            \n                \n                    Defined in network/providers/aggregation-provider.ts:141\n                \n            \n\n\n            \n                \n                    Create nodes and edges for the given aggregation item and adds them\nto the dataset. By default (if the edge does not have a parse() function\nand there is no sourceNode), the aggregation is assumed to be a cross-\ndistribution, with items formatted as \"Bill Gates/Microsoft\".\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    item\n                                    \n                                            AggregationItem\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the aggregation item to process\n\n                                    \n                                \n                                \n                                    aggregation\n                                    \n                                            Aggregation\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the aggregation from which the item comes from\n\n                                    \n                                \n                                \n                                    type\n                                    \n                                                AggregationEdgeType\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the type of the edge corresponding to that aggregation\n\n                                    \n                                \n                                \n                                    sourceNode\n                                    \n                                                Node\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        if provided, will assume the distribution is 1-dimensional and attach each new node to that source node\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        getData\n                        \n                    \n                \n            \n            \n                \n                    \n                    getData(context: NetworkContext)\n                \n            \n\n\n            \n                \n                    Inherited from         BaseProvider\n\n                \n            \n            \n                \n                        Defined in         BaseProvider:195\n\n                \n            \n\n\n            \n                \n                    Retrieves the aggregation data synchronously or asynchronously, and updates the dataset with it.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                                NetworkContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        getNodeActions\n                        \n                    \n                \n            \n            \n                \n                    \n                    getNodeActions(node: Node)\n                \n            \n\n\n            \n                \n                    Inherited from         BaseProvider\n\n                \n            \n            \n                \n                        Defined in         BaseProvider:279\n\n                \n            \n\n\n            \n                \n                    Called to generate the list of actions displayed for a specific node\nwhen it is clicked on.\nWe display \"expand\" actions for the edges with a \"manual\" trigger.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    node\n                                    \n                                                Node\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The clicked node\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Action[]\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        getProviderActions\n                        \n                    \n                \n            \n            \n                \n                    \n                    getProviderActions()\n                \n            \n\n\n            \n                \n                    Inherited from         BaseProvider\n\n                \n            \n            \n                \n                        Defined in         BaseProvider:241\n\n                \n            \n\n\n            \n                \n                    Called to generate the list of actions specific to this provider.\nWe display actions allowing to add additional data for \"source\" edges\n(either all the source edges at once, or each individually).\n\n\n                    \n                        Returns :     Action[]\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        onNodeClicked\n                        \n                    \n                \n            \n            \n                \n                    \n                    onNodeClicked(node?: Node)\n                \n            \n\n\n            \n                \n                    Inherited from         BaseProvider\n\n                \n            \n            \n                \n                        Defined in         BaseProvider:219\n\n                \n            \n\n\n            \n                \n                    Called when a node in the network is clicked.\nIf one edge has an \"onclick\" trigger we potentially expand that\nclicked node.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    node\n                                    \n                                                Node\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        the clicked node\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getEdgeActions\n                        \n                    \n                \n            \n            \n                \ngetEdgeActions(edge: Edge)\n                \n            \n\n\n            \n                \n                    Inherited from         BaseProvider\n\n                \n            \n            \n                \n                        Defined in         BaseProvider:211\n\n                \n            \n\n\n            \n                \n                    By default the base provider includes an action to filter the search if a clicked\nedge has a \"type.field\" property and a \"fieldValue\" (alternatively, an action\nis created if the 2 adjacent nodes can be filtered, ie they both have a \"field\"\nproperty)\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    edge\n                                    \n                                                Edge\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The clicked edge\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Action[]\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getProvider\n                        \n                    \n                \n            \n            \n                \ngetProvider()\n                \n            \n\n\n            \n                \n                    Inherited from         BaseProvider\n\n                \n            \n            \n                \n                        Defined in         BaseProvider:151\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         Subject\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onDatasetsMerged\n                        \n                    \n                \n            \n            \n                \nonDatasetsMerged(dataset: NetworkDataset)\n                \n            \n\n\n            \n                \n                    Inherited from         BaseProvider\n\n                \n            \n            \n                \n                        Defined in         BaseProvider:159\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dataset\n                                    \n                                                NetworkDataset\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onDestroy\n                        \n                    \n                \n            \n            \n                \nonDestroy()\n                \n            \n\n\n            \n                \n                    Inherited from         BaseProvider\n\n                \n            \n            \n                \n                        Defined in         BaseProvider:245\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onEdgeClicked\n                        \n                    \n                \n            \n            \n                \nonEdgeClicked(edge: Edge | undefined)\n                \n            \n\n\n            \n                \n                    Inherited from         BaseProvider\n\n                \n            \n            \n                \n                        Defined in         BaseProvider:171\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    edge\n                                    \n                                                Edge | undefined\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onNodesInserted\n                        \n                    \n                \n            \n            \n                \nonNodesInserted(nodes: Node[])\n                \n            \n\n\n            \n                \n                    Inherited from         BaseProvider\n\n                \n            \n            \n                \n                        Defined in         BaseProvider:163\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    nodes\n                                    \n                                                Node[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Aggregation, AggregationItem } from '@sinequa/core/web-services';\nimport { Node, Edge, EdgeType, NetworkDataset, NetworkContext } from '../network-models';\nimport { Action } from '@sinequa/components/action';\nimport { Query, Expr } from '@sinequa/core/app-utils';\nimport { Utils } from '@sinequa/core/base';\nimport { BaseProvider } from './base-provider';\n\n/**\n * Extension of the Edge interface, to store the aggregation and\n * aggregation items from which the edge is constructed\n */\nexport interface AggregationEdge extends Edge {\n    aggregationItem: AggregationItem;\n    aggregation: Aggregation;\n}\n\n/**\n * Convenience structure for managing custom metadata types (like\n * cooccurrence entities). AggregationData is returned by the custom\n * parse() function of an AggregationEdgeType.\n */\nexport interface AggregationData {\n    values: string[]; // eg. LARRY PAGE, GOOGLE\n    displays: string[]; // eg. Larry Page, Google\n    relations?: string[]; // eg. Works At\n    directed?: boolean[]; // eg. true\n    fieldValue?: string; // A value on which to filter the data\n}\n\n/** Mode \"source\" means node are fetched and added systematically on getData() / other modes allow expanding an existing node*/\nexport type AggregationTriggerType = \"source\" | \"onclick\" | \"manual\";\n// TODO: Add support for \"oninsert\" (which might required additional complexity)\n\n/**\n * Extension of the EdgeType interface, specifying which aggregation is used\n * to generate the Edges, and additional options.\n */\nexport interface AggregationEdgeType extends EdgeType {\n    /** Name of the aggregation in the Web Service configuration */\n    aggregation: string;\n    /** If parse is provided, it is used to get the new nodes and edges. If not, the value is automatically converted into nodes, using nodeTypes[1] */\n    parse?: (item: AggregationItem, type: AggregationEdgeType) => AggregationData | undefined; // A cooccurrence aggregation might return 3 nodes and 2 edges\n    /** A parameter to define when the aggregation is fetched and nodes are added */\n    trigger: AggregationTriggerType;\n    /** Default number of items to fetch */\n    count?: number;\n    // TODO: add visibility modes ? (eg. existingNodes)\n}\n\n/**\n * Tests whether an EdgeType is an AggregationEdgeType\n * @param et an edge type\n */\nexport function isAggregationEdgeType(et: EdgeType): et is AggregationEdgeType {\n    return !!(et as AggregationEdgeType).aggregation;\n}\n\n/**\n * The Aggregation Provider generates nodes and edges from aggregations\n * fetched from the server.\n */\nexport class AggregationProvider extends BaseProvider {\n\n    /** Stores how many aggregation items have been fetched from the server for a given aggregation */\n    readonly skips: {[aggregation: string]: number} = {};\n\n    constructor(\n        public override name: string,\n        protected edgeTypes: AggregationEdgeType[],\n        protected query?: Query\n    ) {\n        super(name);\n    }\n\n\n    /**\n     * Fetches the list of aggregations and updates the dataset\n     * @param types list of aggregation edge types\n     * @param sourceNode if provided, will compute the aggregation with a select to compute the aggregation for documents referencing that node\n     */\n    protected fetchAggregations(types: AggregationEdgeType[], sourceNode?: Node) {\n\n        const query = Utils.copy(this.query || this.context.searchService.query);\n        query.action = \"aggregate\";\n        query.aggregations = {};\n        types.forEach(type => query.aggregations[type.aggregation] = {\n            skip: this.skips[type.aggregation+(sourceNode?.id || \"\")],\n            count: type.count || 10\n        });\n\n        if(sourceNode && sourceNode.type.field) {\n            query.addSelect(this.context.exprBuilder.makeExpr(sourceNode.type.field, this.getNodeValue(sourceNode)));\n        }\n\n        Object.keys(query.aggregations).forEach(aggregation => {\n            if(!this.context.appService.getCCAggregation(aggregation)) {\n                // This may not be a mistake if the aggregation belong to a different web service configuration\n                console.warn(`Aggregation '${aggregation}' does not exist in the Query web service configuration`);\n            }\n        });\n\n        this.context.searchService.getResults(query, undefined, {searchInactive: true}).subscribe(\n            results => {\n                this.updateDataset(results.aggregations, types, sourceNode);\n            }\n        );\n\n    }\n\n    /**\n     * Fills the dataset with nodes and edges corresponding to\n     * the given aggregations data, and emits this new dataset.\n     * @param aggregations the list of aggregations to process\n     * @param types the corresponding edge types for each aggregation\n     */\n    protected updateDataset(aggregations: Aggregation[], types: AggregationEdgeType[], sourceNode?: Node) {\n\n        aggregations.forEach(aggregation => {\n            if(aggregation && aggregation.items) {\n                const type = types.find(type => Utils.eqNC(type.aggregation, aggregation.name));\n                if(type) {\n                    this.skips[type.aggregation+(sourceNode?.id || \"\")] += aggregation.items.length;\n                    aggregation.items.forEach(item => this.addAggregationNodes(item, aggregation, type, sourceNode));\n                }\n            }\n        });\n\n        this.provider.next(this.dataset);\n    }\n\n    /**\n     * Create nodes and edges for the given aggregation item and adds them\n     * to the dataset. By default (if the edge does not have a parse() function\n     * and there is no sourceNode), the aggregation is assumed to be a cross-\n     * distribution, with items formatted as \"Bill Gates/Microsoft\".\n     * @param item the aggregation item to process\n     * @param aggregation the aggregation from which the item comes from\n     * @param type the type of the edge corresponding to that aggregation\n     * @param sourceNode if provided, will assume the distribution is 1-dimensional and attach each new node to that source node\n     */\n    addAggregationNodes(item: AggregationItem, aggregation: Aggregation, type: AggregationEdgeType, sourceNode?: Node) {\n\n        let rawData: AggregationData | undefined;\n\n        if(type.parse) {\n            rawData = type.parse(item, type);\n        }\n        else {\n            // Source distributions are at least two-dimensional\n            if(!sourceNode) {\n                if(!item.display){\n                    throw new Error(`Aggregation Item '${item.value}' has no display value`);\n                }\n                // Default parsing, assuming cross-distribution format (\"Apple/Steve Jobs\")\n                const displays = item.display.split(\"/\");\n                const expr = this.context.appService.parseExpr(item.value.toString()) as Expr;\n                const values = expr.operands.map(e => e.value!);\n                if(values.length  0){\n                    const relation = rawData.relations? rawData.relations[i-1] : undefined;\n                    const directed = rawData.directed? rawData.directed[i-1] : false;\n                    data.addEdges(this.createEdge(type, lastNode!, node, rawData.fieldValue, true, {aggregation, aggregationItem: item}, item.count, directed, relation));\n                }\n                lastNode = node;\n            }\n            this.dataset.merge(data);\n        }\n    }\n\n\n    // NetworkProvider interface\n\n    /**\n     * Retrieves the aggregation data synchronously or asynchronously, and updates the dataset with it.\n     */\n    override getData(context: NetworkContext) {\n        this.context = context;\n        this.dataset.clear();\n\n        // Initialize the counts\n        this.edgeTypes.forEach(type => this.skips[type.aggregation] = 0);\n\n        // Fetch the \"source\" aggregation edges\n        const types = this.edgeTypes.filter(type => type.trigger === \"source\");\n\n        if(this.active && types.length > 0) {\n            this.fetchAggregations(types);\n        }\n        else {\n            this.provider.next(this.dataset); // avoid undefined dataset when edge trigger !== source\n        }\n    }\n\n    /**\n     * Called when a node in the network is clicked.\n     * If one edge has an \"onclick\" trigger we potentially expand that\n     * clicked node.\n     * @param node the clicked node\n     */\n    override onNodeClicked(node?: Node) {\n        if(this.active && node) {\n            const types = this.edgeTypes.filter(type => type.trigger === \"onclick\" && type.nodeTypes[0] === node.type);\n            if(types.length > 0) {\n                types.forEach(type => {\n                    if(this.skips[type.aggregation+node.id] === undefined) {\n                        // We need to skip the already connected nodes\n                        const connectedNodes = this.dataset.getConnectedNodes(node.id)\n                            .filter(node => node.type === type.nodeTypes[1]);\n                        this.skips[type.aggregation+node.id] = connectedNodes.length;\n                    }\n                });\n                this.fetchAggregations(types, node);\n            }\n        }\n    }\n\n    /**\n     * Called to generate the list of actions specific to this provider.\n     * We display actions allowing to add additional data for \"source\" edges\n     * (either all the source edges at once, or each individually).\n     */\n    override getProviderActions(): Action[] {\n        const actions = super.getProviderActions();\n        const types = this.edgeTypes.filter(type => type.trigger === \"source\");\n        if(types.length > 0) {\n            actions.push(new Action({\n                icon: \"fas fa-plus-circle fa-fw\",\n                title: \"msg#network.actions.fetchMoreAll\",\n                text: \"msg#network.actions.fetchMoreAllText\",\n                action: () => {\n                    this.fetchAggregations(types);\n                },\n                disabled: !this.active\n            }));\n            actions.push(new Action({\n                separator: true\n            }));\n            types.forEach(type => {\n                const agg =  this.getAggregationLabel(type.aggregation);\n                actions.push(new Action({\n                    icon: \"fas fa-plus-circle fa-fw\",\n                    title: this.context.intlService.formatMessage(\"msg#network.actions.fetchMoreAgg\", {agg}),\n                    text: agg,\n                    action: () => {\n                        this.fetchAggregations([type]);\n                    },\n                    disabled: !this.active\n                }))\n            });\n        }\n        return actions;\n    }\n\n    /**\n     * Called to generate the list of actions displayed for a specific node\n     * when it is clicked on.\n     * We display \"expand\" actions for the edges with a \"manual\" trigger.\n     * @param node The clicked node\n     */\n    override getNodeActions(node: Node): Action[] {\n        const actions = super.getNodeActions(node);\n        if(this.active) {\n            const types = this.edgeTypes.filter(type => type.trigger === \"manual\" && type.nodeTypes[0] === node.type);\n            if(types.length === 1){\n                actions.push(this.createExpandAction(types[0], node));\n            }\n            else if(types.length > 1) {\n                actions.push(new Action({\n                    icon: \"fas fa-plus-circle\",\n                    title: this.context.intlService.formatMessage(\"msg#network.actions.expandNode\", {label: node.label}),\n                    children: types.map(type => this.createExpandAction(type, node, true))\n                }));\n            }\n        }\n        return actions;\n    }\n\n    /**\n     * Convenience method to generate an expand action for a given node\n     * and given edge type.\n     * @param type The edge type for expanding the node\n     * @param node The node we wish to expand\n     * @param withtext Whether or not the action should have text (or just an icon)\n     */\n    protected createExpandAction(type: AggregationEdgeType, node: Node, withtext?: boolean): Action {\n      const agg =  this.getAggregationLabel(type.aggregation);\n      const title = this.context.intlService.formatMessage(\"msg#network.actions.expandNodeWith\", {agg});\n      return new Action({\n            icon: \"fas fa-plus-circle fa-fw\",\n            title: title,\n            text: withtext? title : undefined,\n            action: () => {\n                if(this.skips[type.aggregation+node.id] === undefined) {\n                    // We need to skip the already connected nodes\n                    const connectedNodes = this.dataset.getConnectedNodes(node.id)\n                        .filter(node => node.type === type.nodeTypes[1]);\n                    this.skips[type.aggregation+node.id] = connectedNodes.length;\n                }\n                this.fetchAggregations([type], node);\n            },\n        })\n    }\n\n    protected getAggregationLabel(aggregation: string) {\n      const cc = this.context.appService.getCCAggregation(aggregation);\n      return cc?.column.split('/')\n        .map(col => this.context.appService.getPluralLabel(col))\n        .map(col => this.context.intlService.formatMessage(col))\n        .join('/') || aggregation;\n    }\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/AsyncRecordsProvider.html":{"url":"classes/AsyncRecordsProvider.html","title":"class - AsyncRecordsProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AsyncRecordsProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            network/providers/async-records-provider.ts\n        \n\n\n            \n                Description\n            \n            \n                An extension of RecordsProviders where the records are not provided\ndirectly, but instead fetched from the server via a given Query object.\n\n            \n\n            \n                Extends\n            \n            \n                        RecordsProvider\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    \n                                name\n                            \n                            \n                                    Public\n                                    Readonly\n                                activateAction\n                            \n                            \n                                    Public\n                                active\n                            \n                            \n                                    Public\n                                context\n                            \n                            \n                                    Public\n                                dataset\n                            \n                            \n                                    Public\n                                    Readonly\n                                EDGESEPARATOR\n                            \n                            \n                                    Public\n                                    Readonly\n                                resetAction\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                getData\n                            \n                            \n                                    Public\n                                setQuery\n                            \n                            \n                                    \n                                getNodeActions\n                            \n                            \n                                    \n                                getProviderActions\n                            \n                            \n                                    \n                                onDatasetsMerged\n                            \n                            \n                                    \n                                onNodeClicked\n                            \n                            \n                                getEdgeActions\n                            \n                            \n                                getProvider\n                            \n                            \n                                onDestroy\n                            \n                            \n                                onEdgeClicked\n                            \n                            \n                                onNodesInserted\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(name: string, nodeType: NodeType, edgeTypes: StructuralEdgeType[], query: Query, hideRecordNode)\n                    \n                \n                        \n                            \n                                Defined in network/providers/async-records-provider.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        name\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        nodeType\n                                                  \n                                                        \n                                                                        NodeType\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        edgeTypes\n                                                  \n                                                        \n                                                                    StructuralEdgeType[]\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        query\n                                                  \n                                                        \n                                                                        Query\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        hideRecordNode\n                                                  \n                                                        \n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                        \n                            \n                                Inherited from         BaseProvider\n\n                            \n                        \n                    \n                        \n                                Defined in         BaseProvider:13\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        activateAction\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Action\n\n                    \n                \n                        \n                            \n                                Inherited from         BaseProvider\n\n                            \n                        \n                    \n                        \n                                Defined in         BaseProvider:21\n\n                        \n                    \n\n            \n                \n                    Action to turn the provider on or off\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        active\n                        \n                    \n                \n            \n                \n                    \n                        Default value : true\n                    \n                \n                        \n                            \n                                Inherited from         BaseProvider\n\n                            \n                        \n                    \n                        \n                                Defined in         BaseProvider:16\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        context\n                        \n                    \n                \n            \n                \n                    \n                        Type :         NetworkContext\n\n                    \n                \n                        \n                            \n                                Inherited from         BaseProvider\n\n                            \n                        \n                    \n                        \n                                Defined in         BaseProvider:25\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        dataset\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new NetworkDataset()\n                    \n                \n                        \n                            \n                                Inherited from         BaseProvider\n\n                            \n                        \n                    \n                        \n                                Defined in         BaseProvider:15\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        EDGESEPARATOR\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : \"~~~EDGE~~~\"\n                    \n                \n                        \n                            \n                                Inherited from         BaseProvider\n\n                            \n                        \n                    \n                        \n                                Defined in         BaseProvider:18\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        resetAction\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Action\n\n                    \n                \n                        \n                            \n                                Inherited from         BaseProvider\n\n                            \n                        \n                    \n                        \n                                Defined in         BaseProvider:23\n\n                        \n                    \n\n            \n                \n                    Action to reset the provider\n\n                \n            \n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        getData\n                        \n                    \n                \n            \n            \n                \n                    \n                    getData(context: NetworkContext)\n                \n            \n\n\n            \n                \n                    Inherited from         BaseProvider\n\n                \n            \n            \n                \n                        Defined in         BaseProvider:38\n\n                \n            \n\n\n            \n                \n                    Updates the dataset after an asynchronous call to retrieve the records.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                                NetworkContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        setQuery\n                        \n                    \n                \n            \n            \n                \n                    \n                    setQuery(query: Query)\n                \n            \n\n\n            \n                \n                    Defined in network/providers/async-records-provider.ts:28\n                \n            \n\n\n            \n                \n                    Sets a new query to asynchronous records providers.\nIt will be used on the next call to getData()\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    query\n                                    \n                                                Query\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The query object we want to use to fetch records\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        getNodeActions\n                        \n                    \n                \n            \n            \n                \n                    \n                    getNodeActions(node: Node)\n                \n            \n\n\n            \n                \n                    Inherited from         BaseProvider\n\n                \n            \n            \n                \n                        Defined in         BaseProvider:340\n\n                \n            \n\n\n            \n                \n                    Creates actions for expanding and/or collapsing a record node that was clicked.\nexpanding and collapsing will act on the visibility of the structural edges\nattached to this node.\nBoth actions might be displayed at the same time, if the node is in an intermediate\nstate.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    node\n                                    \n                                                Node\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Action[]\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        getProviderActions\n                        \n                    \n                \n            \n            \n                \n                    \n                    getProviderActions()\n                \n            \n\n\n            \n                \n                    Inherited from         BaseProvider\n\n                \n            \n            \n                \n                        Defined in         BaseProvider:328\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     Action[]\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        onDatasetsMerged\n                        \n                    \n                \n            \n            \n                \n                    \n                    onDatasetsMerged(dataset: NetworkDataset)\n                \n            \n\n\n            \n                \n                    Inherited from         BaseProvider\n\n                \n            \n            \n                \n                        Defined in         BaseProvider:278\n\n                \n            \n\n\n            \n                \n                    This function adjusts the visibility of nodes for the visibility\ntype \"existingnode\", so that nodes with only one neighbor (post-merge)\nare collapsed.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    dataset\n                                    \n                                                NetworkDataset\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The dataset resulting of the merge of all the datasets\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        onNodeClicked\n                        \n                    \n                \n            \n            \n                \n                    \n                    onNodeClicked(node?: Node)\n                \n            \n\n\n            \n                \n                    Inherited from         BaseProvider\n\n                \n            \n            \n                \n                        Defined in         BaseProvider:305\n\n                \n            \n\n\n            \n                \n                    Adjust visibility of nodes and edges, for structural edges with\ntype.trigger = onclick. These nodes will only be shown once their\nrecord node is clicked on.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    node\n                                    \n                                                Node\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        A node that was clicked\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getEdgeActions\n                        \n                    \n                \n            \n            \n                \ngetEdgeActions(edge: Edge)\n                \n            \n\n\n            \n                \n                    Inherited from         BaseProvider\n\n                \n            \n            \n                \n                        Defined in         BaseProvider:211\n\n                \n            \n\n\n            \n                \n                    By default the base provider includes an action to filter the search if a clicked\nedge has a \"type.field\" property and a \"fieldValue\" (alternatively, an action\nis created if the 2 adjacent nodes can be filtered, ie they both have a \"field\"\nproperty)\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    edge\n                                    \n                                                Edge\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The clicked edge\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Action[]\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getProvider\n                        \n                    \n                \n            \n            \n                \ngetProvider()\n                \n            \n\n\n            \n                \n                    Inherited from         BaseProvider\n\n                \n            \n            \n                \n                        Defined in         BaseProvider:151\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         Subject\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onDestroy\n                        \n                    \n                \n            \n            \n                \nonDestroy()\n                \n            \n\n\n            \n                \n                    Inherited from         BaseProvider\n\n                \n            \n            \n                \n                        Defined in         BaseProvider:245\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onEdgeClicked\n                        \n                    \n                \n            \n            \n                \nonEdgeClicked(edge: Edge | undefined)\n                \n            \n\n\n            \n                \n                    Inherited from         BaseProvider\n\n                \n            \n            \n                \n                        Defined in         BaseProvider:171\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    edge\n                                    \n                                                Edge | undefined\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onNodesInserted\n                        \n                    \n                \n            \n            \n                \nonNodesInserted(nodes: Node[])\n                \n            \n\n\n            \n                \n                    Inherited from         BaseProvider\n\n                \n            \n            \n                \n                        Defined in         BaseProvider:163\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    nodes\n                                    \n                                                Node[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Query } from '@sinequa/core/app-utils';\nimport { NodeType, NetworkContext } from '../network-models';\nimport { RecordsProvider, StructuralEdgeType } from './records-provider';\n\n\n/**\n * An extension of RecordsProviders where the records are not provided\n * directly, but instead fetched from the server via a given Query object.\n */\nexport class AsyncRecordsProvider extends RecordsProvider {\n\n    constructor(\n        public override name: string,\n        protected override nodeType: NodeType,\n        protected override edgeTypes: StructuralEdgeType[],\n        protected query: Query,\n        protected override hideRecordNode = false\n    ){\n        super(name, nodeType, edgeTypes, [], hideRecordNode);\n    }\n\n\n    /**\n     * Sets a new query to asynchronous records providers.\n     * It will be used on the next call to getData()\n     * @param query The query object we want to use to fetch records\n     */\n    public setQuery(query: Query) {\n        this.query = query;\n    }\n\n\n    // NetworkProvider interface\n\n    /**\n     * Updates the dataset after an asynchronous call to retrieve the records.\n     */\n    override getData(context: NetworkContext) {\n        this.context = context;\n        // Query mode\n        this.context.searchService.getResults(this.query, undefined, {searchInactive: true})\n            .subscribe(results => {\n                this.updateDataset(results.records);\n                this.provider.next(this.dataset);\n            });\n    }\n\n}\n    \n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/BaseProvider.html":{"url":"classes/BaseProvider.html","title":"class - BaseProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  BaseProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            network/providers/base-provider.ts\n        \n\n\n            \n                Description\n            \n            \n                Base implementation of the NetworkProvider interface with convenience\nmethods to create nodes and edges, and default features which should apply\nto all providers.\n\n            \n\n\n            \n                Implements\n            \n            \n                            NetworkProvider\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Readonly\n                                activateAction\n                            \n                            \n                                    Public\n                                active\n                            \n                            \n                                    Public\n                                context\n                            \n                            \n                                    Public\n                                dataset\n                            \n                            \n                                    Public\n                                    Readonly\n                                EDGESEPARATOR\n                            \n                            \n                                    Public\n                                name\n                            \n                            \n                                    Public\n                                    Readonly\n                                resetAction\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getData\n                            \n                            \n                                getEdgeActions\n                            \n                            \n                                getNodeActions\n                            \n                            \n                                getProvider\n                            \n                            \n                                getProviderActions\n                            \n                            \n                                onDatasetsMerged\n                            \n                            \n                                onDestroy\n                            \n                            \n                                onEdgeClicked\n                            \n                            \n                                onNodeClicked\n                            \n                            \n                                onNodesInserted\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(name: string)\n                    \n                \n                        \n                            \n                                Defined in network/providers/base-provider.ts:25\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        name\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        activateAction\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Action\n\n                    \n                \n                    \n                        \n                                Defined in network/providers/base-provider.ts:21\n                        \n                    \n\n            \n                \n                    Action to turn the provider on or off\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        active\n                        \n                    \n                \n            \n                \n                    \n                        Default value : true\n                    \n                \n                    \n                        \n                                Defined in network/providers/base-provider.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        context\n                        \n                    \n                \n            \n                \n                    \n                        Type :         NetworkContext\n\n                    \n                \n                    \n                        \n                                Defined in network/providers/base-provider.ts:25\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        dataset\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new NetworkDataset()\n                    \n                \n                    \n                        \n                                Defined in network/providers/base-provider.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        EDGESEPARATOR\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : \"~~~EDGE~~~\"\n                    \n                \n                    \n                        \n                                Defined in network/providers/base-provider.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in network/providers/base-provider.ts:28\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        resetAction\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Action\n\n                    \n                \n                    \n                        \n                                Defined in network/providers/base-provider.ts:23\n                        \n                    \n\n            \n                \n                    Action to reset the provider\n\n                \n            \n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getData\n                        \n                    \n                \n            \n            \n                \ngetData(context: NetworkContext)\n                \n            \n\n\n            \n                \n                    Defined in network/providers/base-provider.ts:155\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                                NetworkContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getEdgeActions\n                        \n                    \n                \n            \n            \n                \ngetEdgeActions(edge: Edge)\n                \n            \n\n\n            \n                \n                    Defined in network/providers/base-provider.ts:211\n                \n            \n\n\n            \n                \n                    By default the base provider includes an action to filter the search if a clicked\nedge has a \"type.field\" property and a \"fieldValue\" (alternatively, an action\nis created if the 2 adjacent nodes can be filtered, ie they both have a \"field\"\nproperty)\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    edge\n                                    \n                                                Edge\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The clicked edge\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Action[]\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getNodeActions\n                        \n                    \n                \n            \n            \n                \ngetNodeActions(node: Node)\n                \n            \n\n\n            \n                \n                    Defined in network/providers/base-provider.ts:188\n                \n            \n\n\n            \n                \n                    By default the base provider includes an action to filter the search if a clicked\nnode has a \"field\" property\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    node\n                                    \n                                                Node\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The clicked node\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Action[]\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getProvider\n                        \n                    \n                \n            \n            \n                \ngetProvider()\n                \n            \n\n\n            \n                \n                    Defined in network/providers/base-provider.ts:151\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         Subject\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getProviderActions\n                        \n                    \n                \n            \n            \n                \ngetProviderActions()\n                \n            \n\n\n            \n                \n                    Defined in network/providers/base-provider.ts:179\n                \n            \n\n\n            \n                \n                    By default, the base provider includes an action to turn the provider\non or off, and an action to reset the data from this provider\n\n\n                    \n                        Returns :     Action[]\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onDatasetsMerged\n                        \n                    \n                \n            \n            \n                \nonDatasetsMerged(dataset: NetworkDataset)\n                \n            \n\n\n            \n                \n                    Defined in network/providers/base-provider.ts:159\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dataset\n                                    \n                                                NetworkDataset\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onDestroy\n                        \n                    \n                \n            \n            \n                \nonDestroy()\n                \n            \n\n\n            \n                \n                    Defined in network/providers/base-provider.ts:245\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onEdgeClicked\n                        \n                    \n                \n            \n            \n                \nonEdgeClicked(edge: Edge | undefined)\n                \n            \n\n\n            \n                \n                    Defined in network/providers/base-provider.ts:171\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    edge\n                                    \n                                                Edge | undefined\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onNodeClicked\n                        \n                    \n                \n            \n            \n                \nonNodeClicked(node: Node | undefined)\n                \n            \n\n\n            \n                \n                    Defined in network/providers/base-provider.ts:167\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    node\n                                    \n                                                Node | undefined\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onNodesInserted\n                        \n                    \n                \n            \n            \n                \nonNodesInserted(nodes: Node[])\n                \n            \n\n\n            \n                \n                    Defined in network/providers/base-provider.ts:163\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    nodes\n                                    \n                                                Node[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Utils } from '@sinequa/core/base';\nimport { Node, Edge, NodeType, EdgeType, NetworkProvider, NetworkDataset, NetworkContext} from '../network-models';\nimport { Subject } from 'rxjs';\nimport { Action } from '@sinequa/components/action';\n\n\n/**\n * Base implementation of the NetworkProvider interface with convenience\n * methods to create nodes and edges, and default features which should apply\n * to all providers.\n */\nexport class BaseProvider implements NetworkProvider {\n\n    protected readonly provider = new Subject();\n    public dataset = new NetworkDataset();\n    public active = true;\n\n    public readonly EDGESEPARATOR = \"~~~EDGE~~~\";\n\n    /** Action to turn the provider on or off */\n    public readonly activateAction: Action;\n    /** Action to reset the provider */\n    public readonly resetAction: Action;\n\n    public context: NetworkContext;\n\n    constructor(\n        public name: string\n    ) {\n        this.activateAction = new Action({\n            icon: this.active? \"fas fa-toggle-on fa-fw\" : \"fas fa-toggle-off fa-fw\",\n            text: this.active? \"msg#network.actions.active\" : \"msg#network.actions.inactive\",\n            title: \"msg#network.actions.toggle\",\n            action: (action: Action) => {\n                this.active = !this.active\n                action.icon = this.active? \"fas fa-toggle-on fa-fw\" : \"fas fa-toggle-off fa-fw\";\n                action.text = this.active? \"msg#network.actions.active\" : \"msg#network.actions.inactive\";\n                this.getData(this.context);\n            }\n        });\n        this.resetAction = new Action({\n            icon: \"fas fa-trash-alt fa-fw\",\n            text: \"msg#network.actions.reset\",\n            title: \"msg#network.actions.resetTitle\",\n            action: () => {\n                this.dataset.clear();\n                this.getData(this.context);\n            }\n        });\n    }\n\n    /** Returns a standard ID for an edge between two given nodes */\n    protected getEdgeId(node1: Node, node2: Node): string {\n        return node1.id + this.EDGESEPARATOR + node2.id;\n    }\n    \n    /** Returns a standard ID for a node with a given type and \"value\" */\n    protected getNodeId(type: NodeType, value: string): string {\n        return `${type.name}:${value}`;\n    }\n\n    /** Retrieves the \"value\" of the node from its ID */\n    protected getNodeValue(node: Node): string {\n        return node.id.substr(node.type.name.length+1);\n    }\n\n    /**\n     * Creates a new Node object\n     * @param type The NodeType of the node\n     * @param value The \"value\" of the node (eg. \"BILL GATES\")\n     * @param label (default: display = value) The \"display value\" of the node (eg. \"Bill Gates\")\n     * @param visible (default: true) Whether the node should be visible or not\n     * @param customProps (default: {}) Custom properties to add to the node object\n     * @param count (default: 1) A \"count\" property that can reflect the \"size\" or \"importance\" of the node in the network (note that the count property accumulates when nodes are merged)\n     */\n    protected createNode(type: NodeType, value: string, label?: string, visible = true, customProps = {}, count = 1): Node {\n        // Apply formatter if any\n        if(type.field) {\n            const col = this.context.appService.getColumn(type.field);\n            if(col?.formatter) {\n                label = this.context.appService.formatService.formatFieldValue({value, display: label}, col);\n            }\n        }\n        // Create node\n        const node: Node = {\n            id: this.getNodeId(type, value),\n            label: label || value,\n            type,\n            provider: this,\n            visible,\n            count,\n            context: this.context\n        }\n        Utils.extend(node, customProps);\n        let options;\n        if(typeof type.nodeOptions === \"function\") {\n            options = type.nodeOptions(node, type);\n        }\n        else {\n            options = type.nodeOptions;\n        }\n        return Utils.extend(node, options);\n    }\n    \n    /**\n     * Creates a new Edge object\n     * @param type The EdgeType of that Edge\n     * @param fromNode The \"from\" Node object to which this edge is attached\n     * @param toNode The \"to\" Node object to which this edge is attached\n     * @param fieldValue (default: undefined) An optional value, which, if provided, allows to filter the search with a select (\"type.field = fieldValue\")\n     * @param visible (default: true) Whether the edge should be visible or not\n     * @param customProps (default: {}) Custom properties to add to this edge\n     * @param count (default: 1) A \"count\" property that can reflect the \"size\" or \"importance\" of the edge in the network (note that the count property accumulates when edges are merged)\n     * @param directed (default: false) Whether the edge is directed or undirected. If true, an arrow is drawn on the edge.\n     * @param relation (default: undefined) If provided, the \"relation\" is a label displayed in the middle of the edge\n     */\n    protected createEdge(type: EdgeType, fromNode: Node, toNode: Node, fieldValue: string | undefined = undefined, visible = true, customProps = {}, count = 1, directed = false, relation?: string): Edge {\n        const edge: Edge = {\n            id: this.getEdgeId(fromNode, toNode),\n            from: fromNode.id,\n            to: toNode.id,\n            fieldValue,\n            type,\n            visible,\n            count,\n            provider: this,\n            context: this.context\n        }\n        Utils.extend(edge, customProps);\n        if(directed) {\n            edge[\"arrows\"] = {middle: {scaleFactor: 0.3, enabled: true}};\n        }\n        if(relation) {\n            edge[\"label\"] = relation;\n            edge[\"labels\"] = [relation];\n            edge[\"font\"] = {size: 5, color: \"#808080\"};            \n        }\n        let options: {[key: string]: any};\n        if(typeof type.edgeOptions === \"function\") {\n            options = type.edgeOptions([fromNode, toNode], edge, type);\n        }\n        else {\n            options = type.edgeOptions;\n        }\n        return Utils.extend(edge, options);\n    }\n    \n\n    // Implementation of the NetworkProvider interface\n\n    getProvider(): Subject {\n        return this.provider;\n    }\n\n    getData(context: NetworkContext) {\n        this.context = context;\n    }\n\n    onDatasetsMerged(dataset: NetworkDataset) {\n        \n    }\n\n    onNodesInserted(nodes: Node[]) {\n        \n    }\n    \n    onNodeClicked(node: Node | undefined) {\n        \n    }\n\n    onEdgeClicked(edge: Edge | undefined) {\n        \n    }\n\n    /**\n     * By default, the base provider includes an action to turn the provider\n     * on or off, and an action to reset the data from this provider\n     */\n    getProviderActions(): Action[] {\n        return [this.activateAction, this.resetAction];\n    }\n\n    /**\n     * By default the base provider includes an action to filter the search if a clicked\n     * node has a \"field\" property\n     * @param node The clicked node\n     */\n    getNodeActions(node: Node): Action[] {\n        const actions: Action[] = []\n        if(this.active && node.provider === this && node.type.field) {\n            actions.push(new Action({\n                icon: \"fas fa-filter\",\n                title: this.context.intlService.formatMessage(\"msg#network.actions.filterSearch\", {label: node.label}),\n                action: () => {\n                    const expr = this.context.exprBuilder.makeExpr(node.type.field!, this.getNodeValue(node), node.label);\n                    node.context.searchService.query.addSelect(expr, node.context.name);\n                    node.context.searchService.search();\n                }\n            }));\n        }\n        return actions;\n    }\n\n    /**\n     * By default the base provider includes an action to filter the search if a clicked\n     * edge has a \"type.field\" property and a \"fieldValue\" (alternatively, an action\n     * is created if the 2 adjacent nodes can be filtered, ie they both have a \"field\"\n     * property)\n     * @param edge The clicked edge\n     */\n    getEdgeActions(edge: Edge): Action[] {\n        const actions: Action[] = [];\n        const nodeFrom = edge.context.nodes.get(edge.from);\n        const nodeTo = edge.context.nodes.get(edge.to);\n        if(this.active && edge.provider === this) {\n            if(edge.type.field && edge.fieldValue) {\n                actions.push(new Action({\n                    icon: \"fas fa-filter\",\n                    title: this.context.intlService.formatMessage(\"msg#network.actions.filterSearch\", {label: edge.fieldValue}),\n                    action: () => {\n                        const expr = this.context.exprBuilder.makeExpr(edge.type.field!, edge.fieldValue!);\n                        edge.context.searchService.query.addSelect(expr, edge.context.name);\n                        edge.context.searchService.search();\n                    }\n                }));\n            }\n            else if(nodeFrom && nodeTo && nodeFrom.type.field && nodeTo.type.field) {\n                actions.push(new Action({\n                    icon: \"fas fa-filter\",\n                    title: this.context.intlService.formatMessage(\"msg#network.actions.filterSearch2\", {label1: nodeFrom.label, label2: nodeTo.label}),\n                    action: () => {\n                        const exprFrom = this.context.exprBuilder.makeExpr(nodeFrom.type.field!, this.getNodeValue(nodeFrom), nodeFrom.label);\n                        const exprTo = this.context.exprBuilder.makeExpr(nodeTo.type.field!, this.getNodeValue(nodeTo), nodeTo.label);\n                        const expr = this.context.exprBuilder.concatAndExpr([exprFrom, exprTo]);\n                        edge.context.searchService.query.addSelect(expr, edge.context.name);\n                        edge.context.searchService.search();\n                    }\n                }));\n            }\n            \n        }\n        return actions;\n    }\n\n    onDestroy() {\n        \n    }\n\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/BsEdgeInfoCard.html":{"url":"components/BsEdgeInfoCard.html","title":"component - BsEdgeInfoCard","body":"\n                   \n\n\n\n\n\n  Components\n  \n  BsEdgeInfoCard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    network/edge-info-card.component.ts\n\n\n\n\n\n    \n        Implements\n    \n    \n                    OnChanges\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                sq-edge-info-card\n            \n\n\n            \n                styles\n                \n.card {\n    top: 5px;\n    left: 0;\n    right: 0;\n    width: 80%;\n}\n.circular-image {\n    width: 1.5em;\n    height: 1.5em;\n    border-radius: 50%;\n    object-fit: cover;\n}\n    \n            \n\n\n            \n                templateUrl\n                edge-info-card.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                closed\n                            \n                            \n                                expanded\n                            \n                            \n                                fromNode\n                            \n                            \n                                toNode\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                focusNode\n                            \n                            \n                                ngOnChanges\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                edge\n                            \n                        \n                    \n                \n\n\n\n\n        \n    \n\n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        edge\n                    \n                \n                \n                    \n                        Type :         Edge\n\n                    \n                \n                        \n                            \n                                    Defined in network/edge-info-card.component.ts:24\n                            \n                        \n            \n        \n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        focusNode\n                        \n                    \n                \n            \n            \n                \nfocusNode(node: Node)\n                \n            \n\n\n            \n                \n                    Defined in network/edge-info-card.component.ts:40\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    node\n                                    \n                                                Node\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnChanges\n                        \n                    \n                \n            \n            \n                \nngOnChanges()\n                \n            \n\n\n            \n                \n                    Defined in network/edge-info-card.component.ts:32\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        closed\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in network/edge-info-card.component.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        expanded\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in network/edge-info-card.component.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        fromNode\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Node\n\n                    \n                \n                    \n                        \n                                Defined in network/edge-info-card.component.ts:29\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        toNode\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Node\n\n                    \n                \n                    \n                        \n                                Defined in network/edge-info-card.component.ts:30\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n    \n        import { Component, Input, OnChanges } from \"@angular/core\";\nimport { Node, Edge } from './network-models';\n\n\n@Component({\n    selector: \"sq-edge-info-card\",\n    templateUrl: \"edge-info-card.component.html\",\n    styles: [`\n.card {\n    top: 5px;\n    left: 0;\n    right: 0;\n    width: 80%;\n}\n.circular-image {\n    width: 1.5em;\n    height: 1.5em;\n    border-radius: 50%;\n    object-fit: cover;\n}\n    `]\n})\nexport class BsEdgeInfoCard implements OnChanges {\n    @Input() edge: Edge;\n\n    closed: boolean;\n    expanded: boolean;\n\n    fromNode: Node;\n    toNode: Node;\n\n    ngOnChanges() {\n        this.closed = false;\n        this.expanded = false;\n\n        this.fromNode = this.edge.context.nodes.get(this.edge.from) as Node;\n        this.toNode = this.edge.context.nodes.get(this.edge.to) as Node;\n    }\n\n    focusNode(node: Node) {\n        // Hack to gain access to the network instance (networkService does not have the focus() method)\n        const networkInstance = node.context.networkService['networks'][node.context.name];\n        networkInstance.focus(node.id, {animation: true}); // Move the view to this node with animation\n        networkInstance.selectNodes([node.id], true); // Warning: does not trigger events...\n        node.context.select(node, undefined); // Select the node to update info cards, actions\n        return false;\n    }\n}\n    \n\n    \n        \n    \n        \n            \n            -\n            \n\n            \n                \n            \n            \n                \n            \n        \n        \n            \n                {{ 'msg#network.infocards.count' | sqMessage }}:  {{edge.count}}\n                {{ 'msg#network.infocards.aggregation' | sqMessage }}:  {{edge['aggregation'].name}}\n                {{ 'msg#network.infocards.record' | sqMessage }}:  {{edge['record']['title']}}\n            \n        \n    \n\n\n\n    \n    {{node['icon']['code']}}\n    {{node.label}}\n     0\" class=\"me-2 text-muted\" title=\"{{ 'msg#network.infocards.count' | sqMessage }}\">({{node.count}})\n\n    \n\n    \n            \n.card {\n    top: 5px;\n    left: 0;\n    right: 0;\n    width: 80%;\n}\n.circular-image {\n    width: 1.5em;\n    height: 1.5em;\n    border-radius: 50%;\n    object-fit: cover;\n}\n    \n\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '                                    -                                                                                                                                        {{ \\'msg#network.infocards.count\\' | sqMessage }}:  {{edge.count}}                {{ \\'msg#network.infocards.aggregation\\' | sqMessage }}:  {{edge[\\'aggregation\\'].name}}                {{ \\'msg#network.infocards.record\\' | sqMessage }}:  {{edge[\\'record\\'][\\'title\\']}}                                {{node[\\'icon\\'][\\'code\\']}}    {{node.label}}     0\" class=\"me-2 text-muted\" title=\"{{ \\'msg#network.infocards.count\\' | sqMessage }}\">({{node.count}})'\n    var COMPONENTS = [{'name': 'AgGridViewComponent', 'selector': 'sq-ag-grid-view'},{'name': 'BsEdgeInfoCard', 'selector': 'sq-edge-info-card'},{'name': 'BsFacetDate', 'selector': 'sq-facet-date'},{'name': 'BsFacetHeatmapComponent', 'selector': 'sq-facet-heatmap'},{'name': 'BsFacetTimelineComponent', 'selector': 'sq-facet-timeline'},{'name': 'BsHeatmapComponent', 'selector': 'sq-heatmap'},{'name': 'BsNodeInfoCard', 'selector': 'sq-node-info-card'},{'name': 'BsResultsHeatmapView', 'selector': 'sq-results-heatmap-view'},{'name': 'BsTimelineComponent', 'selector': 'sq-timeline'},{'name': 'BsTooltipComponent', 'selector': 'sq-tooltip'},{'name': 'DataModalComponent', 'selector': 'sq-data-modal'},{'name': 'FacetNgxChart', 'selector': 'sq-facet-ngx-chart'},{'name': 'FacetWrapperComponent', 'selector': 'facet-wrapper'},{'name': 'FusionChart', 'selector': 'sq-fusion-chart'},{'name': 'MapComponent', 'selector': 'sq-googlemaps'},{'name': 'MoneyCloudComponent', 'selector': 'sq-money-cloud'},{'name': 'MoneyTimelineComponent', 'selector': 'sq-money-timeline'},{'name': 'NetworkComponent', 'selector': 'sq-network'},{'name': 'NgxChart', 'selector': 'sq-ngx-chart'},{'name': 'ResultTimeline', 'selector': 'sq-result-timeline'},{'name': 'TimelineLegendComponent', 'selector': 'sq-timeline-legend'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'BsEdgeInfoCard'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/BsFacetDate.html":{"url":"components/BsFacetDate.html","title":"component - BsFacetDate","body":"\n                   \n\n\n\n\n\n  Components\n  \n  BsFacetDate\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    timeline/bootstrap/facet-date.ts\n\n\n\n\n    \n        Extends\n    \n    \n            AbstractFacet\n    \n\n    \n        Implements\n    \n    \n                    FacetDateParams\n                    OnInit\n                    OnChanges\n                    OnDestroy\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                sq-facet-date\n            \n\n            \n                styleUrls\n                ./facet-date.scss\n            \n\n\n\n            \n                templateUrl\n                ./facet-date.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                cdRef\n                            \n                            \n                                clearFiltersAction\n                            \n                            \n                                dateRangeControl\n                            \n                            \n                                form\n                            \n                            \n                                items\n                            \n                            \n                                selection\n                            \n                            \n                                timeSeries\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                filterItem\n                            \n                            \n                                    Public\n                                isFiltered\n                            \n                            \n                                ngOnChanges\n                            \n                            \n                                ngOnDestroy\n                            \n                            \n                                ngOnInit\n                            \n                            \n                                toggleCustomRange\n                            \n                            \n                                    Public\n                                updateRange\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                aggregation\n                            \n                            \n                                allowCustomRange\n                            \n                            \n                                allowPredefinedRange\n                            \n                            \n                                displayEmptyDistributionIntervals\n                            \n                            \n                                field\n                            \n                            \n                                name\n                            \n                            \n                                replaceCurrent\n                            \n                            \n                                results\n                            \n                            \n                                showCount\n                            \n                            \n                                showCustomRange\n                            \n                            \n                                timelineAggregation\n                            \n                        \n                    \n                \n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    field\n                                \n                                \n                                    actions\n                                \n                            \n                        \n                    \n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(facetService: FacetService, formBuilder: FormBuilder, exprBuilder: ExprBuilder, searchService: SearchService, advancedService: AdvancedService, appService: AppService, cdRef: ChangeDetectorRef)\n                    \n                \n                        \n                            \n                                Defined in timeline/bootstrap/facet-date.ts:80\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        facetService\n                                                  \n                                                        \n                                                                    FacetService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        formBuilder\n                                                  \n                                                        \n                                                                        FormBuilder\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        exprBuilder\n                                                  \n                                                        \n                                                                    ExprBuilder\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        searchService\n                                                  \n                                                        \n                                                                    SearchService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        advancedService\n                                                  \n                                                        \n                                                                    AdvancedService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        appService\n                                                  \n                                                        \n                                                                    AppService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        cdRef\n                                                  \n                                                        \n                                                                        ChangeDetectorRef\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        aggregation\n                    \n                \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : \"Modified\"\n                    \n                \n                        \n                            \n                                    Defined in timeline/bootstrap/facet-date.ts:58\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        allowCustomRange\n                    \n                \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : true\n                    \n                \n                        \n                            \n                                    Defined in timeline/bootstrap/facet-date.ts:64\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        allowPredefinedRange\n                    \n                \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : true\n                    \n                \n                        \n                            \n                                    Defined in timeline/bootstrap/facet-date.ts:63\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        displayEmptyDistributionIntervals\n                    \n                \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : true\n                    \n                \n                        \n                            \n                                    Defined in timeline/bootstrap/facet-date.ts:62\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        field\n                    \n                \n                \n                    \n                        Type :         string\n\n                    \n                \n                        \n                            \n                                    Defined in timeline/bootstrap/facet-date.ts:60\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        name\n                    \n                \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : \"Date\"\n                    \n                \n                        \n                            \n                                    Defined in timeline/bootstrap/facet-date.ts:56\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        replaceCurrent\n                    \n                \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : true\n                    \n                \n                        \n                            \n                                    Defined in timeline/bootstrap/facet-date.ts:66\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        results\n                    \n                \n                \n                    \n                        Type :     Results\n\n                    \n                \n                        \n                            \n                                    Defined in timeline/bootstrap/facet-date.ts:57\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        showCount\n                    \n                \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : true\n                    \n                \n                        \n                            \n                                    Defined in timeline/bootstrap/facet-date.ts:61\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        showCustomRange\n                    \n                \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                        \n                            \n                                    Defined in timeline/bootstrap/facet-date.ts:65\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        timelineAggregation\n                    \n                \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : \"Timeline\"\n                    \n                \n                        \n                            \n                                    Defined in timeline/bootstrap/facet-date.ts:59\n                            \n                        \n            \n        \n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        filterItem\n                        \n                    \n                \n            \n            \n                \nfilterItem(item: AggregationItem, event)\n                \n            \n\n\n            \n                \n                    Defined in timeline/bootstrap/facet-date.ts:165\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    item\n                                    \n                                            AggregationItem\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    event\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        isFiltered\n                        \n                    \n                \n            \n            \n                \n                    \n                    isFiltered(item: AggregationItem)\n                \n            \n\n\n            \n                \n                    Defined in timeline/bootstrap/facet-date.ts:311\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    item\n                                    \n                                            AggregationItem\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnChanges\n                        \n                    \n                \n            \n            \n                \nngOnChanges(changes: SimpleChanges)\n                \n            \n\n\n            \n                \n                    Defined in timeline/bootstrap/facet-date.ts:142\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    changes\n                                    \n                                                SimpleChanges\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnDestroy\n                        \n                    \n                \n            \n            \n                \nngOnDestroy()\n                \n            \n\n\n            \n                \n                    Defined in timeline/bootstrap/facet-date.ts:153\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnInit\n                        \n                    \n                \n            \n            \n                \nngOnInit()\n                \n            \n\n\n            \n                \n                    Defined in timeline/bootstrap/facet-date.ts:102\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        toggleCustomRange\n                        \n                    \n                \n            \n            \n                \ntoggleCustomRange(event)\n                \n            \n\n\n            \n                \n                    Defined in timeline/bootstrap/facet-date.ts:176\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    event\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        updateRange\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateRange(range: Date[])\n                \n            \n\n\n            \n                \n                    Defined in timeline/bootstrap/facet-date.ts:305\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    range\n                                    \n                                            Date[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        cdRef\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ChangeDetectorRef\n\n                    \n                \n                    \n                        \n                                Defined in timeline/bootstrap/facet-date.ts:89\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        clearFiltersAction\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Action\n\n                    \n                \n                    \n                        \n                                Defined in timeline/bootstrap/facet-date.ts:68\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        dateRangeControl\n                        \n                    \n                \n            \n                \n                    \n                        Type :         FormControl\n\n                    \n                \n                    \n                        \n                                Defined in timeline/bootstrap/facet-date.ts:72\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        form\n                        \n                    \n                \n            \n                \n                    \n                        Type :         FormGroup\n\n                    \n                \n                    \n                        \n                                Defined in timeline/bootstrap/facet-date.ts:71\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        items\n                        \n                    \n                \n            \n                \n                    \n                        Type :     AggregationItem[]\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                    \n                        \n                                Defined in timeline/bootstrap/facet-date.ts:69\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        selection\n                        \n                    \n                \n            \n                \n                    \n                        Type :     (Date | undefined)[] | undefined\n\n                    \n                \n                    \n                        \n                                Defined in timeline/bootstrap/facet-date.ts:75\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        timeSeries\n                        \n                    \n                \n            \n                \n                    \n                        Type :         TimelineSeries[]\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                    \n                        \n                                Defined in timeline/bootstrap/facet-date.ts:74\n                        \n                    \n\n\n        \n    \n\n\n    \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        field\n                    \n                \n\n                \n                    \n                        getfield()\n                    \n                \n                            \n                                \n                                    Defined in timeline/bootstrap/facet-date.ts:80\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        actions\n                    \n                \n\n                \n                    \n                        getactions()\n                    \n                \n                            \n                                \n                                    Defined in timeline/bootstrap/facet-date.ts:157\n                                \n                            \n\n            \n        \n\n\n\n\n    \n        import {\n    Component,\n    OnInit,\n    OnDestroy,\n    Input,\n    OnChanges,\n    SimpleChanges,\n    ChangeDetectorRef,\n} from \"@angular/core\";\nimport { FormBuilder, FormControl, FormGroup } from \"@angular/forms\";\nimport { Action } from \"@sinequa/components/action\";\nimport { AdvancedService } from \"@sinequa/components/advanced\";\nimport { AbstractFacet, FacetConfig, FacetService } from \"@sinequa/components/facet\";\nimport { SearchService } from \"@sinequa/components/search\";\nimport {\n    AppService,\n    Expr,\n    ExprBuilder,\n    ExprOperator,\n} from \"@sinequa/core/app-utils\";\nimport { Utils } from \"@sinequa/core/base\";\nimport {\n    Aggregation,\n    AggregationItem,\n    Results,\n} from \"@sinequa/core/web-services\";\nimport { Subscription } from \"rxjs\";\nimport { debounceTime, filter, map } from \"rxjs/operators\";\nimport { BsFacetTimelineComponent, TimelineSeries } from \".\";\nimport moment from \"moment\";\n\nexport interface FacetDateParams {\n    aggregation: string\n    showCount?: boolean;\n    timelineAggregation?: string;\n    displayEmptyDistributionIntervals?: boolean;\n    allowPredefinedRange?: boolean;\n    allowCustomRange?: boolean;\n    showCustomRange?: boolean;\n    replaceCurrent?: boolean;\n}\n\nexport interface FacetDateConfig extends FacetConfig {\n    type: 'date';\n}\n\n@Component({\n    selector: \"sq-facet-date\",\n    templateUrl: \"./facet-date.html\",\n    styleUrls: [\"./facet-date.scss\"],\n})\nexport class BsFacetDate\n    extends AbstractFacet\n    implements FacetDateParams, OnInit, OnChanges, OnDestroy\n{\n    @Input() name: string = \"Date\";\n    @Input() results: Results;\n    @Input() aggregation: string = \"Modified\";\n    @Input() timelineAggregation: string = \"Timeline\";\n    @Input(\"field\") _field?: string;\n    @Input() showCount: boolean = true; // Show the number of occurrences\n    @Input() displayEmptyDistributionIntervals: boolean = true; // Display items with count === 0\n    @Input() allowPredefinedRange = true; // will allow or not the use of datepickers and timeline for custom range selection\n    @Input() allowCustomRange = true; // will allow or not the use of datepickers and timeline for custom range selection\n    @Input() showCustomRange = false; // will show/hide datepickers and timeline, once allowed\n    @Input() replaceCurrent = true; // if true, the previous \"select\" is removed first\n\n    clearFiltersAction: Action;\n    items: AggregationItem[] = [];\n\n    form: FormGroup;\n    dateRangeControl: FormControl;\n\n    timeSeries: TimelineSeries[] = [];\n    selection: (Date | undefined)[] | undefined;\n\n    protected subscriptions: Subscription[] = [];\n    protected data: Aggregation | undefined;\n\n    get field(): string {return this._field || this.data?.column || ''}\n\n    constructor(\n        protected facetService: FacetService,\n        protected formBuilder: FormBuilder,\n        protected exprBuilder: ExprBuilder,\n        protected searchService: SearchService,\n        protected advancedService: AdvancedService,\n        protected appService: AppService,\n        public cdRef: ChangeDetectorRef\n    ) {\n        super();\n\n        this.clearFiltersAction = new Action({\n            icon: \"far fa-minus-square\",\n            title: \"msg#facet.filters.clear\",\n            action: () => {\n                this.facetService.clearFiltersSearch(this.name, true);\n            },\n        });\n    }\n\n    ngOnInit() {\n        if (this.allowCustomRange) {\n            this.dateRangeControl = new FormControl(\n                [undefined, undefined],\n                [\n                    this.advancedService.validators.range(this.field),\n                    this.advancedService.validators.date(this.field),\n                ]\n            );\n\n            this.form = this.formBuilder.group({\n                dateRange: this.dateRangeControl,\n            });\n\n            // Listen to query changes\n            this.subscriptions.push(\n                this.searchService.queryStream.subscribe(() => {\n                    const value = this.getRangeValue();\n                    const from = !value[0] ? undefined : moment(value[0]).toDate();\n                    const to = !value[1] ? undefined : moment(value[1]).toDate()\n                    this.dateRangeControl.setValue([from, to], { emitEvent: false });\n                    this.selection = !value[0] && !value[1] ? undefined : [from, to];\n                })\n            );\n\n            // Listen to form changes\n            this.subscriptions.push(\n                this.dateRangeControl.valueChanges\n                    .pipe(\n                        debounceTime(500),\n                        filter(() => this.form.valid)\n                    )\n                    .subscribe((value: (undefined | Date)[]) => {\n                        this.facetService.clearFiltersSearch(this.name, true);\n                        this.setCustomDateSelect(value);\n                    })\n            );\n        }\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n        if (this.allowCustomRange) {\n            this.updateTimeSeries(this.timelineAggregation);\n        }\n\n        if (changes.results) {\n            this.data = this.getAggregation(this.aggregation);\n            this.updateItems();\n        }\n    }\n\n    ngOnDestroy() {\n        this.subscriptions.map((item) => item.unsubscribe());\n    }\n\n    override get actions(): Action[] {\n        const actions: Action[] = [];\n        if (this.facetService.hasFiltered(this.name) && actions.length === 0) {\n            actions.push(this.clearFiltersAction);\n        }\n        return actions;\n    }\n\n    filterItem(item: AggregationItem, event) {\n        if (!this.isFiltered(item)) {\n            this.facetService.addFilterSearch(this.name, this.data!, item, {\n                replaceCurrent: this.replaceCurrent,\n            });\n        } else {\n            this.facetService.removeFilterSearch(this.name, this.data!, item);\n        }\n        event.preventDefault();\n    }\n\n    toggleCustomRange(event) {\n        this.showCustomRange = !this.showCustomRange;\n        event.stopPropagation();\n    }\n\n    private updateItems() {\n        this.items = this.displayEmptyDistributionIntervals\n            ? this.data?.items || []\n            : this.data?.items?.filter((item) => item.count > 0) || [];\n    }\n\n    private updateTimeSeries(aggregationName: string) {\n        this.timeSeries = [];\n        const ccaggregation = this.appService.getCCAggregation(aggregationName);\n        const aggregation = this.getAggregation(aggregationName);\n        if (aggregation && ccaggregation)\n            this.timeSeries.push(\n                BsFacetTimelineComponent.createTimeseries(\n                    { aggregation: aggregationName, primary: true },\n                    aggregation,\n                    ccaggregation\n                )\n            );\n    }\n\n    private getAggregation(aggregationName: string): Aggregation | undefined {\n        let aggregation = this.facetService.getAggregation(\n            aggregationName,\n            this.results\n        );\n\n        if (!aggregation) {\n            const query = Utils.copy(this.searchService.query);\n            query.action = \"aggregate\";\n            query.aggregations = [aggregationName];\n\n            this.searchService\n                .getResults(query, undefined, { searchInactive: true })\n                .pipe(\n                    map((results) => {\n                        aggregation = results.aggregations[0];\n                    })\n                );\n        }\n\n        return aggregation;\n    }\n\n    private setCustomDateSelect(range: (undefined | Date)[] | undefined) {\n        let expr: string | undefined;\n        if (range) {\n            const from = range[0];\n            const to = range[1];\n\n            // ommit time part of the Date in order to remove display dates with hh:mm:ss in the breadcrumb\n              from?.setHours(0);\n              from?.setMinutes(0);\n              from?.setSeconds(0);\n\n              to?.setHours(0);\n              to?.setMinutes(0);\n              to?.setSeconds(0);\n\n            // update search query with current selection\n            if (from && to) {\n                expr = this.exprBuilder.makeRangeExpr(this.field, from, to);\n            } else if (from) {\n                expr = this.exprBuilder.makeNumericalExpr(\n                    this.field,\n                    \">=\",\n                    from\n                );\n            } else if (to) {\n                expr = this.exprBuilder.makeNumericalExpr(this.field, \" 1) {\n            return expr.values;\n        } else {\n            return expr.value!;\n        }\n    }\n\n    public updateRange(range: Date[]) {\n        if (!!range) {\n            this.setCustomDateSelect(range);\n        }\n    }\n\n    public isFiltered(item: AggregationItem): boolean {\n        const filtered = this.facetService.getAggregationItemsFiltered(\n            this.name\n        );\n        return (\n            this.facetService.filteredIndex(this.data, filtered, item) !== -1\n        );\n    }\n}\n\n    \n\n    \n        \n\n    \n        \n\n            {{item | sqValue:item.$column}}\n\n            \n              {{item.count}}\n            \n        \n    \n\n    \n        \n            \n            {{'msg#facet.date.custom' | sqMessage}} :\n        \n    \n\n\n    \n      \n        \n            \n                \n                \n            \n        \n\n        \n        \n\n      \n    \n\n\n\n    \n\n    \n                \n                    ./facet-date.scss\n                \n                .date-item:hover {\n    background-color: #f8f9fa;\n    color: black;\n}\n\n.active {\n    color: #0f5132;\n    background-color: #d1e7dd;\n\n    &:hover {\n        background-color: #d1e7dd;\n        opacity: 0.8;\n    }\n}\n\n.counter {\n    padding-left: 4px;\n    padding-right: 6px;\n    font-size: .7rem;\n}\n\n\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '                        {{item | sqValue:item.$column}}                          {{item.count}}                                                            {{\\'msg#facet.date.custom\\' | sqMessage}} :                                                                                                                        '\n    var COMPONENTS = [{'name': 'AgGridViewComponent', 'selector': 'sq-ag-grid-view'},{'name': 'BsEdgeInfoCard', 'selector': 'sq-edge-info-card'},{'name': 'BsFacetDate', 'selector': 'sq-facet-date'},{'name': 'BsFacetHeatmapComponent', 'selector': 'sq-facet-heatmap'},{'name': 'BsFacetTimelineComponent', 'selector': 'sq-facet-timeline'},{'name': 'BsHeatmapComponent', 'selector': 'sq-heatmap'},{'name': 'BsNodeInfoCard', 'selector': 'sq-node-info-card'},{'name': 'BsResultsHeatmapView', 'selector': 'sq-results-heatmap-view'},{'name': 'BsTimelineComponent', 'selector': 'sq-timeline'},{'name': 'BsTooltipComponent', 'selector': 'sq-tooltip'},{'name': 'DataModalComponent', 'selector': 'sq-data-modal'},{'name': 'FacetNgxChart', 'selector': 'sq-facet-ngx-chart'},{'name': 'FacetWrapperComponent', 'selector': 'facet-wrapper'},{'name': 'FusionChart', 'selector': 'sq-fusion-chart'},{'name': 'MapComponent', 'selector': 'sq-googlemaps'},{'name': 'MoneyCloudComponent', 'selector': 'sq-money-cloud'},{'name': 'MoneyTimelineComponent', 'selector': 'sq-money-timeline'},{'name': 'NetworkComponent', 'selector': 'sq-network'},{'name': 'NgxChart', 'selector': 'sq-ngx-chart'},{'name': 'ResultTimeline', 'selector': 'sq-result-timeline'},{'name': 'TimelineLegendComponent', 'selector': 'sq-timeline-legend'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'BsFacetDate'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/BsHeatmapComponent.html":{"url":"components/BsHeatmapComponent.html","title":"component - BsHeatmapComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  BsHeatmapComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    heatmap/bootstrap/heatmap.component.ts\n\n\n\n\n\n    \n        Implements\n    \n    \n                    OnChanges\n                    AfterViewInit\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                sq-heatmap\n            \n\n            \n                styleUrls\n                ./heatmap.component.scss\n            \n\n\n\n            \n                templateUrl\n                ./heatmap.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                color\n                            \n                            \n                                dataFiltered\n                            \n                            \n                                gx\n                            \n                            \n                                gy\n                            \n                            \n                                originalCount\n                            \n                            \n                                    Optional\n                                tooltipItem\n                            \n                            \n                                tooltipLeft\n                            \n                            \n                                tooltipOrientation\n                            \n                            \n                                tooltipRight\n                            \n                            \n                                tooltipTop\n                            \n                            \n                                viewInit\n                            \n                            \n                                wrap\n                            \n                            \n                                x\n                            \n                            \n                                xAxis\n                            \n                            \n                                y\n                            \n                            \n                                yAxis\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                buildChart\n                            \n                            \n                                getLegend\n                            \n                            \n                                ngAfterViewInit\n                            \n                            \n                                ngOnChanges\n                            \n                            \n                                onAxisClicked\n                            \n                            \n                                onItemClicked\n                            \n                            \n                                onMouseOver\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                axisClickable\n                            \n                            \n                                buckets\n                            \n                            \n                                colorScheme\n                            \n                            \n                                data\n                            \n                            \n                                height\n                            \n                            \n                                itemsClickable\n                            \n                            \n                                margin\n                            \n                            \n                                maxX\n                            \n                            \n                                maxY\n                            \n                            \n                                theme\n                            \n                            \n                                transition\n                            \n                            \n                                width\n                            \n                        \n                    \n                \n\n                \n                    \n                        Outputs\n                    \n                \n                \n                    \n                        \n                            \n                                axisClicked\n                            \n                            \n                                itemClicked\n                            \n                        \n                    \n                \n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(el: ElementRef)\n                    \n                \n                        \n                            \n                                Defined in heatmap/bootstrap/heatmap.component.ts:69\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        el\n                                                  \n                                                        \n                                                                        ElementRef\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        axisClickable\n                    \n                \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : true\n                    \n                \n                        \n                            \n                                    Defined in heatmap/bootstrap/heatmap.component.ts:33\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        buckets\n                    \n                \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 9\n                    \n                \n                        \n                            \n                                    Defined in heatmap/bootstrap/heatmap.component.ts:36\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        colorScheme\n                    \n                \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : \"schemeBlues\"\n                    \n                \n                        \n                            \n                                    Defined in heatmap/bootstrap/heatmap.component.ts:37\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        data\n                    \n                \n                \n                    \n                        Type :         HeatmapItem[]\n\n                    \n                \n                        \n                            \n                                    Defined in heatmap/bootstrap/heatmap.component.ts:23\n                            \n                        \n                \n                    \n                        Raw data to display (will be filtered in function of maxX and maxY parameters)\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        height\n                    \n                \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 600\n                    \n                \n                        \n                            \n                                    Defined in heatmap/bootstrap/heatmap.component.ts:26\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        itemsClickable\n                    \n                \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : true\n                    \n                \n                        \n                            \n                                    Defined in heatmap/bootstrap/heatmap.component.ts:32\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        margin\n                    \n                \n                \n                    \n                        Type :     { top: number; bottom: number; left: number; right: number; }\n\n                    \n                \n                \n                    \n                        Default value : {top: 100, bottom: 20, left: 100, right: 40}\n                    \n                \n                        \n                            \n                                    Defined in heatmap/bootstrap/heatmap.component.ts:28\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        maxX\n                    \n                \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 20\n                    \n                \n                        \n                            \n                                    Defined in heatmap/bootstrap/heatmap.component.ts:38\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        maxY\n                    \n                \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 20\n                    \n                \n                        \n                            \n                                    Defined in heatmap/bootstrap/heatmap.component.ts:39\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        theme\n                    \n                \n                \n                    \n                        Type :     \"light\" | \"dark\"\n\n                    \n                \n                \n                    \n                        Default value : \"light\"\n                    \n                \n                        \n                            \n                                    Defined in heatmap/bootstrap/heatmap.component.ts:40\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        transition\n                    \n                \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 1000\n                    \n                \n                        \n                            \n                                    Defined in heatmap/bootstrap/heatmap.component.ts:29\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        width\n                    \n                \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 600\n                    \n                \n                        \n                            \n                                    Defined in heatmap/bootstrap/heatmap.component.ts:27\n                            \n                        \n            \n        \n\n    \n    Outputs\n        \n            \n                \n                    \n                        \n                        axisClicked\n                    \n                \n                \n                    \n                        Type :         EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in heatmap/bootstrap/heatmap.component.ts:44\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        itemClicked\n                    \n                \n                \n                    \n                        Type :         EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in heatmap/bootstrap/heatmap.component.ts:43\n                            \n                        \n            \n        \n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        buildChart\n                        \n                    \n                \n            \n            \n                \nbuildChart(update?: boolean)\n                \n            \n\n\n            \n                \n                    Defined in heatmap/bootstrap/heatmap.component.ts:123\n                \n            \n\n\n            \n                \n                    buildChart() actually only builds the axes of the chart, since the\nrest is build automatically with Angular syntax in the template.\nWe build axis programmatically (with D3 selects) to benefit from the\nD3 abstractions and transitions.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    update\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getLegend\n                        \n                    \n                \n            \n            \n                \ngetLegend()\n                \n            \n\n\n            \n                \n                    Defined in heatmap/bootstrap/heatmap.component.ts:209\n                \n            \n\n\n            \n                \n                    Builds the list of legend items\n\n\n                    \n                        Returns :     {}\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngAfterViewInit\n                        \n                    \n                \n            \n            \n                \nngAfterViewInit()\n                \n            \n\n\n            \n                \n                    Defined in heatmap/bootstrap/heatmap.component.ts:108\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnChanges\n                        \n                    \n                \n            \n            \n                \nngOnChanges()\n                \n            \n\n\n            \n                \n                    Defined in heatmap/bootstrap/heatmap.component.ts:78\n                \n            \n\n\n            \n                \n                    ngOnChanges is used to respond to changes in the data (or chart parameter)\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onAxisClicked\n                        \n                    \n                \n            \n            \n                \nonAxisClicked(value: string, axis: \"x\" | \"y\")\n                \n            \n\n\n            \n                \n                    Defined in heatmap/bootstrap/heatmap.component.ts:200\n                \n            \n\n\n            \n                \n                    Called when the user clicks on an axis item\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    axis\n                                    \n                                            \"x\" | \"y\"\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onItemClicked\n                        \n                    \n                \n            \n            \n                \nonItemClicked(item: HeatmapItem)\n                \n            \n\n\n            \n                \n                    Defined in heatmap/bootstrap/heatmap.component.ts:189\n                \n            \n\n\n            \n                \n                    Called when the user clicks on a heatmap tile\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    item\n                                    \n                                                HeatmapItem\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onMouseOver\n                        \n                    \n                \n            \n            \n                \nonMouseOver(item: HeatmapItem, event: MouseEvent)\n                \n            \n\n\n            \n                \n                    Defined in heatmap/bootstrap/heatmap.component.ts:160\n                \n            \n\n\n            \n                \n                    Called when the user hovers the mouse over a heatmap tile\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    item\n                                    \n                                                HeatmapItem\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    event\n                                    \n                                            MouseEvent\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        color\n                        \n                    \n                \n            \n                \n                    \n                        Type :     d3.ScaleQuantile\n\n                    \n                \n                    \n                        \n                                Defined in heatmap/bootstrap/heatmap.component.ts:49\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        dataFiltered\n                        \n                    \n                \n            \n                \n                    \n                        Type :         HeatmapItem[]\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                    \n                        \n                                Defined in heatmap/bootstrap/heatmap.component.ts:58\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        gx\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ElementRef\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ViewChild('xAxis')\n                        \n                    \n                \n                    \n                        \n                                Defined in heatmap/bootstrap/heatmap.component.ts:52\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        gy\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ElementRef\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ViewChild('yAxis')\n                        \n                    \n                \n                    \n                        \n                                Defined in heatmap/bootstrap/heatmap.component.ts:53\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        originalCount\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in heatmap/bootstrap/heatmap.component.ts:69\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        tooltipItem\n                        \n                    \n                \n            \n                \n                    \n                        Type :         HeatmapItem\n\n                    \n                \n                    \n                        \n                                Defined in heatmap/bootstrap/heatmap.component.ts:61\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        tooltipLeft\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in heatmap/bootstrap/heatmap.component.ts:65\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        tooltipOrientation\n                        \n                    \n                \n            \n                \n                    \n                        Type :     \"left\" | \"right\"\n\n                    \n                \n                    \n                        \n                                Defined in heatmap/bootstrap/heatmap.component.ts:62\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        tooltipRight\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in heatmap/bootstrap/heatmap.component.ts:64\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        tooltipTop\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in heatmap/bootstrap/heatmap.component.ts:63\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        viewInit\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in heatmap/bootstrap/heatmap.component.ts:68\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        wrap\n                        \n                    \n                \n            \n                \n                    \n                        Default value : () => {...}\n                    \n                \n                    \n                        \n                                Defined in heatmap/bootstrap/heatmap.component.ts:230\n                        \n                    \n\n            \n                \n                    Truncates the axis strings to fit inside 90px width\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        x\n                        \n                    \n                \n            \n                \n                    \n                        Type :     d3.ScaleBand\n\n                    \n                \n                    \n                        \n                                Defined in heatmap/bootstrap/heatmap.component.ts:47\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        xAxis\n                        \n                    \n                \n            \n                \n                    \n                        Type :     d3.Selection\n\n                    \n                \n                    \n                        \n                                Defined in heatmap/bootstrap/heatmap.component.ts:54\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        y\n                        \n                    \n                \n            \n                \n                    \n                        Type :     d3.ScaleBand\n\n                    \n                \n                    \n                        \n                                Defined in heatmap/bootstrap/heatmap.component.ts:48\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        yAxis\n                        \n                    \n                \n            \n                \n                    \n                        Type :     d3.Selection\n\n                    \n                \n                    \n                        \n                                Defined in heatmap/bootstrap/heatmap.component.ts:55\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n    \n        import { Component, ElementRef, Output, EventEmitter, Input, ViewChild, OnChanges, AfterViewInit } from '@angular/core';\n\nimport * as d3 from 'd3';\n\nexport interface HeatmapItem {\n    x: string;\n    y: string;\n    count: number;\n    value: string;\n    display: string;\n    selected?: boolean;\n}\n\n@Component({\n    selector: \"sq-heatmap\",\n    templateUrl: \"./heatmap.component.html\",\n    styleUrls: ['./heatmap.component.scss']\n})\nexport class BsHeatmapComponent implements OnChanges, AfterViewInit {\n    /**\n     * Raw data to display (will be filtered in function of maxX and maxY parameters)\n     */\n    @Input() data: HeatmapItem[];\n\n    // Graphical parameters\n    @Input() height = 600;\n    @Input() width = 600;\n    @Input() margin = {top: 100, bottom: 20, left: 100, right: 40};\n    @Input() transition = 1000; // Transition time in ms (0 to avoid transitions)\n\n    // Interaction parameters\n    @Input() itemsClickable = true;\n    @Input() axisClickable = true;\n\n    // Axis/Scales parameters\n    @Input() buckets = 9; // Color buckets\n    @Input() colorScheme = \"schemeBlues\"; // Color scheme from D3\n    @Input() maxX = 20; // Max items on X\n    @Input() maxY = 20; // Max items on Y\n    @Input() theme: \"light\" | \"dark\" = \"light\";\n    \n    // Events from user interactions\n    @Output() itemClicked = new EventEmitter();\n    @Output() axisClicked = new EventEmitter();\n\n    // D3 Scales\n    x: d3.ScaleBand;\n    y: d3.ScaleBand;\n    color: d3.ScaleQuantile;\n\n    // Axes\n    @ViewChild(\"xAxis\") gx: ElementRef;\n    @ViewChild(\"yAxis\") gy: ElementRef;\n    xAxis: d3.Selection;\n    yAxis: d3.Selection;\n    \n    // Data actually displayed\n    dataFiltered: HeatmapItem[] = [];\n\n    // Tooltip    \n    tooltipItem?: HeatmapItem;\n    tooltipOrientation: \"left\" | \"right\";\n    tooltipTop: number;\n    tooltipRight: number;\n    tooltipLeft: number;\n\n    // Misc\n    viewInit: boolean;\n    originalCount: number;\n\n    constructor(\n        private el: ElementRef\n    ){}\n\n    /**\n     * ngOnChanges is used to respond to changes in the data (or chart parameter)\n     */\n    ngOnChanges() {\n\n        this.data = this.data || [];\n\n        // Pre-process data\n        const xLabels = Array.from(new Set(this.data.map(value => value.x))).slice(0, this.maxX);\n        const yLabels = Array.from(new Set(this.data.map(value => value.y))).slice(0, this.maxY);\n        this.dataFiltered = this.data.filter(value => xLabels.includes(value.x) && yLabels.includes(value.y));\n\n        // Create scales\n        this.x = d3.scaleBand()\n            .domain(xLabels)\n            .range([0, this.width-this.margin.left-this.margin.right]);\n\n        this.y = d3.scaleBand()\n            .domain(yLabels)\n            .range([0, this.height-this.margin.top-this.margin.bottom]);\n\n        this.color = d3.scaleQuantile()\n            .domain(this.dataFiltered.map(item => item.count))\n            .range(d3[this.colorScheme][this.buckets]);\n\n        // Note: ngOnChanges is always called once, before ngAfterViewInit\n        if(this.viewInit) {\n            this.buildChart(!!this.transition);\n        }\n    }\n\n    // Note: In onAfterViewInit we can access gx and gy, obtained with @ViewChild.\n    // At this point we can call buildChart()\n    ngAfterViewInit(){\n        this.xAxis = d3.select(this.gx.nativeElement);\n        this.yAxis = d3.select(this.gy.nativeElement);\n        this.viewInit = true;\n\n        this.buildChart();\n    }\n    \n    /**\n     * buildChart() actually only builds the axes of the chart, since the\n     * rest is build automatically with Angular syntax in the template.\n     * We build axis programmatically (with D3 selects) to benefit from the\n     * D3 abstractions and transitions.\n     * @param update \n     */\n    buildChart(update?: boolean){\n                    \n        if(update){\n            const t = d3.transition().duration(this.transition) as d3.Transition;\n    \n            this.xAxis.transition(t)\n                .call(d3.axisTop(this.x).tickSize(0))\n                .on(\"end\", () => this.xAxis.selectAll('text').each(this.wrap));\n\n            this.yAxis.transition(t)\n                .call(d3.axisLeft(this.y).tickSize(0))\n                .on(\"end\", () => this.yAxis.selectAll('text').each(this.wrap));\n            \n        }\n        else {\n            this.xAxis.call(d3.axisTop(this.x).tickSize(0));\n            this.yAxis.call(d3.axisLeft(this.y).tickSize(0));\n        }\n\n        this.xAxis.selectAll(\".domain\").remove(); // Remove the axis line\n        this.xAxis.selectAll(\"text\")  // Tilt the text\n            .attr(\"transform\", \"rotate(-35)\")\n            .style(\"text-anchor\", \"start\")\n            .each(this.wrap)\n            .on(\"click\", d => this.onAxisClicked(d, 'x'));\n\n        this.yAxis.selectAll(\".domain\").remove(); // Remove the axis line\n        this.yAxis.selectAll(\"text\")\n            .each(this.wrap)\n            .on(\"click\", d => this.onAxisClicked(d, 'y'));\n    }\n\n    /**\n     * Called when the user hovers the mouse over a heatmap tile\n     * @param item \n     * @param event \n     */\n    onMouseOver(item: HeatmapItem, event: MouseEvent){\n        this.tooltipItem = item;\n\n        const x = this.x(item.x) as number;\n        const y = this.y(item.y) as number;\n\n        // Since we use viewBox to auto-adjust the SVG to the container size, we have to\n        // convert from the SVG coordinate system to the HTML coordinate system\n        const actualWidth = (this.el.nativeElement as HTMLElement).offsetWidth;\n        const scale = actualWidth / this.width;\n        const relativeX = x / this.width;\n\n        // Tooltip to the right\n        if(relativeX ) => {\n        const self = d3.select(nodes[i]);\n        let textLength = nodes[i].getComputedTextLength();\n        let text = self.text();\n        const fullText = self.text();\n        while (textLength > 90 && text.length > 0) {\n          text = text.slice(0, -1)\n          self.text(text + '...');\n          textLength = nodes[i].getComputedTextLength();\n        }\n        self.append('svg:title').text(fullText);\n    };\n}\n\n    \n\n    \n        \n\n    \n    \n        \n            \n            \n            {{ item.start | number : '1.0-0'}}\n        \n    \n\n    \n        \n        \n\n        \n        \n\n        \n        \n        \n        \n    \n    \n    \n        {{'msg#heatmap.showing' | sqMessage:{values: {shown: dataFiltered.length, total: data.length} } }}\n    \n\n\n\n\n\n    {{tooltipItem.display || tooltipItem.value}}\n    {{'msg#heatmap.tooltip' | sqMessage:{values: {count: tooltipItem.count} } }}\n\n\n    \n\n    \n                \n                    ./heatmap.component.scss\n                \n                // This is required to position the tooltip absolutely\n:host {\n    display: block;\n    position: relative;\n}\n\n// Note: ::ng-deep is deprecated, but currently no better alternative\n.axis.clickable ::ng-deep text:hover {\n    text-decoration: underline;\n    cursor: pointer;\n}\n\n.tile {\n    opacity: 0.9;\n}\n\n.tile.clickable:hover {\n    cursor: pointer;\n    opacity: 1;\n    transition: opacity 0.2s ease-in 0s;\n}\n\n.tile.selected {\n    opacity: 0.5;\n}\n\n.legend {\n    font-size: 10px;\n    fill: darkgrey;\n\n    rect {\n        opacity: 0.9;\n    }\n}\n\n.bottom-legend {\n    fill: darkgrey;\n    font-size: 10px;\n    text-anchor: end;\n}\n\nsq-tooltip ::ng-deep {\n    .sq-tooltip {\n        pointer-events: none;\n        opacity: 0.8;\n    }\n}\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '                                                    {{ item.start | number : \\'1.0-0\\'}}                                                                                                    {{\\'msg#heatmap.showing\\' | sqMessage:{values: {shown: dataFiltered.length, total: data.length} } }}        {{tooltipItem.display || tooltipItem.value}}    {{\\'msg#heatmap.tooltip\\' | sqMessage:{values: {count: tooltipItem.count} } }}'\n    var COMPONENTS = [{'name': 'AgGridViewComponent', 'selector': 'sq-ag-grid-view'},{'name': 'BsEdgeInfoCard', 'selector': 'sq-edge-info-card'},{'name': 'BsFacetDate', 'selector': 'sq-facet-date'},{'name': 'BsFacetHeatmapComponent', 'selector': 'sq-facet-heatmap'},{'name': 'BsFacetTimelineComponent', 'selector': 'sq-facet-timeline'},{'name': 'BsHeatmapComponent', 'selector': 'sq-heatmap'},{'name': 'BsNodeInfoCard', 'selector': 'sq-node-info-card'},{'name': 'BsResultsHeatmapView', 'selector': 'sq-results-heatmap-view'},{'name': 'BsTimelineComponent', 'selector': 'sq-timeline'},{'name': 'BsTooltipComponent', 'selector': 'sq-tooltip'},{'name': 'DataModalComponent', 'selector': 'sq-data-modal'},{'name': 'FacetNgxChart', 'selector': 'sq-facet-ngx-chart'},{'name': 'FacetWrapperComponent', 'selector': 'facet-wrapper'},{'name': 'FusionChart', 'selector': 'sq-fusion-chart'},{'name': 'MapComponent', 'selector': 'sq-googlemaps'},{'name': 'MoneyCloudComponent', 'selector': 'sq-money-cloud'},{'name': 'MoneyTimelineComponent', 'selector': 'sq-money-timeline'},{'name': 'NetworkComponent', 'selector': 'sq-network'},{'name': 'NgxChart', 'selector': 'sq-ngx-chart'},{'name': 'ResultTimeline', 'selector': 'sq-result-timeline'},{'name': 'TimelineLegendComponent', 'selector': 'sq-timeline-legend'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'BsHeatmapComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/BsHeatmapModule.html":{"url":"modules/BsHeatmapModule.html","title":"module - BsHeatmapModule","body":"\n                   \n\n\n\n\n    Modules\n    BsHeatmapModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_BsHeatmapModule\n\n\n\ncluster_BsHeatmapModule_exports\n\n\n\ncluster_BsHeatmapModule_declarations\n\n\n\n\nBsFacetHeatmapComponent\n\nBsFacetHeatmapComponent\n\n\n\nBsHeatmapModule\n\nBsHeatmapModule\n\nBsHeatmapModule -->\n\nBsFacetHeatmapComponent->BsHeatmapModule\n\n\n\n\n\nBsHeatmapComponent\n\nBsHeatmapComponent\n\nBsHeatmapModule -->\n\nBsHeatmapComponent->BsHeatmapModule\n\n\n\n\n\nBsResultsHeatmapView\n\nBsResultsHeatmapView\n\nBsHeatmapModule -->\n\nBsResultsHeatmapView->BsHeatmapModule\n\n\n\n\n\nBsTooltipComponent\n\nBsTooltipComponent\n\nBsHeatmapModule -->\n\nBsTooltipComponent->BsHeatmapModule\n\n\n\n\n\nBsFacetHeatmapComponent \n\nBsFacetHeatmapComponent \n\nBsFacetHeatmapComponent  -->\n\nBsHeatmapModule->BsFacetHeatmapComponent \n\n\n\n\n\nBsHeatmapComponent \n\nBsHeatmapComponent \n\nBsHeatmapComponent  -->\n\nBsHeatmapModule->BsHeatmapComponent \n\n\n\n\n\nBsResultsHeatmapView \n\nBsResultsHeatmapView \n\nBsResultsHeatmapView  -->\n\nBsHeatmapModule->BsResultsHeatmapView \n\n\n\n\n\nBsTooltipComponent \n\nBsTooltipComponent \n\nBsTooltipComponent  -->\n\nBsHeatmapModule->BsTooltipComponent \n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            heatmap/bootstrap/heatmap.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Declarations\n                    \n                        \n                            BsFacetHeatmapComponent\n                        \n                        \n                            BsHeatmapComponent\n                        \n                        \n                            BsResultsHeatmapView\n                        \n                        \n                            BsTooltipComponent\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            BsFacetHeatmapComponent\n                        \n                        \n                            BsHeatmapComponent\n                        \n                        \n                            BsResultsHeatmapView\n                        \n                        \n                            BsTooltipComponent\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import {NgModule} from \"@angular/core\";\nimport {CommonModule} from \"@angular/common\";\nimport {FormsModule, ReactiveFormsModule} from \"@angular/forms\";\n\nimport {IntlModule} from \"@sinequa/core/intl\";\n\nimport {BsSelectionModule} from \"@sinequa/components/selection\";\nimport {BsActionModule} from \"@sinequa/components/action\";\n\nimport {BsTooltipComponent} from \"./tooltip.component\";\nimport {BsHeatmapComponent} from \"./heatmap.component\";\nimport {BsFacetHeatmapComponent} from \"./facet-heatmap.component\";\nimport {BsResultsHeatmapView} from \"./results-heatmap-view\";\n\n@NgModule({\n    imports: [\n        FormsModule, ReactiveFormsModule,\n        CommonModule,\n        IntlModule,\n\n        BsSelectionModule,\n        BsActionModule\n    ],\n    declarations: [\n        BsResultsHeatmapView,\n        BsTooltipComponent,\n        BsHeatmapComponent,\n        BsFacetHeatmapComponent\n    ],\n    exports: [\n        BsResultsHeatmapView,\n        BsTooltipComponent,\n        BsHeatmapComponent,\n        BsFacetHeatmapComponent\n    ]\n})\nexport class BsHeatmapModule {\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/BsNodeInfoCard.html":{"url":"components/BsNodeInfoCard.html","title":"component - BsNodeInfoCard","body":"\n                   \n\n\n\n\n\n  Components\n  \n  BsNodeInfoCard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    network/node-info-card.component.ts\n\n\n\n\n\n    \n        Implements\n    \n    \n                    OnChanges\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                sq-node-info-card\n            \n\n\n            \n                styles\n                \n.card {\n    top: 5px;\n    left: 0;\n    right: 0;\n    width: 80%;\n}\n.circular-image {\n    width: 1.5em;\n    height: 1.5em;\n    border-radius: 50%;\n    object-fit: cover;\n}\n    \n            \n\n\n            \n                templateUrl\n                node-info-card.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                closed\n                            \n                            \n                                expanded\n                            \n                            \n                                neighbors\n                            \n                            \n                                nodeData\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                focusNode\n                            \n                            \n                                ngOnChanges\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                node\n                            \n                        \n                    \n                \n\n\n\n\n        \n    \n\n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        node\n                    \n                \n                \n                    \n                        Type :         Node\n\n                    \n                \n                        \n                            \n                                    Defined in network/node-info-card.component.ts:29\n                            \n                        \n            \n        \n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        focusNode\n                        \n                    \n                \n            \n            \n                \nfocusNode(node: Node)\n                \n            \n\n\n            \n                \n                    Defined in network/node-info-card.component.ts:70\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    node\n                                    \n                                                Node\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnChanges\n                        \n                    \n                \n            \n            \n                \nngOnChanges()\n                \n            \n\n\n            \n                \n                    Defined in network/node-info-card.component.ts:38\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        closed\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in network/node-info-card.component.ts:31\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        expanded\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in network/node-info-card.component.ts:32\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        neighbors\n                        \n                    \n                \n            \n                \n                    \n                        Type :     literal type\n\n                    \n                \n                    \n                        \n                                Defined in network/node-info-card.component.ts:36\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        nodeData\n                        \n                    \n                \n            \n                \n                    \n                        Type :         NodeData\n\n                    \n                \n                    \n                        \n                                Defined in network/node-info-card.component.ts:34\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n    \n        import { Component, Input, OnChanges } from \"@angular/core\";\nimport { Node } from './network-models';\n\n\nexport interface NodeData {\n    node: Node;\n    count?: number; // The count displayed may be different from the node count (for edges)\n}\n\n@Component({\n    selector: \"sq-node-info-card\",\n    templateUrl: \"node-info-card.component.html\",\n    styles: [`\n.card {\n    top: 5px;\n    left: 0;\n    right: 0;\n    width: 80%;\n}\n.circular-image {\n    width: 1.5em;\n    height: 1.5em;\n    border-radius: 50%;\n    object-fit: cover;\n}\n    `]\n})\nexport class BsNodeInfoCard implements OnChanges {\n    @Input() node: Node;\n\n    closed: boolean;\n    expanded: boolean;\n\n    nodeData: NodeData;\n\n    neighbors: {[type: string]: NodeData[]};\n\n    ngOnChanges() {\n        this.closed = false;\n        this.expanded = false;\n        this.nodeData = { node: this.node, count: this.node.count };\n\n        this.neighbors = {};\n        this.node.context.edges\n            .stream()\n            .filter(e => e.from === this.node.id || e.to === this.node.id) // Filter edges\n            .map(e => {\n                const id = e.from === this.node.id ? e.to : e.from\n                const node = this.node.context.nodes.get(id);\n                return {node, count: e.count};\n            }) // get node and edge count\n            .forEach(item => {\n                if(item.node) {\n                    const type = item.node.type.field ?\n                        item.node.context.appService.getPluralLabel(item.node.type.field) : // Try to get the \"pretty label\"\n                        item.node.type.name; // Or just use the node type's name\n                    if(!this.neighbors[type]) {\n                        this.neighbors[type] = []; // Initialize the neighbor array\n                    }\n                    // Create the node data\n                    this.neighbors[type].push({ node: item.node, count: item.count } as NodeData);\n                }\n                return true;\n            });\n        // Sort the neighbors by decreasing count number\n        Object.values(this.neighbors)\n            .forEach(list => list.sort((a,b) => (b.count || 0) - (a.count || 0)));\n    }\n\n    focusNode(node: Node) {\n        // Hack to gain access to the network instance (networkService does not have the focus() method)\n        const networkInstance = node.context.networkService['networks'][node.context.name];\n        networkInstance.focus(node.id, {animation: true}); // Move the view to this node with animation\n        networkInstance.selectNodes([node.id], true); // Warning: does not trigger events...\n        node.context.select(node, undefined); // Select the node to update info cards, actions\n        return false;\n    }\n}\n    \n\n    \n        \n    \n        \n            \n            \n                \n            \n            \n                \n            \n        \n        \n            \n                \n                    {{neighbor.key | sqMessage}}\n                    \n                        \n                            \n                                \n                            \n                        \n                    \n                \n            \n        \n    \n\n\n\n    \n    {{nodeData.node['icon']['code']}}\n    {{nodeData.node.label}}\n     0\" class=\"me-2 text-muted\" title=\"{{ 'msg#network.infocards.count' | sqMessage }}\">({{nodeData.count}})\n\n    \n\n    \n            \n.card {\n    top: 5px;\n    left: 0;\n    right: 0;\n    width: 80%;\n}\n.circular-image {\n    width: 1.5em;\n    height: 1.5em;\n    border-radius: 50%;\n    object-fit: cover;\n}\n    \n\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '                                                                                                                                                                        {{neighbor.key | sqMessage}}                                                                                                                                                                                                                                {{nodeData.node[\\'icon\\'][\\'code\\']}}    {{nodeData.node.label}}     0\" class=\"me-2 text-muted\" title=\"{{ \\'msg#network.infocards.count\\' | sqMessage }}\">({{nodeData.count}})'\n    var COMPONENTS = [{'name': 'AgGridViewComponent', 'selector': 'sq-ag-grid-view'},{'name': 'BsEdgeInfoCard', 'selector': 'sq-edge-info-card'},{'name': 'BsFacetDate', 'selector': 'sq-facet-date'},{'name': 'BsFacetHeatmapComponent', 'selector': 'sq-facet-heatmap'},{'name': 'BsFacetTimelineComponent', 'selector': 'sq-facet-timeline'},{'name': 'BsHeatmapComponent', 'selector': 'sq-heatmap'},{'name': 'BsNodeInfoCard', 'selector': 'sq-node-info-card'},{'name': 'BsResultsHeatmapView', 'selector': 'sq-results-heatmap-view'},{'name': 'BsTimelineComponent', 'selector': 'sq-timeline'},{'name': 'BsTooltipComponent', 'selector': 'sq-tooltip'},{'name': 'DataModalComponent', 'selector': 'sq-data-modal'},{'name': 'FacetNgxChart', 'selector': 'sq-facet-ngx-chart'},{'name': 'FacetWrapperComponent', 'selector': 'facet-wrapper'},{'name': 'FusionChart', 'selector': 'sq-fusion-chart'},{'name': 'MapComponent', 'selector': 'sq-googlemaps'},{'name': 'MoneyCloudComponent', 'selector': 'sq-money-cloud'},{'name': 'MoneyTimelineComponent', 'selector': 'sq-money-timeline'},{'name': 'NetworkComponent', 'selector': 'sq-network'},{'name': 'NgxChart', 'selector': 'sq-ngx-chart'},{'name': 'ResultTimeline', 'selector': 'sq-result-timeline'},{'name': 'TimelineLegendComponent', 'selector': 'sq-timeline-legend'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'BsNodeInfoCard'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/BsTimelineModule.html":{"url":"modules/BsTimelineModule.html","title":"module - BsTimelineModule","body":"\n                   \n\n\n\n\n    Modules\n    BsTimelineModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_BsTimelineModule\n\n\n\ncluster_BsTimelineModule_exports\n\n\n\ncluster_BsTimelineModule_imports\n\n\n\ncluster_BsTimelineModule_declarations\n\n\n\n\nBsFacetDate\n\nBsFacetDate\n\n\n\nBsTimelineModule\n\nBsTimelineModule\n\nBsTimelineModule -->\n\nBsFacetDate->BsTimelineModule\n\n\n\n\n\nBsFacetTimelineComponent\n\nBsFacetTimelineComponent\n\nBsTimelineModule -->\n\nBsFacetTimelineComponent->BsTimelineModule\n\n\n\n\n\nBsTimelineComponent\n\nBsTimelineComponent\n\nBsTimelineModule -->\n\nBsTimelineComponent->BsTimelineModule\n\n\n\n\n\nTimelineLegendComponent\n\nTimelineLegendComponent\n\nBsTimelineModule -->\n\nTimelineLegendComponent->BsTimelineModule\n\n\n\n\n\nBsFacetDate \n\nBsFacetDate \n\nBsFacetDate  -->\n\nBsTimelineModule->BsFacetDate \n\n\n\n\n\nBsFacetTimelineComponent \n\nBsFacetTimelineComponent \n\nBsFacetTimelineComponent  -->\n\nBsTimelineModule->BsFacetTimelineComponent \n\n\n\n\n\nBsTimelineComponent \n\nBsTimelineComponent \n\nBsTimelineComponent  -->\n\nBsTimelineModule->BsTimelineComponent \n\n\n\n\n\nTimelineLegendComponent \n\nTimelineLegendComponent \n\nTimelineLegendComponent  -->\n\nBsTimelineModule->TimelineLegendComponent \n\n\n\n\n\nBsHeatmapModule\n\nBsHeatmapModule\n\nBsTimelineModule -->\n\nBsHeatmapModule->BsTimelineModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            timeline/bootstrap/timeline.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Declarations\n                    \n                        \n                            BsFacetDate\n                        \n                        \n                            BsFacetTimelineComponent\n                        \n                        \n                            BsTimelineComponent\n                        \n                        \n                            TimelineLegendComponent\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            BsHeatmapModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            BsFacetDate\n                        \n                        \n                            BsFacetTimelineComponent\n                        \n                        \n                            BsTimelineComponent\n                        \n                        \n                            TimelineLegendComponent\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import {NgModule} from \"@angular/core\";\nimport {CommonModule} from \"@angular/common\";\nimport {FormsModule, ReactiveFormsModule} from \"@angular/forms\";\n\nimport {IntlModule} from \"@sinequa/core/intl\";\n\nimport {UtilsModule} from \"@sinequa/components/utils\";\nimport {BsSelectionModule} from \"@sinequa/components/selection\";\nimport {BsActionModule} from \"@sinequa/components/action\";\nimport {BsHeatmapModule} from \"@sinequa/analytics/heatmap\";\n\nimport {BsTimelineComponent} from \"./timeline.component\";\nimport {BsFacetTimelineComponent} from \"./facet-timeline.component\";\nimport { TimelineLegendComponent } from \"./timeline-legend.component\";\nimport { BsFacetDate } from \"./facet-date\";\nimport { BsAdvancedModule } from \"@sinequa/components/advanced\";\nimport { BsFacetModule } from \"@sinequa/components/facet\";\nimport { CollapseModule } from \"@sinequa/components/collapse\";\n\n@NgModule({\n    imports: [\n        FormsModule, ReactiveFormsModule,\n        CommonModule,\n        IntlModule,\n\n        UtilsModule,\n        BsSelectionModule,\n        BsActionModule,\n        BsHeatmapModule, // We need the heatmap module for the tooltip component\n        BsAdvancedModule,\n        BsFacetModule,\n        CollapseModule,\n    ],\n    declarations: [\n        BsTimelineComponent,\n        BsFacetTimelineComponent,\n        TimelineLegendComponent,\n        BsFacetDate\n    ],\n    exports: [\n        BsTimelineComponent,\n        BsFacetTimelineComponent,\n        TimelineLegendComponent,\n        BsFacetDate\n    ]\n})\nexport class BsTimelineModule {\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/BsTooltipComponent.html":{"url":"components/BsTooltipComponent.html","title":"component - BsTooltipComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  BsTooltipComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    heatmap/bootstrap/tooltip.component.ts\n\n\n\n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                sq-tooltip\n            \n\n\n            \n                styles\n                \n.sq-tooltip {\n    z-index: 10;\n}\n\n.sq-tooltip::after {\n    content: \" \";\n    position: absolute;\n    top: 12px;\n    border-width: 8px;\n    border-style: solid;\n}\n\n.sq-tooltip.right::after {\n    left: -17px;\n    border-color: transparent rgb(0,0,0,0.125) transparent transparent;\n}\n\n.sq-tooltip.left::after {\n    right: -17px;\n    border-color: transparent transparent transparent rgb(0,0,0,0.125);\n}\n    \n            \n\n            \n                template\n                \n    \n        \n    \n\n\n            \n\n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n\n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                left\n                            \n                            \n                                orientation\n                            \n                            \n                                right\n                            \n                            \n                                theme\n                            \n                            \n                                top\n                            \n                        \n                    \n                \n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    style\n                                \n                            \n                        \n                    \n        \n    \n\n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        left\n                    \n                \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 0\n                    \n                \n                        \n                            \n                                    Defined in heatmap/bootstrap/tooltip.component.ts:38\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        orientation\n                    \n                \n                \n                    \n                        Type :     \"left\" | \"right\"\n\n                    \n                \n                \n                    \n                        Default value : \"right\"\n                    \n                \n                        \n                            \n                                    Defined in heatmap/bootstrap/tooltip.component.ts:37\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        right\n                    \n                \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 0\n                    \n                \n                        \n                            \n                                    Defined in heatmap/bootstrap/tooltip.component.ts:39\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        theme\n                    \n                \n                \n                    \n                        Type :     \"light\" | \"dark\"\n\n                    \n                \n                \n                    \n                        Default value : \"light\"\n                    \n                \n                        \n                            \n                                    Defined in heatmap/bootstrap/tooltip.component.ts:41\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        top\n                    \n                \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 0\n                    \n                \n                        \n                            \n                                    Defined in heatmap/bootstrap/tooltip.component.ts:40\n                            \n                        \n            \n        \n\n\n\n\n\n\n    \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        style\n                    \n                \n\n                \n                    \n                        getstyle()\n                    \n                \n                            \n                                \n                                    Defined in heatmap/bootstrap/tooltip.component.ts:43\n                                \n                            \n\n            \n        \n\n\n\n\n    \n        import {Component, Input} from '@angular/core';\n\n@Component({\n    selector: \"sq-tooltip\",\n    template: `\n\n    \n        \n    \n\n`,\n    styles: [`\n.sq-tooltip {\n    z-index: 10;\n}\n\n.sq-tooltip::after {\n    content: \" \";\n    position: absolute;\n    top: 12px;\n    border-width: 8px;\n    border-style: solid;\n}\n\n.sq-tooltip.right::after {\n    left: -17px;\n    border-color: transparent rgb(0,0,0,0.125) transparent transparent;\n}\n\n.sq-tooltip.left::after {\n    right: -17px;\n    border-color: transparent transparent transparent rgb(0,0,0,0.125);\n}\n    `]\n})\nexport class BsTooltipComponent {\n    @Input() orientation: \"left\" | \"right\" = \"right\";\n    @Input() left = 0;\n    @Input() right = 0;\n    @Input() top = 0;\n    @Input() theme: \"light\" | \"dark\" = \"light\";\n\n    get style() {\n        if(this.orientation === \"right\") {\n            return {\n                'left.px': this.left + 7,\n                'top.px': this.top - 21, // Align tooltip arrow\n            }\n        }\n        else {\n            return {\n                'right.px': this.right + 7,\n                'top.px': this.top - 21, // Align tooltip arrow\n            }\n        }\n    }\n}\n    \n\n\n    \n            \n.sq-tooltip {\n    z-index: 10;\n}\n\n.sq-tooltip::after {\n    content: \" \";\n    position: absolute;\n    top: 12px;\n    border-width: 8px;\n    border-style: solid;\n}\n\n.sq-tooltip.right::after {\n    left: -17px;\n    border-color: transparent rgb(0,0,0,0.125) transparent transparent;\n}\n\n.sq-tooltip.left::after {\n    right: -17px;\n    border-color: transparent transparent transparent rgb(0,0,0,0.125);\n}\n    \n\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '                '\n    var COMPONENTS = [{'name': 'AgGridViewComponent', 'selector': 'sq-ag-grid-view'},{'name': 'BsEdgeInfoCard', 'selector': 'sq-edge-info-card'},{'name': 'BsFacetDate', 'selector': 'sq-facet-date'},{'name': 'BsFacetHeatmapComponent', 'selector': 'sq-facet-heatmap'},{'name': 'BsFacetTimelineComponent', 'selector': 'sq-facet-timeline'},{'name': 'BsHeatmapComponent', 'selector': 'sq-heatmap'},{'name': 'BsNodeInfoCard', 'selector': 'sq-node-info-card'},{'name': 'BsResultsHeatmapView', 'selector': 'sq-results-heatmap-view'},{'name': 'BsTimelineComponent', 'selector': 'sq-timeline'},{'name': 'BsTooltipComponent', 'selector': 'sq-tooltip'},{'name': 'DataModalComponent', 'selector': 'sq-data-modal'},{'name': 'FacetNgxChart', 'selector': 'sq-facet-ngx-chart'},{'name': 'FacetWrapperComponent', 'selector': 'facet-wrapper'},{'name': 'FusionChart', 'selector': 'sq-fusion-chart'},{'name': 'MapComponent', 'selector': 'sq-googlemaps'},{'name': 'MoneyCloudComponent', 'selector': 'sq-money-cloud'},{'name': 'MoneyTimelineComponent', 'selector': 'sq-money-timeline'},{'name': 'NetworkComponent', 'selector': 'sq-network'},{'name': 'NgxChart', 'selector': 'sq-ngx-chart'},{'name': 'ResultTimeline', 'selector': 'sq-result-timeline'},{'name': 'TimelineLegendComponent', 'selector': 'sq-timeline-legend'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'BsTooltipComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ChartDataPoint.html":{"url":"interfaces/ChartDataPoint.html","title":"interface - ChartDataPoint","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ChartDataPoint\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            ngx-charts/chart/chart.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            name\n                                        \n                                \n                                \n                                        \n                                            value\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        name\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        name:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        value\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        value:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import {Component, Input, Output, EventEmitter, OnInit, OnDestroy, OnChanges, DoCheck, SimpleChanges, ViewChild, ElementRef, Type} from \"@angular/core\";\nimport {Subscription} from \"rxjs\";\nimport {Utils} from \"@sinequa/core/base\";\nimport {IntlService} from \"@sinequa/core/intl\";\nimport {BaseChartComponent, BarVerticalComponent, BarHorizontalComponent} from \"@swimlane/ngx-charts\";\nimport {UIService} from \"@sinequa/components/utils\";\n\n\nexport interface ChartOptions {\n    type: string;\n    colorScheme?: string;\n    getItemColor?: (value: string) => string;\n    tickFormatter?: (value: any) => string;\n}\n\nexport interface ChartDataPoint {\n    name: string;\n    value: number;\n}\n\n@Component({\n    selector: \"sq-ngx-chart\",\n    templateUrl: \"./chart.html\",\n    styleUrls: [\"./chart.scss\"]\n})\nexport class NgxChart implements OnInit, OnDestroy, OnChanges, DoCheck {\n    @Input() options: ChartOptions;\n    @Input() data: ChartDataPoint[];\n    @Output(\"item-click\") itemClickEvent: EventEmitter;\n    @ViewChild(\"wrapper\", {static: true}) wrapper: ElementRef;\n    @ViewChild(\"tooltipTemplate\", {static: false}) tooltipTemplate;\n    @ViewChild(\"chart\", {static: false}) chart: BaseChartComponent;\n    localeChange: Subscription;\n    attached: boolean;\n\n    constructor(\n        protected intlService: IntlService,\n        private uiService: UIService) {\n        this.itemClickEvent = new EventEmitter();\n    }\n\n    updateChart() {\n        if (!!this.chart) this.chart.update();\n    }\n\n    private onResize = () => this.updateChart();\n\n    ngOnInit() {\n        this.uiService.addElementResizeListener(this.wrapper.nativeElement, this.onResize);\n        this.localeChange = Utils.subscribe(this.intlService.events,\n            (value) => {\n                this.updateChart();\n            });\n    }\n\n    ngOnDestroy() {\n        this.uiService.removeElementResizeListener(this.wrapper.nativeElement, this.onResize);\n        this.localeChange.unsubscribe();\n    }\n\n    get chartType(): string {\n        return Utils.toLowerCase(this.options.type);\n    }\n\n    chartComponent(type:string) : Type {\n        switch(type){\n            case \"horizontalbar\": return BarHorizontalComponent;\n            case \"verticaltalbar\": return BarVerticalComponent;\n            default: return BarVerticalComponent;\n        }\n    }\n\n    // so we don't end up with no color scheme if the color scheme is not set\n    get colorScheme(): string {\n        return this.options.colorScheme || \"cool\";\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n    }\n\n    // This is a clunky way of avoiding (briefly) seeing ngx-charts rendering with the default 600x400 dimensions\n    ngDoCheck() {\n        if (!this.attached && !!this.wrapper) {\n            if (document.body.contains(this.wrapper.nativeElement)) {\n                this.updateChart();\n                this.attached = true;\n            }\n        }\n    }\n\n    select = (dataPoint: ChartDataPoint): void => {\n        this.itemClickEvent.emit(dataPoint);\n    }\n}\n    \n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ChartOptions.html":{"url":"interfaces/ChartOptions.html","title":"interface - ChartOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ChartOptions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            ngx-charts/chart/chart.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            colorScheme\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            getItemColor\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            tickFormatter\n                                        \n                                \n                                \n                                        \n                                            type\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        colorScheme\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        colorScheme:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        getItemColor\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        getItemColor:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        tickFormatter\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        tickFormatter:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        type\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        type:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import {Component, Input, Output, EventEmitter, OnInit, OnDestroy, OnChanges, DoCheck, SimpleChanges, ViewChild, ElementRef, Type} from \"@angular/core\";\nimport {Subscription} from \"rxjs\";\nimport {Utils} from \"@sinequa/core/base\";\nimport {IntlService} from \"@sinequa/core/intl\";\nimport {BaseChartComponent, BarVerticalComponent, BarHorizontalComponent} from \"@swimlane/ngx-charts\";\nimport {UIService} from \"@sinequa/components/utils\";\n\n\nexport interface ChartOptions {\n    type: string;\n    colorScheme?: string;\n    getItemColor?: (value: string) => string;\n    tickFormatter?: (value: any) => string;\n}\n\nexport interface ChartDataPoint {\n    name: string;\n    value: number;\n}\n\n@Component({\n    selector: \"sq-ngx-chart\",\n    templateUrl: \"./chart.html\",\n    styleUrls: [\"./chart.scss\"]\n})\nexport class NgxChart implements OnInit, OnDestroy, OnChanges, DoCheck {\n    @Input() options: ChartOptions;\n    @Input() data: ChartDataPoint[];\n    @Output(\"item-click\") itemClickEvent: EventEmitter;\n    @ViewChild(\"wrapper\", {static: true}) wrapper: ElementRef;\n    @ViewChild(\"tooltipTemplate\", {static: false}) tooltipTemplate;\n    @ViewChild(\"chart\", {static: false}) chart: BaseChartComponent;\n    localeChange: Subscription;\n    attached: boolean;\n\n    constructor(\n        protected intlService: IntlService,\n        private uiService: UIService) {\n        this.itemClickEvent = new EventEmitter();\n    }\n\n    updateChart() {\n        if (!!this.chart) this.chart.update();\n    }\n\n    private onResize = () => this.updateChart();\n\n    ngOnInit() {\n        this.uiService.addElementResizeListener(this.wrapper.nativeElement, this.onResize);\n        this.localeChange = Utils.subscribe(this.intlService.events,\n            (value) => {\n                this.updateChart();\n            });\n    }\n\n    ngOnDestroy() {\n        this.uiService.removeElementResizeListener(this.wrapper.nativeElement, this.onResize);\n        this.localeChange.unsubscribe();\n    }\n\n    get chartType(): string {\n        return Utils.toLowerCase(this.options.type);\n    }\n\n    chartComponent(type:string) : Type {\n        switch(type){\n            case \"horizontalbar\": return BarHorizontalComponent;\n            case \"verticaltalbar\": return BarVerticalComponent;\n            default: return BarVerticalComponent;\n        }\n    }\n\n    // so we don't end up with no color scheme if the color scheme is not set\n    get colorScheme(): string {\n        return this.options.colorScheme || \"cool\";\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n    }\n\n    // This is a clunky way of avoiding (briefly) seeing ngx-charts rendering with the default 600x400 dimensions\n    ngDoCheck() {\n        if (!this.attached && !!this.wrapper) {\n            if (document.body.contains(this.wrapper.nativeElement)) {\n                this.updateChart();\n                this.attached = true;\n            }\n        }\n    }\n\n    select = (dataPoint: ChartDataPoint): void => {\n        this.itemClickEvent.emit(dataPoint);\n    }\n}\n    \n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Column.html":{"url":"interfaces/Column.html","title":"interface - Column","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  Column\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            ag-grid/ag-grid-view.component.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                    ColDef\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            $column\n                                        \n                                \n                                \n                                        \n                                            field\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        $column\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        $column:         CCColumn\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         CCColumn\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        field\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        field:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Component, Input, OnChanges, OnDestroy, OnInit, SimpleChanges } from \"@angular/core\";\nimport { Action } from \"@sinequa/components/action\";\nimport { FacetService } from \"@sinequa/components/facet\";\nimport { SearchService } from \"@sinequa/components/search\";\nimport { SelectionEventType, SelectionService } from \"@sinequa/components/selection\";\nimport { UserPreferences } from \"@sinequa/components/user-settings\";\nimport { UIService } from \"@sinequa/components/utils\";\nimport { AppService, FormatService, Query } from \"@sinequa/core/app-utils\";\nimport { Utils } from \"@sinequa/core/base\";\nimport { IntlService } from \"@sinequa/core/intl\";\nimport { ModalService } from \"@sinequa/core/modal\";\nimport { Results, Record, CCColumn, EngineType } from \"@sinequa/core/web-services\";\nimport { ICellRendererFunc, ITooltipParams, ColDef, GridApi, ColumnApi, GridReadyEvent, RowDataChangedEvent, CellDoubleClickedEvent, SelectionChangedEvent, IDatasource, CsvExportParams, ProcessCellForExportParams, SortChangedEvent, FilterChangedEvent, FilterModifiedEvent, ModelUpdatedEvent } from 'ag-grid-community';\nimport { ApplyColumnStateParams } from \"ag-grid-community/dist/lib/columnController/columnApi\";\nimport { Subscription } from \"rxjs\";\nimport { DataModalComponent } from \"./data-modal.component\";\nimport { SqDatasource } from \"./datasource\";\nimport { FacetWrapperComponent } from \"./facet-wrapper.component\";\n\n\nexport interface Column extends ColDef {\n    field: string;\n    $column?: CCColumn;\n}\n\n\n@Component({\n    selector: 'sq-ag-grid-view',\n    templateUrl: './ag-grid-view.component.html',\n    styleUrls: ['./ag-grid-view.component.scss']\n})\nexport class AgGridViewComponent implements OnInit, OnChanges, OnDestroy {\n\n    /** Results containing the record objects displayed in this grid */\n    @Input() results?: Results;\n    /** List of column definitions for each column displayed in the grid */\n    @Input() columns: Column[];\n    /** Optional query to fetch more data from the server (defaults to searchService.query) */\n    @Input() query?: Query;\n\n    /** Width of the grid */\n    @Input() width = \"100%\";\n    /** Height of the grid */\n    @Input() height = \"600px\";\n    /** Which actions to show above the grid, if any */\n    @Input() toolbarActions: (string | Action)[] = [\"columnVisibility\", \"gridReset\", \"autosize\", \"copySelection\", \"downloadSelection\", \"formatContent\"];\n    /** Whether or not to show the results counter in the toolbar */\n    @Input() showCounter = true;\n    /** Whether or not to format the data in the grid, using the FormatService */\n    @Input() formatContent = true;\n    /** Row selection mode (forwarded to ag-grid) */\n    @Input() rowSelection: 'single' | 'multiple' | undefined = 'multiple';\n    /** Whether or not to display checkboxes in the first column of the grid to select rows */\n    @Input() displayCheckbox = false;\n    /** Choice of ag-grid theme (balham is denser) */\n    @Input() theme: \"ag-theme-balham\" | \"ag-theme-alpine\" | \"ag-theme-balham-dark\" | \"ag-theme-alpine-dark\" = \"ag-theme-alpine\";\n    /** Default column grid (possibly overriden by column definitions) */\n    @Input() defaultColumnWidth = 200;\n    /** Configure scrolling functionality */\n    @Input() rowModelType: string = 'infinite';\n\n    /** Default column definition */\n    @Input()\n    defaultColDef: ColDef = {\n        resizable: true\n    }\n    \n    /** Actual column definitions (derived from this.columns) */\n    colDefs: ColDef[] = [];\n    \n    /** ag-grid API for the grid and the column model */\n    gridApi: GridApi | null | undefined;\n    gridColumnApi: ColumnApi | null | undefined;\n\n    /** Datasource implementation for infinite scrolling row model */\n    datasource?: IDatasource;\n\n    // Flags to manage the state of filters and sorts\n    _filterInput = false;\n    \n    /** Custom components */\n    frameworkComponents = {\n        facet: FacetWrapperComponent\n    };\n    \n    /** List of action buttons displayed in the toolbar */\n    gridActions: Action[];\n    /** Action button allowing to toggle each column's visibility */\n    columnsAction: Action;\n\n    /** If rowModelType is 'clientSide', set rowData directly */\n    rowData: Record[] = [];\n\n    /** List of subscriptions to clean up on destroy */\n    subscriptions: Subscription[] = [];\n\n    constructor(\n        public appService: AppService,\n        public searchService: SearchService,\n        public facetService: FacetService,\n        public intlService: IntlService,\n        public formatService: FormatService,\n        public selectionService: SelectionService,\n        public uiService: UIService,\n        public modalService: ModalService,\n        public prefs: UserPreferences\n    ) {\n        this.columnsAction = new Action({\n            icon: \"fas fa-columns fa-fw\",\n            text: \"msg#grid.columns\",\n            scrollable: true,\n            children: []\n        });\n    }\n\n    ngOnInit() {\n        // Subscribe to the selection service to reflect external row selection into the grid\n        this.subscriptions.push(this.selectionService.events.subscribe(event => {\n            if(event.source !== \"ag-grid\" && (event.type === SelectionEventType.SELECT || event.type === SelectionEventType.UNSELECT)) {\n                this.gridApi?.forEachNode(node => {\n                    if(event.records.find(r => r.id === node.data.id)) {\n                        node.setSelected(event.type === SelectionEventType.SELECT, undefined, true);\n                    }\n                });\n            }\n        }));\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n        if(changes.columns) {\n            this.createColumns();\n        }\n        if(changes.results) {\n            this.createRows();\n        }\n        if(!this.gridActions || changes.toolbarActions) {\n            // Override the \"formatContent\" property if it exists in the user preferences\n            const formatContent = this.prefs.get(\"ag-grid-format-content\");\n            if(formatContent !== undefined) {\n                this.formatContent = formatContent;\n            }\n            this.createActions();\n        }\n    }\n\n    ngOnDestroy() {\n        // Unsubscribe from any subscription\n        this.subscriptions.forEach(s => s.unsubscribe());\n    }\n\n    /**\n     * Create the list of column definitions by deriving the input\n     * `columns` list. Since record objects do not necessarily contain\n     * clean string data, we add a custom cellRenderer and tooltipValueGetter.\n     * Sinequa provides header names and tells us if a column can be sorted on,\n     * or filtered.\n     */\n    createColumns() {\n        this.colDefs = this.columns?.map((col,i) => {\n\n            col = Utils.extend({}, col);\n            col.$column = this.appService.getColumn(col.field);\n\n            col.tooltipValueGetter = col.tooltipValueGetter || this.tooltipValueGetter;\n            col.headerName = col.headerName || (col.$column?.label? this.intlService.formatMessage(col.$column?.label) : col.field);\n            col.headerTooltip = col.headerTooltip || col.headerName;\n            col.cellRenderer = col.cellRendererFramework ? undefined : col.cellRenderer || this.renderCell;\n            col.sortable = col.sortable || this.appService.isSortable(col.field);\n            const hidePref = this.prefs.get(\"ag-grid-hide-\"+col.field);\n            col.hide = hidePref === undefined? col.hide : hidePref;\n            col.width = col.width || this.defaultColumnWidth;\n\n            // How to filter the column\n            if(col.filter === undefined) {\n                switch(col.$column?.eType) {\n                    case EngineType.double:\n                    case EngineType.float:\n                    case EngineType.integer:\n                        col.filter = 'agNumberColumnFilter'; break;\n                    case EngineType.date:\n                    case EngineType.dates:\n                    case EngineType.dateTime:\n                    case EngineType.dateTimes:\n                        col.filter = 'agDateColumnFilter'; break;\n                    case EngineType.string:\n                    case EngineType.csv:\n                        col.filter = true; break;\n                }\n            }\n\n            if(i === 0 && this.displayCheckbox) {\n                // Note that header selection checkbox doesn't work with the infinite row model\n                col.checkboxSelection = true;\n            }\n\n            return col;\n        }) || [];\n\n        // Populate the columnsAction: for each column we toggle the \"hide\" property and persist that preference\n        this.columnsAction.children = this.colDefs.map(col => new Action({\n            name: col.field,\n            text: col.headerName,\n            selected: !col.hide,\n            action: (action, event) => {\n                action.selected = !action.selected;\n                this.gridColumnApi?.setColumnVisible(col.field!, action.selected);\n                if(action.selected) {\n                    this.prefs.delete(\"ag-grid-hide-\"+col.field);\n                }\n                else {\n                    this.prefs.set(\"ag-grid-hide-\"+col.field, true);\n                }\n                event.stopPropagation();\n            }\n        }));\n    }\n\n    /**\n     * Create the rows' datasource\n     */\n    createRows() {\n        if(this.gridApi && this.gridColumnApi && this.rowModelType === 'infinite') {\n            // Create a new datasource\n            this.datasource = this.makeDatasource();\n            // Apply to the grid\n            this.gridApi.setDatasource(this.datasource);\n            // The query that yielded this data may have active filters & sort: we want the grid to reflect this\n            this.updateFilterState(this.query || this.searchService.query);\n            this.updateSortState(this.query || this.searchService.query);\n        } else if (this.rowModelType === 'clientSide') {\n            this.rowData = this.results?.records || [];\n        }\n    }\n\n    /**\n     * For each column of the grid, look for an active filter in the query\n     * and create a filter model that the grid can understand.\n     * Finally, set the filter model via the grid API.\n     * @param query \n     */\n    updateFilterState(query: Query) {\n        let model = {};\n        for(let col of this.colDefs) {\n            const select = query.findSelect(\"grid-filter-\"+col.field);\n            if(col.field && select) {\n                if(col.filter === \"facet\") { // Sinequa facets\n                    model[col.field] = {facetActive: true}; // Lets us tell ag-grid that a custom filter is active this column\n                }\n                else { // AG Grid filters\n                    const filterType = col.filter ===\"agNumberColumnFilter\"? \"number\" : col.filter ===\"agDateColumnFilter\"? \"date\" : \"text\";\n                    model[col.field] = SqDatasource.exprToModel(filterType, col.field, select.expression);\n                }\n            }\n        }\n        this.gridApi?.setFilterModel(model);\n    }\n\n    /**\n     * If the query has a custom orderby clause, create\n     * a sort model that the grid can understand and apply\n     * that model via the grid column API.\n     * @param query \n     */\n    updateSortState(query: Query) {\n        const model: ApplyColumnStateParams = {};\n        if(query.orderBy) {\n            let [colId, sort] = query.orderBy.split(\" \");\n            colId = this.appService.getColumnAlias(this.appService.getColumn(colId));\n            model.state = [{colId, sort}];\n        }\n        else {\n            model.defaultState = {sort: null};\n        }\n        this.gridColumnApi?.applyColumnState(model);\n    }\n\n    /**\n     * Create the actions displayed in the toolbar\n     */\n    createActions() {\n        // Initialization of button actions\n        this.gridActions = [];\n        for(let action of this.toolbarActions) {\n            if(!Utils.isString(action)) {\n                this.gridActions.push(action);\n            }\n            else if(action === \"columnVisibility\") {\n                this.gridActions.push(this.columnsAction);\n            }\n            else if(action === \"gridReset\") {\n                this.gridActions.push(new Action({\n                    icon: \"fas fa-sync-alt fa-fw\",\n                    text: \"msg#grid.reset\",\n                    title: \"msg#grid.resetTitle\",\n                    action: () => this.resetState()\n                }));\n            }\n            else if(action === \"autosize\") {\n                this.gridActions.push(new Action({\n                    icon: \"fas fa-arrows-alt-h fa-fw\",\n                    text: \"msg#grid.autosize\",\n                    title: \"msg#grid.autosizeTitle\",\n                    action: () => this.autoResize()\n                }));\n            }\n            else if(action === \"copySelection\") {\n                this.gridActions.push(new Action({\n                    icon: \"fas fa-copy fa-fw\",\n                    text: \"msg#grid.copy\",\n                    title: \"msg#grid.copyTitle\",\n                    action: () => this.copyToClipboard()\n                }));\n            }\n            else if(action === \"downloadSelection\") {\n                this.gridActions.push(new Action({\n                    icon: \"fas fa-download fa-fw\",\n                    text: \"msg#grid.download\",\n                    title: \"msg#grid.downloadTitle\",\n                    action: () => this.downloadCsv()\n                }));\n            }\n            else if(action === \"formatContent\") {\n                this.gridActions.push(new Action({\n                    icon: this.formatContent? \"far fa-fw fa-check-square\" : \"far fa-fw fa-square\",\n                    text: \"msg#grid.formatData\",\n                    title: \"msg#grid.formatDataTitle\",\n                    action: action => this.toggleFormatContent(action)\n                }));\n            }\n        }\n    }\n\n    // Custom rendering functions\n\n    /**\n     * A function that returns a HTML string for each cell.\n     * The value in the cell is params.value and the column definition\n     * is params.colDef.\n     */\n    @Input()\n    renderCell: ICellRendererFunc = (params: any): HTMLElement |string => {\n        if(this.formatContent) {\n            return this.formatService.formatValue(params.value, params.colDef.$column);\n        }\n        else {\n            return this.formatService.formatRaw(params.value);\n        }\n    }\n\n    /**\n     * A function that returns a tooltip string for each cell's value\n     */\n    @Input()\n    tooltipValueGetter = (params: ITooltipParams) => {\n        return this.formatService.formatRaw(params.value);\n    }\n\n    /**\n     * A function that returns a string formatted for export for each cell's value\n     */\n    @Input()\n    exportValueGetter = (params: ProcessCellForExportParams) => {\n        return this.formatService.formatRaw(params.value);\n    }\n\n\n    /**\n     * Create a datasource object from the given results and query\n     */\n    makeDatasource() : IDatasource {\n        if(this.results) {\n            return new SqDatasource(this.results, this.query, this.colDefs, this.searchService, this.appService, this.facetService, this.selectionService);\n        }\n        return {getRows: () => []};\n    }\n\n\n    // User actions\n\n    /**\n     * Reset filtering, sorting, column width and order\n     */\n    resetState() {\n        if(!this.query) {\n            // In global search mode, the new query & results will update the filter model\n            this.datasource?.destroy?.();\n            delete this.searchService.query.orderBy;\n            if(this.searchService.query.select?.length) {\n                for(let i=this.searchService.query.select.length; i--; i>=0) {\n                    if(this.searchService.query.select[i].facet.startsWith(\"grid-filter-\")) {\n                        this.searchService.query.removeSelect(i);\n                    }\n                }\n            }\n            this.searchService.search();\n        }\n        else {\n            // clear filters\n            this.gridApi?.setFilterModel({});\n            // clear sort\n            this.gridColumnApi?.applyColumnState({\n                defaultState:{\n                    sort: null\n                }\n            })\n        }\n        // clear width, visiblity, order\n        this.gridColumnApi?.applyColumnState({\n            defaultState:{\n                width: this.defaultColumnWidth\n            },\n            state: this.columns.map(c => {\n                // Delete the visibility preference\n                this.prefs.delete(\"ag-grid-hide-\"+c.field, true);\n                // Update the visibility action\n                const visibilityAction = this.columnsAction.children?.find(a => a.name === c.field);\n                if(visibilityAction) {\n                    visibilityAction.selected = !c.hide;\n                }\n                return {\n                    colId: c.field, // Resets the ordering\n                    hide: !!c.hide // Resets the visibility\n                };\n            }),\n            applyOrder: true\n        });\n        // Sync to apply the new visibility preference\n        this.prefs.sync();\n    }\n\n    /**\n     * Returns a configuration for exporting the data as CSV.\n     */\n    getExportParams(): CsvExportParams {\n        const params: CsvExportParams = {\n            allColumns: true,\n            processCellCallback: this.exportValueGetter\n        };\n        if(this.gridApi?.getSelectedRows().length) {\n            params.onlySelected = true;\n        }\n        return params;\n    }\n\n    /**\n     * Copy the data to the clipboard\n     */\n    copyToClipboard() {\n        const data = this.gridApi?.getDataAsCsv(this.getExportParams());\n        if(data) {\n            this.uiService.copyToClipboard(data);\n        }\n    }\n    \n    /** Download the data as a CSV file */\n    downloadCsv() {\n        this.gridApi?.exportDataAsCsv(this.getExportParams());\n    }\n\n    /**\n     * Auto-resize the columns\n     */\n    autoResize() {\n        this.gridColumnApi?.autoSizeAllColumns();\n    }\n    \n    /**\n     * Called when the user toggles the \"format content\" checkbox\n     */\n    toggleFormatContent(action: Action) {\n        this.formatContent = !this.formatContent;\n        action.icon = this.formatContent? \"far fa-fw fa-check-square\" : \"far fa-fw fa-square\";\n        this.prefs.set(\"ag-grid-format-content\", this.formatContent);\n        this.gridApi?.refreshCells({force: true})\n    }\n\n    // AG-GRID events\n\n    /**\n     * Callback function called when the grid is initialized\n     */\n    onGridReady(event: GridReadyEvent) {\n        this.gridApi = event.api;\n        this.gridColumnApi = event.columnApi;\n        // Create the rows in case there are already results available\n        this.createRows();\n    }\n\n    /**\n     * Callback function called when data in the grid changes\n     */\n    onRowDataChanged(event: RowDataChangedEvent) {\n        \n    }\n\n    /**\n     * Callback function called when users double click on a cell\n     */\n    onCellDoubleClicked(event: CellDoubleClickedEvent) {\n        this.modalService.open(DataModalComponent, {\n            model: {\n                row: event.data,\n                column: event.colDef.headerName || event.colDef.field,\n                cell: event.value,\n                cccolumn: (event.colDef as Column).$column,\n                formatContent: this.formatContent\n            }\n        })\n    }\n\n    /**\n     * Callback function called when users select data in the grid\n     */\n    onSelectionChanged(event: SelectionChangedEvent) {\n        const newRows = this.gridApi?.getSelectedRows() as Record[] | undefined;\n        const oldRows = this.selectionService.getSelectedIds();\n        oldRows.forEach(id => {\n            const foundRow = newRows?.find(row => row.id === id);\n            if(!foundRow) {\n                this.selectionService.toggleSelectedRecords({id} as Record, \"ag-grid\");\n            }\n        });\n        newRows?.forEach(row => {\n            const foundId = oldRows.find(id => row.id === id);\n            if(!foundId) {\n                this.selectionService.toggleSelectedRecords(row, \"ag-grid\");\n            }\n        });\n    }\n\n    /**\n     * Callback triggered on every user key input. It is useful to capture\n     * the fact that onFilterChanged is about to be called after some\n     * user input.\n     * @param event \n     */\n     onFilterModified(event: FilterModifiedEvent) {\n        if(!this._filterInput) {\n            // Check that the model has actually changed, as the method can be called event it hasn't changed!\n            const oldModel = event.filterInstance.getModel();\n            const newModel = (event.filterInstance as any).getModelFromUi?.();\n            this._filterInput = !Utils.equals(oldModel, newModel);\n        }\n    }\n\n    /**\n     * Notify the datasource that filter have changed\n     * @param event \n     */\n    onFilterChanged(event: FilterChangedEvent) {\n        // The _filterInput flag allows us to only respond to actual user input and ignore programmatic changes\n        if(this._filterInput) {\n            this._filterInput = false;\n            (this.datasource as SqDatasource)?.filterChanged?.();\n        }\n    }\n\n    /**\n     * Notify the datasource that sort has changed\n     * @param event\n     */\n    onSortChanged(event: SortChangedEvent) {\n        (this.datasource as SqDatasource)?.sortChanged?.();\n    }\n\n    /**\n     * Update selection when new rows are inserted in the table\n     * @param event \n     */\n    onModelUpdated(event: ModelUpdatedEvent) {\n        this.gridApi?.forEachNode(node => {\n            if(node.data?.$selected && !node.isSelected()) {\n                node.setSelected(true, undefined, true);\n            }\n        });\n    }\n\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/CustomData.html":{"url":"interfaces/CustomData.html","title":"interface - CustomData","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  CustomData\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            network/providers/records-provider.ts\n        \n\n\n            \n                Description\n            \n            \n                Data structure returned by the optional parse() function of a structural edge\ntype. Contains the parsed values of a property that can be turned into one or\nmultiple nodes and edges.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            directed\n                                        \n                                \n                                \n                                        \n                                            displays\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            fieldValue\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            relations\n                                        \n                                \n                                \n                                        \n                                            values\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        directed\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        directed:     boolean[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     boolean[]\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        displays\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        displays:     string[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        fieldValue\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        fieldValue:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        relations\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        relations:     string[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string[]\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        values\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        values:     string[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Utils } from '@sinequa/core/base';\nimport { Record } from '@sinequa/core/web-services';\nimport { Action } from '@sinequa/components/action';\nimport { Node, NetworkDataset, NodeType, EdgeType, NetworkContext } from '../network-models';\nimport { BaseProvider } from './base-provider';\n\n/**\n * Extension of the Node interface, to include the Record object\n * from which the node is generated\n */\nexport interface RecordNode extends Node {\n    record: Record;\n}\n\n\n/**\n * An extension of the EdgeType interface to include properties specific to\n * structural edges (edge between a record and its metadata).\n * \n * About trigger/display: At the moment, the Record provider always adds ALL nodes and edges\n * to the dataset, but potentially with a visibility set to false. Some of the settings are\n * not compatible with each other, and some take precedence over the others:\n * - display=existingnodes takes precedence over other settings, as it is implemented as\n * a post-processing of the dataset (in onDatasetsMerged)\n * - trigger=onclick or manual take precedence over the other settings, as they set the\n * visibility to false by false, until the user performs an action\n * - trigger=oninsert is compatible with the other display settings\n */\nexport interface StructuralEdgeType extends EdgeType {\n    /** Name of the field in the record */\n    field: string;\n    /** count limits the number of values displayed and allows for pagination. Use 0 for unlimited values */\n    count?: number;\n    /** Defines when the edge should be displayed */\n    trigger: StructuralTriggerType;\n    /** showall: display all values from the field / paginate: display all value with pagination / existingnodes: only link to existing nodes / manual: only show if manual action (activated programmatically) */\n    display: StructuralDisplayType;\n    /** A function to parse metadata from a record node in a custom way */\n    parse?: (value: any, record: Record, type: StructuralEdgeType) => CustomData;\n}\n\nexport type StructuralTriggerType = \"oninsert\" | \"onclick\" | \"manual\";\nexport type StructuralDisplayType = \"all\" | \"paginate\" | \"existingnodes\" | ((node: Node, recordNode: RecordNode, index: number) => boolean);\n\n/**\n * Data structure returned by the optional parse() function of a structural edge\n * type. Contains the parsed values of a property that can be turned into one or\n * multiple nodes and edges.\n */\nexport interface CustomData {\n    values: string[]; // eg. LARRY PAGE, GOOGLE\n    displays: string[]; // eg. Larry Page, Google\n    relations?: string[]; // eg. Works At\n    directed?: boolean[]; // eg. true\n    fieldValue?: string; // A value on which to filter the data\n}\n\n/**\n * Tests whether the given edge type is a structural edge type\n * @param et an edge type\n */\nexport function isStructuralEdgeType(et: EdgeType): et is StructuralEdgeType {\n    return !!(et as StructuralEdgeType).field;\n}\n\n\n/**\n * A network provider generating nodes from records.\n * Additionally, the provider can generate the \"structural edges\" of that\n * node. Structural edges are edges between a record and the fields of\n * that record (eg. the wikipedia page of Microsoft is a record that probably\n * contains the fields \"Microsoft\" and \"Bill Gates\").\n */\nexport class RecordsProvider extends BaseProvider {\n\n    constructor(\n        public override name = \"Documents\",\n        protected nodeType: NodeType,\n        protected edgeTypes: StructuralEdgeType[],\n        protected records: Record[],\n        protected hideRecordNode = false\n    ){\n        super(name);\n    }\n\n    /**\n     * Clears the dataset and generates new record nodes\n     * @param records the list of records of this provider\n     */\n    protected updateDataset(records?: Record[]) {\n        this.dataset.clear();\n        if(!this.active || !records || records.length === 0) {\n            return; \n        }\n        this.addRecordNodes(records);\n    }\n    \n    // Record nodes\n\n    /**\n     * Generates the nodes for a list of records, including their structural\n     * edges, and adds them to the dataset.\n     * Returns the list of record nodes.\n     * @param records \n     */\n    protected addRecordNodes(records: Record[]): RecordNode[] {\n        return records.map(record => {\n            let node = this.dataset.getNode(this.getNodeId(this.nodeType, record.id));\n            if(!node) {\n                node = this.createNode(this.nodeType, record.id, record.title, !this.hideRecordNode, {record});\n                this.dataset.addNodes(node);\n                this.edgeTypes.forEach(type => {\n                    this.addStructuralEdges(node as RecordNode, type);\n                });\n            }\n            return node as RecordNode;\n        });\n    }\n\n    \n    // Structural edges\n\n    /**\n     * Generates the metadata nodes and structural edges from the given node,\n     * and merge them into the dataset.\n     * This function will automatically parse the metadata contained in the record,\n     * but it is possible to manage custom types of metadata by providing a\n     * custom parse() function via the structural edge type.\n     * @param node The record node\n     * @param type The edge type for which we want to create edges\n     */\n    protected addStructuralEdges(node: RecordNode, type: StructuralEdgeType) {\n\n        if(type.nodeTypes[0] !== this.nodeType){\n            throw new Error(`Inconsistent node type: '${type.nodeTypes[0].name}' instead of '${this.nodeType.name}'`);\n        }\n        \n        const recorddata = node.record[type.field];\n\n        if(recorddata === undefined){\n            return;\n        }\n\n        // Custom parse for mono or multi valued data\n        if(type.parse) {\n            if(Utils.isArray(recorddata)) {\n                recorddata.forEach((value,i) => { \n                    this.addCustomEdge(node, type, type.parse!(value, node.record, type));\n                });\n            }\n            else {\n                this.addCustomEdge(node, type, type.parse!(recorddata, node.record, type));\n            }\n        }\n        // Default handling for standard Sinequa Metadata\n        else {\n            const data = new NetworkDataset();\n            data.addNodes(node);\n    \n            // sourcestr\n            if(Utils.isString(recorddata)) {\n                this.addStructuralEdge(data, node, type, recorddata, recorddata, 0);\n            }\n            else if(Utils.isArray(recorddata)) {\n                recorddata.forEach((value,i) => {\n                    // sourcecsv\n                    if(Utils.isString(value)) {\n                        this.addStructuralEdge(data, node, type, value, value, i);\n                    }\n                    // entity\n                    else if(value[\"value\"]) {\n                        this.addStructuralEdge(data, node, type, value[\"value\"], value[\"display\"] || value[\"value\"], i);\n                    }\n                });\n            }\n    \n            this.dataset.merge(data);\n        }\n    }\n\n    /**\n     * Add a structural edge to a record node and adds that edge\n     * (and corresponding metadata node) to the given dataset.\n     * @param dataset The target dataset\n     * @param recordNode The record node\n     * @param type The edge type of the structural edge\n     * @param value The \"value\" property of the metadata node\n     * @param display The \"display\" property of the metadata node\n     * @param index The index of the metadata within the record, which may influence its visibility when using display=paginate\n     */\n    protected addStructuralEdge(dataset: NetworkDataset, recordNode: RecordNode, type: StructuralEdgeType, value: string, display: string, index: number) {\n        // Create the metadata node\n        const node = this.createNode(type.nodeTypes[1], value, display, true);\n        // Sets its visibility\n        node.visible = type.trigger === \"oninsert\" && this.isEdgeVisible(type, node, recordNode, index);\n        if(recordNode.id !== node.id){ // Special case of hybrid nodes, where the recordNode might contain itself...!\n            if(!dataset.hasNode(node.id)) { // Duplicate nodes/edges are possible when the same node type is present in multiple fields of a record (eg. \"email\" in msgfrom and msgto)\n                dataset.addNodes(node);\n            }\n            const edge = this.createEdge(type, recordNode, node, value, node.visible, {record: recordNode.record});\n            if(!dataset.hasEdge(edge.id)) {\n                dataset.addEdges(edge);\n            }\n        }\n    }\n\n    /**\n     * Add a custom structural edge to a record node and merges that edge\n     * (and corresponding metadata node) into the global dataset.\n     * @param recordNode The record node\n     * @param type The edge type of the structural edge\n     * @param data A CustomData object containing the properties of the metadata nodes we want to created\n     */\n    protected addCustomEdge(recordNode: RecordNode, type: StructuralEdgeType, data: CustomData) {\n        if(type.nodeTypes.length !== data.values.length + 1) {\n            throw new Error(`Wrong number of values for this custom edge ${type.nodeTypes.length}, ${data.values.length}`);\n        }\n        // Create a dataset only for this data, to avoid duplicate conflicts\n        const dataset = new NetworkDataset();\n        dataset.addNodes(recordNode);\n        // For each value contained in \"data\", create a node, and edges in between them (in addition to the edges between the record and each metadata node)\n        let lastNode: Node;\n        for(let i=0; i 0){\n                const relation = data.relations? data.relations[i-1] : undefined;\n                const directed = data.directed? data.directed[i-1] : false;\n                dataset.addEdges(this.createEdge(type, lastNode!, node, data.fieldValue, true, {}, 1, directed, relation));\n            }\n            lastNode = node;\n        }\n        this.dataset.merge(dataset);\n    }\n\n    /**\n     * Returns the visibility of a structural edge, depending on the type.display property\n     * @param type The structural edge type\n     * @param node The metadata node of this edge\n     * @param recordNode The record node of this edge\n     * @param index The index of the metadata in the list of metadata of the record\n     */\n    protected isEdgeVisible(type: StructuralEdgeType, node: Node, recordNode: RecordNode, index: number): boolean {\n        if(type.display === \"all\") {\n            return true;\n        }\n        else if(type.display === \"existingnodes\") {\n            return false;\n        }\n        else if(type.display === \"paginate\") {\n            return index  node.type === this.nodeType)\n            .forEach(node => {\n                dataset.getAdjacentEdges(node.id)\n                    .filter(edge => (edge.type as StructuralEdgeType).display === 'existingnodes')\n                    .forEach(edge => {\n                        const neighbor = dataset.getNode(node.id === edge.to ? edge.from : edge.to);\n                        if(!neighbor) {\n                            throw new Error(`Missing node from edge ${edge.id}`);\n                        }\n                        const neighborsneighbors = dataset.getAdjacentEdges(neighbor.id);\n                        if(neighborsneighbors.length > 1) {\n                            neighbor.visible = true;\n                            edge.visible = true;\n                        }\n                    });\n            });\n    }\n\n    /**\n     * Adjust visibility of nodes and edges, for structural edges with\n     * type.trigger = onclick. These nodes will only be shown once their\n     * record node is clicked on.\n     * @param node A node that was clicked\n     */\n    override onNodeClicked(node?: Node) {\n        if(this.active && node && node.type === this.nodeType) { // Note: we cannot test the provider property, since this node might have been merged with one from a different provider. However the node type should be a unique instance\n            let update = false;\n            this.dataset.getAdjacentEdges(node.id)\n                .filter(edge => edge.type['trigger'] === 'onclick')\n                .forEach(edge => {\n                    const neighbor = this.dataset.getNode(node.id === edge.to ? edge.from : edge.to);\n                    if(!neighbor) {\n                        throw new Error(`Missing node from edge ${edge.id}`);\n                    }\n                    if(!neighbor.visible || !edge.visible) {\n                        edge.visible = true;\n                        neighbor.visible = true;\n                        update = true;\n                    }\n                    // TODO \"propagate\" visibility (ie. if 2 nodes are visible but an edge in between is invisible, make it visible)\n                });\n            if(update) {\n                this.provider.next(this.dataset);\n            }\n        }\n    }\n\n    override getProviderActions(): Action[] {\n        return super.getProviderActions();\n    }\n\n    /**\n     * Creates actions for expanding and/or collapsing a record node that was clicked.\n     * expanding and collapsing will act on the visibility of the structural edges\n     * attached to this node.\n     * Both actions might be displayed at the same time, if the node is in an intermediate\n     * state.\n     * @param node \n     */\n    override getNodeActions(node: Node): Action[] {\n        const actions = super.getNodeActions(node);\n        \n        // Actions for exanding / collapsing a record node\n        if(this.active && node.type === this.nodeType && this.edgeTypes.length > 0) {\n            let hasExpandedEdge = false;\n            let hasCollapsedEdge = false;\n            this.dataset.getAdjacentEdges(node.id).forEach(e => {\n                hasCollapsedEdge = hasCollapsedEdge || !e.visible;\n                hasExpandedEdge = hasExpandedEdge || e.visible;\n            });\n\n            if(hasCollapsedEdge) {\n                actions.push(new Action({\n                    icon: \"fas fa-expand-arrows-alt\",\n                    title: \"msg#network.actions.expandMeta\",\n                    action: () => {\n                        let update = false;\n                        this.dataset.getAdjacentEdges(node.id)\n                            .forEach(edge => {\n                                const neighbor = this.dataset.getNode(node.id === edge.to ? edge.from : edge.to);\n                                if(!neighbor) {\n                                    throw new Error(`Missing node from edge ${edge.id}`);\n                                }\n                                if(!neighbor.visible || !edge.visible) {\n                                    edge.visible = true;\n                                    neighbor.visible = true;\n                                    update = true;\n                                }\n                                // TODO \"propagate\" visibility (ie. if 2 nodes are visible but an edge in between is invisible, make it visible)\n                            });\n                        if(update) {\n                            this.provider.next(this.dataset);\n                        }\n                    }\n                }));\n            }\n            \n            if(hasExpandedEdge) {\n                actions.push(new Action({\n                    icon: \"fas fa-compress-arrows-alt\",\n                    title: \"msg#network.actions.collapseMeta\",\n                    action: () => {\n                        let update = false;\n                        this.dataset.getAdjacentEdges(node.id)\n                            .forEach(edge => {\n                                const neighbor = this.dataset.getNode(node.id === edge.to ? edge.from : edge.to);\n                                if(!neighbor) {\n                                    throw new Error(`Missing node from edge ${edge.id}`);\n                                }\n                                if((neighbor.visible || edge.visible) && !(neighbor as RecordNode).record) { // Prevent collapsing links between 2 record nodes (alternatively, we could count the number of neighbors of the neighbors, and close only the isoltated ones)\n                                    edge.visible = false;\n                                    neighbor.visible = false;\n                                    update = true;\n                                }\n                            });\n                        if(update) {\n                            this.provider.next(this.dataset);\n                        }\n                    }\n                }));\n            }\n        }\n        return actions;\n    }\n\n}\n    \n    \n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/DataModalComponent.html":{"url":"components/DataModalComponent.html","title":"component - DataModalComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  DataModalComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    ag-grid/data-modal.component.ts\n\n\n\n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                sq-data-modal\n            \n\n\n            \n                styles\n                \npre {\n    overflow: auto;\n    font-size: 12px;\n    max-height: 50vh;\n}\n    \n            \n\n\n            \n                templateUrl\n                ./data-modal.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                copyAction\n                            \n                            \n                                data\n                            \n                            \n                                formatContent\n                            \n                            \n                                    Public\n                                formatService\n                            \n                            \n                                    Public\n                                model\n                            \n                            \n                                    Public\n                                uiService\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                ngOnInit\n                            \n                            \n                                updateData\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(model: DataModel, uiService: UIService, formatService: FormatService)\n                    \n                \n                        \n                            \n                                Defined in ag-grid/data-modal.component.ts:32\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        model\n                                                  \n                                                        \n                                                                        DataModel\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        uiService\n                                                  \n                                                        \n                                                                    UIService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        formatService\n                                                  \n                                                        \n                                                                    FormatService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnInit\n                        \n                    \n                \n            \n            \n                \nngOnInit()\n                \n            \n\n\n            \n                \n                    Defined in ag-grid/data-modal.component.ts:42\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        updateData\n                        \n                    \n                \n            \n            \n                \nupdateData()\n                \n            \n\n\n            \n                \n                    Defined in ag-grid/data-modal.component.ts:53\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        copyAction\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Action\n\n                    \n                \n                    \n                        \n                                Defined in ag-grid/data-modal.component.ts:30\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        data\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in ag-grid/data-modal.component.ts:32\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        formatContent\n                        \n                    \n                \n            \n                \n                    \n                        Default value : true\n                    \n                \n                    \n                        \n                                Defined in ag-grid/data-modal.component.ts:31\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        formatService\n                        \n                    \n                \n            \n                \n                    \n                        Type :     FormatService\n\n                    \n                \n                    \n                        \n                                Defined in ag-grid/data-modal.component.ts:37\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        model\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DataModel\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Inject(MODAL_MODEL)\n                        \n                    \n                \n                    \n                        \n                                Defined in ag-grid/data-modal.component.ts:35\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        uiService\n                        \n                    \n                \n            \n                \n                    \n                        Type :     UIService\n\n                    \n                \n                    \n                        \n                                Defined in ag-grid/data-modal.component.ts:36\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n    \n        import { Component, Inject } from \"@angular/core\";\nimport { Action } from \"@sinequa/components/action\";\nimport { UIService } from \"@sinequa/components/utils\";\nimport { FormatService, ValueItem } from \"@sinequa/core/app-utils\";\nimport { FieldValue } from \"@sinequa/core/base\";\nimport { MODAL_MODEL } from \"@sinequa/core/modal\";\nimport { CCColumn } from \"@sinequa/core/web-services\";\n\ndeclare type DataModel = {\n    cell: ValueItem | FieldValue,\n    row: any,\n    column: string,\n    cccolumn: CCColumn,\n    formatContent: boolean\n};\n\n@Component({\n    selector: 'sq-data-modal',\n    templateUrl: './data-modal.component.html',\n    styles: [`\npre {\n    overflow: auto;\n    font-size: 12px;\n    max-height: 50vh;\n}\n    `]\n})\nexport class DataModalComponent {\n\n    copyAction: Action;\n    formatContent = true;\n    data: string;\n\n    constructor(\n        @Inject(MODAL_MODEL) public model: DataModel,\n        public uiService: UIService,\n        public formatService: FormatService\n    ){\n        this.formatContent = model.formatContent;\n    }\n\n    ngOnInit() {\n\n        this.copyAction = new Action({\n            icon: \"far fa-copy\",\n            title: \"Copy to Clipboard\",\n            action: () => this.uiService.copyToClipboard(this.data)\n        });\n\n        this.updateData();\n    }\n\n    updateData() {\n        if(this.formatContent) {\n            this.data = this.formatService.formatValue(this.model.cell, this.model.cccolumn);\n        }\n        else {\n            this.data = this.formatService.formatRaw(this.model.cell);\n        }\n    }\n}\n    \n\n    \n        \n    \n        \n        {{'msg#grid.formatData' | sqMessage}}\n    \n\n    {{data}}\n\n    \n    \n\n\n    \n\n    \n            \npre {\n    overflow: auto;\n    font-size: 12px;\n    max-height: 50vh;\n}\n    \n\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '                    {{\\'msg#grid.formatData\\' | sqMessage}}        {{data}}        '\n    var COMPONENTS = [{'name': 'AgGridViewComponent', 'selector': 'sq-ag-grid-view'},{'name': 'BsEdgeInfoCard', 'selector': 'sq-edge-info-card'},{'name': 'BsFacetDate', 'selector': 'sq-facet-date'},{'name': 'BsFacetHeatmapComponent', 'selector': 'sq-facet-heatmap'},{'name': 'BsFacetTimelineComponent', 'selector': 'sq-facet-timeline'},{'name': 'BsHeatmapComponent', 'selector': 'sq-heatmap'},{'name': 'BsNodeInfoCard', 'selector': 'sq-node-info-card'},{'name': 'BsResultsHeatmapView', 'selector': 'sq-results-heatmap-view'},{'name': 'BsTimelineComponent', 'selector': 'sq-timeline'},{'name': 'BsTooltipComponent', 'selector': 'sq-tooltip'},{'name': 'DataModalComponent', 'selector': 'sq-data-modal'},{'name': 'FacetNgxChart', 'selector': 'sq-facet-ngx-chart'},{'name': 'FacetWrapperComponent', 'selector': 'facet-wrapper'},{'name': 'FusionChart', 'selector': 'sq-fusion-chart'},{'name': 'MapComponent', 'selector': 'sq-googlemaps'},{'name': 'MoneyCloudComponent', 'selector': 'sq-money-cloud'},{'name': 'MoneyTimelineComponent', 'selector': 'sq-money-timeline'},{'name': 'NetworkComponent', 'selector': 'sq-network'},{'name': 'NgxChart', 'selector': 'sq-ngx-chart'},{'name': 'ResultTimeline', 'selector': 'sq-result-timeline'},{'name': 'TimelineLegendComponent', 'selector': 'sq-timeline-legend'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'DataModalComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/DynamicEdge.html":{"url":"interfaces/DynamicEdge.html","title":"interface - DynamicEdge","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  DynamicEdge\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            network/providers/dynamic-edge-provider.ts\n        \n\n\n            \n                Description\n            \n            \n                Extension of the Edge interface, to include the record property\nfrom which this edge is generated\n\n            \n\n            \n                Extends\n            \n            \n                        Edge\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            record\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        record\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        record:     Record\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Record\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Query } from '@sinequa/core/app-utils';\nimport { Results, Record } from '@sinequa/core/web-services';\nimport { EdgeType, Node, Edge, NetworkProvider, NetworkDataset } from '../network-models';\nimport { RecordsProvider, StructuralEdgeType, RecordNode } from './records-provider';\nimport { combineLatest } from 'rxjs';\nimport { Action } from '@sinequa/components/action';\n\n/**\n * Extension of the Edge interface, to include the record property\n * from which this edge is generated\n */\nexport interface DynamicEdge extends Edge {\n    record: Record;\n}\n\n/**\n * Extension of the EdgeType interface, to include properties specific\n * to dynamic edges, in particular a function that returns a Query object\n * for a given source node.\n */\nexport interface DynamicEdgeType extends EdgeType {\n    /** Returns a query object to execute to obtain dynamic edges from a node */\n    getQuery: (node: Node, type: DynamicEdgeType) => Query | undefined;\n    /** count limits the number of records returned by the query service and allows for pagination */\n    count?: number;\n    /** Defines when the dynamic edge should be executed. Warning: oninsert may generate multiple simultaneous queries */\n    trigger: \"oninsert\" | \"onclick\" | \"manual\";\n}\n\n/**\n * Tests whether a given edge type is a DynamicEdgeType\n * @param et an edge type\n */\nexport function isDynamicEdgeType(et: EdgeType): et is DynamicEdgeType {\n    return !!(et as DynamicEdgeType).getQuery;\n}\n\n\n/**\n * A extension of the RecordsProvider, where records are not directly\n * provided, but are instead fetched from the server via a Query specific\n * to a source node.\n * Concretely, the dynamic edge provider will attach one (or more) record nodes\n * (and their structural edges) to one (or more) source nodes, whose type is\n * specified in the DynamicEdgeType.\n * Dynamic edges can be attached right when the source nodes are inserted (oninsert),\n * or when a user clicks on a source node (onclick) or when a user clicks on an\n * action button displayed when a source node is clicked.\n * Note that the \"source node\" have to come from different providers, so it is\n * necessary to listen to these providers and update the data generated by this\n * provider accordingly.\n */\nexport class DynamicEdgeProvider extends RecordsProvider {\n\n    /** List of the source nodes that have been already processed via clicks or actions */\n    protected processedNodes: string[] = [];\n    /** to avoid fetching the same data multiple times, we store the record objects fetched from the server in this cache */\n    protected nodeCache = new Map();\n\n    constructor(\n        public override name: string,\n        protected edgeType: DynamicEdgeType,\n        protected secondaryEdgeTypes: StructuralEdgeType[],\n        protected permanent: boolean,\n        protected sourceProviders: NetworkProvider[]\n    ){\n        super(name, edgeType.nodeTypes[1], secondaryEdgeTypes, [], false);\n\n        combineLatest(sourceProviders.map(p => p.getProvider())).subscribe(dataset => {\n            if(this.active) {\n                // Merge the nodes from all datasets into a map\n                const map = new Map();\n                dataset.forEach(dataset => {\n                    dataset.getNodes().forEach(node => {\n                        if(node.visible && node.type === this.edgeType.nodeTypes[0]) {\n                            map.set(node.id, node);\n                        }\n                    });\n                });\n                // Update the dataset of dynamic edges\n                this.updateDynamicDataset(Array.from(map.values()));\n            }\n        });\n    }\n    \n    /**\n     * Rebuilds the dataset of this provider, given a list of source nodes to process.\n     * @param sourceNodes A list of source node to process\n     */\n    protected updateDynamicDataset(sourceNodes: Node[]) {\n\n        // We rebuild the dataset from scratch, in case some source nodes were removed\n        this.dataset = new NetworkDataset();\n\n        // If oninsert, we want to process all the source nodes. If not, we want to process the nodes in the processedNodes list\n        if(this.edgeType.trigger !== \"oninsert\") {\n            this.processedNodes = this.processedNodes.filter(id => !!sourceNodes.find(node => node.id === id)); // We want to \"forget\" the nodes that are not in the source anymore\n            sourceNodes = sourceNodes.filter(node => this.processedNodes.indexOf(node.id) !== -1); // We want to process only the nodes currently in the processed list\n        }\n\n        // For each source, we get its query\n        const queries = sourceNodes.map(node => this.nodeCache.has(node.id)? undefined : this.edgeType.getQuery(node, this.edgeType));\n        const _queries = queries.filter(q => !!q) as Query[];\n        // If there are queries, we process them asynchronously\n        if(_queries.length > 0) {\n            this.context.searchService.getMultipleResults(_queries, undefined).subscribe(res => {\n                this.addDynamicEdges(sourceNodes, res.results, queries);\n            });\n        }\n        // If not, we process them synchronously\n        else {\n            this.addDynamicEdges(sourceNodes, [], queries);\n        }\n    \n    }\n\n    /**\n     * Add dynamic edges to a list of source nodes, given a results set\n     * for each of these nodes (either directly provided or stored in the cache).\n     * @param sourceNodes The source nodes\n     * @param res The list of results sets\n     * @param queries The list of queries from which we obtained the results\n     */\n    protected addDynamicEdges(sourceNodes: Node[], res: Results[], queries: (Query|undefined)[]){\n        let j = 0;\n        // For each source node\n        for(let i = 0; i this.createEdge(this.edgeType, node, rNode, undefined, node.visible, {record: rNode.record}) as DynamicEdge);\n    }\n\n    /**\n     * Attach dynamic edges to a given node, either synchronously, if the results set\n     * is available in the cache, or asynchronously, by fetching the data from the server.\n     * @param node The node to process\n     */\n    protected processNode(node: Node) {\n        const query = this.edgeType.getQuery(node, this.edgeType); // Get the search query for this node\n        if(query){\n            if(this.nodeCache.has(node.id)) {\n                if(!this.permanent) {\n                    this.dataset.clear(); // Remove data from previously clicked node\n                    this.processedNodes.splice(0); // Remove the processed nodes\n                }\n                this.processedNodes.push(node.id);\n                this.addDynamicEdges([node], [], [query]); // Insert dynamic nodes and edges for this clicked node\n            }\n            else {\n                this.context.searchService.getResults(query, undefined, {searchInactive: true})\n                    .subscribe(results => {\n                        if(!this.permanent) {\n                            this.dataset.clear(); // Remove data from previously clicked node\n                            this.processedNodes.splice(0); // Remove the processed nodes\n                        }\n                        this.processedNodes.push(node.id);\n                        this.addDynamicEdges([node], [results], [query]); // Insert dynamic nodes and edges for this clicked node\n                    });\n            }\n        }\n    }\n\n\n    // Network provider interface\n\n    /**\n     * Process a clicked source node, if the trigger of the edge type is \"onclick\"\n     * @param node The clicked node\n     */\n    override onNodeClicked(node?: Node) {\n        super.onNodeClicked(node);\n        if(this.active && this.edgeType.trigger === \"onclick\" && node && node.type === this.edgeType.nodeTypes[0] && !this.dataset.hasNode(node.id)) {\n            this.processNode(node);\n        }\n    }\n    \n    /**\n     * Returns an Action allowing to process a node, if the trigger of the edge type\n     * is \"manual\".\n     * @param node The clicked node\n     */\n    override getNodeActions(node: Node): Action[] {\n        const actions = super.getNodeActions(node);\n        if(this.active && this.edgeType.trigger === \"manual\" && node && node.type === this.edgeType.nodeTypes[0] && !this.dataset.hasNode(node.id)) {            \n            actions.push(new Action({\n                icon: \"fas fa-expand-arrows-alt\",\n                title: this.context.intlService.formatMessage(\"msg#network.actions.expandNode\", {label: node.label}),\n                action: () => {\n                    this.processNode(node);\n                }\n            }));            \n        }\n        return actions;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/DynamicEdgeProvider.html":{"url":"classes/DynamicEdgeProvider.html","title":"class - DynamicEdgeProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  DynamicEdgeProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            network/providers/dynamic-edge-provider.ts\n        \n\n\n            \n                Description\n            \n            \n                A extension of the RecordsProvider, where records are not directly\nprovided, but are instead fetched from the server via a Query specific\nto a source node.\nConcretely, the dynamic edge provider will attach one (or more) record nodes\n(and their structural edges) to one (or more) source nodes, whose type is\nspecified in the DynamicEdgeType.\nDynamic edges can be attached right when the source nodes are inserted (oninsert),\nor when a user clicks on a source node (onclick) or when a user clicks on an\naction button displayed when a source node is clicked.\nNote that the \"source node\" have to come from different providers, so it is\nnecessary to listen to these providers and update the data generated by this\nprovider accordingly.\n\n            \n\n            \n                Extends\n            \n            \n                        RecordsProvider\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    \n                                name\n                            \n                            \n                                    Public\n                                    Readonly\n                                activateAction\n                            \n                            \n                                    Public\n                                active\n                            \n                            \n                                    Public\n                                context\n                            \n                            \n                                    Public\n                                dataset\n                            \n                            \n                                    Public\n                                    Readonly\n                                EDGESEPARATOR\n                            \n                            \n                                    Public\n                                    Readonly\n                                resetAction\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                getNodeActions\n                            \n                            \n                                    \n                                onNodeClicked\n                            \n                            \n                                    \n                                getData\n                            \n                            \n                                    \n                                getProviderActions\n                            \n                            \n                                    \n                                onDatasetsMerged\n                            \n                            \n                                getEdgeActions\n                            \n                            \n                                getProvider\n                            \n                            \n                                onDestroy\n                            \n                            \n                                onEdgeClicked\n                            \n                            \n                                onNodesInserted\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(name: string, edgeType: DynamicEdgeType, secondaryEdgeTypes: StructuralEdgeType[], permanent: boolean, sourceProviders: NetworkProvider[])\n                    \n                \n                        \n                            \n                                Defined in network/providers/dynamic-edge-provider.ts:58\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        name\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        edgeType\n                                                  \n                                                        \n                                                                        DynamicEdgeType\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        secondaryEdgeTypes\n                                                  \n                                                        \n                                                                    StructuralEdgeType[]\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        permanent\n                                                  \n                                                        \n                                                                        boolean\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        sourceProviders\n                                                  \n                                                        \n                                                                        NetworkProvider[]\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                        \n                            \n                                Inherited from         BaseProvider\n\n                            \n                        \n                    \n                        \n                                Defined in         BaseProvider:61\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        activateAction\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Action\n\n                    \n                \n                        \n                            \n                                Inherited from         BaseProvider\n\n                            \n                        \n                    \n                        \n                                Defined in         BaseProvider:21\n\n                        \n                    \n\n            \n                \n                    Action to turn the provider on or off\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        active\n                        \n                    \n                \n            \n                \n                    \n                        Default value : true\n                    \n                \n                        \n                            \n                                Inherited from         BaseProvider\n\n                            \n                        \n                    \n                        \n                                Defined in         BaseProvider:16\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        context\n                        \n                    \n                \n            \n                \n                    \n                        Type :         NetworkContext\n\n                    \n                \n                        \n                            \n                                Inherited from         BaseProvider\n\n                            \n                        \n                    \n                        \n                                Defined in         BaseProvider:25\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        dataset\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new NetworkDataset()\n                    \n                \n                        \n                            \n                                Inherited from         BaseProvider\n\n                            \n                        \n                    \n                        \n                                Defined in         BaseProvider:15\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        EDGESEPARATOR\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : \"~~~EDGE~~~\"\n                    \n                \n                        \n                            \n                                Inherited from         BaseProvider\n\n                            \n                        \n                    \n                        \n                                Defined in         BaseProvider:18\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        resetAction\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Action\n\n                    \n                \n                        \n                            \n                                Inherited from         BaseProvider\n\n                            \n                        \n                    \n                        \n                                Defined in         BaseProvider:23\n\n                        \n                    \n\n            \n                \n                    Action to reset the provider\n\n                \n            \n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        getNodeActions\n                        \n                    \n                \n            \n            \n                \n                    \n                    getNodeActions(node: Node)\n                \n            \n\n\n            \n                \n                    Inherited from         BaseProvider\n\n                \n            \n            \n                \n                        Defined in         BaseProvider:202\n\n                \n            \n\n\n            \n                \n                    Returns an Action allowing to process a node, if the trigger of the edge type\nis \"manual\".\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    node\n                                    \n                                                Node\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The clicked node\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Action[]\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        onNodeClicked\n                        \n                    \n                \n            \n            \n                \n                    \n                    onNodeClicked(node?: Node)\n                \n            \n\n\n            \n                \n                    Inherited from         BaseProvider\n\n                \n            \n            \n                \n                        Defined in         BaseProvider:190\n\n                \n            \n\n\n            \n                \n                    Process a clicked source node, if the trigger of the edge type is \"onclick\"\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    node\n                                    \n                                                Node\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        The clicked node\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        getData\n                        \n                    \n                \n            \n            \n                \n                    \n                    getData(context: NetworkContext)\n                \n            \n\n\n            \n                \n                    Inherited from         BaseProvider\n\n                \n            \n            \n                \n                        Defined in         BaseProvider:265\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                                NetworkContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        getProviderActions\n                        \n                    \n                \n            \n            \n                \n                    \n                    getProviderActions()\n                \n            \n\n\n            \n                \n                    Inherited from         BaseProvider\n\n                \n            \n            \n                \n                        Defined in         BaseProvider:328\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     Action[]\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        onDatasetsMerged\n                        \n                    \n                \n            \n            \n                \n                    \n                    onDatasetsMerged(dataset: NetworkDataset)\n                \n            \n\n\n            \n                \n                    Inherited from         BaseProvider\n\n                \n            \n            \n                \n                        Defined in         BaseProvider:278\n\n                \n            \n\n\n            \n                \n                    This function adjusts the visibility of nodes for the visibility\ntype \"existingnode\", so that nodes with only one neighbor (post-merge)\nare collapsed.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    dataset\n                                    \n                                                NetworkDataset\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The dataset resulting of the merge of all the datasets\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getEdgeActions\n                        \n                    \n                \n            \n            \n                \ngetEdgeActions(edge: Edge)\n                \n            \n\n\n            \n                \n                    Inherited from         BaseProvider\n\n                \n            \n            \n                \n                        Defined in         BaseProvider:211\n\n                \n            \n\n\n            \n                \n                    By default the base provider includes an action to filter the search if a clicked\nedge has a \"type.field\" property and a \"fieldValue\" (alternatively, an action\nis created if the 2 adjacent nodes can be filtered, ie they both have a \"field\"\nproperty)\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    edge\n                                    \n                                                Edge\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The clicked edge\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Action[]\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getProvider\n                        \n                    \n                \n            \n            \n                \ngetProvider()\n                \n            \n\n\n            \n                \n                    Inherited from         BaseProvider\n\n                \n            \n            \n                \n                        Defined in         BaseProvider:151\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         Subject\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onDestroy\n                        \n                    \n                \n            \n            \n                \nonDestroy()\n                \n            \n\n\n            \n                \n                    Inherited from         BaseProvider\n\n                \n            \n            \n                \n                        Defined in         BaseProvider:245\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onEdgeClicked\n                        \n                    \n                \n            \n            \n                \nonEdgeClicked(edge: Edge | undefined)\n                \n            \n\n\n            \n                \n                    Inherited from         BaseProvider\n\n                \n            \n            \n                \n                        Defined in         BaseProvider:171\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    edge\n                                    \n                                                Edge | undefined\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onNodesInserted\n                        \n                    \n                \n            \n            \n                \nonNodesInserted(nodes: Node[])\n                \n            \n\n\n            \n                \n                    Inherited from         BaseProvider\n\n                \n            \n            \n                \n                        Defined in         BaseProvider:163\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    nodes\n                                    \n                                                Node[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Query } from '@sinequa/core/app-utils';\nimport { Results, Record } from '@sinequa/core/web-services';\nimport { EdgeType, Node, Edge, NetworkProvider, NetworkDataset } from '../network-models';\nimport { RecordsProvider, StructuralEdgeType, RecordNode } from './records-provider';\nimport { combineLatest } from 'rxjs';\nimport { Action } from '@sinequa/components/action';\n\n/**\n * Extension of the Edge interface, to include the record property\n * from which this edge is generated\n */\nexport interface DynamicEdge extends Edge {\n    record: Record;\n}\n\n/**\n * Extension of the EdgeType interface, to include properties specific\n * to dynamic edges, in particular a function that returns a Query object\n * for a given source node.\n */\nexport interface DynamicEdgeType extends EdgeType {\n    /** Returns a query object to execute to obtain dynamic edges from a node */\n    getQuery: (node: Node, type: DynamicEdgeType) => Query | undefined;\n    /** count limits the number of records returned by the query service and allows for pagination */\n    count?: number;\n    /** Defines when the dynamic edge should be executed. Warning: oninsert may generate multiple simultaneous queries */\n    trigger: \"oninsert\" | \"onclick\" | \"manual\";\n}\n\n/**\n * Tests whether a given edge type is a DynamicEdgeType\n * @param et an edge type\n */\nexport function isDynamicEdgeType(et: EdgeType): et is DynamicEdgeType {\n    return !!(et as DynamicEdgeType).getQuery;\n}\n\n\n/**\n * A extension of the RecordsProvider, where records are not directly\n * provided, but are instead fetched from the server via a Query specific\n * to a source node.\n * Concretely, the dynamic edge provider will attach one (or more) record nodes\n * (and their structural edges) to one (or more) source nodes, whose type is\n * specified in the DynamicEdgeType.\n * Dynamic edges can be attached right when the source nodes are inserted (oninsert),\n * or when a user clicks on a source node (onclick) or when a user clicks on an\n * action button displayed when a source node is clicked.\n * Note that the \"source node\" have to come from different providers, so it is\n * necessary to listen to these providers and update the data generated by this\n * provider accordingly.\n */\nexport class DynamicEdgeProvider extends RecordsProvider {\n\n    /** List of the source nodes that have been already processed via clicks or actions */\n    protected processedNodes: string[] = [];\n    /** to avoid fetching the same data multiple times, we store the record objects fetched from the server in this cache */\n    protected nodeCache = new Map();\n\n    constructor(\n        public override name: string,\n        protected edgeType: DynamicEdgeType,\n        protected secondaryEdgeTypes: StructuralEdgeType[],\n        protected permanent: boolean,\n        protected sourceProviders: NetworkProvider[]\n    ){\n        super(name, edgeType.nodeTypes[1], secondaryEdgeTypes, [], false);\n\n        combineLatest(sourceProviders.map(p => p.getProvider())).subscribe(dataset => {\n            if(this.active) {\n                // Merge the nodes from all datasets into a map\n                const map = new Map();\n                dataset.forEach(dataset => {\n                    dataset.getNodes().forEach(node => {\n                        if(node.visible && node.type === this.edgeType.nodeTypes[0]) {\n                            map.set(node.id, node);\n                        }\n                    });\n                });\n                // Update the dataset of dynamic edges\n                this.updateDynamicDataset(Array.from(map.values()));\n            }\n        });\n    }\n    \n    /**\n     * Rebuilds the dataset of this provider, given a list of source nodes to process.\n     * @param sourceNodes A list of source node to process\n     */\n    protected updateDynamicDataset(sourceNodes: Node[]) {\n\n        // We rebuild the dataset from scratch, in case some source nodes were removed\n        this.dataset = new NetworkDataset();\n\n        // If oninsert, we want to process all the source nodes. If not, we want to process the nodes in the processedNodes list\n        if(this.edgeType.trigger !== \"oninsert\") {\n            this.processedNodes = this.processedNodes.filter(id => !!sourceNodes.find(node => node.id === id)); // We want to \"forget\" the nodes that are not in the source anymore\n            sourceNodes = sourceNodes.filter(node => this.processedNodes.indexOf(node.id) !== -1); // We want to process only the nodes currently in the processed list\n        }\n\n        // For each source, we get its query\n        const queries = sourceNodes.map(node => this.nodeCache.has(node.id)? undefined : this.edgeType.getQuery(node, this.edgeType));\n        const _queries = queries.filter(q => !!q) as Query[];\n        // If there are queries, we process them asynchronously\n        if(_queries.length > 0) {\n            this.context.searchService.getMultipleResults(_queries, undefined).subscribe(res => {\n                this.addDynamicEdges(sourceNodes, res.results, queries);\n            });\n        }\n        // If not, we process them synchronously\n        else {\n            this.addDynamicEdges(sourceNodes, [], queries);\n        }\n    \n    }\n\n    /**\n     * Add dynamic edges to a list of source nodes, given a results set\n     * for each of these nodes (either directly provided or stored in the cache).\n     * @param sourceNodes The source nodes\n     * @param res The list of results sets\n     * @param queries The list of queries from which we obtained the results\n     */\n    protected addDynamicEdges(sourceNodes: Node[], res: Results[], queries: (Query|undefined)[]){\n        let j = 0;\n        // For each source node\n        for(let i = 0; i this.createEdge(this.edgeType, node, rNode, undefined, node.visible, {record: rNode.record}) as DynamicEdge);\n    }\n\n    /**\n     * Attach dynamic edges to a given node, either synchronously, if the results set\n     * is available in the cache, or asynchronously, by fetching the data from the server.\n     * @param node The node to process\n     */\n    protected processNode(node: Node) {\n        const query = this.edgeType.getQuery(node, this.edgeType); // Get the search query for this node\n        if(query){\n            if(this.nodeCache.has(node.id)) {\n                if(!this.permanent) {\n                    this.dataset.clear(); // Remove data from previously clicked node\n                    this.processedNodes.splice(0); // Remove the processed nodes\n                }\n                this.processedNodes.push(node.id);\n                this.addDynamicEdges([node], [], [query]); // Insert dynamic nodes and edges for this clicked node\n            }\n            else {\n                this.context.searchService.getResults(query, undefined, {searchInactive: true})\n                    .subscribe(results => {\n                        if(!this.permanent) {\n                            this.dataset.clear(); // Remove data from previously clicked node\n                            this.processedNodes.splice(0); // Remove the processed nodes\n                        }\n                        this.processedNodes.push(node.id);\n                        this.addDynamicEdges([node], [results], [query]); // Insert dynamic nodes and edges for this clicked node\n                    });\n            }\n        }\n    }\n\n\n    // Network provider interface\n\n    /**\n     * Process a clicked source node, if the trigger of the edge type is \"onclick\"\n     * @param node The clicked node\n     */\n    override onNodeClicked(node?: Node) {\n        super.onNodeClicked(node);\n        if(this.active && this.edgeType.trigger === \"onclick\" && node && node.type === this.edgeType.nodeTypes[0] && !this.dataset.hasNode(node.id)) {\n            this.processNode(node);\n        }\n    }\n    \n    /**\n     * Returns an Action allowing to process a node, if the trigger of the edge type\n     * is \"manual\".\n     * @param node The clicked node\n     */\n    override getNodeActions(node: Node): Action[] {\n        const actions = super.getNodeActions(node);\n        if(this.active && this.edgeType.trigger === \"manual\" && node && node.type === this.edgeType.nodeTypes[0] && !this.dataset.hasNode(node.id)) {            \n            actions.push(new Action({\n                icon: \"fas fa-expand-arrows-alt\",\n                title: this.context.intlService.formatMessage(\"msg#network.actions.expandNode\", {label: node.label}),\n                action: () => {\n                    this.processNode(node);\n                }\n            }));            \n        }\n        return actions;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/DynamicEdgeType.html":{"url":"interfaces/DynamicEdgeType.html","title":"interface - DynamicEdgeType","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  DynamicEdgeType\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            network/providers/dynamic-edge-provider.ts\n        \n\n\n            \n                Description\n            \n            \n                Extension of the EdgeType interface, to include properties specific\nto dynamic edges, in particular a function that returns a Query object\nfor a given source node.\n\n            \n\n            \n                Extends\n            \n            \n                        EdgeType\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            count\n                                        \n                                \n                                \n                                        \n                                            getQuery\n                                        \n                                \n                                \n                                        \n                                            trigger\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        count\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        count:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    count limits the number of records returned by the query service and allows for pagination\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        getQuery\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        getQuery:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Returns a query object to execute to obtain dynamic edges from a node\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        trigger\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        trigger:     \"oninsert\" | \"onclick\" | \"manual\"\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     \"oninsert\" | \"onclick\" | \"manual\"\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Defines when the dynamic edge should be executed. Warning: oninsert may generate multiple simultaneous queries\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { Query } from '@sinequa/core/app-utils';\nimport { Results, Record } from '@sinequa/core/web-services';\nimport { EdgeType, Node, Edge, NetworkProvider, NetworkDataset } from '../network-models';\nimport { RecordsProvider, StructuralEdgeType, RecordNode } from './records-provider';\nimport { combineLatest } from 'rxjs';\nimport { Action } from '@sinequa/components/action';\n\n/**\n * Extension of the Edge interface, to include the record property\n * from which this edge is generated\n */\nexport interface DynamicEdge extends Edge {\n    record: Record;\n}\n\n/**\n * Extension of the EdgeType interface, to include properties specific\n * to dynamic edges, in particular a function that returns a Query object\n * for a given source node.\n */\nexport interface DynamicEdgeType extends EdgeType {\n    /** Returns a query object to execute to obtain dynamic edges from a node */\n    getQuery: (node: Node, type: DynamicEdgeType) => Query | undefined;\n    /** count limits the number of records returned by the query service and allows for pagination */\n    count?: number;\n    /** Defines when the dynamic edge should be executed. Warning: oninsert may generate multiple simultaneous queries */\n    trigger: \"oninsert\" | \"onclick\" | \"manual\";\n}\n\n/**\n * Tests whether a given edge type is a DynamicEdgeType\n * @param et an edge type\n */\nexport function isDynamicEdgeType(et: EdgeType): et is DynamicEdgeType {\n    return !!(et as DynamicEdgeType).getQuery;\n}\n\n\n/**\n * A extension of the RecordsProvider, where records are not directly\n * provided, but are instead fetched from the server via a Query specific\n * to a source node.\n * Concretely, the dynamic edge provider will attach one (or more) record nodes\n * (and their structural edges) to one (or more) source nodes, whose type is\n * specified in the DynamicEdgeType.\n * Dynamic edges can be attached right when the source nodes are inserted (oninsert),\n * or when a user clicks on a source node (onclick) or when a user clicks on an\n * action button displayed when a source node is clicked.\n * Note that the \"source node\" have to come from different providers, so it is\n * necessary to listen to these providers and update the data generated by this\n * provider accordingly.\n */\nexport class DynamicEdgeProvider extends RecordsProvider {\n\n    /** List of the source nodes that have been already processed via clicks or actions */\n    protected processedNodes: string[] = [];\n    /** to avoid fetching the same data multiple times, we store the record objects fetched from the server in this cache */\n    protected nodeCache = new Map();\n\n    constructor(\n        public override name: string,\n        protected edgeType: DynamicEdgeType,\n        protected secondaryEdgeTypes: StructuralEdgeType[],\n        protected permanent: boolean,\n        protected sourceProviders: NetworkProvider[]\n    ){\n        super(name, edgeType.nodeTypes[1], secondaryEdgeTypes, [], false);\n\n        combineLatest(sourceProviders.map(p => p.getProvider())).subscribe(dataset => {\n            if(this.active) {\n                // Merge the nodes from all datasets into a map\n                const map = new Map();\n                dataset.forEach(dataset => {\n                    dataset.getNodes().forEach(node => {\n                        if(node.visible && node.type === this.edgeType.nodeTypes[0]) {\n                            map.set(node.id, node);\n                        }\n                    });\n                });\n                // Update the dataset of dynamic edges\n                this.updateDynamicDataset(Array.from(map.values()));\n            }\n        });\n    }\n    \n    /**\n     * Rebuilds the dataset of this provider, given a list of source nodes to process.\n     * @param sourceNodes A list of source node to process\n     */\n    protected updateDynamicDataset(sourceNodes: Node[]) {\n\n        // We rebuild the dataset from scratch, in case some source nodes were removed\n        this.dataset = new NetworkDataset();\n\n        // If oninsert, we want to process all the source nodes. If not, we want to process the nodes in the processedNodes list\n        if(this.edgeType.trigger !== \"oninsert\") {\n            this.processedNodes = this.processedNodes.filter(id => !!sourceNodes.find(node => node.id === id)); // We want to \"forget\" the nodes that are not in the source anymore\n            sourceNodes = sourceNodes.filter(node => this.processedNodes.indexOf(node.id) !== -1); // We want to process only the nodes currently in the processed list\n        }\n\n        // For each source, we get its query\n        const queries = sourceNodes.map(node => this.nodeCache.has(node.id)? undefined : this.edgeType.getQuery(node, this.edgeType));\n        const _queries = queries.filter(q => !!q) as Query[];\n        // If there are queries, we process them asynchronously\n        if(_queries.length > 0) {\n            this.context.searchService.getMultipleResults(_queries, undefined).subscribe(res => {\n                this.addDynamicEdges(sourceNodes, res.results, queries);\n            });\n        }\n        // If not, we process them synchronously\n        else {\n            this.addDynamicEdges(sourceNodes, [], queries);\n        }\n    \n    }\n\n    /**\n     * Add dynamic edges to a list of source nodes, given a results set\n     * for each of these nodes (either directly provided or stored in the cache).\n     * @param sourceNodes The source nodes\n     * @param res The list of results sets\n     * @param queries The list of queries from which we obtained the results\n     */\n    protected addDynamicEdges(sourceNodes: Node[], res: Results[], queries: (Query|undefined)[]){\n        let j = 0;\n        // For each source node\n        for(let i = 0; i this.createEdge(this.edgeType, node, rNode, undefined, node.visible, {record: rNode.record}) as DynamicEdge);\n    }\n\n    /**\n     * Attach dynamic edges to a given node, either synchronously, if the results set\n     * is available in the cache, or asynchronously, by fetching the data from the server.\n     * @param node The node to process\n     */\n    protected processNode(node: Node) {\n        const query = this.edgeType.getQuery(node, this.edgeType); // Get the search query for this node\n        if(query){\n            if(this.nodeCache.has(node.id)) {\n                if(!this.permanent) {\n                    this.dataset.clear(); // Remove data from previously clicked node\n                    this.processedNodes.splice(0); // Remove the processed nodes\n                }\n                this.processedNodes.push(node.id);\n                this.addDynamicEdges([node], [], [query]); // Insert dynamic nodes and edges for this clicked node\n            }\n            else {\n                this.context.searchService.getResults(query, undefined, {searchInactive: true})\n                    .subscribe(results => {\n                        if(!this.permanent) {\n                            this.dataset.clear(); // Remove data from previously clicked node\n                            this.processedNodes.splice(0); // Remove the processed nodes\n                        }\n                        this.processedNodes.push(node.id);\n                        this.addDynamicEdges([node], [results], [query]); // Insert dynamic nodes and edges for this clicked node\n                    });\n            }\n        }\n    }\n\n\n    // Network provider interface\n\n    /**\n     * Process a clicked source node, if the trigger of the edge type is \"onclick\"\n     * @param node The clicked node\n     */\n    override onNodeClicked(node?: Node) {\n        super.onNodeClicked(node);\n        if(this.active && this.edgeType.trigger === \"onclick\" && node && node.type === this.edgeType.nodeTypes[0] && !this.dataset.hasNode(node.id)) {\n            this.processNode(node);\n        }\n    }\n    \n    /**\n     * Returns an Action allowing to process a node, if the trigger of the edge type\n     * is \"manual\".\n     * @param node The clicked node\n     */\n    override getNodeActions(node: Node): Action[] {\n        const actions = super.getNodeActions(node);\n        if(this.active && this.edgeType.trigger === \"manual\" && node && node.type === this.edgeType.nodeTypes[0] && !this.dataset.hasNode(node.id)) {            \n            actions.push(new Action({\n                icon: \"fas fa-expand-arrows-alt\",\n                title: this.context.intlService.formatMessage(\"msg#network.actions.expandNode\", {label: node.label}),\n                action: () => {\n                    this.processNode(node);\n                }\n            }));            \n        }\n        return actions;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/DynamicNodeProvider.html":{"url":"classes/DynamicNodeProvider.html","title":"class - DynamicNodeProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  DynamicNodeProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            network/providers/dynamic-node-provider.ts\n        \n\n\n            \n                Description\n            \n            \n                An extension of the RecordsProvider which manages dynamic node types.\nDynamic nodes are nodes that are transformed into record nodes via a\nquery. The records are fetched from the server dynamic to enrich the\noriginal node.\nFor example, a simple metadata node with the value \"Bill Gates\" can be\nenriched with the wikipedia page of Bill Gate, which can provide a lot\nof structured information about Bill Gates (which can be used, for\nexample, to attach structural edges to the original Bill Gates node).\nNote that the \"source node\" have to come from different providers, so it is\nnecessary to listen to these providers and update the data generated by this\nprovider accordingly.\n\n            \n\n            \n                Extends\n            \n            \n                        RecordsProvider\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    \n                                name\n                            \n                            \n                                    Public\n                                    Readonly\n                                activateAction\n                            \n                            \n                                    Public\n                                active\n                            \n                            \n                                    Public\n                                context\n                            \n                            \n                                    Public\n                                dataset\n                            \n                            \n                                    Public\n                                    Readonly\n                                EDGESEPARATOR\n                            \n                            \n                                    Public\n                                    Readonly\n                                resetAction\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                getNodeActions\n                            \n                            \n                                    \n                                onNodeClicked\n                            \n                            \n                                    \n                                getData\n                            \n                            \n                                    \n                                getProviderActions\n                            \n                            \n                                    \n                                onDatasetsMerged\n                            \n                            \n                                getEdgeActions\n                            \n                            \n                                getProvider\n                            \n                            \n                                onDestroy\n                            \n                            \n                                onEdgeClicked\n                            \n                            \n                                onNodesInserted\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(name: string, nodeType: DynamicNodeType, edgeTypes: StructuralEdgeType[], permanent: boolean, sourceProviders: NetworkProvider[])\n                    \n                \n                        \n                            \n                                Defined in network/providers/dynamic-node-provider.ts:39\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        name\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        nodeType\n                                                  \n                                                        \n                                                                        DynamicNodeType\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        edgeTypes\n                                                  \n                                                        \n                                                                    StructuralEdgeType[]\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        permanent\n                                                  \n                                                        \n                                                                        boolean\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        sourceProviders\n                                                  \n                                                        \n                                                                        NetworkProvider[]\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                        \n                            \n                                Inherited from         BaseProvider\n\n                            \n                        \n                    \n                        \n                                Defined in         BaseProvider:42\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        activateAction\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Action\n\n                    \n                \n                        \n                            \n                                Inherited from         BaseProvider\n\n                            \n                        \n                    \n                        \n                                Defined in         BaseProvider:21\n\n                        \n                    \n\n            \n                \n                    Action to turn the provider on or off\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        active\n                        \n                    \n                \n            \n                \n                    \n                        Default value : true\n                    \n                \n                        \n                            \n                                Inherited from         BaseProvider\n\n                            \n                        \n                    \n                        \n                                Defined in         BaseProvider:16\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        context\n                        \n                    \n                \n            \n                \n                    \n                        Type :         NetworkContext\n\n                    \n                \n                        \n                            \n                                Inherited from         BaseProvider\n\n                            \n                        \n                    \n                        \n                                Defined in         BaseProvider:25\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        dataset\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new NetworkDataset()\n                    \n                \n                        \n                            \n                                Inherited from         BaseProvider\n\n                            \n                        \n                    \n                        \n                                Defined in         BaseProvider:15\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        EDGESEPARATOR\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : \"~~~EDGE~~~\"\n                    \n                \n                        \n                            \n                                Inherited from         BaseProvider\n\n                            \n                        \n                    \n                        \n                                Defined in         BaseProvider:18\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        resetAction\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Action\n\n                    \n                \n                        \n                            \n                                Inherited from         BaseProvider\n\n                            \n                        \n                    \n                        \n                                Defined in         BaseProvider:23\n\n                        \n                    \n\n            \n                \n                    Action to reset the provider\n\n                \n            \n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        getNodeActions\n                        \n                    \n                \n            \n            \n                \n                    \n                    getNodeActions(node: RecordNode)\n                \n            \n\n\n            \n                \n                    Inherited from         BaseProvider\n\n                \n            \n            \n                \n                        Defined in         BaseProvider:211\n\n                \n            \n\n\n            \n                \n                    Creates an action to process a clicked node, for dynamic node types\nwith a \"manual\" trigger.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    node\n                                    \n                                                RecordNode\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The clicked node\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Action[]\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        onNodeClicked\n                        \n                    \n                \n            \n            \n                \n                    \n                    onNodeClicked(node?: RecordNode)\n                \n            \n\n\n            \n                \n                    Inherited from         BaseProvider\n\n                \n            \n            \n                \n                        Defined in         BaseProvider:199\n\n                \n            \n\n\n            \n                \n                    Process a clicked node, for dynamic node types with an \"onclick\" trigger\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    node\n                                    \n                                                RecordNode\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        The clicked node\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        getData\n                        \n                    \n                \n            \n            \n                \n                    \n                    getData(context: NetworkContext)\n                \n            \n\n\n            \n                \n                    Inherited from         BaseProvider\n\n                \n            \n            \n                \n                        Defined in         BaseProvider:265\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                                NetworkContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        getProviderActions\n                        \n                    \n                \n            \n            \n                \n                    \n                    getProviderActions()\n                \n            \n\n\n            \n                \n                    Inherited from         BaseProvider\n\n                \n            \n            \n                \n                        Defined in         BaseProvider:328\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     Action[]\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        onDatasetsMerged\n                        \n                    \n                \n            \n            \n                \n                    \n                    onDatasetsMerged(dataset: NetworkDataset)\n                \n            \n\n\n            \n                \n                    Inherited from         BaseProvider\n\n                \n            \n            \n                \n                        Defined in         BaseProvider:278\n\n                \n            \n\n\n            \n                \n                    This function adjusts the visibility of nodes for the visibility\ntype \"existingnode\", so that nodes with only one neighbor (post-merge)\nare collapsed.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    dataset\n                                    \n                                                NetworkDataset\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The dataset resulting of the merge of all the datasets\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getEdgeActions\n                        \n                    \n                \n            \n            \n                \ngetEdgeActions(edge: Edge)\n                \n            \n\n\n            \n                \n                    Inherited from         BaseProvider\n\n                \n            \n            \n                \n                        Defined in         BaseProvider:211\n\n                \n            \n\n\n            \n                \n                    By default the base provider includes an action to filter the search if a clicked\nedge has a \"type.field\" property and a \"fieldValue\" (alternatively, an action\nis created if the 2 adjacent nodes can be filtered, ie they both have a \"field\"\nproperty)\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    edge\n                                    \n                                                Edge\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The clicked edge\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Action[]\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getProvider\n                        \n                    \n                \n            \n            \n                \ngetProvider()\n                \n            \n\n\n            \n                \n                    Inherited from         BaseProvider\n\n                \n            \n            \n                \n                        Defined in         BaseProvider:151\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         Subject\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onDestroy\n                        \n                    \n                \n            \n            \n                \nonDestroy()\n                \n            \n\n\n            \n                \n                    Inherited from         BaseProvider\n\n                \n            \n            \n                \n                        Defined in         BaseProvider:245\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onEdgeClicked\n                        \n                    \n                \n            \n            \n                \nonEdgeClicked(edge: Edge | undefined)\n                \n            \n\n\n            \n                \n                    Inherited from         BaseProvider\n\n                \n            \n            \n                \n                        Defined in         BaseProvider:171\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    edge\n                                    \n                                                Edge | undefined\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onNodesInserted\n                        \n                    \n                \n            \n            \n                \nonNodesInserted(nodes: Node[])\n                \n            \n\n\n            \n                \n                    Inherited from         BaseProvider\n\n                \n            \n            \n                \n                        Defined in         BaseProvider:163\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    nodes\n                                    \n                                                Node[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Query } from '@sinequa/core/app-utils';\nimport { Record } from '@sinequa/core/web-services';\nimport { NodeType, Node, NetworkProvider, NetworkDataset } from '../network-models';\nimport { RecordsProvider, StructuralEdgeType, RecordNode } from './records-provider';\nimport { Utils } from '@sinequa/core/base';\nimport { combineLatest } from 'rxjs';\nimport { Action } from '@sinequa/components/action';\n\n/**\n * Extension of the NodeType interface with additional properties specific\n * to dynamic nodes, in particular the getQuery() function that returns a\n * query given a node\n */\nexport interface DynamicNodeType extends NodeType {\n    /** Returns a query object to execute to obtain a record for this node */\n    getQuery: (node: Node) => Query|undefined;\n    /** Defines when the query should be executed. Warning: oninsert may generate multiple simultaneous queries */\n    trigger: \"oninsert\" | \"onclick\" | \"manual\";\n}\n\n/**\n * An extension of the RecordsProvider which manages dynamic node types.\n * Dynamic nodes are nodes that are transformed into record nodes via a\n * query. The records are fetched from the server dynamic to enrich the\n * original node.\n * For example, a simple metadata node with the value \"Bill Gates\" can be\n * enriched with the wikipedia page of Bill Gate, which can provide a lot\n * of structured information about Bill Gates (which can be used, for\n * example, to attach structural edges to the original Bill Gates node).\n * Note that the \"source node\" have to come from different providers, so it is\n * necessary to listen to these providers and update the data generated by this\n * provider accordingly.\n */\nexport class DynamicNodeProvider extends RecordsProvider {\n\n    /** List of the source nodes that have been already processed via clicks or actions */\n    protected processedNodes: string[] = [];\n    /** to avoid fetching the same data multiple times, we store the record objects fetched from the server in this cache */\n    protected nodeCache = new Map();\n\n    constructor(\n        public override name: string,\n        protected override nodeType: DynamicNodeType,\n        protected override edgeTypes: StructuralEdgeType[],\n        protected permanent: boolean,\n        protected sourceProviders: NetworkProvider[]\n    ){\n        super(name, nodeType, edgeTypes, [], false);\n        \n        combineLatest(sourceProviders.map(p => p.getProvider())).subscribe(dataset => {\n            if(this.active){\n                // \"Merge\" the nodes from all datasets into a map\n                const map = new Map();\n                dataset.forEach(dataset => {\n                    dataset.getNodes().forEach(node => {\n                        if(node.visible && node.type === this.nodeType) {\n                            map.set(node.id, node);\n                        }\n                    });\n                });\n                // Update the dataset of dynamic edges\n                this.updateDynamicDataset(Array.from(map.values()));\n            }\n        });\n    }\n\n    /**\n     * Rebuild the dataset of this provider given a list of source nodes to process\n     * @param sourceNodes A list of source nodes to process\n     */\n    protected updateDynamicDataset(sourceNodes: Node[]) {\n        \n        // We rebuild the dataset from scratch, in case some source nodes were removed\n        this.dataset = new NetworkDataset();\n\n        // If oninsert, we want to process all the source nodes. If not, we want to process the nodes in the processedNodes list\n        if(this.nodeType.trigger !== \"oninsert\") {\n            this.processedNodes = this.processedNodes.filter(id => !!sourceNodes.find(node => node.id === id)); // We want to \"forget\" the nodes that are not in the source anymore\n            sourceNodes = sourceNodes.filter(node => this.processedNodes.indexOf(node.id) !== -1); // We want to process only the nodes currently in the processed list\n        }\n        \n        // For each source, we get its query\n        const queries = sourceNodes.map(node => (this.nodeCache.has(node.id) || (node as RecordNode).record)? undefined : this.nodeType.getQuery(node));\n        const _queries = queries.filter(q => !!q) as Query[];\n        // If there are queries, we process them asynchronously\n        if(_queries.length > 0) {\n            this.context.searchService.getMultipleResults(_queries, undefined).subscribe(res => {\n                this.mutateNodes(sourceNodes as RecordNode[], res.results.map(r => r.records.length > 0? r.records[0] : undefined), queries);\n            });\n        }\n        else {\n            this.mutateNodes(sourceNodes as RecordNode[], [], queries);\n        }\n    }\n\n    /**\n     * Processes a given node: If the record for this node is available\n     * in the node cache, we take this record and mutate the node. If not,\n     * we get the query via the dynamic node type's getQuery() function,\n     * and mutate the node upon results.\n     * @param node A source node to process\n     */\n    protected processNode(node: RecordNode) {\n        if(!this.permanent) {\n            this.dataset.clear(); // Remove data from previously clicked node\n            this.processedNodes.splice(0); // Remove the processed nodes\n        }\n\n        this.processedNodes.push(node.id);\n        if(this.nodeCache.has(node.id)) {\n            this.mutateNode(node, this.nodeCache[node.id]);\n            this.provider.next(this.dataset);\n        }\n        else {\n            const query = this.nodeType.getQuery(node);\n            if(query) {\n                this.context.searchService.getResults(query, undefined, {searchInactive: true}).subscribe(results => {\n                    if(results.records.length > 0) {\n                        this.mutateNode(node, results.records[0]);\n                    }\n                    this.provider.next(this.dataset);\n                });\n            }\n        }       \n    }\n\n    /**\n     * Mutates a list of nodes, given a corresponding list of records\n     * and of queries. Manages to get the record objects either from\n     * these inputs or from the cache.\n     * @param nodes The list of node to mutate\n     * @param records The list of records for each node\n     * @param queries The list of queries for each node\n     */\n    protected mutateNodes(nodes: RecordNode[], records: (Record|undefined)[], queries: (Query|undefined)[]) {\n        let j = 0;\n        for(let i = 0; i {\n            this.addStructuralEdges(node, type);\n        });\n    }\n\n    /**\n     * (Re-)computes the node options of a node (after mutation)\n     * @param node a node\n     */\n    protected refreshNodeOptions(node: Node) {\n        let options;\n        if(typeof this.nodeType.nodeOptions === \"function\") {\n            options = this.nodeType.nodeOptions(node, this.nodeType);\n        }\n        else {\n            options = this.nodeType.nodeOptions;\n        }\n        return Utils.extend(node, options);\n    }\n    \n    // Network provider interface\n\n    /**\n     * Process a clicked node, for dynamic node types with an \"onclick\" trigger\n     * @param node The clicked node\n     */\n    override onNodeClicked(node?: RecordNode) {\n        super.onNodeClicked(node);\n        if(this.active && this.nodeType.trigger === \"onclick\" && node && node.type === this.nodeType && this.processedNodes.indexOf(node.id) === -1) {\n            this.processNode(node);\n        }\n    }\n\n    /**\n     * Creates an action to process a clicked node, for dynamic node types\n     * with a \"manual\" trigger.\n     * @param node The clicked node\n     */\n    override getNodeActions(node: RecordNode): Action[] {\n        const actions = super.getNodeActions(node);\n        if(this.active && this.nodeType.trigger === \"manual\" && node && node.type === this.nodeType && this.processedNodes.indexOf(node.id) === -1) {\n            actions.unshift(new Action({\n                icon: \"fas fa-star-of-life\",\n                title: this.context.intlService.formatMessage(\"msg#network.actions.expandNode\", {label: node.label}),\n                action: () => {\n                    this.processNode(node);\n                }\n            }));\n        }\n        return actions;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/DynamicNodeType.html":{"url":"interfaces/DynamicNodeType.html","title":"interface - DynamicNodeType","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  DynamicNodeType\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            network/providers/dynamic-node-provider.ts\n        \n\n\n            \n                Description\n            \n            \n                Extension of the NodeType interface with additional properties specific\nto dynamic nodes, in particular the getQuery() function that returns a\nquery given a node\n\n            \n\n            \n                Extends\n            \n            \n                        NodeType\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            getQuery\n                                        \n                                \n                                \n                                        \n                                            trigger\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        getQuery\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        getQuery:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Returns a query object to execute to obtain a record for this node\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        trigger\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        trigger:     \"oninsert\" | \"onclick\" | \"manual\"\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     \"oninsert\" | \"onclick\" | \"manual\"\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Defines when the query should be executed. Warning: oninsert may generate multiple simultaneous queries\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { Query } from '@sinequa/core/app-utils';\nimport { Record } from '@sinequa/core/web-services';\nimport { NodeType, Node, NetworkProvider, NetworkDataset } from '../network-models';\nimport { RecordsProvider, StructuralEdgeType, RecordNode } from './records-provider';\nimport { Utils } from '@sinequa/core/base';\nimport { combineLatest } from 'rxjs';\nimport { Action } from '@sinequa/components/action';\n\n/**\n * Extension of the NodeType interface with additional properties specific\n * to dynamic nodes, in particular the getQuery() function that returns a\n * query given a node\n */\nexport interface DynamicNodeType extends NodeType {\n    /** Returns a query object to execute to obtain a record for this node */\n    getQuery: (node: Node) => Query|undefined;\n    /** Defines when the query should be executed. Warning: oninsert may generate multiple simultaneous queries */\n    trigger: \"oninsert\" | \"onclick\" | \"manual\";\n}\n\n/**\n * An extension of the RecordsProvider which manages dynamic node types.\n * Dynamic nodes are nodes that are transformed into record nodes via a\n * query. The records are fetched from the server dynamic to enrich the\n * original node.\n * For example, a simple metadata node with the value \"Bill Gates\" can be\n * enriched with the wikipedia page of Bill Gate, which can provide a lot\n * of structured information about Bill Gates (which can be used, for\n * example, to attach structural edges to the original Bill Gates node).\n * Note that the \"source node\" have to come from different providers, so it is\n * necessary to listen to these providers and update the data generated by this\n * provider accordingly.\n */\nexport class DynamicNodeProvider extends RecordsProvider {\n\n    /** List of the source nodes that have been already processed via clicks or actions */\n    protected processedNodes: string[] = [];\n    /** to avoid fetching the same data multiple times, we store the record objects fetched from the server in this cache */\n    protected nodeCache = new Map();\n\n    constructor(\n        public override name: string,\n        protected override nodeType: DynamicNodeType,\n        protected override edgeTypes: StructuralEdgeType[],\n        protected permanent: boolean,\n        protected sourceProviders: NetworkProvider[]\n    ){\n        super(name, nodeType, edgeTypes, [], false);\n        \n        combineLatest(sourceProviders.map(p => p.getProvider())).subscribe(dataset => {\n            if(this.active){\n                // \"Merge\" the nodes from all datasets into a map\n                const map = new Map();\n                dataset.forEach(dataset => {\n                    dataset.getNodes().forEach(node => {\n                        if(node.visible && node.type === this.nodeType) {\n                            map.set(node.id, node);\n                        }\n                    });\n                });\n                // Update the dataset of dynamic edges\n                this.updateDynamicDataset(Array.from(map.values()));\n            }\n        });\n    }\n\n    /**\n     * Rebuild the dataset of this provider given a list of source nodes to process\n     * @param sourceNodes A list of source nodes to process\n     */\n    protected updateDynamicDataset(sourceNodes: Node[]) {\n        \n        // We rebuild the dataset from scratch, in case some source nodes were removed\n        this.dataset = new NetworkDataset();\n\n        // If oninsert, we want to process all the source nodes. If not, we want to process the nodes in the processedNodes list\n        if(this.nodeType.trigger !== \"oninsert\") {\n            this.processedNodes = this.processedNodes.filter(id => !!sourceNodes.find(node => node.id === id)); // We want to \"forget\" the nodes that are not in the source anymore\n            sourceNodes = sourceNodes.filter(node => this.processedNodes.indexOf(node.id) !== -1); // We want to process only the nodes currently in the processed list\n        }\n        \n        // For each source, we get its query\n        const queries = sourceNodes.map(node => (this.nodeCache.has(node.id) || (node as RecordNode).record)? undefined : this.nodeType.getQuery(node));\n        const _queries = queries.filter(q => !!q) as Query[];\n        // If there are queries, we process them asynchronously\n        if(_queries.length > 0) {\n            this.context.searchService.getMultipleResults(_queries, undefined).subscribe(res => {\n                this.mutateNodes(sourceNodes as RecordNode[], res.results.map(r => r.records.length > 0? r.records[0] : undefined), queries);\n            });\n        }\n        else {\n            this.mutateNodes(sourceNodes as RecordNode[], [], queries);\n        }\n    }\n\n    /**\n     * Processes a given node: If the record for this node is available\n     * in the node cache, we take this record and mutate the node. If not,\n     * we get the query via the dynamic node type's getQuery() function,\n     * and mutate the node upon results.\n     * @param node A source node to process\n     */\n    protected processNode(node: RecordNode) {\n        if(!this.permanent) {\n            this.dataset.clear(); // Remove data from previously clicked node\n            this.processedNodes.splice(0); // Remove the processed nodes\n        }\n\n        this.processedNodes.push(node.id);\n        if(this.nodeCache.has(node.id)) {\n            this.mutateNode(node, this.nodeCache[node.id]);\n            this.provider.next(this.dataset);\n        }\n        else {\n            const query = this.nodeType.getQuery(node);\n            if(query) {\n                this.context.searchService.getResults(query, undefined, {searchInactive: true}).subscribe(results => {\n                    if(results.records.length > 0) {\n                        this.mutateNode(node, results.records[0]);\n                    }\n                    this.provider.next(this.dataset);\n                });\n            }\n        }       \n    }\n\n    /**\n     * Mutates a list of nodes, given a corresponding list of records\n     * and of queries. Manages to get the record objects either from\n     * these inputs or from the cache.\n     * @param nodes The list of node to mutate\n     * @param records The list of records for each node\n     * @param queries The list of queries for each node\n     */\n    protected mutateNodes(nodes: RecordNode[], records: (Record|undefined)[], queries: (Query|undefined)[]) {\n        let j = 0;\n        for(let i = 0; i {\n            this.addStructuralEdges(node, type);\n        });\n    }\n\n    /**\n     * (Re-)computes the node options of a node (after mutation)\n     * @param node a node\n     */\n    protected refreshNodeOptions(node: Node) {\n        let options;\n        if(typeof this.nodeType.nodeOptions === \"function\") {\n            options = this.nodeType.nodeOptions(node, this.nodeType);\n        }\n        else {\n            options = this.nodeType.nodeOptions;\n        }\n        return Utils.extend(node, options);\n    }\n    \n    // Network provider interface\n\n    /**\n     * Process a clicked node, for dynamic node types with an \"onclick\" trigger\n     * @param node The clicked node\n     */\n    override onNodeClicked(node?: RecordNode) {\n        super.onNodeClicked(node);\n        if(this.active && this.nodeType.trigger === \"onclick\" && node && node.type === this.nodeType && this.processedNodes.indexOf(node.id) === -1) {\n            this.processNode(node);\n        }\n    }\n\n    /**\n     * Creates an action to process a clicked node, for dynamic node types\n     * with a \"manual\" trigger.\n     * @param node The clicked node\n     */\n    override getNodeActions(node: RecordNode): Action[] {\n        const actions = super.getNodeActions(node);\n        if(this.active && this.nodeType.trigger === \"manual\" && node && node.type === this.nodeType && this.processedNodes.indexOf(node.id) === -1) {\n            actions.unshift(new Action({\n                icon: \"fas fa-star-of-life\",\n                title: this.context.intlService.formatMessage(\"msg#network.actions.expandNode\", {label: node.label}),\n                action: () => {\n                    this.processNode(node);\n                }\n            }));\n        }\n        return actions;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Edge.html":{"url":"interfaces/Edge.html","title":"interface - Edge","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  Edge\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            network/network-models.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            context\n                                        \n                                \n                                \n                                        \n                                            count\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            fieldValue\n                                        \n                                \n                                \n                                        \n                                            from\n                                        \n                                \n                                \n                                        \n                                            id\n                                        \n                                \n                                \n                                        \n                                            provider\n                                        \n                                \n                                \n                                        \n                                            to\n                                        \n                                \n                                \n                                        \n                                            type\n                                        \n                                \n                                \n                                        \n                                            visible\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        context\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        context:         NetworkContext\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         NetworkContext\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        count\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        count:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    count is a property representing the strength of an edge, which scales the count of adjacent nodes\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        fieldValue\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        fieldValue:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    A field value may be provided to filter search based on the edge field type\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        from\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        from:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        id:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        provider\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        provider:         NetworkProvider\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         NetworkProvider\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        to\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        to:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        type\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        type:         EdgeType\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         EdgeType\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        visible\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        visible:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Subject } from 'rxjs';\nimport { Action } from '@sinequa/components/action';\nimport { Utils } from '@sinequa/core/base';\nimport { DataSet } from \"vis-data/peer/esm/vis-data\";\nimport { SearchService } from '@sinequa/components/search';\nimport { VisNetworkService } from 'ngx-vis';\nimport { AppService, ExprBuilder } from '@sinequa/core/app-utils';\nimport { IntlService } from '@sinequa/core/intl';\n\n// TYPES (configuration)\n\nexport interface NodeType {\n    name: string;\n    /** Vis Node options (merged in the Node objects). See https://visjs.github.io/vis-network/docs/network/nodes.html */\n    nodeOptions: {[key: string]: any} | ((node: Node, type: NodeType) => {[key: string]: any} );\n    /** If a field is provided, it can be used to filter the node value (and access the label, formatter, etc.) */\n    field?: string;\n}\n\nexport interface EdgeType {\n    /** Node types attached to this edge type. Should typically be 2 items, but cooccurrence aggregation might return more */\n    nodeTypes: NodeType[];\n    /** Vis Edge options (merged in the Edge objects). See https://visjs.github.io/vis-network/docs/network/edges.html */\n    edgeOptions: {[key: string]: any} | ((nodes: Node[], edge: Edge, type: EdgeType) => {[key: string]: any} );\n    /** If a field is provided, it can be used to filter the node value (and access the label, formatter, etc.) */\n    field?: string;\n}\n\n\n// DATA\n\n// Nodes (based on Vis Node interface)\n\nexport interface Node {\n    id: string;\n    label: string;\n\n    // Custom properties\n    type: NodeType;\n    provider: NetworkProvider;\n    visible: boolean;\n    /** count is a mutable property used to scale the node size in function of the size of adjacent edges*/\n    count: number;\n    /** the precedence of a node determines which node object is kept when merging two dataset (the highest precedence node is kept) */\n    precedence?: number;\n    // Context\n    context: NetworkContext;\n}\n\n// Edge (based on Vis Edge interface)\n\nexport interface Edge {\n    id: string;\n    from: string;\n    to: string;\n\n    // Custom properties\n    type: EdgeType;\n    provider: NetworkProvider;\n    visible: boolean;    \n    /** count is a property representing the strength of an edge, which scales the count of adjacent nodes*/\n    count: number;\n    /** A field value may be provided to filter search based on the edge field type */\n    fieldValue?: string;\n    // Context\n    context: NetworkContext;\n}\n\n\nexport interface NetworkProvider {\n    /** Whether or not the provider is active (if inactive, it will not provide empty datasets of nodes and edges) */\n    active: boolean;\n\n    /** Readable name of this provider */\n    name: string;\n\n    /** Dataset of this provider */\n    dataset: NetworkDataset;\n\n    /** Context (wrapper for general data about the network and services) */\n    context: NetworkContext;\n\n    /** Returns the Subject of this provider */\n    getProvider(): Subject;\n\n    /** Asynchronously provide data via it's provider Subject */\n    getData(context: NetworkContext); // skip/count handled internally\n\n    /** Called after the datasets provided by all providers have been merged into a single dataset */\n    onDatasetsMerged(dataset: NetworkDataset);\n\n    /** Called after the dataset is filtered and passed to Vis for rendering */\n    onNodesInserted(nodes: Node[]);\n\n    /** Called when ANY node is clicked in the rendered view of the network */\n    onNodeClicked(node: Node | undefined);\n\n    /** Called when ANY edge is clicked in the rendered view of the network */\n    onEdgeClicked(edge: Edge | undefined);\n\n    /** Retrieve the list of action for this provider. */\n    getProviderActions(): Action[];\n\n    /** Retrieve the list of action for a given node, and this provider. */\n    getNodeActions(node: Node): Action[];\n    \n    /** Retrieve the list of action for a given edge, and this provider. */\n    getEdgeActions(edge: Edge): Action[];\n\n    /** Called when the providers are discarded. Can be use to cancel subscriptions */\n    onDestroy();\n}\n\nexport interface NetworkContext {\n    /** Name of this network, for use in selections */\n    name: string;\n    /** Vis.js data structures */\n    nodes: DataSet;\n    edges: DataSet;\n    /** Useful services */\n    searchService: SearchService;\n    networkService: VisNetworkService;\n    appService: AppService;\n    intlService: IntlService;\n    exprBuilder: ExprBuilder;\n    /** Interactions */\n    select(node?: Node, edge?: Edge): void;\n}\n\n\nexport class NetworkDataset {\n\n    // Node index\n    private readonly nodeIdx: Map = new Map();\n\n    // Edge index\n    private readonly edgeIdx: Map = new Map();\n\n\n    /** Returns whether this node exists */\n    public hasNode(id: string): boolean {\n        return this.nodeIdx.has(id);\n    }\n    \n    /** Returns whether this edge exists */\n    public hasEdge(id: string): boolean {\n        return this.edgeIdx.has(id);\n    }\n\n    /** Returns the node with given id */\n    public getNode(id: string): Node | undefined {\n        return this.nodeIdx.get(id);\n    }\n\n    /** Returns the edge with given id */\n    public getEdge(id: string): Edge | undefined {\n        return this.edgeIdx.get(id);\n    }\n\n    /** Get the list of nodes */\n    public getNodes(): Node[] {\n        return Array.from(this.nodeIdx.values());\n    }\n\n    /** Get the list of edges */\n    public getEdges(): Edge[] {\n        return Array.from(this.edgeIdx.values());\n    }    \n\n    /** Get the list of visible nodes */\n    public getVisibleNodes(): Node[] {\n        return this.getNodes().filter(n => n.visible);\n    }\n\n    /** Get the list of visible edges */\n    public getVisibleEdges(): Edge[] {\n        return this.getEdges().filter(e => e.visible);\n    }\n\n    /** Get the list of node ids */\n    public getNodeIds(): string[] {\n        return Array.from(this.nodeIdx.keys());\n    }\n\n    /** Get the list of edge ids */\n    public getEdgeIds(): string[] {\n        return Array.from(this.edgeIdx.keys());\n    }\n    \n    /** Clears this dataset */\n    public clear() {\n        this.nodeIdx.clear();\n        this.edgeIdx.clear();\n    }\n\n    /** Add one or multiple nodes */\n    public addNodes(nodes: Node | Node[]) {\n        Array.isArray(nodes)? nodes.forEach(node => this.addNode(node)) : this.addNode(nodes);\n    }\n\n    /** Add one or multiple edges. */\n    public addEdges(edges: Edge | Edge[]) {\n        Array.isArray(edges)? edges.forEach(edge => this.addEdge(edge)) : this.addEdge(edges);\n    }\n\n    /** Remove one or multiple nodes. /!\\ Connected edges MUST be removed as well (use cleanRemoveNode() to do so) */\n    private removeNodes(ids: string | string[]) {\n        Array.isArray(ids)? ids.forEach(id => this.removeNode(id)) : this.removeNode(ids);\n    }\n\n    /** Remove one or multiple edges. */\n    public removeEdges(ids: string | string[]) {\n        Array.isArray(ids)? ids.forEach(id => this.removeEdge(id)) : this.removeEdge(ids);\n    }\n\n    /** Remove a node and its adjacent edges. keepDanglingNodes = false (default) removes the remaining nodes with no neighbor */\n    public cleanRemoveNode(nodeId: string, keepDanglingNodes?: boolean) {\n        this.getAdjacentEdges(nodeId).forEach(edge => {\n            const neighbor = this.getNode(edge.from === nodeId ? edge.to : edge.from) as Node;\n            this.removeEdges(edge.id);\n            neighbor.count -= edge.count;\n            if(!keepDanglingNodes && this.getAdjacentEdges(neighbor.id).length === 0) {\n                this.removeNodes(neighbor.id);\n            }\n        });\n    }\n\n    /** Get the edges adjacent to a node (O(n) method) */\n    public getAdjacentEdges(nodeId: string): Edge[] {\n        return this.getEdges().filter(e => e.from === nodeId || e.to === nodeId);\n    }\n\n    /** Get the nodes connected to a node via a single node (0(n) method) */\n    public getConnectedNodes(nodeId: string): Node[] {\n        return this.getAdjacentEdges(nodeId)\n                    .map(e => this.getNode(e.from === nodeId ? e.to : e.from) as Node);\n    }\n\n    /**\n     * Merge this dataset with another one. \n     * \n     * When duplicates nodes or edges are found:\n     * - The existing item is kept and updated\n     * - Their 'count' properties are added\n     * - Their 'visible' properties are ORed\n     * - Their nodeOptions and edgeOptions are updated\n     * \n     * @param dataset \n     */\n    public merge(dataset: NetworkDataset): NetworkDataset {\n\n        dataset.getNodes().forEach(node => {\n            node = Object.assign({}, node); // Avoid modifying the original datasets\n            if(!this.hasNode(node.id)) {\n                this.addNode(node);\n            }\n            else {\n                // Merge the new node with the existing one (which takes precedence by default)\n                let existingNode = this.getNode(node.id) as Node;\n                if((node.precedence || 0) > (existingNode.precedence || 0)) {\n                    // Set the new node in the node index\n                    this.nodeIdx.set(node.id, node);\n                    // swap existingNode and node for the merging of count, visible and node options\n                    const temp = node;\n                    node = existingNode;\n                    existingNode = temp;\n                }\n                existingNode.count += node.count;\n                existingNode.visible = existingNode.visible || node.visible;\n                let options: {[key: string]: any};\n                if(typeof existingNode.type.nodeOptions === \"function\") {\n                    options = existingNode.type.nodeOptions(existingNode, existingNode.type);\n                }\n                else {\n                    options = existingNode.type.nodeOptions;\n                }\n                Utils.extend(existingNode, options);\n            }\n        });\n\n        dataset.getEdges().forEach(edge => {\n            edge = Object.assign({}, edge); // Avoid modifying the original datasets\n            if(!this.hasEdge(edge.id)) {\n                this.addEdge(edge);\n            }\n            else {\n                // Merge the new edge with the existing one (which takes precedence)\n                // eg. statistical and semantic edges\n                const existingEdge = this.getEdge(edge.id) as Edge;\n                existingEdge.count += edge.count;\n                existingEdge.visible = existingEdge.visible || edge.visible;\n                // Merge edge labels (taking duplicates into account)\n                if(!!existingEdge[\"label\"] && !!edge[\"label\"]){\n                    edge[\"labels\"].forEach(label => {\n                        if(existingEdge[\"labels\"].indexOf(label) === -1) {\n                            existingEdge[\"label\"] += \", \"+label;\n                            existingEdge[\"labels\"].push(label);\n                        }\n                    });\n                }\n                let options: {[key: string]: any};\n                if(typeof existingEdge.type.edgeOptions === \"function\") {\n                    const nodes = [existingEdge.from, existingEdge.to].map(id => this.nodeIdx[id]);\n                    options = existingEdge.type.edgeOptions(nodes, existingEdge, existingEdge.type);\n                }\n                else {\n                    options = existingEdge.type.edgeOptions;\n                }\n                Utils.extend(existingEdge, options);\n            }\n        });\n\n        return this;\n    }\n\n    /** Transfer nodes and edges to the Vis nodes and edges DataSets */\n    updateDatasets(nodes: DataSet, edges: DataSet) {\n        nodes.remove(nodes.get().filter(n => !this.getNode(n.id)?.visible));\n        edges.remove(edges.get().filter(e => !this.getEdge(e.id)?.visible));\n        nodes.update(this.getVisibleNodes());\n        edges.update(this.getVisibleEdges());\n    }\n\n    \n    private addNode(node: Node) {\n        if(this.hasNode(node.id)) {\n            throw new Error(`Node '${node.id}' already in dataset`);\n        }\n        this.nodeIdx.set(node.id, node);\n    }\n    \n    private addEdge(edge: Edge) {\n        if(this.hasEdge(edge.id)) {\n            throw new Error(`Edge '${edge.id}' already in dataset`);\n        }\n        if(!this.hasNode(edge.from) || !this.hasNode(edge.to)) {\n            throw new Error(`Edge '${edge.id}' cannot be added as one of the nodes is missing from the dataset`)\n        }\n        this.edgeIdx.set(edge.id, edge);\n    }\n\n    private removeNode(id: string) {\n        this.nodeIdx.delete(id);\n    }\n\n    private removeEdge(id: string) {\n        this.edgeIdx.delete(id);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/EdgeType.html":{"url":"interfaces/EdgeType.html","title":"interface - EdgeType","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  EdgeType\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            network/network-models.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            edgeOptions\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            field\n                                        \n                                \n                                \n                                        \n                                            nodeTypes\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        edgeOptions\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        edgeOptions:     literal type | \n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type | \n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Vis Edge options (merged in the Edge objects). See https://visjs.github.io/vis-network/docs/network/edges.html\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        field\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        field:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    If a field is provided, it can be used to filter the node value (and access the label, formatter, etc.)\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        nodeTypes\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        nodeTypes:     NodeType[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     NodeType[]\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Node types attached to this edge type. Should typically be 2 items, but cooccurrence aggregation might return more\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { Subject } from 'rxjs';\nimport { Action } from '@sinequa/components/action';\nimport { Utils } from '@sinequa/core/base';\nimport { DataSet } from \"vis-data/peer/esm/vis-data\";\nimport { SearchService } from '@sinequa/components/search';\nimport { VisNetworkService } from 'ngx-vis';\nimport { AppService, ExprBuilder } from '@sinequa/core/app-utils';\nimport { IntlService } from '@sinequa/core/intl';\n\n// TYPES (configuration)\n\nexport interface NodeType {\n    name: string;\n    /** Vis Node options (merged in the Node objects). See https://visjs.github.io/vis-network/docs/network/nodes.html */\n    nodeOptions: {[key: string]: any} | ((node: Node, type: NodeType) => {[key: string]: any} );\n    /** If a field is provided, it can be used to filter the node value (and access the label, formatter, etc.) */\n    field?: string;\n}\n\nexport interface EdgeType {\n    /** Node types attached to this edge type. Should typically be 2 items, but cooccurrence aggregation might return more */\n    nodeTypes: NodeType[];\n    /** Vis Edge options (merged in the Edge objects). See https://visjs.github.io/vis-network/docs/network/edges.html */\n    edgeOptions: {[key: string]: any} | ((nodes: Node[], edge: Edge, type: EdgeType) => {[key: string]: any} );\n    /** If a field is provided, it can be used to filter the node value (and access the label, formatter, etc.) */\n    field?: string;\n}\n\n\n// DATA\n\n// Nodes (based on Vis Node interface)\n\nexport interface Node {\n    id: string;\n    label: string;\n\n    // Custom properties\n    type: NodeType;\n    provider: NetworkProvider;\n    visible: boolean;\n    /** count is a mutable property used to scale the node size in function of the size of adjacent edges*/\n    count: number;\n    /** the precedence of a node determines which node object is kept when merging two dataset (the highest precedence node is kept) */\n    precedence?: number;\n    // Context\n    context: NetworkContext;\n}\n\n// Edge (based on Vis Edge interface)\n\nexport interface Edge {\n    id: string;\n    from: string;\n    to: string;\n\n    // Custom properties\n    type: EdgeType;\n    provider: NetworkProvider;\n    visible: boolean;    \n    /** count is a property representing the strength of an edge, which scales the count of adjacent nodes*/\n    count: number;\n    /** A field value may be provided to filter search based on the edge field type */\n    fieldValue?: string;\n    // Context\n    context: NetworkContext;\n}\n\n\nexport interface NetworkProvider {\n    /** Whether or not the provider is active (if inactive, it will not provide empty datasets of nodes and edges) */\n    active: boolean;\n\n    /** Readable name of this provider */\n    name: string;\n\n    /** Dataset of this provider */\n    dataset: NetworkDataset;\n\n    /** Context (wrapper for general data about the network and services) */\n    context: NetworkContext;\n\n    /** Returns the Subject of this provider */\n    getProvider(): Subject;\n\n    /** Asynchronously provide data via it's provider Subject */\n    getData(context: NetworkContext); // skip/count handled internally\n\n    /** Called after the datasets provided by all providers have been merged into a single dataset */\n    onDatasetsMerged(dataset: NetworkDataset);\n\n    /** Called after the dataset is filtered and passed to Vis for rendering */\n    onNodesInserted(nodes: Node[]);\n\n    /** Called when ANY node is clicked in the rendered view of the network */\n    onNodeClicked(node: Node | undefined);\n\n    /** Called when ANY edge is clicked in the rendered view of the network */\n    onEdgeClicked(edge: Edge | undefined);\n\n    /** Retrieve the list of action for this provider. */\n    getProviderActions(): Action[];\n\n    /** Retrieve the list of action for a given node, and this provider. */\n    getNodeActions(node: Node): Action[];\n    \n    /** Retrieve the list of action for a given edge, and this provider. */\n    getEdgeActions(edge: Edge): Action[];\n\n    /** Called when the providers are discarded. Can be use to cancel subscriptions */\n    onDestroy();\n}\n\nexport interface NetworkContext {\n    /** Name of this network, for use in selections */\n    name: string;\n    /** Vis.js data structures */\n    nodes: DataSet;\n    edges: DataSet;\n    /** Useful services */\n    searchService: SearchService;\n    networkService: VisNetworkService;\n    appService: AppService;\n    intlService: IntlService;\n    exprBuilder: ExprBuilder;\n    /** Interactions */\n    select(node?: Node, edge?: Edge): void;\n}\n\n\nexport class NetworkDataset {\n\n    // Node index\n    private readonly nodeIdx: Map = new Map();\n\n    // Edge index\n    private readonly edgeIdx: Map = new Map();\n\n\n    /** Returns whether this node exists */\n    public hasNode(id: string): boolean {\n        return this.nodeIdx.has(id);\n    }\n    \n    /** Returns whether this edge exists */\n    public hasEdge(id: string): boolean {\n        return this.edgeIdx.has(id);\n    }\n\n    /** Returns the node with given id */\n    public getNode(id: string): Node | undefined {\n        return this.nodeIdx.get(id);\n    }\n\n    /** Returns the edge with given id */\n    public getEdge(id: string): Edge | undefined {\n        return this.edgeIdx.get(id);\n    }\n\n    /** Get the list of nodes */\n    public getNodes(): Node[] {\n        return Array.from(this.nodeIdx.values());\n    }\n\n    /** Get the list of edges */\n    public getEdges(): Edge[] {\n        return Array.from(this.edgeIdx.values());\n    }    \n\n    /** Get the list of visible nodes */\n    public getVisibleNodes(): Node[] {\n        return this.getNodes().filter(n => n.visible);\n    }\n\n    /** Get the list of visible edges */\n    public getVisibleEdges(): Edge[] {\n        return this.getEdges().filter(e => e.visible);\n    }\n\n    /** Get the list of node ids */\n    public getNodeIds(): string[] {\n        return Array.from(this.nodeIdx.keys());\n    }\n\n    /** Get the list of edge ids */\n    public getEdgeIds(): string[] {\n        return Array.from(this.edgeIdx.keys());\n    }\n    \n    /** Clears this dataset */\n    public clear() {\n        this.nodeIdx.clear();\n        this.edgeIdx.clear();\n    }\n\n    /** Add one or multiple nodes */\n    public addNodes(nodes: Node | Node[]) {\n        Array.isArray(nodes)? nodes.forEach(node => this.addNode(node)) : this.addNode(nodes);\n    }\n\n    /** Add one or multiple edges. */\n    public addEdges(edges: Edge | Edge[]) {\n        Array.isArray(edges)? edges.forEach(edge => this.addEdge(edge)) : this.addEdge(edges);\n    }\n\n    /** Remove one or multiple nodes. /!\\ Connected edges MUST be removed as well (use cleanRemoveNode() to do so) */\n    private removeNodes(ids: string | string[]) {\n        Array.isArray(ids)? ids.forEach(id => this.removeNode(id)) : this.removeNode(ids);\n    }\n\n    /** Remove one or multiple edges. */\n    public removeEdges(ids: string | string[]) {\n        Array.isArray(ids)? ids.forEach(id => this.removeEdge(id)) : this.removeEdge(ids);\n    }\n\n    /** Remove a node and its adjacent edges. keepDanglingNodes = false (default) removes the remaining nodes with no neighbor */\n    public cleanRemoveNode(nodeId: string, keepDanglingNodes?: boolean) {\n        this.getAdjacentEdges(nodeId).forEach(edge => {\n            const neighbor = this.getNode(edge.from === nodeId ? edge.to : edge.from) as Node;\n            this.removeEdges(edge.id);\n            neighbor.count -= edge.count;\n            if(!keepDanglingNodes && this.getAdjacentEdges(neighbor.id).length === 0) {\n                this.removeNodes(neighbor.id);\n            }\n        });\n    }\n\n    /** Get the edges adjacent to a node (O(n) method) */\n    public getAdjacentEdges(nodeId: string): Edge[] {\n        return this.getEdges().filter(e => e.from === nodeId || e.to === nodeId);\n    }\n\n    /** Get the nodes connected to a node via a single node (0(n) method) */\n    public getConnectedNodes(nodeId: string): Node[] {\n        return this.getAdjacentEdges(nodeId)\n                    .map(e => this.getNode(e.from === nodeId ? e.to : e.from) as Node);\n    }\n\n    /**\n     * Merge this dataset with another one. \n     * \n     * When duplicates nodes or edges are found:\n     * - The existing item is kept and updated\n     * - Their 'count' properties are added\n     * - Their 'visible' properties are ORed\n     * - Their nodeOptions and edgeOptions are updated\n     * \n     * @param dataset \n     */\n    public merge(dataset: NetworkDataset): NetworkDataset {\n\n        dataset.getNodes().forEach(node => {\n            node = Object.assign({}, node); // Avoid modifying the original datasets\n            if(!this.hasNode(node.id)) {\n                this.addNode(node);\n            }\n            else {\n                // Merge the new node with the existing one (which takes precedence by default)\n                let existingNode = this.getNode(node.id) as Node;\n                if((node.precedence || 0) > (existingNode.precedence || 0)) {\n                    // Set the new node in the node index\n                    this.nodeIdx.set(node.id, node);\n                    // swap existingNode and node for the merging of count, visible and node options\n                    const temp = node;\n                    node = existingNode;\n                    existingNode = temp;\n                }\n                existingNode.count += node.count;\n                existingNode.visible = existingNode.visible || node.visible;\n                let options: {[key: string]: any};\n                if(typeof existingNode.type.nodeOptions === \"function\") {\n                    options = existingNode.type.nodeOptions(existingNode, existingNode.type);\n                }\n                else {\n                    options = existingNode.type.nodeOptions;\n                }\n                Utils.extend(existingNode, options);\n            }\n        });\n\n        dataset.getEdges().forEach(edge => {\n            edge = Object.assign({}, edge); // Avoid modifying the original datasets\n            if(!this.hasEdge(edge.id)) {\n                this.addEdge(edge);\n            }\n            else {\n                // Merge the new edge with the existing one (which takes precedence)\n                // eg. statistical and semantic edges\n                const existingEdge = this.getEdge(edge.id) as Edge;\n                existingEdge.count += edge.count;\n                existingEdge.visible = existingEdge.visible || edge.visible;\n                // Merge edge labels (taking duplicates into account)\n                if(!!existingEdge[\"label\"] && !!edge[\"label\"]){\n                    edge[\"labels\"].forEach(label => {\n                        if(existingEdge[\"labels\"].indexOf(label) === -1) {\n                            existingEdge[\"label\"] += \", \"+label;\n                            existingEdge[\"labels\"].push(label);\n                        }\n                    });\n                }\n                let options: {[key: string]: any};\n                if(typeof existingEdge.type.edgeOptions === \"function\") {\n                    const nodes = [existingEdge.from, existingEdge.to].map(id => this.nodeIdx[id]);\n                    options = existingEdge.type.edgeOptions(nodes, existingEdge, existingEdge.type);\n                }\n                else {\n                    options = existingEdge.type.edgeOptions;\n                }\n                Utils.extend(existingEdge, options);\n            }\n        });\n\n        return this;\n    }\n\n    /** Transfer nodes and edges to the Vis nodes and edges DataSets */\n    updateDatasets(nodes: DataSet, edges: DataSet) {\n        nodes.remove(nodes.get().filter(n => !this.getNode(n.id)?.visible));\n        edges.remove(edges.get().filter(e => !this.getEdge(e.id)?.visible));\n        nodes.update(this.getVisibleNodes());\n        edges.update(this.getVisibleEdges());\n    }\n\n    \n    private addNode(node: Node) {\n        if(this.hasNode(node.id)) {\n            throw new Error(`Node '${node.id}' already in dataset`);\n        }\n        this.nodeIdx.set(node.id, node);\n    }\n    \n    private addEdge(edge: Edge) {\n        if(this.hasEdge(edge.id)) {\n            throw new Error(`Edge '${edge.id}' already in dataset`);\n        }\n        if(!this.hasNode(edge.from) || !this.hasNode(edge.to)) {\n            throw new Error(`Edge '${edge.id}' cannot be added as one of the nodes is missing from the dataset`)\n        }\n        this.edgeIdx.set(edge.id, edge);\n    }\n\n    private removeNode(id: string) {\n        this.nodeIdx.delete(id);\n    }\n\n    private removeEdge(id: string) {\n        this.edgeIdx.delete(id);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/FacetChartDataPoint.html":{"url":"interfaces/FacetChartDataPoint.html","title":"interface - FacetChartDataPoint","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  FacetChartDataPoint\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            ngx-charts/facet-chart/facet-chart.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        ChartDataPoint\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            $item\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        $item\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        $item:     AggregationItem\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     AggregationItem\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import {Component, Input, OnInit, OnDestroy, OnChanges, SimpleChanges} from \"@angular/core\";\nimport {Results, Aggregation, AggregationItem} from \"@sinequa/core/web-services\";\nimport {Utils} from \"@sinequa/core/base\";\nimport {IntlService} from \"@sinequa/core/intl\";\nimport {AppService} from \"@sinequa/core/app-utils\";\nimport {SelectionService} from '@sinequa/components/selection';\nimport {Subscription} from \"rxjs\";\nimport {ChartOptions, ChartDataPoint} from \"../chart/chart\";\nimport {FacetService, AbstractFacet} from \"@sinequa/components/facet\";\nimport {Action} from \"@sinequa/components/action\";\n\nexport interface FacetChartDataPoint extends ChartDataPoint {\n    $item: AggregationItem;\n}\n\n@Component({\n    selector: \"sq-facet-ngx-chart\",\n    templateUrl: \"./facet-chart.html\"\n})\nexport class FacetNgxChart extends AbstractFacet implements OnInit, OnChanges, OnDestroy {\n    @Input() results: Results;\n    @Input() aggregation: string;\n    @Input() aggregations: string[];\n    @Input() chartType: string;\n    @Input() colorScheme: string;\n    @Input() colors: string[] = [\"#7aa3e5\"];    // Single color (default is bar chart)\n    @Input() filteredColor: string = \"#C3E6CB\";\n    @Input() selectedColor: string = \"#7acce5\";\n\n    // Aggregation from the Results object\n    data: Aggregation | undefined;\n\n    // sq-charts inputs\n    dataPoints: FacetChartDataPoint[];\n    options: ChartOptions;\n\n    private readonly selectedValues = new Set();\n\n    // Actions (displayed in facet menu)\n    // All actions are built in the constructor\n    private readonly clearFilters: Action;\n    private readonly selectField: Action;\n\n    // Subscriptions\n    private localeChange: Subscription;\n    private selectionChange: Subscription;\n\n    constructor(\n        private facetService: FacetService,\n        private intlService: IntlService,\n        private selectionService: SelectionService,\n        private appService: AppService\n    ){\n        super();\n\n        // Clear the current filters\n        this.clearFilters = new Action({\n            icon: \"far fa-minus-square\",\n            title: \"msg#facet.clearSelects\",\n            action: () => {\n                this.facetService.clearFiltersSearch(this.getName(), true);\n            }\n        });\n\n        this.selectField = new Action({\n            title: \"Select field\",\n            updater: (action) => {\n                if(this.aggregations) {                 \n                    action.text = this.facetService.getAggregationLabel(this.aggregation);\n                    action.children = this.aggregations\n                        .filter(v => v!==this.aggregation)\n                        .map(agg => {\n                            return new Action({\n                                text: this.facetService.getAggregationLabel(agg),\n                                action : () => {\n                                    this.aggregation = agg;\n                                    this.ngOnChanges(  {results: true});\n                                }\n                            });\n                        });\n                }\n            }\n        });\n\n    }\n\n    /**\n     * Name of the facet, used to create and retrieve selections\n     * through the facet service.\n     */\n    getName() : string {\n        return this.aggregation;\n    }\n\n    /**\n     * Returns all the actions that are relevant in the current context\n     */\n    override get actions(): Action[] {\n        const actions: Action[] = [];\n        if(this.hasFiltered()) {\n            actions.push(this.clearFilters);\n        }\n        if(!!this.selectField.text) {\n            actions.push(this.selectField);\n        }\n        return actions;\n    }\n\n    /**\n     * Returns true if there is an active selection (or exclusion) from this facet\n     */\n    hasFiltered(): boolean {\n        return this.facetService.hasFiltered(this.getName());\n    }\n\n    /**\n     * Generates the sq-chart input data, including formatting\n     */\n    private makeData() {\n        this.dataPoints = [];\n        if(this.data && this.data.items){\n            for (const item of this.data.items) {\n                this.dataPoints.push({\n                    name: this.facetService.formatValue(item),\n                    value: item.count,\n                    $item: item\n                });\n            }\n        }\n    }\n\n    /**\n     * Update selected values (the value in the aggregation that belong to a selected document)\n     */\n    private updateSelectedValues(){\n        this.selectedValues.clear();\n        this.results.records\n            .filter(record => record.$selected)\n            .forEach(record => {\n                if(this.data){\n                    const val = record[this.appService.getColumnAlias(this.appService.getColumn(this.data.column))];\n                    if(val){\n                        if(Utils.isString(val)){    // Sourcestr\n                            this.selectedValues.add(val.toLowerCase());\n                        }\n                        if(Utils.isArray(val)){\n                            val.forEach(v => {\n                                if(Utils.isString(v))\n                                    this.selectedValues.add(v.toLowerCase()); // Sourcecsv\n                                else\n                                    this.selectedValues.add(v.value.toLowerCase()); // Entity\n                            });\n                        }\n                    }\n                }\n            });\n    }\n\n    /**\n     * Create the chart options\n     */\n    private createChartOptions(){\n        this.options = {\n            type: this.chartType,\n            tickFormatter: this.tickFormatter,\n            colorScheme: this.colorScheme\n        };\n\n        if (this.colors && this.colors.length > 0) {\n            this.options.getItemColor = (value: string): string => {\n                const index = this.dataPoints.findIndex(dataPoint => dataPoint.name === value);\n                if (index === -1) {\n                    return \"black\";\n                }\n                const item = this.getItem(this.dataPoints[index]);\n                if (item) {\n                    if (this.isFiltered(item)) {\n                        return this.filteredColor;\n                    }\n                    if(this.selectedValues.has(Utils.toSqlValue(item.value).toLowerCase())){\n                        return this.selectedColor;\n                    }\n                }\n                return this.colors[index % this.colors.length]; // Rolling colors scheme\n            };\n        }\n    }\n\n    tickFormatter = (value: any): string => {\n        if (Utils.isNumber(value)) {\n            // No fractional counts\n            if (value % 1 !== 0) {\n                return \"\";\n            }\n            return this.intlService.formatNumber(value);\n        }\n        return value;\n    }\n\n    /**\n     * Subscribe to language changes, in order to reformat the data points.\n     * Subscribe to selection changes, in order to highlight selected documents.\n     */\n    ngOnInit() {\n        this.localeChange = Utils.subscribe(this.intlService.events,\n            (value) => {\n                this.makeData();\n            });\n        this.selectionChange = this.selectionService.events.subscribe(event => {\n            this.ngOnChanges(  {results: true});\n        });\n    }\n\n\n    ngOnChanges(changes: SimpleChanges) {\n        this.selectField.update();\n\n        if (changes.results) {\n            // may be null if no data\n            this.data = this.facetService.getAggregation(this.aggregation, this.results, {facetName: this.getName()});\n\n            this.updateSelectedValues();\n\n            this.createChartOptions();\n\n            this.makeData();\n        }\n    }\n\n    ngOnDestroy() {\n        this.localeChange.unsubscribe();\n        this.selectionChange.unsubscribe();\n    }\n\n    click(dataPoint: ChartDataPoint) {\n        if (this.data) {\n            const item = this.getItem(dataPoint);\n            if (!!item) {\n                if(!this.isFiltered(item))\n                    this.facetService.addFilterSearch(this.getName(), this.data, item);\n                else\n                    this.facetService.removeFilterSearch(this.getName(), this.data, item);\n            }\n        }\n    }\n\n    /**\n     * Returns true if the given AggregationItem is filtered\n     * @param item\n     */\n    isFiltered(item: AggregationItem) : boolean {\n        return !!this.data && this.facetService.itemFiltered(this.getName(), this.data, item);\n    }\n\n    getItem(dataPoint: ChartDataPoint): AggregationItem | undefined {\n        const _dataPoint = this.dataPoints.find(_dataPoint => _dataPoint.name === dataPoint.name && _dataPoint.value === dataPoint.value);\n        if (!!_dataPoint && !!_dataPoint.$item) {\n            return _dataPoint.$item;\n        }\n        return undefined;\n    }\n\n    /* AbstractFacet abstract methods */\n    override isHidden(): boolean {\n        // Always display if multivalued\n        return !this.aggregations && (!this.data || !this.dataPoints);\n    }\n\n}\n    \n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/FacetDateConfig.html":{"url":"interfaces/FacetDateConfig.html","title":"interface - FacetDateConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  FacetDateConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            timeline/bootstrap/facet-date.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                    FacetConfig\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            type\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        type\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        type:     \n\n                                    \n                                \n\n\n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import {\n    Component,\n    OnInit,\n    OnDestroy,\n    Input,\n    OnChanges,\n    SimpleChanges,\n    ChangeDetectorRef,\n} from \"@angular/core\";\nimport { FormBuilder, FormControl, FormGroup } from \"@angular/forms\";\nimport { Action } from \"@sinequa/components/action\";\nimport { AdvancedService } from \"@sinequa/components/advanced\";\nimport { AbstractFacet, FacetConfig, FacetService } from \"@sinequa/components/facet\";\nimport { SearchService } from \"@sinequa/components/search\";\nimport {\n    AppService,\n    Expr,\n    ExprBuilder,\n    ExprOperator,\n} from \"@sinequa/core/app-utils\";\nimport { Utils } from \"@sinequa/core/base\";\nimport {\n    Aggregation,\n    AggregationItem,\n    Results,\n} from \"@sinequa/core/web-services\";\nimport { Subscription } from \"rxjs\";\nimport { debounceTime, filter, map } from \"rxjs/operators\";\nimport { BsFacetTimelineComponent, TimelineSeries } from \".\";\nimport moment from \"moment\";\n\nexport interface FacetDateParams {\n    aggregation: string\n    showCount?: boolean;\n    timelineAggregation?: string;\n    displayEmptyDistributionIntervals?: boolean;\n    allowPredefinedRange?: boolean;\n    allowCustomRange?: boolean;\n    showCustomRange?: boolean;\n    replaceCurrent?: boolean;\n}\n\nexport interface FacetDateConfig extends FacetConfig {\n    type: 'date';\n}\n\n@Component({\n    selector: \"sq-facet-date\",\n    templateUrl: \"./facet-date.html\",\n    styleUrls: [\"./facet-date.scss\"],\n})\nexport class BsFacetDate\n    extends AbstractFacet\n    implements FacetDateParams, OnInit, OnChanges, OnDestroy\n{\n    @Input() name: string = \"Date\";\n    @Input() results: Results;\n    @Input() aggregation: string = \"Modified\";\n    @Input() timelineAggregation: string = \"Timeline\";\n    @Input(\"field\") _field?: string;\n    @Input() showCount: boolean = true; // Show the number of occurrences\n    @Input() displayEmptyDistributionIntervals: boolean = true; // Display items with count === 0\n    @Input() allowPredefinedRange = true; // will allow or not the use of datepickers and timeline for custom range selection\n    @Input() allowCustomRange = true; // will allow or not the use of datepickers and timeline for custom range selection\n    @Input() showCustomRange = false; // will show/hide datepickers and timeline, once allowed\n    @Input() replaceCurrent = true; // if true, the previous \"select\" is removed first\n\n    clearFiltersAction: Action;\n    items: AggregationItem[] = [];\n\n    form: FormGroup;\n    dateRangeControl: FormControl;\n\n    timeSeries: TimelineSeries[] = [];\n    selection: (Date | undefined)[] | undefined;\n\n    protected subscriptions: Subscription[] = [];\n    protected data: Aggregation | undefined;\n\n    get field(): string {return this._field || this.data?.column || ''}\n\n    constructor(\n        protected facetService: FacetService,\n        protected formBuilder: FormBuilder,\n        protected exprBuilder: ExprBuilder,\n        protected searchService: SearchService,\n        protected advancedService: AdvancedService,\n        protected appService: AppService,\n        public cdRef: ChangeDetectorRef\n    ) {\n        super();\n\n        this.clearFiltersAction = new Action({\n            icon: \"far fa-minus-square\",\n            title: \"msg#facet.filters.clear\",\n            action: () => {\n                this.facetService.clearFiltersSearch(this.name, true);\n            },\n        });\n    }\n\n    ngOnInit() {\n        if (this.allowCustomRange) {\n            this.dateRangeControl = new FormControl(\n                [undefined, undefined],\n                [\n                    this.advancedService.validators.range(this.field),\n                    this.advancedService.validators.date(this.field),\n                ]\n            );\n\n            this.form = this.formBuilder.group({\n                dateRange: this.dateRangeControl,\n            });\n\n            // Listen to query changes\n            this.subscriptions.push(\n                this.searchService.queryStream.subscribe(() => {\n                    const value = this.getRangeValue();\n                    const from = !value[0] ? undefined : moment(value[0]).toDate();\n                    const to = !value[1] ? undefined : moment(value[1]).toDate()\n                    this.dateRangeControl.setValue([from, to], { emitEvent: false });\n                    this.selection = !value[0] && !value[1] ? undefined : [from, to];\n                })\n            );\n\n            // Listen to form changes\n            this.subscriptions.push(\n                this.dateRangeControl.valueChanges\n                    .pipe(\n                        debounceTime(500),\n                        filter(() => this.form.valid)\n                    )\n                    .subscribe((value: (undefined | Date)[]) => {\n                        this.facetService.clearFiltersSearch(this.name, true);\n                        this.setCustomDateSelect(value);\n                    })\n            );\n        }\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n        if (this.allowCustomRange) {\n            this.updateTimeSeries(this.timelineAggregation);\n        }\n\n        if (changes.results) {\n            this.data = this.getAggregation(this.aggregation);\n            this.updateItems();\n        }\n    }\n\n    ngOnDestroy() {\n        this.subscriptions.map((item) => item.unsubscribe());\n    }\n\n    override get actions(): Action[] {\n        const actions: Action[] = [];\n        if (this.facetService.hasFiltered(this.name) && actions.length === 0) {\n            actions.push(this.clearFiltersAction);\n        }\n        return actions;\n    }\n\n    filterItem(item: AggregationItem, event) {\n        if (!this.isFiltered(item)) {\n            this.facetService.addFilterSearch(this.name, this.data!, item, {\n                replaceCurrent: this.replaceCurrent,\n            });\n        } else {\n            this.facetService.removeFilterSearch(this.name, this.data!, item);\n        }\n        event.preventDefault();\n    }\n\n    toggleCustomRange(event) {\n        this.showCustomRange = !this.showCustomRange;\n        event.stopPropagation();\n    }\n\n    private updateItems() {\n        this.items = this.displayEmptyDistributionIntervals\n            ? this.data?.items || []\n            : this.data?.items?.filter((item) => item.count > 0) || [];\n    }\n\n    private updateTimeSeries(aggregationName: string) {\n        this.timeSeries = [];\n        const ccaggregation = this.appService.getCCAggregation(aggregationName);\n        const aggregation = this.getAggregation(aggregationName);\n        if (aggregation && ccaggregation)\n            this.timeSeries.push(\n                BsFacetTimelineComponent.createTimeseries(\n                    { aggregation: aggregationName, primary: true },\n                    aggregation,\n                    ccaggregation\n                )\n            );\n    }\n\n    private getAggregation(aggregationName: string): Aggregation | undefined {\n        let aggregation = this.facetService.getAggregation(\n            aggregationName,\n            this.results\n        );\n\n        if (!aggregation) {\n            const query = Utils.copy(this.searchService.query);\n            query.action = \"aggregate\";\n            query.aggregations = [aggregationName];\n\n            this.searchService\n                .getResults(query, undefined, { searchInactive: true })\n                .pipe(\n                    map((results) => {\n                        aggregation = results.aggregations[0];\n                    })\n                );\n        }\n\n        return aggregation;\n    }\n\n    private setCustomDateSelect(range: (undefined | Date)[] | undefined) {\n        let expr: string | undefined;\n        if (range) {\n            const from = range[0];\n            const to = range[1];\n\n            // ommit time part of the Date in order to remove display dates with hh:mm:ss in the breadcrumb\n              from?.setHours(0);\n              from?.setMinutes(0);\n              from?.setSeconds(0);\n\n              to?.setHours(0);\n              to?.setMinutes(0);\n              to?.setSeconds(0);\n\n            // update search query with current selection\n            if (from && to) {\n                expr = this.exprBuilder.makeRangeExpr(this.field, from, to);\n            } else if (from) {\n                expr = this.exprBuilder.makeNumericalExpr(\n                    this.field,\n                    \">=\",\n                    from\n                );\n            } else if (to) {\n                expr = this.exprBuilder.makeNumericalExpr(this.field, \" 1) {\n            return expr.values;\n        } else {\n            return expr.value!;\n        }\n    }\n\n    public updateRange(range: Date[]) {\n        if (!!range) {\n            this.setCustomDateSelect(range);\n        }\n    }\n\n    public isFiltered(item: AggregationItem): boolean {\n        const filtered = this.facetService.getAggregationItemsFiltered(\n            this.name\n        );\n        return (\n            this.facetService.filteredIndex(this.data, filtered, item) !== -1\n        );\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/FacetDateParams.html":{"url":"interfaces/FacetDateParams.html","title":"interface - FacetDateParams","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  FacetDateParams\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            timeline/bootstrap/facet-date.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            aggregation\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            allowCustomRange\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            allowPredefinedRange\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            displayEmptyDistributionIntervals\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            replaceCurrent\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            showCount\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            showCustomRange\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            timelineAggregation\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        aggregation\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        aggregation:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        allowCustomRange\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        allowCustomRange:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        allowPredefinedRange\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        allowPredefinedRange:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        displayEmptyDistributionIntervals\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        displayEmptyDistributionIntervals:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        replaceCurrent\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        replaceCurrent:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        showCount\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        showCount:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        showCustomRange\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        showCustomRange:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        timelineAggregation\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        timelineAggregation:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import {\n    Component,\n    OnInit,\n    OnDestroy,\n    Input,\n    OnChanges,\n    SimpleChanges,\n    ChangeDetectorRef,\n} from \"@angular/core\";\nimport { FormBuilder, FormControl, FormGroup } from \"@angular/forms\";\nimport { Action } from \"@sinequa/components/action\";\nimport { AdvancedService } from \"@sinequa/components/advanced\";\nimport { AbstractFacet, FacetConfig, FacetService } from \"@sinequa/components/facet\";\nimport { SearchService } from \"@sinequa/components/search\";\nimport {\n    AppService,\n    Expr,\n    ExprBuilder,\n    ExprOperator,\n} from \"@sinequa/core/app-utils\";\nimport { Utils } from \"@sinequa/core/base\";\nimport {\n    Aggregation,\n    AggregationItem,\n    Results,\n} from \"@sinequa/core/web-services\";\nimport { Subscription } from \"rxjs\";\nimport { debounceTime, filter, map } from \"rxjs/operators\";\nimport { BsFacetTimelineComponent, TimelineSeries } from \".\";\nimport moment from \"moment\";\n\nexport interface FacetDateParams {\n    aggregation: string\n    showCount?: boolean;\n    timelineAggregation?: string;\n    displayEmptyDistributionIntervals?: boolean;\n    allowPredefinedRange?: boolean;\n    allowCustomRange?: boolean;\n    showCustomRange?: boolean;\n    replaceCurrent?: boolean;\n}\n\nexport interface FacetDateConfig extends FacetConfig {\n    type: 'date';\n}\n\n@Component({\n    selector: \"sq-facet-date\",\n    templateUrl: \"./facet-date.html\",\n    styleUrls: [\"./facet-date.scss\"],\n})\nexport class BsFacetDate\n    extends AbstractFacet\n    implements FacetDateParams, OnInit, OnChanges, OnDestroy\n{\n    @Input() name: string = \"Date\";\n    @Input() results: Results;\n    @Input() aggregation: string = \"Modified\";\n    @Input() timelineAggregation: string = \"Timeline\";\n    @Input(\"field\") _field?: string;\n    @Input() showCount: boolean = true; // Show the number of occurrences\n    @Input() displayEmptyDistributionIntervals: boolean = true; // Display items with count === 0\n    @Input() allowPredefinedRange = true; // will allow or not the use of datepickers and timeline for custom range selection\n    @Input() allowCustomRange = true; // will allow or not the use of datepickers and timeline for custom range selection\n    @Input() showCustomRange = false; // will show/hide datepickers and timeline, once allowed\n    @Input() replaceCurrent = true; // if true, the previous \"select\" is removed first\n\n    clearFiltersAction: Action;\n    items: AggregationItem[] = [];\n\n    form: FormGroup;\n    dateRangeControl: FormControl;\n\n    timeSeries: TimelineSeries[] = [];\n    selection: (Date | undefined)[] | undefined;\n\n    protected subscriptions: Subscription[] = [];\n    protected data: Aggregation | undefined;\n\n    get field(): string {return this._field || this.data?.column || ''}\n\n    constructor(\n        protected facetService: FacetService,\n        protected formBuilder: FormBuilder,\n        protected exprBuilder: ExprBuilder,\n        protected searchService: SearchService,\n        protected advancedService: AdvancedService,\n        protected appService: AppService,\n        public cdRef: ChangeDetectorRef\n    ) {\n        super();\n\n        this.clearFiltersAction = new Action({\n            icon: \"far fa-minus-square\",\n            title: \"msg#facet.filters.clear\",\n            action: () => {\n                this.facetService.clearFiltersSearch(this.name, true);\n            },\n        });\n    }\n\n    ngOnInit() {\n        if (this.allowCustomRange) {\n            this.dateRangeControl = new FormControl(\n                [undefined, undefined],\n                [\n                    this.advancedService.validators.range(this.field),\n                    this.advancedService.validators.date(this.field),\n                ]\n            );\n\n            this.form = this.formBuilder.group({\n                dateRange: this.dateRangeControl,\n            });\n\n            // Listen to query changes\n            this.subscriptions.push(\n                this.searchService.queryStream.subscribe(() => {\n                    const value = this.getRangeValue();\n                    const from = !value[0] ? undefined : moment(value[0]).toDate();\n                    const to = !value[1] ? undefined : moment(value[1]).toDate()\n                    this.dateRangeControl.setValue([from, to], { emitEvent: false });\n                    this.selection = !value[0] && !value[1] ? undefined : [from, to];\n                })\n            );\n\n            // Listen to form changes\n            this.subscriptions.push(\n                this.dateRangeControl.valueChanges\n                    .pipe(\n                        debounceTime(500),\n                        filter(() => this.form.valid)\n                    )\n                    .subscribe((value: (undefined | Date)[]) => {\n                        this.facetService.clearFiltersSearch(this.name, true);\n                        this.setCustomDateSelect(value);\n                    })\n            );\n        }\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n        if (this.allowCustomRange) {\n            this.updateTimeSeries(this.timelineAggregation);\n        }\n\n        if (changes.results) {\n            this.data = this.getAggregation(this.aggregation);\n            this.updateItems();\n        }\n    }\n\n    ngOnDestroy() {\n        this.subscriptions.map((item) => item.unsubscribe());\n    }\n\n    override get actions(): Action[] {\n        const actions: Action[] = [];\n        if (this.facetService.hasFiltered(this.name) && actions.length === 0) {\n            actions.push(this.clearFiltersAction);\n        }\n        return actions;\n    }\n\n    filterItem(item: AggregationItem, event) {\n        if (!this.isFiltered(item)) {\n            this.facetService.addFilterSearch(this.name, this.data!, item, {\n                replaceCurrent: this.replaceCurrent,\n            });\n        } else {\n            this.facetService.removeFilterSearch(this.name, this.data!, item);\n        }\n        event.preventDefault();\n    }\n\n    toggleCustomRange(event) {\n        this.showCustomRange = !this.showCustomRange;\n        event.stopPropagation();\n    }\n\n    private updateItems() {\n        this.items = this.displayEmptyDistributionIntervals\n            ? this.data?.items || []\n            : this.data?.items?.filter((item) => item.count > 0) || [];\n    }\n\n    private updateTimeSeries(aggregationName: string) {\n        this.timeSeries = [];\n        const ccaggregation = this.appService.getCCAggregation(aggregationName);\n        const aggregation = this.getAggregation(aggregationName);\n        if (aggregation && ccaggregation)\n            this.timeSeries.push(\n                BsFacetTimelineComponent.createTimeseries(\n                    { aggregation: aggregationName, primary: true },\n                    aggregation,\n                    ccaggregation\n                )\n            );\n    }\n\n    private getAggregation(aggregationName: string): Aggregation | undefined {\n        let aggregation = this.facetService.getAggregation(\n            aggregationName,\n            this.results\n        );\n\n        if (!aggregation) {\n            const query = Utils.copy(this.searchService.query);\n            query.action = \"aggregate\";\n            query.aggregations = [aggregationName];\n\n            this.searchService\n                .getResults(query, undefined, { searchInactive: true })\n                .pipe(\n                    map((results) => {\n                        aggregation = results.aggregations[0];\n                    })\n                );\n        }\n\n        return aggregation;\n    }\n\n    private setCustomDateSelect(range: (undefined | Date)[] | undefined) {\n        let expr: string | undefined;\n        if (range) {\n            const from = range[0];\n            const to = range[1];\n\n            // ommit time part of the Date in order to remove display dates with hh:mm:ss in the breadcrumb\n              from?.setHours(0);\n              from?.setMinutes(0);\n              from?.setSeconds(0);\n\n              to?.setHours(0);\n              to?.setMinutes(0);\n              to?.setSeconds(0);\n\n            // update search query with current selection\n            if (from && to) {\n                expr = this.exprBuilder.makeRangeExpr(this.field, from, to);\n            } else if (from) {\n                expr = this.exprBuilder.makeNumericalExpr(\n                    this.field,\n                    \">=\",\n                    from\n                );\n            } else if (to) {\n                expr = this.exprBuilder.makeNumericalExpr(this.field, \" 1) {\n            return expr.values;\n        } else {\n            return expr.value!;\n        }\n    }\n\n    public updateRange(range: Date[]) {\n        if (!!range) {\n            this.setCustomDateSelect(range);\n        }\n    }\n\n    public isFiltered(item: AggregationItem): boolean {\n        const filtered = this.facetService.getAggregationItemsFiltered(\n            this.name\n        );\n        return (\n            this.facetService.filteredIndex(this.data, filtered, item) !== -1\n        );\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/FacetNgxChart.html":{"url":"components/FacetNgxChart.html","title":"component - FacetNgxChart","body":"\n                   \n\n\n\n\n\n  Components\n  \n  FacetNgxChart\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    ngx-charts/facet-chart/facet-chart.ts\n\n\n\n\n    \n        Extends\n    \n    \n            AbstractFacet\n    \n\n    \n        Implements\n    \n    \n                    OnInit\n                    OnChanges\n                    OnDestroy\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                sq-facet-ngx-chart\n            \n\n\n\n\n            \n                templateUrl\n                ./facet-chart.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                data\n                            \n                            \n                                dataPoints\n                            \n                            \n                                options\n                            \n                            \n                                tickFormatter\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                click\n                            \n                            \n                                getItem\n                            \n                            \n                                getName\n                            \n                            \n                                hasFiltered\n                            \n                            \n                                isFiltered\n                            \n                            \n                                    \n                                isHidden\n                            \n                            \n                                ngOnChanges\n                            \n                            \n                                ngOnDestroy\n                            \n                            \n                                ngOnInit\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                aggregation\n                            \n                            \n                                aggregations\n                            \n                            \n                                chartType\n                            \n                            \n                                colors\n                            \n                            \n                                colorScheme\n                            \n                            \n                                filteredColor\n                            \n                            \n                                results\n                            \n                            \n                                selectedColor\n                            \n                        \n                    \n                \n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    actions\n                                \n                            \n                        \n                    \n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(facetService: FacetService, intlService: IntlService, selectionService: SelectionService, appService: AppService)\n                    \n                \n                        \n                            \n                                Defined in ngx-charts/facet-chart/facet-chart.ts:46\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        facetService\n                                                  \n                                                        \n                                                                    FacetService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        intlService\n                                                  \n                                                        \n                                                                    IntlService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        selectionService\n                                                  \n                                                        \n                                                                    SelectionService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        appService\n                                                  \n                                                        \n                                                                    AppService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        aggregation\n                    \n                \n                \n                    \n                        Type :         string\n\n                    \n                \n                        \n                            \n                                    Defined in ngx-charts/facet-chart/facet-chart.ts:22\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        aggregations\n                    \n                \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                        \n                            \n                                    Defined in ngx-charts/facet-chart/facet-chart.ts:23\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        chartType\n                    \n                \n                \n                    \n                        Type :         string\n\n                    \n                \n                        \n                            \n                                    Defined in ngx-charts/facet-chart/facet-chart.ts:24\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        colors\n                    \n                \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Default value : [\"#7aa3e5\"]\n                    \n                \n                        \n                            \n                                    Defined in ngx-charts/facet-chart/facet-chart.ts:26\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        colorScheme\n                    \n                \n                \n                    \n                        Type :         string\n\n                    \n                \n                        \n                            \n                                    Defined in ngx-charts/facet-chart/facet-chart.ts:25\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        filteredColor\n                    \n                \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : \"#C3E6CB\"\n                    \n                \n                        \n                            \n                                    Defined in ngx-charts/facet-chart/facet-chart.ts:27\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        results\n                    \n                \n                \n                    \n                        Type :     Results\n\n                    \n                \n                        \n                            \n                                    Defined in ngx-charts/facet-chart/facet-chart.ts:21\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        selectedColor\n                    \n                \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : \"#7acce5\"\n                    \n                \n                        \n                            \n                                    Defined in ngx-charts/facet-chart/facet-chart.ts:28\n                            \n                        \n            \n        \n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        click\n                        \n                    \n                \n            \n            \n                \nclick(dataPoint: ChartDataPoint)\n                \n            \n\n\n            \n                \n                    Defined in ngx-charts/facet-chart/facet-chart.ts:235\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dataPoint\n                                    \n                                                ChartDataPoint\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getItem\n                        \n                    \n                \n            \n            \n                \ngetItem(dataPoint: ChartDataPoint)\n                \n            \n\n\n            \n                \n                    Defined in ngx-charts/facet-chart/facet-chart.ts:255\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dataPoint\n                                    \n                                                ChartDataPoint\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     AggregationItem | undefined\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getName\n                        \n                    \n                \n            \n            \n                \ngetName()\n                \n            \n\n\n            \n                \n                    Defined in ngx-charts/facet-chart/facet-chart.ts:91\n                \n            \n\n\n            \n                \n                    Name of the facet, used to create and retrieve selections\nthrough the facet service.\n\n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        hasFiltered\n                        \n                    \n                \n            \n            \n                \nhasFiltered()\n                \n            \n\n\n            \n                \n                    Defined in ngx-charts/facet-chart/facet-chart.ts:112\n                \n            \n\n\n            \n                \n                    Returns true if there is an active selection (or exclusion) from this facet\n\n\n                    \n                        Returns :         boolean\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isFiltered\n                        \n                    \n                \n            \n            \n                \nisFiltered(item: AggregationItem)\n                \n            \n\n\n            \n                \n                    Defined in ngx-charts/facet-chart/facet-chart.ts:251\n                \n            \n\n\n            \n                \n                    Returns true if the given AggregationItem is filtered\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    item\n                                    \n                                            AggregationItem\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        isHidden\n                        \n                    \n                \n            \n            \n                \n                    \n                    isHidden()\n                \n            \n\n\n            \n                \n                    Defined in ngx-charts/facet-chart/facet-chart.ts:264\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         boolean\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnChanges\n                        \n                    \n                \n            \n            \n                \nngOnChanges(changes: SimpleChanges)\n                \n            \n\n\n            \n                \n                    Defined in ngx-charts/facet-chart/facet-chart.ts:215\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    changes\n                                    \n                                                SimpleChanges\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnDestroy\n                        \n                    \n                \n            \n            \n                \nngOnDestroy()\n                \n            \n\n\n            \n                \n                    Defined in ngx-charts/facet-chart/facet-chart.ts:230\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnInit\n                        \n                    \n                \n            \n            \n                \nngOnInit()\n                \n            \n\n\n            \n                \n                    Defined in ngx-charts/facet-chart/facet-chart.ts:204\n                \n            \n\n\n            \n                \n                    Subscribe to language changes, in order to reformat the data points.\nSubscribe to selection changes, in order to highlight selected documents.\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        data\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Aggregation | undefined\n\n                    \n                \n                    \n                        \n                                Defined in ngx-charts/facet-chart/facet-chart.ts:31\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        dataPoints\n                        \n                    \n                \n            \n                \n                    \n                        Type :     FacetChartDataPoint[]\n\n                    \n                \n                    \n                        \n                                Defined in ngx-charts/facet-chart/facet-chart.ts:34\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        options\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ChartOptions\n\n                    \n                \n                    \n                        \n                                Defined in ngx-charts/facet-chart/facet-chart.ts:35\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        tickFormatter\n                        \n                    \n                \n            \n                \n                    \n                        Default value : () => {...}\n                    \n                \n                    \n                        \n                                Defined in ngx-charts/facet-chart/facet-chart.ts:189\n                        \n                    \n\n\n        \n    \n\n\n    \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        actions\n                    \n                \n\n                \n                    \n                        getactions()\n                    \n                \n                            \n                                \n                                    Defined in ngx-charts/facet-chart/facet-chart.ts:98\n                                \n                            \n                    \n                        \n                                Returns all the actions that are relevant in the current context\n\n\n                                \n                                    Returns :     Action[]\n\n                                \n                        \n                    \n\n            \n        \n\n\n\n\n    \n        import {Component, Input, OnInit, OnDestroy, OnChanges, SimpleChanges} from \"@angular/core\";\nimport {Results, Aggregation, AggregationItem} from \"@sinequa/core/web-services\";\nimport {Utils} from \"@sinequa/core/base\";\nimport {IntlService} from \"@sinequa/core/intl\";\nimport {AppService} from \"@sinequa/core/app-utils\";\nimport {SelectionService} from '@sinequa/components/selection';\nimport {Subscription} from \"rxjs\";\nimport {ChartOptions, ChartDataPoint} from \"../chart/chart\";\nimport {FacetService, AbstractFacet} from \"@sinequa/components/facet\";\nimport {Action} from \"@sinequa/components/action\";\n\nexport interface FacetChartDataPoint extends ChartDataPoint {\n    $item: AggregationItem;\n}\n\n@Component({\n    selector: \"sq-facet-ngx-chart\",\n    templateUrl: \"./facet-chart.html\"\n})\nexport class FacetNgxChart extends AbstractFacet implements OnInit, OnChanges, OnDestroy {\n    @Input() results: Results;\n    @Input() aggregation: string;\n    @Input() aggregations: string[];\n    @Input() chartType: string;\n    @Input() colorScheme: string;\n    @Input() colors: string[] = [\"#7aa3e5\"];    // Single color (default is bar chart)\n    @Input() filteredColor: string = \"#C3E6CB\";\n    @Input() selectedColor: string = \"#7acce5\";\n\n    // Aggregation from the Results object\n    data: Aggregation | undefined;\n\n    // sq-charts inputs\n    dataPoints: FacetChartDataPoint[];\n    options: ChartOptions;\n\n    private readonly selectedValues = new Set();\n\n    // Actions (displayed in facet menu)\n    // All actions are built in the constructor\n    private readonly clearFilters: Action;\n    private readonly selectField: Action;\n\n    // Subscriptions\n    private localeChange: Subscription;\n    private selectionChange: Subscription;\n\n    constructor(\n        private facetService: FacetService,\n        private intlService: IntlService,\n        private selectionService: SelectionService,\n        private appService: AppService\n    ){\n        super();\n\n        // Clear the current filters\n        this.clearFilters = new Action({\n            icon: \"far fa-minus-square\",\n            title: \"msg#facet.clearSelects\",\n            action: () => {\n                this.facetService.clearFiltersSearch(this.getName(), true);\n            }\n        });\n\n        this.selectField = new Action({\n            title: \"Select field\",\n            updater: (action) => {\n                if(this.aggregations) {                 \n                    action.text = this.facetService.getAggregationLabel(this.aggregation);\n                    action.children = this.aggregations\n                        .filter(v => v!==this.aggregation)\n                        .map(agg => {\n                            return new Action({\n                                text: this.facetService.getAggregationLabel(agg),\n                                action : () => {\n                                    this.aggregation = agg;\n                                    this.ngOnChanges(  {results: true});\n                                }\n                            });\n                        });\n                }\n            }\n        });\n\n    }\n\n    /**\n     * Name of the facet, used to create and retrieve selections\n     * through the facet service.\n     */\n    getName() : string {\n        return this.aggregation;\n    }\n\n    /**\n     * Returns all the actions that are relevant in the current context\n     */\n    override get actions(): Action[] {\n        const actions: Action[] = [];\n        if(this.hasFiltered()) {\n            actions.push(this.clearFilters);\n        }\n        if(!!this.selectField.text) {\n            actions.push(this.selectField);\n        }\n        return actions;\n    }\n\n    /**\n     * Returns true if there is an active selection (or exclusion) from this facet\n     */\n    hasFiltered(): boolean {\n        return this.facetService.hasFiltered(this.getName());\n    }\n\n    /**\n     * Generates the sq-chart input data, including formatting\n     */\n    private makeData() {\n        this.dataPoints = [];\n        if(this.data && this.data.items){\n            for (const item of this.data.items) {\n                this.dataPoints.push({\n                    name: this.facetService.formatValue(item),\n                    value: item.count,\n                    $item: item\n                });\n            }\n        }\n    }\n\n    /**\n     * Update selected values (the value in the aggregation that belong to a selected document)\n     */\n    private updateSelectedValues(){\n        this.selectedValues.clear();\n        this.results.records\n            .filter(record => record.$selected)\n            .forEach(record => {\n                if(this.data){\n                    const val = record[this.appService.getColumnAlias(this.appService.getColumn(this.data.column))];\n                    if(val){\n                        if(Utils.isString(val)){    // Sourcestr\n                            this.selectedValues.add(val.toLowerCase());\n                        }\n                        if(Utils.isArray(val)){\n                            val.forEach(v => {\n                                if(Utils.isString(v))\n                                    this.selectedValues.add(v.toLowerCase()); // Sourcecsv\n                                else\n                                    this.selectedValues.add(v.value.toLowerCase()); // Entity\n                            });\n                        }\n                    }\n                }\n            });\n    }\n\n    /**\n     * Create the chart options\n     */\n    private createChartOptions(){\n        this.options = {\n            type: this.chartType,\n            tickFormatter: this.tickFormatter,\n            colorScheme: this.colorScheme\n        };\n\n        if (this.colors && this.colors.length > 0) {\n            this.options.getItemColor = (value: string): string => {\n                const index = this.dataPoints.findIndex(dataPoint => dataPoint.name === value);\n                if (index === -1) {\n                    return \"black\";\n                }\n                const item = this.getItem(this.dataPoints[index]);\n                if (item) {\n                    if (this.isFiltered(item)) {\n                        return this.filteredColor;\n                    }\n                    if(this.selectedValues.has(Utils.toSqlValue(item.value).toLowerCase())){\n                        return this.selectedColor;\n                    }\n                }\n                return this.colors[index % this.colors.length]; // Rolling colors scheme\n            };\n        }\n    }\n\n    tickFormatter = (value: any): string => {\n        if (Utils.isNumber(value)) {\n            // No fractional counts\n            if (value % 1 !== 0) {\n                return \"\";\n            }\n            return this.intlService.formatNumber(value);\n        }\n        return value;\n    }\n\n    /**\n     * Subscribe to language changes, in order to reformat the data points.\n     * Subscribe to selection changes, in order to highlight selected documents.\n     */\n    ngOnInit() {\n        this.localeChange = Utils.subscribe(this.intlService.events,\n            (value) => {\n                this.makeData();\n            });\n        this.selectionChange = this.selectionService.events.subscribe(event => {\n            this.ngOnChanges(  {results: true});\n        });\n    }\n\n\n    ngOnChanges(changes: SimpleChanges) {\n        this.selectField.update();\n\n        if (changes.results) {\n            // may be null if no data\n            this.data = this.facetService.getAggregation(this.aggregation, this.results, {facetName: this.getName()});\n\n            this.updateSelectedValues();\n\n            this.createChartOptions();\n\n            this.makeData();\n        }\n    }\n\n    ngOnDestroy() {\n        this.localeChange.unsubscribe();\n        this.selectionChange.unsubscribe();\n    }\n\n    click(dataPoint: ChartDataPoint) {\n        if (this.data) {\n            const item = this.getItem(dataPoint);\n            if (!!item) {\n                if(!this.isFiltered(item))\n                    this.facetService.addFilterSearch(this.getName(), this.data, item);\n                else\n                    this.facetService.removeFilterSearch(this.getName(), this.data, item);\n            }\n        }\n    }\n\n    /**\n     * Returns true if the given AggregationItem is filtered\n     * @param item\n     */\n    isFiltered(item: AggregationItem) : boolean {\n        return !!this.data && this.facetService.itemFiltered(this.getName(), this.data, item);\n    }\n\n    getItem(dataPoint: ChartDataPoint): AggregationItem | undefined {\n        const _dataPoint = this.dataPoints.find(_dataPoint => _dataPoint.name === dataPoint.name && _dataPoint.value === dataPoint.value);\n        if (!!_dataPoint && !!_dataPoint.$item) {\n            return _dataPoint.$item;\n        }\n        return undefined;\n    }\n\n    /* AbstractFacet abstract methods */\n    override isHidden(): boolean {\n        // Always display if multivalued\n        return !this.aggregations && (!this.data || !this.dataPoints);\n    }\n\n}\n    \n\n    \n        \n    \n\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '    '\n    var COMPONENTS = [{'name': 'AgGridViewComponent', 'selector': 'sq-ag-grid-view'},{'name': 'BsEdgeInfoCard', 'selector': 'sq-edge-info-card'},{'name': 'BsFacetDate', 'selector': 'sq-facet-date'},{'name': 'BsFacetHeatmapComponent', 'selector': 'sq-facet-heatmap'},{'name': 'BsFacetTimelineComponent', 'selector': 'sq-facet-timeline'},{'name': 'BsHeatmapComponent', 'selector': 'sq-heatmap'},{'name': 'BsNodeInfoCard', 'selector': 'sq-node-info-card'},{'name': 'BsResultsHeatmapView', 'selector': 'sq-results-heatmap-view'},{'name': 'BsTimelineComponent', 'selector': 'sq-timeline'},{'name': 'BsTooltipComponent', 'selector': 'sq-tooltip'},{'name': 'DataModalComponent', 'selector': 'sq-data-modal'},{'name': 'FacetNgxChart', 'selector': 'sq-facet-ngx-chart'},{'name': 'FacetWrapperComponent', 'selector': 'facet-wrapper'},{'name': 'FusionChart', 'selector': 'sq-fusion-chart'},{'name': 'MapComponent', 'selector': 'sq-googlemaps'},{'name': 'MoneyCloudComponent', 'selector': 'sq-money-cloud'},{'name': 'MoneyTimelineComponent', 'selector': 'sq-money-timeline'},{'name': 'NetworkComponent', 'selector': 'sq-network'},{'name': 'NgxChart', 'selector': 'sq-ngx-chart'},{'name': 'ResultTimeline', 'selector': 'sq-result-timeline'},{'name': 'TimelineLegendComponent', 'selector': 'sq-timeline-legend'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'FacetNgxChart'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/FacetWrapperComponent.html":{"url":"components/FacetWrapperComponent.html","title":"component - FacetWrapperComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  FacetWrapperComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    ag-grid/facet-wrapper.component.ts\n\n\n\n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                facet-wrapper\n            \n\n\n            \n                styles\n                \nsq-facet-list, sq-facet-tree {\n    display: block;\n    width: 200px;\n}\n\n:is(sq-facet-list, sq-facet-tree) ::ng-deep .list-group > div.pb-2 {\n    padding-bottom: 0.25rem!important;\n    padding-top: 0.25rem!important;\n}\n   \n            \n\n            \n                template\n                \n\n\n            \n\n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                aggregationName\n                            \n                            \n                                field\n                            \n                            \n                                isTree\n                            \n                            \n                                name\n                            \n                            \n                                params\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                agInit\n                            \n                            \n                                doesFilterPass\n                            \n                            \n                                getModel\n                            \n                            \n                                isFilterActive\n                            \n                            \n                                setModel\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    datasource\n                                \n                                \n                                    results\n                                \n                                \n                                    aggregation\n                                \n                                \n                                    appService\n                                \n                                \n                                    facetService\n                                \n                            \n                        \n                    \n        \n    \n\n\n\n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        agInit\n                        \n                    \n                \n            \n            \n                \nagInit(params: IFilterParams)\n                \n            \n\n\n            \n                \n                    Defined in ag-grid/facet-wrapper.component.ts:59\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    params\n                                    \n                                                IFilterParams\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        doesFilterPass\n                        \n                    \n                \n            \n            \n                \ndoesFilterPass(params: IDoesFilterPassParams)\n                \n            \n\n\n            \n                \n                    Defined in ag-grid/facet-wrapper.component.ts:78\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    params\n                                    \n                                                IDoesFilterPassParams\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getModel\n                        \n                    \n                \n            \n            \n                \ngetModel()\n                \n            \n\n\n            \n                \n                    Defined in ag-grid/facet-wrapper.component.ts:82\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     { facetActive: boolean; }\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isFilterActive\n                        \n                    \n                \n            \n            \n                \nisFilterActive()\n                \n            \n\n\n            \n                \n                    Defined in ag-grid/facet-wrapper.component.ts:73\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         boolean\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        setModel\n                        \n                    \n                \n            \n            \n                \nsetModel(model: any)\n                \n            \n\n\n            \n                \n                    Defined in ag-grid/facet-wrapper.component.ts:86\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    model\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        aggregationName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in ag-grid/facet-wrapper.component.ts:32\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        field\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in ag-grid/facet-wrapper.component.ts:30\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isTree\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in ag-grid/facet-wrapper.component.ts:31\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in ag-grid/facet-wrapper.component.ts:33\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        params\n                        \n                    \n                \n            \n                \n                    \n                        Type :         IFilterParams\n\n                    \n                \n                    \n                        \n                                Defined in ag-grid/facet-wrapper.component.ts:28\n                        \n                    \n\n\n        \n    \n\n\n    \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        datasource\n                    \n                \n\n                \n                    \n                        getdatasource()\n                    \n                \n                            \n                                \n                                    Defined in ag-grid/facet-wrapper.component.ts:35\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        results\n                    \n                \n\n                \n                    \n                        getresults()\n                    \n                \n                            \n                                \n                                    Defined in ag-grid/facet-wrapper.component.ts:39\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        aggregation\n                    \n                \n\n                \n                    \n                        getaggregation()\n                    \n                \n                            \n                                \n                                    Defined in ag-grid/facet-wrapper.component.ts:43\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        appService\n                    \n                \n\n                \n                    \n                        getappService()\n                    \n                \n                            \n                                \n                                    Defined in ag-grid/facet-wrapper.component.ts:51\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        facetService\n                    \n                \n\n                \n                    \n                        getfacetService()\n                    \n                \n                            \n                                \n                                    Defined in ag-grid/facet-wrapper.component.ts:55\n                                \n                            \n\n            \n        \n\n\n\n\n    \n        import { IDoesFilterPassParams, IFilterParams } from \"ag-grid-community\";\nimport { Component } from \"@angular/core\";\nimport { SqDatasource } from \"./datasource\";\nimport { Aggregation, Results } from \"@sinequa/core/web-services\";\nimport { AppService } from \"@sinequa/core/app-utils\";\nimport { Utils } from \"@sinequa/core/base\";\nimport { FacetService } from \"@sinequa/components/facet\";\n\n@Component({\n   selector: 'facet-wrapper',\n   template: `\n\n\n   `,\n   styles: [`\nsq-facet-list, sq-facet-tree {\n    display: block;\n    width: 200px;\n}\n\n:is(sq-facet-list, sq-facet-tree) ::ng-deep .list-group > div.pb-2 {\n    padding-bottom: 0.25rem!important;\n    padding-top: 0.25rem!important;\n}\n   `]\n})\nexport class FacetWrapperComponent {\n    params: IFilterParams;\n\n    field: string;\n    isTree: boolean;\n    aggregationName: string;\n    name: string;\n\n    get datasource(): SqDatasource {\n        return this.params.rowModel['datasource'];\n    }\n\n    get results(): Results {\n        return this.datasource.latestResults;\n    }\n\n    get aggregation(): Aggregation | undefined {\n        return this.results.aggregations.find(a => {\n            const col = this.appService.getColumn(a.column);\n            const alias = this.appService.getColumnAlias(col);\n            return Utils.eqNC(alias, this.field);\n        });\n    }\n\n    get appService(): AppService {\n        return this.datasource.appService;\n    }\n\n    get facetService(): FacetService {\n        return this.datasource.facetService;\n    }\n    \n    agInit(params: IFilterParams): void {\n        this.params = params;\n        if(!this.params.colDef.field)\n            throw Error(\"Column definitions need at least a field\");\n        this.field = this.params.colDef.field; // Field is the alias\n        this.isTree = this.appService.isTree(this.field);\n        const agg = this.aggregation?.name;\n        if(!agg)\n            throw Error(`An aggregation needs to be defined for '${this.field}' to display a facet`);\n        this.aggregationName = agg;\n        this.name = \"grid-filter-\"+this.field;\n        console.log(\"agInit called \", this.name);\n    }\n\n    isFilterActive(): boolean {\n        return this.facetService.hasFiltered(this.name);\n    }\n\n    // Not called in infinite row model setup\n    doesFilterPass(params: IDoesFilterPassParams): boolean {\n        return true;\n    }\n\n    getModel() {\n        return this.isFilterActive()? {facetActive: true} : undefined;\n    }\n\n    setModel(model: any) {\n    }\n\n}\n\n    \n\n\n    \n            \nsq-facet-list, sq-facet-tree {\n    display: block;\n    width: 200px;\n}\n\n:is(sq-facet-list, sq-facet-tree) ::ng-deep .list-group > div.pb-2 {\n    padding-bottom: 0.25rem!important;\n    padding-top: 0.25rem!important;\n}\n   \n\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = ''\n    var COMPONENTS = [{'name': 'AgGridViewComponent', 'selector': 'sq-ag-grid-view'},{'name': 'BsEdgeInfoCard', 'selector': 'sq-edge-info-card'},{'name': 'BsFacetDate', 'selector': 'sq-facet-date'},{'name': 'BsFacetHeatmapComponent', 'selector': 'sq-facet-heatmap'},{'name': 'BsFacetTimelineComponent', 'selector': 'sq-facet-timeline'},{'name': 'BsHeatmapComponent', 'selector': 'sq-heatmap'},{'name': 'BsNodeInfoCard', 'selector': 'sq-node-info-card'},{'name': 'BsResultsHeatmapView', 'selector': 'sq-results-heatmap-view'},{'name': 'BsTimelineComponent', 'selector': 'sq-timeline'},{'name': 'BsTooltipComponent', 'selector': 'sq-tooltip'},{'name': 'DataModalComponent', 'selector': 'sq-data-modal'},{'name': 'FacetNgxChart', 'selector': 'sq-facet-ngx-chart'},{'name': 'FacetWrapperComponent', 'selector': 'facet-wrapper'},{'name': 'FusionChart', 'selector': 'sq-fusion-chart'},{'name': 'MapComponent', 'selector': 'sq-googlemaps'},{'name': 'MoneyCloudComponent', 'selector': 'sq-money-cloud'},{'name': 'MoneyTimelineComponent', 'selector': 'sq-money-timeline'},{'name': 'NetworkComponent', 'selector': 'sq-network'},{'name': 'NgxChart', 'selector': 'sq-ngx-chart'},{'name': 'ResultTimeline', 'selector': 'sq-result-timeline'},{'name': 'TimelineLegendComponent', 'selector': 'sq-timeline-legend'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'FacetWrapperComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/FinanceModule.html":{"url":"modules/FinanceModule.html","title":"module - FinanceModule","body":"\n                   \n\n\n\n\n    Modules\n    FinanceModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_FinanceModule\n\n\n\ncluster_FinanceModule_exports\n\n\n\ncluster_FinanceModule_imports\n\n\n\ncluster_FinanceModule_declarations\n\n\n\n\nMoneyCloudComponent\n\nMoneyCloudComponent\n\n\n\nFinanceModule\n\nFinanceModule\n\nFinanceModule -->\n\nMoneyCloudComponent->FinanceModule\n\n\n\n\n\nMoneyTimelineComponent\n\nMoneyTimelineComponent\n\nFinanceModule -->\n\nMoneyTimelineComponent->FinanceModule\n\n\n\n\n\nMoneyCloudComponent \n\nMoneyCloudComponent \n\nMoneyCloudComponent  -->\n\nFinanceModule->MoneyCloudComponent \n\n\n\n\n\nMoneyTimelineComponent \n\nMoneyTimelineComponent \n\nMoneyTimelineComponent  -->\n\nFinanceModule->MoneyTimelineComponent \n\n\n\n\n\nBsHeatmapModule\n\nBsHeatmapModule\n\nFinanceModule -->\n\nBsHeatmapModule->FinanceModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            finance/finance.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Declarations\n                    \n                        \n                            MoneyCloudComponent\n                        \n                        \n                            MoneyTimelineComponent\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            BsHeatmapModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            MoneyCloudComponent\n                        \n                        \n                            MoneyTimelineComponent\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { NgModule } from \"@angular/core\";\nimport { CommonModule } from \"@angular/common\";\n\nimport { IntlModule } from '@sinequa/core/intl';\nimport { UtilsModule } from \"@sinequa/components/utils\";\nimport { MoneyTimelineComponent } from \"./money-timeline/money-timeline.component\";\nimport { BsHeatmapModule } from \"@sinequa/analytics/heatmap\";\nimport { BsActionModule } from \"@sinequa/components/action\";\nimport { MoneyCloudComponent } from \"./money-cloud/money-cloud.component\";\n\n\n@NgModule({\n\n    imports: [\n        CommonModule,\n        IntlModule,\n        UtilsModule,\n        BsHeatmapModule,\n        BsActionModule\n    ],\n    declarations: [\n        MoneyTimelineComponent,\n        MoneyCloudComponent\n    ],\n    exports: [\n        MoneyTimelineComponent,\n        MoneyCloudComponent\n    ],\n})\nexport class FinanceModule {}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/FusionChartsModule.html":{"url":"modules/FusionChartsModule.html","title":"module - FusionChartsModule","body":"\n                   \n\n\n\n\n    Modules\n    FusionChartsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_FusionChartsModule\n\n\n\ncluster_FusionChartsModule_declarations\n\n\n\ncluster_FusionChartsModule_exports\n\n\n\n\nFusionChart\n\nFusionChart\n\n\n\nFusionChartsModule\n\nFusionChartsModule\n\nFusionChartsModule -->\n\nFusionChart->FusionChartsModule\n\n\n\n\n\nFusionChart \n\nFusionChart \n\nFusionChart  -->\n\nFusionChartsModule->FusionChart \n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            fusioncharts/fusioncharts.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Declarations\n                    \n                        \n                            FusionChart\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            FusionChart\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { NgModule } from \"@angular/core\";\nimport { CommonModule } from \"@angular/common\";\n\nimport { FusionChartsModule as FCModule } from \"angular-fusioncharts\";\n\n// Import FusionCharts library and chart modules\nimport * as FusionCharts from \"fusioncharts\";\nimport * as charts from \"fusioncharts/fusioncharts.charts\";\nimport * as FusionTheme from \"fusioncharts/themes/fusioncharts.theme.fusion\";\nimport * as CandyTheme from \"fusioncharts/themes/fusioncharts.theme.candy\";\n\nimport { IntlModule } from '@sinequa/core/intl';\nimport { BsSelectionModule } from '@sinequa/components/selection';\nimport { UtilsModule } from \"@sinequa/components/utils\";\n\nimport { FusionChart } from \"./chart/chart\";\n\nFusionCharts.options.creditLabel = false;\n// Fusion is a light theme, Candy is a dark theme\nFCModule.fcRoot(FusionCharts, charts, FusionTheme, CandyTheme);\n\n@NgModule({\n\n    imports: [\n        CommonModule,\n        IntlModule,\n        UtilsModule,\n        BsSelectionModule,\n        FCModule\n    ],\n    declarations: [\n        FusionChart\n    ],\n    exports: [\n        FusionChart\n    ],\n})\nexport class FusionChartsModule {}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/GoogleMapsModule.html":{"url":"modules/GoogleMapsModule.html","title":"module - GoogleMapsModule","body":"\n                   \n\n\n\n\n    Modules\n    GoogleMapsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_GoogleMapsModule\n\n\n\ncluster_GoogleMapsModule_declarations\n\n\n\ncluster_GoogleMapsModule_exports\n\n\n\n\nMapComponent\n\nMapComponent\n\n\n\nGoogleMapsModule\n\nGoogleMapsModule\n\nGoogleMapsModule -->\n\nMapComponent->GoogleMapsModule\n\n\n\n\n\nMapComponent \n\nMapComponent \n\nMapComponent  -->\n\nGoogleMapsModule->MapComponent \n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            googlemaps/googlemaps.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Declarations\n                    \n                        \n                            MapComponent\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            MapComponent\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { NgModule } from \"@angular/core\";\nimport { CommonModule } from \"@angular/common\";\n\nimport { IntlModule } from '@sinequa/core/intl';\nimport { BsActionModule } from \"@sinequa/components/action\";\nimport { BsFacetModule } from \"@sinequa/components/facet\";\nimport { BsSelectionModule } from '@sinequa/components/selection';\n\nimport { AgmCoreModule } from '@agm/core';\nimport { MapComponent } from './map.component';\n\n@NgModule({\n\n    imports: [\n        CommonModule,\n        IntlModule,\n        BsActionModule,\n        BsFacetModule,\n        BsSelectionModule,\n        \n        AgmCoreModule,\n    ],\n    declarations: [\n        MapComponent\n    ],\n    exports: [\n        MapComponent\n    ],\n})\nexport class GoogleMapsModule {}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/HeatmapItem.html":{"url":"interfaces/HeatmapItem.html","title":"interface - HeatmapItem","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  HeatmapItem\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            heatmap/bootstrap/heatmap.component.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            count\n                                        \n                                \n                                \n                                        \n                                            display\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            selected\n                                        \n                                \n                                \n                                        \n                                            value\n                                        \n                                \n                                \n                                        \n                                            x\n                                        \n                                \n                                \n                                        \n                                            y\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        count\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        count:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        display\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        display:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        selected\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        selected:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        value\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        value:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        x\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        x:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        y\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        y:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Component, ElementRef, Output, EventEmitter, Input, ViewChild, OnChanges, AfterViewInit } from '@angular/core';\n\nimport * as d3 from 'd3';\n\nexport interface HeatmapItem {\n    x: string;\n    y: string;\n    count: number;\n    value: string;\n    display: string;\n    selected?: boolean;\n}\n\n@Component({\n    selector: \"sq-heatmap\",\n    templateUrl: \"./heatmap.component.html\",\n    styleUrls: ['./heatmap.component.scss']\n})\nexport class BsHeatmapComponent implements OnChanges, AfterViewInit {\n    /**\n     * Raw data to display (will be filtered in function of maxX and maxY parameters)\n     */\n    @Input() data: HeatmapItem[];\n\n    // Graphical parameters\n    @Input() height = 600;\n    @Input() width = 600;\n    @Input() margin = {top: 100, bottom: 20, left: 100, right: 40};\n    @Input() transition = 1000; // Transition time in ms (0 to avoid transitions)\n\n    // Interaction parameters\n    @Input() itemsClickable = true;\n    @Input() axisClickable = true;\n\n    // Axis/Scales parameters\n    @Input() buckets = 9; // Color buckets\n    @Input() colorScheme = \"schemeBlues\"; // Color scheme from D3\n    @Input() maxX = 20; // Max items on X\n    @Input() maxY = 20; // Max items on Y\n    @Input() theme: \"light\" | \"dark\" = \"light\";\n    \n    // Events from user interactions\n    @Output() itemClicked = new EventEmitter();\n    @Output() axisClicked = new EventEmitter();\n\n    // D3 Scales\n    x: d3.ScaleBand;\n    y: d3.ScaleBand;\n    color: d3.ScaleQuantile;\n\n    // Axes\n    @ViewChild(\"xAxis\") gx: ElementRef;\n    @ViewChild(\"yAxis\") gy: ElementRef;\n    xAxis: d3.Selection;\n    yAxis: d3.Selection;\n    \n    // Data actually displayed\n    dataFiltered: HeatmapItem[] = [];\n\n    // Tooltip    \n    tooltipItem?: HeatmapItem;\n    tooltipOrientation: \"left\" | \"right\";\n    tooltipTop: number;\n    tooltipRight: number;\n    tooltipLeft: number;\n\n    // Misc\n    viewInit: boolean;\n    originalCount: number;\n\n    constructor(\n        private el: ElementRef\n    ){}\n\n    /**\n     * ngOnChanges is used to respond to changes in the data (or chart parameter)\n     */\n    ngOnChanges() {\n\n        this.data = this.data || [];\n\n        // Pre-process data\n        const xLabels = Array.from(new Set(this.data.map(value => value.x))).slice(0, this.maxX);\n        const yLabels = Array.from(new Set(this.data.map(value => value.y))).slice(0, this.maxY);\n        this.dataFiltered = this.data.filter(value => xLabels.includes(value.x) && yLabels.includes(value.y));\n\n        // Create scales\n        this.x = d3.scaleBand()\n            .domain(xLabels)\n            .range([0, this.width-this.margin.left-this.margin.right]);\n\n        this.y = d3.scaleBand()\n            .domain(yLabels)\n            .range([0, this.height-this.margin.top-this.margin.bottom]);\n\n        this.color = d3.scaleQuantile()\n            .domain(this.dataFiltered.map(item => item.count))\n            .range(d3[this.colorScheme][this.buckets]);\n\n        // Note: ngOnChanges is always called once, before ngAfterViewInit\n        if(this.viewInit) {\n            this.buildChart(!!this.transition);\n        }\n    }\n\n    // Note: In onAfterViewInit we can access gx and gy, obtained with @ViewChild.\n    // At this point we can call buildChart()\n    ngAfterViewInit(){\n        this.xAxis = d3.select(this.gx.nativeElement);\n        this.yAxis = d3.select(this.gy.nativeElement);\n        this.viewInit = true;\n\n        this.buildChart();\n    }\n    \n    /**\n     * buildChart() actually only builds the axes of the chart, since the\n     * rest is build automatically with Angular syntax in the template.\n     * We build axis programmatically (with D3 selects) to benefit from the\n     * D3 abstractions and transitions.\n     * @param update \n     */\n    buildChart(update?: boolean){\n                    \n        if(update){\n            const t = d3.transition().duration(this.transition) as d3.Transition;\n    \n            this.xAxis.transition(t)\n                .call(d3.axisTop(this.x).tickSize(0))\n                .on(\"end\", () => this.xAxis.selectAll('text').each(this.wrap));\n\n            this.yAxis.transition(t)\n                .call(d3.axisLeft(this.y).tickSize(0))\n                .on(\"end\", () => this.yAxis.selectAll('text').each(this.wrap));\n            \n        }\n        else {\n            this.xAxis.call(d3.axisTop(this.x).tickSize(0));\n            this.yAxis.call(d3.axisLeft(this.y).tickSize(0));\n        }\n\n        this.xAxis.selectAll(\".domain\").remove(); // Remove the axis line\n        this.xAxis.selectAll(\"text\")  // Tilt the text\n            .attr(\"transform\", \"rotate(-35)\")\n            .style(\"text-anchor\", \"start\")\n            .each(this.wrap)\n            .on(\"click\", d => this.onAxisClicked(d, 'x'));\n\n        this.yAxis.selectAll(\".domain\").remove(); // Remove the axis line\n        this.yAxis.selectAll(\"text\")\n            .each(this.wrap)\n            .on(\"click\", d => this.onAxisClicked(d, 'y'));\n    }\n\n    /**\n     * Called when the user hovers the mouse over a heatmap tile\n     * @param item \n     * @param event \n     */\n    onMouseOver(item: HeatmapItem, event: MouseEvent){\n        this.tooltipItem = item;\n\n        const x = this.x(item.x) as number;\n        const y = this.y(item.y) as number;\n\n        // Since we use viewBox to auto-adjust the SVG to the container size, we have to\n        // convert from the SVG coordinate system to the HTML coordinate system\n        const actualWidth = (this.el.nativeElement as HTMLElement).offsetWidth;\n        const scale = actualWidth / this.width;\n        const relativeX = x / this.width;\n\n        // Tooltip to the right\n        if(relativeX ) => {\n        const self = d3.select(nodes[i]);\n        let textLength = nodes[i].getComputedTextLength();\n        let text = self.text();\n        const fullText = self.text();\n        while (textLength > 90 && text.length > 0) {\n          text = text.slice(0, -1)\n          self.text(text + '...');\n          textLength = nodes[i].getComputedTextLength();\n        }\n        self.append('svg:title').text(fullText);\n    };\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/MapComponent.html":{"url":"components/MapComponent.html","title":"component - MapComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  MapComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    googlemaps/map.component.ts\n\n\n\n\n    \n        Extends\n    \n    \n            AbstractFacet\n    \n\n    \n        Implements\n    \n    \n                    OnChanges\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                sq-googlemaps\n            \n\n\n\n\n            \n                templateUrl\n                ./map.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                bounds\n                            \n                            \n                                clearFilters\n                            \n                            \n                                    Public\n                                exprBuilder\n                            \n                            \n                                    Public\n                                facetService\n                            \n                            \n                                filterArea\n                            \n                            \n                                fitBounds\n                            \n                            \n                                geoRecords\n                            \n                            \n                                mapStyles\n                            \n                            \n                                    Optional\n                                openedWindow\n                            \n                            \n                                    Public\n                                searchService\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                closeWindow\n                            \n                            \n                                ngOnChanges\n                            \n                            \n                                onBoundsChange\n                            \n                            \n                                onMapClick\n                            \n                            \n                                onMarkerClick\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                height\n                            \n                            \n                                latitudeField\n                            \n                            \n                                longitudeField\n                            \n                            \n                                name\n                            \n                            \n                                results\n                            \n                            \n                                style\n                            \n                        \n                    \n                \n\n                \n                    \n                        Outputs\n                    \n                \n                \n                    \n                        \n                            \n                                recordClicked\n                            \n                        \n                    \n                \n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    actions\n                                \n                            \n                        \n                    \n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(searchService: SearchService, facetService: FacetService, exprBuilder: ExprBuilder)\n                    \n                \n                        \n                            \n                                Defined in googlemaps/map.component.ts:48\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        searchService\n                                                  \n                                                        \n                                                                    SearchService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        facetService\n                                                  \n                                                        \n                                                                    FacetService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        exprBuilder\n                                                  \n                                                        \n                                                                    ExprBuilder\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        height\n                    \n                \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 300\n                    \n                \n                        \n                            \n                                    Defined in googlemaps/map.component.ts:23\n                            \n                        \n                \n                    \n                        Desired height of the map\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        latitudeField\n                    \n                \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : \"latitude\"\n                    \n                \n                        \n                            \n                                    Defined in googlemaps/map.component.ts:25\n                            \n                        \n                \n                    \n                        Name of the field storing the latitude as a decimal number\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        longitudeField\n                    \n                \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : \"longitude\"\n                    \n                \n                        \n                            \n                                    Defined in googlemaps/map.component.ts:27\n                            \n                        \n                \n                    \n                        Name of the field storing the longitude as a decimal number\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        name\n                    \n                \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : \"map\"\n                    \n                \n                        \n                            \n                                    Defined in googlemaps/map.component.ts:19\n                            \n                        \n                \n                    \n                        Name of the map used as an identifier for the facet, to associate its selects\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        results\n                    \n                \n                \n                    \n                        Type :     Results\n\n                    \n                \n                        \n                            \n                                    Defined in googlemaps/map.component.ts:21\n                            \n                        \n                \n                    \n                        Results list displayed on the map when possible\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        style\n                    \n                \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : \"light\"\n                    \n                \n                        \n                            \n                                    Defined in googlemaps/map.component.ts:29\n                            \n                        \n                \n                    \n                        Map style (light or dark are supported)\n\n                    \n                \n            \n        \n\n    \n    Outputs\n        \n            \n                \n                    \n                        \n                        recordClicked\n                    \n                \n                \n                    \n                        Type :         EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in googlemaps/map.component.ts:31\n                            \n                        \n                \n                    \n                        Event emitter that emits a Record object when the marker of that record is clicked by the user\n\n                    \n                \n            \n        \n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        closeWindow\n                        \n                    \n                \n            \n            \n                \ncloseWindow()\n                \n            \n\n\n            \n                \n                    Defined in googlemaps/map.component.ts:134\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnChanges\n                        \n                    \n                \n            \n            \n                \nngOnChanges(changes: SimpleChanges)\n                \n            \n\n\n            \n                \n                    Defined in googlemaps/map.component.ts:102\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    changes\n                                    \n                                                SimpleChanges\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onBoundsChange\n                        \n                    \n                \n            \n            \n                \nonBoundsChange(bounds: google.maps.LatLngBounds)\n                \n            \n\n\n            \n                \n                    Defined in googlemaps/map.component.ts:154\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    bounds\n                                    \n                                            google.maps.LatLngBounds\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onMapClick\n                        \n                    \n                \n            \n            \n                \nonMapClick(event: Event)\n                \n            \n\n\n            \n                \n                    Defined in googlemaps/map.component.ts:144\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    event\n                                    \n                                                Event\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onMarkerClick\n                        \n                    \n                \n            \n            \n                \nonMarkerClick(event: Event, record: Record, infoWindow?: AgmInfoWindow)\n                \n            \n\n\n            \n                \n                    Defined in googlemaps/map.component.ts:148\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    event\n                                    \n                                                Event\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    record\n                                    \n                                            Record\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    infoWindow\n                                    \n                                            AgmInfoWindow\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        bounds\n                        \n                    \n                \n            \n                \n                    \n                        Type :     google.maps.LatLngBounds\n\n                    \n                \n                    \n                        \n                                Defined in googlemaps/map.component.ts:43\n                        \n                    \n\n            \n                \n                    Bounds of the map updated on initialization and user interaction\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        clearFilters\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Action\n\n                    \n                \n                    \n                        \n                                Defined in googlemaps/map.component.ts:40\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        exprBuilder\n                        \n                    \n                \n            \n                \n                    \n                        Type :     ExprBuilder\n\n                    \n                \n                    \n                        \n                                Defined in googlemaps/map.component.ts:53\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        facetService\n                        \n                    \n                \n            \n                \n                    \n                        Type :     FacetService\n\n                    \n                \n                    \n                        \n                                Defined in googlemaps/map.component.ts:52\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        filterArea\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Action\n\n                    \n                \n                    \n                        \n                                Defined in googlemaps/map.component.ts:39\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        fitBounds\n                        \n                    \n                \n            \n                \n                    \n                        Type :     google.maps.LatLngBoundsLiteral | boolean\n\n                    \n                \n                    \n                        \n                                Defined in googlemaps/map.component.ts:36\n                        \n                    \n\n            \n                \n                    Mode for fitting the map to its contained markers\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        geoRecords\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Record[]\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                    \n                        \n                                Defined in googlemaps/map.component.ts:34\n                        \n                    \n\n            \n                \n                    Filtered list of records, keeping only the geolocated records\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        mapStyles\n                        \n                    \n                \n            \n                \n                    \n                        Type :         any\n\n                    \n                \n                    \n                        \n                                Defined in googlemaps/map.component.ts:48\n                        \n                    \n\n            \n                \n                    Styles of the map if any\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        openedWindow\n                        \n                    \n                \n            \n                \n                    \n                        Type :     AgmInfoWindow\n\n                    \n                \n                    \n                        \n                                Defined in googlemaps/map.component.ts:45\n                        \n                    \n\n            \n                \n                    Currently opened info window, which can be closed when another window is closed\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        searchService\n                        \n                    \n                \n            \n                \n                    \n                        Type :     SearchService\n\n                    \n                \n                    \n                        \n                                Defined in googlemaps/map.component.ts:51\n                        \n                    \n\n\n        \n    \n\n\n    \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        actions\n                    \n                \n\n                \n                    \n                        getactions()\n                    \n                \n                            \n                                \n                                    Defined in googlemaps/map.component.ts:91\n                                \n                            \n\n            \n        \n\n\n\n\n    \n        import { Component, Input, Output, EventEmitter, OnChanges, SimpleChanges } from '@angular/core';\nimport { AgmInfoWindow } from '@agm/core'\n;\nimport { AbstractFacet, FacetService } from '@sinequa/components/facet';\nimport { Action } from '@sinequa/components/action';\nimport { SearchService } from '@sinequa/components/search';\n\nimport { ExprBuilder } from '@sinequa/core/app-utils';\nimport { Results, Record } from '@sinequa/core/web-services';\n\nimport { darkStyle } from \"./dark-style\";\n\n@Component({\n    selector: \"sq-googlemaps\",\n    templateUrl: \"./map.component.html\"\n})\nexport class MapComponent extends AbstractFacet implements OnChanges {\n    /** Name of the map used as an identifier for the facet, to associate its selects */\n    @Input() name = \"map\";\n    /** Results list displayed on the map when possible */\n    @Input() results: Results;\n    /** Desired height of the map */\n    @Input() height = 300;\n    /** Name of the field storing the latitude as a decimal number */\n    @Input() latitudeField = \"latitude\";\n    /** Name of the field storing the longitude as a decimal number */\n    @Input() longitudeField = \"longitude\";\n    /** Map style (light or dark are supported) */\n    @Input() style = \"light\";\n    /** Event emitter that emits a Record object when the marker of that record is clicked by the user */\n    @Output() recordClicked = new EventEmitter();\n\n    /** Filtered list of records, keeping only the geolocated records */\n    geoRecords: Record[] = [];\n    /** Mode for fitting the map to its contained markers */\n    fitBounds: google.maps.LatLngBoundsLiteral | boolean;\n\n    // Actions for selecting an area on the map, and clearing that selection\n    filterArea: Action;\n    clearFilters: Action;\n\n    /** Bounds of the map updated on initialization and user interaction */\n    bounds: google.maps.LatLngBounds;\n    /** Currently opened info window, which can be closed when another window is closed */\n    openedWindow?: AgmInfoWindow;\n\n    /** Styles of the map if any */\n    mapStyles: any;\n\n    constructor(\n        public searchService: SearchService,\n        public facetService: FacetService,\n        public exprBuilder: ExprBuilder\n    ){\n        super();\n        \n        // Clear the current filters\n        this.clearFilters = new Action({\n            icon: \"far fa-minus-square\",\n            title: \"msg#facet.clearSelects\",\n            action: () => {\n                this.searchService.query.removeSelect(this.name);\n                this.searchService.search();\n            }\n        });\n\n        // Filter the currently selected area\n        this.filterArea = new Action({\n            icon: \"fas fa-search\",\n            title: \"msg#googlemaps.filterArea\",\n            action: () => {\n                if(this.facetService.hasFiltered(this.name)) {\n                    this.searchService.query.removeSelect(this.name);\n                }\n                const minLat = this.bounds.getSouthWest().lat();\n                const maxLat = this.bounds.getNorthEast().lat();\n                const minLng = this.bounds.getSouthWest().lng();\n                const maxLng = this.bounds.getNorthEast().lng();\n                const expr = this.exprBuilder.concatAndExpr([\n                    this.exprBuilder.makeNumericalExpr(this.latitudeField, '>=', minLat),\n                    this.exprBuilder.makeNumericalExpr(this.latitudeField, '=', minLng),\n                    this.exprBuilder.makeNumericalExpr(this.longitudeField, ' !!r[this.latitudeField]);\n            }\n            this.closeWindow();\n        }\n\n        if(changes['style']) {\n            this.mapStyles = this.style === \"dark\"? darkStyle : undefined;\n        }\n\n        // If no document, the view shows a default latitude / longitude\n        if(this.geoRecords.length === 0) {\n            this.fitBounds = false;\n        }\n        // If multiple documents, the view is centered around them, at the right scale\n        else if(this.geoRecords.length > 1) {\n            this.fitBounds = true;\n        }\n        else {\n            // Custom bounds centered around the single geo record in the results\n            this.fitBounds = {\n                east: this.geoRecords[0][this.longitudeField] + 0.02,\n                north: this.geoRecords[0][this.latitudeField] + 0.02,\n                south: this.geoRecords[0][this.latitudeField] - 0.02,\n                west: this.geoRecords[0][this.longitudeField] - 0.02\n            };\n        }\n    }\n\n    closeWindow() {\n        if(this.openedWindow) {\n            this.openedWindow.close();\n            this.openedWindow = undefined;\n        }\n    }\n\n\n    // Manage map interactions (avoid multiple opened info windows)\n\n    onMapClick(event: Event) {\n        this.closeWindow();\n    }\n\n    onMarkerClick(event: Event, record: Record, infoWindow?: AgmInfoWindow) {\n        this.closeWindow();\n        this.openedWindow = infoWindow;\n        this.recordClicked.next(record);\n    }\n\n    onBoundsChange(bounds: google.maps.LatLngBounds) {\n        this.bounds = bounds;\n    }\n}\n    \n\n    \n        \n\n    \n\n        \n            {{record['title']}}\n        \n\n    \n\n\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '                        {{record[\\'title\\']}}            '\n    var COMPONENTS = [{'name': 'AgGridViewComponent', 'selector': 'sq-ag-grid-view'},{'name': 'BsEdgeInfoCard', 'selector': 'sq-edge-info-card'},{'name': 'BsFacetDate', 'selector': 'sq-facet-date'},{'name': 'BsFacetHeatmapComponent', 'selector': 'sq-facet-heatmap'},{'name': 'BsFacetTimelineComponent', 'selector': 'sq-facet-timeline'},{'name': 'BsHeatmapComponent', 'selector': 'sq-heatmap'},{'name': 'BsNodeInfoCard', 'selector': 'sq-node-info-card'},{'name': 'BsResultsHeatmapView', 'selector': 'sq-results-heatmap-view'},{'name': 'BsTimelineComponent', 'selector': 'sq-timeline'},{'name': 'BsTooltipComponent', 'selector': 'sq-tooltip'},{'name': 'DataModalComponent', 'selector': 'sq-data-modal'},{'name': 'FacetNgxChart', 'selector': 'sq-facet-ngx-chart'},{'name': 'FacetWrapperComponent', 'selector': 'facet-wrapper'},{'name': 'FusionChart', 'selector': 'sq-fusion-chart'},{'name': 'MapComponent', 'selector': 'sq-googlemaps'},{'name': 'MoneyCloudComponent', 'selector': 'sq-money-cloud'},{'name': 'MoneyTimelineComponent', 'selector': 'sq-money-timeline'},{'name': 'NetworkComponent', 'selector': 'sq-network'},{'name': 'NgxChart', 'selector': 'sq-ngx-chart'},{'name': 'ResultTimeline', 'selector': 'sq-result-timeline'},{'name': 'TimelineLegendComponent', 'selector': 'sq-timeline-legend'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'MapComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/MoneyCloudDatum.html":{"url":"interfaces/MoneyCloudDatum.html","title":"interface - MoneyCloudDatum","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  MoneyCloudDatum\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            finance/money-cloud/money-cloud.component.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            category\n                                        \n                                \n                                \n                                        \n                                            count\n                                        \n                                \n                                \n                                        \n                                            currency\n                                        \n                                \n                                \n                                        \n                                            i\n                                        \n                                \n                                \n                                        \n                                            rawvalue\n                                        \n                                \n                                \n                                        \n                                            value\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        category\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        category:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        count\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        count:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        currency\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        currency:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        i\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        i:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        rawvalue\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        rawvalue:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        value\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        value:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { AfterViewInit, ChangeDetectorRef, Component, ElementRef, Input, OnChanges, SimpleChanges, ViewChild } from \"@angular/core\";\nimport { Action } from \"@sinequa/components/action\";\nimport { AbstractFacet } from \"@sinequa/components/facet\";\nimport { SearchService } from \"@sinequa/components/search\";\nimport { SelectionService } from \"@sinequa/components/selection\";\nimport { ExprBuilder, FormatService, ValueItem } from \"@sinequa/core/app-utils\";\nimport { Utils } from \"@sinequa/core/base\";\nimport { AggregationItem, Results } from \"@sinequa/core/web-services\";\n\nimport * as d3 from 'd3';\n\n\nexport interface MoneyCloudDatum {\n    value: number;\n    currency: string;\n    count: number;\n    category: string;\n    i: number;\n    rawvalue: string;\n}\n\n@Component({\n    selector: 'sq-money-cloud',\n    templateUrl: './money-cloud.component.html',\n    styleUrls: ['./money-cloud.component.scss']\n})\nexport class MoneyCloudComponent extends AbstractFacet implements OnChanges,AfterViewInit {\n    @Input() name = \"money-cloud\"\n\n    @Input() results: Results;\n    /** The \"money-value\" column stores an entity in the form \"(KEYWORD)#( )\", for example \"(DEAL)#(USD 69420)\" */\n    @Input() moneyValueColumn = \"value_amount\";\n    /** The \"Money-Value\" aggregation must be computed over the money-value column */\n    @Input() moneyAggregation = \"ValueAmounts\";\n\n    @Input() width = 600;\n    @Input() height = 200;\n    @Input() margin = {top: 15, bottom: 30, left: 40, right: 15};\n\n    @Input() showTooltip = true;\n    @Input() theme: \"light\" | \"dark\" = \"light\";\n\n    data: MoneyCloudDatum[];\n    categories: string[];\n\n    selectedItems: Set;\n\n    // Scales\n    x: d3.ScaleBand; // Read/Write\n    x_inner: d3.ScaleLinear; // Read/Write\n    y: d3.ScaleLogarithmic; // Read-only / domain updated\n    r: d3.ScaleLogarithmic; // Radius (function of counts)\n    c: d3.ScaleOrdinal; // Color\n\n    // Elements\n    @ViewChild(\"overlay\") overlay: ElementRef;\n    @ViewChild(\"xAxis\") gx: ElementRef;\n    @ViewChild(\"yAxis\") gy: ElementRef;\n\n    // Selections\n    xAxis$: d3.Selection;\n    yAxis$: d3.Selection;\n    \n    // Tooltips\n    tooltipItem: MoneyCloudDatum | undefined;\n    tooltipOrientation: \"left\" | \"right\";\n    tooltipTop: number;\n    tooltipRight: number;\n    tooltipLeft: number;\n\n    viewInit: boolean;\n    \n    clearFilters: Action;\n\n    constructor(\n        private el: ElementRef,\n        protected cdRef: ChangeDetectorRef,\n        public searchService: SearchService,\n        public exprBuilder: ExprBuilder,\n        public selectionService: SelectionService,\n        public formatService: FormatService\n    ){\n        super();\n\n        // Clear the current filters\n        this.clearFilters = new Action({\n            icon: \"far fa-minus-square\",\n            title: \"msg#facet.clearSelects\",\n            action: () => {\n                this.searchService.query.removeSelect(this.name, true);\n                this.searchService.search();\n            }\n        });\n\n        this.selectionService.events.subscribe(e => this.updateSelectedItems());\n    }\n\n    override get actions(): Action[] {\n        const actions: Action[] = [];\n        if(this.searchService.query.findSelect(this.name)){\n            actions.push(this.clearFilters);\n        }\n        return actions;\n    }\n\n    get innerWidth(): number {\n        return this.width - this.margin.left - this.margin.right;\n    }\n\n    get innerHeight(): number {\n        return this.height - this.margin.top - this.margin.bottom;\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n\n        if(!this.x) {\n            \n            // Scales\n            this.x = d3.scaleBand()\n                .range([0, this.innerWidth]);\n                \n            this.x_inner = d3.scaleLinear();\n\n            this.y = d3.scaleLog()\n                .range([this.innerHeight, 0]);\n\n            this.r = d3.scaleLog()\n                .range([4, 10]);\n\n            this.c = d3.scaleOrdinal()\n                .range(d3.schemeCategory10);\n                \n        }\n        \n        // Resize handling\n\n        if(changes[\"height\"]) {\n            this.y.range([this.innerHeight, 0]);\n            if(this.viewInit) {\n                this.drawYAxis();\n            }\n        }\n\n        if(changes[\"width\"]) {\n            this.x.range([0, this.innerWidth]);\n            if(this.viewInit) {\n                this.drawXAxis();\n            }\n        }\n\n        if(this.viewInit && changes[\"results\"] && this.results){\n            this.updateChart();\n        }\n    }\n\n    ngAfterViewInit() {\n        \n        // Get native elements\n        this.xAxis$ = d3.select(this.gx.nativeElement);\n        this.yAxis$ = d3.select(this.gy.nativeElement);\n\n        d3.select(this.overlay.nativeElement)        \n            .on(\"mousemove\", () => this.onMousemove());\n        \n        this.viewInit = true;\n\n        this.updateChart();\n        \n        // This is necessary to prevent \"Expression has changed after check\" errors\n        // caused by calling updateChart inside ngAfterViewInit().\n        // Unfortunately this is necessary because we need the DOM to be rendered in order fill the DOM\n        // (for example gAxis needs to exist so we can draw the axis)\n        this.cdRef.detectChanges();\n    }\n\n    updateChart() {\n\n        this.turnoffTooltip();\n\n        if(this.results) {\n            \n            this.updateData();\n\n            // Update scales\n            this.updateScales();\n\n            // Update Axes\n            this.updateAxes();\n\n        }\n    }\n\n    updateData() {\n\n        this.updateSelectedItems();\n        \n        const counts = new Map();\n\n        this.data = [];\n        // Extract number of occurrences from the aggregation\n        this.results.aggregations\n            ?.find(a => a.name === this.moneyAggregation)\n            ?.items\n            ?.forEach(item => {\n                const datum = this.parseEntity(item, counts);\n                if(datum) {\n                    this.data.push(datum);\n                }\n            });\n\n        this.data.forEach(d => d.i = (d.i-0.5) / counts.get(d.category)!); // Normalize i between 0 and 1\n\n    }\n\n    /**\n     * Parse the entity stored in the \"money-value\" column and returns a datum (incl. numerical value and currency)\n     */\n    @Input()\n    parseEntity = (item: AggregationItem, counts: Map): MoneyCloudDatum | undefined => {\n        const rawvalue = item.value as string;\n        const [category, amount] = item.display!.substr(1, item.display!.length-2).split(\")#(\");\n        const [currency, valuestr] = amount.split(\" \");\n        const value = parseFloat(valuestr);\n        // Check the data is valid\n        if(isNaN(value) || value (this.data, d => d.value);\n            const rExtent = d3.extent(this.data, d => d.count);\n\n            if(!yExtent[0] || !yExtent[1] || !rExtent[0] || !rExtent[1]) {\n                return;\n            }\n\n            this.x.domain(this.data.map(d => d.category));\n            this.x_inner\n                .domain([0, 1])\n                .range([0, this.x.bandwidth()]);\n            this.y.domain(yExtent);\n            this.r.domain(rExtent);\n            this.c.domain(this.data.map(d => d.currency));\n\n            this.categories = this.x.domain();\n\n        }\n\n    }\n\n    public updateSelectedItems() {\n        this.selectedItems = new Set();\n        this.selectionService.getSelectedItems().forEach(r => {\n            r[this.moneyValueColumn]?.forEach((item: ValueItem) => {\n                this.selectedItems.add(item.value as string);\n            });\n        });\n    }\n    \n    /**\n     * Update the x and y axes\n     */\n    protected updateAxes(){\n        this.drawXAxis();\n        this.drawYAxis();\n    }\n\n    /**\n     * Draws the X axis\n     */\n     protected drawXAxis() {\n        const xAxis = d3.axisBottom(this.x);\n        this.xAxis$.call(xAxis);\n        //this.xAxis$.selectAll(\".domain\").remove(); // Remove the axis line\n    }\n\n    /**\n     * Draws the Y axis\n     */\n    protected drawYAxis() {\n        const yAxisTicks = this.y.ticks(5)\n            .filter(tick => Number.isInteger(tick)); // Keep only integer ticks https://stackoverflow.com/questions/13576906/d3-tick-marks-on-integers-only/56821215\n\n        const yAxis = d3.axisLeft(this.y)\n            .tickSizeInner(-this.innerWidth)\n            .tickValues(yAxisTicks)\n            .tickFormat(this.formatService.moneyFormatter); //https://github.com/d3/d3-format\n        this.yAxis$.call(yAxis);\n        //this.yAxis$.selectAll(\".domain\").remove(); // Remove the axis line\n    }\n\n    \n    /**\n     * Redraw the simple tooltip (vertical line)\n     */\n    onMousemove() {\n        this.tooltipItem = undefined;\n    }\n\n    filterDatum(datum: MoneyCloudDatum) {\n        const expr = this.exprBuilder.makeExpr(this.moneyValueColumn, datum.rawvalue)\n        this.searchService.query.addSelect(expr, this.name);\n        this.searchService.search();\n    }\n\n    onMouseEnterDatum(datum: MoneyCloudDatum) {\n\n        let x = this.x(datum.category);\n        const x_inner = this.x_inner(datum.i);\n        const y = this.y(datum.value);\n        const r = this.r(datum.count);\n\n        if(Utils.isUndefined(x) || Utils.isUndefined(x_inner) || Utils.isUndefined(r) || Utils.isUndefined(y)) return;\n\n        this.tooltipItem = datum;\n\n        x += x_inner;\n\n        // Since we use viewBox to auto-adjust the SVG to the container size, we have to\n        // convert from the SVG coordinate system to the HTML coordinate system\n        const actualWidth = (this.el.nativeElement as HTMLElement).offsetWidth;\n        const scale = actualWidth / this.width;\n        const relativeX = x / this.width;\n\n        // Tooltip to the right\n        if(relativeX  {\n        if(this.tooltipItem) {\n            this.tooltipItem = undefined;\n        }\n    }\n}\n    \n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/MoneyDatum.html":{"url":"interfaces/MoneyDatum.html","title":"interface - MoneyDatum","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  MoneyDatum\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            finance/money-timeline/money-timeline.component.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            count\n                                        \n                                \n                                \n                                        \n                                            currency\n                                        \n                                \n                                \n                                        \n                                            date\n                                        \n                                \n                                \n                                        \n                                            rawvalue\n                                        \n                                \n                                \n                                        \n                                            record\n                                        \n                                \n                                \n                                        \n                                            value\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        count\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        count:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        currency\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        currency:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        date\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        date:         Date\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Date\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        rawvalue\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        rawvalue:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        record\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        record:     Record\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Record\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        value\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        value:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { AfterViewInit, ChangeDetectorRef, Component, ElementRef, EventEmitter, Input, OnChanges, Output, SimpleChanges, ViewChild } from \"@angular/core\";\nimport { Action } from \"@sinequa/components/action\";\nimport { AbstractFacet } from \"@sinequa/components/facet\";\nimport { SearchService } from \"@sinequa/components/search\";\nimport { ExprBuilder } from \"@sinequa/core/app-utils\";\nimport { Utils } from \"@sinequa/core/base\";\nimport { Results, Record } from \"@sinequa/core/web-services\";\nimport { FormatService } from \"@sinequa/core/app-utils\";\n\nimport * as d3 from 'd3';\n\nexport interface MoneyDatum {\n    value: number;\n    currency: string;\n    count: number;\n    date: Date;\n    rawvalue: string;\n    record: Record;\n}\n\n@Component({\n    selector: 'sq-money-timeline',\n    templateUrl: './money-timeline.component.html',\n    styleUrls: ['./money-timeline.component.scss']\n})\nexport class MoneyTimelineComponent extends AbstractFacet implements OnChanges,AfterViewInit {\n    @Input() name = \"money-timeline\"\n\n    @Input() results: Results;\n    /** The \"money\" column stores an entity in the form \" \", for example \"USD 69420\" */\n    @Input() moneyColumn = \"money\";\n    /** The \"Money\" aggregation must be computed over the money column */\n    @Input() moneyAggregation = \"Money\";\n\n    @Input() width = 600;\n    @Input() height = 200;\n    @Input() margin = {top: 15, bottom: 30, left: 40, right: 15};\n\n    /** Displays a tooltip showing the current date */\n    @Input() showTooltip = true;\n    @Input() theme: \"light\" | \"dark\" = \"light\";\n\n    @Output() recordClicked = new EventEmitter();\n\n    data: MoneyDatum[];\n\n    // Scales\n    x: d3.ScaleTime; // Read/Write\n    y: d3.ScaleLogarithmic; // Read-only / domain updated\n    r: d3.ScaleLogarithmic;\n    c: d3.ScaleOrdinal;\n\n    // Elements\n    @ViewChild(\"overlay\") overlay: ElementRef;\n    @ViewChild(\"xAxis\") gx: ElementRef;\n    @ViewChild(\"yAxis\") gy: ElementRef;\n\n    // Selections\n    xAxis$: d3.Selection;\n    yAxis$: d3.Selection;\n    \n    // Tooltips\n    tooltipX: number | undefined;\n    tooltipItem: MoneyDatum | undefined;\n    tooltipOrientation: \"left\" | \"right\";\n    tooltipTop: number;\n    tooltipRight: number;\n    tooltipLeft: number;\n\n    viewInit: boolean;\n    \n    clearFilters: Action;\n\n    constructor(\n        private el: ElementRef,\n        protected cdRef: ChangeDetectorRef,\n        public searchService: SearchService,\n        public exprBuilder: ExprBuilder,\n        public formatService: FormatService\n    ){\n        super();\n\n        // Clear the current filters\n        this.clearFilters = new Action({\n            icon: \"far fa-minus-square\",\n            title: \"msg#facet.clearSelects\",\n            action: () => {\n                this.searchService.query.removeSelect(this.name, true);\n                this.searchService.search();\n            }\n        });\n    }\n\n    override get actions(): Action[] {\n        const actions: Action[] = [];\n        if(this.searchService.query.findSelect(this.name)){\n            actions.push(this.clearFilters);\n        }\n        return actions;\n    }\n\n    get innerWidth(): number {\n        return this.width - this.margin.left - this.margin.right;\n    }\n\n    get innerHeight(): number {\n        return this.height - this.margin.top - this.margin.bottom;\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n\n        if(!this.x) {\n            \n            // Scales\n            this.x = d3.scaleUtc()\n                .range([0, this.innerWidth]);\n\n            this.y = d3.scaleLog()\n                .range([this.innerHeight, 0]);\n\n            this.r = d3.scaleLog()\n                .range([4, 10]);\n\n            this.c = d3.scaleOrdinal()\n                .range(d3.schemeCategory10);\n                \n        }\n        \n        // Resize handling\n\n        if(changes[\"height\"]) {\n            this.y.range([this.innerHeight, 0]);\n            if(this.viewInit) {\n                this.drawYAxis();\n            }\n        }\n\n        if(changes[\"width\"]) {\n            this.x.range([0, this.innerWidth]);\n            if(this.viewInit) {\n                this.drawXAxis();\n            }\n        }\n\n        if(this.viewInit && changes[\"results\"] && this.results){\n            this.updateChart();\n        }\n    }\n\n    ngAfterViewInit() {\n        \n        // Get native elements\n        this.xAxis$ = d3.select(this.gx.nativeElement);\n        this.yAxis$ = d3.select(this.gy.nativeElement);\n\n        d3.select(this.overlay.nativeElement)        \n            .on(\"mousemove\", () => this.onMousemove())\n            .on(\"mouseout\", () => this.onMouseout());\n        \n        this.viewInit = true;\n\n        this.updateChart();\n        \n        // This is necessary to prevent \"Expression has changed after check\" errors\n        // caused by calling updateChart inside ngAfterViewInit().\n        // Unfortunately this is necessary because we need the DOM to be rendered in order fill the DOM\n        // (for example gAxis needs to exist so we can draw the axis)\n        this.cdRef.detectChanges();\n    }\n\n    /**\n     * Recomputes the data to display and update the chart's primitives\n     */\n    updateChart() {\n\n        this.turnoffTooltip();\n\n        if(this.results) {\n            \n            this.updateData();\n\n            // Update scales\n            this.updateScales();\n\n            // Update Axes\n            this.updateAxes();\n\n        }\n    }\n\n    /**\n     * Computes the data displayed in the chart in function of the raw data provided as input\n     */\n    updateData() {\n        \n        // Extract number of occurrences from the aggregation\n        const counts = new Map();\n        this.results.aggregations\n            ?.find(a => Utils.eqNC(a.name, this.moneyAggregation))\n            ?.items\n            ?.forEach(item => counts.set(item.value.toString(), item.count));\n\n        this.data = [];\n        this.results.records?.forEach(record =>\n            record?.[this.moneyColumn]?.forEach(money => {\n                const datum = this.parseEntity(money.value, record, counts.get(money.value) || 1);\n                if(datum) {\n                    this.data.push(datum);\n                }\n            })\n        );\n\n    }\n\n    /**\n     * Parse the entity stored in the \"money\" column and returns a datum (incl. numerical value and currency)\n     */\n    @Input()\n    parseEntity = (rawvalue: string, record: Record, count): MoneyDatum | undefined => {\n        const val = rawvalue.split(\" \"); // Split \"USD 1000\"\n        // Check the data is valid\n        if(!record.modified || isNaN(val[1] as any) || parseFloat(val[1]) (this.data, d => d.date);\n            const yExtent = d3.extent(this.data, d => d.value);\n            const rExtent = d3.extent(this.data, d => d.count);\n\n            if(!xExtent[0] || !xExtent[1] || !yExtent[0] || !yExtent[1] || !rExtent[0] || !rExtent[1]) {\n                return;\n            }\n\n            this.x.domain(xExtent);\n            this.y.domain(yExtent);\n            this.r.domain(rExtent);\n            this.c.domain(this.data.map(d => d.record.id));\n        }\n\n    }\n    \n    /**\n     * Update the x and y axes\n     */\n    protected updateAxes(){\n        this.drawXAxis();\n        this.drawYAxis();\n    }\n\n    /**\n     * Draws the X axis\n     */\n     protected drawXAxis() {\n        const xAxis = d3.axisBottom(this.x)\n            .ticks(5);\n        this.xAxis$.call(xAxis);\n        //this.xAxis$.selectAll(\".domain\").remove(); // Remove the axis line\n    }\n\n    /**\n     * Draws the Y axis\n     */\n    protected drawYAxis() {\n        const yAxisTicks = this.y.ticks(5)\n            .filter(tick => Number.isInteger(tick)); // Keep only integer ticks https://stackoverflow.com/questions/13576906/d3-tick-marks-on-integers-only/56821215\n\n        const yAxis = d3.axisLeft(this.y)\n            .tickValues(yAxisTicks)\n            .tickFormat(this.formatService.moneyFormatter); //https://github.com/d3/d3-format\n        this.yAxis$.call(yAxis);\n        //this.yAxis$.selectAll(\".domain\").remove(); // Remove the axis line\n    }\n\n    \n    /**\n     * Redraw the simple tooltip (vertical line)\n     */\n    onMousemove() {\n        if(!this.tooltipItem && this.showTooltip) {\n            this.tooltipX = d3.mouse(this.overlay.nativeElement)[0];\n        }\n        this.tooltipItem = undefined;\n    }\n\n    /**\n     * Notify parent component that a record was clicked\n     * @param datum\n     */\n    onRecordClicked(datum: MoneyDatum) {\n        this.recordClicked.next(datum.record);\n    }\n\n    /**\n     * Filter the search results with the clicked amount of money\n     * @param datum \n     */\n    filterDatum(datum: MoneyDatum) {\n        const expr = this.exprBuilder.makeExpr(this.moneyColumn, datum.rawvalue, `${datum.currency} ${this.formatService.moneyFormatter(datum.value)}`)\n        this.searchService.query.addSelect(expr, this.name);\n        this.searchService.search();\n    }\n\n    /**\n     * Remove the simple tooltip (vertical line)\n     */\n    onMouseout() {\n        if(!this.tooltipItem) {\n            this.tooltipX = undefined;\n        }\n    }\n\n    /**\n     * Compute the tooltip position when an amount of money is hovered\n     * @param datum \n     */\n    onMouseEnterDatum(datum: MoneyDatum) {\n\n        const x = this.x(datum.date);\n        const y = this.y(datum.value);\n        const r = this.r(datum.count);\n\n        if(!this.showTooltip || Utils.isUndefined(x) || Utils.isUndefined(r) || Utils.isUndefined(y)) return;\n\n        this.tooltipItem = datum;\n\n        // Since we use viewBox to auto-adjust the SVG to the container size, we have to\n        // convert from the SVG coordinate system to the HTML coordinate system\n        const actualWidth = (this.el.nativeElement as HTMLElement).offsetWidth;\n        const scale = actualWidth / this.width;\n        const relativeX = x / this.width;\n\n        // Tooltip to the right\n        if(relativeX  {\n        if(this.tooltipItem) {\n            this.tooltipItem = undefined;\n            this.tooltipX = undefined;\n        }\n    }\n}\n    \n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/NetworkContext.html":{"url":"interfaces/NetworkContext.html","title":"interface - NetworkContext","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  NetworkContext\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            network/network-models.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            appService\n                                        \n                                \n                                \n                                        \n                                            edges\n                                        \n                                \n                                \n                                        \n                                            exprBuilder\n                                        \n                                \n                                \n                                        \n                                            intlService\n                                        \n                                \n                                \n                                        \n                                            name\n                                        \n                                \n                                \n                                        \n                                            networkService\n                                        \n                                \n                                \n                                        \n                                            nodes\n                                        \n                                \n                                \n                                        \n                                            searchService\n                                        \n                                \n                            \n                        \n                    \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    \n                                        select\n                                    \n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        select\n                        \n                    \n                \n            \n            \n                \nselect(node?: Node, edge?: Edge)\n                \n            \n\n\n            \n                \n                    Defined in network/network-models.ts:128\n                \n            \n\n\n            \n                \n                    Interactions\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    node\n                                    \n                                                Node\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    edge\n                                    \n                                                Edge\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        appService\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        appService:     AppService\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     AppService\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        edges\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        edges:         DataSet\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         DataSet\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        exprBuilder\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        exprBuilder:     ExprBuilder\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     ExprBuilder\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        intlService\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        intlService:     IntlService\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     IntlService\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        name\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        name:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Name of this network, for use in selections\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        networkService\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        networkService:     VisNetworkService\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     VisNetworkService\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        nodes\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        nodes:         DataSet\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         DataSet\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Vis.js data structures\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        searchService\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        searchService:     SearchService\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     SearchService\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Useful services\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { Subject } from 'rxjs';\nimport { Action } from '@sinequa/components/action';\nimport { Utils } from '@sinequa/core/base';\nimport { DataSet } from \"vis-data/peer/esm/vis-data\";\nimport { SearchService } from '@sinequa/components/search';\nimport { VisNetworkService } from 'ngx-vis';\nimport { AppService, ExprBuilder } from '@sinequa/core/app-utils';\nimport { IntlService } from '@sinequa/core/intl';\n\n// TYPES (configuration)\n\nexport interface NodeType {\n    name: string;\n    /** Vis Node options (merged in the Node objects). See https://visjs.github.io/vis-network/docs/network/nodes.html */\n    nodeOptions: {[key: string]: any} | ((node: Node, type: NodeType) => {[key: string]: any} );\n    /** If a field is provided, it can be used to filter the node value (and access the label, formatter, etc.) */\n    field?: string;\n}\n\nexport interface EdgeType {\n    /** Node types attached to this edge type. Should typically be 2 items, but cooccurrence aggregation might return more */\n    nodeTypes: NodeType[];\n    /** Vis Edge options (merged in the Edge objects). See https://visjs.github.io/vis-network/docs/network/edges.html */\n    edgeOptions: {[key: string]: any} | ((nodes: Node[], edge: Edge, type: EdgeType) => {[key: string]: any} );\n    /** If a field is provided, it can be used to filter the node value (and access the label, formatter, etc.) */\n    field?: string;\n}\n\n\n// DATA\n\n// Nodes (based on Vis Node interface)\n\nexport interface Node {\n    id: string;\n    label: string;\n\n    // Custom properties\n    type: NodeType;\n    provider: NetworkProvider;\n    visible: boolean;\n    /** count is a mutable property used to scale the node size in function of the size of adjacent edges*/\n    count: number;\n    /** the precedence of a node determines which node object is kept when merging two dataset (the highest precedence node is kept) */\n    precedence?: number;\n    // Context\n    context: NetworkContext;\n}\n\n// Edge (based on Vis Edge interface)\n\nexport interface Edge {\n    id: string;\n    from: string;\n    to: string;\n\n    // Custom properties\n    type: EdgeType;\n    provider: NetworkProvider;\n    visible: boolean;    \n    /** count is a property representing the strength of an edge, which scales the count of adjacent nodes*/\n    count: number;\n    /** A field value may be provided to filter search based on the edge field type */\n    fieldValue?: string;\n    // Context\n    context: NetworkContext;\n}\n\n\nexport interface NetworkProvider {\n    /** Whether or not the provider is active (if inactive, it will not provide empty datasets of nodes and edges) */\n    active: boolean;\n\n    /** Readable name of this provider */\n    name: string;\n\n    /** Dataset of this provider */\n    dataset: NetworkDataset;\n\n    /** Context (wrapper for general data about the network and services) */\n    context: NetworkContext;\n\n    /** Returns the Subject of this provider */\n    getProvider(): Subject;\n\n    /** Asynchronously provide data via it's provider Subject */\n    getData(context: NetworkContext); // skip/count handled internally\n\n    /** Called after the datasets provided by all providers have been merged into a single dataset */\n    onDatasetsMerged(dataset: NetworkDataset);\n\n    /** Called after the dataset is filtered and passed to Vis for rendering */\n    onNodesInserted(nodes: Node[]);\n\n    /** Called when ANY node is clicked in the rendered view of the network */\n    onNodeClicked(node: Node | undefined);\n\n    /** Called when ANY edge is clicked in the rendered view of the network */\n    onEdgeClicked(edge: Edge | undefined);\n\n    /** Retrieve the list of action for this provider. */\n    getProviderActions(): Action[];\n\n    /** Retrieve the list of action for a given node, and this provider. */\n    getNodeActions(node: Node): Action[];\n    \n    /** Retrieve the list of action for a given edge, and this provider. */\n    getEdgeActions(edge: Edge): Action[];\n\n    /** Called when the providers are discarded. Can be use to cancel subscriptions */\n    onDestroy();\n}\n\nexport interface NetworkContext {\n    /** Name of this network, for use in selections */\n    name: string;\n    /** Vis.js data structures */\n    nodes: DataSet;\n    edges: DataSet;\n    /** Useful services */\n    searchService: SearchService;\n    networkService: VisNetworkService;\n    appService: AppService;\n    intlService: IntlService;\n    exprBuilder: ExprBuilder;\n    /** Interactions */\n    select(node?: Node, edge?: Edge): void;\n}\n\n\nexport class NetworkDataset {\n\n    // Node index\n    private readonly nodeIdx: Map = new Map();\n\n    // Edge index\n    private readonly edgeIdx: Map = new Map();\n\n\n    /** Returns whether this node exists */\n    public hasNode(id: string): boolean {\n        return this.nodeIdx.has(id);\n    }\n    \n    /** Returns whether this edge exists */\n    public hasEdge(id: string): boolean {\n        return this.edgeIdx.has(id);\n    }\n\n    /** Returns the node with given id */\n    public getNode(id: string): Node | undefined {\n        return this.nodeIdx.get(id);\n    }\n\n    /** Returns the edge with given id */\n    public getEdge(id: string): Edge | undefined {\n        return this.edgeIdx.get(id);\n    }\n\n    /** Get the list of nodes */\n    public getNodes(): Node[] {\n        return Array.from(this.nodeIdx.values());\n    }\n\n    /** Get the list of edges */\n    public getEdges(): Edge[] {\n        return Array.from(this.edgeIdx.values());\n    }    \n\n    /** Get the list of visible nodes */\n    public getVisibleNodes(): Node[] {\n        return this.getNodes().filter(n => n.visible);\n    }\n\n    /** Get the list of visible edges */\n    public getVisibleEdges(): Edge[] {\n        return this.getEdges().filter(e => e.visible);\n    }\n\n    /** Get the list of node ids */\n    public getNodeIds(): string[] {\n        return Array.from(this.nodeIdx.keys());\n    }\n\n    /** Get the list of edge ids */\n    public getEdgeIds(): string[] {\n        return Array.from(this.edgeIdx.keys());\n    }\n    \n    /** Clears this dataset */\n    public clear() {\n        this.nodeIdx.clear();\n        this.edgeIdx.clear();\n    }\n\n    /** Add one or multiple nodes */\n    public addNodes(nodes: Node | Node[]) {\n        Array.isArray(nodes)? nodes.forEach(node => this.addNode(node)) : this.addNode(nodes);\n    }\n\n    /** Add one or multiple edges. */\n    public addEdges(edges: Edge | Edge[]) {\n        Array.isArray(edges)? edges.forEach(edge => this.addEdge(edge)) : this.addEdge(edges);\n    }\n\n    /** Remove one or multiple nodes. /!\\ Connected edges MUST be removed as well (use cleanRemoveNode() to do so) */\n    private removeNodes(ids: string | string[]) {\n        Array.isArray(ids)? ids.forEach(id => this.removeNode(id)) : this.removeNode(ids);\n    }\n\n    /** Remove one or multiple edges. */\n    public removeEdges(ids: string | string[]) {\n        Array.isArray(ids)? ids.forEach(id => this.removeEdge(id)) : this.removeEdge(ids);\n    }\n\n    /** Remove a node and its adjacent edges. keepDanglingNodes = false (default) removes the remaining nodes with no neighbor */\n    public cleanRemoveNode(nodeId: string, keepDanglingNodes?: boolean) {\n        this.getAdjacentEdges(nodeId).forEach(edge => {\n            const neighbor = this.getNode(edge.from === nodeId ? edge.to : edge.from) as Node;\n            this.removeEdges(edge.id);\n            neighbor.count -= edge.count;\n            if(!keepDanglingNodes && this.getAdjacentEdges(neighbor.id).length === 0) {\n                this.removeNodes(neighbor.id);\n            }\n        });\n    }\n\n    /** Get the edges adjacent to a node (O(n) method) */\n    public getAdjacentEdges(nodeId: string): Edge[] {\n        return this.getEdges().filter(e => e.from === nodeId || e.to === nodeId);\n    }\n\n    /** Get the nodes connected to a node via a single node (0(n) method) */\n    public getConnectedNodes(nodeId: string): Node[] {\n        return this.getAdjacentEdges(nodeId)\n                    .map(e => this.getNode(e.from === nodeId ? e.to : e.from) as Node);\n    }\n\n    /**\n     * Merge this dataset with another one. \n     * \n     * When duplicates nodes or edges are found:\n     * - The existing item is kept and updated\n     * - Their 'count' properties are added\n     * - Their 'visible' properties are ORed\n     * - Their nodeOptions and edgeOptions are updated\n     * \n     * @param dataset \n     */\n    public merge(dataset: NetworkDataset): NetworkDataset {\n\n        dataset.getNodes().forEach(node => {\n            node = Object.assign({}, node); // Avoid modifying the original datasets\n            if(!this.hasNode(node.id)) {\n                this.addNode(node);\n            }\n            else {\n                // Merge the new node with the existing one (which takes precedence by default)\n                let existingNode = this.getNode(node.id) as Node;\n                if((node.precedence || 0) > (existingNode.precedence || 0)) {\n                    // Set the new node in the node index\n                    this.nodeIdx.set(node.id, node);\n                    // swap existingNode and node for the merging of count, visible and node options\n                    const temp = node;\n                    node = existingNode;\n                    existingNode = temp;\n                }\n                existingNode.count += node.count;\n                existingNode.visible = existingNode.visible || node.visible;\n                let options: {[key: string]: any};\n                if(typeof existingNode.type.nodeOptions === \"function\") {\n                    options = existingNode.type.nodeOptions(existingNode, existingNode.type);\n                }\n                else {\n                    options = existingNode.type.nodeOptions;\n                }\n                Utils.extend(existingNode, options);\n            }\n        });\n\n        dataset.getEdges().forEach(edge => {\n            edge = Object.assign({}, edge); // Avoid modifying the original datasets\n            if(!this.hasEdge(edge.id)) {\n                this.addEdge(edge);\n            }\n            else {\n                // Merge the new edge with the existing one (which takes precedence)\n                // eg. statistical and semantic edges\n                const existingEdge = this.getEdge(edge.id) as Edge;\n                existingEdge.count += edge.count;\n                existingEdge.visible = existingEdge.visible || edge.visible;\n                // Merge edge labels (taking duplicates into account)\n                if(!!existingEdge[\"label\"] && !!edge[\"label\"]){\n                    edge[\"labels\"].forEach(label => {\n                        if(existingEdge[\"labels\"].indexOf(label) === -1) {\n                            existingEdge[\"label\"] += \", \"+label;\n                            existingEdge[\"labels\"].push(label);\n                        }\n                    });\n                }\n                let options: {[key: string]: any};\n                if(typeof existingEdge.type.edgeOptions === \"function\") {\n                    const nodes = [existingEdge.from, existingEdge.to].map(id => this.nodeIdx[id]);\n                    options = existingEdge.type.edgeOptions(nodes, existingEdge, existingEdge.type);\n                }\n                else {\n                    options = existingEdge.type.edgeOptions;\n                }\n                Utils.extend(existingEdge, options);\n            }\n        });\n\n        return this;\n    }\n\n    /** Transfer nodes and edges to the Vis nodes and edges DataSets */\n    updateDatasets(nodes: DataSet, edges: DataSet) {\n        nodes.remove(nodes.get().filter(n => !this.getNode(n.id)?.visible));\n        edges.remove(edges.get().filter(e => !this.getEdge(e.id)?.visible));\n        nodes.update(this.getVisibleNodes());\n        edges.update(this.getVisibleEdges());\n    }\n\n    \n    private addNode(node: Node) {\n        if(this.hasNode(node.id)) {\n            throw new Error(`Node '${node.id}' already in dataset`);\n        }\n        this.nodeIdx.set(node.id, node);\n    }\n    \n    private addEdge(edge: Edge) {\n        if(this.hasEdge(edge.id)) {\n            throw new Error(`Edge '${edge.id}' already in dataset`);\n        }\n        if(!this.hasNode(edge.from) || !this.hasNode(edge.to)) {\n            throw new Error(`Edge '${edge.id}' cannot be added as one of the nodes is missing from the dataset`)\n        }\n        this.edgeIdx.set(edge.id, edge);\n    }\n\n    private removeNode(id: string) {\n        this.nodeIdx.delete(id);\n    }\n\n    private removeEdge(id: string) {\n        this.edgeIdx.delete(id);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/NetworkDataset.html":{"url":"classes/NetworkDataset.html","title":"class - NetworkDataset","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  NetworkDataset\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            network/network-models.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                addEdges\n                            \n                            \n                                    Public\n                                addNodes\n                            \n                            \n                                    Public\n                                cleanRemoveNode\n                            \n                            \n                                    Public\n                                clear\n                            \n                            \n                                    Public\n                                getAdjacentEdges\n                            \n                            \n                                    Public\n                                getConnectedNodes\n                            \n                            \n                                    Public\n                                getEdge\n                            \n                            \n                                    Public\n                                getEdgeIds\n                            \n                            \n                                    Public\n                                getEdges\n                            \n                            \n                                    Public\n                                getNode\n                            \n                            \n                                    Public\n                                getNodeIds\n                            \n                            \n                                    Public\n                                getNodes\n                            \n                            \n                                    Public\n                                getVisibleEdges\n                            \n                            \n                                    Public\n                                getVisibleNodes\n                            \n                            \n                                    Public\n                                hasEdge\n                            \n                            \n                                    Public\n                                hasNode\n                            \n                            \n                                    Public\n                                merge\n                            \n                            \n                                    Public\n                                removeEdges\n                            \n                            \n                                updateDatasets\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        addEdges\n                        \n                    \n                \n            \n            \n                \n                    \n                    addEdges(edges: Edge | Edge[])\n                \n            \n\n\n            \n                \n                    Defined in network/network-models.ts:203\n                \n            \n\n\n            \n                \n                    Add one or multiple edges.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    edges\n                                    \n                                                Edge | Edge[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        addNodes\n                        \n                    \n                \n            \n            \n                \n                    \n                    addNodes(nodes: Node | Node[])\n                \n            \n\n\n            \n                \n                    Defined in network/network-models.ts:198\n                \n            \n\n\n            \n                \n                    Add one or multiple nodes\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    nodes\n                                    \n                                                Node | Node[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        cleanRemoveNode\n                        \n                    \n                \n            \n            \n                \n                    \n                    cleanRemoveNode(nodeId: string, keepDanglingNodes?: boolean)\n                \n            \n\n\n            \n                \n                    Defined in network/network-models.ts:218\n                \n            \n\n\n            \n                \n                    Remove a node and its adjacent edges. keepDanglingNodes = false (default) removes the remaining nodes with no neighbor\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    nodeId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    keepDanglingNodes\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        clear\n                        \n                    \n                \n            \n            \n                \n                    \n                    clear()\n                \n            \n\n\n            \n                \n                    Defined in network/network-models.ts:192\n                \n            \n\n\n            \n                \n                    Clears this dataset\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        getAdjacentEdges\n                        \n                    \n                \n            \n            \n                \n                    \n                    getAdjacentEdges(nodeId: string)\n                \n            \n\n\n            \n                \n                    Defined in network/network-models.ts:230\n                \n            \n\n\n            \n                \n                    Get the edges adjacent to a node (O(n) method)\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    nodeId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Edge[]\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        getConnectedNodes\n                        \n                    \n                \n            \n            \n                \n                    \n                    getConnectedNodes(nodeId: string)\n                \n            \n\n\n            \n                \n                    Defined in network/network-models.ts:235\n                \n            \n\n\n            \n                \n                    Get the nodes connected to a node via a single node (0(n) method)\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    nodeId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Node[]\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        getEdge\n                        \n                    \n                \n            \n            \n                \n                    \n                    getEdge(id: string)\n                \n            \n\n\n            \n                \n                    Defined in network/network-models.ts:157\n                \n            \n\n\n            \n                \n                    Returns the edge with given id\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Edge | undefined\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        getEdgeIds\n                        \n                    \n                \n            \n            \n                \n                    \n                    getEdgeIds()\n                \n            \n\n\n            \n                \n                    Defined in network/network-models.ts:187\n                \n            \n\n\n            \n                \n                    Get the list of edge ids\n\n\n                    \n                        Returns :     string[]\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        getEdges\n                        \n                    \n                \n            \n            \n                \n                    \n                    getEdges()\n                \n            \n\n\n            \n                \n                    Defined in network/network-models.ts:167\n                \n            \n\n\n            \n                \n                    Get the list of edges\n\n\n                    \n                        Returns :         Edge[]\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        getNode\n                        \n                    \n                \n            \n            \n                \n                    \n                    getNode(id: string)\n                \n            \n\n\n            \n                \n                    Defined in network/network-models.ts:152\n                \n            \n\n\n            \n                \n                    Returns the node with given id\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Node | undefined\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        getNodeIds\n                        \n                    \n                \n            \n            \n                \n                    \n                    getNodeIds()\n                \n            \n\n\n            \n                \n                    Defined in network/network-models.ts:182\n                \n            \n\n\n            \n                \n                    Get the list of node ids\n\n\n                    \n                        Returns :     string[]\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        getNodes\n                        \n                    \n                \n            \n            \n                \n                    \n                    getNodes()\n                \n            \n\n\n            \n                \n                    Defined in network/network-models.ts:162\n                \n            \n\n\n            \n                \n                    Get the list of nodes\n\n\n                    \n                        Returns :         Node[]\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        getVisibleEdges\n                        \n                    \n                \n            \n            \n                \n                    \n                    getVisibleEdges()\n                \n            \n\n\n            \n                \n                    Defined in network/network-models.ts:177\n                \n            \n\n\n            \n                \n                    Get the list of visible edges\n\n\n                    \n                        Returns :         Edge[]\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        getVisibleNodes\n                        \n                    \n                \n            \n            \n                \n                    \n                    getVisibleNodes()\n                \n            \n\n\n            \n                \n                    Defined in network/network-models.ts:172\n                \n            \n\n\n            \n                \n                    Get the list of visible nodes\n\n\n                    \n                        Returns :         Node[]\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        hasEdge\n                        \n                    \n                \n            \n            \n                \n                    \n                    hasEdge(id: string)\n                \n            \n\n\n            \n                \n                    Defined in network/network-models.ts:147\n                \n            \n\n\n            \n                \n                    Returns whether this edge exists\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        hasNode\n                        \n                    \n                \n            \n            \n                \n                    \n                    hasNode(id: string)\n                \n            \n\n\n            \n                \n                    Defined in network/network-models.ts:142\n                \n            \n\n\n            \n                \n                    Returns whether this node exists\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        merge\n                        \n                    \n                \n            \n            \n                \n                    \n                    merge(dataset: NetworkDataset)\n                \n            \n\n\n            \n                \n                    Defined in network/network-models.ts:251\n                \n            \n\n\n            \n                \n                    Merge this dataset with another one.\nWhen duplicates nodes or edges are found:\n\nThe existing item is kept and updated\nTheir 'count' properties are added\nTheir 'visible' properties are ORed\nTheir nodeOptions and edgeOptions are updated\n\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dataset\n                                    \n                                                NetworkDataset\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         NetworkDataset\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        removeEdges\n                        \n                    \n                \n            \n            \n                \n                    \n                    removeEdges(ids: string | string[])\n                \n            \n\n\n            \n                \n                    Defined in network/network-models.ts:213\n                \n            \n\n\n            \n                \n                    Remove one or multiple edges.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    ids\n                                    \n                                            string | string[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        updateDatasets\n                        \n                    \n                \n            \n            \n                \nupdateDatasets(nodes: DataSet, edges: DataSet)\n                \n            \n\n\n            \n                \n                    Defined in network/network-models.ts:318\n                \n            \n\n\n            \n                \n                    Transfer nodes and edges to the Vis nodes and edges DataSets\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    nodes\n                                    \n                                                DataSet\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    edges\n                                    \n                                                DataSet\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Subject } from 'rxjs';\nimport { Action } from '@sinequa/components/action';\nimport { Utils } from '@sinequa/core/base';\nimport { DataSet } from \"vis-data/peer/esm/vis-data\";\nimport { SearchService } from '@sinequa/components/search';\nimport { VisNetworkService } from 'ngx-vis';\nimport { AppService, ExprBuilder } from '@sinequa/core/app-utils';\nimport { IntlService } from '@sinequa/core/intl';\n\n// TYPES (configuration)\n\nexport interface NodeType {\n    name: string;\n    /** Vis Node options (merged in the Node objects). See https://visjs.github.io/vis-network/docs/network/nodes.html */\n    nodeOptions: {[key: string]: any} | ((node: Node, type: NodeType) => {[key: string]: any} );\n    /** If a field is provided, it can be used to filter the node value (and access the label, formatter, etc.) */\n    field?: string;\n}\n\nexport interface EdgeType {\n    /** Node types attached to this edge type. Should typically be 2 items, but cooccurrence aggregation might return more */\n    nodeTypes: NodeType[];\n    /** Vis Edge options (merged in the Edge objects). See https://visjs.github.io/vis-network/docs/network/edges.html */\n    edgeOptions: {[key: string]: any} | ((nodes: Node[], edge: Edge, type: EdgeType) => {[key: string]: any} );\n    /** If a field is provided, it can be used to filter the node value (and access the label, formatter, etc.) */\n    field?: string;\n}\n\n\n// DATA\n\n// Nodes (based on Vis Node interface)\n\nexport interface Node {\n    id: string;\n    label: string;\n\n    // Custom properties\n    type: NodeType;\n    provider: NetworkProvider;\n    visible: boolean;\n    /** count is a mutable property used to scale the node size in function of the size of adjacent edges*/\n    count: number;\n    /** the precedence of a node determines which node object is kept when merging two dataset (the highest precedence node is kept) */\n    precedence?: number;\n    // Context\n    context: NetworkContext;\n}\n\n// Edge (based on Vis Edge interface)\n\nexport interface Edge {\n    id: string;\n    from: string;\n    to: string;\n\n    // Custom properties\n    type: EdgeType;\n    provider: NetworkProvider;\n    visible: boolean;    \n    /** count is a property representing the strength of an edge, which scales the count of adjacent nodes*/\n    count: number;\n    /** A field value may be provided to filter search based on the edge field type */\n    fieldValue?: string;\n    // Context\n    context: NetworkContext;\n}\n\n\nexport interface NetworkProvider {\n    /** Whether or not the provider is active (if inactive, it will not provide empty datasets of nodes and edges) */\n    active: boolean;\n\n    /** Readable name of this provider */\n    name: string;\n\n    /** Dataset of this provider */\n    dataset: NetworkDataset;\n\n    /** Context (wrapper for general data about the network and services) */\n    context: NetworkContext;\n\n    /** Returns the Subject of this provider */\n    getProvider(): Subject;\n\n    /** Asynchronously provide data via it's provider Subject */\n    getData(context: NetworkContext); // skip/count handled internally\n\n    /** Called after the datasets provided by all providers have been merged into a single dataset */\n    onDatasetsMerged(dataset: NetworkDataset);\n\n    /** Called after the dataset is filtered and passed to Vis for rendering */\n    onNodesInserted(nodes: Node[]);\n\n    /** Called when ANY node is clicked in the rendered view of the network */\n    onNodeClicked(node: Node | undefined);\n\n    /** Called when ANY edge is clicked in the rendered view of the network */\n    onEdgeClicked(edge: Edge | undefined);\n\n    /** Retrieve the list of action for this provider. */\n    getProviderActions(): Action[];\n\n    /** Retrieve the list of action for a given node, and this provider. */\n    getNodeActions(node: Node): Action[];\n    \n    /** Retrieve the list of action for a given edge, and this provider. */\n    getEdgeActions(edge: Edge): Action[];\n\n    /** Called when the providers are discarded. Can be use to cancel subscriptions */\n    onDestroy();\n}\n\nexport interface NetworkContext {\n    /** Name of this network, for use in selections */\n    name: string;\n    /** Vis.js data structures */\n    nodes: DataSet;\n    edges: DataSet;\n    /** Useful services */\n    searchService: SearchService;\n    networkService: VisNetworkService;\n    appService: AppService;\n    intlService: IntlService;\n    exprBuilder: ExprBuilder;\n    /** Interactions */\n    select(node?: Node, edge?: Edge): void;\n}\n\n\nexport class NetworkDataset {\n\n    // Node index\n    private readonly nodeIdx: Map = new Map();\n\n    // Edge index\n    private readonly edgeIdx: Map = new Map();\n\n\n    /** Returns whether this node exists */\n    public hasNode(id: string): boolean {\n        return this.nodeIdx.has(id);\n    }\n    \n    /** Returns whether this edge exists */\n    public hasEdge(id: string): boolean {\n        return this.edgeIdx.has(id);\n    }\n\n    /** Returns the node with given id */\n    public getNode(id: string): Node | undefined {\n        return this.nodeIdx.get(id);\n    }\n\n    /** Returns the edge with given id */\n    public getEdge(id: string): Edge | undefined {\n        return this.edgeIdx.get(id);\n    }\n\n    /** Get the list of nodes */\n    public getNodes(): Node[] {\n        return Array.from(this.nodeIdx.values());\n    }\n\n    /** Get the list of edges */\n    public getEdges(): Edge[] {\n        return Array.from(this.edgeIdx.values());\n    }    \n\n    /** Get the list of visible nodes */\n    public getVisibleNodes(): Node[] {\n        return this.getNodes().filter(n => n.visible);\n    }\n\n    /** Get the list of visible edges */\n    public getVisibleEdges(): Edge[] {\n        return this.getEdges().filter(e => e.visible);\n    }\n\n    /** Get the list of node ids */\n    public getNodeIds(): string[] {\n        return Array.from(this.nodeIdx.keys());\n    }\n\n    /** Get the list of edge ids */\n    public getEdgeIds(): string[] {\n        return Array.from(this.edgeIdx.keys());\n    }\n    \n    /** Clears this dataset */\n    public clear() {\n        this.nodeIdx.clear();\n        this.edgeIdx.clear();\n    }\n\n    /** Add one or multiple nodes */\n    public addNodes(nodes: Node | Node[]) {\n        Array.isArray(nodes)? nodes.forEach(node => this.addNode(node)) : this.addNode(nodes);\n    }\n\n    /** Add one or multiple edges. */\n    public addEdges(edges: Edge | Edge[]) {\n        Array.isArray(edges)? edges.forEach(edge => this.addEdge(edge)) : this.addEdge(edges);\n    }\n\n    /** Remove one or multiple nodes. /!\\ Connected edges MUST be removed as well (use cleanRemoveNode() to do so) */\n    private removeNodes(ids: string | string[]) {\n        Array.isArray(ids)? ids.forEach(id => this.removeNode(id)) : this.removeNode(ids);\n    }\n\n    /** Remove one or multiple edges. */\n    public removeEdges(ids: string | string[]) {\n        Array.isArray(ids)? ids.forEach(id => this.removeEdge(id)) : this.removeEdge(ids);\n    }\n\n    /** Remove a node and its adjacent edges. keepDanglingNodes = false (default) removes the remaining nodes with no neighbor */\n    public cleanRemoveNode(nodeId: string, keepDanglingNodes?: boolean) {\n        this.getAdjacentEdges(nodeId).forEach(edge => {\n            const neighbor = this.getNode(edge.from === nodeId ? edge.to : edge.from) as Node;\n            this.removeEdges(edge.id);\n            neighbor.count -= edge.count;\n            if(!keepDanglingNodes && this.getAdjacentEdges(neighbor.id).length === 0) {\n                this.removeNodes(neighbor.id);\n            }\n        });\n    }\n\n    /** Get the edges adjacent to a node (O(n) method) */\n    public getAdjacentEdges(nodeId: string): Edge[] {\n        return this.getEdges().filter(e => e.from === nodeId || e.to === nodeId);\n    }\n\n    /** Get the nodes connected to a node via a single node (0(n) method) */\n    public getConnectedNodes(nodeId: string): Node[] {\n        return this.getAdjacentEdges(nodeId)\n                    .map(e => this.getNode(e.from === nodeId ? e.to : e.from) as Node);\n    }\n\n    /**\n     * Merge this dataset with another one. \n     * \n     * When duplicates nodes or edges are found:\n     * - The existing item is kept and updated\n     * - Their 'count' properties are added\n     * - Their 'visible' properties are ORed\n     * - Their nodeOptions and edgeOptions are updated\n     * \n     * @param dataset \n     */\n    public merge(dataset: NetworkDataset): NetworkDataset {\n\n        dataset.getNodes().forEach(node => {\n            node = Object.assign({}, node); // Avoid modifying the original datasets\n            if(!this.hasNode(node.id)) {\n                this.addNode(node);\n            }\n            else {\n                // Merge the new node with the existing one (which takes precedence by default)\n                let existingNode = this.getNode(node.id) as Node;\n                if((node.precedence || 0) > (existingNode.precedence || 0)) {\n                    // Set the new node in the node index\n                    this.nodeIdx.set(node.id, node);\n                    // swap existingNode and node for the merging of count, visible and node options\n                    const temp = node;\n                    node = existingNode;\n                    existingNode = temp;\n                }\n                existingNode.count += node.count;\n                existingNode.visible = existingNode.visible || node.visible;\n                let options: {[key: string]: any};\n                if(typeof existingNode.type.nodeOptions === \"function\") {\n                    options = existingNode.type.nodeOptions(existingNode, existingNode.type);\n                }\n                else {\n                    options = existingNode.type.nodeOptions;\n                }\n                Utils.extend(existingNode, options);\n            }\n        });\n\n        dataset.getEdges().forEach(edge => {\n            edge = Object.assign({}, edge); // Avoid modifying the original datasets\n            if(!this.hasEdge(edge.id)) {\n                this.addEdge(edge);\n            }\n            else {\n                // Merge the new edge with the existing one (which takes precedence)\n                // eg. statistical and semantic edges\n                const existingEdge = this.getEdge(edge.id) as Edge;\n                existingEdge.count += edge.count;\n                existingEdge.visible = existingEdge.visible || edge.visible;\n                // Merge edge labels (taking duplicates into account)\n                if(!!existingEdge[\"label\"] && !!edge[\"label\"]){\n                    edge[\"labels\"].forEach(label => {\n                        if(existingEdge[\"labels\"].indexOf(label) === -1) {\n                            existingEdge[\"label\"] += \", \"+label;\n                            existingEdge[\"labels\"].push(label);\n                        }\n                    });\n                }\n                let options: {[key: string]: any};\n                if(typeof existingEdge.type.edgeOptions === \"function\") {\n                    const nodes = [existingEdge.from, existingEdge.to].map(id => this.nodeIdx[id]);\n                    options = existingEdge.type.edgeOptions(nodes, existingEdge, existingEdge.type);\n                }\n                else {\n                    options = existingEdge.type.edgeOptions;\n                }\n                Utils.extend(existingEdge, options);\n            }\n        });\n\n        return this;\n    }\n\n    /** Transfer nodes and edges to the Vis nodes and edges DataSets */\n    updateDatasets(nodes: DataSet, edges: DataSet) {\n        nodes.remove(nodes.get().filter(n => !this.getNode(n.id)?.visible));\n        edges.remove(edges.get().filter(e => !this.getEdge(e.id)?.visible));\n        nodes.update(this.getVisibleNodes());\n        edges.update(this.getVisibleEdges());\n    }\n\n    \n    private addNode(node: Node) {\n        if(this.hasNode(node.id)) {\n            throw new Error(`Node '${node.id}' already in dataset`);\n        }\n        this.nodeIdx.set(node.id, node);\n    }\n    \n    private addEdge(edge: Edge) {\n        if(this.hasEdge(edge.id)) {\n            throw new Error(`Edge '${edge.id}' already in dataset`);\n        }\n        if(!this.hasNode(edge.from) || !this.hasNode(edge.to)) {\n            throw new Error(`Edge '${edge.id}' cannot be added as one of the nodes is missing from the dataset`)\n        }\n        this.edgeIdx.set(edge.id, edge);\n    }\n\n    private removeNode(id: string) {\n        this.nodeIdx.delete(id);\n    }\n\n    private removeEdge(id: string) {\n        this.edgeIdx.delete(id);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/NetworkModule.html":{"url":"modules/NetworkModule.html","title":"module - NetworkModule","body":"\n                   \n\n\n\n\n    Modules\n    NetworkModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_NetworkModule\n\n\n\ncluster_NetworkModule_declarations\n\n\n\ncluster_NetworkModule_exports\n\n\n\n\nBsEdgeInfoCard\n\nBsEdgeInfoCard\n\n\n\nNetworkModule\n\nNetworkModule\n\nNetworkModule -->\n\nBsEdgeInfoCard->NetworkModule\n\n\n\n\n\nBsNodeInfoCard\n\nBsNodeInfoCard\n\nNetworkModule -->\n\nBsNodeInfoCard->NetworkModule\n\n\n\n\n\nNetworkComponent\n\nNetworkComponent\n\nNetworkModule -->\n\nNetworkComponent->NetworkModule\n\n\n\n\n\nBsEdgeInfoCard \n\nBsEdgeInfoCard \n\nBsEdgeInfoCard  -->\n\nNetworkModule->BsEdgeInfoCard \n\n\n\n\n\nBsNodeInfoCard \n\nBsNodeInfoCard \n\nBsNodeInfoCard  -->\n\nNetworkModule->BsNodeInfoCard \n\n\n\n\n\nNetworkComponent \n\nNetworkComponent \n\nNetworkComponent  -->\n\nNetworkModule->NetworkComponent \n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            network/network.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Declarations\n                    \n                        \n                            BsEdgeInfoCard\n                        \n                        \n                            BsNodeInfoCard\n                        \n                        \n                            NetworkComponent\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            BsEdgeInfoCard\n                        \n                        \n                            BsNodeInfoCard\n                        \n                        \n                            NetworkComponent\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { NgModule } from \"@angular/core\";\nimport { CommonModule } from \"@angular/common\";\nimport { FormsModule, ReactiveFormsModule } from \"@angular/forms\";\n\n\nimport { IntlModule } from \"@sinequa/core/intl\";\nimport { UtilsModule } from \"@sinequa/components/utils\";\nimport { CollapseModule } from \"@sinequa/components/collapse\";\nimport { BsActionModule } from \"@sinequa/components/action\";\nimport { BsFacetModule } from \"@sinequa/components/facet\";\n\nimport { VisModule } from 'ngx-vis';\nimport { NetworkComponent } from \"./network.component\";\nimport { BsNodeInfoCard } from \"./node-info-card.component\";\nimport { BsEdgeInfoCard } from \"./edge-info-card.component\";\n\n@NgModule({\n    imports: [\n        CommonModule,\n        FormsModule, ReactiveFormsModule, \n\n        IntlModule,\n        UtilsModule,\n        CollapseModule,\n        BsActionModule,\n        BsFacetModule,\n        \n        VisModule\n    ],\n    declarations: [\n        NetworkComponent,\n        BsNodeInfoCard,\n        BsEdgeInfoCard\n    ],\n    exports: [\n        NetworkComponent,\n        BsNodeInfoCard,\n        BsEdgeInfoCard\n    ],\n})\nexport class NetworkModule {\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/NetworkProvider.html":{"url":"interfaces/NetworkProvider.html","title":"interface - NetworkProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  NetworkProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            network/network-models.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            active\n                                        \n                                \n                                \n                                        \n                                            context\n                                        \n                                \n                                \n                                        \n                                            dataset\n                                        \n                                \n                                \n                                        \n                                            name\n                                        \n                                \n                            \n                        \n                    \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    \n                                        getData\n                                    \n                                \n                                \n                                    \n                                        getEdgeActions\n                                    \n                                \n                                \n                                    \n                                        getNodeActions\n                                    \n                                \n                                \n                                    \n                                        getProvider\n                                    \n                                \n                                \n                                    \n                                        getProviderActions\n                                    \n                                \n                                \n                                    \n                                        onDatasetsMerged\n                                    \n                                \n                                \n                                    \n                                        onDestroy\n                                    \n                                \n                                \n                                    \n                                        onEdgeClicked\n                                    \n                                \n                                \n                                    \n                                        onNodeClicked\n                                    \n                                \n                                \n                                    \n                                        onNodesInserted\n                                    \n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getData\n                        \n                    \n                \n            \n            \n                \ngetData(context: NetworkContext)\n                \n            \n\n\n            \n                \n                    Defined in network/network-models.ts:88\n                \n            \n\n\n            \n                \n                    Asynchronously provide data via it's provider Subject\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                                NetworkContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getEdgeActions\n                        \n                    \n                \n            \n            \n                \ngetEdgeActions(edge: Edge)\n                \n            \n\n\n            \n                \n                    Defined in network/network-models.ts:109\n                \n            \n\n\n            \n                \n                    Retrieve the list of action for a given edge, and this provider.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    edge\n                                    \n                                                Edge\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Action[]\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getNodeActions\n                        \n                    \n                \n            \n            \n                \ngetNodeActions(node: Node)\n                \n            \n\n\n            \n                \n                    Defined in network/network-models.ts:106\n                \n            \n\n\n            \n                \n                    Retrieve the list of action for a given node, and this provider.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    node\n                                    \n                                                Node\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Action[]\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getProvider\n                        \n                    \n                \n            \n            \n                \ngetProvider()\n                \n            \n\n\n            \n                \n                    Defined in network/network-models.ts:85\n                \n            \n\n\n            \n                \n                    Returns the Subject of this provider\n\n\n                    \n                        Returns :         Subject\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getProviderActions\n                        \n                    \n                \n            \n            \n                \ngetProviderActions()\n                \n            \n\n\n            \n                \n                    Defined in network/network-models.ts:103\n                \n            \n\n\n            \n                \n                    Retrieve the list of action for this provider.\n\n\n                    \n                        Returns :     Action[]\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onDatasetsMerged\n                        \n                    \n                \n            \n            \n                \nonDatasetsMerged(dataset: NetworkDataset)\n                \n            \n\n\n            \n                \n                    Defined in network/network-models.ts:91\n                \n            \n\n\n            \n                \n                    Called after the datasets provided by all providers have been merged into a single dataset\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dataset\n                                    \n                                                NetworkDataset\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onDestroy\n                        \n                    \n                \n            \n            \n                \nonDestroy()\n                \n            \n\n\n            \n                \n                    Defined in network/network-models.ts:112\n                \n            \n\n\n            \n                \n                    Called when the providers are discarded. Can be use to cancel subscriptions\n\n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onEdgeClicked\n                        \n                    \n                \n            \n            \n                \nonEdgeClicked(edge: Edge | undefined)\n                \n            \n\n\n            \n                \n                    Defined in network/network-models.ts:100\n                \n            \n\n\n            \n                \n                    Called when ANY edge is clicked in the rendered view of the network\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    edge\n                                    \n                                                Edge | undefined\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onNodeClicked\n                        \n                    \n                \n            \n            \n                \nonNodeClicked(node: Node | undefined)\n                \n            \n\n\n            \n                \n                    Defined in network/network-models.ts:97\n                \n            \n\n\n            \n                \n                    Called when ANY node is clicked in the rendered view of the network\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    node\n                                    \n                                                Node | undefined\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onNodesInserted\n                        \n                    \n                \n            \n            \n                \nonNodesInserted(nodes: Node[])\n                \n            \n\n\n            \n                \n                    Defined in network/network-models.ts:94\n                \n            \n\n\n            \n                \n                    Called after the dataset is filtered and passed to Vis for rendering\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    nodes\n                                    \n                                                Node[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        active\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        active:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Whether or not the provider is active (if inactive, it will not provide empty datasets of nodes and edges)\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        context\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        context:         NetworkContext\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         NetworkContext\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Context (wrapper for general data about the network and services)\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        dataset\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        dataset:         NetworkDataset\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         NetworkDataset\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Dataset of this provider\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        name\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        name:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Readable name of this provider\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { Subject } from 'rxjs';\nimport { Action } from '@sinequa/components/action';\nimport { Utils } from '@sinequa/core/base';\nimport { DataSet } from \"vis-data/peer/esm/vis-data\";\nimport { SearchService } from '@sinequa/components/search';\nimport { VisNetworkService } from 'ngx-vis';\nimport { AppService, ExprBuilder } from '@sinequa/core/app-utils';\nimport { IntlService } from '@sinequa/core/intl';\n\n// TYPES (configuration)\n\nexport interface NodeType {\n    name: string;\n    /** Vis Node options (merged in the Node objects). See https://visjs.github.io/vis-network/docs/network/nodes.html */\n    nodeOptions: {[key: string]: any} | ((node: Node, type: NodeType) => {[key: string]: any} );\n    /** If a field is provided, it can be used to filter the node value (and access the label, formatter, etc.) */\n    field?: string;\n}\n\nexport interface EdgeType {\n    /** Node types attached to this edge type. Should typically be 2 items, but cooccurrence aggregation might return more */\n    nodeTypes: NodeType[];\n    /** Vis Edge options (merged in the Edge objects). See https://visjs.github.io/vis-network/docs/network/edges.html */\n    edgeOptions: {[key: string]: any} | ((nodes: Node[], edge: Edge, type: EdgeType) => {[key: string]: any} );\n    /** If a field is provided, it can be used to filter the node value (and access the label, formatter, etc.) */\n    field?: string;\n}\n\n\n// DATA\n\n// Nodes (based on Vis Node interface)\n\nexport interface Node {\n    id: string;\n    label: string;\n\n    // Custom properties\n    type: NodeType;\n    provider: NetworkProvider;\n    visible: boolean;\n    /** count is a mutable property used to scale the node size in function of the size of adjacent edges*/\n    count: number;\n    /** the precedence of a node determines which node object is kept when merging two dataset (the highest precedence node is kept) */\n    precedence?: number;\n    // Context\n    context: NetworkContext;\n}\n\n// Edge (based on Vis Edge interface)\n\nexport interface Edge {\n    id: string;\n    from: string;\n    to: string;\n\n    // Custom properties\n    type: EdgeType;\n    provider: NetworkProvider;\n    visible: boolean;    \n    /** count is a property representing the strength of an edge, which scales the count of adjacent nodes*/\n    count: number;\n    /** A field value may be provided to filter search based on the edge field type */\n    fieldValue?: string;\n    // Context\n    context: NetworkContext;\n}\n\n\nexport interface NetworkProvider {\n    /** Whether or not the provider is active (if inactive, it will not provide empty datasets of nodes and edges) */\n    active: boolean;\n\n    /** Readable name of this provider */\n    name: string;\n\n    /** Dataset of this provider */\n    dataset: NetworkDataset;\n\n    /** Context (wrapper for general data about the network and services) */\n    context: NetworkContext;\n\n    /** Returns the Subject of this provider */\n    getProvider(): Subject;\n\n    /** Asynchronously provide data via it's provider Subject */\n    getData(context: NetworkContext); // skip/count handled internally\n\n    /** Called after the datasets provided by all providers have been merged into a single dataset */\n    onDatasetsMerged(dataset: NetworkDataset);\n\n    /** Called after the dataset is filtered and passed to Vis for rendering */\n    onNodesInserted(nodes: Node[]);\n\n    /** Called when ANY node is clicked in the rendered view of the network */\n    onNodeClicked(node: Node | undefined);\n\n    /** Called when ANY edge is clicked in the rendered view of the network */\n    onEdgeClicked(edge: Edge | undefined);\n\n    /** Retrieve the list of action for this provider. */\n    getProviderActions(): Action[];\n\n    /** Retrieve the list of action for a given node, and this provider. */\n    getNodeActions(node: Node): Action[];\n    \n    /** Retrieve the list of action for a given edge, and this provider. */\n    getEdgeActions(edge: Edge): Action[];\n\n    /** Called when the providers are discarded. Can be use to cancel subscriptions */\n    onDestroy();\n}\n\nexport interface NetworkContext {\n    /** Name of this network, for use in selections */\n    name: string;\n    /** Vis.js data structures */\n    nodes: DataSet;\n    edges: DataSet;\n    /** Useful services */\n    searchService: SearchService;\n    networkService: VisNetworkService;\n    appService: AppService;\n    intlService: IntlService;\n    exprBuilder: ExprBuilder;\n    /** Interactions */\n    select(node?: Node, edge?: Edge): void;\n}\n\n\nexport class NetworkDataset {\n\n    // Node index\n    private readonly nodeIdx: Map = new Map();\n\n    // Edge index\n    private readonly edgeIdx: Map = new Map();\n\n\n    /** Returns whether this node exists */\n    public hasNode(id: string): boolean {\n        return this.nodeIdx.has(id);\n    }\n    \n    /** Returns whether this edge exists */\n    public hasEdge(id: string): boolean {\n        return this.edgeIdx.has(id);\n    }\n\n    /** Returns the node with given id */\n    public getNode(id: string): Node | undefined {\n        return this.nodeIdx.get(id);\n    }\n\n    /** Returns the edge with given id */\n    public getEdge(id: string): Edge | undefined {\n        return this.edgeIdx.get(id);\n    }\n\n    /** Get the list of nodes */\n    public getNodes(): Node[] {\n        return Array.from(this.nodeIdx.values());\n    }\n\n    /** Get the list of edges */\n    public getEdges(): Edge[] {\n        return Array.from(this.edgeIdx.values());\n    }    \n\n    /** Get the list of visible nodes */\n    public getVisibleNodes(): Node[] {\n        return this.getNodes().filter(n => n.visible);\n    }\n\n    /** Get the list of visible edges */\n    public getVisibleEdges(): Edge[] {\n        return this.getEdges().filter(e => e.visible);\n    }\n\n    /** Get the list of node ids */\n    public getNodeIds(): string[] {\n        return Array.from(this.nodeIdx.keys());\n    }\n\n    /** Get the list of edge ids */\n    public getEdgeIds(): string[] {\n        return Array.from(this.edgeIdx.keys());\n    }\n    \n    /** Clears this dataset */\n    public clear() {\n        this.nodeIdx.clear();\n        this.edgeIdx.clear();\n    }\n\n    /** Add one or multiple nodes */\n    public addNodes(nodes: Node | Node[]) {\n        Array.isArray(nodes)? nodes.forEach(node => this.addNode(node)) : this.addNode(nodes);\n    }\n\n    /** Add one or multiple edges. */\n    public addEdges(edges: Edge | Edge[]) {\n        Array.isArray(edges)? edges.forEach(edge => this.addEdge(edge)) : this.addEdge(edges);\n    }\n\n    /** Remove one or multiple nodes. /!\\ Connected edges MUST be removed as well (use cleanRemoveNode() to do so) */\n    private removeNodes(ids: string | string[]) {\n        Array.isArray(ids)? ids.forEach(id => this.removeNode(id)) : this.removeNode(ids);\n    }\n\n    /** Remove one or multiple edges. */\n    public removeEdges(ids: string | string[]) {\n        Array.isArray(ids)? ids.forEach(id => this.removeEdge(id)) : this.removeEdge(ids);\n    }\n\n    /** Remove a node and its adjacent edges. keepDanglingNodes = false (default) removes the remaining nodes with no neighbor */\n    public cleanRemoveNode(nodeId: string, keepDanglingNodes?: boolean) {\n        this.getAdjacentEdges(nodeId).forEach(edge => {\n            const neighbor = this.getNode(edge.from === nodeId ? edge.to : edge.from) as Node;\n            this.removeEdges(edge.id);\n            neighbor.count -= edge.count;\n            if(!keepDanglingNodes && this.getAdjacentEdges(neighbor.id).length === 0) {\n                this.removeNodes(neighbor.id);\n            }\n        });\n    }\n\n    /** Get the edges adjacent to a node (O(n) method) */\n    public getAdjacentEdges(nodeId: string): Edge[] {\n        return this.getEdges().filter(e => e.from === nodeId || e.to === nodeId);\n    }\n\n    /** Get the nodes connected to a node via a single node (0(n) method) */\n    public getConnectedNodes(nodeId: string): Node[] {\n        return this.getAdjacentEdges(nodeId)\n                    .map(e => this.getNode(e.from === nodeId ? e.to : e.from) as Node);\n    }\n\n    /**\n     * Merge this dataset with another one. \n     * \n     * When duplicates nodes or edges are found:\n     * - The existing item is kept and updated\n     * - Their 'count' properties are added\n     * - Their 'visible' properties are ORed\n     * - Their nodeOptions and edgeOptions are updated\n     * \n     * @param dataset \n     */\n    public merge(dataset: NetworkDataset): NetworkDataset {\n\n        dataset.getNodes().forEach(node => {\n            node = Object.assign({}, node); // Avoid modifying the original datasets\n            if(!this.hasNode(node.id)) {\n                this.addNode(node);\n            }\n            else {\n                // Merge the new node with the existing one (which takes precedence by default)\n                let existingNode = this.getNode(node.id) as Node;\n                if((node.precedence || 0) > (existingNode.precedence || 0)) {\n                    // Set the new node in the node index\n                    this.nodeIdx.set(node.id, node);\n                    // swap existingNode and node for the merging of count, visible and node options\n                    const temp = node;\n                    node = existingNode;\n                    existingNode = temp;\n                }\n                existingNode.count += node.count;\n                existingNode.visible = existingNode.visible || node.visible;\n                let options: {[key: string]: any};\n                if(typeof existingNode.type.nodeOptions === \"function\") {\n                    options = existingNode.type.nodeOptions(existingNode, existingNode.type);\n                }\n                else {\n                    options = existingNode.type.nodeOptions;\n                }\n                Utils.extend(existingNode, options);\n            }\n        });\n\n        dataset.getEdges().forEach(edge => {\n            edge = Object.assign({}, edge); // Avoid modifying the original datasets\n            if(!this.hasEdge(edge.id)) {\n                this.addEdge(edge);\n            }\n            else {\n                // Merge the new edge with the existing one (which takes precedence)\n                // eg. statistical and semantic edges\n                const existingEdge = this.getEdge(edge.id) as Edge;\n                existingEdge.count += edge.count;\n                existingEdge.visible = existingEdge.visible || edge.visible;\n                // Merge edge labels (taking duplicates into account)\n                if(!!existingEdge[\"label\"] && !!edge[\"label\"]){\n                    edge[\"labels\"].forEach(label => {\n                        if(existingEdge[\"labels\"].indexOf(label) === -1) {\n                            existingEdge[\"label\"] += \", \"+label;\n                            existingEdge[\"labels\"].push(label);\n                        }\n                    });\n                }\n                let options: {[key: string]: any};\n                if(typeof existingEdge.type.edgeOptions === \"function\") {\n                    const nodes = [existingEdge.from, existingEdge.to].map(id => this.nodeIdx[id]);\n                    options = existingEdge.type.edgeOptions(nodes, existingEdge, existingEdge.type);\n                }\n                else {\n                    options = existingEdge.type.edgeOptions;\n                }\n                Utils.extend(existingEdge, options);\n            }\n        });\n\n        return this;\n    }\n\n    /** Transfer nodes and edges to the Vis nodes and edges DataSets */\n    updateDatasets(nodes: DataSet, edges: DataSet) {\n        nodes.remove(nodes.get().filter(n => !this.getNode(n.id)?.visible));\n        edges.remove(edges.get().filter(e => !this.getEdge(e.id)?.visible));\n        nodes.update(this.getVisibleNodes());\n        edges.update(this.getVisibleEdges());\n    }\n\n    \n    private addNode(node: Node) {\n        if(this.hasNode(node.id)) {\n            throw new Error(`Node '${node.id}' already in dataset`);\n        }\n        this.nodeIdx.set(node.id, node);\n    }\n    \n    private addEdge(edge: Edge) {\n        if(this.hasEdge(edge.id)) {\n            throw new Error(`Edge '${edge.id}' already in dataset`);\n        }\n        if(!this.hasNode(edge.from) || !this.hasNode(edge.to)) {\n            throw new Error(`Edge '${edge.id}' cannot be added as one of the nodes is missing from the dataset`)\n        }\n        this.edgeIdx.set(edge.id, edge);\n    }\n\n    private removeNode(id: string) {\n        this.nodeIdx.delete(id);\n    }\n\n    private removeEdge(id: string) {\n        this.edgeIdx.delete(id);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/NgxChart.html":{"url":"components/NgxChart.html","title":"component - NgxChart","body":"\n                   \n\n\n\n\n\n  Components\n  \n  NgxChart\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    ngx-charts/chart/chart.ts\n\n\n\n\n\n    \n        Implements\n    \n    \n                    OnInit\n                    OnDestroy\n                    OnChanges\n                    DoCheck\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                sq-ngx-chart\n            \n\n            \n                styleUrls\n                ./chart.scss\n            \n\n\n\n            \n                templateUrl\n                ./chart.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                attached\n                            \n                            \n                                chart\n                            \n                            \n                                localeChange\n                            \n                            \n                                select\n                            \n                            \n                                tooltipTemplate\n                            \n                            \n                                wrapper\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                chartComponent\n                            \n                            \n                                ngDoCheck\n                            \n                            \n                                ngOnChanges\n                            \n                            \n                                ngOnDestroy\n                            \n                            \n                                ngOnInit\n                            \n                            \n                                updateChart\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                data\n                            \n                            \n                                options\n                            \n                        \n                    \n                \n\n                \n                    \n                        Outputs\n                    \n                \n                \n                    \n                        \n                            \n                                item-click\n                            \n                        \n                    \n                \n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    chartType\n                                \n                                \n                                    colorScheme\n                                \n                            \n                        \n                    \n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(intlService: IntlService, uiService: UIService)\n                    \n                \n                        \n                            \n                                Defined in ngx-charts/chart/chart.ts:35\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        intlService\n                                                  \n                                                        \n                                                                    IntlService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        uiService\n                                                  \n                                                        \n                                                                    UIService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        data\n                    \n                \n                \n                    \n                        Type :         ChartDataPoint[]\n\n                    \n                \n                        \n                            \n                                    Defined in ngx-charts/chart/chart.ts:29\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        options\n                    \n                \n                \n                    \n                        Type :         ChartOptions\n\n                    \n                \n                        \n                            \n                                    Defined in ngx-charts/chart/chart.ts:28\n                            \n                        \n            \n        \n\n    \n    Outputs\n        \n            \n                \n                    \n                        \n                        item-click\n                    \n                \n                \n                    \n                        Type :         EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in ngx-charts/chart/chart.ts:30\n                            \n                        \n            \n        \n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        chartComponent\n                        \n                    \n                \n            \n            \n                \nchartComponent(type: string)\n                \n            \n\n\n            \n                \n                    Defined in ngx-charts/chart/chart.ts:66\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    type\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Type\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngDoCheck\n                        \n                    \n                \n            \n            \n                \nngDoCheck()\n                \n            \n\n\n            \n                \n                    Defined in ngx-charts/chart/chart.ts:83\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnChanges\n                        \n                    \n                \n            \n            \n                \nngOnChanges(changes: SimpleChanges)\n                \n            \n\n\n            \n                \n                    Defined in ngx-charts/chart/chart.ts:79\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    changes\n                                    \n                                                SimpleChanges\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnDestroy\n                        \n                    \n                \n            \n            \n                \nngOnDestroy()\n                \n            \n\n\n            \n                \n                    Defined in ngx-charts/chart/chart.ts:57\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnInit\n                        \n                    \n                \n            \n            \n                \nngOnInit()\n                \n            \n\n\n            \n                \n                    Defined in ngx-charts/chart/chart.ts:49\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        updateChart\n                        \n                    \n                \n            \n            \n                \nupdateChart()\n                \n            \n\n\n            \n                \n                    Defined in ngx-charts/chart/chart.ts:43\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        attached\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in ngx-charts/chart/chart.ts:35\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        chart\n                        \n                    \n                \n            \n                \n                    \n                        Type :     BaseChartComponent\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ViewChild('chart', {static: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in ngx-charts/chart/chart.ts:33\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        localeChange\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Subscription\n\n                    \n                \n                    \n                        \n                                Defined in ngx-charts/chart/chart.ts:34\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        select\n                        \n                    \n                \n            \n                \n                    \n                        Default value : () => {...}\n                    \n                \n                    \n                        \n                                Defined in ngx-charts/chart/chart.ts:92\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        tooltipTemplate\n                        \n                    \n                \n            \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ViewChild('tooltipTemplate', {static: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in ngx-charts/chart/chart.ts:32\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        wrapper\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ElementRef\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ViewChild('wrapper', {static: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in ngx-charts/chart/chart.ts:31\n                        \n                    \n\n\n        \n    \n\n\n    \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        chartType\n                    \n                \n\n                \n                    \n                        getchartType()\n                    \n                \n                            \n                                \n                                    Defined in ngx-charts/chart/chart.ts:62\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        colorScheme\n                    \n                \n\n                \n                    \n                        getcolorScheme()\n                    \n                \n                            \n                                \n                                    Defined in ngx-charts/chart/chart.ts:75\n                                \n                            \n\n            \n        \n\n\n\n\n    \n        import {Component, Input, Output, EventEmitter, OnInit, OnDestroy, OnChanges, DoCheck, SimpleChanges, ViewChild, ElementRef, Type} from \"@angular/core\";\nimport {Subscription} from \"rxjs\";\nimport {Utils} from \"@sinequa/core/base\";\nimport {IntlService} from \"@sinequa/core/intl\";\nimport {BaseChartComponent, BarVerticalComponent, BarHorizontalComponent} from \"@swimlane/ngx-charts\";\nimport {UIService} from \"@sinequa/components/utils\";\n\n\nexport interface ChartOptions {\n    type: string;\n    colorScheme?: string;\n    getItemColor?: (value: string) => string;\n    tickFormatter?: (value: any) => string;\n}\n\nexport interface ChartDataPoint {\n    name: string;\n    value: number;\n}\n\n@Component({\n    selector: \"sq-ngx-chart\",\n    templateUrl: \"./chart.html\",\n    styleUrls: [\"./chart.scss\"]\n})\nexport class NgxChart implements OnInit, OnDestroy, OnChanges, DoCheck {\n    @Input() options: ChartOptions;\n    @Input() data: ChartDataPoint[];\n    @Output(\"item-click\") itemClickEvent: EventEmitter;\n    @ViewChild(\"wrapper\", {static: true}) wrapper: ElementRef;\n    @ViewChild(\"tooltipTemplate\", {static: false}) tooltipTemplate;\n    @ViewChild(\"chart\", {static: false}) chart: BaseChartComponent;\n    localeChange: Subscription;\n    attached: boolean;\n\n    constructor(\n        protected intlService: IntlService,\n        private uiService: UIService) {\n        this.itemClickEvent = new EventEmitter();\n    }\n\n    updateChart() {\n        if (!!this.chart) this.chart.update();\n    }\n\n    private onResize = () => this.updateChart();\n\n    ngOnInit() {\n        this.uiService.addElementResizeListener(this.wrapper.nativeElement, this.onResize);\n        this.localeChange = Utils.subscribe(this.intlService.events,\n            (value) => {\n                this.updateChart();\n            });\n    }\n\n    ngOnDestroy() {\n        this.uiService.removeElementResizeListener(this.wrapper.nativeElement, this.onResize);\n        this.localeChange.unsubscribe();\n    }\n\n    get chartType(): string {\n        return Utils.toLowerCase(this.options.type);\n    }\n\n    chartComponent(type:string) : Type {\n        switch(type){\n            case \"horizontalbar\": return BarHorizontalComponent;\n            case \"verticaltalbar\": return BarVerticalComponent;\n            default: return BarVerticalComponent;\n        }\n    }\n\n    // so we don't end up with no color scheme if the color scheme is not set\n    get colorScheme(): string {\n        return this.options.colorScheme || \"cool\";\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n    }\n\n    // This is a clunky way of avoiding (briefly) seeing ngx-charts rendering with the default 600x400 dimensions\n    ngDoCheck() {\n        if (!this.attached && !!this.wrapper) {\n            if (document.body.contains(this.wrapper.nativeElement)) {\n                this.updateChart();\n                this.attached = true;\n            }\n        }\n    }\n\n    select = (dataPoint: ChartDataPoint): void => {\n        this.itemClickEvent.emit(dataPoint);\n    }\n}\n    \n\n    \n        \n    \n        \n            \n                \n            \n        \n        \n            \n                \n            \n        \n        \n            \n                \n            \n        \n        \n            \n                \n            \n        \n        \n            \n                \n            \n        \n        \n            \n                \n            \n        \n        \n            \n                \n            \n        \n        \n            \n                \n            \n        \n    \n    \n        {{model.name}}\n        {{model.value | sqValue}}\n    \n\n    \n\n    \n                \n                    ./chart.scss\n                \n                .sq-chart-wrapper {\n    visibility: hidden;\n    width: 100%;\n    height: 16rem;\n    overflow: hidden;\n    &.sq-attached {\n        visibility: visible;\n    }\n}\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    {{model.name}}        {{model.value | sqValue}}    '\n    var COMPONENTS = [{'name': 'AgGridViewComponent', 'selector': 'sq-ag-grid-view'},{'name': 'BsEdgeInfoCard', 'selector': 'sq-edge-info-card'},{'name': 'BsFacetDate', 'selector': 'sq-facet-date'},{'name': 'BsFacetHeatmapComponent', 'selector': 'sq-facet-heatmap'},{'name': 'BsFacetTimelineComponent', 'selector': 'sq-facet-timeline'},{'name': 'BsHeatmapComponent', 'selector': 'sq-heatmap'},{'name': 'BsNodeInfoCard', 'selector': 'sq-node-info-card'},{'name': 'BsResultsHeatmapView', 'selector': 'sq-results-heatmap-view'},{'name': 'BsTimelineComponent', 'selector': 'sq-timeline'},{'name': 'BsTooltipComponent', 'selector': 'sq-tooltip'},{'name': 'DataModalComponent', 'selector': 'sq-data-modal'},{'name': 'FacetNgxChart', 'selector': 'sq-facet-ngx-chart'},{'name': 'FacetWrapperComponent', 'selector': 'facet-wrapper'},{'name': 'FusionChart', 'selector': 'sq-fusion-chart'},{'name': 'MapComponent', 'selector': 'sq-googlemaps'},{'name': 'MoneyCloudComponent', 'selector': 'sq-money-cloud'},{'name': 'MoneyTimelineComponent', 'selector': 'sq-money-timeline'},{'name': 'NetworkComponent', 'selector': 'sq-network'},{'name': 'NgxChart', 'selector': 'sq-ngx-chart'},{'name': 'ResultTimeline', 'selector': 'sq-result-timeline'},{'name': 'TimelineLegendComponent', 'selector': 'sq-timeline-legend'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'NgxChart'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/NgxChartsModule.html":{"url":"modules/NgxChartsModule.html","title":"module - NgxChartsModule","body":"\n                   \n\n\n\n\n    Modules\n    NgxChartsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_NgxChartsModule\n\n\n\ncluster_NgxChartsModule_exports\n\n\n\ncluster_NgxChartsModule_declarations\n\n\n\n\nFacetNgxChart\n\nFacetNgxChart\n\n\n\nNgxChartsModule\n\nNgxChartsModule\n\nNgxChartsModule -->\n\nFacetNgxChart->NgxChartsModule\n\n\n\n\n\nNgxChart\n\nNgxChart\n\nNgxChartsModule -->\n\nNgxChart->NgxChartsModule\n\n\n\n\n\nFacetNgxChart \n\nFacetNgxChart \n\nFacetNgxChart  -->\n\nNgxChartsModule->FacetNgxChart \n\n\n\n\n\nNgxChart \n\nNgxChart \n\nNgxChart  -->\n\nNgxChartsModule->NgxChart \n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            ngx-charts/ngx-charts.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Declarations\n                    \n                        \n                            FacetNgxChart\n                        \n                        \n                            NgxChart\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            FacetNgxChart\n                        \n                        \n                            NgxChart\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { NgModule } from \"@angular/core\";\nimport { CommonModule } from \"@angular/common\";\nimport {\n    AreaChartModule,\n    BarChartModule,\n    PieChartModule,\n    TreeMapModule,\n    NumberCardModule,\n    GaugeModule } from \"@swimlane/ngx-charts\";\n\nimport { IntlModule } from '@sinequa/core/intl';\nimport { UtilsModule } from \"@sinequa/components/utils\";\nimport { BsSelectionModule } from \"@sinequa/components/selection\";\n\nimport { NgxChart } from \"./chart/chart\";\nimport { FacetNgxChart } from \"./facet-chart/facet-chart\";\n\n@NgModule({\n\n    imports: [\n        CommonModule,\n        IntlModule,\n        UtilsModule,\n        BsSelectionModule,\n        \n        // ngx-charts modules\n        AreaChartModule,\n        BarChartModule,\n        PieChartModule,\n        TreeMapModule,\n        NumberCardModule,\n        GaugeModule\n    ],\n    declarations: [\n        NgxChart, FacetNgxChart\n    ],\n    exports: [\n        NgxChart, FacetNgxChart\n    ],\n})\nexport class NgxChartsModule {}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Node.html":{"url":"interfaces/Node.html","title":"interface - Node","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  Node\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            network/network-models.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            context\n                                        \n                                \n                                \n                                        \n                                            count\n                                        \n                                \n                                \n                                        \n                                            id\n                                        \n                                \n                                \n                                        \n                                            label\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            precedence\n                                        \n                                \n                                \n                                        \n                                            provider\n                                        \n                                \n                                \n                                        \n                                            type\n                                        \n                                \n                                \n                                        \n                                            visible\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        context\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        context:         NetworkContext\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         NetworkContext\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        count\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        count:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    count is a mutable property used to scale the node size in function of the size of adjacent edges\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        id:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        label\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        label:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        precedence\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        precedence:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    the precedence of a node determines which node object is kept when merging two dataset (the highest precedence node is kept)\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        provider\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        provider:         NetworkProvider\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         NetworkProvider\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        type\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        type:         NodeType\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         NodeType\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        visible\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        visible:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Subject } from 'rxjs';\nimport { Action } from '@sinequa/components/action';\nimport { Utils } from '@sinequa/core/base';\nimport { DataSet } from \"vis-data/peer/esm/vis-data\";\nimport { SearchService } from '@sinequa/components/search';\nimport { VisNetworkService } from 'ngx-vis';\nimport { AppService, ExprBuilder } from '@sinequa/core/app-utils';\nimport { IntlService } from '@sinequa/core/intl';\n\n// TYPES (configuration)\n\nexport interface NodeType {\n    name: string;\n    /** Vis Node options (merged in the Node objects). See https://visjs.github.io/vis-network/docs/network/nodes.html */\n    nodeOptions: {[key: string]: any} | ((node: Node, type: NodeType) => {[key: string]: any} );\n    /** If a field is provided, it can be used to filter the node value (and access the label, formatter, etc.) */\n    field?: string;\n}\n\nexport interface EdgeType {\n    /** Node types attached to this edge type. Should typically be 2 items, but cooccurrence aggregation might return more */\n    nodeTypes: NodeType[];\n    /** Vis Edge options (merged in the Edge objects). See https://visjs.github.io/vis-network/docs/network/edges.html */\n    edgeOptions: {[key: string]: any} | ((nodes: Node[], edge: Edge, type: EdgeType) => {[key: string]: any} );\n    /** If a field is provided, it can be used to filter the node value (and access the label, formatter, etc.) */\n    field?: string;\n}\n\n\n// DATA\n\n// Nodes (based on Vis Node interface)\n\nexport interface Node {\n    id: string;\n    label: string;\n\n    // Custom properties\n    type: NodeType;\n    provider: NetworkProvider;\n    visible: boolean;\n    /** count is a mutable property used to scale the node size in function of the size of adjacent edges*/\n    count: number;\n    /** the precedence of a node determines which node object is kept when merging two dataset (the highest precedence node is kept) */\n    precedence?: number;\n    // Context\n    context: NetworkContext;\n}\n\n// Edge (based on Vis Edge interface)\n\nexport interface Edge {\n    id: string;\n    from: string;\n    to: string;\n\n    // Custom properties\n    type: EdgeType;\n    provider: NetworkProvider;\n    visible: boolean;    \n    /** count is a property representing the strength of an edge, which scales the count of adjacent nodes*/\n    count: number;\n    /** A field value may be provided to filter search based on the edge field type */\n    fieldValue?: string;\n    // Context\n    context: NetworkContext;\n}\n\n\nexport interface NetworkProvider {\n    /** Whether or not the provider is active (if inactive, it will not provide empty datasets of nodes and edges) */\n    active: boolean;\n\n    /** Readable name of this provider */\n    name: string;\n\n    /** Dataset of this provider */\n    dataset: NetworkDataset;\n\n    /** Context (wrapper for general data about the network and services) */\n    context: NetworkContext;\n\n    /** Returns the Subject of this provider */\n    getProvider(): Subject;\n\n    /** Asynchronously provide data via it's provider Subject */\n    getData(context: NetworkContext); // skip/count handled internally\n\n    /** Called after the datasets provided by all providers have been merged into a single dataset */\n    onDatasetsMerged(dataset: NetworkDataset);\n\n    /** Called after the dataset is filtered and passed to Vis for rendering */\n    onNodesInserted(nodes: Node[]);\n\n    /** Called when ANY node is clicked in the rendered view of the network */\n    onNodeClicked(node: Node | undefined);\n\n    /** Called when ANY edge is clicked in the rendered view of the network */\n    onEdgeClicked(edge: Edge | undefined);\n\n    /** Retrieve the list of action for this provider. */\n    getProviderActions(): Action[];\n\n    /** Retrieve the list of action for a given node, and this provider. */\n    getNodeActions(node: Node): Action[];\n    \n    /** Retrieve the list of action for a given edge, and this provider. */\n    getEdgeActions(edge: Edge): Action[];\n\n    /** Called when the providers are discarded. Can be use to cancel subscriptions */\n    onDestroy();\n}\n\nexport interface NetworkContext {\n    /** Name of this network, for use in selections */\n    name: string;\n    /** Vis.js data structures */\n    nodes: DataSet;\n    edges: DataSet;\n    /** Useful services */\n    searchService: SearchService;\n    networkService: VisNetworkService;\n    appService: AppService;\n    intlService: IntlService;\n    exprBuilder: ExprBuilder;\n    /** Interactions */\n    select(node?: Node, edge?: Edge): void;\n}\n\n\nexport class NetworkDataset {\n\n    // Node index\n    private readonly nodeIdx: Map = new Map();\n\n    // Edge index\n    private readonly edgeIdx: Map = new Map();\n\n\n    /** Returns whether this node exists */\n    public hasNode(id: string): boolean {\n        return this.nodeIdx.has(id);\n    }\n    \n    /** Returns whether this edge exists */\n    public hasEdge(id: string): boolean {\n        return this.edgeIdx.has(id);\n    }\n\n    /** Returns the node with given id */\n    public getNode(id: string): Node | undefined {\n        return this.nodeIdx.get(id);\n    }\n\n    /** Returns the edge with given id */\n    public getEdge(id: string): Edge | undefined {\n        return this.edgeIdx.get(id);\n    }\n\n    /** Get the list of nodes */\n    public getNodes(): Node[] {\n        return Array.from(this.nodeIdx.values());\n    }\n\n    /** Get the list of edges */\n    public getEdges(): Edge[] {\n        return Array.from(this.edgeIdx.values());\n    }    \n\n    /** Get the list of visible nodes */\n    public getVisibleNodes(): Node[] {\n        return this.getNodes().filter(n => n.visible);\n    }\n\n    /** Get the list of visible edges */\n    public getVisibleEdges(): Edge[] {\n        return this.getEdges().filter(e => e.visible);\n    }\n\n    /** Get the list of node ids */\n    public getNodeIds(): string[] {\n        return Array.from(this.nodeIdx.keys());\n    }\n\n    /** Get the list of edge ids */\n    public getEdgeIds(): string[] {\n        return Array.from(this.edgeIdx.keys());\n    }\n    \n    /** Clears this dataset */\n    public clear() {\n        this.nodeIdx.clear();\n        this.edgeIdx.clear();\n    }\n\n    /** Add one or multiple nodes */\n    public addNodes(nodes: Node | Node[]) {\n        Array.isArray(nodes)? nodes.forEach(node => this.addNode(node)) : this.addNode(nodes);\n    }\n\n    /** Add one or multiple edges. */\n    public addEdges(edges: Edge | Edge[]) {\n        Array.isArray(edges)? edges.forEach(edge => this.addEdge(edge)) : this.addEdge(edges);\n    }\n\n    /** Remove one or multiple nodes. /!\\ Connected edges MUST be removed as well (use cleanRemoveNode() to do so) */\n    private removeNodes(ids: string | string[]) {\n        Array.isArray(ids)? ids.forEach(id => this.removeNode(id)) : this.removeNode(ids);\n    }\n\n    /** Remove one or multiple edges. */\n    public removeEdges(ids: string | string[]) {\n        Array.isArray(ids)? ids.forEach(id => this.removeEdge(id)) : this.removeEdge(ids);\n    }\n\n    /** Remove a node and its adjacent edges. keepDanglingNodes = false (default) removes the remaining nodes with no neighbor */\n    public cleanRemoveNode(nodeId: string, keepDanglingNodes?: boolean) {\n        this.getAdjacentEdges(nodeId).forEach(edge => {\n            const neighbor = this.getNode(edge.from === nodeId ? edge.to : edge.from) as Node;\n            this.removeEdges(edge.id);\n            neighbor.count -= edge.count;\n            if(!keepDanglingNodes && this.getAdjacentEdges(neighbor.id).length === 0) {\n                this.removeNodes(neighbor.id);\n            }\n        });\n    }\n\n    /** Get the edges adjacent to a node (O(n) method) */\n    public getAdjacentEdges(nodeId: string): Edge[] {\n        return this.getEdges().filter(e => e.from === nodeId || e.to === nodeId);\n    }\n\n    /** Get the nodes connected to a node via a single node (0(n) method) */\n    public getConnectedNodes(nodeId: string): Node[] {\n        return this.getAdjacentEdges(nodeId)\n                    .map(e => this.getNode(e.from === nodeId ? e.to : e.from) as Node);\n    }\n\n    /**\n     * Merge this dataset with another one. \n     * \n     * When duplicates nodes or edges are found:\n     * - The existing item is kept and updated\n     * - Their 'count' properties are added\n     * - Their 'visible' properties are ORed\n     * - Their nodeOptions and edgeOptions are updated\n     * \n     * @param dataset \n     */\n    public merge(dataset: NetworkDataset): NetworkDataset {\n\n        dataset.getNodes().forEach(node => {\n            node = Object.assign({}, node); // Avoid modifying the original datasets\n            if(!this.hasNode(node.id)) {\n                this.addNode(node);\n            }\n            else {\n                // Merge the new node with the existing one (which takes precedence by default)\n                let existingNode = this.getNode(node.id) as Node;\n                if((node.precedence || 0) > (existingNode.precedence || 0)) {\n                    // Set the new node in the node index\n                    this.nodeIdx.set(node.id, node);\n                    // swap existingNode and node for the merging of count, visible and node options\n                    const temp = node;\n                    node = existingNode;\n                    existingNode = temp;\n                }\n                existingNode.count += node.count;\n                existingNode.visible = existingNode.visible || node.visible;\n                let options: {[key: string]: any};\n                if(typeof existingNode.type.nodeOptions === \"function\") {\n                    options = existingNode.type.nodeOptions(existingNode, existingNode.type);\n                }\n                else {\n                    options = existingNode.type.nodeOptions;\n                }\n                Utils.extend(existingNode, options);\n            }\n        });\n\n        dataset.getEdges().forEach(edge => {\n            edge = Object.assign({}, edge); // Avoid modifying the original datasets\n            if(!this.hasEdge(edge.id)) {\n                this.addEdge(edge);\n            }\n            else {\n                // Merge the new edge with the existing one (which takes precedence)\n                // eg. statistical and semantic edges\n                const existingEdge = this.getEdge(edge.id) as Edge;\n                existingEdge.count += edge.count;\n                existingEdge.visible = existingEdge.visible || edge.visible;\n                // Merge edge labels (taking duplicates into account)\n                if(!!existingEdge[\"label\"] && !!edge[\"label\"]){\n                    edge[\"labels\"].forEach(label => {\n                        if(existingEdge[\"labels\"].indexOf(label) === -1) {\n                            existingEdge[\"label\"] += \", \"+label;\n                            existingEdge[\"labels\"].push(label);\n                        }\n                    });\n                }\n                let options: {[key: string]: any};\n                if(typeof existingEdge.type.edgeOptions === \"function\") {\n                    const nodes = [existingEdge.from, existingEdge.to].map(id => this.nodeIdx[id]);\n                    options = existingEdge.type.edgeOptions(nodes, existingEdge, existingEdge.type);\n                }\n                else {\n                    options = existingEdge.type.edgeOptions;\n                }\n                Utils.extend(existingEdge, options);\n            }\n        });\n\n        return this;\n    }\n\n    /** Transfer nodes and edges to the Vis nodes and edges DataSets */\n    updateDatasets(nodes: DataSet, edges: DataSet) {\n        nodes.remove(nodes.get().filter(n => !this.getNode(n.id)?.visible));\n        edges.remove(edges.get().filter(e => !this.getEdge(e.id)?.visible));\n        nodes.update(this.getVisibleNodes());\n        edges.update(this.getVisibleEdges());\n    }\n\n    \n    private addNode(node: Node) {\n        if(this.hasNode(node.id)) {\n            throw new Error(`Node '${node.id}' already in dataset`);\n        }\n        this.nodeIdx.set(node.id, node);\n    }\n    \n    private addEdge(edge: Edge) {\n        if(this.hasEdge(edge.id)) {\n            throw new Error(`Edge '${edge.id}' already in dataset`);\n        }\n        if(!this.hasNode(edge.from) || !this.hasNode(edge.to)) {\n            throw new Error(`Edge '${edge.id}' cannot be added as one of the nodes is missing from the dataset`)\n        }\n        this.edgeIdx.set(edge.id, edge);\n    }\n\n    private removeNode(id: string) {\n        this.nodeIdx.delete(id);\n    }\n\n    private removeEdge(id: string) {\n        this.edgeIdx.delete(id);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/NodeData.html":{"url":"interfaces/NodeData.html","title":"interface - NodeData","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  NodeData\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            network/node-info-card.component.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            count\n                                        \n                                \n                                \n                                        \n                                            node\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        count\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        count:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        node\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        node:         Node\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Node\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Component, Input, OnChanges } from \"@angular/core\";\nimport { Node } from './network-models';\n\n\nexport interface NodeData {\n    node: Node;\n    count?: number; // The count displayed may be different from the node count (for edges)\n}\n\n@Component({\n    selector: \"sq-node-info-card\",\n    templateUrl: \"node-info-card.component.html\",\n    styles: [`\n.card {\n    top: 5px;\n    left: 0;\n    right: 0;\n    width: 80%;\n}\n.circular-image {\n    width: 1.5em;\n    height: 1.5em;\n    border-radius: 50%;\n    object-fit: cover;\n}\n    `]\n})\nexport class BsNodeInfoCard implements OnChanges {\n    @Input() node: Node;\n\n    closed: boolean;\n    expanded: boolean;\n\n    nodeData: NodeData;\n\n    neighbors: {[type: string]: NodeData[]};\n\n    ngOnChanges() {\n        this.closed = false;\n        this.expanded = false;\n        this.nodeData = { node: this.node, count: this.node.count };\n\n        this.neighbors = {};\n        this.node.context.edges\n            .stream()\n            .filter(e => e.from === this.node.id || e.to === this.node.id) // Filter edges\n            .map(e => {\n                const id = e.from === this.node.id ? e.to : e.from\n                const node = this.node.context.nodes.get(id);\n                return {node, count: e.count};\n            }) // get node and edge count\n            .forEach(item => {\n                if(item.node) {\n                    const type = item.node.type.field ?\n                        item.node.context.appService.getPluralLabel(item.node.type.field) : // Try to get the \"pretty label\"\n                        item.node.type.name; // Or just use the node type's name\n                    if(!this.neighbors[type]) {\n                        this.neighbors[type] = []; // Initialize the neighbor array\n                    }\n                    // Create the node data\n                    this.neighbors[type].push({ node: item.node, count: item.count } as NodeData);\n                }\n                return true;\n            });\n        // Sort the neighbors by decreasing count number\n        Object.values(this.neighbors)\n            .forEach(list => list.sort((a,b) => (b.count || 0) - (a.count || 0)));\n    }\n\n    focusNode(node: Node) {\n        // Hack to gain access to the network instance (networkService does not have the focus() method)\n        const networkInstance = node.context.networkService['networks'][node.context.name];\n        networkInstance.focus(node.id, {animation: true}); // Move the view to this node with animation\n        networkInstance.selectNodes([node.id], true); // Warning: does not trigger events...\n        node.context.select(node, undefined); // Select the node to update info cards, actions\n        return false;\n    }\n}\n    \n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/NodeType.html":{"url":"interfaces/NodeType.html","title":"interface - NodeType","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  NodeType\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            network/network-models.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            field\n                                        \n                                \n                                \n                                        \n                                            name\n                                        \n                                \n                                \n                                        \n                                            nodeOptions\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        field\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        field:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    If a field is provided, it can be used to filter the node value (and access the label, formatter, etc.)\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        name\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        name:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        nodeOptions\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        nodeOptions:     literal type | \n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type | \n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Vis Node options (merged in the Node objects). See https://visjs.github.io/vis-network/docs/network/nodes.html\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { Subject } from 'rxjs';\nimport { Action } from '@sinequa/components/action';\nimport { Utils } from '@sinequa/core/base';\nimport { DataSet } from \"vis-data/peer/esm/vis-data\";\nimport { SearchService } from '@sinequa/components/search';\nimport { VisNetworkService } from 'ngx-vis';\nimport { AppService, ExprBuilder } from '@sinequa/core/app-utils';\nimport { IntlService } from '@sinequa/core/intl';\n\n// TYPES (configuration)\n\nexport interface NodeType {\n    name: string;\n    /** Vis Node options (merged in the Node objects). See https://visjs.github.io/vis-network/docs/network/nodes.html */\n    nodeOptions: {[key: string]: any} | ((node: Node, type: NodeType) => {[key: string]: any} );\n    /** If a field is provided, it can be used to filter the node value (and access the label, formatter, etc.) */\n    field?: string;\n}\n\nexport interface EdgeType {\n    /** Node types attached to this edge type. Should typically be 2 items, but cooccurrence aggregation might return more */\n    nodeTypes: NodeType[];\n    /** Vis Edge options (merged in the Edge objects). See https://visjs.github.io/vis-network/docs/network/edges.html */\n    edgeOptions: {[key: string]: any} | ((nodes: Node[], edge: Edge, type: EdgeType) => {[key: string]: any} );\n    /** If a field is provided, it can be used to filter the node value (and access the label, formatter, etc.) */\n    field?: string;\n}\n\n\n// DATA\n\n// Nodes (based on Vis Node interface)\n\nexport interface Node {\n    id: string;\n    label: string;\n\n    // Custom properties\n    type: NodeType;\n    provider: NetworkProvider;\n    visible: boolean;\n    /** count is a mutable property used to scale the node size in function of the size of adjacent edges*/\n    count: number;\n    /** the precedence of a node determines which node object is kept when merging two dataset (the highest precedence node is kept) */\n    precedence?: number;\n    // Context\n    context: NetworkContext;\n}\n\n// Edge (based on Vis Edge interface)\n\nexport interface Edge {\n    id: string;\n    from: string;\n    to: string;\n\n    // Custom properties\n    type: EdgeType;\n    provider: NetworkProvider;\n    visible: boolean;    \n    /** count is a property representing the strength of an edge, which scales the count of adjacent nodes*/\n    count: number;\n    /** A field value may be provided to filter search based on the edge field type */\n    fieldValue?: string;\n    // Context\n    context: NetworkContext;\n}\n\n\nexport interface NetworkProvider {\n    /** Whether or not the provider is active (if inactive, it will not provide empty datasets of nodes and edges) */\n    active: boolean;\n\n    /** Readable name of this provider */\n    name: string;\n\n    /** Dataset of this provider */\n    dataset: NetworkDataset;\n\n    /** Context (wrapper for general data about the network and services) */\n    context: NetworkContext;\n\n    /** Returns the Subject of this provider */\n    getProvider(): Subject;\n\n    /** Asynchronously provide data via it's provider Subject */\n    getData(context: NetworkContext); // skip/count handled internally\n\n    /** Called after the datasets provided by all providers have been merged into a single dataset */\n    onDatasetsMerged(dataset: NetworkDataset);\n\n    /** Called after the dataset is filtered and passed to Vis for rendering */\n    onNodesInserted(nodes: Node[]);\n\n    /** Called when ANY node is clicked in the rendered view of the network */\n    onNodeClicked(node: Node | undefined);\n\n    /** Called when ANY edge is clicked in the rendered view of the network */\n    onEdgeClicked(edge: Edge | undefined);\n\n    /** Retrieve the list of action for this provider. */\n    getProviderActions(): Action[];\n\n    /** Retrieve the list of action for a given node, and this provider. */\n    getNodeActions(node: Node): Action[];\n    \n    /** Retrieve the list of action for a given edge, and this provider. */\n    getEdgeActions(edge: Edge): Action[];\n\n    /** Called when the providers are discarded. Can be use to cancel subscriptions */\n    onDestroy();\n}\n\nexport interface NetworkContext {\n    /** Name of this network, for use in selections */\n    name: string;\n    /** Vis.js data structures */\n    nodes: DataSet;\n    edges: DataSet;\n    /** Useful services */\n    searchService: SearchService;\n    networkService: VisNetworkService;\n    appService: AppService;\n    intlService: IntlService;\n    exprBuilder: ExprBuilder;\n    /** Interactions */\n    select(node?: Node, edge?: Edge): void;\n}\n\n\nexport class NetworkDataset {\n\n    // Node index\n    private readonly nodeIdx: Map = new Map();\n\n    // Edge index\n    private readonly edgeIdx: Map = new Map();\n\n\n    /** Returns whether this node exists */\n    public hasNode(id: string): boolean {\n        return this.nodeIdx.has(id);\n    }\n    \n    /** Returns whether this edge exists */\n    public hasEdge(id: string): boolean {\n        return this.edgeIdx.has(id);\n    }\n\n    /** Returns the node with given id */\n    public getNode(id: string): Node | undefined {\n        return this.nodeIdx.get(id);\n    }\n\n    /** Returns the edge with given id */\n    public getEdge(id: string): Edge | undefined {\n        return this.edgeIdx.get(id);\n    }\n\n    /** Get the list of nodes */\n    public getNodes(): Node[] {\n        return Array.from(this.nodeIdx.values());\n    }\n\n    /** Get the list of edges */\n    public getEdges(): Edge[] {\n        return Array.from(this.edgeIdx.values());\n    }    \n\n    /** Get the list of visible nodes */\n    public getVisibleNodes(): Node[] {\n        return this.getNodes().filter(n => n.visible);\n    }\n\n    /** Get the list of visible edges */\n    public getVisibleEdges(): Edge[] {\n        return this.getEdges().filter(e => e.visible);\n    }\n\n    /** Get the list of node ids */\n    public getNodeIds(): string[] {\n        return Array.from(this.nodeIdx.keys());\n    }\n\n    /** Get the list of edge ids */\n    public getEdgeIds(): string[] {\n        return Array.from(this.edgeIdx.keys());\n    }\n    \n    /** Clears this dataset */\n    public clear() {\n        this.nodeIdx.clear();\n        this.edgeIdx.clear();\n    }\n\n    /** Add one or multiple nodes */\n    public addNodes(nodes: Node | Node[]) {\n        Array.isArray(nodes)? nodes.forEach(node => this.addNode(node)) : this.addNode(nodes);\n    }\n\n    /** Add one or multiple edges. */\n    public addEdges(edges: Edge | Edge[]) {\n        Array.isArray(edges)? edges.forEach(edge => this.addEdge(edge)) : this.addEdge(edges);\n    }\n\n    /** Remove one or multiple nodes. /!\\ Connected edges MUST be removed as well (use cleanRemoveNode() to do so) */\n    private removeNodes(ids: string | string[]) {\n        Array.isArray(ids)? ids.forEach(id => this.removeNode(id)) : this.removeNode(ids);\n    }\n\n    /** Remove one or multiple edges. */\n    public removeEdges(ids: string | string[]) {\n        Array.isArray(ids)? ids.forEach(id => this.removeEdge(id)) : this.removeEdge(ids);\n    }\n\n    /** Remove a node and its adjacent edges. keepDanglingNodes = false (default) removes the remaining nodes with no neighbor */\n    public cleanRemoveNode(nodeId: string, keepDanglingNodes?: boolean) {\n        this.getAdjacentEdges(nodeId).forEach(edge => {\n            const neighbor = this.getNode(edge.from === nodeId ? edge.to : edge.from) as Node;\n            this.removeEdges(edge.id);\n            neighbor.count -= edge.count;\n            if(!keepDanglingNodes && this.getAdjacentEdges(neighbor.id).length === 0) {\n                this.removeNodes(neighbor.id);\n            }\n        });\n    }\n\n    /** Get the edges adjacent to a node (O(n) method) */\n    public getAdjacentEdges(nodeId: string): Edge[] {\n        return this.getEdges().filter(e => e.from === nodeId || e.to === nodeId);\n    }\n\n    /** Get the nodes connected to a node via a single node (0(n) method) */\n    public getConnectedNodes(nodeId: string): Node[] {\n        return this.getAdjacentEdges(nodeId)\n                    .map(e => this.getNode(e.from === nodeId ? e.to : e.from) as Node);\n    }\n\n    /**\n     * Merge this dataset with another one. \n     * \n     * When duplicates nodes or edges are found:\n     * - The existing item is kept and updated\n     * - Their 'count' properties are added\n     * - Their 'visible' properties are ORed\n     * - Their nodeOptions and edgeOptions are updated\n     * \n     * @param dataset \n     */\n    public merge(dataset: NetworkDataset): NetworkDataset {\n\n        dataset.getNodes().forEach(node => {\n            node = Object.assign({}, node); // Avoid modifying the original datasets\n            if(!this.hasNode(node.id)) {\n                this.addNode(node);\n            }\n            else {\n                // Merge the new node with the existing one (which takes precedence by default)\n                let existingNode = this.getNode(node.id) as Node;\n                if((node.precedence || 0) > (existingNode.precedence || 0)) {\n                    // Set the new node in the node index\n                    this.nodeIdx.set(node.id, node);\n                    // swap existingNode and node for the merging of count, visible and node options\n                    const temp = node;\n                    node = existingNode;\n                    existingNode = temp;\n                }\n                existingNode.count += node.count;\n                existingNode.visible = existingNode.visible || node.visible;\n                let options: {[key: string]: any};\n                if(typeof existingNode.type.nodeOptions === \"function\") {\n                    options = existingNode.type.nodeOptions(existingNode, existingNode.type);\n                }\n                else {\n                    options = existingNode.type.nodeOptions;\n                }\n                Utils.extend(existingNode, options);\n            }\n        });\n\n        dataset.getEdges().forEach(edge => {\n            edge = Object.assign({}, edge); // Avoid modifying the original datasets\n            if(!this.hasEdge(edge.id)) {\n                this.addEdge(edge);\n            }\n            else {\n                // Merge the new edge with the existing one (which takes precedence)\n                // eg. statistical and semantic edges\n                const existingEdge = this.getEdge(edge.id) as Edge;\n                existingEdge.count += edge.count;\n                existingEdge.visible = existingEdge.visible || edge.visible;\n                // Merge edge labels (taking duplicates into account)\n                if(!!existingEdge[\"label\"] && !!edge[\"label\"]){\n                    edge[\"labels\"].forEach(label => {\n                        if(existingEdge[\"labels\"].indexOf(label) === -1) {\n                            existingEdge[\"label\"] += \", \"+label;\n                            existingEdge[\"labels\"].push(label);\n                        }\n                    });\n                }\n                let options: {[key: string]: any};\n                if(typeof existingEdge.type.edgeOptions === \"function\") {\n                    const nodes = [existingEdge.from, existingEdge.to].map(id => this.nodeIdx[id]);\n                    options = existingEdge.type.edgeOptions(nodes, existingEdge, existingEdge.type);\n                }\n                else {\n                    options = existingEdge.type.edgeOptions;\n                }\n                Utils.extend(existingEdge, options);\n            }\n        });\n\n        return this;\n    }\n\n    /** Transfer nodes and edges to the Vis nodes and edges DataSets */\n    updateDatasets(nodes: DataSet, edges: DataSet) {\n        nodes.remove(nodes.get().filter(n => !this.getNode(n.id)?.visible));\n        edges.remove(edges.get().filter(e => !this.getEdge(e.id)?.visible));\n        nodes.update(this.getVisibleNodes());\n        edges.update(this.getVisibleEdges());\n    }\n\n    \n    private addNode(node: Node) {\n        if(this.hasNode(node.id)) {\n            throw new Error(`Node '${node.id}' already in dataset`);\n        }\n        this.nodeIdx.set(node.id, node);\n    }\n    \n    private addEdge(edge: Edge) {\n        if(this.hasEdge(edge.id)) {\n            throw new Error(`Edge '${edge.id}' already in dataset`);\n        }\n        if(!this.hasNode(edge.from) || !this.hasNode(edge.to)) {\n            throw new Error(`Edge '${edge.id}' cannot be added as one of the nodes is missing from the dataset`)\n        }\n        this.edgeIdx.set(edge.id, edge);\n    }\n\n    private removeNode(id: string) {\n        this.nodeIdx.delete(id);\n    }\n\n    private removeEdge(id: string) {\n        this.edgeIdx.delete(id);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/RecordNode.html":{"url":"interfaces/RecordNode.html","title":"interface - RecordNode","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  RecordNode\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            network/providers/records-provider.ts\n        \n\n\n            \n                Description\n            \n            \n                Extension of the Node interface, to include the Record object\nfrom which the node is generated\n\n            \n\n            \n                Extends\n            \n            \n                        Node\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            record\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        record\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        record:     Record\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Record\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Utils } from '@sinequa/core/base';\nimport { Record } from '@sinequa/core/web-services';\nimport { Action } from '@sinequa/components/action';\nimport { Node, NetworkDataset, NodeType, EdgeType, NetworkContext } from '../network-models';\nimport { BaseProvider } from './base-provider';\n\n/**\n * Extension of the Node interface, to include the Record object\n * from which the node is generated\n */\nexport interface RecordNode extends Node {\n    record: Record;\n}\n\n\n/**\n * An extension of the EdgeType interface to include properties specific to\n * structural edges (edge between a record and its metadata).\n * \n * About trigger/display: At the moment, the Record provider always adds ALL nodes and edges\n * to the dataset, but potentially with a visibility set to false. Some of the settings are\n * not compatible with each other, and some take precedence over the others:\n * - display=existingnodes takes precedence over other settings, as it is implemented as\n * a post-processing of the dataset (in onDatasetsMerged)\n * - trigger=onclick or manual take precedence over the other settings, as they set the\n * visibility to false by false, until the user performs an action\n * - trigger=oninsert is compatible with the other display settings\n */\nexport interface StructuralEdgeType extends EdgeType {\n    /** Name of the field in the record */\n    field: string;\n    /** count limits the number of values displayed and allows for pagination. Use 0 for unlimited values */\n    count?: number;\n    /** Defines when the edge should be displayed */\n    trigger: StructuralTriggerType;\n    /** showall: display all values from the field / paginate: display all value with pagination / existingnodes: only link to existing nodes / manual: only show if manual action (activated programmatically) */\n    display: StructuralDisplayType;\n    /** A function to parse metadata from a record node in a custom way */\n    parse?: (value: any, record: Record, type: StructuralEdgeType) => CustomData;\n}\n\nexport type StructuralTriggerType = \"oninsert\" | \"onclick\" | \"manual\";\nexport type StructuralDisplayType = \"all\" | \"paginate\" | \"existingnodes\" | ((node: Node, recordNode: RecordNode, index: number) => boolean);\n\n/**\n * Data structure returned by the optional parse() function of a structural edge\n * type. Contains the parsed values of a property that can be turned into one or\n * multiple nodes and edges.\n */\nexport interface CustomData {\n    values: string[]; // eg. LARRY PAGE, GOOGLE\n    displays: string[]; // eg. Larry Page, Google\n    relations?: string[]; // eg. Works At\n    directed?: boolean[]; // eg. true\n    fieldValue?: string; // A value on which to filter the data\n}\n\n/**\n * Tests whether the given edge type is a structural edge type\n * @param et an edge type\n */\nexport function isStructuralEdgeType(et: EdgeType): et is StructuralEdgeType {\n    return !!(et as StructuralEdgeType).field;\n}\n\n\n/**\n * A network provider generating nodes from records.\n * Additionally, the provider can generate the \"structural edges\" of that\n * node. Structural edges are edges between a record and the fields of\n * that record (eg. the wikipedia page of Microsoft is a record that probably\n * contains the fields \"Microsoft\" and \"Bill Gates\").\n */\nexport class RecordsProvider extends BaseProvider {\n\n    constructor(\n        public override name = \"Documents\",\n        protected nodeType: NodeType,\n        protected edgeTypes: StructuralEdgeType[],\n        protected records: Record[],\n        protected hideRecordNode = false\n    ){\n        super(name);\n    }\n\n    /**\n     * Clears the dataset and generates new record nodes\n     * @param records the list of records of this provider\n     */\n    protected updateDataset(records?: Record[]) {\n        this.dataset.clear();\n        if(!this.active || !records || records.length === 0) {\n            return; \n        }\n        this.addRecordNodes(records);\n    }\n    \n    // Record nodes\n\n    /**\n     * Generates the nodes for a list of records, including their structural\n     * edges, and adds them to the dataset.\n     * Returns the list of record nodes.\n     * @param records \n     */\n    protected addRecordNodes(records: Record[]): RecordNode[] {\n        return records.map(record => {\n            let node = this.dataset.getNode(this.getNodeId(this.nodeType, record.id));\n            if(!node) {\n                node = this.createNode(this.nodeType, record.id, record.title, !this.hideRecordNode, {record});\n                this.dataset.addNodes(node);\n                this.edgeTypes.forEach(type => {\n                    this.addStructuralEdges(node as RecordNode, type);\n                });\n            }\n            return node as RecordNode;\n        });\n    }\n\n    \n    // Structural edges\n\n    /**\n     * Generates the metadata nodes and structural edges from the given node,\n     * and merge them into the dataset.\n     * This function will automatically parse the metadata contained in the record,\n     * but it is possible to manage custom types of metadata by providing a\n     * custom parse() function via the structural edge type.\n     * @param node The record node\n     * @param type The edge type for which we want to create edges\n     */\n    protected addStructuralEdges(node: RecordNode, type: StructuralEdgeType) {\n\n        if(type.nodeTypes[0] !== this.nodeType){\n            throw new Error(`Inconsistent node type: '${type.nodeTypes[0].name}' instead of '${this.nodeType.name}'`);\n        }\n        \n        const recorddata = node.record[type.field];\n\n        if(recorddata === undefined){\n            return;\n        }\n\n        // Custom parse for mono or multi valued data\n        if(type.parse) {\n            if(Utils.isArray(recorddata)) {\n                recorddata.forEach((value,i) => { \n                    this.addCustomEdge(node, type, type.parse!(value, node.record, type));\n                });\n            }\n            else {\n                this.addCustomEdge(node, type, type.parse!(recorddata, node.record, type));\n            }\n        }\n        // Default handling for standard Sinequa Metadata\n        else {\n            const data = new NetworkDataset();\n            data.addNodes(node);\n    \n            // sourcestr\n            if(Utils.isString(recorddata)) {\n                this.addStructuralEdge(data, node, type, recorddata, recorddata, 0);\n            }\n            else if(Utils.isArray(recorddata)) {\n                recorddata.forEach((value,i) => {\n                    // sourcecsv\n                    if(Utils.isString(value)) {\n                        this.addStructuralEdge(data, node, type, value, value, i);\n                    }\n                    // entity\n                    else if(value[\"value\"]) {\n                        this.addStructuralEdge(data, node, type, value[\"value\"], value[\"display\"] || value[\"value\"], i);\n                    }\n                });\n            }\n    \n            this.dataset.merge(data);\n        }\n    }\n\n    /**\n     * Add a structural edge to a record node and adds that edge\n     * (and corresponding metadata node) to the given dataset.\n     * @param dataset The target dataset\n     * @param recordNode The record node\n     * @param type The edge type of the structural edge\n     * @param value The \"value\" property of the metadata node\n     * @param display The \"display\" property of the metadata node\n     * @param index The index of the metadata within the record, which may influence its visibility when using display=paginate\n     */\n    protected addStructuralEdge(dataset: NetworkDataset, recordNode: RecordNode, type: StructuralEdgeType, value: string, display: string, index: number) {\n        // Create the metadata node\n        const node = this.createNode(type.nodeTypes[1], value, display, true);\n        // Sets its visibility\n        node.visible = type.trigger === \"oninsert\" && this.isEdgeVisible(type, node, recordNode, index);\n        if(recordNode.id !== node.id){ // Special case of hybrid nodes, where the recordNode might contain itself...!\n            if(!dataset.hasNode(node.id)) { // Duplicate nodes/edges are possible when the same node type is present in multiple fields of a record (eg. \"email\" in msgfrom and msgto)\n                dataset.addNodes(node);\n            }\n            const edge = this.createEdge(type, recordNode, node, value, node.visible, {record: recordNode.record});\n            if(!dataset.hasEdge(edge.id)) {\n                dataset.addEdges(edge);\n            }\n        }\n    }\n\n    /**\n     * Add a custom structural edge to a record node and merges that edge\n     * (and corresponding metadata node) into the global dataset.\n     * @param recordNode The record node\n     * @param type The edge type of the structural edge\n     * @param data A CustomData object containing the properties of the metadata nodes we want to created\n     */\n    protected addCustomEdge(recordNode: RecordNode, type: StructuralEdgeType, data: CustomData) {\n        if(type.nodeTypes.length !== data.values.length + 1) {\n            throw new Error(`Wrong number of values for this custom edge ${type.nodeTypes.length}, ${data.values.length}`);\n        }\n        // Create a dataset only for this data, to avoid duplicate conflicts\n        const dataset = new NetworkDataset();\n        dataset.addNodes(recordNode);\n        // For each value contained in \"data\", create a node, and edges in between them (in addition to the edges between the record and each metadata node)\n        let lastNode: Node;\n        for(let i=0; i 0){\n                const relation = data.relations? data.relations[i-1] : undefined;\n                const directed = data.directed? data.directed[i-1] : false;\n                dataset.addEdges(this.createEdge(type, lastNode!, node, data.fieldValue, true, {}, 1, directed, relation));\n            }\n            lastNode = node;\n        }\n        this.dataset.merge(dataset);\n    }\n\n    /**\n     * Returns the visibility of a structural edge, depending on the type.display property\n     * @param type The structural edge type\n     * @param node The metadata node of this edge\n     * @param recordNode The record node of this edge\n     * @param index The index of the metadata in the list of metadata of the record\n     */\n    protected isEdgeVisible(type: StructuralEdgeType, node: Node, recordNode: RecordNode, index: number): boolean {\n        if(type.display === \"all\") {\n            return true;\n        }\n        else if(type.display === \"existingnodes\") {\n            return false;\n        }\n        else if(type.display === \"paginate\") {\n            return index  node.type === this.nodeType)\n            .forEach(node => {\n                dataset.getAdjacentEdges(node.id)\n                    .filter(edge => (edge.type as StructuralEdgeType).display === 'existingnodes')\n                    .forEach(edge => {\n                        const neighbor = dataset.getNode(node.id === edge.to ? edge.from : edge.to);\n                        if(!neighbor) {\n                            throw new Error(`Missing node from edge ${edge.id}`);\n                        }\n                        const neighborsneighbors = dataset.getAdjacentEdges(neighbor.id);\n                        if(neighborsneighbors.length > 1) {\n                            neighbor.visible = true;\n                            edge.visible = true;\n                        }\n                    });\n            });\n    }\n\n    /**\n     * Adjust visibility of nodes and edges, for structural edges with\n     * type.trigger = onclick. These nodes will only be shown once their\n     * record node is clicked on.\n     * @param node A node that was clicked\n     */\n    override onNodeClicked(node?: Node) {\n        if(this.active && node && node.type === this.nodeType) { // Note: we cannot test the provider property, since this node might have been merged with one from a different provider. However the node type should be a unique instance\n            let update = false;\n            this.dataset.getAdjacentEdges(node.id)\n                .filter(edge => edge.type['trigger'] === 'onclick')\n                .forEach(edge => {\n                    const neighbor = this.dataset.getNode(node.id === edge.to ? edge.from : edge.to);\n                    if(!neighbor) {\n                        throw new Error(`Missing node from edge ${edge.id}`);\n                    }\n                    if(!neighbor.visible || !edge.visible) {\n                        edge.visible = true;\n                        neighbor.visible = true;\n                        update = true;\n                    }\n                    // TODO \"propagate\" visibility (ie. if 2 nodes are visible but an edge in between is invisible, make it visible)\n                });\n            if(update) {\n                this.provider.next(this.dataset);\n            }\n        }\n    }\n\n    override getProviderActions(): Action[] {\n        return super.getProviderActions();\n    }\n\n    /**\n     * Creates actions for expanding and/or collapsing a record node that was clicked.\n     * expanding and collapsing will act on the visibility of the structural edges\n     * attached to this node.\n     * Both actions might be displayed at the same time, if the node is in an intermediate\n     * state.\n     * @param node \n     */\n    override getNodeActions(node: Node): Action[] {\n        const actions = super.getNodeActions(node);\n        \n        // Actions for exanding / collapsing a record node\n        if(this.active && node.type === this.nodeType && this.edgeTypes.length > 0) {\n            let hasExpandedEdge = false;\n            let hasCollapsedEdge = false;\n            this.dataset.getAdjacentEdges(node.id).forEach(e => {\n                hasCollapsedEdge = hasCollapsedEdge || !e.visible;\n                hasExpandedEdge = hasExpandedEdge || e.visible;\n            });\n\n            if(hasCollapsedEdge) {\n                actions.push(new Action({\n                    icon: \"fas fa-expand-arrows-alt\",\n                    title: \"msg#network.actions.expandMeta\",\n                    action: () => {\n                        let update = false;\n                        this.dataset.getAdjacentEdges(node.id)\n                            .forEach(edge => {\n                                const neighbor = this.dataset.getNode(node.id === edge.to ? edge.from : edge.to);\n                                if(!neighbor) {\n                                    throw new Error(`Missing node from edge ${edge.id}`);\n                                }\n                                if(!neighbor.visible || !edge.visible) {\n                                    edge.visible = true;\n                                    neighbor.visible = true;\n                                    update = true;\n                                }\n                                // TODO \"propagate\" visibility (ie. if 2 nodes are visible but an edge in between is invisible, make it visible)\n                            });\n                        if(update) {\n                            this.provider.next(this.dataset);\n                        }\n                    }\n                }));\n            }\n            \n            if(hasExpandedEdge) {\n                actions.push(new Action({\n                    icon: \"fas fa-compress-arrows-alt\",\n                    title: \"msg#network.actions.collapseMeta\",\n                    action: () => {\n                        let update = false;\n                        this.dataset.getAdjacentEdges(node.id)\n                            .forEach(edge => {\n                                const neighbor = this.dataset.getNode(node.id === edge.to ? edge.from : edge.to);\n                                if(!neighbor) {\n                                    throw new Error(`Missing node from edge ${edge.id}`);\n                                }\n                                if((neighbor.visible || edge.visible) && !(neighbor as RecordNode).record) { // Prevent collapsing links between 2 record nodes (alternatively, we could count the number of neighbors of the neighbors, and close only the isoltated ones)\n                                    edge.visible = false;\n                                    neighbor.visible = false;\n                                    update = true;\n                                }\n                            });\n                        if(update) {\n                            this.provider.next(this.dataset);\n                        }\n                    }\n                }));\n            }\n        }\n        return actions;\n    }\n\n}\n    \n    \n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RecordsProvider.html":{"url":"classes/RecordsProvider.html","title":"class - RecordsProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RecordsProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            network/providers/records-provider.ts\n        \n\n\n            \n                Description\n            \n            \n                A network provider generating nodes from records.\nAdditionally, the provider can generate the \"structural edges\" of that\nnode. Structural edges are edges between a record and the fields of\nthat record (eg. the wikipedia page of Microsoft is a record that probably\ncontains the fields \"Microsoft\" and \"Bill Gates\").\n\n            \n\n            \n                Extends\n            \n            \n                        BaseProvider\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    \n                                name\n                            \n                            \n                                    Public\n                                    Readonly\n                                activateAction\n                            \n                            \n                                    Public\n                                active\n                            \n                            \n                                    Public\n                                context\n                            \n                            \n                                    Public\n                                dataset\n                            \n                            \n                                    Public\n                                    Readonly\n                                EDGESEPARATOR\n                            \n                            \n                                    Public\n                                    Readonly\n                                resetAction\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                getData\n                            \n                            \n                                    \n                                getNodeActions\n                            \n                            \n                                    \n                                getProviderActions\n                            \n                            \n                                    \n                                onDatasetsMerged\n                            \n                            \n                                    \n                                onNodeClicked\n                            \n                            \n                                getEdgeActions\n                            \n                            \n                                getProvider\n                            \n                            \n                                onDestroy\n                            \n                            \n                                onEdgeClicked\n                            \n                            \n                                onNodesInserted\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(name: string, nodeType: NodeType, edgeTypes: StructuralEdgeType[], records: Record[], hideRecordNode)\n                    \n                \n                        \n                            \n                                Defined in network/providers/records-provider.ts:74\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        name\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        nodeType\n                                                  \n                                                        \n                                                                        NodeType\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        edgeTypes\n                                                  \n                                                        \n                                                                    StructuralEdgeType[]\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        records\n                                                  \n                                                        \n                                                                    Record[]\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        hideRecordNode\n                                                  \n                                                        \n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : \"Documents\"\n                    \n                \n                        \n                            \n                                Inherited from         BaseProvider\n\n                            \n                        \n                    \n                        \n                                Defined in         BaseProvider:77\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        activateAction\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Action\n\n                    \n                \n                        \n                            \n                                Inherited from         BaseProvider\n\n                            \n                        \n                    \n                        \n                                Defined in         BaseProvider:21\n\n                        \n                    \n\n            \n                \n                    Action to turn the provider on or off\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        active\n                        \n                    \n                \n            \n                \n                    \n                        Default value : true\n                    \n                \n                        \n                            \n                                Inherited from         BaseProvider\n\n                            \n                        \n                    \n                        \n                                Defined in         BaseProvider:16\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        context\n                        \n                    \n                \n            \n                \n                    \n                        Type :         NetworkContext\n\n                    \n                \n                        \n                            \n                                Inherited from         BaseProvider\n\n                            \n                        \n                    \n                        \n                                Defined in         BaseProvider:25\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        dataset\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new NetworkDataset()\n                    \n                \n                        \n                            \n                                Inherited from         BaseProvider\n\n                            \n                        \n                    \n                        \n                                Defined in         BaseProvider:15\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        EDGESEPARATOR\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : \"~~~EDGE~~~\"\n                    \n                \n                        \n                            \n                                Inherited from         BaseProvider\n\n                            \n                        \n                    \n                        \n                                Defined in         BaseProvider:18\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        resetAction\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Action\n\n                    \n                \n                        \n                            \n                                Inherited from         BaseProvider\n\n                            \n                        \n                    \n                        \n                                Defined in         BaseProvider:23\n\n                        \n                    \n\n            \n                \n                    Action to reset the provider\n\n                \n            \n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        getData\n                        \n                    \n                \n            \n            \n                \n                    \n                    getData(context: NetworkContext)\n                \n            \n\n\n            \n                \n                    Inherited from         BaseProvider\n\n                \n            \n            \n                \n                        Defined in         BaseProvider:265\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                                NetworkContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        getNodeActions\n                        \n                    \n                \n            \n            \n                \n                    \n                    getNodeActions(node: Node)\n                \n            \n\n\n            \n                \n                    Inherited from         BaseProvider\n\n                \n            \n            \n                \n                        Defined in         BaseProvider:340\n\n                \n            \n\n\n            \n                \n                    Creates actions for expanding and/or collapsing a record node that was clicked.\nexpanding and collapsing will act on the visibility of the structural edges\nattached to this node.\nBoth actions might be displayed at the same time, if the node is in an intermediate\nstate.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    node\n                                    \n                                                Node\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Action[]\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        getProviderActions\n                        \n                    \n                \n            \n            \n                \n                    \n                    getProviderActions()\n                \n            \n\n\n            \n                \n                    Inherited from         BaseProvider\n\n                \n            \n            \n                \n                        Defined in         BaseProvider:328\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     Action[]\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        onDatasetsMerged\n                        \n                    \n                \n            \n            \n                \n                    \n                    onDatasetsMerged(dataset: NetworkDataset)\n                \n            \n\n\n            \n                \n                    Inherited from         BaseProvider\n\n                \n            \n            \n                \n                        Defined in         BaseProvider:278\n\n                \n            \n\n\n            \n                \n                    This function adjusts the visibility of nodes for the visibility\ntype \"existingnode\", so that nodes with only one neighbor (post-merge)\nare collapsed.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    dataset\n                                    \n                                                NetworkDataset\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The dataset resulting of the merge of all the datasets\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        onNodeClicked\n                        \n                    \n                \n            \n            \n                \n                    \n                    onNodeClicked(node?: Node)\n                \n            \n\n\n            \n                \n                    Inherited from         BaseProvider\n\n                \n            \n            \n                \n                        Defined in         BaseProvider:305\n\n                \n            \n\n\n            \n                \n                    Adjust visibility of nodes and edges, for structural edges with\ntype.trigger = onclick. These nodes will only be shown once their\nrecord node is clicked on.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    node\n                                    \n                                                Node\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        A node that was clicked\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getEdgeActions\n                        \n                    \n                \n            \n            \n                \ngetEdgeActions(edge: Edge)\n                \n            \n\n\n            \n                \n                    Inherited from         BaseProvider\n\n                \n            \n            \n                \n                        Defined in         BaseProvider:211\n\n                \n            \n\n\n            \n                \n                    By default the base provider includes an action to filter the search if a clicked\nedge has a \"type.field\" property and a \"fieldValue\" (alternatively, an action\nis created if the 2 adjacent nodes can be filtered, ie they both have a \"field\"\nproperty)\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    edge\n                                    \n                                                Edge\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The clicked edge\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Action[]\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getProvider\n                        \n                    \n                \n            \n            \n                \ngetProvider()\n                \n            \n\n\n            \n                \n                    Inherited from         BaseProvider\n\n                \n            \n            \n                \n                        Defined in         BaseProvider:151\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         Subject\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onDestroy\n                        \n                    \n                \n            \n            \n                \nonDestroy()\n                \n            \n\n\n            \n                \n                    Inherited from         BaseProvider\n\n                \n            \n            \n                \n                        Defined in         BaseProvider:245\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onEdgeClicked\n                        \n                    \n                \n            \n            \n                \nonEdgeClicked(edge: Edge | undefined)\n                \n            \n\n\n            \n                \n                    Inherited from         BaseProvider\n\n                \n            \n            \n                \n                        Defined in         BaseProvider:171\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    edge\n                                    \n                                                Edge | undefined\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onNodesInserted\n                        \n                    \n                \n            \n            \n                \nonNodesInserted(nodes: Node[])\n                \n            \n\n\n            \n                \n                    Inherited from         BaseProvider\n\n                \n            \n            \n                \n                        Defined in         BaseProvider:163\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    nodes\n                                    \n                                                Node[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Utils } from '@sinequa/core/base';\nimport { Record } from '@sinequa/core/web-services';\nimport { Action } from '@sinequa/components/action';\nimport { Node, NetworkDataset, NodeType, EdgeType, NetworkContext } from '../network-models';\nimport { BaseProvider } from './base-provider';\n\n/**\n * Extension of the Node interface, to include the Record object\n * from which the node is generated\n */\nexport interface RecordNode extends Node {\n    record: Record;\n}\n\n\n/**\n * An extension of the EdgeType interface to include properties specific to\n * structural edges (edge between a record and its metadata).\n * \n * About trigger/display: At the moment, the Record provider always adds ALL nodes and edges\n * to the dataset, but potentially with a visibility set to false. Some of the settings are\n * not compatible with each other, and some take precedence over the others:\n * - display=existingnodes takes precedence over other settings, as it is implemented as\n * a post-processing of the dataset (in onDatasetsMerged)\n * - trigger=onclick or manual take precedence over the other settings, as they set the\n * visibility to false by false, until the user performs an action\n * - trigger=oninsert is compatible with the other display settings\n */\nexport interface StructuralEdgeType extends EdgeType {\n    /** Name of the field in the record */\n    field: string;\n    /** count limits the number of values displayed and allows for pagination. Use 0 for unlimited values */\n    count?: number;\n    /** Defines when the edge should be displayed */\n    trigger: StructuralTriggerType;\n    /** showall: display all values from the field / paginate: display all value with pagination / existingnodes: only link to existing nodes / manual: only show if manual action (activated programmatically) */\n    display: StructuralDisplayType;\n    /** A function to parse metadata from a record node in a custom way */\n    parse?: (value: any, record: Record, type: StructuralEdgeType) => CustomData;\n}\n\nexport type StructuralTriggerType = \"oninsert\" | \"onclick\" | \"manual\";\nexport type StructuralDisplayType = \"all\" | \"paginate\" | \"existingnodes\" | ((node: Node, recordNode: RecordNode, index: number) => boolean);\n\n/**\n * Data structure returned by the optional parse() function of a structural edge\n * type. Contains the parsed values of a property that can be turned into one or\n * multiple nodes and edges.\n */\nexport interface CustomData {\n    values: string[]; // eg. LARRY PAGE, GOOGLE\n    displays: string[]; // eg. Larry Page, Google\n    relations?: string[]; // eg. Works At\n    directed?: boolean[]; // eg. true\n    fieldValue?: string; // A value on which to filter the data\n}\n\n/**\n * Tests whether the given edge type is a structural edge type\n * @param et an edge type\n */\nexport function isStructuralEdgeType(et: EdgeType): et is StructuralEdgeType {\n    return !!(et as StructuralEdgeType).field;\n}\n\n\n/**\n * A network provider generating nodes from records.\n * Additionally, the provider can generate the \"structural edges\" of that\n * node. Structural edges are edges between a record and the fields of\n * that record (eg. the wikipedia page of Microsoft is a record that probably\n * contains the fields \"Microsoft\" and \"Bill Gates\").\n */\nexport class RecordsProvider extends BaseProvider {\n\n    constructor(\n        public override name = \"Documents\",\n        protected nodeType: NodeType,\n        protected edgeTypes: StructuralEdgeType[],\n        protected records: Record[],\n        protected hideRecordNode = false\n    ){\n        super(name);\n    }\n\n    /**\n     * Clears the dataset and generates new record nodes\n     * @param records the list of records of this provider\n     */\n    protected updateDataset(records?: Record[]) {\n        this.dataset.clear();\n        if(!this.active || !records || records.length === 0) {\n            return; \n        }\n        this.addRecordNodes(records);\n    }\n    \n    // Record nodes\n\n    /**\n     * Generates the nodes for a list of records, including their structural\n     * edges, and adds them to the dataset.\n     * Returns the list of record nodes.\n     * @param records \n     */\n    protected addRecordNodes(records: Record[]): RecordNode[] {\n        return records.map(record => {\n            let node = this.dataset.getNode(this.getNodeId(this.nodeType, record.id));\n            if(!node) {\n                node = this.createNode(this.nodeType, record.id, record.title, !this.hideRecordNode, {record});\n                this.dataset.addNodes(node);\n                this.edgeTypes.forEach(type => {\n                    this.addStructuralEdges(node as RecordNode, type);\n                });\n            }\n            return node as RecordNode;\n        });\n    }\n\n    \n    // Structural edges\n\n    /**\n     * Generates the metadata nodes and structural edges from the given node,\n     * and merge them into the dataset.\n     * This function will automatically parse the metadata contained in the record,\n     * but it is possible to manage custom types of metadata by providing a\n     * custom parse() function via the structural edge type.\n     * @param node The record node\n     * @param type The edge type for which we want to create edges\n     */\n    protected addStructuralEdges(node: RecordNode, type: StructuralEdgeType) {\n\n        if(type.nodeTypes[0] !== this.nodeType){\n            throw new Error(`Inconsistent node type: '${type.nodeTypes[0].name}' instead of '${this.nodeType.name}'`);\n        }\n        \n        const recorddata = node.record[type.field];\n\n        if(recorddata === undefined){\n            return;\n        }\n\n        // Custom parse for mono or multi valued data\n        if(type.parse) {\n            if(Utils.isArray(recorddata)) {\n                recorddata.forEach((value,i) => { \n                    this.addCustomEdge(node, type, type.parse!(value, node.record, type));\n                });\n            }\n            else {\n                this.addCustomEdge(node, type, type.parse!(recorddata, node.record, type));\n            }\n        }\n        // Default handling for standard Sinequa Metadata\n        else {\n            const data = new NetworkDataset();\n            data.addNodes(node);\n    \n            // sourcestr\n            if(Utils.isString(recorddata)) {\n                this.addStructuralEdge(data, node, type, recorddata, recorddata, 0);\n            }\n            else if(Utils.isArray(recorddata)) {\n                recorddata.forEach((value,i) => {\n                    // sourcecsv\n                    if(Utils.isString(value)) {\n                        this.addStructuralEdge(data, node, type, value, value, i);\n                    }\n                    // entity\n                    else if(value[\"value\"]) {\n                        this.addStructuralEdge(data, node, type, value[\"value\"], value[\"display\"] || value[\"value\"], i);\n                    }\n                });\n            }\n    \n            this.dataset.merge(data);\n        }\n    }\n\n    /**\n     * Add a structural edge to a record node and adds that edge\n     * (and corresponding metadata node) to the given dataset.\n     * @param dataset The target dataset\n     * @param recordNode The record node\n     * @param type The edge type of the structural edge\n     * @param value The \"value\" property of the metadata node\n     * @param display The \"display\" property of the metadata node\n     * @param index The index of the metadata within the record, which may influence its visibility when using display=paginate\n     */\n    protected addStructuralEdge(dataset: NetworkDataset, recordNode: RecordNode, type: StructuralEdgeType, value: string, display: string, index: number) {\n        // Create the metadata node\n        const node = this.createNode(type.nodeTypes[1], value, display, true);\n        // Sets its visibility\n        node.visible = type.trigger === \"oninsert\" && this.isEdgeVisible(type, node, recordNode, index);\n        if(recordNode.id !== node.id){ // Special case of hybrid nodes, where the recordNode might contain itself...!\n            if(!dataset.hasNode(node.id)) { // Duplicate nodes/edges are possible when the same node type is present in multiple fields of a record (eg. \"email\" in msgfrom and msgto)\n                dataset.addNodes(node);\n            }\n            const edge = this.createEdge(type, recordNode, node, value, node.visible, {record: recordNode.record});\n            if(!dataset.hasEdge(edge.id)) {\n                dataset.addEdges(edge);\n            }\n        }\n    }\n\n    /**\n     * Add a custom structural edge to a record node and merges that edge\n     * (and corresponding metadata node) into the global dataset.\n     * @param recordNode The record node\n     * @param type The edge type of the structural edge\n     * @param data A CustomData object containing the properties of the metadata nodes we want to created\n     */\n    protected addCustomEdge(recordNode: RecordNode, type: StructuralEdgeType, data: CustomData) {\n        if(type.nodeTypes.length !== data.values.length + 1) {\n            throw new Error(`Wrong number of values for this custom edge ${type.nodeTypes.length}, ${data.values.length}`);\n        }\n        // Create a dataset only for this data, to avoid duplicate conflicts\n        const dataset = new NetworkDataset();\n        dataset.addNodes(recordNode);\n        // For each value contained in \"data\", create a node, and edges in between them (in addition to the edges between the record and each metadata node)\n        let lastNode: Node;\n        for(let i=0; i 0){\n                const relation = data.relations? data.relations[i-1] : undefined;\n                const directed = data.directed? data.directed[i-1] : false;\n                dataset.addEdges(this.createEdge(type, lastNode!, node, data.fieldValue, true, {}, 1, directed, relation));\n            }\n            lastNode = node;\n        }\n        this.dataset.merge(dataset);\n    }\n\n    /**\n     * Returns the visibility of a structural edge, depending on the type.display property\n     * @param type The structural edge type\n     * @param node The metadata node of this edge\n     * @param recordNode The record node of this edge\n     * @param index The index of the metadata in the list of metadata of the record\n     */\n    protected isEdgeVisible(type: StructuralEdgeType, node: Node, recordNode: RecordNode, index: number): boolean {\n        if(type.display === \"all\") {\n            return true;\n        }\n        else if(type.display === \"existingnodes\") {\n            return false;\n        }\n        else if(type.display === \"paginate\") {\n            return index  node.type === this.nodeType)\n            .forEach(node => {\n                dataset.getAdjacentEdges(node.id)\n                    .filter(edge => (edge.type as StructuralEdgeType).display === 'existingnodes')\n                    .forEach(edge => {\n                        const neighbor = dataset.getNode(node.id === edge.to ? edge.from : edge.to);\n                        if(!neighbor) {\n                            throw new Error(`Missing node from edge ${edge.id}`);\n                        }\n                        const neighborsneighbors = dataset.getAdjacentEdges(neighbor.id);\n                        if(neighborsneighbors.length > 1) {\n                            neighbor.visible = true;\n                            edge.visible = true;\n                        }\n                    });\n            });\n    }\n\n    /**\n     * Adjust visibility of nodes and edges, for structural edges with\n     * type.trigger = onclick. These nodes will only be shown once their\n     * record node is clicked on.\n     * @param node A node that was clicked\n     */\n    override onNodeClicked(node?: Node) {\n        if(this.active && node && node.type === this.nodeType) { // Note: we cannot test the provider property, since this node might have been merged with one from a different provider. However the node type should be a unique instance\n            let update = false;\n            this.dataset.getAdjacentEdges(node.id)\n                .filter(edge => edge.type['trigger'] === 'onclick')\n                .forEach(edge => {\n                    const neighbor = this.dataset.getNode(node.id === edge.to ? edge.from : edge.to);\n                    if(!neighbor) {\n                        throw new Error(`Missing node from edge ${edge.id}`);\n                    }\n                    if(!neighbor.visible || !edge.visible) {\n                        edge.visible = true;\n                        neighbor.visible = true;\n                        update = true;\n                    }\n                    // TODO \"propagate\" visibility (ie. if 2 nodes are visible but an edge in between is invisible, make it visible)\n                });\n            if(update) {\n                this.provider.next(this.dataset);\n            }\n        }\n    }\n\n    override getProviderActions(): Action[] {\n        return super.getProviderActions();\n    }\n\n    /**\n     * Creates actions for expanding and/or collapsing a record node that was clicked.\n     * expanding and collapsing will act on the visibility of the structural edges\n     * attached to this node.\n     * Both actions might be displayed at the same time, if the node is in an intermediate\n     * state.\n     * @param node \n     */\n    override getNodeActions(node: Node): Action[] {\n        const actions = super.getNodeActions(node);\n        \n        // Actions for exanding / collapsing a record node\n        if(this.active && node.type === this.nodeType && this.edgeTypes.length > 0) {\n            let hasExpandedEdge = false;\n            let hasCollapsedEdge = false;\n            this.dataset.getAdjacentEdges(node.id).forEach(e => {\n                hasCollapsedEdge = hasCollapsedEdge || !e.visible;\n                hasExpandedEdge = hasExpandedEdge || e.visible;\n            });\n\n            if(hasCollapsedEdge) {\n                actions.push(new Action({\n                    icon: \"fas fa-expand-arrows-alt\",\n                    title: \"msg#network.actions.expandMeta\",\n                    action: () => {\n                        let update = false;\n                        this.dataset.getAdjacentEdges(node.id)\n                            .forEach(edge => {\n                                const neighbor = this.dataset.getNode(node.id === edge.to ? edge.from : edge.to);\n                                if(!neighbor) {\n                                    throw new Error(`Missing node from edge ${edge.id}`);\n                                }\n                                if(!neighbor.visible || !edge.visible) {\n                                    edge.visible = true;\n                                    neighbor.visible = true;\n                                    update = true;\n                                }\n                                // TODO \"propagate\" visibility (ie. if 2 nodes are visible but an edge in between is invisible, make it visible)\n                            });\n                        if(update) {\n                            this.provider.next(this.dataset);\n                        }\n                    }\n                }));\n            }\n            \n            if(hasExpandedEdge) {\n                actions.push(new Action({\n                    icon: \"fas fa-compress-arrows-alt\",\n                    title: \"msg#network.actions.collapseMeta\",\n                    action: () => {\n                        let update = false;\n                        this.dataset.getAdjacentEdges(node.id)\n                            .forEach(edge => {\n                                const neighbor = this.dataset.getNode(node.id === edge.to ? edge.from : edge.to);\n                                if(!neighbor) {\n                                    throw new Error(`Missing node from edge ${edge.id}`);\n                                }\n                                if((neighbor.visible || edge.visible) && !(neighbor as RecordNode).record) { // Prevent collapsing links between 2 record nodes (alternatively, we could count the number of neighbors of the neighbors, and close only the isoltated ones)\n                                    edge.visible = false;\n                                    neighbor.visible = false;\n                                    update = true;\n                                }\n                            });\n                        if(update) {\n                            this.provider.next(this.dataset);\n                        }\n                    }\n                }));\n            }\n        }\n        return actions;\n    }\n\n}\n    \n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/ResultTimeline.html":{"url":"components/ResultTimeline.html","title":"component - ResultTimeline","body":"\n                   \n\n\n\n\n\n  Components\n  \n  ResultTimeline\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    vis-timeline/result-timeline/result-timeline.ts\n\n\n\n\n\n    \n        Implements\n    \n    \n                    OnChanges\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                sq-result-timeline\n            \n\n\n\n\n            \n                templateUrl\n                ./result-timeline.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                initDone\n                            \n                            \n                                items\n                            \n                            \n                                    Public\n                                visTimelineService\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                ngOnChanges\n                            \n                            \n                                timelineInitialized\n                            \n                            \n                                updateTimeline\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                dates\n                            \n                            \n                                events\n                            \n                            \n                                max_dates\n                            \n                            \n                                max_year\n                            \n                            \n                                min_dates\n                            \n                            \n                                min_year\n                            \n                            \n                                name\n                            \n                            \n                                options\n                            \n                            \n                                record\n                            \n                        \n                    \n                \n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(visTimelineService: VisTimelineService)\n                    \n                \n                        \n                            \n                                Defined in vis-timeline/result-timeline/result-timeline.ts:32\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        visTimelineService\n                                                  \n                                                        \n                                                                    VisTimelineService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        dates\n                    \n                \n                \n                    \n                        Type :     EntityItem[]\n\n                    \n                \n                        \n                            \n                                    Defined in vis-timeline/result-timeline/result-timeline.ts:23\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        events\n                    \n                \n                \n                    \n                        Type :     EntityItem[]\n\n                    \n                \n                        \n                            \n                                    Defined in vis-timeline/result-timeline/result-timeline.ts:24\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        max_dates\n                    \n                \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 100\n                    \n                \n                        \n                            \n                                    Defined in vis-timeline/result-timeline/result-timeline.ts:28\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        max_year\n                    \n                \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 10000\n                    \n                \n                        \n                            \n                                    Defined in vis-timeline/result-timeline/result-timeline.ts:26\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        min_dates\n                    \n                \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 1\n                    \n                \n                        \n                            \n                                    Defined in vis-timeline/result-timeline/result-timeline.ts:27\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        min_year\n                    \n                \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 0\n                    \n                \n                        \n                            \n                                    Defined in vis-timeline/result-timeline/result-timeline.ts:25\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        name\n                    \n                \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : \"vis-timeline\"\n                    \n                \n                        \n                            \n                                    Defined in vis-timeline/result-timeline/result-timeline.ts:21\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        options\n                    \n                \n                \n                    \n                        Type :     TimelineOptions\n\n                    \n                \n                \n                    \n                        Default value : defaultOptions\n                    \n                \n                        \n                            \n                                    Defined in vis-timeline/result-timeline/result-timeline.ts:29\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        record\n                    \n                \n                \n                    \n                        Type :     Record\n\n                    \n                \n                        \n                            \n                                    Defined in vis-timeline/result-timeline/result-timeline.ts:22\n                            \n                        \n            \n        \n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnChanges\n                        \n                    \n                \n            \n            \n                \nngOnChanges(changes: SimpleChanges)\n                \n            \n\n\n            \n                \n                    Defined in vis-timeline/result-timeline/result-timeline.ts:37\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    changes\n                                    \n                                                SimpleChanges\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        timelineInitialized\n                        \n                    \n                \n            \n            \n                \ntimelineInitialized()\n                \n            \n\n\n            \n                \n                    Defined in vis-timeline/result-timeline/result-timeline.ts:122\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        updateTimeline\n                        \n                    \n                \n            \n            \n                \nupdateTimeline()\n                \n            \n\n\n            \n                \n                    Defined in vis-timeline/result-timeline/result-timeline.ts:43\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        initDone\n                        \n                    \n                \n            \n                \n                    \n                        Default value : false\n                    \n                \n                    \n                        \n                                Defined in vis-timeline/result-timeline/result-timeline.ts:31\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        items\n                        \n                    \n                \n            \n                \n                    \n                        Type :     DataItem[]\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                    \n                        \n                                Defined in vis-timeline/result-timeline/result-timeline.ts:32\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        visTimelineService\n                        \n                    \n                \n            \n                \n                    \n                        Type :     VisTimelineService\n\n                    \n                \n                    \n                        \n                                Defined in vis-timeline/result-timeline/result-timeline.ts:34\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n    \n        import {Component, Input, OnChanges, SimpleChanges} from \"@angular/core\";\nimport {Record, EntityItem} from \"@sinequa/core/web-services\";\nimport {TimelineOptions, DataItem, VisTimelineService} from \"ngx-vis\";\n\nimport moment from \"moment\";\n\nexport const defaultOptions : TimelineOptions = {\n    minHeight : '150px',\n    maxHeight : '350px',\n    margin: {\n        axis: 5,\n        item: 5\n    }\n};\n\n@Component({\n    selector: \"sq-result-timeline\",\n    templateUrl: \"./result-timeline.html\"\n})\nexport class ResultTimeline implements OnChanges {\n    @Input() name = \"vis-timeline\";\n    @Input() record: Record;\n    @Input() dates: EntityItem[];\n    @Input() events: EntityItem[];\n    @Input() min_year: number = 0;\n    @Input() max_year: number = 10000;\n    @Input() min_dates: number = 1;\n    @Input() max_dates: number = 100;\n    @Input() options: TimelineOptions = defaultOptions;\n\n    initDone = false;\n    items : DataItem[] = [];\n\n    constructor(public visTimelineService: VisTimelineService){\n    }\n\n    ngOnChanges(changes:SimpleChanges) {\n        if(!!changes['record'] || !!changes['dates'] || !!changes['events']){\n            this.updateTimeline();\n        }\n    }\n\n    updateTimeline(){\n\n        this.items.splice(0);\n\n        const dates = this.dates || [];\n        const events = this.events || [];\n\n        const all_ids: string[] = [];\n        const all_dates: string[] = [];\n\n        events.forEach(event => {\n            const data_date = event.display;\n            const cooc = data_date.substring(1,data_date.length-1).split(\")#(\");\n            const date = new Date(cooc[1]);\n            //console.log(\"cooc1:\",data_date[i+2]);\n            //const pos = event.locations.split(\",\")[0];\n            //console.log(cooc);\n            const year = date.getFullYear();\n            //console.log(year);\n            //console.log(regdate.test(date) );\n            //console.log( year  1950);\n            const id = this.record.id + \"#\" + data_date;\n            if(year  this.min_year && all_ids.indexOf(id)===-1){\n                this.items.push({id: id, content: cooc[0], start: date});\n                all_dates.push(cooc[1]);\n                all_ids.push(id);\n            }\n        });\n\n        dates.forEach(dateobj => {\n            const date: Date = moment(dateobj.display).toDate();\n            //console.log(\"date:\",data_date[i+1]);\n            //const pos = dateobj.locations.split(\",\")[0];\n            const year = date.getFullYear();\n            const id = this.record.id + \"#\" + dateobj.display;\n            if(year  this.min_year && all_dates.indexOf(dateobj.display)===-1 && all_ids.indexOf(id)===-1){\n                this.items.push({id: id, content: moment(date).format('ll'), start: date});\n                all_ids.push(id);\n            }\n        });\n\n        if(this.items.length >= this.min_dates){\n\n            if(this.items.length> this.max_dates )\n                this.items.splice(0, this.max_dates);\n\n            //console.log(data);\n\n            //try{\n            //    this.timeline.removeCustomTime(\"date-modified\");\n            //}catch{\n                // No date-modified\n            //}\n\n            //if(Utils.isString(this.record.modified) && this.record.modified.length>=10){\n            //    this.timeline.addCustomTime(this.record.modified.substring(0,10), \"date-modified\");\n            //}\n\n            /*this.timeline.on('select', properties => {\n                //console.log('selected items: ' + properties.items);\n                //console.log('event: ', properties.event);\n                //console.log(properties);\n                if(properties.items.length>0){\n                    //var id = properties.items[0].split(\"#\");\n                    console.log(this.items.get(properties.items[0]));\n                    //var date = items._data[properties.items[0]].start;\n                    //var url = \"search?action=select&resultid=\"+RESULTID+\"&item=%22Tag%3B\"+settings.date_column+\"%3B\"+date+\"%3B\"+date+\"%22\"\n                    //popup_extract(id[0], parseInt(id[1]), properties.event.target,url);\n                }\n            });*/\n\n        }else{\n            console.log(\"no timeline for this doc...\");\n        }\n        if(this.initDone) {\n            this.visTimelineService.setItems(this.name, this.items);\n        }\n    }\n\n    timelineInitialized() {\n        this.initDone = true;\n    }\n}\n\n    \n\n    \n        \n\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = ''\n    var COMPONENTS = [{'name': 'AgGridViewComponent', 'selector': 'sq-ag-grid-view'},{'name': 'BsEdgeInfoCard', 'selector': 'sq-edge-info-card'},{'name': 'BsFacetDate', 'selector': 'sq-facet-date'},{'name': 'BsFacetHeatmapComponent', 'selector': 'sq-facet-heatmap'},{'name': 'BsFacetTimelineComponent', 'selector': 'sq-facet-timeline'},{'name': 'BsHeatmapComponent', 'selector': 'sq-heatmap'},{'name': 'BsNodeInfoCard', 'selector': 'sq-node-info-card'},{'name': 'BsResultsHeatmapView', 'selector': 'sq-results-heatmap-view'},{'name': 'BsTimelineComponent', 'selector': 'sq-timeline'},{'name': 'BsTooltipComponent', 'selector': 'sq-tooltip'},{'name': 'DataModalComponent', 'selector': 'sq-data-modal'},{'name': 'FacetNgxChart', 'selector': 'sq-facet-ngx-chart'},{'name': 'FacetWrapperComponent', 'selector': 'facet-wrapper'},{'name': 'FusionChart', 'selector': 'sq-fusion-chart'},{'name': 'MapComponent', 'selector': 'sq-googlemaps'},{'name': 'MoneyCloudComponent', 'selector': 'sq-money-cloud'},{'name': 'MoneyTimelineComponent', 'selector': 'sq-money-timeline'},{'name': 'NetworkComponent', 'selector': 'sq-network'},{'name': 'NgxChart', 'selector': 'sq-ngx-chart'},{'name': 'ResultTimeline', 'selector': 'sq-result-timeline'},{'name': 'TimelineLegendComponent', 'selector': 'sq-timeline-legend'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'ResultTimeline'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SelectedRecordsProvider.html":{"url":"classes/SelectedRecordsProvider.html","title":"class - SelectedRecordsProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SelectedRecordsProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            network/providers/selected-records-provider.ts\n        \n\n\n            \n                Description\n            \n            \n                An extension of the RecordsProvider, where records are not provided\ndirectly, but instead are taken from the SelectionService and refreshed\nevery time a node is selected or unselected.\n⚠️ Note that the SelectionService must be configured to store records instead\nof just records ids!\nSee http://localhost:4000/sba-angular/modules/components/selection.html#selection-service\n\n            \n\n            \n                Extends\n            \n            \n                        RecordsProvider\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    \n                                name\n                            \n                            \n                                selectionSubscription\n                            \n                            \n                                    Public\n                                    Readonly\n                                activateAction\n                            \n                            \n                                    Public\n                                active\n                            \n                            \n                                    Public\n                                context\n                            \n                            \n                                    Public\n                                dataset\n                            \n                            \n                                    Public\n                                    Readonly\n                                EDGESEPARATOR\n                            \n                            \n                                    Public\n                                    Readonly\n                                resetAction\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                getData\n                            \n                            \n                                    \n                                onDestroy\n                            \n                            \n                                    \n                                getNodeActions\n                            \n                            \n                                    \n                                getProviderActions\n                            \n                            \n                                    \n                                onDatasetsMerged\n                            \n                            \n                                    \n                                onNodeClicked\n                            \n                            \n                                getEdgeActions\n                            \n                            \n                                getProvider\n                            \n                            \n                                onEdgeClicked\n                            \n                            \n                                onNodesInserted\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(name: string, nodeType: NodeType, edgeTypes: StructuralEdgeType[], selectionService: SelectionService, hideRecordNode)\n                    \n                \n                        \n                            \n                                Defined in network/providers/selected-records-provider.ts:19\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        name\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        nodeType\n                                                  \n                                                        \n                                                                        NodeType\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        edgeTypes\n                                                  \n                                                        \n                                                                    StructuralEdgeType[]\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        selectionService\n                                                  \n                                                        \n                                                                    SelectionService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        hideRecordNode\n                                                  \n                                                        \n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : \"Selected documents\"\n                    \n                \n                        \n                            \n                                Inherited from         BaseProvider\n\n                            \n                        \n                    \n                        \n                                Defined in         BaseProvider:22\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        selectionSubscription\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Subscription\n\n                    \n                \n                    \n                        \n                                Defined in network/providers/selected-records-provider.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        activateAction\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Action\n\n                    \n                \n                        \n                            \n                                Inherited from         BaseProvider\n\n                            \n                        \n                    \n                        \n                                Defined in         BaseProvider:21\n\n                        \n                    \n\n            \n                \n                    Action to turn the provider on or off\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        active\n                        \n                    \n                \n            \n                \n                    \n                        Default value : true\n                    \n                \n                        \n                            \n                                Inherited from         BaseProvider\n\n                            \n                        \n                    \n                        \n                                Defined in         BaseProvider:16\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        context\n                        \n                    \n                \n            \n                \n                    \n                        Type :         NetworkContext\n\n                    \n                \n                        \n                            \n                                Inherited from         BaseProvider\n\n                            \n                        \n                    \n                        \n                                Defined in         BaseProvider:25\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        dataset\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new NetworkDataset()\n                    \n                \n                        \n                            \n                                Inherited from         BaseProvider\n\n                            \n                        \n                    \n                        \n                                Defined in         BaseProvider:15\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        EDGESEPARATOR\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : \"~~~EDGE~~~\"\n                    \n                \n                        \n                            \n                                Inherited from         BaseProvider\n\n                            \n                        \n                    \n                        \n                                Defined in         BaseProvider:18\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        resetAction\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Action\n\n                    \n                \n                        \n                            \n                                Inherited from         BaseProvider\n\n                            \n                        \n                    \n                        \n                                Defined in         BaseProvider:23\n\n                        \n                    \n\n            \n                \n                    Action to reset the provider\n\n                \n            \n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        getData\n                        \n                    \n                \n            \n            \n                \n                    \n                    getData(context: NetworkContext)\n                \n            \n\n\n            \n                \n                    Inherited from         BaseProvider\n\n                \n            \n            \n                \n                        Defined in         BaseProvider:42\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                                NetworkContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        onDestroy\n                        \n                    \n                \n            \n            \n                \n                    \n                    onDestroy()\n                \n            \n\n\n            \n                \n                    Inherited from         BaseProvider\n\n                \n            \n            \n                \n                        Defined in         BaseProvider:48\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        getNodeActions\n                        \n                    \n                \n            \n            \n                \n                    \n                    getNodeActions(node: Node)\n                \n            \n\n\n            \n                \n                    Inherited from         BaseProvider\n\n                \n            \n            \n                \n                        Defined in         BaseProvider:340\n\n                \n            \n\n\n            \n                \n                    Creates actions for expanding and/or collapsing a record node that was clicked.\nexpanding and collapsing will act on the visibility of the structural edges\nattached to this node.\nBoth actions might be displayed at the same time, if the node is in an intermediate\nstate.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    node\n                                    \n                                                Node\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Action[]\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        getProviderActions\n                        \n                    \n                \n            \n            \n                \n                    \n                    getProviderActions()\n                \n            \n\n\n            \n                \n                    Inherited from         BaseProvider\n\n                \n            \n            \n                \n                        Defined in         BaseProvider:328\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     Action[]\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        onDatasetsMerged\n                        \n                    \n                \n            \n            \n                \n                    \n                    onDatasetsMerged(dataset: NetworkDataset)\n                \n            \n\n\n            \n                \n                    Inherited from         BaseProvider\n\n                \n            \n            \n                \n                        Defined in         BaseProvider:278\n\n                \n            \n\n\n            \n                \n                    This function adjusts the visibility of nodes for the visibility\ntype \"existingnode\", so that nodes with only one neighbor (post-merge)\nare collapsed.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    dataset\n                                    \n                                                NetworkDataset\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The dataset resulting of the merge of all the datasets\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        onNodeClicked\n                        \n                    \n                \n            \n            \n                \n                    \n                    onNodeClicked(node?: Node)\n                \n            \n\n\n            \n                \n                    Inherited from         BaseProvider\n\n                \n            \n            \n                \n                        Defined in         BaseProvider:305\n\n                \n            \n\n\n            \n                \n                    Adjust visibility of nodes and edges, for structural edges with\ntype.trigger = onclick. These nodes will only be shown once their\nrecord node is clicked on.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    node\n                                    \n                                                Node\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        A node that was clicked\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getEdgeActions\n                        \n                    \n                \n            \n            \n                \ngetEdgeActions(edge: Edge)\n                \n            \n\n\n            \n                \n                    Inherited from         BaseProvider\n\n                \n            \n            \n                \n                        Defined in         BaseProvider:211\n\n                \n            \n\n\n            \n                \n                    By default the base provider includes an action to filter the search if a clicked\nedge has a \"type.field\" property and a \"fieldValue\" (alternatively, an action\nis created if the 2 adjacent nodes can be filtered, ie they both have a \"field\"\nproperty)\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    edge\n                                    \n                                                Edge\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The clicked edge\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Action[]\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getProvider\n                        \n                    \n                \n            \n            \n                \ngetProvider()\n                \n            \n\n\n            \n                \n                    Inherited from         BaseProvider\n\n                \n            \n            \n                \n                        Defined in         BaseProvider:151\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         Subject\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onEdgeClicked\n                        \n                    \n                \n            \n            \n                \nonEdgeClicked(edge: Edge | undefined)\n                \n            \n\n\n            \n                \n                    Inherited from         BaseProvider\n\n                \n            \n            \n                \n                        Defined in         BaseProvider:171\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    edge\n                                    \n                                                Edge | undefined\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onNodesInserted\n                        \n                    \n                \n            \n            \n                \nonNodesInserted(nodes: Node[])\n                \n            \n\n\n            \n                \n                    Inherited from         BaseProvider\n\n                \n            \n            \n                \n                        Defined in         BaseProvider:163\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    nodes\n                                    \n                                                Node[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Subscription } from 'rxjs';\nimport { Record } from '@sinequa/core/web-services';\nimport { SelectionService, SelectionEventType } from '@sinequa/components/selection';\nimport { NodeType, NetworkContext } from '../network-models';\nimport { RecordsProvider, StructuralEdgeType } from './records-provider';\n\n\n/**\n * An extension of the RecordsProvider, where records are not provided\n * directly, but instead are taken from the SelectionService and refreshed\n * every time a node is selected or unselected.\n * ⚠️ Note that the SelectionService must be configured to store records instead\n * of just records ids!\n * See http://localhost:4000/sba-angular/modules/components/selection.html#selection-service\n */\nexport class SelectedRecordsProvider extends RecordsProvider {\n\n    // Subscription to the SelectionService, allowing to refresh the list of records\n    selectionSubscription: Subscription;\n\n    constructor(\n        public override name = \"Selected documents\",\n        protected override nodeType: NodeType,\n        protected override edgeTypes: StructuralEdgeType[],\n        protected selectionService: SelectionService,\n        protected override hideRecordNode = false\n    ){\n        super(name, nodeType, edgeTypes, selectionService.getSelectedItems() as Record[], hideRecordNode);\n\n        this.selectionSubscription = selectionService.events.subscribe(event => {\n            if(event.type === SelectionEventType.SELECT || SelectionEventType.UNSELECT) {\n                const records = selectionService.getSelectedItems() as Record[];\n                this.updateDataset(records);\n                this.provider.next(this.dataset);\n            }\n        });\n    }\n\n\n    // NetworkProvider interface\n\n    override getData(context: NetworkContext) {\n        this.context = context;\n        this.updateDataset(this.selectionService.getSelectedItems() as Record[]);\n        this.provider.next(this.dataset);\n    }\n    \n    override onDestroy() {\n        this.selectionSubscription?.unsubscribe();\n    }\n\n}\n    \n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/StructuralEdgeType.html":{"url":"interfaces/StructuralEdgeType.html","title":"interface - StructuralEdgeType","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  StructuralEdgeType\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            network/providers/records-provider.ts\n        \n\n\n            \n                Description\n            \n            \n                An extension of the EdgeType interface to include properties specific to\nstructural edges (edge between a record and its metadata).\nAbout trigger/display: At the moment, the Record provider always adds ALL nodes and edges\nto the dataset, but potentially with a visibility set to false. Some of the settings are\nnot compatible with each other, and some take precedence over the others:\n\ndisplay=existingnodes takes precedence over other settings, as it is implemented as\na post-processing of the dataset (in onDatasetsMerged)\ntrigger=onclick or manual take precedence over the other settings, as they set the\nvisibility to false by false, until the user performs an action\ntrigger=oninsert is compatible with the other display settings\n\n\n            \n\n            \n                Extends\n            \n            \n                        EdgeType\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            count\n                                        \n                                \n                                \n                                        \n                                            display\n                                        \n                                \n                                \n                                        \n                                            field\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            parse\n                                        \n                                \n                                \n                                        \n                                            trigger\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        count\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        count:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    count limits the number of values displayed and allows for pagination. Use 0 for unlimited values\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        display\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        display:         StructuralDisplayType\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         StructuralDisplayType\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    showall: display all values from the field / paginate: display all value with pagination / existingnodes: only link to existing nodes / manual: only show if manual action (activated programmatically)\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        field\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        field:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Name of the field in the record\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        parse\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        parse:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    A function to parse metadata from a record node in a custom way\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        trigger\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        trigger:         StructuralTriggerType\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         StructuralTriggerType\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Defines when the edge should be displayed\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { Utils } from '@sinequa/core/base';\nimport { Record } from '@sinequa/core/web-services';\nimport { Action } from '@sinequa/components/action';\nimport { Node, NetworkDataset, NodeType, EdgeType, NetworkContext } from '../network-models';\nimport { BaseProvider } from './base-provider';\n\n/**\n * Extension of the Node interface, to include the Record object\n * from which the node is generated\n */\nexport interface RecordNode extends Node {\n    record: Record;\n}\n\n\n/**\n * An extension of the EdgeType interface to include properties specific to\n * structural edges (edge between a record and its metadata).\n * \n * About trigger/display: At the moment, the Record provider always adds ALL nodes and edges\n * to the dataset, but potentially with a visibility set to false. Some of the settings are\n * not compatible with each other, and some take precedence over the others:\n * - display=existingnodes takes precedence over other settings, as it is implemented as\n * a post-processing of the dataset (in onDatasetsMerged)\n * - trigger=onclick or manual take precedence over the other settings, as they set the\n * visibility to false by false, until the user performs an action\n * - trigger=oninsert is compatible with the other display settings\n */\nexport interface StructuralEdgeType extends EdgeType {\n    /** Name of the field in the record */\n    field: string;\n    /** count limits the number of values displayed and allows for pagination. Use 0 for unlimited values */\n    count?: number;\n    /** Defines when the edge should be displayed */\n    trigger: StructuralTriggerType;\n    /** showall: display all values from the field / paginate: display all value with pagination / existingnodes: only link to existing nodes / manual: only show if manual action (activated programmatically) */\n    display: StructuralDisplayType;\n    /** A function to parse metadata from a record node in a custom way */\n    parse?: (value: any, record: Record, type: StructuralEdgeType) => CustomData;\n}\n\nexport type StructuralTriggerType = \"oninsert\" | \"onclick\" | \"manual\";\nexport type StructuralDisplayType = \"all\" | \"paginate\" | \"existingnodes\" | ((node: Node, recordNode: RecordNode, index: number) => boolean);\n\n/**\n * Data structure returned by the optional parse() function of a structural edge\n * type. Contains the parsed values of a property that can be turned into one or\n * multiple nodes and edges.\n */\nexport interface CustomData {\n    values: string[]; // eg. LARRY PAGE, GOOGLE\n    displays: string[]; // eg. Larry Page, Google\n    relations?: string[]; // eg. Works At\n    directed?: boolean[]; // eg. true\n    fieldValue?: string; // A value on which to filter the data\n}\n\n/**\n * Tests whether the given edge type is a structural edge type\n * @param et an edge type\n */\nexport function isStructuralEdgeType(et: EdgeType): et is StructuralEdgeType {\n    return !!(et as StructuralEdgeType).field;\n}\n\n\n/**\n * A network provider generating nodes from records.\n * Additionally, the provider can generate the \"structural edges\" of that\n * node. Structural edges are edges between a record and the fields of\n * that record (eg. the wikipedia page of Microsoft is a record that probably\n * contains the fields \"Microsoft\" and \"Bill Gates\").\n */\nexport class RecordsProvider extends BaseProvider {\n\n    constructor(\n        public override name = \"Documents\",\n        protected nodeType: NodeType,\n        protected edgeTypes: StructuralEdgeType[],\n        protected records: Record[],\n        protected hideRecordNode = false\n    ){\n        super(name);\n    }\n\n    /**\n     * Clears the dataset and generates new record nodes\n     * @param records the list of records of this provider\n     */\n    protected updateDataset(records?: Record[]) {\n        this.dataset.clear();\n        if(!this.active || !records || records.length === 0) {\n            return; \n        }\n        this.addRecordNodes(records);\n    }\n    \n    // Record nodes\n\n    /**\n     * Generates the nodes for a list of records, including their structural\n     * edges, and adds them to the dataset.\n     * Returns the list of record nodes.\n     * @param records \n     */\n    protected addRecordNodes(records: Record[]): RecordNode[] {\n        return records.map(record => {\n            let node = this.dataset.getNode(this.getNodeId(this.nodeType, record.id));\n            if(!node) {\n                node = this.createNode(this.nodeType, record.id, record.title, !this.hideRecordNode, {record});\n                this.dataset.addNodes(node);\n                this.edgeTypes.forEach(type => {\n                    this.addStructuralEdges(node as RecordNode, type);\n                });\n            }\n            return node as RecordNode;\n        });\n    }\n\n    \n    // Structural edges\n\n    /**\n     * Generates the metadata nodes and structural edges from the given node,\n     * and merge them into the dataset.\n     * This function will automatically parse the metadata contained in the record,\n     * but it is possible to manage custom types of metadata by providing a\n     * custom parse() function via the structural edge type.\n     * @param node The record node\n     * @param type The edge type for which we want to create edges\n     */\n    protected addStructuralEdges(node: RecordNode, type: StructuralEdgeType) {\n\n        if(type.nodeTypes[0] !== this.nodeType){\n            throw new Error(`Inconsistent node type: '${type.nodeTypes[0].name}' instead of '${this.nodeType.name}'`);\n        }\n        \n        const recorddata = node.record[type.field];\n\n        if(recorddata === undefined){\n            return;\n        }\n\n        // Custom parse for mono or multi valued data\n        if(type.parse) {\n            if(Utils.isArray(recorddata)) {\n                recorddata.forEach((value,i) => { \n                    this.addCustomEdge(node, type, type.parse!(value, node.record, type));\n                });\n            }\n            else {\n                this.addCustomEdge(node, type, type.parse!(recorddata, node.record, type));\n            }\n        }\n        // Default handling for standard Sinequa Metadata\n        else {\n            const data = new NetworkDataset();\n            data.addNodes(node);\n    \n            // sourcestr\n            if(Utils.isString(recorddata)) {\n                this.addStructuralEdge(data, node, type, recorddata, recorddata, 0);\n            }\n            else if(Utils.isArray(recorddata)) {\n                recorddata.forEach((value,i) => {\n                    // sourcecsv\n                    if(Utils.isString(value)) {\n                        this.addStructuralEdge(data, node, type, value, value, i);\n                    }\n                    // entity\n                    else if(value[\"value\"]) {\n                        this.addStructuralEdge(data, node, type, value[\"value\"], value[\"display\"] || value[\"value\"], i);\n                    }\n                });\n            }\n    \n            this.dataset.merge(data);\n        }\n    }\n\n    /**\n     * Add a structural edge to a record node and adds that edge\n     * (and corresponding metadata node) to the given dataset.\n     * @param dataset The target dataset\n     * @param recordNode The record node\n     * @param type The edge type of the structural edge\n     * @param value The \"value\" property of the metadata node\n     * @param display The \"display\" property of the metadata node\n     * @param index The index of the metadata within the record, which may influence its visibility when using display=paginate\n     */\n    protected addStructuralEdge(dataset: NetworkDataset, recordNode: RecordNode, type: StructuralEdgeType, value: string, display: string, index: number) {\n        // Create the metadata node\n        const node = this.createNode(type.nodeTypes[1], value, display, true);\n        // Sets its visibility\n        node.visible = type.trigger === \"oninsert\" && this.isEdgeVisible(type, node, recordNode, index);\n        if(recordNode.id !== node.id){ // Special case of hybrid nodes, where the recordNode might contain itself...!\n            if(!dataset.hasNode(node.id)) { // Duplicate nodes/edges are possible when the same node type is present in multiple fields of a record (eg. \"email\" in msgfrom and msgto)\n                dataset.addNodes(node);\n            }\n            const edge = this.createEdge(type, recordNode, node, value, node.visible, {record: recordNode.record});\n            if(!dataset.hasEdge(edge.id)) {\n                dataset.addEdges(edge);\n            }\n        }\n    }\n\n    /**\n     * Add a custom structural edge to a record node and merges that edge\n     * (and corresponding metadata node) into the global dataset.\n     * @param recordNode The record node\n     * @param type The edge type of the structural edge\n     * @param data A CustomData object containing the properties of the metadata nodes we want to created\n     */\n    protected addCustomEdge(recordNode: RecordNode, type: StructuralEdgeType, data: CustomData) {\n        if(type.nodeTypes.length !== data.values.length + 1) {\n            throw new Error(`Wrong number of values for this custom edge ${type.nodeTypes.length}, ${data.values.length}`);\n        }\n        // Create a dataset only for this data, to avoid duplicate conflicts\n        const dataset = new NetworkDataset();\n        dataset.addNodes(recordNode);\n        // For each value contained in \"data\", create a node, and edges in between them (in addition to the edges between the record and each metadata node)\n        let lastNode: Node;\n        for(let i=0; i 0){\n                const relation = data.relations? data.relations[i-1] : undefined;\n                const directed = data.directed? data.directed[i-1] : false;\n                dataset.addEdges(this.createEdge(type, lastNode!, node, data.fieldValue, true, {}, 1, directed, relation));\n            }\n            lastNode = node;\n        }\n        this.dataset.merge(dataset);\n    }\n\n    /**\n     * Returns the visibility of a structural edge, depending on the type.display property\n     * @param type The structural edge type\n     * @param node The metadata node of this edge\n     * @param recordNode The record node of this edge\n     * @param index The index of the metadata in the list of metadata of the record\n     */\n    protected isEdgeVisible(type: StructuralEdgeType, node: Node, recordNode: RecordNode, index: number): boolean {\n        if(type.display === \"all\") {\n            return true;\n        }\n        else if(type.display === \"existingnodes\") {\n            return false;\n        }\n        else if(type.display === \"paginate\") {\n            return index  node.type === this.nodeType)\n            .forEach(node => {\n                dataset.getAdjacentEdges(node.id)\n                    .filter(edge => (edge.type as StructuralEdgeType).display === 'existingnodes')\n                    .forEach(edge => {\n                        const neighbor = dataset.getNode(node.id === edge.to ? edge.from : edge.to);\n                        if(!neighbor) {\n                            throw new Error(`Missing node from edge ${edge.id}`);\n                        }\n                        const neighborsneighbors = dataset.getAdjacentEdges(neighbor.id);\n                        if(neighborsneighbors.length > 1) {\n                            neighbor.visible = true;\n                            edge.visible = true;\n                        }\n                    });\n            });\n    }\n\n    /**\n     * Adjust visibility of nodes and edges, for structural edges with\n     * type.trigger = onclick. These nodes will only be shown once their\n     * record node is clicked on.\n     * @param node A node that was clicked\n     */\n    override onNodeClicked(node?: Node) {\n        if(this.active && node && node.type === this.nodeType) { // Note: we cannot test the provider property, since this node might have been merged with one from a different provider. However the node type should be a unique instance\n            let update = false;\n            this.dataset.getAdjacentEdges(node.id)\n                .filter(edge => edge.type['trigger'] === 'onclick')\n                .forEach(edge => {\n                    const neighbor = this.dataset.getNode(node.id === edge.to ? edge.from : edge.to);\n                    if(!neighbor) {\n                        throw new Error(`Missing node from edge ${edge.id}`);\n                    }\n                    if(!neighbor.visible || !edge.visible) {\n                        edge.visible = true;\n                        neighbor.visible = true;\n                        update = true;\n                    }\n                    // TODO \"propagate\" visibility (ie. if 2 nodes are visible but an edge in between is invisible, make it visible)\n                });\n            if(update) {\n                this.provider.next(this.dataset);\n            }\n        }\n    }\n\n    override getProviderActions(): Action[] {\n        return super.getProviderActions();\n    }\n\n    /**\n     * Creates actions for expanding and/or collapsing a record node that was clicked.\n     * expanding and collapsing will act on the visibility of the structural edges\n     * attached to this node.\n     * Both actions might be displayed at the same time, if the node is in an intermediate\n     * state.\n     * @param node \n     */\n    override getNodeActions(node: Node): Action[] {\n        const actions = super.getNodeActions(node);\n        \n        // Actions for exanding / collapsing a record node\n        if(this.active && node.type === this.nodeType && this.edgeTypes.length > 0) {\n            let hasExpandedEdge = false;\n            let hasCollapsedEdge = false;\n            this.dataset.getAdjacentEdges(node.id).forEach(e => {\n                hasCollapsedEdge = hasCollapsedEdge || !e.visible;\n                hasExpandedEdge = hasExpandedEdge || e.visible;\n            });\n\n            if(hasCollapsedEdge) {\n                actions.push(new Action({\n                    icon: \"fas fa-expand-arrows-alt\",\n                    title: \"msg#network.actions.expandMeta\",\n                    action: () => {\n                        let update = false;\n                        this.dataset.getAdjacentEdges(node.id)\n                            .forEach(edge => {\n                                const neighbor = this.dataset.getNode(node.id === edge.to ? edge.from : edge.to);\n                                if(!neighbor) {\n                                    throw new Error(`Missing node from edge ${edge.id}`);\n                                }\n                                if(!neighbor.visible || !edge.visible) {\n                                    edge.visible = true;\n                                    neighbor.visible = true;\n                                    update = true;\n                                }\n                                // TODO \"propagate\" visibility (ie. if 2 nodes are visible but an edge in between is invisible, make it visible)\n                            });\n                        if(update) {\n                            this.provider.next(this.dataset);\n                        }\n                    }\n                }));\n            }\n            \n            if(hasExpandedEdge) {\n                actions.push(new Action({\n                    icon: \"fas fa-compress-arrows-alt\",\n                    title: \"msg#network.actions.collapseMeta\",\n                    action: () => {\n                        let update = false;\n                        this.dataset.getAdjacentEdges(node.id)\n                            .forEach(edge => {\n                                const neighbor = this.dataset.getNode(node.id === edge.to ? edge.from : edge.to);\n                                if(!neighbor) {\n                                    throw new Error(`Missing node from edge ${edge.id}`);\n                                }\n                                if((neighbor.visible || edge.visible) && !(neighbor as RecordNode).record) { // Prevent collapsing links between 2 record nodes (alternatively, we could count the number of neighbors of the neighbors, and close only the isoltated ones)\n                                    edge.visible = false;\n                                    neighbor.visible = false;\n                                    update = true;\n                                }\n                            });\n                        if(update) {\n                            this.provider.next(this.dataset);\n                        }\n                    }\n                }));\n            }\n        }\n        return actions;\n    }\n\n}\n    \n    \n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/TimelineAggregation.html":{"url":"interfaces/TimelineAggregation.html","title":"interface - TimelineAggregation","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  TimelineAggregation\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            timeline/bootstrap/facet-timeline.component.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            aggregation\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            areaStyles\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            lineStyles\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            name\n                                        \n                                \n                                \n                                        \n                                            primary\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            showDatapoints\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        aggregation\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        aggregation:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        areaStyles\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        areaStyles:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        lineStyles\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        lineStyles:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        name\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        name:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        primary\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        primary:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        showDatapoints\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        showDatapoints:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Component, Input, OnChanges, ChangeDetectorRef, SimpleChanges, Output, EventEmitter } from '@angular/core';\nimport { Observable, of, combineLatest, ReplaySubject } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { Results, AggregationItem, Aggregation, CCAggregation, Record, AuditWebService, AuditEventType } from '@sinequa/core/web-services';\nimport { AppService, Expr, ExprBuilder } from '@sinequa/core/app-utils';\nimport { Utils } from '@sinequa/core/base';\nimport { AbstractFacet, FacetService } from '@sinequa/components/facet';\nimport { SearchService } from '@sinequa/components/search';\nimport { SelectionService } from '@sinequa/components/selection';\nimport { Action } from '@sinequa/components/action';\nimport { TimelineSeries, TimelineDate, TimelineEvent } from './timeline.component';\nimport moment from 'moment';\nimport * as d3 from 'd3';\nimport { TimelineEventType } from './timeline-legend.component';\n\nexport interface TimelineAggregation {\n    name?: string;\n    aggregation: string;\n    primary: boolean;\n    areaStyles?: {[key: string]: any};\n    lineStyles?: {[key: string]: any};\n    showDatapoints?: boolean;\n}\n\nexport interface TimelineCombinedAggregations {\n    aggregations: TimelineAggregation[];\n    maxNMonths: number[]; // Maximum number of months for which to use this aggregation\n    default: TimelineAggregation; // Aggregation to use by default \n    current?: TimelineAggregation; // (this field is overriden by the component when switching aggregation)\n}\n\nexport interface TimelineRecords {\n    field: string;\n    size?: number | ((record: Record, selected: boolean) => number);\n    styles?: {[key: string]: any} | ((record: Record, selected: boolean) => {[key: string]: any});\n    display?: (record: Record) => string;\n}\n\nexport interface TimelineEventAggregation {\n    aggregation: string;\n    getDate: ((item: AggregationItem) => Date);\n    getDisplay: ((item: AggregationItem) => string);\n    size?: number | ((item: AggregationItem) => number);\n    styles?: {[key: string]: any} | ((item: AggregationItem) => {[key: string]: any});\n}\n\nexport type TimelineData = TimelineSeries | TimelineAggregation | TimelineCombinedAggregations;\n\nexport type TimelineEventData = TimelineEvent[] | TimelineRecords | TimelineEventAggregation;\n\n@Component({\n    selector: 'sq-facet-timeline',\n    templateUrl: './facet-timeline.component.html',\n    styleUrls: ['./facet-timeline.component.scss']\n})\nexport class BsFacetTimelineComponent extends AbstractFacet implements OnChanges {\n    @Input() name = 'Timeline';\n    @Input() results: Results;\n    \n    // By default, we show the standard Timeline aggregation and the list of current records\n    @Input() timeseries: TimelineData[] = [{aggregation: 'Timeline', primary: true}];\n    @Input() events: TimelineEventData[] = [{field: 'modified'}];\n\n    // Initial scale (prior to any zoom)\n    @Input() minDate?: Date;\n    @Input() maxDate?: Date;\n    // Date range to filter aggregations (ignored when combined aggregations are recomputed based on zoomed range)\n    @Input() minAggregationDate?: Date;\n    @Input() maxAggregationDate?: Date;\n    \n    @Input() zoomable = true;\n    @Input() minZoomDays = 1; // Max 1 day scale\n    @Input() maxZoomDays = 365 * 100; // Max 100 years scale\n\n    @Input() width = 600;\n    @Input() height = 200;\n    @Input() margin = {top: 15, bottom: 20, left: 40, right: 15};\n\n    @Input() curveType = \"curveMonotoneX\";\n\n    @Input() showTooltip = true;\n    @Input() theme: \"light\" | \"dark\" = \"light\";\n\n    @Input() showLegend = false;\n    @Input() legendStyles?: {[key:string]: any} = {'justify-content' : 'center'};\n    @Input() legendEvents?: TimelineEventType[];\n    @Input() legendOrientation?: \"row\"|\"column\" = \"row\";\n    @Input() legendYOffset?: number = 3;\n\n    @Output() eventClicked = new EventEmitter();\n\n    // List of observables (one per timeseries / event type)\n    timeseries$: ReplaySubject[];\n    events$: ReplaySubject[];\n\n    // Combination (combineLastest) of the timeline observables\n    mergedTimeseries$: Observable;\n    mergedEvents$: Observable;\n\n    // Current timeline selection\n    selection?: [Date, Date];\n\n    // Current range (undefined if no zoom / auto-scaling)\n    currentRange?: [Date, Date];\n\n    // Formating method for search queries\n    formatDayRequest = d3.timeFormat(\"%Y-%m-%d\");\n\n    // Actions\n    clearFilters: Action;\n\n    constructor(\n        public facetService: FacetService,\n        public searchService: SearchService,\n        public appService: AppService,\n        public selectionService: SelectionService,\n        public exprBuilder: ExprBuilder,\n        public cdRef: ChangeDetectorRef,\n        public audit: AuditWebService\n    ){\n        super();\n\n        // Update the events when the selection of records changes\n        this.selectionService.events.subscribe(event => {\n            const i = this.events.findIndex(e => (e as TimelineRecords).field);\n            if(i !== -1) {\n                this.events$[i].next(this.getRecordsAsEvents(this.events[i] as TimelineRecords));\n            }\n        });\n        \n        // Clear the current filters\n        this.clearFilters = new Action({\n            icon: \"far fa-minus-square\",\n            title: \"msg#facet.clearSelects\",\n            action: () => {\n                this.selection = undefined;\n                this.searchService.query.removeSelect(this.name);\n                this.searchService.search();\n            }\n        });\n\n    }\n\n    getMinDate(): Date | undefined {\n        return this.currentRange? this.currentRange[0] : this.minDate;\n    }\n\n    getMaxDate(): Date | undefined {\n        return this.currentRange? this.currentRange[1] : this.maxDate;\n    }\n\n    override get actions(): Action[] {\n        const actions: Action[] = [];\n        if(this.facetService.hasFiltered(this.name)){\n            actions.push(this.clearFilters);\n        }\n        return actions;\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n\n        // Skip simple changes (width, height, etc.) that don't require modifying the timeline data\n        if(!changes.timeseries && !changes.events && !changes.results) {\n            return;\n        }\n\n        // Retrieve the current active selection for this timeline (if any)\n        const select = this.searchService.query.findSelect(this.name);\n\n        // Update the selection if it is not already set (which is the case on a page refresh)\n        if(select && !this.selection) {\n            let parsedexpr = this.appService.parseExpr(select.expression) as Expr;\n            if(!Utils.isString(parsedexpr)){\n                while(!parsedexpr.isLeaf){ // The select might over multiple fields (modified between [...] AND created between [...])\n                    parsedexpr = parsedexpr.operands[0];\n                }\n                if(parsedexpr.values){\n                    this.selection = [new Date(parsedexpr.values[0]), new Date(parsedexpr.values[1])];\n                    // Guess a current range based on the selection\n                    if(!this.currentRange) {\n                        const interval = this.selection[1].getTime() - this.selection[0].getTime();\n                        this.currentRange = [ // Selected Interval +10% on each side\n                            new Date(this.selection[0].getTime()-interval*0.1),\n                            new Date(this.selection[1].getTime()+interval*0.1)\n                        ];\n                    }\n                }\n            }\n        }\n        // If no active selection we remove the selection from the timeline, along with the current zoomed range\n        else if(!select) {\n            this.selection = undefined; // If no select, it was possibly removed by the user, we need to update our selection\n            this.currentRange = undefined; // current range is set by zoom events, we want to reset it only if there are no select (ie. no user interaction)\n        }\n\n        // Initialize timeseries\n        if(!this.timeseries$ || changes[\"timeseries\"]) {\n            // Create one observable per timeline\n            this.timeseries$ = this.timeseries.map(_ => new ReplaySubject(1));\n            this.mergedTimeseries$ = combineLatest(this.timeseries$);\n        }\n\n        this.updateTimeseries();\n\n        // Initialize events\n        if(!this.events$ || changes[\"events\"]) {\n            this.events$ = this.events.map(_ => new ReplaySubject(1));\n            this.mergedEvents$ = combineLatest(this.events$).pipe(\n                map(events => ([] as TimelineEvent[]).concat(...events))\n            );\n        }\n\n        this.updateEvents();\n        \n    }\n\n    /**\n     * For each timeseries configuration given as an input,\n     * update the data via the list of observables (timelines$)\n     */\n    updateTimeseries() {\n        this.timeseries.forEach((config, i) => {\n\n            const subject = this.timeseries$[i];\n\n            if((config as TimelineSeries).dates !== undefined) {\n                subject.next(config as TimelineSeries);\n            }\n\n            else {\n                let agg = config as TimelineAggregation;\n                if(agg.aggregation === undefined){\n                    \n                    config = config as TimelineCombinedAggregations;\n                    // We want to set the default scale if it hasn't been set before\n                    // or if no zoom/selection has been made (so current scale may not be adapted to the new results)\n                    if(!this.currentRange || !config.current){\n                        config.current = config.default;\n                    }\n\n                    agg = config.current;\n                }\n                \n                const range: [Date, Date] | undefined = !!this.minAggregationDate && !!this.maxAggregationDate ?\n                    [this.minAggregationDate, this.maxAggregationDate] : undefined;\n\n                this.getTimeseries(agg, range).subscribe({\n                    next: d => subject.next(d),\n                    error: err => subject.error(err)\n                });\n            }\n\n        });\n    }\n\n    /**\n     * For each event configuration given as an input, \n     * update the data via the list of observables (events$)\n     */\n    updateEvents() {\n        this.events.forEach((config, i) => {\n            const subject = this.events$[i];\n\n            if((config as TimelineRecords).field) {\n                subject.next(this.getRecordsAsEvents(config as TimelineRecords));\n            }\n            else if((config as TimelineEventAggregation).aggregation){\n                this.getEventAggregation(config as TimelineEventAggregation).subscribe({\n                    next: t => subject.next(t),\n                    error: err => subject.error(err)\n                });\n            }\n            else if(Array.isArray(config)){\n                subject.next(config as TimelineEvent[]);\n            }\n        });\n    }\n\n    /**\n     * Get a timeseries aggregation via the getAggregation method.\n     * @param config \n     * @param subject \n     * @param range \n     */\n    getTimeseries(config: TimelineAggregation, range?: [Date, Date]): Observable {\n        return this.getAggregation(config.aggregation, range).pipe(\n            map(d => BsFacetTimelineComponent.createTimeseries(config, d.aggregation, d.ccaggregation, range))\n        );\n    }\n\n    /**\n     * Get an aggregation of events via the getAggregation method\n     * @param config \n     * @param subject \n     */\n    getEventAggregation(config: TimelineEventAggregation): Observable {\n        return this.getAggregation(config.aggregation).pipe(\n            map(d => BsFacetTimelineComponent.createAggregationEvents(config, d.aggregation, d.ccaggregation))\n        );\n    }\n\n    /**\n     * Returns the list of records from the results as a list of TimelineEvent when they have a\n     * modified date. The size and styles of the events are determined from the given configuration (TimelineRecords)\n     * @param config \n     */\n    getRecordsAsEvents(config: TimelineRecords): TimelineEvent[] {\n        if(this.results) {\n            return this.results.records\n                .filter(r => !!Utils.toDate(r[config.field]))\n                .map(r => {\n                    return {\n                        id: r.id,\n                        date: Utils.toDate(r[config.field])!,\n                        size: !config.size? 6 : typeof config.size === 'function'? config.size(r, r.$selected) : config.size,\n                        styles: !config.styles? BsFacetTimelineComponent.defaultRecordStyle(r.$selected) :\n                                typeof config.styles === 'function'? config.styles(r, r.$selected) : \n                                config.styles,\n                        display: config.display? config.display(r) : r.title,\n                        // Custom property for click action\n                        record: r\n                    }\n                });\n        }\n        return [];\n    }\n\n\n    /**\n     * returns an aggregation and its configuration either directly from the facet service of\n     * by fetching it from the server.\n     * @param aggregationName \n     * @param range \n     */\n    getAggregation(aggregationName: string, range?: [Date, Date]): Observable {\n        \n        const ccaggregation = this.appService.getCCAggregation(aggregationName);\n        const aggregation = this.facetService.getAggregation(aggregationName, this.results);\n        \n        if(aggregation && ccaggregation) {\n            return of({aggregation: aggregation, ccaggregation: ccaggregation});\n        }\n\n        else if(ccaggregation) {\n            return this.fetchAggregation(aggregationName, ccaggregation, range).pipe(\n                map(agg => {return {aggregation: agg, ccaggregation: ccaggregation} })\n            );\n        }\n\n        else {\n            throw new Error(`Aggregation ${aggregationName} does not exist in the Query web service`);\n        }\n    }\n\n    /**\n     * Get an aggregation from the server, filtering by range if provided\n     * @param aggregation \n     * @param ccaggregation \n     * @param range \n     */\n    fetchAggregation(aggregation: string, ccaggregation: CCAggregation, range?: [Date, Date]): Observable {\n        const query = Utils.copy(this.searchService.query);\n        query.action = \"aggregate\";\n        query.aggregations = [aggregation];\n\n        if(range){\n            query.addSelect(`${ccaggregation.column}:[${this.formatDayRequest(range[0])}..${this.formatDayRequest(range[1])}]`);\n        }\n\n        return this.searchService.getResults(query, undefined, {searchInactive: true}).pipe(\n            map(results => results.aggregations[0])\n        );\n    }\n\n    /**\n     * Given a combined aggregation configuration and a range, this method searches for the most \n     * adapted aggregation scale (years, months, weeks or days) and updates the data if necessary.\n     * @param config \n     * @param range \n     * @param iTimeseries \n     */\n    updateCombinedAggregation(config: TimelineCombinedAggregations, range: [Date, Date], timeseries$: ReplaySubject) {\n        const nmonths = d3.timeMonth.count(range[0], range[1]);\n\n        if(!config.maxNMonths || config.maxNMonths.length !== config.aggregations.length) {\n            console.error(config);\n            throw new Error(\"maxNMonths and aggregations must have the same number of items\");\n        }\n\n        // Find the aggregation with min maxNMonths with maxNMonths >= nmonths\n        let jMin;\n        config.maxNMonths.forEach((maxNMonths, j) => {\n            if(maxNMonths >= nmonths && (jMin === undefined || maxNMonths  this.currentRange[1])) {\n\n            config.current = bestAggregation;\n            this.getTimeseries(bestAggregation, range).subscribe({\n                next: d => timeseries$.next(d),\n                error: err => timeseries$.error(err)\n            });\n        }\n\n    }\n\n\n    // Interaction callbacks\n\n    /**\n     * On selection is triggered when the user selects a range of dates on the timeline.\n     * This has the effect of updating the query.select (either remove it or add/replace it)\n     * and it updates the search.\n     * @param selection \n     */\n    onSelectionChange(selection: [Date, Date] | undefined) {\n        this.selection = selection;\n        if(selection) {\n            const from = this.formatDayRequest(selection[0]);\n            const to = this.formatDayRequest(selection[1]);\n\n            const exprs: string[] = [];\n            this.searchService.query.removeSelect(this.name);\n\n            this.timeseries.forEach((config) => {\n                    \n                if((config as TimelineAggregation).aggregation !== undefined \n                || (config as TimelineCombinedAggregations).default !== undefined) {\n\n                    const aggregation = (config as TimelineAggregation).aggregation || (config as TimelineCombinedAggregations).default.aggregation;\n                    const ccaggregation = this.appService.getCCAggregation(aggregation);\n                    if(ccaggregation) {\n                        exprs.push(this.exprBuilder.makeRangeExpr(ccaggregation.column, from, to));\n                    }\n                }\n\n            });\n\n            if(exprs.length > 0) {\n                const expr = this.exprBuilder.concatOrExpr(exprs);\n                this.searchService.query.addSelect(expr, this.name);\n                this.searchService.search(undefined, {type:AuditEventType.Search_Timeline_Usage, detail: { from, to }});\n            }            \n        }\n\n        else if(this.searchService.query.findSelect(this.name)) {\n            this.searchService.query.removeSelect(this.name);\n            this.searchService.search();\n        }\n    }\n\n    /**\n     * On range is triggered when the user zooms in our out on the timeline,\n     * which triggers a dynamic update of the combined aggregation timelines.\n     * @param range \n     */\n    onRangeChange(range: [Date, Date]) {\n\n        this.timeseries.forEach((config, i) => {\n            if((config as TimelineCombinedAggregations).aggregations !== undefined) {\n                this.updateCombinedAggregation(config as TimelineCombinedAggregations, range, this.timeseries$[i]);\n            }\n        });\n\n        // Note: updateCombinedAggregation() compares currentRange and range\n        // So this update must be kept after the forEach\n        this.currentRange = range;\n    }\n\n    /**\n     * When an event is clicked, the event is propagated to the parent, and the tooltip is closed\n     * @param event \n     * @param closeTooltip \n     */\n    onEventClicked(event: TimelineEvent, closeTooltip: () => void) {\n        this.eventClicked.next(event);\n        closeTooltip();\n        return false;\n    }\n\n\n    // Static utility methods\n    \n    \n    /**\n     * Create a time series object from its config, data (aggregation) and configuration (ccaggregation)\n     * @param config \n     * @param aggregation \n     * @param ccaggregation \n     */\n    static createTimeseries(config: TimelineAggregation, aggregation: Aggregation, ccaggregation: CCAggregation, range?: [Date, Date]): TimelineSeries {\n        return {\n            ...config,\n            name: config.name || aggregation.name,\n            dates: this.createDatapoints(aggregation.items, ccaggregation?.mask, range),\n        }\n    }\n\n    /**\n     * Create a list of events from its config, data (aggregation) and configuration (ccaggregation)\n     * @param config \n     * @param aggregation \n     * @param ccaggregation \n     */\n    static createAggregationEvents(config: TimelineEventAggregation, aggregation: Aggregation, ccaggregation: CCAggregation): TimelineEvent[] {\n        return !aggregation.items? [] : aggregation.items.map(item => {\n            return {\n                id: config.getDate(item).toUTCString()+\"|\"+config.getDisplay(item),\n                date: config.getDate(item),\n                size: !config.size? 6 : typeof config.size === 'function'? config.size(item) : config.size,\n                styles: !config.styles? undefined :\n                        typeof config.styles === 'function'? config.styles(item) : \n                        config.styles,                \n                display: config.getDisplay(item),\n\n                // Custom params for click action\n                item: item,\n                aggregation: aggregation,\n                ccaggregation: ccaggregation\n            }\n        });\n    }\n\n    /**\n     * This methods transforms a raw list of aggregation items into\n     * a time series completed with zeros, following the below scheme:\n     * Aggregation:  [    # #         # # #   #     # #       # # #    ]\n     * Series:       [  0 # # 0     0 # # # 0 # 0 0 # # 0   0 # # # 0  ]\n     * @param items \n     * @param resolution \n     */\n    static createDatapoints(items: AggregationItem[] | undefined, resolution: string, range?: [Date, Date]): TimelineDate[] {\n\n        if(!items) {\n            return [];\n        }\n\n        const timeInterval = this.getD3TimeInterval(resolution);\n        \n        const series: TimelineDate[] = [];\n\n        const _items = items\n            .map(item => {\n                if(!!item.value && !(item.value instanceof Date)){\n                    const val = item.value.toString();\n                    item.value = moment(val.length  undefined; // So it gets filtered out\n                    }\n                }\n                return item;\n            })\n            .filter(item => !!item.value && (!range || ((item.value as Date) >= range[0] && (item.value as Date)  {\n            const date = item.value as Date;\n            \n            if(i === 0 || timeInterval.offset(series[series.length-1].date, 1)  item.date = this.shiftDate(item.date, resolution));\n\n        return series;\n    }\n\n    \n    /**\n     * Shift the date to the middle of their time bracket (2020 = middle of the year, April = middle of the month, etc.)\n     * @param date \n     * @param resolution \n     */\n    static shiftDate(date: Date, resolution: string): Date {\n        switch(resolution){\n            case \"YYYY-MM-DD\": return d3.timeHour.offset(date, 12);\n            case \"YYYY-WW\": return d3.timeHour.offset(date, 84); // 3*24 + 12\n            case \"YYYY-MM\": return d3.timeDay.offset(date, 15);\n            case \"YYYY\": return d3.timeMonth.offset(date, 6);\n        }\n        return date;\n    }\n\n\n    static getD3TimeInterval(resolution: string): d3.CountableTimeInterval {\n        switch(resolution){\n            case \"YYYY-MM-DD\": return d3.timeDay;\n            case \"YYYY-WW\": return d3.timeWeek;\n            case \"YYYY-MM\": return d3.timeMonth;\n            case \"YYYY\": return d3.timeYear;\n        }\n        return d3.timeDay;\n    }\n\n    static defaultRecordStyle(selected: boolean): {[key: string]: any} {\n        return {\n            'fill': selected? 'red' : 'green',\n            'stroke': selected? 'red' : undefined,\n            'stroke-width': selected? '2px' : undefined\n        };\n    }\n}\n    \n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/TimelineCombinedAggregations.html":{"url":"interfaces/TimelineCombinedAggregations.html","title":"interface - TimelineCombinedAggregations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  TimelineCombinedAggregations\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            timeline/bootstrap/facet-timeline.component.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            aggregations\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            current\n                                        \n                                \n                                \n                                        \n                                            default\n                                        \n                                \n                                \n                                        \n                                            maxNMonths\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        aggregations\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        aggregations:         TimelineAggregation[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         TimelineAggregation[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        current\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        current:         TimelineAggregation\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         TimelineAggregation\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        default\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        default:         TimelineAggregation\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         TimelineAggregation\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        maxNMonths\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        maxNMonths:     number[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     number[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Component, Input, OnChanges, ChangeDetectorRef, SimpleChanges, Output, EventEmitter } from '@angular/core';\nimport { Observable, of, combineLatest, ReplaySubject } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { Results, AggregationItem, Aggregation, CCAggregation, Record, AuditWebService, AuditEventType } from '@sinequa/core/web-services';\nimport { AppService, Expr, ExprBuilder } from '@sinequa/core/app-utils';\nimport { Utils } from '@sinequa/core/base';\nimport { AbstractFacet, FacetService } from '@sinequa/components/facet';\nimport { SearchService } from '@sinequa/components/search';\nimport { SelectionService } from '@sinequa/components/selection';\nimport { Action } from '@sinequa/components/action';\nimport { TimelineSeries, TimelineDate, TimelineEvent } from './timeline.component';\nimport moment from 'moment';\nimport * as d3 from 'd3';\nimport { TimelineEventType } from './timeline-legend.component';\n\nexport interface TimelineAggregation {\n    name?: string;\n    aggregation: string;\n    primary: boolean;\n    areaStyles?: {[key: string]: any};\n    lineStyles?: {[key: string]: any};\n    showDatapoints?: boolean;\n}\n\nexport interface TimelineCombinedAggregations {\n    aggregations: TimelineAggregation[];\n    maxNMonths: number[]; // Maximum number of months for which to use this aggregation\n    default: TimelineAggregation; // Aggregation to use by default \n    current?: TimelineAggregation; // (this field is overriden by the component when switching aggregation)\n}\n\nexport interface TimelineRecords {\n    field: string;\n    size?: number | ((record: Record, selected: boolean) => number);\n    styles?: {[key: string]: any} | ((record: Record, selected: boolean) => {[key: string]: any});\n    display?: (record: Record) => string;\n}\n\nexport interface TimelineEventAggregation {\n    aggregation: string;\n    getDate: ((item: AggregationItem) => Date);\n    getDisplay: ((item: AggregationItem) => string);\n    size?: number | ((item: AggregationItem) => number);\n    styles?: {[key: string]: any} | ((item: AggregationItem) => {[key: string]: any});\n}\n\nexport type TimelineData = TimelineSeries | TimelineAggregation | TimelineCombinedAggregations;\n\nexport type TimelineEventData = TimelineEvent[] | TimelineRecords | TimelineEventAggregation;\n\n@Component({\n    selector: 'sq-facet-timeline',\n    templateUrl: './facet-timeline.component.html',\n    styleUrls: ['./facet-timeline.component.scss']\n})\nexport class BsFacetTimelineComponent extends AbstractFacet implements OnChanges {\n    @Input() name = 'Timeline';\n    @Input() results: Results;\n    \n    // By default, we show the standard Timeline aggregation and the list of current records\n    @Input() timeseries: TimelineData[] = [{aggregation: 'Timeline', primary: true}];\n    @Input() events: TimelineEventData[] = [{field: 'modified'}];\n\n    // Initial scale (prior to any zoom)\n    @Input() minDate?: Date;\n    @Input() maxDate?: Date;\n    // Date range to filter aggregations (ignored when combined aggregations are recomputed based on zoomed range)\n    @Input() minAggregationDate?: Date;\n    @Input() maxAggregationDate?: Date;\n    \n    @Input() zoomable = true;\n    @Input() minZoomDays = 1; // Max 1 day scale\n    @Input() maxZoomDays = 365 * 100; // Max 100 years scale\n\n    @Input() width = 600;\n    @Input() height = 200;\n    @Input() margin = {top: 15, bottom: 20, left: 40, right: 15};\n\n    @Input() curveType = \"curveMonotoneX\";\n\n    @Input() showTooltip = true;\n    @Input() theme: \"light\" | \"dark\" = \"light\";\n\n    @Input() showLegend = false;\n    @Input() legendStyles?: {[key:string]: any} = {'justify-content' : 'center'};\n    @Input() legendEvents?: TimelineEventType[];\n    @Input() legendOrientation?: \"row\"|\"column\" = \"row\";\n    @Input() legendYOffset?: number = 3;\n\n    @Output() eventClicked = new EventEmitter();\n\n    // List of observables (one per timeseries / event type)\n    timeseries$: ReplaySubject[];\n    events$: ReplaySubject[];\n\n    // Combination (combineLastest) of the timeline observables\n    mergedTimeseries$: Observable;\n    mergedEvents$: Observable;\n\n    // Current timeline selection\n    selection?: [Date, Date];\n\n    // Current range (undefined if no zoom / auto-scaling)\n    currentRange?: [Date, Date];\n\n    // Formating method for search queries\n    formatDayRequest = d3.timeFormat(\"%Y-%m-%d\");\n\n    // Actions\n    clearFilters: Action;\n\n    constructor(\n        public facetService: FacetService,\n        public searchService: SearchService,\n        public appService: AppService,\n        public selectionService: SelectionService,\n        public exprBuilder: ExprBuilder,\n        public cdRef: ChangeDetectorRef,\n        public audit: AuditWebService\n    ){\n        super();\n\n        // Update the events when the selection of records changes\n        this.selectionService.events.subscribe(event => {\n            const i = this.events.findIndex(e => (e as TimelineRecords).field);\n            if(i !== -1) {\n                this.events$[i].next(this.getRecordsAsEvents(this.events[i] as TimelineRecords));\n            }\n        });\n        \n        // Clear the current filters\n        this.clearFilters = new Action({\n            icon: \"far fa-minus-square\",\n            title: \"msg#facet.clearSelects\",\n            action: () => {\n                this.selection = undefined;\n                this.searchService.query.removeSelect(this.name);\n                this.searchService.search();\n            }\n        });\n\n    }\n\n    getMinDate(): Date | undefined {\n        return this.currentRange? this.currentRange[0] : this.minDate;\n    }\n\n    getMaxDate(): Date | undefined {\n        return this.currentRange? this.currentRange[1] : this.maxDate;\n    }\n\n    override get actions(): Action[] {\n        const actions: Action[] = [];\n        if(this.facetService.hasFiltered(this.name)){\n            actions.push(this.clearFilters);\n        }\n        return actions;\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n\n        // Skip simple changes (width, height, etc.) that don't require modifying the timeline data\n        if(!changes.timeseries && !changes.events && !changes.results) {\n            return;\n        }\n\n        // Retrieve the current active selection for this timeline (if any)\n        const select = this.searchService.query.findSelect(this.name);\n\n        // Update the selection if it is not already set (which is the case on a page refresh)\n        if(select && !this.selection) {\n            let parsedexpr = this.appService.parseExpr(select.expression) as Expr;\n            if(!Utils.isString(parsedexpr)){\n                while(!parsedexpr.isLeaf){ // The select might over multiple fields (modified between [...] AND created between [...])\n                    parsedexpr = parsedexpr.operands[0];\n                }\n                if(parsedexpr.values){\n                    this.selection = [new Date(parsedexpr.values[0]), new Date(parsedexpr.values[1])];\n                    // Guess a current range based on the selection\n                    if(!this.currentRange) {\n                        const interval = this.selection[1].getTime() - this.selection[0].getTime();\n                        this.currentRange = [ // Selected Interval +10% on each side\n                            new Date(this.selection[0].getTime()-interval*0.1),\n                            new Date(this.selection[1].getTime()+interval*0.1)\n                        ];\n                    }\n                }\n            }\n        }\n        // If no active selection we remove the selection from the timeline, along with the current zoomed range\n        else if(!select) {\n            this.selection = undefined; // If no select, it was possibly removed by the user, we need to update our selection\n            this.currentRange = undefined; // current range is set by zoom events, we want to reset it only if there are no select (ie. no user interaction)\n        }\n\n        // Initialize timeseries\n        if(!this.timeseries$ || changes[\"timeseries\"]) {\n            // Create one observable per timeline\n            this.timeseries$ = this.timeseries.map(_ => new ReplaySubject(1));\n            this.mergedTimeseries$ = combineLatest(this.timeseries$);\n        }\n\n        this.updateTimeseries();\n\n        // Initialize events\n        if(!this.events$ || changes[\"events\"]) {\n            this.events$ = this.events.map(_ => new ReplaySubject(1));\n            this.mergedEvents$ = combineLatest(this.events$).pipe(\n                map(events => ([] as TimelineEvent[]).concat(...events))\n            );\n        }\n\n        this.updateEvents();\n        \n    }\n\n    /**\n     * For each timeseries configuration given as an input,\n     * update the data via the list of observables (timelines$)\n     */\n    updateTimeseries() {\n        this.timeseries.forEach((config, i) => {\n\n            const subject = this.timeseries$[i];\n\n            if((config as TimelineSeries).dates !== undefined) {\n                subject.next(config as TimelineSeries);\n            }\n\n            else {\n                let agg = config as TimelineAggregation;\n                if(agg.aggregation === undefined){\n                    \n                    config = config as TimelineCombinedAggregations;\n                    // We want to set the default scale if it hasn't been set before\n                    // or if no zoom/selection has been made (so current scale may not be adapted to the new results)\n                    if(!this.currentRange || !config.current){\n                        config.current = config.default;\n                    }\n\n                    agg = config.current;\n                }\n                \n                const range: [Date, Date] | undefined = !!this.minAggregationDate && !!this.maxAggregationDate ?\n                    [this.minAggregationDate, this.maxAggregationDate] : undefined;\n\n                this.getTimeseries(agg, range).subscribe({\n                    next: d => subject.next(d),\n                    error: err => subject.error(err)\n                });\n            }\n\n        });\n    }\n\n    /**\n     * For each event configuration given as an input, \n     * update the data via the list of observables (events$)\n     */\n    updateEvents() {\n        this.events.forEach((config, i) => {\n            const subject = this.events$[i];\n\n            if((config as TimelineRecords).field) {\n                subject.next(this.getRecordsAsEvents(config as TimelineRecords));\n            }\n            else if((config as TimelineEventAggregation).aggregation){\n                this.getEventAggregation(config as TimelineEventAggregation).subscribe({\n                    next: t => subject.next(t),\n                    error: err => subject.error(err)\n                });\n            }\n            else if(Array.isArray(config)){\n                subject.next(config as TimelineEvent[]);\n            }\n        });\n    }\n\n    /**\n     * Get a timeseries aggregation via the getAggregation method.\n     * @param config \n     * @param subject \n     * @param range \n     */\n    getTimeseries(config: TimelineAggregation, range?: [Date, Date]): Observable {\n        return this.getAggregation(config.aggregation, range).pipe(\n            map(d => BsFacetTimelineComponent.createTimeseries(config, d.aggregation, d.ccaggregation, range))\n        );\n    }\n\n    /**\n     * Get an aggregation of events via the getAggregation method\n     * @param config \n     * @param subject \n     */\n    getEventAggregation(config: TimelineEventAggregation): Observable {\n        return this.getAggregation(config.aggregation).pipe(\n            map(d => BsFacetTimelineComponent.createAggregationEvents(config, d.aggregation, d.ccaggregation))\n        );\n    }\n\n    /**\n     * Returns the list of records from the results as a list of TimelineEvent when they have a\n     * modified date. The size and styles of the events are determined from the given configuration (TimelineRecords)\n     * @param config \n     */\n    getRecordsAsEvents(config: TimelineRecords): TimelineEvent[] {\n        if(this.results) {\n            return this.results.records\n                .filter(r => !!Utils.toDate(r[config.field]))\n                .map(r => {\n                    return {\n                        id: r.id,\n                        date: Utils.toDate(r[config.field])!,\n                        size: !config.size? 6 : typeof config.size === 'function'? config.size(r, r.$selected) : config.size,\n                        styles: !config.styles? BsFacetTimelineComponent.defaultRecordStyle(r.$selected) :\n                                typeof config.styles === 'function'? config.styles(r, r.$selected) : \n                                config.styles,\n                        display: config.display? config.display(r) : r.title,\n                        // Custom property for click action\n                        record: r\n                    }\n                });\n        }\n        return [];\n    }\n\n\n    /**\n     * returns an aggregation and its configuration either directly from the facet service of\n     * by fetching it from the server.\n     * @param aggregationName \n     * @param range \n     */\n    getAggregation(aggregationName: string, range?: [Date, Date]): Observable {\n        \n        const ccaggregation = this.appService.getCCAggregation(aggregationName);\n        const aggregation = this.facetService.getAggregation(aggregationName, this.results);\n        \n        if(aggregation && ccaggregation) {\n            return of({aggregation: aggregation, ccaggregation: ccaggregation});\n        }\n\n        else if(ccaggregation) {\n            return this.fetchAggregation(aggregationName, ccaggregation, range).pipe(\n                map(agg => {return {aggregation: agg, ccaggregation: ccaggregation} })\n            );\n        }\n\n        else {\n            throw new Error(`Aggregation ${aggregationName} does not exist in the Query web service`);\n        }\n    }\n\n    /**\n     * Get an aggregation from the server, filtering by range if provided\n     * @param aggregation \n     * @param ccaggregation \n     * @param range \n     */\n    fetchAggregation(aggregation: string, ccaggregation: CCAggregation, range?: [Date, Date]): Observable {\n        const query = Utils.copy(this.searchService.query);\n        query.action = \"aggregate\";\n        query.aggregations = [aggregation];\n\n        if(range){\n            query.addSelect(`${ccaggregation.column}:[${this.formatDayRequest(range[0])}..${this.formatDayRequest(range[1])}]`);\n        }\n\n        return this.searchService.getResults(query, undefined, {searchInactive: true}).pipe(\n            map(results => results.aggregations[0])\n        );\n    }\n\n    /**\n     * Given a combined aggregation configuration and a range, this method searches for the most \n     * adapted aggregation scale (years, months, weeks or days) and updates the data if necessary.\n     * @param config \n     * @param range \n     * @param iTimeseries \n     */\n    updateCombinedAggregation(config: TimelineCombinedAggregations, range: [Date, Date], timeseries$: ReplaySubject) {\n        const nmonths = d3.timeMonth.count(range[0], range[1]);\n\n        if(!config.maxNMonths || config.maxNMonths.length !== config.aggregations.length) {\n            console.error(config);\n            throw new Error(\"maxNMonths and aggregations must have the same number of items\");\n        }\n\n        // Find the aggregation with min maxNMonths with maxNMonths >= nmonths\n        let jMin;\n        config.maxNMonths.forEach((maxNMonths, j) => {\n            if(maxNMonths >= nmonths && (jMin === undefined || maxNMonths  this.currentRange[1])) {\n\n            config.current = bestAggregation;\n            this.getTimeseries(bestAggregation, range).subscribe({\n                next: d => timeseries$.next(d),\n                error: err => timeseries$.error(err)\n            });\n        }\n\n    }\n\n\n    // Interaction callbacks\n\n    /**\n     * On selection is triggered when the user selects a range of dates on the timeline.\n     * This has the effect of updating the query.select (either remove it or add/replace it)\n     * and it updates the search.\n     * @param selection \n     */\n    onSelectionChange(selection: [Date, Date] | undefined) {\n        this.selection = selection;\n        if(selection) {\n            const from = this.formatDayRequest(selection[0]);\n            const to = this.formatDayRequest(selection[1]);\n\n            const exprs: string[] = [];\n            this.searchService.query.removeSelect(this.name);\n\n            this.timeseries.forEach((config) => {\n                    \n                if((config as TimelineAggregation).aggregation !== undefined \n                || (config as TimelineCombinedAggregations).default !== undefined) {\n\n                    const aggregation = (config as TimelineAggregation).aggregation || (config as TimelineCombinedAggregations).default.aggregation;\n                    const ccaggregation = this.appService.getCCAggregation(aggregation);\n                    if(ccaggregation) {\n                        exprs.push(this.exprBuilder.makeRangeExpr(ccaggregation.column, from, to));\n                    }\n                }\n\n            });\n\n            if(exprs.length > 0) {\n                const expr = this.exprBuilder.concatOrExpr(exprs);\n                this.searchService.query.addSelect(expr, this.name);\n                this.searchService.search(undefined, {type:AuditEventType.Search_Timeline_Usage, detail: { from, to }});\n            }            \n        }\n\n        else if(this.searchService.query.findSelect(this.name)) {\n            this.searchService.query.removeSelect(this.name);\n            this.searchService.search();\n        }\n    }\n\n    /**\n     * On range is triggered when the user zooms in our out on the timeline,\n     * which triggers a dynamic update of the combined aggregation timelines.\n     * @param range \n     */\n    onRangeChange(range: [Date, Date]) {\n\n        this.timeseries.forEach((config, i) => {\n            if((config as TimelineCombinedAggregations).aggregations !== undefined) {\n                this.updateCombinedAggregation(config as TimelineCombinedAggregations, range, this.timeseries$[i]);\n            }\n        });\n\n        // Note: updateCombinedAggregation() compares currentRange and range\n        // So this update must be kept after the forEach\n        this.currentRange = range;\n    }\n\n    /**\n     * When an event is clicked, the event is propagated to the parent, and the tooltip is closed\n     * @param event \n     * @param closeTooltip \n     */\n    onEventClicked(event: TimelineEvent, closeTooltip: () => void) {\n        this.eventClicked.next(event);\n        closeTooltip();\n        return false;\n    }\n\n\n    // Static utility methods\n    \n    \n    /**\n     * Create a time series object from its config, data (aggregation) and configuration (ccaggregation)\n     * @param config \n     * @param aggregation \n     * @param ccaggregation \n     */\n    static createTimeseries(config: TimelineAggregation, aggregation: Aggregation, ccaggregation: CCAggregation, range?: [Date, Date]): TimelineSeries {\n        return {\n            ...config,\n            name: config.name || aggregation.name,\n            dates: this.createDatapoints(aggregation.items, ccaggregation?.mask, range),\n        }\n    }\n\n    /**\n     * Create a list of events from its config, data (aggregation) and configuration (ccaggregation)\n     * @param config \n     * @param aggregation \n     * @param ccaggregation \n     */\n    static createAggregationEvents(config: TimelineEventAggregation, aggregation: Aggregation, ccaggregation: CCAggregation): TimelineEvent[] {\n        return !aggregation.items? [] : aggregation.items.map(item => {\n            return {\n                id: config.getDate(item).toUTCString()+\"|\"+config.getDisplay(item),\n                date: config.getDate(item),\n                size: !config.size? 6 : typeof config.size === 'function'? config.size(item) : config.size,\n                styles: !config.styles? undefined :\n                        typeof config.styles === 'function'? config.styles(item) : \n                        config.styles,                \n                display: config.getDisplay(item),\n\n                // Custom params for click action\n                item: item,\n                aggregation: aggregation,\n                ccaggregation: ccaggregation\n            }\n        });\n    }\n\n    /**\n     * This methods transforms a raw list of aggregation items into\n     * a time series completed with zeros, following the below scheme:\n     * Aggregation:  [    # #         # # #   #     # #       # # #    ]\n     * Series:       [  0 # # 0     0 # # # 0 # 0 0 # # 0   0 # # # 0  ]\n     * @param items \n     * @param resolution \n     */\n    static createDatapoints(items: AggregationItem[] | undefined, resolution: string, range?: [Date, Date]): TimelineDate[] {\n\n        if(!items) {\n            return [];\n        }\n\n        const timeInterval = this.getD3TimeInterval(resolution);\n        \n        const series: TimelineDate[] = [];\n\n        const _items = items\n            .map(item => {\n                if(!!item.value && !(item.value instanceof Date)){\n                    const val = item.value.toString();\n                    item.value = moment(val.length  undefined; // So it gets filtered out\n                    }\n                }\n                return item;\n            })\n            .filter(item => !!item.value && (!range || ((item.value as Date) >= range[0] && (item.value as Date)  {\n            const date = item.value as Date;\n            \n            if(i === 0 || timeInterval.offset(series[series.length-1].date, 1)  item.date = this.shiftDate(item.date, resolution));\n\n        return series;\n    }\n\n    \n    /**\n     * Shift the date to the middle of their time bracket (2020 = middle of the year, April = middle of the month, etc.)\n     * @param date \n     * @param resolution \n     */\n    static shiftDate(date: Date, resolution: string): Date {\n        switch(resolution){\n            case \"YYYY-MM-DD\": return d3.timeHour.offset(date, 12);\n            case \"YYYY-WW\": return d3.timeHour.offset(date, 84); // 3*24 + 12\n            case \"YYYY-MM\": return d3.timeDay.offset(date, 15);\n            case \"YYYY\": return d3.timeMonth.offset(date, 6);\n        }\n        return date;\n    }\n\n\n    static getD3TimeInterval(resolution: string): d3.CountableTimeInterval {\n        switch(resolution){\n            case \"YYYY-MM-DD\": return d3.timeDay;\n            case \"YYYY-WW\": return d3.timeWeek;\n            case \"YYYY-MM\": return d3.timeMonth;\n            case \"YYYY\": return d3.timeYear;\n        }\n        return d3.timeDay;\n    }\n\n    static defaultRecordStyle(selected: boolean): {[key: string]: any} {\n        return {\n            'fill': selected? 'red' : 'green',\n            'stroke': selected? 'red' : undefined,\n            'stroke-width': selected? '2px' : undefined\n        };\n    }\n}\n    \n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/TimelineDate.html":{"url":"interfaces/TimelineDate.html","title":"interface - TimelineDate","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  TimelineDate\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            timeline/bootstrap/timeline.component.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            date\n                                        \n                                \n                                \n                                        \n                                            value\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        date\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        date:         Date\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Date\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        value\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        value:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Component, Input, Output, ElementRef, ViewChild, OnChanges, AfterViewInit, EventEmitter, SimpleChanges, OnDestroy, SimpleChange, ContentChild, TemplateRef, ChangeDetectorRef } from '@angular/core';\nimport { Subscription } from 'rxjs';\nimport * as d3 from 'd3';\n\nimport { IntlService } from '@sinequa/core/intl';\nimport {Record} from '@sinequa/core/web-services';\n\n\nexport interface TimelineDate {\n    date: Date;\n    value: number;\n}\n\nexport interface TimelineSeries {\n    name: string;\n    dates: TimelineDate[];\n    primary: boolean;\n    lineStyles?: {[key:string]: any};\n    areaStyles?:  {[key:string]: any};\n    showDatapoints?: boolean;\n}\n\nexport interface TimelineEvent {\n    date: Date;\n    id: string;\n    display: string;\n    size?: number;\n    sizeOpened?: number;\n    styles?: {[key:string]: any};\n    record?: Record;\n}\n\n@Component({\n    selector: 'sq-timeline',\n    templateUrl: './timeline.component.html',\n    styleUrls: ['./timeline.component.scss']\n})\nexport class BsTimelineComponent implements OnChanges, AfterViewInit, OnDestroy {\n\n    @Input() data?: TimelineSeries[];\n    @Input() events?: TimelineEvent[];\n\n    @Input() selection?: [Date|undefined, Date|undefined];\n\n    // Initial scale (prior to any zoom)\n    @Input() minDate?: Date;\n    @Input() maxDate?: Date;\n\n    @Input() zoomable = true;\n    @Input() minZoomDays = 1; // Max 1 day scale\n    @Input() maxZoomDays = 365 * 100; // Max 100 years scale\n\n    @Input() width = 600;\n    @Input() height = 200;\n    @Input() margin = {top: 15, bottom: 20, left: 40, right: 15};\n\n    @Input() curveType = \"curveMonotoneX\";\n\n    @Input() showTooltip = true;\n    @Input() theme: \"light\" | \"dark\" = \"light\";\n\n    @Output() selectionChange = new EventEmitter();\n    @Output() rangeInit = new EventEmitter();\n    @Output() rangeChange = new EventEmitter();\n\n    @ContentChild(\"tooltipTpl\", {static: false}) tooltipTpl: TemplateRef;\n\n    // Data\n    groupedEvents: TimelineEvent[][] = [];\n\n    // Scales\n    x: d3.ScaleTime; // Read/Write\n    xt: d3.ScaleTime; // Transformed X axis due to Zoom\n    y: d3.ScaleLinear; // Read-only / domain updated\n\n    // Shapes\n    area: d3.Area; // Read only\n    line: d3.Line; // Read only\n\n    // Behaviors\n    brushBehavior: d3.BrushBehavior; // Read only\n    zoomBehavior: d3.ZoomBehavior; // Read/Write\n    brushSelection: [number, number] | null;\n    currentSelection?: (Date|undefined)[]; // Read/Write\n\n    // Elements\n    @ViewChild(\"xAxis\") gx: ElementRef;\n    @ViewChild(\"yAxis\") gy: ElementRef;\n    @ViewChild(\"brush\") gbrush: ElementRef;\n\n    // Selections\n    xAxis$: d3.Selection;\n    yAxis$: d3.Selection;\n    brush$: d3.Selection;\n    grips$: d3.Selection;\n\n    // Tooltip\n    tooltipItem: TimelineEvent[] | undefined;\n    tooltipX: number | undefined;\n    tooltipDatapoints?: (TimelineDate|undefined)[];\n    tooltipOrientation: \"left\" | \"right\";\n    tooltipTop: number;\n    tooltipRight: number;\n    tooltipLeft: number;\n    bisectDate = d3.bisector(d => { return d.date; }).left;\n\n    // Misc\n    viewInit: boolean;\n    intlSubscription: Subscription;\n    static counter = 0;\n    instance: number;\n\n    zooming: boolean;\n    brushing: boolean;\n\n    constructor(\n        protected el: ElementRef,\n        protected intlService: IntlService,\n        protected cdRef: ChangeDetectorRef\n    ){\n        // When the locale changes, we rebuild the X scale and axis\n        this.intlSubscription = this.intlService.events.subscribe(e => this.updateXAxis());\n\n        this.instance = BsTimelineComponent.counter++;\n\n    }\n\n    get innerWidth(): number {\n        return this.width - this.margin.left - this.margin.right;\n    }\n\n    get innerHeight(): number {\n        return this.height - this.margin.top - this.margin.bottom;\n    }\n\n    // Note: ngOnChanges is always called once before ngAfterViewInit\n    ngOnChanges(changes: SimpleChanges) {\n\n        if(!this.x) {\n\n            // Scales\n            this.x = d3.scaleUtc()\n                .range([0, this.innerWidth]);\n            this.xt = this.x;\n\n            this.y = d3.scaleLinear()\n                .range([this.innerHeight, 0]);\n\n            // Shapes\n            this.area = d3.area()\n                .curve(d3[this.curveType])\n                .x(d => this.xt(d.date)!)\n                .y0(this.y(0)!)\n                .y1(d => this.y(d.value)!);\n\n            this.line = d3.line()\n                .curve(d3[this.curveType])\n                .x(d => this.xt(d.date)!)\n                .y(d => this.y(d.value)!);\n\n            // Behaviors\n            this.brushBehavior = d3.brushX()\n                .extent([[0, 0], [this.innerWidth, this.innerHeight]])\n                .on(\"start\", () => this.brushing = true)\n                .on('brush', () => this.onBrush())\n                .on('end', () => this.onBrushEnd());\n        }\n\n        // Resize handling\n\n        if(changes[\"height\"]) {\n            this.y.range([this.innerHeight, 0]);\n            this.area.y0(this.y(0)!);\n            this.brushBehavior.extent([[0, 0], [this.innerWidth, this.innerHeight]]);\n            if(this.viewInit) {\n                this.drawYAxis();\n                this.brush$.call(this.brushBehavior);\n                this.grips$.selectAll(\"path\").attr(\"d\", this.drawGrips);\n            }\n        }\n\n        if(changes[\"width\"]) {\n            this.x.range([0, this.innerWidth]);\n            this.brushBehavior.extent([[0, 0], [this.innerWidth, this.innerHeight]]);\n            if(this.viewInit) {\n                this.drawXAxis();\n                if(!changes[\"height\"]) {\n                    this.brush$.call(this.brushBehavior);\n                    this.grips$.selectAll(\"path\").attr(\"d\", this.drawGrips);\n                }\n            }\n        }\n\n        // If the parent changes the selection, we want to update it\n        // If not, we keep the current selection as is\n        // (Important to keep this statement outside of the if bellow since\n        // the change of selection can be combined with a change of data)\n        const selectionChanged = changes[\"selection\"] && this.updateSelection();\n\n        // Only changes in data result in redrawing the chart\n        // (other input, except selection, are expected to be static)\n        if(this.viewInit && changes[\"data\"] && this.checkDataChanges(changes[\"data\"])){\n            this.updateChart();\n        }\n\n        // If the parent changes the selection (even though the data hasn't changed),\n        // we want to update the brush.\n        // If not, we keep the current selection as is.\n        // We can update the brush only if the view is initialized (viewInit).\n        else if(this.viewInit && ((changes[\"selection\"] && selectionChanged) || changes[\"width\"])) {\n            this.updateBrush();\n        }\n\n        if(changes[\"events\"]) {\n            this.updateEvents();\n        }\n\n    }\n\n    // Note: In onAfterViewInit we can access gx, gy, etc., obtained with @ViewChild.\n    // At this point we can initialize all the primitives and call updateChart()\n    ngAfterViewInit() {\n\n        // Get native elements\n        this.xAxis$ = d3.select(this.gx.nativeElement);\n        this.yAxis$ = d3.select(this.gy.nativeElement);\n        this.brush$ = d3.select(this.gbrush.nativeElement);\n\n        this.brush$\n            .call(this.brushBehavior)\n            .on(\"mousemove\", () => this.onMousemove())\n            .on(\"mouseout\", () => this.onMouseout());\n\n        // Add 2 \"grips\" to the brush goup, on each side of the rectangle\n        // Grips are inserted programmatically to appear on top the brush selection\n        this.grips$ = this.brush$.selectAll(\".grip\")\n            .data([{type: \"w\"}, {type: \"e\"}])\n            .enter()\n            .append(\"g\")\n            .attr(\"class\", \"grip\")\n            .attr(\"display\", \"none\");\n\n        this.grips$.append(\"path\")\n            .attr(\"d\", this.drawGrips);\n\n        this.grips$.append(\"text\")\n            .attr(\"class\", \"grip-text\")\n            .attr(\"text-anchor\", d => d.type === \"w\"? 'end' : 'start')\n            .attr(\"x\", d => d.type === \"w\"? -5 : 5)\n            .attr(\"y\", 10);\n\n        this.viewInit = true;\n\n        this.updateChart();\n\n        // This is necessary to prevent \"Expression has changed after check\" errors\n        // caused by calling updateChart inside ngAfterViewInit().\n        // Unfortunately this is necessary because we need the DOM to be rendered in order fill the DOM\n        // (for example gAxis needs to exist so we can draw the axis)\n        this.cdRef.detectChanges();\n    }\n\n    /**\n     * Redraw the graph (needs to be called after ngAfterViewInit so that the DOM elements\n     * are accessible)\n     */\n    updateChart() {\n\n        this.turnoffTooltip();\n\n        if(this.data && this.data.length) {\n\n            // Update scales\n            // Note: does not stop the update process even if the data is invalid/empty\n            this.updateScales(this.data);\n\n            // Update Axes\n            this.updateAxes();\n\n            // Update Zoom\n            this.updateZoom();\n\n            // Update brush\n            this.updateBrush();\n\n        }\n\n    }\n\n\n    /**\n     * Update the x & y scales, based on the input data\n     * @param data\n     */\n    protected updateScales(data: TimelineSeries[]) {\n\n        // Set x and y scales with the primary series (or first one)\n        const primarySeries = data.filter(s => s.primary) || [data[0]];\n        const allPrimaryDates = ([] as TimelineDate[]).concat(...primarySeries.map(s => s.dates));\n\n        const xExtent = d3.extent(allPrimaryDates, d => d.date);\n        const yMax = d3.max(data,\n            s => d3.max(s.dates, d => d.value));\n\n        // Check validity of data\n        if(!xExtent[0] || !xExtent[1] || !yMax) {\n            if (allPrimaryDates.length !== 0) {\n                console.error('Invalid timeseries', primarySeries);\n            }\n            this.x.domain(this.xt.domain());\n            this.xt = this.x;\n            return;\n        }\n\n        // Enforce minimum date\n        if(this.minDate) {\n            xExtent[0] = this.minDate;\n        }\n\n        // Enforce maximum date\n        if(this.maxDate) {\n            xExtent[1] = this.maxDate;\n        }\n\n        // Enforce minimum scale (especially when the timeseries contains a single datapoint)\n        const diff = xExtent[1].getTime() - xExtent[0].getTime();\n        const minDiff = this.minZoomDays * 24 * 60 * 60 * 1000;\n        if(diff  this.rangeInit.next(this.xt.domain()));\n    }\n\n    /**\n     * Update the x and y axes\n     */\n    protected updateAxes(){\n        this.drawXAxis();\n        this.drawYAxis();\n    }\n\n    /**\n     * The events are drawn in the template directly. This method simply\n     * updates the grouping of events (when they are close to each other)\n     */\n    protected updateEvents() {\n        this.groupedEvents = this.groupEvents(5);\n    }\n\n    /**\n     * Update/reset the zoom behavior when new data comes in (and new scales, axes...)\n     */\n    protected updateZoom() {\n\n        if(!this.zoomable) {\n            return;\n        }\n\n        // Reset the previous zoom !\n        if(this.zoomBehavior){\n            this.zoomBehavior.on(\"zoom\", null);\n            this.zoomBehavior.on(\"end\", null);\n            this.zoomBehavior.transform(this.brush$, d3.zoomIdentity);\n        }\n\n        // Compute the minimum and maximum zoom\n        const xDomain = this.x.domain();\n        const scaleExtent = (xDomain[1].getTime() - xDomain[0].getTime()) / 86400000; // current number of days on the scale\n\n        // Create the behavior\n        this.zoomBehavior = d3.zoom()\n            .extent([[0, 0], [this.innerWidth, this.innerHeight]])\n            .scaleExtent([scaleExtent/this.maxZoomDays, scaleExtent/this.minZoomDays])\n            .on(\"zoom\", () => this.onZoom())\n            .on(\"end\", () => this.onZoomEnd());\n\n        // Apply on to the brush element\n        this.brush$\n            .call(this.zoomBehavior)\n            .on(\"mousedown.zoom\", null) // Deactivate mouse event (taken by brush)\n            .on(\"touchstart.zoom\", null)\n            .on(\"touchmove.zoom\", null)\n            .on(\"touchend.zoom\", null);\n\n    }\n\n    /**\n     * Updates the brush (or hides it if no currentSelection),\n     * following a change of x scale.\n     * Number.MIN_VALUE and Number.MAX_VALUE are used to support semi-open intervals\n     */\n    protected updateBrush() {\n        if(this.currentSelection) {\n            const x0 = this.currentSelection[0] ? this.xt(this.currentSelection[0])! : Number.MIN_VALUE;\n            const x1 = this.currentSelection[1] ? this.xt(this.currentSelection[1])! : Number.MAX_VALUE;\n            const selection: [number, number] = [x0,x1];\n            this.brush$.call(this.brushBehavior.move, selection);\n        }\n        else {\n            this.brush$.call(this.brushBehavior.move, null);\n        }\n    }\n\n    /**\n     * This method tests whether the input selection is different from the currentSelection\n     * and updates it. It returns true if there is actually a change.\n     */\n    protected updateSelection(): boolean {\n        const change = this.checkSelectionChange(this.selection, this.currentSelection);\n        this.currentSelection = this.selection;\n        return change;\n    }\n\n    /**\n     * Recreate the x scale and axes (in the event of a language change)\n     */\n    protected updateXAxis(){\n        this.x = d3.scaleUtc()\n            .domain(this.x.domain())\n            .range(this.x.range());\n\n        this.xt = d3.scaleUtc()\n            .domain(this.xt.domain())\n            .range(this.xt.range());\n\n        this.drawXAxis();\n    }\n\n    /**\n     * Draws the X axis\n     */\n    protected drawXAxis() {\n        const nTicks = Math.round(this.width / 100);\n        this.xAxis$.call(d3.axisBottom(this.xt).ticks(nTicks));\n        this.xAxis$.selectAll(\".domain\").remove(); // Remove the axis line\n    }\n\n    /**\n     * Draws the Y axis\n     */\n    protected drawYAxis() {\n        const nTicks = Math.round(this.height / 40);\n\n        const yAxisTicks = this.y.ticks(nTicks)\n            .filter(tick => Number.isInteger(tick)); // Keep only integer ticks https://stackoverflow.com/questions/13576906/d3-tick-marks-on-integers-only/56821215\n\n        const yAxis = d3.axisLeft(this.y)\n            .tickValues(yAxisTicks)\n            .tickFormat(d3.format(\"~s\")); //https://github.com/d3/d3-format\n        this.yAxis$.call(yAxis);\n        this.yAxis$.selectAll(\".domain\").remove(); // Remove the axis line\n    }\n\n    /**\n     * Updates the display of the brush's grips when the brush has moved\n     * When the selection is a semi-open interval, we don't display the infinite border\n     * @param selection\n     */\n    protected updateGrips(selection: [number, number] | null) {\n        if (!selection) {\n            this.grips$.attr(\"display\", \"none\");\n        }\n        else {\n            this.grips$\n                .attr(\"display\", (d, i) => (selection[i] === Number.MAX_VALUE || selection[i] === Number.MIN_VALUE) ? \"none\" : null)\n                .attr(\"transform\", (d, i) => (selection[i] === Number.MAX_VALUE || selection[i] === Number.MIN_VALUE) ? null : \"translate(\" + selection[i] + \")\");\n            this.grips$.selectAll('.grip-text')\n                .text(\n                    (d) => {\n                        const index = d.type === 'w'? 0 : 1;\n                        return (selection[index] === Number.MAX_VALUE || selection[index] === Number.MIN_VALUE) ? null : this.intlService.formatDate(this.xt.invert(selection[index]))\n                    }\n                );\n        }\n    }\n\n\n    // Interaction callbacks\n\n    onBrush() {\n        this.turnoffTooltip();\n        this.brushSelection = d3.brushSelection(this.gbrush.nativeElement) as [number, number] | null;\n        this.updateGrips(this.brushSelection);\n    }\n\n    onBrushEnd(){\n        this.brushing = false;\n        this.onBrush();\n        const newSelection = this.brushSelection\n            ?.sort((a,b)=>a-b)\n            .map(x => (x === Number.MAX_VALUE || x === Number.MIN_VALUE) ? undefined : this.xt.invert(x));\n        if(this.checkSelectionChange(this.currentSelection, newSelection)) {\n            this.currentSelection = newSelection;\n            this.selectionChange.next(this.currentSelection);\n        }\n    }\n\n    onZoom(){\n\n        this.turnoffTooltip();\n\n        this.zooming = true;\n\n        // Create a transformed scale without modifying the original (to enforce the limit of scaleExtent)\n        const transform = d3.zoomTransform(this.brush$.node() as Element);\n        this.xt = transform.rescaleX(this.x);\n\n        // Redraw the axis\n        this.drawXAxis();\n\n        // Update the brush position\n        if(this.currentSelection){\n            const x0 = this.currentSelection[0] ? this.xt(this.currentSelection[0])! : Number.MIN_VALUE;\n            const x1 = this.currentSelection[1] ? this.xt(this.currentSelection[1])! : Number.MAX_VALUE;\n            const selection: [number, number] = [x0,x1];\n            this.brushBehavior.move(this.brush$, selection);\n        }\n\n    }\n\n    onZoomEnd(){\n        this.zooming = false;\n\n        // At the end of a zoom, we need to reorganize the grouping of events\n        this.updateEvents();\n\n        // Fire an event\n        this.rangeChange.next(this.xt.domain());\n    }\n\n    /**\n     * Redraw the simple tooltip (vertical line)\n     */\n    onMousemove() {\n        if(!this.tooltipItem && this.showTooltip) {\n            this.tooltipX = d3.mouse(this.gbrush.nativeElement)[0];\n            const date = this.xt.invert(this.tooltipX);\n            this.tooltipDatapoints = this.data?.map(series => {\n              if(!series.showDatapoints) return;\n              const i = this.bisectDate(series.dates, date);\n              const d0 = series.dates[i - 1];\n              const d1 = series.dates[i];\n              if(!d0 || !d1) return;\n              return date.getTime() - d0.date.getTime() > d1.date.getTime() - date.getTime() ? d1 : d0;\n            });\n        }\n    }\n\n    /**\n     * Remove the simple tooltip (vertical line)\n     */\n    onMouseout() {\n        if(!this.tooltipItem) {\n            this.tooltipX = undefined\n        }\n    }\n\n    /**\n     * Responds to a click on an event (triangle) by essentially turning tooltip on/off\n     * @param event\n     */\n    onEventClick(event: TimelineEvent[]) {\n\n        if(this.tooltipItem === event) {\n            this.turnoffTooltip();\n        }\n\n        else {\n\n            if(this.tooltipItem) {\n                this.turnoffTooltip();\n            }\n\n            this.tooltipItem = event;\n            this.tooltipX = this.xt(event[0].date);\n\n            // Since we use viewBox to auto-adjust the SVG to the container size, we have to\n            // convert from the SVG coordinate system to the HTML coordinate system\n            const x = this.margin.left + this.tooltipX!;\n            const actualWidth = (this.el.nativeElement as HTMLElement).offsetWidth;\n            const scale = actualWidth / this.width;\n            const relativeX = x / this.width;\n\n            // Tooltip to the right\n            if(relativeX  {\n        if(this.tooltipItem) {\n            this.tooltipItem = undefined;\n            this.tooltipX = undefined;\n        }\n    }\n\n    ngOnDestroy(){\n        this.intlSubscription.unsubscribe();\n    }\n\n    // Utilities\n\n    /**\n     * Transforms the input list of events into a list of list, by grouping events within a bin\n     * when their dates are close together. This closeness is measured in \"pixel per event\".\n     * Note: this currently uses a histogram-like algorithm, which could probably be improved (clustering?)\n     * @param pixPerEvent\n     */\n    protected groupEvents(pixPerEvent: number): TimelineEvent[][] {\n        const events: TimelineEvent[][] = [];\n\n        if(this.events) {\n            const nbins = Math.floor(this.innerWidth / pixPerEvent);\n            const domain = this.xt.domain();\n            const timeinterval = (domain[1].getTime() - domain[0].getTime()) / nbins;\n            this.events.concat()\n                .sort((a,b) => a.date.getTime() - b.date.getTime())\n                .forEach(event => {\n                    if(events.length === 0) {\n                        events.push([event]);\n                    }\n                    else {\n                        const last = events[events.length-1];\n                        const lastbin = Math.floor(last[0].date.getTime() / timeinterval);\n                        const bin = Math.floor(event.date.getTime() / timeinterval);\n                        if(bin === lastbin) {\n                            last.push(event);\n                        }\n                        else {\n                            events.push([event]);\n                        }\n                    }\n                });\n        }\n\n        return events;\n    }\n\n    /**\n     * Return true if there are actual changes in the data\n     * (in particular will ignore data refresh which change nothing)\n     * @param change\n     */\n    protected checkDataChanges(change: SimpleChange): boolean {\n        const previousValue = change.previousValue as TimelineSeries[] | undefined;\n        const currentValue = change.currentValue as TimelineSeries[] | undefined;\n\n        // Ignore null/undefined difference cause by | async\n        // See: https://github.com/angular/angular/issues/16982\n        if(currentValue === null && previousValue === undefined || currentValue === undefined && previousValue === null)\n            return false;\n\n        // Else, if one of them is null/undefined (or difference in length), there's clearly a change\n        if(!previousValue || !currentValue || previousValue.length !== currentValue.length)\n            return true;\n\n        // If both defined and same size, we need to compare the data piece by piece\n        for(let i=0; i {\n        const gripHeight = Math.min(10, Math.max((this.innerHeight) / 8, 4));\n        const gripWidth = gripHeight;\n\n        const x = -gripWidth / 2;\n        const y = this.innerHeight / 2 - gripHeight / 2;\n\n        const path =\n            'M ' + x + ' ' + y +\n            ' l ' + -gripWidth + ' ' + gripHeight / 2 +\n            ' l ' + gripWidth + ' ' + gripHeight / 2 + ' z ' +\n            'M ' + -x + ' ' + y +\n            ' l ' + gripWidth + ' ' + gripHeight / 2 +\n            ' l ' + -gripWidth + ' ' + gripHeight / 2 + ' z ' +\n            'M 0 ' + 0 + ' l 0 ' + this.innerHeight + ' z ';\n        return path;\n    }\n\n    /**\n     * Returns the size of the triangle drawn for one event (or a group of events)\n     * @param events\n     */\n    eventSize(events: TimelineEvent[]): number {\n        if(events!==this.tooltipItem) {\n            return events[0].size || 6;\n        }\n        else {\n            return events[0].sizeOpened || (events[0].size || 6)*2;\n        }\n    }\n\n    /**\n     * Return a string containing the path coordinates of a triangle for a given event (or group of events)\n     * @param events\n     * @param size\n     */\n    drawEvents(events: TimelineEvent[], size: number): string {\n        const x = this.xt(events[0].date);\n        return 'M ' + x + ' ' + (this.innerHeight - 3*size/2) +\n            ' l ' + -size + ' ' + (3*size/2) +\n            ' l ' + (2*size) + ' ' + 0 + ' z ';\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/TimelineEvent.html":{"url":"interfaces/TimelineEvent.html","title":"interface - TimelineEvent","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  TimelineEvent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            timeline/bootstrap/timeline.component.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            date\n                                        \n                                \n                                \n                                        \n                                            display\n                                        \n                                \n                                \n                                        \n                                            id\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            record\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            size\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            sizeOpened\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            styles\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        date\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        date:         Date\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Date\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        display\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        display:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        id:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        record\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        record:     Record\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Record\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        size\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        size:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        sizeOpened\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        sizeOpened:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        styles\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        styles:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Component, Input, Output, ElementRef, ViewChild, OnChanges, AfterViewInit, EventEmitter, SimpleChanges, OnDestroy, SimpleChange, ContentChild, TemplateRef, ChangeDetectorRef } from '@angular/core';\nimport { Subscription } from 'rxjs';\nimport * as d3 from 'd3';\n\nimport { IntlService } from '@sinequa/core/intl';\nimport {Record} from '@sinequa/core/web-services';\n\n\nexport interface TimelineDate {\n    date: Date;\n    value: number;\n}\n\nexport interface TimelineSeries {\n    name: string;\n    dates: TimelineDate[];\n    primary: boolean;\n    lineStyles?: {[key:string]: any};\n    areaStyles?:  {[key:string]: any};\n    showDatapoints?: boolean;\n}\n\nexport interface TimelineEvent {\n    date: Date;\n    id: string;\n    display: string;\n    size?: number;\n    sizeOpened?: number;\n    styles?: {[key:string]: any};\n    record?: Record;\n}\n\n@Component({\n    selector: 'sq-timeline',\n    templateUrl: './timeline.component.html',\n    styleUrls: ['./timeline.component.scss']\n})\nexport class BsTimelineComponent implements OnChanges, AfterViewInit, OnDestroy {\n\n    @Input() data?: TimelineSeries[];\n    @Input() events?: TimelineEvent[];\n\n    @Input() selection?: [Date|undefined, Date|undefined];\n\n    // Initial scale (prior to any zoom)\n    @Input() minDate?: Date;\n    @Input() maxDate?: Date;\n\n    @Input() zoomable = true;\n    @Input() minZoomDays = 1; // Max 1 day scale\n    @Input() maxZoomDays = 365 * 100; // Max 100 years scale\n\n    @Input() width = 600;\n    @Input() height = 200;\n    @Input() margin = {top: 15, bottom: 20, left: 40, right: 15};\n\n    @Input() curveType = \"curveMonotoneX\";\n\n    @Input() showTooltip = true;\n    @Input() theme: \"light\" | \"dark\" = \"light\";\n\n    @Output() selectionChange = new EventEmitter();\n    @Output() rangeInit = new EventEmitter();\n    @Output() rangeChange = new EventEmitter();\n\n    @ContentChild(\"tooltipTpl\", {static: false}) tooltipTpl: TemplateRef;\n\n    // Data\n    groupedEvents: TimelineEvent[][] = [];\n\n    // Scales\n    x: d3.ScaleTime; // Read/Write\n    xt: d3.ScaleTime; // Transformed X axis due to Zoom\n    y: d3.ScaleLinear; // Read-only / domain updated\n\n    // Shapes\n    area: d3.Area; // Read only\n    line: d3.Line; // Read only\n\n    // Behaviors\n    brushBehavior: d3.BrushBehavior; // Read only\n    zoomBehavior: d3.ZoomBehavior; // Read/Write\n    brushSelection: [number, number] | null;\n    currentSelection?: (Date|undefined)[]; // Read/Write\n\n    // Elements\n    @ViewChild(\"xAxis\") gx: ElementRef;\n    @ViewChild(\"yAxis\") gy: ElementRef;\n    @ViewChild(\"brush\") gbrush: ElementRef;\n\n    // Selections\n    xAxis$: d3.Selection;\n    yAxis$: d3.Selection;\n    brush$: d3.Selection;\n    grips$: d3.Selection;\n\n    // Tooltip\n    tooltipItem: TimelineEvent[] | undefined;\n    tooltipX: number | undefined;\n    tooltipDatapoints?: (TimelineDate|undefined)[];\n    tooltipOrientation: \"left\" | \"right\";\n    tooltipTop: number;\n    tooltipRight: number;\n    tooltipLeft: number;\n    bisectDate = d3.bisector(d => { return d.date; }).left;\n\n    // Misc\n    viewInit: boolean;\n    intlSubscription: Subscription;\n    static counter = 0;\n    instance: number;\n\n    zooming: boolean;\n    brushing: boolean;\n\n    constructor(\n        protected el: ElementRef,\n        protected intlService: IntlService,\n        protected cdRef: ChangeDetectorRef\n    ){\n        // When the locale changes, we rebuild the X scale and axis\n        this.intlSubscription = this.intlService.events.subscribe(e => this.updateXAxis());\n\n        this.instance = BsTimelineComponent.counter++;\n\n    }\n\n    get innerWidth(): number {\n        return this.width - this.margin.left - this.margin.right;\n    }\n\n    get innerHeight(): number {\n        return this.height - this.margin.top - this.margin.bottom;\n    }\n\n    // Note: ngOnChanges is always called once before ngAfterViewInit\n    ngOnChanges(changes: SimpleChanges) {\n\n        if(!this.x) {\n\n            // Scales\n            this.x = d3.scaleUtc()\n                .range([0, this.innerWidth]);\n            this.xt = this.x;\n\n            this.y = d3.scaleLinear()\n                .range([this.innerHeight, 0]);\n\n            // Shapes\n            this.area = d3.area()\n                .curve(d3[this.curveType])\n                .x(d => this.xt(d.date)!)\n                .y0(this.y(0)!)\n                .y1(d => this.y(d.value)!);\n\n            this.line = d3.line()\n                .curve(d3[this.curveType])\n                .x(d => this.xt(d.date)!)\n                .y(d => this.y(d.value)!);\n\n            // Behaviors\n            this.brushBehavior = d3.brushX()\n                .extent([[0, 0], [this.innerWidth, this.innerHeight]])\n                .on(\"start\", () => this.brushing = true)\n                .on('brush', () => this.onBrush())\n                .on('end', () => this.onBrushEnd());\n        }\n\n        // Resize handling\n\n        if(changes[\"height\"]) {\n            this.y.range([this.innerHeight, 0]);\n            this.area.y0(this.y(0)!);\n            this.brushBehavior.extent([[0, 0], [this.innerWidth, this.innerHeight]]);\n            if(this.viewInit) {\n                this.drawYAxis();\n                this.brush$.call(this.brushBehavior);\n                this.grips$.selectAll(\"path\").attr(\"d\", this.drawGrips);\n            }\n        }\n\n        if(changes[\"width\"]) {\n            this.x.range([0, this.innerWidth]);\n            this.brushBehavior.extent([[0, 0], [this.innerWidth, this.innerHeight]]);\n            if(this.viewInit) {\n                this.drawXAxis();\n                if(!changes[\"height\"]) {\n                    this.brush$.call(this.brushBehavior);\n                    this.grips$.selectAll(\"path\").attr(\"d\", this.drawGrips);\n                }\n            }\n        }\n\n        // If the parent changes the selection, we want to update it\n        // If not, we keep the current selection as is\n        // (Important to keep this statement outside of the if bellow since\n        // the change of selection can be combined with a change of data)\n        const selectionChanged = changes[\"selection\"] && this.updateSelection();\n\n        // Only changes in data result in redrawing the chart\n        // (other input, except selection, are expected to be static)\n        if(this.viewInit && changes[\"data\"] && this.checkDataChanges(changes[\"data\"])){\n            this.updateChart();\n        }\n\n        // If the parent changes the selection (even though the data hasn't changed),\n        // we want to update the brush.\n        // If not, we keep the current selection as is.\n        // We can update the brush only if the view is initialized (viewInit).\n        else if(this.viewInit && ((changes[\"selection\"] && selectionChanged) || changes[\"width\"])) {\n            this.updateBrush();\n        }\n\n        if(changes[\"events\"]) {\n            this.updateEvents();\n        }\n\n    }\n\n    // Note: In onAfterViewInit we can access gx, gy, etc., obtained with @ViewChild.\n    // At this point we can initialize all the primitives and call updateChart()\n    ngAfterViewInit() {\n\n        // Get native elements\n        this.xAxis$ = d3.select(this.gx.nativeElement);\n        this.yAxis$ = d3.select(this.gy.nativeElement);\n        this.brush$ = d3.select(this.gbrush.nativeElement);\n\n        this.brush$\n            .call(this.brushBehavior)\n            .on(\"mousemove\", () => this.onMousemove())\n            .on(\"mouseout\", () => this.onMouseout());\n\n        // Add 2 \"grips\" to the brush goup, on each side of the rectangle\n        // Grips are inserted programmatically to appear on top the brush selection\n        this.grips$ = this.brush$.selectAll(\".grip\")\n            .data([{type: \"w\"}, {type: \"e\"}])\n            .enter()\n            .append(\"g\")\n            .attr(\"class\", \"grip\")\n            .attr(\"display\", \"none\");\n\n        this.grips$.append(\"path\")\n            .attr(\"d\", this.drawGrips);\n\n        this.grips$.append(\"text\")\n            .attr(\"class\", \"grip-text\")\n            .attr(\"text-anchor\", d => d.type === \"w\"? 'end' : 'start')\n            .attr(\"x\", d => d.type === \"w\"? -5 : 5)\n            .attr(\"y\", 10);\n\n        this.viewInit = true;\n\n        this.updateChart();\n\n        // This is necessary to prevent \"Expression has changed after check\" errors\n        // caused by calling updateChart inside ngAfterViewInit().\n        // Unfortunately this is necessary because we need the DOM to be rendered in order fill the DOM\n        // (for example gAxis needs to exist so we can draw the axis)\n        this.cdRef.detectChanges();\n    }\n\n    /**\n     * Redraw the graph (needs to be called after ngAfterViewInit so that the DOM elements\n     * are accessible)\n     */\n    updateChart() {\n\n        this.turnoffTooltip();\n\n        if(this.data && this.data.length) {\n\n            // Update scales\n            // Note: does not stop the update process even if the data is invalid/empty\n            this.updateScales(this.data);\n\n            // Update Axes\n            this.updateAxes();\n\n            // Update Zoom\n            this.updateZoom();\n\n            // Update brush\n            this.updateBrush();\n\n        }\n\n    }\n\n\n    /**\n     * Update the x & y scales, based on the input data\n     * @param data\n     */\n    protected updateScales(data: TimelineSeries[]) {\n\n        // Set x and y scales with the primary series (or first one)\n        const primarySeries = data.filter(s => s.primary) || [data[0]];\n        const allPrimaryDates = ([] as TimelineDate[]).concat(...primarySeries.map(s => s.dates));\n\n        const xExtent = d3.extent(allPrimaryDates, d => d.date);\n        const yMax = d3.max(data,\n            s => d3.max(s.dates, d => d.value));\n\n        // Check validity of data\n        if(!xExtent[0] || !xExtent[1] || !yMax) {\n            if (allPrimaryDates.length !== 0) {\n                console.error('Invalid timeseries', primarySeries);\n            }\n            this.x.domain(this.xt.domain());\n            this.xt = this.x;\n            return;\n        }\n\n        // Enforce minimum date\n        if(this.minDate) {\n            xExtent[0] = this.minDate;\n        }\n\n        // Enforce maximum date\n        if(this.maxDate) {\n            xExtent[1] = this.maxDate;\n        }\n\n        // Enforce minimum scale (especially when the timeseries contains a single datapoint)\n        const diff = xExtent[1].getTime() - xExtent[0].getTime();\n        const minDiff = this.minZoomDays * 24 * 60 * 60 * 1000;\n        if(diff  this.rangeInit.next(this.xt.domain()));\n    }\n\n    /**\n     * Update the x and y axes\n     */\n    protected updateAxes(){\n        this.drawXAxis();\n        this.drawYAxis();\n    }\n\n    /**\n     * The events are drawn in the template directly. This method simply\n     * updates the grouping of events (when they are close to each other)\n     */\n    protected updateEvents() {\n        this.groupedEvents = this.groupEvents(5);\n    }\n\n    /**\n     * Update/reset the zoom behavior when new data comes in (and new scales, axes...)\n     */\n    protected updateZoom() {\n\n        if(!this.zoomable) {\n            return;\n        }\n\n        // Reset the previous zoom !\n        if(this.zoomBehavior){\n            this.zoomBehavior.on(\"zoom\", null);\n            this.zoomBehavior.on(\"end\", null);\n            this.zoomBehavior.transform(this.brush$, d3.zoomIdentity);\n        }\n\n        // Compute the minimum and maximum zoom\n        const xDomain = this.x.domain();\n        const scaleExtent = (xDomain[1].getTime() - xDomain[0].getTime()) / 86400000; // current number of days on the scale\n\n        // Create the behavior\n        this.zoomBehavior = d3.zoom()\n            .extent([[0, 0], [this.innerWidth, this.innerHeight]])\n            .scaleExtent([scaleExtent/this.maxZoomDays, scaleExtent/this.minZoomDays])\n            .on(\"zoom\", () => this.onZoom())\n            .on(\"end\", () => this.onZoomEnd());\n\n        // Apply on to the brush element\n        this.brush$\n            .call(this.zoomBehavior)\n            .on(\"mousedown.zoom\", null) // Deactivate mouse event (taken by brush)\n            .on(\"touchstart.zoom\", null)\n            .on(\"touchmove.zoom\", null)\n            .on(\"touchend.zoom\", null);\n\n    }\n\n    /**\n     * Updates the brush (or hides it if no currentSelection),\n     * following a change of x scale.\n     * Number.MIN_VALUE and Number.MAX_VALUE are used to support semi-open intervals\n     */\n    protected updateBrush() {\n        if(this.currentSelection) {\n            const x0 = this.currentSelection[0] ? this.xt(this.currentSelection[0])! : Number.MIN_VALUE;\n            const x1 = this.currentSelection[1] ? this.xt(this.currentSelection[1])! : Number.MAX_VALUE;\n            const selection: [number, number] = [x0,x1];\n            this.brush$.call(this.brushBehavior.move, selection);\n        }\n        else {\n            this.brush$.call(this.brushBehavior.move, null);\n        }\n    }\n\n    /**\n     * This method tests whether the input selection is different from the currentSelection\n     * and updates it. It returns true if there is actually a change.\n     */\n    protected updateSelection(): boolean {\n        const change = this.checkSelectionChange(this.selection, this.currentSelection);\n        this.currentSelection = this.selection;\n        return change;\n    }\n\n    /**\n     * Recreate the x scale and axes (in the event of a language change)\n     */\n    protected updateXAxis(){\n        this.x = d3.scaleUtc()\n            .domain(this.x.domain())\n            .range(this.x.range());\n\n        this.xt = d3.scaleUtc()\n            .domain(this.xt.domain())\n            .range(this.xt.range());\n\n        this.drawXAxis();\n    }\n\n    /**\n     * Draws the X axis\n     */\n    protected drawXAxis() {\n        const nTicks = Math.round(this.width / 100);\n        this.xAxis$.call(d3.axisBottom(this.xt).ticks(nTicks));\n        this.xAxis$.selectAll(\".domain\").remove(); // Remove the axis line\n    }\n\n    /**\n     * Draws the Y axis\n     */\n    protected drawYAxis() {\n        const nTicks = Math.round(this.height / 40);\n\n        const yAxisTicks = this.y.ticks(nTicks)\n            .filter(tick => Number.isInteger(tick)); // Keep only integer ticks https://stackoverflow.com/questions/13576906/d3-tick-marks-on-integers-only/56821215\n\n        const yAxis = d3.axisLeft(this.y)\n            .tickValues(yAxisTicks)\n            .tickFormat(d3.format(\"~s\")); //https://github.com/d3/d3-format\n        this.yAxis$.call(yAxis);\n        this.yAxis$.selectAll(\".domain\").remove(); // Remove the axis line\n    }\n\n    /**\n     * Updates the display of the brush's grips when the brush has moved\n     * When the selection is a semi-open interval, we don't display the infinite border\n     * @param selection\n     */\n    protected updateGrips(selection: [number, number] | null) {\n        if (!selection) {\n            this.grips$.attr(\"display\", \"none\");\n        }\n        else {\n            this.grips$\n                .attr(\"display\", (d, i) => (selection[i] === Number.MAX_VALUE || selection[i] === Number.MIN_VALUE) ? \"none\" : null)\n                .attr(\"transform\", (d, i) => (selection[i] === Number.MAX_VALUE || selection[i] === Number.MIN_VALUE) ? null : \"translate(\" + selection[i] + \")\");\n            this.grips$.selectAll('.grip-text')\n                .text(\n                    (d) => {\n                        const index = d.type === 'w'? 0 : 1;\n                        return (selection[index] === Number.MAX_VALUE || selection[index] === Number.MIN_VALUE) ? null : this.intlService.formatDate(this.xt.invert(selection[index]))\n                    }\n                );\n        }\n    }\n\n\n    // Interaction callbacks\n\n    onBrush() {\n        this.turnoffTooltip();\n        this.brushSelection = d3.brushSelection(this.gbrush.nativeElement) as [number, number] | null;\n        this.updateGrips(this.brushSelection);\n    }\n\n    onBrushEnd(){\n        this.brushing = false;\n        this.onBrush();\n        const newSelection = this.brushSelection\n            ?.sort((a,b)=>a-b)\n            .map(x => (x === Number.MAX_VALUE || x === Number.MIN_VALUE) ? undefined : this.xt.invert(x));\n        if(this.checkSelectionChange(this.currentSelection, newSelection)) {\n            this.currentSelection = newSelection;\n            this.selectionChange.next(this.currentSelection);\n        }\n    }\n\n    onZoom(){\n\n        this.turnoffTooltip();\n\n        this.zooming = true;\n\n        // Create a transformed scale without modifying the original (to enforce the limit of scaleExtent)\n        const transform = d3.zoomTransform(this.brush$.node() as Element);\n        this.xt = transform.rescaleX(this.x);\n\n        // Redraw the axis\n        this.drawXAxis();\n\n        // Update the brush position\n        if(this.currentSelection){\n            const x0 = this.currentSelection[0] ? this.xt(this.currentSelection[0])! : Number.MIN_VALUE;\n            const x1 = this.currentSelection[1] ? this.xt(this.currentSelection[1])! : Number.MAX_VALUE;\n            const selection: [number, number] = [x0,x1];\n            this.brushBehavior.move(this.brush$, selection);\n        }\n\n    }\n\n    onZoomEnd(){\n        this.zooming = false;\n\n        // At the end of a zoom, we need to reorganize the grouping of events\n        this.updateEvents();\n\n        // Fire an event\n        this.rangeChange.next(this.xt.domain());\n    }\n\n    /**\n     * Redraw the simple tooltip (vertical line)\n     */\n    onMousemove() {\n        if(!this.tooltipItem && this.showTooltip) {\n            this.tooltipX = d3.mouse(this.gbrush.nativeElement)[0];\n            const date = this.xt.invert(this.tooltipX);\n            this.tooltipDatapoints = this.data?.map(series => {\n              if(!series.showDatapoints) return;\n              const i = this.bisectDate(series.dates, date);\n              const d0 = series.dates[i - 1];\n              const d1 = series.dates[i];\n              if(!d0 || !d1) return;\n              return date.getTime() - d0.date.getTime() > d1.date.getTime() - date.getTime() ? d1 : d0;\n            });\n        }\n    }\n\n    /**\n     * Remove the simple tooltip (vertical line)\n     */\n    onMouseout() {\n        if(!this.tooltipItem) {\n            this.tooltipX = undefined\n        }\n    }\n\n    /**\n     * Responds to a click on an event (triangle) by essentially turning tooltip on/off\n     * @param event\n     */\n    onEventClick(event: TimelineEvent[]) {\n\n        if(this.tooltipItem === event) {\n            this.turnoffTooltip();\n        }\n\n        else {\n\n            if(this.tooltipItem) {\n                this.turnoffTooltip();\n            }\n\n            this.tooltipItem = event;\n            this.tooltipX = this.xt(event[0].date);\n\n            // Since we use viewBox to auto-adjust the SVG to the container size, we have to\n            // convert from the SVG coordinate system to the HTML coordinate system\n            const x = this.margin.left + this.tooltipX!;\n            const actualWidth = (this.el.nativeElement as HTMLElement).offsetWidth;\n            const scale = actualWidth / this.width;\n            const relativeX = x / this.width;\n\n            // Tooltip to the right\n            if(relativeX  {\n        if(this.tooltipItem) {\n            this.tooltipItem = undefined;\n            this.tooltipX = undefined;\n        }\n    }\n\n    ngOnDestroy(){\n        this.intlSubscription.unsubscribe();\n    }\n\n    // Utilities\n\n    /**\n     * Transforms the input list of events into a list of list, by grouping events within a bin\n     * when their dates are close together. This closeness is measured in \"pixel per event\".\n     * Note: this currently uses a histogram-like algorithm, which could probably be improved (clustering?)\n     * @param pixPerEvent\n     */\n    protected groupEvents(pixPerEvent: number): TimelineEvent[][] {\n        const events: TimelineEvent[][] = [];\n\n        if(this.events) {\n            const nbins = Math.floor(this.innerWidth / pixPerEvent);\n            const domain = this.xt.domain();\n            const timeinterval = (domain[1].getTime() - domain[0].getTime()) / nbins;\n            this.events.concat()\n                .sort((a,b) => a.date.getTime() - b.date.getTime())\n                .forEach(event => {\n                    if(events.length === 0) {\n                        events.push([event]);\n                    }\n                    else {\n                        const last = events[events.length-1];\n                        const lastbin = Math.floor(last[0].date.getTime() / timeinterval);\n                        const bin = Math.floor(event.date.getTime() / timeinterval);\n                        if(bin === lastbin) {\n                            last.push(event);\n                        }\n                        else {\n                            events.push([event]);\n                        }\n                    }\n                });\n        }\n\n        return events;\n    }\n\n    /**\n     * Return true if there are actual changes in the data\n     * (in particular will ignore data refresh which change nothing)\n     * @param change\n     */\n    protected checkDataChanges(change: SimpleChange): boolean {\n        const previousValue = change.previousValue as TimelineSeries[] | undefined;\n        const currentValue = change.currentValue as TimelineSeries[] | undefined;\n\n        // Ignore null/undefined difference cause by | async\n        // See: https://github.com/angular/angular/issues/16982\n        if(currentValue === null && previousValue === undefined || currentValue === undefined && previousValue === null)\n            return false;\n\n        // Else, if one of them is null/undefined (or difference in length), there's clearly a change\n        if(!previousValue || !currentValue || previousValue.length !== currentValue.length)\n            return true;\n\n        // If both defined and same size, we need to compare the data piece by piece\n        for(let i=0; i {\n        const gripHeight = Math.min(10, Math.max((this.innerHeight) / 8, 4));\n        const gripWidth = gripHeight;\n\n        const x = -gripWidth / 2;\n        const y = this.innerHeight / 2 - gripHeight / 2;\n\n        const path =\n            'M ' + x + ' ' + y +\n            ' l ' + -gripWidth + ' ' + gripHeight / 2 +\n            ' l ' + gripWidth + ' ' + gripHeight / 2 + ' z ' +\n            'M ' + -x + ' ' + y +\n            ' l ' + gripWidth + ' ' + gripHeight / 2 +\n            ' l ' + -gripWidth + ' ' + gripHeight / 2 + ' z ' +\n            'M 0 ' + 0 + ' l 0 ' + this.innerHeight + ' z ';\n        return path;\n    }\n\n    /**\n     * Returns the size of the triangle drawn for one event (or a group of events)\n     * @param events\n     */\n    eventSize(events: TimelineEvent[]): number {\n        if(events!==this.tooltipItem) {\n            return events[0].size || 6;\n        }\n        else {\n            return events[0].sizeOpened || (events[0].size || 6)*2;\n        }\n    }\n\n    /**\n     * Return a string containing the path coordinates of a triangle for a given event (or group of events)\n     * @param events\n     * @param size\n     */\n    drawEvents(events: TimelineEvent[], size: number): string {\n        const x = this.xt(events[0].date);\n        return 'M ' + x + ' ' + (this.innerHeight - 3*size/2) +\n            ' l ' + -size + ' ' + (3*size/2) +\n            ' l ' + (2*size) + ' ' + 0 + ' z ';\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/TimelineEventAggregation.html":{"url":"interfaces/TimelineEventAggregation.html","title":"interface - TimelineEventAggregation","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  TimelineEventAggregation\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            timeline/bootstrap/facet-timeline.component.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            aggregation\n                                        \n                                \n                                \n                                        \n                                            getDate\n                                        \n                                \n                                \n                                        \n                                            getDisplay\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            size\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            styles\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        aggregation\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        aggregation:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        getDate\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        getDate:     \n\n                                    \n                                \n\n\n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        getDisplay\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        getDisplay:     \n\n                                    \n                                \n\n\n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        size\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        size:     number | \n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     number | \n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        styles\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        styles:     literal type | \n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type | \n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Component, Input, OnChanges, ChangeDetectorRef, SimpleChanges, Output, EventEmitter } from '@angular/core';\nimport { Observable, of, combineLatest, ReplaySubject } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { Results, AggregationItem, Aggregation, CCAggregation, Record, AuditWebService, AuditEventType } from '@sinequa/core/web-services';\nimport { AppService, Expr, ExprBuilder } from '@sinequa/core/app-utils';\nimport { Utils } from '@sinequa/core/base';\nimport { AbstractFacet, FacetService } from '@sinequa/components/facet';\nimport { SearchService } from '@sinequa/components/search';\nimport { SelectionService } from '@sinequa/components/selection';\nimport { Action } from '@sinequa/components/action';\nimport { TimelineSeries, TimelineDate, TimelineEvent } from './timeline.component';\nimport moment from 'moment';\nimport * as d3 from 'd3';\nimport { TimelineEventType } from './timeline-legend.component';\n\nexport interface TimelineAggregation {\n    name?: string;\n    aggregation: string;\n    primary: boolean;\n    areaStyles?: {[key: string]: any};\n    lineStyles?: {[key: string]: any};\n    showDatapoints?: boolean;\n}\n\nexport interface TimelineCombinedAggregations {\n    aggregations: TimelineAggregation[];\n    maxNMonths: number[]; // Maximum number of months for which to use this aggregation\n    default: TimelineAggregation; // Aggregation to use by default \n    current?: TimelineAggregation; // (this field is overriden by the component when switching aggregation)\n}\n\nexport interface TimelineRecords {\n    field: string;\n    size?: number | ((record: Record, selected: boolean) => number);\n    styles?: {[key: string]: any} | ((record: Record, selected: boolean) => {[key: string]: any});\n    display?: (record: Record) => string;\n}\n\nexport interface TimelineEventAggregation {\n    aggregation: string;\n    getDate: ((item: AggregationItem) => Date);\n    getDisplay: ((item: AggregationItem) => string);\n    size?: number | ((item: AggregationItem) => number);\n    styles?: {[key: string]: any} | ((item: AggregationItem) => {[key: string]: any});\n}\n\nexport type TimelineData = TimelineSeries | TimelineAggregation | TimelineCombinedAggregations;\n\nexport type TimelineEventData = TimelineEvent[] | TimelineRecords | TimelineEventAggregation;\n\n@Component({\n    selector: 'sq-facet-timeline',\n    templateUrl: './facet-timeline.component.html',\n    styleUrls: ['./facet-timeline.component.scss']\n})\nexport class BsFacetTimelineComponent extends AbstractFacet implements OnChanges {\n    @Input() name = 'Timeline';\n    @Input() results: Results;\n    \n    // By default, we show the standard Timeline aggregation and the list of current records\n    @Input() timeseries: TimelineData[] = [{aggregation: 'Timeline', primary: true}];\n    @Input() events: TimelineEventData[] = [{field: 'modified'}];\n\n    // Initial scale (prior to any zoom)\n    @Input() minDate?: Date;\n    @Input() maxDate?: Date;\n    // Date range to filter aggregations (ignored when combined aggregations are recomputed based on zoomed range)\n    @Input() minAggregationDate?: Date;\n    @Input() maxAggregationDate?: Date;\n    \n    @Input() zoomable = true;\n    @Input() minZoomDays = 1; // Max 1 day scale\n    @Input() maxZoomDays = 365 * 100; // Max 100 years scale\n\n    @Input() width = 600;\n    @Input() height = 200;\n    @Input() margin = {top: 15, bottom: 20, left: 40, right: 15};\n\n    @Input() curveType = \"curveMonotoneX\";\n\n    @Input() showTooltip = true;\n    @Input() theme: \"light\" | \"dark\" = \"light\";\n\n    @Input() showLegend = false;\n    @Input() legendStyles?: {[key:string]: any} = {'justify-content' : 'center'};\n    @Input() legendEvents?: TimelineEventType[];\n    @Input() legendOrientation?: \"row\"|\"column\" = \"row\";\n    @Input() legendYOffset?: number = 3;\n\n    @Output() eventClicked = new EventEmitter();\n\n    // List of observables (one per timeseries / event type)\n    timeseries$: ReplaySubject[];\n    events$: ReplaySubject[];\n\n    // Combination (combineLastest) of the timeline observables\n    mergedTimeseries$: Observable;\n    mergedEvents$: Observable;\n\n    // Current timeline selection\n    selection?: [Date, Date];\n\n    // Current range (undefined if no zoom / auto-scaling)\n    currentRange?: [Date, Date];\n\n    // Formating method for search queries\n    formatDayRequest = d3.timeFormat(\"%Y-%m-%d\");\n\n    // Actions\n    clearFilters: Action;\n\n    constructor(\n        public facetService: FacetService,\n        public searchService: SearchService,\n        public appService: AppService,\n        public selectionService: SelectionService,\n        public exprBuilder: ExprBuilder,\n        public cdRef: ChangeDetectorRef,\n        public audit: AuditWebService\n    ){\n        super();\n\n        // Update the events when the selection of records changes\n        this.selectionService.events.subscribe(event => {\n            const i = this.events.findIndex(e => (e as TimelineRecords).field);\n            if(i !== -1) {\n                this.events$[i].next(this.getRecordsAsEvents(this.events[i] as TimelineRecords));\n            }\n        });\n        \n        // Clear the current filters\n        this.clearFilters = new Action({\n            icon: \"far fa-minus-square\",\n            title: \"msg#facet.clearSelects\",\n            action: () => {\n                this.selection = undefined;\n                this.searchService.query.removeSelect(this.name);\n                this.searchService.search();\n            }\n        });\n\n    }\n\n    getMinDate(): Date | undefined {\n        return this.currentRange? this.currentRange[0] : this.minDate;\n    }\n\n    getMaxDate(): Date | undefined {\n        return this.currentRange? this.currentRange[1] : this.maxDate;\n    }\n\n    override get actions(): Action[] {\n        const actions: Action[] = [];\n        if(this.facetService.hasFiltered(this.name)){\n            actions.push(this.clearFilters);\n        }\n        return actions;\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n\n        // Skip simple changes (width, height, etc.) that don't require modifying the timeline data\n        if(!changes.timeseries && !changes.events && !changes.results) {\n            return;\n        }\n\n        // Retrieve the current active selection for this timeline (if any)\n        const select = this.searchService.query.findSelect(this.name);\n\n        // Update the selection if it is not already set (which is the case on a page refresh)\n        if(select && !this.selection) {\n            let parsedexpr = this.appService.parseExpr(select.expression) as Expr;\n            if(!Utils.isString(parsedexpr)){\n                while(!parsedexpr.isLeaf){ // The select might over multiple fields (modified between [...] AND created between [...])\n                    parsedexpr = parsedexpr.operands[0];\n                }\n                if(parsedexpr.values){\n                    this.selection = [new Date(parsedexpr.values[0]), new Date(parsedexpr.values[1])];\n                    // Guess a current range based on the selection\n                    if(!this.currentRange) {\n                        const interval = this.selection[1].getTime() - this.selection[0].getTime();\n                        this.currentRange = [ // Selected Interval +10% on each side\n                            new Date(this.selection[0].getTime()-interval*0.1),\n                            new Date(this.selection[1].getTime()+interval*0.1)\n                        ];\n                    }\n                }\n            }\n        }\n        // If no active selection we remove the selection from the timeline, along with the current zoomed range\n        else if(!select) {\n            this.selection = undefined; // If no select, it was possibly removed by the user, we need to update our selection\n            this.currentRange = undefined; // current range is set by zoom events, we want to reset it only if there are no select (ie. no user interaction)\n        }\n\n        // Initialize timeseries\n        if(!this.timeseries$ || changes[\"timeseries\"]) {\n            // Create one observable per timeline\n            this.timeseries$ = this.timeseries.map(_ => new ReplaySubject(1));\n            this.mergedTimeseries$ = combineLatest(this.timeseries$);\n        }\n\n        this.updateTimeseries();\n\n        // Initialize events\n        if(!this.events$ || changes[\"events\"]) {\n            this.events$ = this.events.map(_ => new ReplaySubject(1));\n            this.mergedEvents$ = combineLatest(this.events$).pipe(\n                map(events => ([] as TimelineEvent[]).concat(...events))\n            );\n        }\n\n        this.updateEvents();\n        \n    }\n\n    /**\n     * For each timeseries configuration given as an input,\n     * update the data via the list of observables (timelines$)\n     */\n    updateTimeseries() {\n        this.timeseries.forEach((config, i) => {\n\n            const subject = this.timeseries$[i];\n\n            if((config as TimelineSeries).dates !== undefined) {\n                subject.next(config as TimelineSeries);\n            }\n\n            else {\n                let agg = config as TimelineAggregation;\n                if(agg.aggregation === undefined){\n                    \n                    config = config as TimelineCombinedAggregations;\n                    // We want to set the default scale if it hasn't been set before\n                    // or if no zoom/selection has been made (so current scale may not be adapted to the new results)\n                    if(!this.currentRange || !config.current){\n                        config.current = config.default;\n                    }\n\n                    agg = config.current;\n                }\n                \n                const range: [Date, Date] | undefined = !!this.minAggregationDate && !!this.maxAggregationDate ?\n                    [this.minAggregationDate, this.maxAggregationDate] : undefined;\n\n                this.getTimeseries(agg, range).subscribe({\n                    next: d => subject.next(d),\n                    error: err => subject.error(err)\n                });\n            }\n\n        });\n    }\n\n    /**\n     * For each event configuration given as an input, \n     * update the data via the list of observables (events$)\n     */\n    updateEvents() {\n        this.events.forEach((config, i) => {\n            const subject = this.events$[i];\n\n            if((config as TimelineRecords).field) {\n                subject.next(this.getRecordsAsEvents(config as TimelineRecords));\n            }\n            else if((config as TimelineEventAggregation).aggregation){\n                this.getEventAggregation(config as TimelineEventAggregation).subscribe({\n                    next: t => subject.next(t),\n                    error: err => subject.error(err)\n                });\n            }\n            else if(Array.isArray(config)){\n                subject.next(config as TimelineEvent[]);\n            }\n        });\n    }\n\n    /**\n     * Get a timeseries aggregation via the getAggregation method.\n     * @param config \n     * @param subject \n     * @param range \n     */\n    getTimeseries(config: TimelineAggregation, range?: [Date, Date]): Observable {\n        return this.getAggregation(config.aggregation, range).pipe(\n            map(d => BsFacetTimelineComponent.createTimeseries(config, d.aggregation, d.ccaggregation, range))\n        );\n    }\n\n    /**\n     * Get an aggregation of events via the getAggregation method\n     * @param config \n     * @param subject \n     */\n    getEventAggregation(config: TimelineEventAggregation): Observable {\n        return this.getAggregation(config.aggregation).pipe(\n            map(d => BsFacetTimelineComponent.createAggregationEvents(config, d.aggregation, d.ccaggregation))\n        );\n    }\n\n    /**\n     * Returns the list of records from the results as a list of TimelineEvent when they have a\n     * modified date. The size and styles of the events are determined from the given configuration (TimelineRecords)\n     * @param config \n     */\n    getRecordsAsEvents(config: TimelineRecords): TimelineEvent[] {\n        if(this.results) {\n            return this.results.records\n                .filter(r => !!Utils.toDate(r[config.field]))\n                .map(r => {\n                    return {\n                        id: r.id,\n                        date: Utils.toDate(r[config.field])!,\n                        size: !config.size? 6 : typeof config.size === 'function'? config.size(r, r.$selected) : config.size,\n                        styles: !config.styles? BsFacetTimelineComponent.defaultRecordStyle(r.$selected) :\n                                typeof config.styles === 'function'? config.styles(r, r.$selected) : \n                                config.styles,\n                        display: config.display? config.display(r) : r.title,\n                        // Custom property for click action\n                        record: r\n                    }\n                });\n        }\n        return [];\n    }\n\n\n    /**\n     * returns an aggregation and its configuration either directly from the facet service of\n     * by fetching it from the server.\n     * @param aggregationName \n     * @param range \n     */\n    getAggregation(aggregationName: string, range?: [Date, Date]): Observable {\n        \n        const ccaggregation = this.appService.getCCAggregation(aggregationName);\n        const aggregation = this.facetService.getAggregation(aggregationName, this.results);\n        \n        if(aggregation && ccaggregation) {\n            return of({aggregation: aggregation, ccaggregation: ccaggregation});\n        }\n\n        else if(ccaggregation) {\n            return this.fetchAggregation(aggregationName, ccaggregation, range).pipe(\n                map(agg => {return {aggregation: agg, ccaggregation: ccaggregation} })\n            );\n        }\n\n        else {\n            throw new Error(`Aggregation ${aggregationName} does not exist in the Query web service`);\n        }\n    }\n\n    /**\n     * Get an aggregation from the server, filtering by range if provided\n     * @param aggregation \n     * @param ccaggregation \n     * @param range \n     */\n    fetchAggregation(aggregation: string, ccaggregation: CCAggregation, range?: [Date, Date]): Observable {\n        const query = Utils.copy(this.searchService.query);\n        query.action = \"aggregate\";\n        query.aggregations = [aggregation];\n\n        if(range){\n            query.addSelect(`${ccaggregation.column}:[${this.formatDayRequest(range[0])}..${this.formatDayRequest(range[1])}]`);\n        }\n\n        return this.searchService.getResults(query, undefined, {searchInactive: true}).pipe(\n            map(results => results.aggregations[0])\n        );\n    }\n\n    /**\n     * Given a combined aggregation configuration and a range, this method searches for the most \n     * adapted aggregation scale (years, months, weeks or days) and updates the data if necessary.\n     * @param config \n     * @param range \n     * @param iTimeseries \n     */\n    updateCombinedAggregation(config: TimelineCombinedAggregations, range: [Date, Date], timeseries$: ReplaySubject) {\n        const nmonths = d3.timeMonth.count(range[0], range[1]);\n\n        if(!config.maxNMonths || config.maxNMonths.length !== config.aggregations.length) {\n            console.error(config);\n            throw new Error(\"maxNMonths and aggregations must have the same number of items\");\n        }\n\n        // Find the aggregation with min maxNMonths with maxNMonths >= nmonths\n        let jMin;\n        config.maxNMonths.forEach((maxNMonths, j) => {\n            if(maxNMonths >= nmonths && (jMin === undefined || maxNMonths  this.currentRange[1])) {\n\n            config.current = bestAggregation;\n            this.getTimeseries(bestAggregation, range).subscribe({\n                next: d => timeseries$.next(d),\n                error: err => timeseries$.error(err)\n            });\n        }\n\n    }\n\n\n    // Interaction callbacks\n\n    /**\n     * On selection is triggered when the user selects a range of dates on the timeline.\n     * This has the effect of updating the query.select (either remove it or add/replace it)\n     * and it updates the search.\n     * @param selection \n     */\n    onSelectionChange(selection: [Date, Date] | undefined) {\n        this.selection = selection;\n        if(selection) {\n            const from = this.formatDayRequest(selection[0]);\n            const to = this.formatDayRequest(selection[1]);\n\n            const exprs: string[] = [];\n            this.searchService.query.removeSelect(this.name);\n\n            this.timeseries.forEach((config) => {\n                    \n                if((config as TimelineAggregation).aggregation !== undefined \n                || (config as TimelineCombinedAggregations).default !== undefined) {\n\n                    const aggregation = (config as TimelineAggregation).aggregation || (config as TimelineCombinedAggregations).default.aggregation;\n                    const ccaggregation = this.appService.getCCAggregation(aggregation);\n                    if(ccaggregation) {\n                        exprs.push(this.exprBuilder.makeRangeExpr(ccaggregation.column, from, to));\n                    }\n                }\n\n            });\n\n            if(exprs.length > 0) {\n                const expr = this.exprBuilder.concatOrExpr(exprs);\n                this.searchService.query.addSelect(expr, this.name);\n                this.searchService.search(undefined, {type:AuditEventType.Search_Timeline_Usage, detail: { from, to }});\n            }            \n        }\n\n        else if(this.searchService.query.findSelect(this.name)) {\n            this.searchService.query.removeSelect(this.name);\n            this.searchService.search();\n        }\n    }\n\n    /**\n     * On range is triggered when the user zooms in our out on the timeline,\n     * which triggers a dynamic update of the combined aggregation timelines.\n     * @param range \n     */\n    onRangeChange(range: [Date, Date]) {\n\n        this.timeseries.forEach((config, i) => {\n            if((config as TimelineCombinedAggregations).aggregations !== undefined) {\n                this.updateCombinedAggregation(config as TimelineCombinedAggregations, range, this.timeseries$[i]);\n            }\n        });\n\n        // Note: updateCombinedAggregation() compares currentRange and range\n        // So this update must be kept after the forEach\n        this.currentRange = range;\n    }\n\n    /**\n     * When an event is clicked, the event is propagated to the parent, and the tooltip is closed\n     * @param event \n     * @param closeTooltip \n     */\n    onEventClicked(event: TimelineEvent, closeTooltip: () => void) {\n        this.eventClicked.next(event);\n        closeTooltip();\n        return false;\n    }\n\n\n    // Static utility methods\n    \n    \n    /**\n     * Create a time series object from its config, data (aggregation) and configuration (ccaggregation)\n     * @param config \n     * @param aggregation \n     * @param ccaggregation \n     */\n    static createTimeseries(config: TimelineAggregation, aggregation: Aggregation, ccaggregation: CCAggregation, range?: [Date, Date]): TimelineSeries {\n        return {\n            ...config,\n            name: config.name || aggregation.name,\n            dates: this.createDatapoints(aggregation.items, ccaggregation?.mask, range),\n        }\n    }\n\n    /**\n     * Create a list of events from its config, data (aggregation) and configuration (ccaggregation)\n     * @param config \n     * @param aggregation \n     * @param ccaggregation \n     */\n    static createAggregationEvents(config: TimelineEventAggregation, aggregation: Aggregation, ccaggregation: CCAggregation): TimelineEvent[] {\n        return !aggregation.items? [] : aggregation.items.map(item => {\n            return {\n                id: config.getDate(item).toUTCString()+\"|\"+config.getDisplay(item),\n                date: config.getDate(item),\n                size: !config.size? 6 : typeof config.size === 'function'? config.size(item) : config.size,\n                styles: !config.styles? undefined :\n                        typeof config.styles === 'function'? config.styles(item) : \n                        config.styles,                \n                display: config.getDisplay(item),\n\n                // Custom params for click action\n                item: item,\n                aggregation: aggregation,\n                ccaggregation: ccaggregation\n            }\n        });\n    }\n\n    /**\n     * This methods transforms a raw list of aggregation items into\n     * a time series completed with zeros, following the below scheme:\n     * Aggregation:  [    # #         # # #   #     # #       # # #    ]\n     * Series:       [  0 # # 0     0 # # # 0 # 0 0 # # 0   0 # # # 0  ]\n     * @param items \n     * @param resolution \n     */\n    static createDatapoints(items: AggregationItem[] | undefined, resolution: string, range?: [Date, Date]): TimelineDate[] {\n\n        if(!items) {\n            return [];\n        }\n\n        const timeInterval = this.getD3TimeInterval(resolution);\n        \n        const series: TimelineDate[] = [];\n\n        const _items = items\n            .map(item => {\n                if(!!item.value && !(item.value instanceof Date)){\n                    const val = item.value.toString();\n                    item.value = moment(val.length  undefined; // So it gets filtered out\n                    }\n                }\n                return item;\n            })\n            .filter(item => !!item.value && (!range || ((item.value as Date) >= range[0] && (item.value as Date)  {\n            const date = item.value as Date;\n            \n            if(i === 0 || timeInterval.offset(series[series.length-1].date, 1)  item.date = this.shiftDate(item.date, resolution));\n\n        return series;\n    }\n\n    \n    /**\n     * Shift the date to the middle of their time bracket (2020 = middle of the year, April = middle of the month, etc.)\n     * @param date \n     * @param resolution \n     */\n    static shiftDate(date: Date, resolution: string): Date {\n        switch(resolution){\n            case \"YYYY-MM-DD\": return d3.timeHour.offset(date, 12);\n            case \"YYYY-WW\": return d3.timeHour.offset(date, 84); // 3*24 + 12\n            case \"YYYY-MM\": return d3.timeDay.offset(date, 15);\n            case \"YYYY\": return d3.timeMonth.offset(date, 6);\n        }\n        return date;\n    }\n\n\n    static getD3TimeInterval(resolution: string): d3.CountableTimeInterval {\n        switch(resolution){\n            case \"YYYY-MM-DD\": return d3.timeDay;\n            case \"YYYY-WW\": return d3.timeWeek;\n            case \"YYYY-MM\": return d3.timeMonth;\n            case \"YYYY\": return d3.timeYear;\n        }\n        return d3.timeDay;\n    }\n\n    static defaultRecordStyle(selected: boolean): {[key: string]: any} {\n        return {\n            'fill': selected? 'red' : 'green',\n            'stroke': selected? 'red' : undefined,\n            'stroke-width': selected? '2px' : undefined\n        };\n    }\n}\n    \n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/TimelineEventType.html":{"url":"interfaces/TimelineEventType.html","title":"interface - TimelineEventType","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  TimelineEventType\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            timeline/bootstrap/timeline-legend.component.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            name\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            styles\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        name\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        name:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        styles\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        styles:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Component, Input } from \"@angular/core\";\nimport { TimelineSeries } from \"./timeline.component\";\n\nexport interface TimelineEventType {\n    name: string;\n    styles?: {[key:string]: any};\n}\n\n@Component({\n    selector: 'sq-timeline-legend',\n    template: `\n\n\n    \n        \n            \n            \n        \n        {{ timeline.name }}\n    \n\n    \n        \n            \n        \n        {{ event.name }}\n    \n\n\n    `,\n    styles: [`\n.series .area {\n    fill: lightblue;\n    opacity: 0.5;\n}\n\n.series .line {\n    stroke: rgb(132, 187, 206);\n    stroke-width: 2;\n    fill: none;\n}\n\n.event {\n    fill: #7c7c7c;\n}\n\n.name {\n    font-size: 12px;\n    color: darkgrey;\n}\n    `]\n})\nexport class TimelineLegendComponent {\n    @Input() data?: TimelineSeries[];\n    @Input() events?: TimelineEventType[];\n    @Input() orientation: \"row\"|\"column\" = \"row\";\n    @Input() yOffset: number = 3;\n    @Input() legendStyles?: {[key:string]: any};\n\n}\n    \n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/TimelineLegendComponent.html":{"url":"components/TimelineLegendComponent.html","title":"component - TimelineLegendComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  TimelineLegendComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    timeline/bootstrap/timeline-legend.component.ts\n\n\n\n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                sq-timeline-legend\n            \n\n\n            \n                styles\n                \n.series .area {\n    fill: lightblue;\n    opacity: 0.5;\n}\n\n.series .line {\n    stroke: rgb(132, 187, 206);\n    stroke-width: 2;\n    fill: none;\n}\n\n.event {\n    fill: #7c7c7c;\n}\n\n.name {\n    font-size: 12px;\n    color: darkgrey;\n}\n    \n            \n\n            \n                template\n                \n\n    \n        \n            \n            \n        \n        {{ timeline.name }}\n    \n\n    \n        \n            \n        \n        {{ event.name }}\n    \n\n\n\n            \n\n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n\n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                data\n                            \n                            \n                                events\n                            \n                            \n                                legendStyles\n                            \n                            \n                                orientation\n                            \n                            \n                                yOffset\n                            \n                        \n                    \n                \n\n\n\n\n        \n    \n\n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        data\n                    \n                \n                \n                    \n                        Type :         TimelineSeries[]\n\n                    \n                \n                        \n                            \n                                    Defined in timeline/bootstrap/timeline-legend.component.ts:54\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        events\n                    \n                \n                \n                    \n                        Type :     TimelineEventType[]\n\n                    \n                \n                        \n                            \n                                    Defined in timeline/bootstrap/timeline-legend.component.ts:55\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        legendStyles\n                    \n                \n                \n                    \n                        Type :     literal type\n\n                    \n                \n                        \n                            \n                                    Defined in timeline/bootstrap/timeline-legend.component.ts:58\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        orientation\n                    \n                \n                \n                    \n                        Type :     \"row\" | \"column\"\n\n                    \n                \n                \n                    \n                        Default value : \"row\"\n                    \n                \n                        \n                            \n                                    Defined in timeline/bootstrap/timeline-legend.component.ts:56\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        yOffset\n                    \n                \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 3\n                    \n                \n                        \n                            \n                                    Defined in timeline/bootstrap/timeline-legend.component.ts:57\n                            \n                        \n            \n        \n\n\n\n\n\n\n\n\n\n    \n        import { Component, Input } from \"@angular/core\";\nimport { TimelineSeries } from \"./timeline.component\";\n\nexport interface TimelineEventType {\n    name: string;\n    styles?: {[key:string]: any};\n}\n\n@Component({\n    selector: 'sq-timeline-legend',\n    template: `\n\n\n    \n        \n            \n            \n        \n        {{ timeline.name }}\n    \n\n    \n        \n            \n        \n        {{ event.name }}\n    \n\n\n    `,\n    styles: [`\n.series .area {\n    fill: lightblue;\n    opacity: 0.5;\n}\n\n.series .line {\n    stroke: rgb(132, 187, 206);\n    stroke-width: 2;\n    fill: none;\n}\n\n.event {\n    fill: #7c7c7c;\n}\n\n.name {\n    font-size: 12px;\n    color: darkgrey;\n}\n    `]\n})\nexport class TimelineLegendComponent {\n    @Input() data?: TimelineSeries[];\n    @Input() events?: TimelineEventType[];\n    @Input() orientation: \"row\"|\"column\" = \"row\";\n    @Input() yOffset: number = 3;\n    @Input() legendStyles?: {[key:string]: any};\n\n}\n    \n\n\n    \n            \n.series .area {\n    fill: lightblue;\n    opacity: 0.5;\n}\n\n.series .line {\n    stroke: rgb(132, 187, 206);\n    stroke-width: 2;\n    fill: none;\n}\n\n.event {\n    fill: #7c7c7c;\n}\n\n.name {\n    font-size: 12px;\n    color: darkgrey;\n}\n    \n\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '                                                    {{ timeline.name }}                                            {{ event.name }}    '\n    var COMPONENTS = [{'name': 'AgGridViewComponent', 'selector': 'sq-ag-grid-view'},{'name': 'BsEdgeInfoCard', 'selector': 'sq-edge-info-card'},{'name': 'BsFacetDate', 'selector': 'sq-facet-date'},{'name': 'BsFacetHeatmapComponent', 'selector': 'sq-facet-heatmap'},{'name': 'BsFacetTimelineComponent', 'selector': 'sq-facet-timeline'},{'name': 'BsHeatmapComponent', 'selector': 'sq-heatmap'},{'name': 'BsNodeInfoCard', 'selector': 'sq-node-info-card'},{'name': 'BsResultsHeatmapView', 'selector': 'sq-results-heatmap-view'},{'name': 'BsTimelineComponent', 'selector': 'sq-timeline'},{'name': 'BsTooltipComponent', 'selector': 'sq-tooltip'},{'name': 'DataModalComponent', 'selector': 'sq-data-modal'},{'name': 'FacetNgxChart', 'selector': 'sq-facet-ngx-chart'},{'name': 'FacetWrapperComponent', 'selector': 'facet-wrapper'},{'name': 'FusionChart', 'selector': 'sq-fusion-chart'},{'name': 'MapComponent', 'selector': 'sq-googlemaps'},{'name': 'MoneyCloudComponent', 'selector': 'sq-money-cloud'},{'name': 'MoneyTimelineComponent', 'selector': 'sq-money-timeline'},{'name': 'NetworkComponent', 'selector': 'sq-network'},{'name': 'NgxChart', 'selector': 'sq-ngx-chart'},{'name': 'ResultTimeline', 'selector': 'sq-result-timeline'},{'name': 'TimelineLegendComponent', 'selector': 'sq-timeline-legend'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'TimelineLegendComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/TimelineRecords.html":{"url":"interfaces/TimelineRecords.html","title":"interface - TimelineRecords","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  TimelineRecords\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            timeline/bootstrap/facet-timeline.component.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            display\n                                        \n                                \n                                \n                                        \n                                            field\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            size\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            styles\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        display\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        display:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        field\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        field:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        size\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        size:     number | \n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     number | \n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        styles\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        styles:     literal type | \n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type | \n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Component, Input, OnChanges, ChangeDetectorRef, SimpleChanges, Output, EventEmitter } from '@angular/core';\nimport { Observable, of, combineLatest, ReplaySubject } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { Results, AggregationItem, Aggregation, CCAggregation, Record, AuditWebService, AuditEventType } from '@sinequa/core/web-services';\nimport { AppService, Expr, ExprBuilder } from '@sinequa/core/app-utils';\nimport { Utils } from '@sinequa/core/base';\nimport { AbstractFacet, FacetService } from '@sinequa/components/facet';\nimport { SearchService } from '@sinequa/components/search';\nimport { SelectionService } from '@sinequa/components/selection';\nimport { Action } from '@sinequa/components/action';\nimport { TimelineSeries, TimelineDate, TimelineEvent } from './timeline.component';\nimport moment from 'moment';\nimport * as d3 from 'd3';\nimport { TimelineEventType } from './timeline-legend.component';\n\nexport interface TimelineAggregation {\n    name?: string;\n    aggregation: string;\n    primary: boolean;\n    areaStyles?: {[key: string]: any};\n    lineStyles?: {[key: string]: any};\n    showDatapoints?: boolean;\n}\n\nexport interface TimelineCombinedAggregations {\n    aggregations: TimelineAggregation[];\n    maxNMonths: number[]; // Maximum number of months for which to use this aggregation\n    default: TimelineAggregation; // Aggregation to use by default \n    current?: TimelineAggregation; // (this field is overriden by the component when switching aggregation)\n}\n\nexport interface TimelineRecords {\n    field: string;\n    size?: number | ((record: Record, selected: boolean) => number);\n    styles?: {[key: string]: any} | ((record: Record, selected: boolean) => {[key: string]: any});\n    display?: (record: Record) => string;\n}\n\nexport interface TimelineEventAggregation {\n    aggregation: string;\n    getDate: ((item: AggregationItem) => Date);\n    getDisplay: ((item: AggregationItem) => string);\n    size?: number | ((item: AggregationItem) => number);\n    styles?: {[key: string]: any} | ((item: AggregationItem) => {[key: string]: any});\n}\n\nexport type TimelineData = TimelineSeries | TimelineAggregation | TimelineCombinedAggregations;\n\nexport type TimelineEventData = TimelineEvent[] | TimelineRecords | TimelineEventAggregation;\n\n@Component({\n    selector: 'sq-facet-timeline',\n    templateUrl: './facet-timeline.component.html',\n    styleUrls: ['./facet-timeline.component.scss']\n})\nexport class BsFacetTimelineComponent extends AbstractFacet implements OnChanges {\n    @Input() name = 'Timeline';\n    @Input() results: Results;\n    \n    // By default, we show the standard Timeline aggregation and the list of current records\n    @Input() timeseries: TimelineData[] = [{aggregation: 'Timeline', primary: true}];\n    @Input() events: TimelineEventData[] = [{field: 'modified'}];\n\n    // Initial scale (prior to any zoom)\n    @Input() minDate?: Date;\n    @Input() maxDate?: Date;\n    // Date range to filter aggregations (ignored when combined aggregations are recomputed based on zoomed range)\n    @Input() minAggregationDate?: Date;\n    @Input() maxAggregationDate?: Date;\n    \n    @Input() zoomable = true;\n    @Input() minZoomDays = 1; // Max 1 day scale\n    @Input() maxZoomDays = 365 * 100; // Max 100 years scale\n\n    @Input() width = 600;\n    @Input() height = 200;\n    @Input() margin = {top: 15, bottom: 20, left: 40, right: 15};\n\n    @Input() curveType = \"curveMonotoneX\";\n\n    @Input() showTooltip = true;\n    @Input() theme: \"light\" | \"dark\" = \"light\";\n\n    @Input() showLegend = false;\n    @Input() legendStyles?: {[key:string]: any} = {'justify-content' : 'center'};\n    @Input() legendEvents?: TimelineEventType[];\n    @Input() legendOrientation?: \"row\"|\"column\" = \"row\";\n    @Input() legendYOffset?: number = 3;\n\n    @Output() eventClicked = new EventEmitter();\n\n    // List of observables (one per timeseries / event type)\n    timeseries$: ReplaySubject[];\n    events$: ReplaySubject[];\n\n    // Combination (combineLastest) of the timeline observables\n    mergedTimeseries$: Observable;\n    mergedEvents$: Observable;\n\n    // Current timeline selection\n    selection?: [Date, Date];\n\n    // Current range (undefined if no zoom / auto-scaling)\n    currentRange?: [Date, Date];\n\n    // Formating method for search queries\n    formatDayRequest = d3.timeFormat(\"%Y-%m-%d\");\n\n    // Actions\n    clearFilters: Action;\n\n    constructor(\n        public facetService: FacetService,\n        public searchService: SearchService,\n        public appService: AppService,\n        public selectionService: SelectionService,\n        public exprBuilder: ExprBuilder,\n        public cdRef: ChangeDetectorRef,\n        public audit: AuditWebService\n    ){\n        super();\n\n        // Update the events when the selection of records changes\n        this.selectionService.events.subscribe(event => {\n            const i = this.events.findIndex(e => (e as TimelineRecords).field);\n            if(i !== -1) {\n                this.events$[i].next(this.getRecordsAsEvents(this.events[i] as TimelineRecords));\n            }\n        });\n        \n        // Clear the current filters\n        this.clearFilters = new Action({\n            icon: \"far fa-minus-square\",\n            title: \"msg#facet.clearSelects\",\n            action: () => {\n                this.selection = undefined;\n                this.searchService.query.removeSelect(this.name);\n                this.searchService.search();\n            }\n        });\n\n    }\n\n    getMinDate(): Date | undefined {\n        return this.currentRange? this.currentRange[0] : this.minDate;\n    }\n\n    getMaxDate(): Date | undefined {\n        return this.currentRange? this.currentRange[1] : this.maxDate;\n    }\n\n    override get actions(): Action[] {\n        const actions: Action[] = [];\n        if(this.facetService.hasFiltered(this.name)){\n            actions.push(this.clearFilters);\n        }\n        return actions;\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n\n        // Skip simple changes (width, height, etc.) that don't require modifying the timeline data\n        if(!changes.timeseries && !changes.events && !changes.results) {\n            return;\n        }\n\n        // Retrieve the current active selection for this timeline (if any)\n        const select = this.searchService.query.findSelect(this.name);\n\n        // Update the selection if it is not already set (which is the case on a page refresh)\n        if(select && !this.selection) {\n            let parsedexpr = this.appService.parseExpr(select.expression) as Expr;\n            if(!Utils.isString(parsedexpr)){\n                while(!parsedexpr.isLeaf){ // The select might over multiple fields (modified between [...] AND created between [...])\n                    parsedexpr = parsedexpr.operands[0];\n                }\n                if(parsedexpr.values){\n                    this.selection = [new Date(parsedexpr.values[0]), new Date(parsedexpr.values[1])];\n                    // Guess a current range based on the selection\n                    if(!this.currentRange) {\n                        const interval = this.selection[1].getTime() - this.selection[0].getTime();\n                        this.currentRange = [ // Selected Interval +10% on each side\n                            new Date(this.selection[0].getTime()-interval*0.1),\n                            new Date(this.selection[1].getTime()+interval*0.1)\n                        ];\n                    }\n                }\n            }\n        }\n        // If no active selection we remove the selection from the timeline, along with the current zoomed range\n        else if(!select) {\n            this.selection = undefined; // If no select, it was possibly removed by the user, we need to update our selection\n            this.currentRange = undefined; // current range is set by zoom events, we want to reset it only if there are no select (ie. no user interaction)\n        }\n\n        // Initialize timeseries\n        if(!this.timeseries$ || changes[\"timeseries\"]) {\n            // Create one observable per timeline\n            this.timeseries$ = this.timeseries.map(_ => new ReplaySubject(1));\n            this.mergedTimeseries$ = combineLatest(this.timeseries$);\n        }\n\n        this.updateTimeseries();\n\n        // Initialize events\n        if(!this.events$ || changes[\"events\"]) {\n            this.events$ = this.events.map(_ => new ReplaySubject(1));\n            this.mergedEvents$ = combineLatest(this.events$).pipe(\n                map(events => ([] as TimelineEvent[]).concat(...events))\n            );\n        }\n\n        this.updateEvents();\n        \n    }\n\n    /**\n     * For each timeseries configuration given as an input,\n     * update the data via the list of observables (timelines$)\n     */\n    updateTimeseries() {\n        this.timeseries.forEach((config, i) => {\n\n            const subject = this.timeseries$[i];\n\n            if((config as TimelineSeries).dates !== undefined) {\n                subject.next(config as TimelineSeries);\n            }\n\n            else {\n                let agg = config as TimelineAggregation;\n                if(agg.aggregation === undefined){\n                    \n                    config = config as TimelineCombinedAggregations;\n                    // We want to set the default scale if it hasn't been set before\n                    // or if no zoom/selection has been made (so current scale may not be adapted to the new results)\n                    if(!this.currentRange || !config.current){\n                        config.current = config.default;\n                    }\n\n                    agg = config.current;\n                }\n                \n                const range: [Date, Date] | undefined = !!this.minAggregationDate && !!this.maxAggregationDate ?\n                    [this.minAggregationDate, this.maxAggregationDate] : undefined;\n\n                this.getTimeseries(agg, range).subscribe({\n                    next: d => subject.next(d),\n                    error: err => subject.error(err)\n                });\n            }\n\n        });\n    }\n\n    /**\n     * For each event configuration given as an input, \n     * update the data via the list of observables (events$)\n     */\n    updateEvents() {\n        this.events.forEach((config, i) => {\n            const subject = this.events$[i];\n\n            if((config as TimelineRecords).field) {\n                subject.next(this.getRecordsAsEvents(config as TimelineRecords));\n            }\n            else if((config as TimelineEventAggregation).aggregation){\n                this.getEventAggregation(config as TimelineEventAggregation).subscribe({\n                    next: t => subject.next(t),\n                    error: err => subject.error(err)\n                });\n            }\n            else if(Array.isArray(config)){\n                subject.next(config as TimelineEvent[]);\n            }\n        });\n    }\n\n    /**\n     * Get a timeseries aggregation via the getAggregation method.\n     * @param config \n     * @param subject \n     * @param range \n     */\n    getTimeseries(config: TimelineAggregation, range?: [Date, Date]): Observable {\n        return this.getAggregation(config.aggregation, range).pipe(\n            map(d => BsFacetTimelineComponent.createTimeseries(config, d.aggregation, d.ccaggregation, range))\n        );\n    }\n\n    /**\n     * Get an aggregation of events via the getAggregation method\n     * @param config \n     * @param subject \n     */\n    getEventAggregation(config: TimelineEventAggregation): Observable {\n        return this.getAggregation(config.aggregation).pipe(\n            map(d => BsFacetTimelineComponent.createAggregationEvents(config, d.aggregation, d.ccaggregation))\n        );\n    }\n\n    /**\n     * Returns the list of records from the results as a list of TimelineEvent when they have a\n     * modified date. The size and styles of the events are determined from the given configuration (TimelineRecords)\n     * @param config \n     */\n    getRecordsAsEvents(config: TimelineRecords): TimelineEvent[] {\n        if(this.results) {\n            return this.results.records\n                .filter(r => !!Utils.toDate(r[config.field]))\n                .map(r => {\n                    return {\n                        id: r.id,\n                        date: Utils.toDate(r[config.field])!,\n                        size: !config.size? 6 : typeof config.size === 'function'? config.size(r, r.$selected) : config.size,\n                        styles: !config.styles? BsFacetTimelineComponent.defaultRecordStyle(r.$selected) :\n                                typeof config.styles === 'function'? config.styles(r, r.$selected) : \n                                config.styles,\n                        display: config.display? config.display(r) : r.title,\n                        // Custom property for click action\n                        record: r\n                    }\n                });\n        }\n        return [];\n    }\n\n\n    /**\n     * returns an aggregation and its configuration either directly from the facet service of\n     * by fetching it from the server.\n     * @param aggregationName \n     * @param range \n     */\n    getAggregation(aggregationName: string, range?: [Date, Date]): Observable {\n        \n        const ccaggregation = this.appService.getCCAggregation(aggregationName);\n        const aggregation = this.facetService.getAggregation(aggregationName, this.results);\n        \n        if(aggregation && ccaggregation) {\n            return of({aggregation: aggregation, ccaggregation: ccaggregation});\n        }\n\n        else if(ccaggregation) {\n            return this.fetchAggregation(aggregationName, ccaggregation, range).pipe(\n                map(agg => {return {aggregation: agg, ccaggregation: ccaggregation} })\n            );\n        }\n\n        else {\n            throw new Error(`Aggregation ${aggregationName} does not exist in the Query web service`);\n        }\n    }\n\n    /**\n     * Get an aggregation from the server, filtering by range if provided\n     * @param aggregation \n     * @param ccaggregation \n     * @param range \n     */\n    fetchAggregation(aggregation: string, ccaggregation: CCAggregation, range?: [Date, Date]): Observable {\n        const query = Utils.copy(this.searchService.query);\n        query.action = \"aggregate\";\n        query.aggregations = [aggregation];\n\n        if(range){\n            query.addSelect(`${ccaggregation.column}:[${this.formatDayRequest(range[0])}..${this.formatDayRequest(range[1])}]`);\n        }\n\n        return this.searchService.getResults(query, undefined, {searchInactive: true}).pipe(\n            map(results => results.aggregations[0])\n        );\n    }\n\n    /**\n     * Given a combined aggregation configuration and a range, this method searches for the most \n     * adapted aggregation scale (years, months, weeks or days) and updates the data if necessary.\n     * @param config \n     * @param range \n     * @param iTimeseries \n     */\n    updateCombinedAggregation(config: TimelineCombinedAggregations, range: [Date, Date], timeseries$: ReplaySubject) {\n        const nmonths = d3.timeMonth.count(range[0], range[1]);\n\n        if(!config.maxNMonths || config.maxNMonths.length !== config.aggregations.length) {\n            console.error(config);\n            throw new Error(\"maxNMonths and aggregations must have the same number of items\");\n        }\n\n        // Find the aggregation with min maxNMonths with maxNMonths >= nmonths\n        let jMin;\n        config.maxNMonths.forEach((maxNMonths, j) => {\n            if(maxNMonths >= nmonths && (jMin === undefined || maxNMonths  this.currentRange[1])) {\n\n            config.current = bestAggregation;\n            this.getTimeseries(bestAggregation, range).subscribe({\n                next: d => timeseries$.next(d),\n                error: err => timeseries$.error(err)\n            });\n        }\n\n    }\n\n\n    // Interaction callbacks\n\n    /**\n     * On selection is triggered when the user selects a range of dates on the timeline.\n     * This has the effect of updating the query.select (either remove it or add/replace it)\n     * and it updates the search.\n     * @param selection \n     */\n    onSelectionChange(selection: [Date, Date] | undefined) {\n        this.selection = selection;\n        if(selection) {\n            const from = this.formatDayRequest(selection[0]);\n            const to = this.formatDayRequest(selection[1]);\n\n            const exprs: string[] = [];\n            this.searchService.query.removeSelect(this.name);\n\n            this.timeseries.forEach((config) => {\n                    \n                if((config as TimelineAggregation).aggregation !== undefined \n                || (config as TimelineCombinedAggregations).default !== undefined) {\n\n                    const aggregation = (config as TimelineAggregation).aggregation || (config as TimelineCombinedAggregations).default.aggregation;\n                    const ccaggregation = this.appService.getCCAggregation(aggregation);\n                    if(ccaggregation) {\n                        exprs.push(this.exprBuilder.makeRangeExpr(ccaggregation.column, from, to));\n                    }\n                }\n\n            });\n\n            if(exprs.length > 0) {\n                const expr = this.exprBuilder.concatOrExpr(exprs);\n                this.searchService.query.addSelect(expr, this.name);\n                this.searchService.search(undefined, {type:AuditEventType.Search_Timeline_Usage, detail: { from, to }});\n            }            \n        }\n\n        else if(this.searchService.query.findSelect(this.name)) {\n            this.searchService.query.removeSelect(this.name);\n            this.searchService.search();\n        }\n    }\n\n    /**\n     * On range is triggered when the user zooms in our out on the timeline,\n     * which triggers a dynamic update of the combined aggregation timelines.\n     * @param range \n     */\n    onRangeChange(range: [Date, Date]) {\n\n        this.timeseries.forEach((config, i) => {\n            if((config as TimelineCombinedAggregations).aggregations !== undefined) {\n                this.updateCombinedAggregation(config as TimelineCombinedAggregations, range, this.timeseries$[i]);\n            }\n        });\n\n        // Note: updateCombinedAggregation() compares currentRange and range\n        // So this update must be kept after the forEach\n        this.currentRange = range;\n    }\n\n    /**\n     * When an event is clicked, the event is propagated to the parent, and the tooltip is closed\n     * @param event \n     * @param closeTooltip \n     */\n    onEventClicked(event: TimelineEvent, closeTooltip: () => void) {\n        this.eventClicked.next(event);\n        closeTooltip();\n        return false;\n    }\n\n\n    // Static utility methods\n    \n    \n    /**\n     * Create a time series object from its config, data (aggregation) and configuration (ccaggregation)\n     * @param config \n     * @param aggregation \n     * @param ccaggregation \n     */\n    static createTimeseries(config: TimelineAggregation, aggregation: Aggregation, ccaggregation: CCAggregation, range?: [Date, Date]): TimelineSeries {\n        return {\n            ...config,\n            name: config.name || aggregation.name,\n            dates: this.createDatapoints(aggregation.items, ccaggregation?.mask, range),\n        }\n    }\n\n    /**\n     * Create a list of events from its config, data (aggregation) and configuration (ccaggregation)\n     * @param config \n     * @param aggregation \n     * @param ccaggregation \n     */\n    static createAggregationEvents(config: TimelineEventAggregation, aggregation: Aggregation, ccaggregation: CCAggregation): TimelineEvent[] {\n        return !aggregation.items? [] : aggregation.items.map(item => {\n            return {\n                id: config.getDate(item).toUTCString()+\"|\"+config.getDisplay(item),\n                date: config.getDate(item),\n                size: !config.size? 6 : typeof config.size === 'function'? config.size(item) : config.size,\n                styles: !config.styles? undefined :\n                        typeof config.styles === 'function'? config.styles(item) : \n                        config.styles,                \n                display: config.getDisplay(item),\n\n                // Custom params for click action\n                item: item,\n                aggregation: aggregation,\n                ccaggregation: ccaggregation\n            }\n        });\n    }\n\n    /**\n     * This methods transforms a raw list of aggregation items into\n     * a time series completed with zeros, following the below scheme:\n     * Aggregation:  [    # #         # # #   #     # #       # # #    ]\n     * Series:       [  0 # # 0     0 # # # 0 # 0 0 # # 0   0 # # # 0  ]\n     * @param items \n     * @param resolution \n     */\n    static createDatapoints(items: AggregationItem[] | undefined, resolution: string, range?: [Date, Date]): TimelineDate[] {\n\n        if(!items) {\n            return [];\n        }\n\n        const timeInterval = this.getD3TimeInterval(resolution);\n        \n        const series: TimelineDate[] = [];\n\n        const _items = items\n            .map(item => {\n                if(!!item.value && !(item.value instanceof Date)){\n                    const val = item.value.toString();\n                    item.value = moment(val.length  undefined; // So it gets filtered out\n                    }\n                }\n                return item;\n            })\n            .filter(item => !!item.value && (!range || ((item.value as Date) >= range[0] && (item.value as Date)  {\n            const date = item.value as Date;\n            \n            if(i === 0 || timeInterval.offset(series[series.length-1].date, 1)  item.date = this.shiftDate(item.date, resolution));\n\n        return series;\n    }\n\n    \n    /**\n     * Shift the date to the middle of their time bracket (2020 = middle of the year, April = middle of the month, etc.)\n     * @param date \n     * @param resolution \n     */\n    static shiftDate(date: Date, resolution: string): Date {\n        switch(resolution){\n            case \"YYYY-MM-DD\": return d3.timeHour.offset(date, 12);\n            case \"YYYY-WW\": return d3.timeHour.offset(date, 84); // 3*24 + 12\n            case \"YYYY-MM\": return d3.timeDay.offset(date, 15);\n            case \"YYYY\": return d3.timeMonth.offset(date, 6);\n        }\n        return date;\n    }\n\n\n    static getD3TimeInterval(resolution: string): d3.CountableTimeInterval {\n        switch(resolution){\n            case \"YYYY-MM-DD\": return d3.timeDay;\n            case \"YYYY-WW\": return d3.timeWeek;\n            case \"YYYY-MM\": return d3.timeMonth;\n            case \"YYYY\": return d3.timeYear;\n        }\n        return d3.timeDay;\n    }\n\n    static defaultRecordStyle(selected: boolean): {[key: string]: any} {\n        return {\n            'fill': selected? 'red' : 'green',\n            'stroke': selected? 'red' : undefined,\n            'stroke-width': selected? '2px' : undefined\n        };\n    }\n}\n    \n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/TimelineSeries.html":{"url":"interfaces/TimelineSeries.html","title":"interface - TimelineSeries","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  TimelineSeries\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            timeline/bootstrap/timeline.component.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            areaStyles\n                                        \n                                \n                                \n                                        \n                                            dates\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            lineStyles\n                                        \n                                \n                                \n                                        \n                                            name\n                                        \n                                \n                                \n                                        \n                                            primary\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            showDatapoints\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        areaStyles\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        areaStyles:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        dates\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        dates:         TimelineDate[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         TimelineDate[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        lineStyles\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        lineStyles:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        name\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        name:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        primary\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        primary:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        showDatapoints\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        showDatapoints:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Component, Input, Output, ElementRef, ViewChild, OnChanges, AfterViewInit, EventEmitter, SimpleChanges, OnDestroy, SimpleChange, ContentChild, TemplateRef, ChangeDetectorRef } from '@angular/core';\nimport { Subscription } from 'rxjs';\nimport * as d3 from 'd3';\n\nimport { IntlService } from '@sinequa/core/intl';\nimport {Record} from '@sinequa/core/web-services';\n\n\nexport interface TimelineDate {\n    date: Date;\n    value: number;\n}\n\nexport interface TimelineSeries {\n    name: string;\n    dates: TimelineDate[];\n    primary: boolean;\n    lineStyles?: {[key:string]: any};\n    areaStyles?:  {[key:string]: any};\n    showDatapoints?: boolean;\n}\n\nexport interface TimelineEvent {\n    date: Date;\n    id: string;\n    display: string;\n    size?: number;\n    sizeOpened?: number;\n    styles?: {[key:string]: any};\n    record?: Record;\n}\n\n@Component({\n    selector: 'sq-timeline',\n    templateUrl: './timeline.component.html',\n    styleUrls: ['./timeline.component.scss']\n})\nexport class BsTimelineComponent implements OnChanges, AfterViewInit, OnDestroy {\n\n    @Input() data?: TimelineSeries[];\n    @Input() events?: TimelineEvent[];\n\n    @Input() selection?: [Date|undefined, Date|undefined];\n\n    // Initial scale (prior to any zoom)\n    @Input() minDate?: Date;\n    @Input() maxDate?: Date;\n\n    @Input() zoomable = true;\n    @Input() minZoomDays = 1; // Max 1 day scale\n    @Input() maxZoomDays = 365 * 100; // Max 100 years scale\n\n    @Input() width = 600;\n    @Input() height = 200;\n    @Input() margin = {top: 15, bottom: 20, left: 40, right: 15};\n\n    @Input() curveType = \"curveMonotoneX\";\n\n    @Input() showTooltip = true;\n    @Input() theme: \"light\" | \"dark\" = \"light\";\n\n    @Output() selectionChange = new EventEmitter();\n    @Output() rangeInit = new EventEmitter();\n    @Output() rangeChange = new EventEmitter();\n\n    @ContentChild(\"tooltipTpl\", {static: false}) tooltipTpl: TemplateRef;\n\n    // Data\n    groupedEvents: TimelineEvent[][] = [];\n\n    // Scales\n    x: d3.ScaleTime; // Read/Write\n    xt: d3.ScaleTime; // Transformed X axis due to Zoom\n    y: d3.ScaleLinear; // Read-only / domain updated\n\n    // Shapes\n    area: d3.Area; // Read only\n    line: d3.Line; // Read only\n\n    // Behaviors\n    brushBehavior: d3.BrushBehavior; // Read only\n    zoomBehavior: d3.ZoomBehavior; // Read/Write\n    brushSelection: [number, number] | null;\n    currentSelection?: (Date|undefined)[]; // Read/Write\n\n    // Elements\n    @ViewChild(\"xAxis\") gx: ElementRef;\n    @ViewChild(\"yAxis\") gy: ElementRef;\n    @ViewChild(\"brush\") gbrush: ElementRef;\n\n    // Selections\n    xAxis$: d3.Selection;\n    yAxis$: d3.Selection;\n    brush$: d3.Selection;\n    grips$: d3.Selection;\n\n    // Tooltip\n    tooltipItem: TimelineEvent[] | undefined;\n    tooltipX: number | undefined;\n    tooltipDatapoints?: (TimelineDate|undefined)[];\n    tooltipOrientation: \"left\" | \"right\";\n    tooltipTop: number;\n    tooltipRight: number;\n    tooltipLeft: number;\n    bisectDate = d3.bisector(d => { return d.date; }).left;\n\n    // Misc\n    viewInit: boolean;\n    intlSubscription: Subscription;\n    static counter = 0;\n    instance: number;\n\n    zooming: boolean;\n    brushing: boolean;\n\n    constructor(\n        protected el: ElementRef,\n        protected intlService: IntlService,\n        protected cdRef: ChangeDetectorRef\n    ){\n        // When the locale changes, we rebuild the X scale and axis\n        this.intlSubscription = this.intlService.events.subscribe(e => this.updateXAxis());\n\n        this.instance = BsTimelineComponent.counter++;\n\n    }\n\n    get innerWidth(): number {\n        return this.width - this.margin.left - this.margin.right;\n    }\n\n    get innerHeight(): number {\n        return this.height - this.margin.top - this.margin.bottom;\n    }\n\n    // Note: ngOnChanges is always called once before ngAfterViewInit\n    ngOnChanges(changes: SimpleChanges) {\n\n        if(!this.x) {\n\n            // Scales\n            this.x = d3.scaleUtc()\n                .range([0, this.innerWidth]);\n            this.xt = this.x;\n\n            this.y = d3.scaleLinear()\n                .range([this.innerHeight, 0]);\n\n            // Shapes\n            this.area = d3.area()\n                .curve(d3[this.curveType])\n                .x(d => this.xt(d.date)!)\n                .y0(this.y(0)!)\n                .y1(d => this.y(d.value)!);\n\n            this.line = d3.line()\n                .curve(d3[this.curveType])\n                .x(d => this.xt(d.date)!)\n                .y(d => this.y(d.value)!);\n\n            // Behaviors\n            this.brushBehavior = d3.brushX()\n                .extent([[0, 0], [this.innerWidth, this.innerHeight]])\n                .on(\"start\", () => this.brushing = true)\n                .on('brush', () => this.onBrush())\n                .on('end', () => this.onBrushEnd());\n        }\n\n        // Resize handling\n\n        if(changes[\"height\"]) {\n            this.y.range([this.innerHeight, 0]);\n            this.area.y0(this.y(0)!);\n            this.brushBehavior.extent([[0, 0], [this.innerWidth, this.innerHeight]]);\n            if(this.viewInit) {\n                this.drawYAxis();\n                this.brush$.call(this.brushBehavior);\n                this.grips$.selectAll(\"path\").attr(\"d\", this.drawGrips);\n            }\n        }\n\n        if(changes[\"width\"]) {\n            this.x.range([0, this.innerWidth]);\n            this.brushBehavior.extent([[0, 0], [this.innerWidth, this.innerHeight]]);\n            if(this.viewInit) {\n                this.drawXAxis();\n                if(!changes[\"height\"]) {\n                    this.brush$.call(this.brushBehavior);\n                    this.grips$.selectAll(\"path\").attr(\"d\", this.drawGrips);\n                }\n            }\n        }\n\n        // If the parent changes the selection, we want to update it\n        // If not, we keep the current selection as is\n        // (Important to keep this statement outside of the if bellow since\n        // the change of selection can be combined with a change of data)\n        const selectionChanged = changes[\"selection\"] && this.updateSelection();\n\n        // Only changes in data result in redrawing the chart\n        // (other input, except selection, are expected to be static)\n        if(this.viewInit && changes[\"data\"] && this.checkDataChanges(changes[\"data\"])){\n            this.updateChart();\n        }\n\n        // If the parent changes the selection (even though the data hasn't changed),\n        // we want to update the brush.\n        // If not, we keep the current selection as is.\n        // We can update the brush only if the view is initialized (viewInit).\n        else if(this.viewInit && ((changes[\"selection\"] && selectionChanged) || changes[\"width\"])) {\n            this.updateBrush();\n        }\n\n        if(changes[\"events\"]) {\n            this.updateEvents();\n        }\n\n    }\n\n    // Note: In onAfterViewInit we can access gx, gy, etc., obtained with @ViewChild.\n    // At this point we can initialize all the primitives and call updateChart()\n    ngAfterViewInit() {\n\n        // Get native elements\n        this.xAxis$ = d3.select(this.gx.nativeElement);\n        this.yAxis$ = d3.select(this.gy.nativeElement);\n        this.brush$ = d3.select(this.gbrush.nativeElement);\n\n        this.brush$\n            .call(this.brushBehavior)\n            .on(\"mousemove\", () => this.onMousemove())\n            .on(\"mouseout\", () => this.onMouseout());\n\n        // Add 2 \"grips\" to the brush goup, on each side of the rectangle\n        // Grips are inserted programmatically to appear on top the brush selection\n        this.grips$ = this.brush$.selectAll(\".grip\")\n            .data([{type: \"w\"}, {type: \"e\"}])\n            .enter()\n            .append(\"g\")\n            .attr(\"class\", \"grip\")\n            .attr(\"display\", \"none\");\n\n        this.grips$.append(\"path\")\n            .attr(\"d\", this.drawGrips);\n\n        this.grips$.append(\"text\")\n            .attr(\"class\", \"grip-text\")\n            .attr(\"text-anchor\", d => d.type === \"w\"? 'end' : 'start')\n            .attr(\"x\", d => d.type === \"w\"? -5 : 5)\n            .attr(\"y\", 10);\n\n        this.viewInit = true;\n\n        this.updateChart();\n\n        // This is necessary to prevent \"Expression has changed after check\" errors\n        // caused by calling updateChart inside ngAfterViewInit().\n        // Unfortunately this is necessary because we need the DOM to be rendered in order fill the DOM\n        // (for example gAxis needs to exist so we can draw the axis)\n        this.cdRef.detectChanges();\n    }\n\n    /**\n     * Redraw the graph (needs to be called after ngAfterViewInit so that the DOM elements\n     * are accessible)\n     */\n    updateChart() {\n\n        this.turnoffTooltip();\n\n        if(this.data && this.data.length) {\n\n            // Update scales\n            // Note: does not stop the update process even if the data is invalid/empty\n            this.updateScales(this.data);\n\n            // Update Axes\n            this.updateAxes();\n\n            // Update Zoom\n            this.updateZoom();\n\n            // Update brush\n            this.updateBrush();\n\n        }\n\n    }\n\n\n    /**\n     * Update the x & y scales, based on the input data\n     * @param data\n     */\n    protected updateScales(data: TimelineSeries[]) {\n\n        // Set x and y scales with the primary series (or first one)\n        const primarySeries = data.filter(s => s.primary) || [data[0]];\n        const allPrimaryDates = ([] as TimelineDate[]).concat(...primarySeries.map(s => s.dates));\n\n        const xExtent = d3.extent(allPrimaryDates, d => d.date);\n        const yMax = d3.max(data,\n            s => d3.max(s.dates, d => d.value));\n\n        // Check validity of data\n        if(!xExtent[0] || !xExtent[1] || !yMax) {\n            if (allPrimaryDates.length !== 0) {\n                console.error('Invalid timeseries', primarySeries);\n            }\n            this.x.domain(this.xt.domain());\n            this.xt = this.x;\n            return;\n        }\n\n        // Enforce minimum date\n        if(this.minDate) {\n            xExtent[0] = this.minDate;\n        }\n\n        // Enforce maximum date\n        if(this.maxDate) {\n            xExtent[1] = this.maxDate;\n        }\n\n        // Enforce minimum scale (especially when the timeseries contains a single datapoint)\n        const diff = xExtent[1].getTime() - xExtent[0].getTime();\n        const minDiff = this.minZoomDays * 24 * 60 * 60 * 1000;\n        if(diff  this.rangeInit.next(this.xt.domain()));\n    }\n\n    /**\n     * Update the x and y axes\n     */\n    protected updateAxes(){\n        this.drawXAxis();\n        this.drawYAxis();\n    }\n\n    /**\n     * The events are drawn in the template directly. This method simply\n     * updates the grouping of events (when they are close to each other)\n     */\n    protected updateEvents() {\n        this.groupedEvents = this.groupEvents(5);\n    }\n\n    /**\n     * Update/reset the zoom behavior when new data comes in (and new scales, axes...)\n     */\n    protected updateZoom() {\n\n        if(!this.zoomable) {\n            return;\n        }\n\n        // Reset the previous zoom !\n        if(this.zoomBehavior){\n            this.zoomBehavior.on(\"zoom\", null);\n            this.zoomBehavior.on(\"end\", null);\n            this.zoomBehavior.transform(this.brush$, d3.zoomIdentity);\n        }\n\n        // Compute the minimum and maximum zoom\n        const xDomain = this.x.domain();\n        const scaleExtent = (xDomain[1].getTime() - xDomain[0].getTime()) / 86400000; // current number of days on the scale\n\n        // Create the behavior\n        this.zoomBehavior = d3.zoom()\n            .extent([[0, 0], [this.innerWidth, this.innerHeight]])\n            .scaleExtent([scaleExtent/this.maxZoomDays, scaleExtent/this.minZoomDays])\n            .on(\"zoom\", () => this.onZoom())\n            .on(\"end\", () => this.onZoomEnd());\n\n        // Apply on to the brush element\n        this.brush$\n            .call(this.zoomBehavior)\n            .on(\"mousedown.zoom\", null) // Deactivate mouse event (taken by brush)\n            .on(\"touchstart.zoom\", null)\n            .on(\"touchmove.zoom\", null)\n            .on(\"touchend.zoom\", null);\n\n    }\n\n    /**\n     * Updates the brush (or hides it if no currentSelection),\n     * following a change of x scale.\n     * Number.MIN_VALUE and Number.MAX_VALUE are used to support semi-open intervals\n     */\n    protected updateBrush() {\n        if(this.currentSelection) {\n            const x0 = this.currentSelection[0] ? this.xt(this.currentSelection[0])! : Number.MIN_VALUE;\n            const x1 = this.currentSelection[1] ? this.xt(this.currentSelection[1])! : Number.MAX_VALUE;\n            const selection: [number, number] = [x0,x1];\n            this.brush$.call(this.brushBehavior.move, selection);\n        }\n        else {\n            this.brush$.call(this.brushBehavior.move, null);\n        }\n    }\n\n    /**\n     * This method tests whether the input selection is different from the currentSelection\n     * and updates it. It returns true if there is actually a change.\n     */\n    protected updateSelection(): boolean {\n        const change = this.checkSelectionChange(this.selection, this.currentSelection);\n        this.currentSelection = this.selection;\n        return change;\n    }\n\n    /**\n     * Recreate the x scale and axes (in the event of a language change)\n     */\n    protected updateXAxis(){\n        this.x = d3.scaleUtc()\n            .domain(this.x.domain())\n            .range(this.x.range());\n\n        this.xt = d3.scaleUtc()\n            .domain(this.xt.domain())\n            .range(this.xt.range());\n\n        this.drawXAxis();\n    }\n\n    /**\n     * Draws the X axis\n     */\n    protected drawXAxis() {\n        const nTicks = Math.round(this.width / 100);\n        this.xAxis$.call(d3.axisBottom(this.xt).ticks(nTicks));\n        this.xAxis$.selectAll(\".domain\").remove(); // Remove the axis line\n    }\n\n    /**\n     * Draws the Y axis\n     */\n    protected drawYAxis() {\n        const nTicks = Math.round(this.height / 40);\n\n        const yAxisTicks = this.y.ticks(nTicks)\n            .filter(tick => Number.isInteger(tick)); // Keep only integer ticks https://stackoverflow.com/questions/13576906/d3-tick-marks-on-integers-only/56821215\n\n        const yAxis = d3.axisLeft(this.y)\n            .tickValues(yAxisTicks)\n            .tickFormat(d3.format(\"~s\")); //https://github.com/d3/d3-format\n        this.yAxis$.call(yAxis);\n        this.yAxis$.selectAll(\".domain\").remove(); // Remove the axis line\n    }\n\n    /**\n     * Updates the display of the brush's grips when the brush has moved\n     * When the selection is a semi-open interval, we don't display the infinite border\n     * @param selection\n     */\n    protected updateGrips(selection: [number, number] | null) {\n        if (!selection) {\n            this.grips$.attr(\"display\", \"none\");\n        }\n        else {\n            this.grips$\n                .attr(\"display\", (d, i) => (selection[i] === Number.MAX_VALUE || selection[i] === Number.MIN_VALUE) ? \"none\" : null)\n                .attr(\"transform\", (d, i) => (selection[i] === Number.MAX_VALUE || selection[i] === Number.MIN_VALUE) ? null : \"translate(\" + selection[i] + \")\");\n            this.grips$.selectAll('.grip-text')\n                .text(\n                    (d) => {\n                        const index = d.type === 'w'? 0 : 1;\n                        return (selection[index] === Number.MAX_VALUE || selection[index] === Number.MIN_VALUE) ? null : this.intlService.formatDate(this.xt.invert(selection[index]))\n                    }\n                );\n        }\n    }\n\n\n    // Interaction callbacks\n\n    onBrush() {\n        this.turnoffTooltip();\n        this.brushSelection = d3.brushSelection(this.gbrush.nativeElement) as [number, number] | null;\n        this.updateGrips(this.brushSelection);\n    }\n\n    onBrushEnd(){\n        this.brushing = false;\n        this.onBrush();\n        const newSelection = this.brushSelection\n            ?.sort((a,b)=>a-b)\n            .map(x => (x === Number.MAX_VALUE || x === Number.MIN_VALUE) ? undefined : this.xt.invert(x));\n        if(this.checkSelectionChange(this.currentSelection, newSelection)) {\n            this.currentSelection = newSelection;\n            this.selectionChange.next(this.currentSelection);\n        }\n    }\n\n    onZoom(){\n\n        this.turnoffTooltip();\n\n        this.zooming = true;\n\n        // Create a transformed scale without modifying the original (to enforce the limit of scaleExtent)\n        const transform = d3.zoomTransform(this.brush$.node() as Element);\n        this.xt = transform.rescaleX(this.x);\n\n        // Redraw the axis\n        this.drawXAxis();\n\n        // Update the brush position\n        if(this.currentSelection){\n            const x0 = this.currentSelection[0] ? this.xt(this.currentSelection[0])! : Number.MIN_VALUE;\n            const x1 = this.currentSelection[1] ? this.xt(this.currentSelection[1])! : Number.MAX_VALUE;\n            const selection: [number, number] = [x0,x1];\n            this.brushBehavior.move(this.brush$, selection);\n        }\n\n    }\n\n    onZoomEnd(){\n        this.zooming = false;\n\n        // At the end of a zoom, we need to reorganize the grouping of events\n        this.updateEvents();\n\n        // Fire an event\n        this.rangeChange.next(this.xt.domain());\n    }\n\n    /**\n     * Redraw the simple tooltip (vertical line)\n     */\n    onMousemove() {\n        if(!this.tooltipItem && this.showTooltip) {\n            this.tooltipX = d3.mouse(this.gbrush.nativeElement)[0];\n            const date = this.xt.invert(this.tooltipX);\n            this.tooltipDatapoints = this.data?.map(series => {\n              if(!series.showDatapoints) return;\n              const i = this.bisectDate(series.dates, date);\n              const d0 = series.dates[i - 1];\n              const d1 = series.dates[i];\n              if(!d0 || !d1) return;\n              return date.getTime() - d0.date.getTime() > d1.date.getTime() - date.getTime() ? d1 : d0;\n            });\n        }\n    }\n\n    /**\n     * Remove the simple tooltip (vertical line)\n     */\n    onMouseout() {\n        if(!this.tooltipItem) {\n            this.tooltipX = undefined\n        }\n    }\n\n    /**\n     * Responds to a click on an event (triangle) by essentially turning tooltip on/off\n     * @param event\n     */\n    onEventClick(event: TimelineEvent[]) {\n\n        if(this.tooltipItem === event) {\n            this.turnoffTooltip();\n        }\n\n        else {\n\n            if(this.tooltipItem) {\n                this.turnoffTooltip();\n            }\n\n            this.tooltipItem = event;\n            this.tooltipX = this.xt(event[0].date);\n\n            // Since we use viewBox to auto-adjust the SVG to the container size, we have to\n            // convert from the SVG coordinate system to the HTML coordinate system\n            const x = this.margin.left + this.tooltipX!;\n            const actualWidth = (this.el.nativeElement as HTMLElement).offsetWidth;\n            const scale = actualWidth / this.width;\n            const relativeX = x / this.width;\n\n            // Tooltip to the right\n            if(relativeX  {\n        if(this.tooltipItem) {\n            this.tooltipItem = undefined;\n            this.tooltipX = undefined;\n        }\n    }\n\n    ngOnDestroy(){\n        this.intlSubscription.unsubscribe();\n    }\n\n    // Utilities\n\n    /**\n     * Transforms the input list of events into a list of list, by grouping events within a bin\n     * when their dates are close together. This closeness is measured in \"pixel per event\".\n     * Note: this currently uses a histogram-like algorithm, which could probably be improved (clustering?)\n     * @param pixPerEvent\n     */\n    protected groupEvents(pixPerEvent: number): TimelineEvent[][] {\n        const events: TimelineEvent[][] = [];\n\n        if(this.events) {\n            const nbins = Math.floor(this.innerWidth / pixPerEvent);\n            const domain = this.xt.domain();\n            const timeinterval = (domain[1].getTime() - domain[0].getTime()) / nbins;\n            this.events.concat()\n                .sort((a,b) => a.date.getTime() - b.date.getTime())\n                .forEach(event => {\n                    if(events.length === 0) {\n                        events.push([event]);\n                    }\n                    else {\n                        const last = events[events.length-1];\n                        const lastbin = Math.floor(last[0].date.getTime() / timeinterval);\n                        const bin = Math.floor(event.date.getTime() / timeinterval);\n                        if(bin === lastbin) {\n                            last.push(event);\n                        }\n                        else {\n                            events.push([event]);\n                        }\n                    }\n                });\n        }\n\n        return events;\n    }\n\n    /**\n     * Return true if there are actual changes in the data\n     * (in particular will ignore data refresh which change nothing)\n     * @param change\n     */\n    protected checkDataChanges(change: SimpleChange): boolean {\n        const previousValue = change.previousValue as TimelineSeries[] | undefined;\n        const currentValue = change.currentValue as TimelineSeries[] | undefined;\n\n        // Ignore null/undefined difference cause by | async\n        // See: https://github.com/angular/angular/issues/16982\n        if(currentValue === null && previousValue === undefined || currentValue === undefined && previousValue === null)\n            return false;\n\n        // Else, if one of them is null/undefined (or difference in length), there's clearly a change\n        if(!previousValue || !currentValue || previousValue.length !== currentValue.length)\n            return true;\n\n        // If both defined and same size, we need to compare the data piece by piece\n        for(let i=0; i {\n        const gripHeight = Math.min(10, Math.max((this.innerHeight) / 8, 4));\n        const gripWidth = gripHeight;\n\n        const x = -gripWidth / 2;\n        const y = this.innerHeight / 2 - gripHeight / 2;\n\n        const path =\n            'M ' + x + ' ' + y +\n            ' l ' + -gripWidth + ' ' + gripHeight / 2 +\n            ' l ' + gripWidth + ' ' + gripHeight / 2 + ' z ' +\n            'M ' + -x + ' ' + y +\n            ' l ' + gripWidth + ' ' + gripHeight / 2 +\n            ' l ' + -gripWidth + ' ' + gripHeight / 2 + ' z ' +\n            'M 0 ' + 0 + ' l 0 ' + this.innerHeight + ' z ';\n        return path;\n    }\n\n    /**\n     * Returns the size of the triangle drawn for one event (or a group of events)\n     * @param events\n     */\n    eventSize(events: TimelineEvent[]): number {\n        if(events!==this.tooltipItem) {\n            return events[0].size || 6;\n        }\n        else {\n            return events[0].sizeOpened || (events[0].size || 6)*2;\n        }\n    }\n\n    /**\n     * Return a string containing the path coordinates of a triangle for a given event (or group of events)\n     * @param events\n     * @param size\n     */\n    drawEvents(events: TimelineEvent[], size: number): string {\n        const x = this.xt(events[0].date);\n        return 'M ' + x + ' ' + (this.innerHeight - 3*size/2) +\n            ' l ' + -size + ' ' + (3*size/2) +\n            ' l ' + (2*size) + ' ' + 0 + ' z ';\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/VisEvent.html":{"url":"interfaces/VisEvent.html","title":"interface - VisEvent","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  VisEvent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            network/network.component.ts\n        \n\n\n            \n                Description\n            \n            \n                Structure of the events emitted by the Vis.js network\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            edges\n                                        \n                                \n                                \n                                        \n                                            event\n                                        \n                                \n                                \n                                        \n                                            items\n                                        \n                                \n                                \n                                        \n                                            nodes\n                                        \n                                \n                                \n                                        \n                                            pointer\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        edges\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        edges:     string[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        event\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        event:         any\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         any\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        items\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        items:     any[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     any[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        nodes\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        nodes:     string[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        pointer\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        pointer:         any\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         any\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Component, Input, OnChanges, SimpleChanges, OnDestroy, Output, EventEmitter, ContentChild, TemplateRef } from '@angular/core';\nimport { FormGroup, FormControl, FormBuilder } from '@angular/forms';\nimport { Subscription, combineLatest } from 'rxjs';\n\nimport { Results } from '@sinequa/core/web-services';\nimport { AppService, ExprBuilder } from '@sinequa/core/app-utils';\nimport { Utils } from '@sinequa/core/base';\nimport { UserPreferences } from '@sinequa/components/user-settings';\nimport { AbstractFacet } from '@sinequa/components/facet';\nimport { Action } from '@sinequa/components/action';\nimport { SearchService } from '@sinequa/components/search';\n\nimport { Options, VisNetworkService } from 'ngx-vis';\nimport { DataSet } from \"vis-data/peer/esm/vis-data\";\n\nimport { Node, Edge, NetworkDataset, NetworkProvider, NetworkContext } from './network-models';\nimport { IntlService } from '@sinequa/core/intl';\n\n/**\n * Default options of the Vis.js network.\n * See: https://visjs.github.io/vis-network/docs/network/\n */\nexport const defaultOptions: Options = {\n    height: '500px'\n};\n\n/**\n * Structure of the events emitted by the Vis.js network\n */\nexport interface VisEvent {\n    nodes: string[];\n    edges: string[];\n    event: any;\n    items: any[];\n    pointer: any;\n}\n\n@Component({\n    selector: 'sq-network',\n    templateUrl: './network.component.html'\n})\nexport class NetworkComponent extends AbstractFacet implements OnChanges, OnDestroy {\n\n    /** Name of the network - should be unique within the app */\n    @Input() name = \"Network\";\n\n    /** Input results - used to produce a OnChange event when  */\n    @Input() results: Results;\n\n    @Input() providers: NetworkProvider[];\n\n    /** General Vis options passed to the network (https://visjs.github.io/vis-network/docs/network/) */\n    @Input() options: Options = defaultOptions;\n\n    optionsPrefs: Options;\n\n    @Output() nodeClicked = new EventEmitter();\n    @Output() edgeClicked = new EventEmitter();\n\n    // Settings form\n    form: FormGroup;\n\n    // State\n    _networkInitialized: boolean;\n    _selectedNode?: Node;\n    _selectedEdge?: Edge;\n\n    // Actions\n    _actions: Action[] = [];\n    refreshAction: Action;\n    clearFilters: Action;\n\n    // Info cards\n    @ContentChild(\"nodeTpl\", {static: false}) nodeTpl: TemplateRef;\n    @ContentChild(\"edgeTpl\", {static: false}) edgeTpl: TemplateRef;\n\n    readonly context: NetworkContext;\n\n    providersSubscription: Subscription;\n\n    constructor(\n        public networkService: VisNetworkService,\n        public searchService: SearchService,\n        public appService: AppService,\n        public intlService: IntlService,\n        public formBuilder: FormBuilder,\n        public prefs: UserPreferences,\n        public exprBuilder: ExprBuilder\n    ) {\n        super();\n\n        // Notify providers when a node is clicked (this may trigger new data, or a node mutation)\n        this.nodeClicked.subscribe((node?: Node) => {\n            this.providers.forEach(p => p.onNodeClicked(node));\n        });\n\n        // Notify providers when a node is clicked (this may trigger new data, or a node mutation)\n        this.edgeClicked.subscribe((edge?: Edge) => {\n            this.providers.forEach(p => p.onEdgeClicked(edge));\n        });\n\n        // Refresh the network\n        this.refreshAction = new Action({\n            icon: \"fas fa-sync-alt\",\n            title: \"msg#network.actions.refresh\",\n            action: () => {\n                this.updateData();\n                this.updateActions();\n            }\n        });\n\n        // Clear the current filters\n        this.clearFilters = new Action({\n            icon: \"far fa-minus-square\",\n            title: \"msg#facet.clearSelects\",\n            action: () => {\n                this.searchService.query.removeSelect(this.name);\n                this.searchService.search();\n            }\n        });\n\n        this.context = {\n            name: this.name,\n            nodes: new DataSet(),\n            edges: new DataSet(),\n            searchService: searchService,\n            appService: appService,\n            networkService: networkService,\n            intlService: intlService,\n            exprBuilder: exprBuilder,\n            select: (node?: Node, edge?: Edge) => this.select(node, edge),\n        };\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n\n        if(changes['results'] || changes['providers']) {\n            // Update the context\n            this.context.name = this.name;\n\n            // Update selections\n            this.selectEdge();\n            this.selectNode();\n\n            // Update options from the preferences\n            this.updateOptions();\n\n            // Update data from the providers (async)\n            this.updateData();\n\n            // Update the actions of the facet\n            this.updateActions();\n        }\n        else if(changes['options']) {\n            this.updateOptions();\n        }\n\n    }\n\n    /**\n     * Resets the nodes and edges, create a new listener for the providers and\n     * call getData() on these providers to refresh the data\n     */\n    protected updateData() {\n\n        this.context.nodes.clear();\n        this.context.edges.clear();\n\n        if(this.providersSubscription){\n            this.providersSubscription.unsubscribe();\n        }\n\n        this.providersSubscription = combineLatest(\n            this.providers.map(p => p.getProvider())\n        ).subscribe(datasets =>\n            this.mergeDatasets(datasets.filter(d => !!d) as NetworkDataset[])\n        );\n\n        this.providers.forEach(p => p.getData(this.context));\n    }\n\n    /**\n     * Take in the datasets produced by each provider and merges them into\n     * a single one\n     * @param datasets\n     */\n    protected mergeDatasets(datasets: NetworkDataset[]) {\n        const dataset = datasets.reduce((prev, cur) => prev.merge(cur), new NetworkDataset());\n\n        // Notify providers that nodes were inserted (which could trigger an update of the data)\n        this.providers.forEach(p => p.onDatasetsMerged(dataset));\n\n        // TODO: Post process the dataset somehow to adjust visibility (or other properties)\n        dataset.updateDatasets(this.context.nodes, this.context.edges);\n\n        // Fit the nodes and edges\n        if(this._networkInitialized) {\n            this.fitNetwork();\n        }\n\n        // Notify providers that nodes were inserted (which could trigger an update of the data)\n        this.providers.forEach(p => p.onNodesInserted(this.context.nodes.get()));\n\n        this.updateActions();\n    }\n\n    override get actions(): Action[] {\n        return this._actions;\n    }\n\n    /**\n     * Updates the actions displayed in the facet frame (_action variable).\n     * Actions may come from this component or from its providers\n     */\n    protected updateActions() {\n        this._actions = [];\n\n        // Clear the active filters\n        if(this.searchService.breadcrumbs && !!this.searchService.breadcrumbs.findSelect(this.name)) {\n            this._actions.push(this.clearFilters);\n        }\n\n        // Selected node actions\n        if(this._selectedNode) {\n            this.providers.forEach(p => {\n                const actions = p.getNodeActions(this._selectedNode!);\n                if(actions.length){\n                    this._actions = this._actions.concat(actions);\n                }\n            });\n        }\n\n        // Selected edge actions\n        if(this._selectedEdge) {\n            this.providers.forEach(p => {\n                const actions = p.getEdgeActions(this._selectedEdge!);\n                if(actions.length){\n                    this._actions = this._actions.concat(actions);\n                }\n            });\n        }\n\n        // Actions specific to each provider\n        const providersActionList = new Action({\n            icon: \"fas fa-tasks\",\n            title: \"msg#network.actions.providers\",\n            children: this.providers.map(p => new Action({\n                text: this.intlService.formatMessage(p.name),\n                title: this.intlService.formatMessage(p.name),\n                children: p.getProviderActions()\n            }))\n        });\n        this._actions.push(providersActionList);\n\n        // Action to refresh the network\n        this._actions.push(this.refreshAction);\n\n    }\n\n    /**\n     * Fit the network view (zoom and position) to its content, with a delay\n     * to avoid some elusive bugs in the Vis library\n     */\n    fitNetwork() {\n        this.networkService.fit(this.name);\n    }\n\n\n    // Event handling\n\n    /**\n     * Called from the template by ngx-vis, when the network is initialized,\n     * and the NetworkService can be used.\n     */\n    networkInitialized() {\n        this._networkInitialized = true;\n\n        // now we can use the service to register on events\n        this.networkService.on(this.name, 'click');\n\n        this.networkService.click.subscribe((eventData: any[]) => this.onNetworkClick(eventData));\n\n        this.networkService.setOptions(this.name, this.optionsPrefs);\n\n    }\n\n    /**\n     * Method called when a node or edge in the network is clicked.\n     * The method generates appropriate nodeClicked and edgeClicked events,\n     * and updates the state of _selectedEdge and _selectedNode.\n     * @param eventData\n     */\n    protected onNetworkClick(eventData: any[]) {\n        if (eventData[0] === this.name) {\n            const event = eventData[1] as VisEvent;\n\n            if(event.event.type === \"tap\") {\n\n                if(event.edges.length === 1 && event.nodes.length === 0) {\n                    this.selectEdge(this.context.edges.get(event.edges[0]) as Edge);\n                    this.selectNode();\n                }\n                else {\n                    this.selectEdge();\n                    if(event.nodes.length === 1) {\n                        this.selectNode(this.context.nodes.get(event.nodes[0]) as Node);\n                    }\n                    else {\n                        this.selectNode();\n                    }\n                }\n\n            }\n            else {\n                this.selectNode();\n                this.selectEdge();\n            }\n\n            this.updateActions();\n        }\n    }\n\n    select(node?: Node, edge?: Edge) {\n        this.selectNode(node);\n        this.selectEdge(edge);\n        this.updateActions();\n    }\n\n    selectNode(node?: Node) {\n        this._selectedNode = node;\n        this.nodeClicked.next(node);\n    }\n\n    selectEdge(edge?: Edge) {\n        this._selectedEdge = edge;\n        this.edgeClicked.next();\n    }\n\n    ngOnDestroy() {\n        this.networkService.off(this.name, 'click');\n        if(this.providersSubscription){\n            this.providersSubscription.unsubscribe();\n        }\n    }\n\n\n    // Settings\n\n    /**\n     * Sets the options values either to the user preferences (stored in user settings)\n     * or the default values.\n     */\n    updateOptions() {\n        this.optionsPrefs = Utils.copy(this.options);\n        if(!this.optionsPrefs.physics){\n            this.optionsPrefs.physics = {};\n        }\n        if(!this.optionsPrefs.physics.barnesHut){\n            this.optionsPrefs.physics.barnesHut = {};\n        }\n        this.optionsPrefs.physics.barnesHut.springLength = this.springLengthPref;\n        this.optionsPrefs.physics.barnesHut.springConstant = this.springConstantPref / 100;\n        this.optionsPrefs.physics.barnesHut.damping = this.dampingPref / 100;\n        this.optionsPrefs.physics.barnesHut.gravitationalConstant = -this.repulsionPref;\n        this.optionsPrefs.physics.barnesHut.centralGravity = this.gravityPref / 10;\n\n        if(this._networkInitialized) {\n            this.networkService.setOptions(this.name, this.optionsPrefs);\n            this.fitNetwork();\n        }\n    }\n\n    /**\n     * Method from the AbstractFacet interface called when the settings\n     * panel is opened or closed\n     * @param opened whether settings are opened or closed\n     */\n    override onOpenSettings(opened: boolean){\n        if(opened) {\n            const springLengthControl = new FormControl(this.springLengthPref);\n            const springConstantControl = new FormControl(this.springConstantPref);\n            const dampingControl = new FormControl(this.dampingPref);\n            const repulsionControl = new FormControl(this.repulsionPref);\n            const gravityControl = new FormControl(this.gravityPref);\n\n            this.form = this.formBuilder.group({\n                springLength: springLengthControl,\n                springConstant: springConstantControl,\n                damping: dampingControl,\n                repulsion: repulsionControl,\n                gravity: gravityControl\n            });\n\n            this.form.valueChanges.subscribe(_ => {\n                this.prefs.set(this.name+'-spring-length', springLengthControl.value, true);\n                this.prefs.set(this.name+'-spring-constant', springConstantControl.value, true);\n                this.prefs.set(this.name+'-damping', dampingControl.value, true);\n                this.prefs.set(this.name+'-repulsion', repulsionControl.value, true);\n                this.prefs.set(this.name+'-gravity', gravityControl.value, true);\n                this.debounceSync();\n            });\n        }\n        else {\n            this.updateOptions();\n            this.updateData();\n        }\n    }\n\n    // Debounce syncing to avoid many calls to the user settings web service\n    debounceSync = Utils.debounce(() => {\n        this.prefs.sync();\n    }, 1000);\n\n    /**\n     * This method resets all the user preferences and rebuilds the settings form,\n     * so that the values displayed are up-to-date\n     */\n    setDefaults() {\n        this.prefs.delete(this.name+'-spring-length', true);\n        this.prefs.delete(this.name+'-spring-constant',true);\n        this.prefs.delete(this.name+'-damping', true);\n        this.prefs.delete(this.name+'-repulsion', true);\n        this.prefs.delete(this.name+'-gravity', true);\n        this.prefs.sync();\n        this.onOpenSettings(true);\n    }\n\n    // Accessor method for each of the settings.\n    // Return either the saved user preference or the default value.\n\n    get springLengthPref(): number {\n        return this.prefs.get(this.name+'-spring-length') || 100;\n    }\n\n    get springConstantPref(): number {\n        return this.prefs.get(this.name+'-spring-constant') || 4;\n    }\n\n    get dampingPref(): number {\n        return this.prefs.get(this.name+'-damping') || 50;\n    }\n\n    get repulsionPref(): number {\n        return this.prefs.get(this.name+'-repulsion') || 2000;\n    }\n\n    get gravityPref(): number {\n        return this.prefs.get(this.name+'-gravity') || 3;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/VisTimelineModule.html":{"url":"modules/VisTimelineModule.html","title":"module - VisTimelineModule","body":"\n                   \n\n\n\n\n    Modules\n    VisTimelineModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_VisTimelineModule\n\n\n\ncluster_VisTimelineModule_exports\n\n\n\ncluster_VisTimelineModule_declarations\n\n\n\n\nResultTimeline\n\nResultTimeline\n\n\n\nVisTimelineModule\n\nVisTimelineModule\n\nVisTimelineModule -->\n\nResultTimeline->VisTimelineModule\n\n\n\n\n\nResultTimeline \n\nResultTimeline \n\nResultTimeline  -->\n\nVisTimelineModule->ResultTimeline \n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            vis-timeline/vis-timeline-module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Declarations\n                    \n                        \n                            ResultTimeline\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            ResultTimeline\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import {NgModule} from \"@angular/core\";\nimport {CommonModule} from \"@angular/common\";\n\nimport {IntlModule} from \"@sinequa/core/intl\";\n\nimport {VisModule} from \"ngx-vis\";\n\nimport {ResultTimeline} from \"./result-timeline/result-timeline\";\n\n@NgModule({\n    imports: [\n        CommonModule,\n\n        IntlModule,\n\n        VisModule\n    ],\n    declarations: [\n        ResultTimeline\n    ],\n    exports: [\n        ResultTimeline\n    ]\n})\nexport class VisTimelineModule {\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                ag-grid/ag-grid-view.component.ts\n            \n            component\n            AgGridViewComponent\n            \n                73 %\n                (45/61)\n            \n        \n        \n            \n                \n                ag-grid/ag-grid-view.component.ts\n            \n            interface\n            Column\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                ag-grid/data-modal.component.ts\n            \n            component\n            DataModalComponent\n            \n                0 %\n                (0/10)\n            \n        \n        \n            \n                \n                ag-grid/datasource.ts\n            \n            class\n            SqDatasource\n            \n                42 %\n                (11/26)\n            \n        \n        \n            \n                \n                ag-grid/facet-wrapper.component.ts\n            \n            component\n            FacetWrapperComponent\n            \n                0 %\n                (0/11)\n            \n        \n        \n            \n                \n                ag-grid/messages/index.ts\n            \n            variable\n            deGrid\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                ag-grid/messages/index.ts\n            \n            variable\n            enGrid\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                ag-grid/messages/index.ts\n            \n            variable\n            frGrid\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                finance/messages/index.ts\n            \n            variable\n            deFinance\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                finance/messages/index.ts\n            \n            variable\n            enFinance\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                finance/messages/index.ts\n            \n            variable\n            frFinance\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                finance/money-cloud/money-cloud.component.ts\n            \n            component\n            MoneyCloudComponent\n            \n                10 %\n                (5/46)\n            \n        \n        \n            \n                \n                finance/money-cloud/money-cloud.component.ts\n            \n            interface\n            MoneyCloudDatum\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                finance/money-timeline/money-timeline.component.ts\n            \n            component\n            MoneyTimelineComponent\n            \n                28 %\n                (13/45)\n            \n        \n        \n            \n                \n                finance/money-timeline/money-timeline.component.ts\n            \n            interface\n            MoneyDatum\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                fusioncharts/chart/chart.ts\n            \n            component\n            FusionChart\n            \n                23 %\n                (9/38)\n            \n        \n        \n            \n                \n                fusioncharts/chart/chart.ts\n            \n            variable\n            defaultChart\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                googlemaps/dark-style.ts\n            \n            variable\n            darkStyle\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                googlemaps/map.component.ts\n            \n            component\n            MapComponent\n            \n                50 %\n                (12/24)\n            \n        \n        \n            \n                \n                googlemaps/messages/index.ts\n            \n            variable\n            deGooglemaps\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                googlemaps/messages/index.ts\n            \n            variable\n            enGooglemaps\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                googlemaps/messages/index.ts\n            \n            variable\n            frGooglemaps\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                heatmap/bootstrap/facet-heatmap.component.ts\n            \n            component\n            BsFacetHeatmapComponent\n            \n                23 %\n                (13/56)\n            \n        \n        \n            \n                \n                heatmap/bootstrap/heatmap.component.ts\n            \n            component\n            BsHeatmapComponent\n            \n                20 %\n                (8/39)\n            \n        \n        \n            \n                \n                heatmap/bootstrap/heatmap.component.ts\n            \n            interface\n            HeatmapItem\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                heatmap/bootstrap/results-heatmap-view.ts\n            \n            component\n            BsResultsHeatmapView\n            \n                18 %\n                (11/60)\n            \n        \n        \n            \n                \n                heatmap/bootstrap/tooltip.component.ts\n            \n            component\n            BsTooltipComponent\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                heatmap/messages/index.ts\n            \n            variable\n            deHeatmap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                heatmap/messages/index.ts\n            \n            variable\n            enHeatmap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                heatmap/messages/index.ts\n            \n            variable\n            frHeatmap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                network/edge-info-card.component.ts\n            \n            component\n            BsEdgeInfoCard\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                network/network-models.ts\n            \n            class\n            NetworkDataset\n            \n                95 %\n                (19/20)\n            \n        \n        \n            \n                \n                network/network-models.ts\n            \n            interface\n            Edge\n            \n                20 %\n                (2/10)\n            \n        \n        \n            \n                \n                network/network-models.ts\n            \n            interface\n            EdgeType\n            \n                75 %\n                (3/4)\n            \n        \n        \n            \n                \n                network/network-models.ts\n            \n            interface\n            NetworkContext\n            \n                40 %\n                (4/10)\n            \n        \n        \n            \n                \n                network/network-models.ts\n            \n            interface\n            NetworkProvider\n            \n                93 %\n                (14/15)\n            \n        \n        \n            \n                \n                network/network-models.ts\n            \n            interface\n            Node\n            \n                22 %\n                (2/9)\n            \n        \n        \n            \n                \n                network/network-models.ts\n            \n            interface\n            NodeType\n            \n                50 %\n                (2/4)\n            \n        \n        \n            \n                \n                network/network-sample-configs.ts\n            \n            function\n            asyncRecordsProviderDemo\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                network/network-sample-configs.ts\n            \n            function\n            coocAggregationDemo\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                network/network-sample-configs.ts\n            \n            function\n            coocRecordDemo\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                network/network-sample-configs.ts\n            \n            function\n            crossAggregationDemo\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                network/network-sample-configs.ts\n            \n            function\n            crossAggregationExpandDemo\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                network/network-sample-configs.ts\n            \n            function\n            oOTBConfig\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                network/network-sample-configs.ts\n            \n            function\n            recordsProviderDemo\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                network/network-sample-configs.ts\n            \n            function\n            selectedRecordsProviderDemo\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                network/network-sample-configs.ts\n            \n            function\n            typedCoocAggregationDemo\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                network/network-sample-configs.ts\n            \n            function\n            typedCoocRecordDemo\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                network/network-sample-configs.ts\n            \n            function\n            wikiAsyncConfig\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                network/network-sample-configs.ts\n            \n            function\n            wikiDynConfig\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                network/network-sample-configs.ts\n            \n            function\n            wikiDynEdgeConfig\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                network/network-sample-configs.ts\n            \n            function\n            wikiMultiDynConfig\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                network/network.component.ts\n            \n            component\n            NetworkComponent\n            \n                21 %\n                (8/38)\n            \n        \n        \n            \n                \n                network/network.component.ts\n            \n            interface\n            VisEvent\n            \n                16 %\n                (1/6)\n            \n        \n        \n            \n                \n                network/network.component.ts\n            \n            variable\n            defaultOptions\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                network/node-info-card.component.ts\n            \n            component\n            BsNodeInfoCard\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                network/node-info-card.component.ts\n            \n            interface\n            NodeData\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                network/providers/aggregation-provider.ts\n            \n            class\n            AggregationProvider\n            \n                47 %\n                (10/21)\n            \n        \n        \n            \n                \n                network/providers/aggregation-provider.ts\n            \n            interface\n            AggregationData\n            \n                16 %\n                (1/6)\n            \n        \n        \n            \n                \n                network/providers/aggregation-provider.ts\n            \n            interface\n            AggregationEdge\n            \n                33 %\n                (1/3)\n            \n        \n        \n            \n                \n                network/providers/aggregation-provider.ts\n            \n            interface\n            AggregationEdgeType\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                network/providers/aggregation-provider.ts\n            \n            function\n            isAggregationEdgeType\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                network/providers/async-records-provider.ts\n            \n            class\n            AsyncRecordsProvider\n            \n                45 %\n                (9/20)\n            \n        \n        \n            \n                \n                network/providers/base-provider.ts\n            \n            class\n            BaseProvider\n            \n                31 %\n                (6/19)\n            \n        \n        \n            \n                \n                network/providers/dynamic-edge-provider.ts\n            \n            class\n            DynamicEdgeProvider\n            \n                36 %\n                (7/19)\n            \n        \n        \n            \n                \n                network/providers/dynamic-edge-provider.ts\n            \n            interface\n            DynamicEdge\n            \n                50 %\n                (1/2)\n            \n        \n        \n            \n                \n                network/providers/dynamic-edge-provider.ts\n            \n            interface\n            DynamicEdgeType\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                network/providers/dynamic-edge-provider.ts\n            \n            function\n            isDynamicEdgeType\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                network/providers/dynamic-node-provider.ts\n            \n            class\n            DynamicNodeProvider\n            \n                36 %\n                (7/19)\n            \n        \n        \n            \n                \n                network/providers/dynamic-node-provider.ts\n            \n            interface\n            DynamicNodeType\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                network/providers/provider-factory.ts\n            \n            injectable\n            ProviderFactory\n            \n                90 %\n                (30/33)\n            \n        \n        \n            \n                \n                network/providers/records-provider.ts\n            \n            class\n            RecordsProvider\n            \n                36 %\n                (7/19)\n            \n        \n        \n            \n                \n                network/providers/records-provider.ts\n            \n            interface\n            CustomData\n            \n                16 %\n                (1/6)\n            \n        \n        \n            \n                \n                network/providers/records-provider.ts\n            \n            interface\n            RecordNode\n            \n                50 %\n                (1/2)\n            \n        \n        \n            \n                \n                network/providers/records-provider.ts\n            \n            interface\n            StructuralEdgeType\n            \n                100 %\n                (6/6)\n            \n        \n        \n            \n                \n                network/providers/records-provider.ts\n            \n            function\n            isStructuralEdgeType\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                network/providers/selected-records-provider.ts\n            \n            class\n            SelectedRecordsProvider\n            \n                35 %\n                (7/20)\n            \n        \n        \n            \n                \n                ngx-charts/chart/chart.ts\n            \n            component\n            NgxChart\n            \n                0 %\n                (0/17)\n            \n        \n        \n            \n                \n                ngx-charts/chart/chart.ts\n            \n            interface\n            ChartDataPoint\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                ngx-charts/chart/chart.ts\n            \n            interface\n            ChartOptions\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                ngx-charts/facet-chart/facet-chart.ts\n            \n            component\n            FacetNgxChart\n            \n                17 %\n                (4/23)\n            \n        \n        \n            \n                \n                ngx-charts/facet-chart/facet-chart.ts\n            \n            interface\n            FacetChartDataPoint\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                public-api.ts\n            \n            variable\n            sinequaComponentsModule\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                timeline/bootstrap/facet-date.ts\n            \n            component\n            BsFacetDate\n            \n                0 %\n                (0/27)\n            \n        \n        \n            \n                \n                timeline/bootstrap/facet-date.ts\n            \n            interface\n            FacetDateConfig\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                timeline/bootstrap/facet-date.ts\n            \n            interface\n            FacetDateParams\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                timeline/bootstrap/facet-timeline.component.ts\n            \n            component\n            BsFacetTimelineComponent\n            \n                25 %\n                (15/60)\n            \n        \n        \n            \n                \n                timeline/bootstrap/facet-timeline.component.ts\n            \n            interface\n            TimelineAggregation\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                timeline/bootstrap/facet-timeline.component.ts\n            \n            interface\n            TimelineCombinedAggregations\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                timeline/bootstrap/facet-timeline.component.ts\n            \n            interface\n            TimelineEventAggregation\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                timeline/bootstrap/facet-timeline.component.ts\n            \n            interface\n            TimelineRecords\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                timeline/bootstrap/timeline-legend.component.ts\n            \n            component\n            TimelineLegendComponent\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                timeline/bootstrap/timeline-legend.component.ts\n            \n            interface\n            TimelineEventType\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                timeline/bootstrap/timeline.component.ts\n            \n            component\n            BsTimelineComponent\n            \n                10 %\n                (7/65)\n            \n        \n        \n            \n                \n                timeline/bootstrap/timeline.component.ts\n            \n            interface\n            TimelineDate\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                timeline/bootstrap/timeline.component.ts\n            \n            interface\n            TimelineEvent\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                timeline/bootstrap/timeline.component.ts\n            \n            interface\n            TimelineSeries\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                vis-timeline/result-timeline/result-timeline.ts\n            \n            component\n            ResultTimeline\n            \n                0 %\n                (0/17)\n            \n        \n        \n            \n                \n                vis-timeline/result-timeline/result-timeline.ts\n            \n            variable\n            defaultOptions\n            \n                0 %\n                (0/1)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @sinequa/components : ^0.0.1\n    \n\n\n    \n    \n        Peer dependencies\n    \n    \n        \n            @agm/core : ^3.0.0-beta.0\n        \n            @swimlane/ngx-charts : ^14.0.0\n        \n            angular-fusioncharts : ^3.0.4\n        \n            fusioncharts : ^3.15.1-sr.1\n        \n            ngx-vis : ^3.1.0\n        \n            vis-data : ^6.5.1\n        \n            vis-network : ^7.3.4\n        \n            vis-timeline : ^7.3.4\n        \n            vis-util : ^4.0.0\n        \n            d3 : ^5.15.1\n        \n            ag-grid-angular : ^25.2.0\n        \n            ag-grid-community : ^25.2.0\n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            asyncRecordsProviderDemo   (network/.../network-sample-configs.ts)\n                        \n                        \n                            coocAggregationDemo   (network/.../network-sample-configs.ts)\n                        \n                        \n                            coocRecordDemo   (network/.../network-sample-configs.ts)\n                        \n                        \n                            crossAggregationDemo   (network/.../network-sample-configs.ts)\n                        \n                        \n                            crossAggregationExpandDemo   (network/.../network-sample-configs.ts)\n                        \n                        \n                            isAggregationEdgeType   (network/.../aggregation-provider.ts)\n                        \n                        \n                            isDynamicEdgeType   (network/.../dynamic-edge-provider.ts)\n                        \n                        \n                            isStructuralEdgeType   (network/.../records-provider.ts)\n                        \n                        \n                            oOTBConfig   (network/.../network-sample-configs.ts)\n                        \n                        \n                            recordsProviderDemo   (network/.../network-sample-configs.ts)\n                        \n                        \n                            selectedRecordsProviderDemo   (network/.../network-sample-configs.ts)\n                        \n                        \n                            typedCoocAggregationDemo   (network/.../network-sample-configs.ts)\n                        \n                        \n                            typedCoocRecordDemo   (network/.../network-sample-configs.ts)\n                        \n                        \n                            wikiAsyncConfig   (network/.../network-sample-configs.ts)\n                        \n                        \n                            wikiDynConfig   (network/.../network-sample-configs.ts)\n                        \n                        \n                            wikiDynEdgeConfig   (network/.../network-sample-configs.ts)\n                        \n                        \n                            wikiMultiDynConfig   (network/.../network-sample-configs.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    network/network-sample-configs.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        asyncRecordsProviderDemo\n                        \n                    \n                \n            \n            \n                \nasyncRecordsProviderDemo(providerFactory: ProviderFactory, searchService: SearchService)\n                \n            \n\n\n\n\n            \n                \n                    Creates a network for a list of records fetched with a query. The query\nspecifically returns 5 wikipedia documents about \"human\" and containing the text \"google\".\nThe record nodes are rendered with the wikipedia thumbnail rather than a generic icon.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    providerFactory\n                                    \n                                                ProviderFactory\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The provider factory\n\n                                    \n                                \n                                \n                                    searchService\n                                    \n                                            SearchService\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The search service\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         NetworkProvider[]\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        coocAggregationDemo\n                        \n                    \n                \n            \n            \n                \ncoocAggregationDemo(providerFactory: ProviderFactory)\n                \n            \n\n\n\n\n            \n                \n                    Creates a network from a cooccurrence distribution between person and company\nentities.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    providerFactory\n                                    \n                                                ProviderFactory\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The provider factory\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         NetworkProvider[]\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        coocRecordDemo\n                        \n                    \n                \n            \n            \n                \ncoocRecordDemo(providerFactory: ProviderFactory)\n                \n            \n\n\n\n\n            \n                \n                    Creates a network from the list of selected records and displays the cooccurrence entities\ncontained in these records. The record nodes themselves are actually hidden (hideRecordNode=true).\nThe cooccurrence entities are each displayed as two nodes linked by an edge.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    providerFactory\n                                    \n                                                ProviderFactory\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The provider factory\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         NetworkProvider[]\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        crossAggregationDemo\n                        \n                    \n                \n            \n            \n                \ncrossAggregationDemo(providerFactory: ProviderFactory)\n                \n            \n\n\n\n\n            \n                \n                    Creates a network from a cross-aggregation between person and company entities.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    providerFactory\n                                    \n                                                ProviderFactory\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The provider factory\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         NetworkProvider[]\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        crossAggregationExpandDemo\n                        \n                    \n                \n            \n            \n                \ncrossAggregationExpandDemo(providerFactory: ProviderFactory)\n                \n            \n\n\n\n\n            \n                \n                    Creates a network from a cross-aggregation between person and company entities.\nAdditionally, the company and person nodes can be expanded to other company, person\nand geo entities.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    providerFactory\n                                    \n                                                ProviderFactory\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The provider factory\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         NetworkProvider[]\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        oOTBConfig\n                        \n                    \n                \n            \n            \n                \noOTBConfig(providerFactory: ProviderFactory)\n                \n            \n\n\n\n\n            \n                \n                    Creates a network from the list of selected record and three cross-distributions between geo, \nperson and company entities.\nAdditionally, the metadata nodes are expandable to other metadata nodes, via cross-distributions.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    providerFactory\n                                    \n                                                ProviderFactory\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The provider factory\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         NetworkProvider[]\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        recordsProviderDemo\n                        \n                    \n                \n            \n            \n                \nrecordsProviderDemo(providerFactory: ProviderFactory, records)\n                \n            \n\n\n\n\n            \n                \n                    Creates a network from a list of records, with record and person nodes.\nThe person nodes are attached to a record if that record contains them.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    providerFactory\n                                    \n                                                ProviderFactory\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The provider factory\n\n                                    \n                                \n                                \n                                    records\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        A given list of records\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         NetworkProvider[]\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        selectedRecordsProviderDemo\n                        \n                    \n                \n            \n            \n                \nselectedRecordsProviderDemo(providerFactory: ProviderFactory)\n                \n            \n\n\n\n\n            \n                \n                    Creates a network from the selected records, with record and person nodes.\nThe person nodes are attached to a record if that record contains them.\nThe network is refreshed every time documents are selected or unselected.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    providerFactory\n                                    \n                                                ProviderFactory\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The provider factory\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         NetworkProvider[]\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        typedCoocAggregationDemo\n                        \n                    \n                \n            \n            \n                \ntypedCoocAggregationDemo(providerFactory: ProviderFactory)\n                \n            \n\n\n\n\n            \n                \n                    Creates a network from a triple-cooccurrence between person, companies and in-between\na \"job\" entity ('(BILL GATES)#(CEO)#(MICROSOFT)').\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    providerFactory\n                                    \n                                                ProviderFactory\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The provider factory\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         NetworkProvider[]\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        typedCoocRecordDemo\n                        \n                    \n                \n            \n            \n                \ntypedCoocRecordDemo(providerFactory: ProviderFactory)\n                \n            \n\n\n\n\n            \n                \n                    Creates a network from the list of selected records and displays the triple-cooccurrence entities\nbetween person, companies and in-between a \"job\" entity ('(BILL GATES)#(CEO)#(MICROSOFT)') contained\nin these records.\nThe cooccurrence entities are each displayed as two nodes linked by a typed edge (with a label showing the \"job\").\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    providerFactory\n                                    \n                                                ProviderFactory\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The provider factory\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         NetworkProvider[]\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        wikiAsyncConfig\n                        \n                    \n                \n            \n            \n                \nwikiAsyncConfig(providerFactory: ProviderFactory, searchService: SearchService)\n                \n            \n\n\n\n\n            \n                \n                    Creates a network from a list of records fetched via a query asynchronously, and cross-distributions\nbetween the geo, company and person nodes.\nThe query specifically asks for 3 wikipedia documents about \"Barack Obama\".\nThe network will contain relations between the records and the metadata displayed among the aggregation\nedges.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    providerFactory\n                                    \n                                                ProviderFactory\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The provider factory\n\n                                    \n                                \n                                \n                                    searchService\n                                    \n                                            SearchService\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The search service\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         NetworkProvider[]\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        wikiDynConfig\n                        \n                    \n                \n            \n            \n                \nwikiDynConfig(providerFactory: ProviderFactory, searchService: SearchService)\n                \n            \n\n\n\n\n            \n                \n                    Creates a network from cross distribution between Company and Person entities.\nAdditionally, the person nodes are \"dynamic nodes\", meaning they become enriched (when clicked on,\nby default) with a record fetched from the server. When this happens, the display of the node\nchanges (in this case we display the wikipedia thumbnail of that person, instead of a generic icon),\nand \"structural edges\" are added to the nodes (in this case we display the \"company\" entities\ncontained in the wikipedia pages of the person).\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    providerFactory\n                                    \n                                                ProviderFactory\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The provider factory\n\n                                    \n                                \n                                \n                                    searchService\n                                    \n                                            SearchService\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The search service\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         NetworkProvider[]\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        wikiDynEdgeConfig\n                        \n                    \n                \n            \n            \n                \nwikiDynEdgeConfig(providerFactory: ProviderFactory, searchService: SearchService)\n                \n            \n\n\n\n\n            \n                \n                    Creates a network from the list of selected records. Additionally, when these records\nare inserted, fetches additional records from the server, which gets attached to the record\nnodes (\"dynamic edges\"). Specifically these new records are 5 wikipedia articles about humans\nand talking about whatever the original node's label is. (if the original node is \"Microsoft\",\nthe dynamic edges will likely include Bill Gates, Steve Ballmer, Paul Allen, etc.)\nThe nodes of these new records (with the \"people\" type) are displayed with the wikipedia thumbnail.\nAdditionally we display the company entities contained in these people nodes (structural edges).\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    providerFactory\n                                    \n                                                ProviderFactory\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The provider factory\n\n                                    \n                                \n                                \n                                    searchService\n                                    \n                                            SearchService\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The search service\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         NetworkProvider[]\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        wikiMultiDynConfig\n                        \n                    \n                \n            \n            \n                \nwikiMultiDynConfig(providerFactory: ProviderFactory, searchService: SearchService)\n                \n            \n\n\n\n\n            \n                \n                    Creates a network from 3 cross distribution between Company, Geo and Person entities.\nAdditionally, the person nodes are \"dynamic nodes\", meaning they become enriched (when inserted) \nwith a record fetched from the server. When this happens, the display of the node\nchanges (in this case we display the wikipedia thumbnail of that person, instead of a generic icon).\nAdditionally, the company nodes are manually expandable to display relations with other people nodes.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    providerFactory\n                                    \n                                                ProviderFactory\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The provider factory\n\n                                    \n                                \n                                \n                                    searchService\n                                    \n                                            SearchService\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The search service\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         NetworkProvider[]\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    network/providers/aggregation-provider.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        isAggregationEdgeType\n                        \n                    \n                \n            \n            \n                \nisAggregationEdgeType(et: EdgeType)\n                \n            \n\n\n\n\n            \n                \n                    Tests whether an EdgeType is an AggregationEdgeType\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    et\n                                    \n                                                EdgeType\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        an edge type\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         AggregationEdgeType\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    network/providers/dynamic-edge-provider.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        isDynamicEdgeType\n                        \n                    \n                \n            \n            \n                \nisDynamicEdgeType(et: EdgeType)\n                \n            \n\n\n\n\n            \n                \n                    Tests whether a given edge type is a DynamicEdgeType\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    et\n                                    \n                                                EdgeType\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        an edge type\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         DynamicEdgeType\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    network/providers/records-provider.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        isStructuralEdgeType\n                        \n                    \n                \n            \n            \n                \nisStructuralEdgeType(et: EdgeType)\n                \n            \n\n\n\n\n            \n                \n                    Tests whether the given edge type is a structural edge type\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    et\n                                    \n                                                EdgeType\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        an edge type\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         StructuralEdgeType\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"overview - index","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AgGridModule\n\n\n\ncluster_AgGridModule_declarations\n\n\n\ncluster_AgGridModule_exports\n\n\n\ncluster_BsHeatmapModule\n\n\n\ncluster_BsHeatmapModule_declarations\n\n\n\ncluster_BsHeatmapModule_exports\n\n\n\ncluster_BsTimelineModule\n\n\n\ncluster_BsTimelineModule_declarations\n\n\n\ncluster_BsTimelineModule_exports\n\n\n\ncluster_FinanceModule\n\n\n\ncluster_FinanceModule_declarations\n\n\n\ncluster_FinanceModule_exports\n\n\n\ncluster_FusionChartsModule\n\n\n\ncluster_FusionChartsModule_declarations\n\n\n\ncluster_FusionChartsModule_exports\n\n\n\ncluster_GoogleMapsModule\n\n\n\ncluster_GoogleMapsModule_declarations\n\n\n\ncluster_GoogleMapsModule_exports\n\n\n\ncluster_NetworkModule\n\n\n\ncluster_NetworkModule_declarations\n\n\n\ncluster_NetworkModule_exports\n\n\n\ncluster_NgxChartsModule\n\n\n\ncluster_NgxChartsModule_declarations\n\n\n\ncluster_NgxChartsModule_exports\n\n\n\ncluster_VisTimelineModule\n\n\n\ncluster_VisTimelineModule_declarations\n\n\n\ncluster_VisTimelineModule_exports\n\n\n\n\nAgGridViewComponent\n\nAgGridViewComponent\n\n\n\nAgGridModule\n\nAgGridModule\n\nAgGridModule -->\n\nAgGridViewComponent->AgGridModule\n\n\n\n\n\nDataModalComponent\n\nDataModalComponent\n\nAgGridModule -->\n\nDataModalComponent->AgGridModule\n\n\n\n\n\nFacetWrapperComponent\n\nFacetWrapperComponent\n\nAgGridModule -->\n\nFacetWrapperComponent->AgGridModule\n\n\n\n\n\nAgGridViewComponent \n\nAgGridViewComponent \n\nAgGridViewComponent  -->\n\nAgGridModule->AgGridViewComponent \n\n\n\n\n\nBsFacetHeatmapComponent\n\nBsFacetHeatmapComponent\n\n\n\nBsHeatmapModule\n\nBsHeatmapModule\n\nBsHeatmapModule -->\n\nBsFacetHeatmapComponent->BsHeatmapModule\n\n\n\n\n\nBsHeatmapComponent\n\nBsHeatmapComponent\n\nBsHeatmapModule -->\n\nBsHeatmapComponent->BsHeatmapModule\n\n\n\n\n\nBsResultsHeatmapView\n\nBsResultsHeatmapView\n\nBsHeatmapModule -->\n\nBsResultsHeatmapView->BsHeatmapModule\n\n\n\n\n\nBsTooltipComponent\n\nBsTooltipComponent\n\nBsHeatmapModule -->\n\nBsTooltipComponent->BsHeatmapModule\n\n\n\n\n\nBsFacetHeatmapComponent \n\nBsFacetHeatmapComponent \n\nBsFacetHeatmapComponent  -->\n\nBsHeatmapModule->BsFacetHeatmapComponent \n\n\n\n\n\nBsHeatmapComponent \n\nBsHeatmapComponent \n\nBsHeatmapComponent  -->\n\nBsHeatmapModule->BsHeatmapComponent \n\n\n\n\n\nBsResultsHeatmapView \n\nBsResultsHeatmapView \n\nBsResultsHeatmapView  -->\n\nBsHeatmapModule->BsResultsHeatmapView \n\n\n\n\n\nBsTooltipComponent \n\nBsTooltipComponent \n\nBsTooltipComponent  -->\n\nBsHeatmapModule->BsTooltipComponent \n\n\n\n\n\nBsTimelineModule\n\nBsTimelineModule\n\nBsTimelineModule -->\n\nBsHeatmapModule->BsTimelineModule\n\n\n\n\n\nFinanceModule\n\nFinanceModule\n\nFinanceModule -->\n\nBsHeatmapModule->FinanceModule\n\n\n\n\n\nBsFacetDate\n\nBsFacetDate\n\nBsTimelineModule -->\n\nBsFacetDate->BsTimelineModule\n\n\n\n\n\nBsFacetTimelineComponent\n\nBsFacetTimelineComponent\n\nBsTimelineModule -->\n\nBsFacetTimelineComponent->BsTimelineModule\n\n\n\n\n\nBsTimelineComponent\n\nBsTimelineComponent\n\nBsTimelineModule -->\n\nBsTimelineComponent->BsTimelineModule\n\n\n\n\n\nTimelineLegendComponent\n\nTimelineLegendComponent\n\nBsTimelineModule -->\n\nTimelineLegendComponent->BsTimelineModule\n\n\n\n\n\nBsFacetDate \n\nBsFacetDate \n\nBsFacetDate  -->\n\nBsTimelineModule->BsFacetDate \n\n\n\n\n\nBsFacetTimelineComponent \n\nBsFacetTimelineComponent \n\nBsFacetTimelineComponent  -->\n\nBsTimelineModule->BsFacetTimelineComponent \n\n\n\n\n\nBsTimelineComponent \n\nBsTimelineComponent \n\nBsTimelineComponent  -->\n\nBsTimelineModule->BsTimelineComponent \n\n\n\n\n\nTimelineLegendComponent \n\nTimelineLegendComponent \n\nTimelineLegendComponent  -->\n\nBsTimelineModule->TimelineLegendComponent \n\n\n\n\n\nMoneyCloudComponent\n\nMoneyCloudComponent\n\nFinanceModule -->\n\nMoneyCloudComponent->FinanceModule\n\n\n\n\n\nMoneyTimelineComponent\n\nMoneyTimelineComponent\n\nFinanceModule -->\n\nMoneyTimelineComponent->FinanceModule\n\n\n\n\n\nMoneyCloudComponent \n\nMoneyCloudComponent \n\nMoneyCloudComponent  -->\n\nFinanceModule->MoneyCloudComponent \n\n\n\n\n\nMoneyTimelineComponent \n\nMoneyTimelineComponent \n\nMoneyTimelineComponent  -->\n\nFinanceModule->MoneyTimelineComponent \n\n\n\n\n\nFusionChart\n\nFusionChart\n\n\n\nFusionChartsModule\n\nFusionChartsModule\n\nFusionChartsModule -->\n\nFusionChart->FusionChartsModule\n\n\n\n\n\nFusionChart \n\nFusionChart \n\nFusionChart  -->\n\nFusionChartsModule->FusionChart \n\n\n\n\n\nMapComponent\n\nMapComponent\n\n\n\nGoogleMapsModule\n\nGoogleMapsModule\n\nGoogleMapsModule -->\n\nMapComponent->GoogleMapsModule\n\n\n\n\n\nMapComponent \n\nMapComponent \n\nMapComponent  -->\n\nGoogleMapsModule->MapComponent \n\n\n\n\n\nBsEdgeInfoCard\n\nBsEdgeInfoCard\n\n\n\nNetworkModule\n\nNetworkModule\n\nNetworkModule -->\n\nBsEdgeInfoCard->NetworkModule\n\n\n\n\n\nBsNodeInfoCard\n\nBsNodeInfoCard\n\nNetworkModule -->\n\nBsNodeInfoCard->NetworkModule\n\n\n\n\n\nNetworkComponent\n\nNetworkComponent\n\nNetworkModule -->\n\nNetworkComponent->NetworkModule\n\n\n\n\n\nBsEdgeInfoCard \n\nBsEdgeInfoCard \n\nBsEdgeInfoCard  -->\n\nNetworkModule->BsEdgeInfoCard \n\n\n\n\n\nBsNodeInfoCard \n\nBsNodeInfoCard \n\nBsNodeInfoCard  -->\n\nNetworkModule->BsNodeInfoCard \n\n\n\n\n\nNetworkComponent \n\nNetworkComponent \n\nNetworkComponent  -->\n\nNetworkModule->NetworkComponent \n\n\n\n\n\nFacetNgxChart\n\nFacetNgxChart\n\n\n\nNgxChartsModule\n\nNgxChartsModule\n\nNgxChartsModule -->\n\nFacetNgxChart->NgxChartsModule\n\n\n\n\n\nNgxChart\n\nNgxChart\n\nNgxChartsModule -->\n\nNgxChart->NgxChartsModule\n\n\n\n\n\nFacetNgxChart \n\nFacetNgxChart \n\nFacetNgxChart  -->\n\nNgxChartsModule->FacetNgxChart \n\n\n\n\n\nNgxChart \n\nNgxChart \n\nNgxChart  -->\n\nNgxChartsModule->NgxChart \n\n\n\n\n\nResultTimeline\n\nResultTimeline\n\n\n\nVisTimelineModule\n\nVisTimelineModule\n\nVisTimelineModule -->\n\nResultTimeline->VisTimelineModule\n\n\n\n\n\nResultTimeline \n\nResultTimeline \n\nResultTimeline  -->\n\nVisTimelineModule->ResultTimeline \n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        9 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    21 Components\n                \n            \n        \n        \n            \n                \n                    \n                    1 Injectable\n                \n            \n        \n        \n            \n                \n                    \n                    9 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    34 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AgGridModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        BsHeatmapModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        BsTimelineModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        FinanceModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        FusionChartsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        GoogleMapsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        NetworkModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        NgxChartsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        VisTimelineModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            AggregationTriggerType   (network/.../aggregation-provider.ts)\n                        \n                        \n                            DataModel   (ag-grid/.../data-modal.component.ts)\n                        \n                        \n                            Filter   (ag-grid/.../datasource.ts)\n                        \n                        \n                            StructuralDisplayType   (network/.../records-provider.ts)\n                        \n                        \n                            StructuralTriggerType   (network/.../records-provider.ts)\n                        \n                        \n                            TimelineData   (timeline/.../facet-timeline.component.ts)\n                        \n                        \n                            TimelineEventData   (timeline/.../facet-timeline.component.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    network/providers/aggregation-provider.ts\n    \n    \n        \n            \n                \n                    \n                    AggregationTriggerType\n                \n            \n            \n                \n                    Mode \"source\" means node are fetched and added systematically on getData() / other modes allow expanding an existing node\n\n                \n            \n            \n                \n                        \"source\" | \"onclick\" | \"manual\"\n\n                \n            \n        \n    \n    ag-grid/data-modal.component.ts\n    \n    \n        \n            \n                \n                    \n                    DataModel\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    ag-grid/datasource.ts\n    \n    \n        \n            \n                \n                    \n                    Filter\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    network/providers/records-provider.ts\n    \n    \n        \n            \n                \n                    \n                    StructuralDisplayType\n                \n            \n            \n                \n                        \"all\" | \"paginate\" | \"existingnodes\" | \n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    StructuralTriggerType\n                \n            \n            \n                \n                        \"oninsert\" | \"onclick\" | \"manual\"\n\n                \n            \n        \n    \n    timeline/bootstrap/facet-timeline.component.ts\n    \n    \n        \n            \n                \n                    \n                    TimelineData\n                \n            \n            \n                \n                        TimelineSeries | TimelineAggregation | TimelineCombinedAggregations\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    TimelineEventData\n                \n            \n            \n                \n                        TimelineEvent[] | TimelineRecords | TimelineEventAggregation\n\n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            darkStyle   (googlemaps/.../dark-style.ts)\n                        \n                        \n                            defaultChart   (fusioncharts/.../chart.ts)\n                        \n                        \n                            defaultOptions   (network/.../network.component.ts)\n                        \n                        \n                            defaultOptions   (vis-timeline/.../result-timeline.ts)\n                        \n                        \n                            deFinance   (finance/.../index.ts)\n                        \n                        \n                            deGooglemaps   (googlemaps/.../index.ts)\n                        \n                        \n                            deGrid   (ag-grid/.../index.ts)\n                        \n                        \n                            deHeatmap   (heatmap/.../index.ts)\n                        \n                        \n                            enFinance   (finance/.../index.ts)\n                        \n                        \n                            enGooglemaps   (googlemaps/.../index.ts)\n                        \n                        \n                            enGrid   (ag-grid/.../index.ts)\n                        \n                        \n                            enHeatmap   (heatmap/.../index.ts)\n                        \n                        \n                            frFinance   (finance/.../index.ts)\n                        \n                        \n                            frGooglemaps   (googlemaps/.../index.ts)\n                        \n                        \n                            frGrid   (ag-grid/.../index.ts)\n                        \n                        \n                            frHeatmap   (heatmap/.../index.ts)\n                        \n                        \n                            sinequaComponentsModule   (public-api.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    googlemaps/dark-style.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        darkStyle\n                        \n                    \n                \n            \n                \n                    \n                        Type :     []\n\n                    \n                \n                \n                    \n                        Default value : [\n    {\n      \"elementType\": \"geometry\",\n      \"stylers\": [\n        {\n          \"color\": \"#1d2c4d\"\n        }\n      ]\n    },\n    {\n      \"elementType\": \"labels.text.fill\",\n      \"stylers\": [\n        {\n          \"color\": \"#8ec3b9\"\n        }\n      ]\n    },\n    {\n      \"elementType\": \"labels.text.stroke\",\n      \"stylers\": [\n        {\n          \"color\": \"#1a3646\"\n        }\n      ]\n    },\n    {\n      \"featureType\": \"administrative.country\",\n      \"elementType\": \"geometry.stroke\",\n      \"stylers\": [\n        {\n          \"color\": \"#4b6878\"\n        }\n      ]\n    },\n    {\n      \"featureType\": \"administrative.land_parcel\",\n      \"elementType\": \"labels.text.fill\",\n      \"stylers\": [\n        {\n          \"color\": \"#64779e\"\n        }\n      ]\n    },\n    {\n      \"featureType\": \"administrative.province\",\n      \"elementType\": \"geometry.stroke\",\n      \"stylers\": [\n        {\n          \"color\": \"#4b6878\"\n        }\n      ]\n    },\n    {\n      \"featureType\": \"landscape.man_made\",\n      \"elementType\": \"geometry.stroke\",\n      \"stylers\": [\n        {\n          \"color\": \"#334e87\"\n        }\n      ]\n    },\n    {\n      \"featureType\": \"landscape.natural\",\n      \"elementType\": \"geometry\",\n      \"stylers\": [\n        {\n          \"color\": \"#023e58\"\n        }\n      ]\n    },\n    {\n      \"featureType\": \"poi\",\n      \"elementType\": \"geometry\",\n      \"stylers\": [\n        {\n          \"color\": \"#283d6a\"\n        }\n      ]\n    },\n    {\n      \"featureType\": \"poi\",\n      \"elementType\": \"labels.text.fill\",\n      \"stylers\": [\n        {\n          \"color\": \"#6f9ba5\"\n        }\n      ]\n    },\n    {\n      \"featureType\": \"poi\",\n      \"elementType\": \"labels.text.stroke\",\n      \"stylers\": [\n        {\n          \"color\": \"#1d2c4d\"\n        }\n      ]\n    },\n    {\n      \"featureType\": \"poi.park\",\n      \"elementType\": \"geometry.fill\",\n      \"stylers\": [\n        {\n          \"color\": \"#023e58\"\n        }\n      ]\n    },\n    {\n      \"featureType\": \"poi.park\",\n      \"elementType\": \"labels.text.fill\",\n      \"stylers\": [\n        {\n          \"color\": \"#3C7680\"\n        }\n      ]\n    },\n    {\n      \"featureType\": \"road\",\n      \"elementType\": \"geometry\",\n      \"stylers\": [\n        {\n          \"color\": \"#304a7d\"\n        }\n      ]\n    },\n    {\n      \"featureType\": \"road\",\n      \"elementType\": \"labels.text.fill\",\n      \"stylers\": [\n        {\n          \"color\": \"#98a5be\"\n        }\n      ]\n    },\n    {\n      \"featureType\": \"road\",\n      \"elementType\": \"labels.text.stroke\",\n      \"stylers\": [\n        {\n          \"color\": \"#1d2c4d\"\n        }\n      ]\n    },\n    {\n      \"featureType\": \"road.highway\",\n      \"elementType\": \"geometry\",\n      \"stylers\": [\n        {\n          \"color\": \"#2c6675\"\n        }\n      ]\n    },\n    {\n      \"featureType\": \"road.highway\",\n      \"elementType\": \"geometry.stroke\",\n      \"stylers\": [\n        {\n          \"color\": \"#255763\"\n        }\n      ]\n    },\n    {\n      \"featureType\": \"road.highway\",\n      \"elementType\": \"labels.text.fill\",\n      \"stylers\": [\n        {\n          \"color\": \"#b0d5ce\"\n        }\n      ]\n    },\n    {\n      \"featureType\": \"road.highway\",\n      \"elementType\": \"labels.text.stroke\",\n      \"stylers\": [\n        {\n          \"color\": \"#023e58\"\n        }\n      ]\n    },\n    {\n      \"featureType\": \"transit\",\n      \"elementType\": \"labels.text.fill\",\n      \"stylers\": [\n        {\n          \"color\": \"#98a5be\"\n        }\n      ]\n    },\n    {\n      \"featureType\": \"transit\",\n      \"elementType\": \"labels.text.stroke\",\n      \"stylers\": [\n        {\n          \"color\": \"#1d2c4d\"\n        }\n      ]\n    },\n    {\n      \"featureType\": \"transit.line\",\n      \"elementType\": \"geometry.fill\",\n      \"stylers\": [\n        {\n          \"color\": \"#283d6a\"\n        }\n      ]\n    },\n    {\n      \"featureType\": \"transit.station\",\n      \"elementType\": \"geometry\",\n      \"stylers\": [\n        {\n          \"color\": \"#3a4762\"\n        }\n      ]\n    },\n    {\n      \"featureType\": \"water\",\n      \"elementType\": \"geometry\",\n      \"stylers\": [\n        {\n          \"color\": \"#222222\"\n        }\n      ]\n    },\n    {\n      \"featureType\": \"water\",\n      \"elementType\": \"labels.text.fill\",\n      \"stylers\": [\n        {\n          \"color\": \"#4e6d70\"\n        }\n      ]\n    }\n  ]\n                    \n                \n\n\n        \n    \n\n    fusioncharts/chart/chart.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        defaultChart\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n    \"theme\": \"fusion\",\n    \"labelDisplay\": \"rotate\",\n    \"slantLabel\": \"1\"\n}\n                    \n                \n\n\n        \n    \n\n    network/network.component.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        defaultOptions\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Options\n\n                    \n                \n                \n                    \n                        Default value : {\n    height: '500px'\n}\n                    \n                \n\n            \n                \n                    Default options of the Vis.js network.\nSee: https://visjs.github.io/vis-network/docs/network/\n\n                \n            \n\n        \n    \n\n    vis-timeline/result-timeline/result-timeline.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        defaultOptions\n                        \n                    \n                \n            \n                \n                    \n                        Type :     TimelineOptions\n\n                    \n                \n                \n                    \n                        Default value : {\n    minHeight : '150px',\n    maxHeight : '350px',\n    margin: {\n        axis: 5,\n        item: 5\n    }\n}\n                    \n                \n\n\n        \n    \n\n    finance/messages/index.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        deFinance\n                        \n                    \n                \n            \n                \n                    \n                        Default value : Utils.merge({}, _deFinance, deFacet)\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        enFinance\n                        \n                    \n                \n            \n                \n                    \n                        Default value : Utils.merge({}, _enFinance, enFacet)\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        frFinance\n                        \n                    \n                \n            \n                \n                    \n                        Default value : Utils.merge({}, _frFinance, frFacet)\n                    \n                \n\n\n        \n    \n\n    googlemaps/messages/index.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        deGooglemaps\n                        \n                    \n                \n            \n                \n                    \n                        Default value : Utils.merge({}, _deGooglemaps, deFacet)\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        enGooglemaps\n                        \n                    \n                \n            \n                \n                    \n                        Default value : Utils.merge({}, _enGooglemaps, enFacet)\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        frGooglemaps\n                        \n                    \n                \n            \n                \n                    \n                        Default value : Utils.merge({}, _frGooglemaps, frFacet)\n                    \n                \n\n\n        \n    \n\n    ag-grid/messages/index.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        deGrid\n                        \n                    \n                \n            \n                \n                    \n                        Default value : Utils.merge({}, _deGrid)\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        enGrid\n                        \n                    \n                \n            \n                \n                    \n                        Default value : Utils.merge({}, _enGrid)\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        frGrid\n                        \n                    \n                \n            \n                \n                    \n                        Default value : Utils.merge({}, _frGrid)\n                    \n                \n\n\n        \n    \n\n    heatmap/messages/index.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        deHeatmap\n                        \n                    \n                \n            \n                \n                    \n                        Default value : Utils.merge({}, _deHeatmap, deResultsView, deSearch)\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        enHeatmap\n                        \n                    \n                \n            \n                \n                    \n                        Default value : Utils.merge({}, _enHeatmap, enResultsView, enSearch)\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        frHeatmap\n                        \n                    \n                \n            \n                \n                    \n                        Default value : Utils.merge({}, _frHeatmap, frResultsView, frSearch)\n                    \n                \n\n\n        \n    \n\n    public-api.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        sinequaComponentsModule\n                        \n                    \n                \n            \n                \n                    \n                        Default value : undefined\n                    \n                \n\n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
