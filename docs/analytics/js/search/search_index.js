var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/modules/AgGridModule.html",[0,1.933,1,2.79]],["body/modules/AgGridModule.html",[1,5.845,2,2.618,3,3.107,4,5.044,5,5.044,6,5.044,7,3.092,8,0.015,9,2.862,10,2.862,11,2.406,12,1.543,13,2.394,14,0.145,15,0.145,16,0.145,17,2.566,18,4.537,19,5.814,20,3.598,21,3.598,22,0.237,23,3.598,24,0.846,25,3.598,26,3.032,27,4.935,28,4.935,29,3.199,30,5.814,31,2.611,32,3.856,33,3.598,34,1.485,35,4.277,36,2.744,37,4.277,38,0.773,39,6.9,40,5.814,41,4.935,42,1.948,43,6.9,44,5.814,45,5.814,46,0.399,47,5.044,48,1.543,49,5.044,50,3.032,51,5.814,52,0.168,53,0.031,54,0.013,55,0.013]],["title/interfaces/AggregationData.html",[56,0.141,57,2.418]],["body/interfaces/AggregationData.html",[8,0.015,14,0.085,15,0.186,16,0.085,22,0.197,38,0.456,46,0.425,52,0.197,53,0.018,54,0.01,55,0.009,56,0.246,57,4.221,58,0.616,59,1.996,60,1.148,61,1.194,62,3.771,63,2.545,64,3.491,65,1.645,66,1.399,67,2.743,68,2.561,69,3.237,70,2.304,71,3.246,72,1.16,73,4.36,74,0.172,75,0.382,76,0.865,77,3.551,78,3.246,79,1.919,80,3.232,81,3.091,82,0.68,83,0.392,84,0.608,85,2.243,86,2.804,87,0.641,88,0.477,89,1.078,90,1.109,91,1.952,92,0.875,93,1.399,94,1.069,95,1.103,96,1.218,97,2.195,98,2.243,99,0.667,100,0.68,101,0.591,102,1.926,103,1.474,104,1.51,105,1.926,106,1.698,107,1.71,108,2.45,109,2.123,110,1.295,111,2.478,112,2.686,113,2.01,114,2.545,115,1.885,116,0.787,117,0.689,118,0.641,119,1.885,120,2.272,121,2.791,122,2.101,123,2.272,124,1.474,125,3.237,126,1.885,127,2.304,128,1.296,129,3.237,130,2.151,131,2.342,132,2.545,133,1.63,134,1.885,135,1.411,136,2.272,137,3.314,138,2.45,139,2.45,140,1.399,141,2.667,142,1.818,143,1.021,144,0.335,145,2.965,146,2.065,147,2.151,148,1.694,149,0.613,150,1.935,151,1.698,152,2.45,153,1.786,154,2.45,155,1.79,156,0.868,157,0.786,158,1.543,159,0.811,160,2.123,161,2.45,162,2.25,163,0.828,164,0.689,165,3.025,166,1.155,167,1.352,168,1.786,169,1.352,170,1.296,171,1.324,172,2.561,173,2.272,174,2.45,175,1.617,176,3.246,177,1.847,178,2.123,179,2.123,180,2.272,181,1.276,182,1.103,183,2.45,184,0.499,185,0.521,186,1.55,187,1.611,188,1.543,189,1.352,190,2.272,191,1.276,192,2.101,193,1.878,194,5.123,195,2.686,196,0.982,197,1.474,198,2.45,199,2.45,200,0.864,201,2.45,202,2.45,203,1.617,204,1.617,205,1.617,206,4.067,207,2.45,208,3.129,209,3.491,210,2.45,211,1.296,212,2.45,213,2.45,214,2.45,215,2.45,216,2.45,217,2.45,218,2.45,219,2.123,220,1.194,221,2.45,222,1.474,223,1.786,224,1.244,225,2.45,226,2.45,227,2.45,228,2.818,229,2.272,230,1.926,231,1.63,232,2.45,233,2.45,234,1.885,235,1.885,236,2.45,237,2.45,238,1.885,239,2.45,240,2.45,241,2.45,242,2.45,243,2.198,244,0.945,245,1.885,246,2.45,247,3.237,248,3.771,249,2.272,250,1.543,251,2.45,252,1.996,253,2.45,254,0.872,255,3.491,256,1.786,257,2.45,258,3.491,259,1.885,260,2.45,261,2.272,262,1.474,263,2.45,264,2.45,265,1.103,266,1.885,267,1.786,268,1.398,269,2.45,270,2.45,271,1.698,272,2.45,273,2.45,274,2.45,275,2.45,276,2.45,277,2.45,278,2.45,279,0.756,280,2.545,281,2.45,282,2.45,283,2.45,284,2.45,285,0.415,286,2.45,287,2.686,288,2.45,289,1.411,290,1.885,291,0.982,292,2.272,293,1.996,294,1.244,295,1.244,296,1.885,297,1.103,298,1.411,299,1.474,300,1.885,301,1.885,302,2.45,303,4.432,304,3.071,305,2.342,306,2.45,307,4.067,308,0.945,309,1.905,310,1.38,311,0.78,312,1.885,313,2.925,314,0.982,315,3.491,316,2.667,317,4.432,318,3.491,319,1.926,320,1.512,321,2.304,322,3.491,323,3.491,324,3.491,325,3.491,326,3.491,327,3.491,328,1.395,329,2.01,330,1.786,331,1.194,332,2.45,333,1.103,334,1.885,335,2.791,336,1.435,337,2.25,338,1.596,339,4.432,340,4.432,341,3.525,342,1.476,343,2.45,344,2.25,345,2.45,346,3.491,347,3.237,348,2.45,349,3.091,350,3.491,351,2.45,352,3.491,353,0.909,354,0.982,355,1.474,356,2.45,357,1.786,358,1.103,359,1.617,360,2.123,361,2.45,362,2.45,363,0.982,364,2.45,365,4.067,366,2.45,367,2.45,368,2.45,369,2.45,370,2.45,371,2.45,372,3.491,373,2.45,374,2.45,375,2.45]],["title/interfaces/AggregationEdge.html",[56,0.141,109,2.418]],["body/interfaces/AggregationEdge.html",[8,0.015,14,0.086,15,0.187,16,0.086,22,0.198,38,0.461,46,0.427,52,0.198,53,0.018,54,0.01,55,0.009,56,0.254,57,3.863,58,0.623,59,2.021,60,1.162,61,1.209,62,3.266,63,1.809,64,2.481,65,1.307,66,0.994,67,2.723,68,2.217,69,2.3,70,1.637,71,3.088,72,1.071,73,4.32,74,0.174,75,0.385,77,2.985,78,2.44,79,1.074,80,1.809,81,2.324,82,0.54,83,0.386,84,0.562,85,2.261,86,3.089,87,0.649,88,0.483,89,1.079,90,1.133,91,1.961,92,0.886,93,1.412,94,1.079,95,1.117,96,1.22,97,2.205,98,2.259,99,0.675,100,0.686,101,0.598,102,1.943,103,1.493,104,1.52,105,2.259,106,2.44,107,1.816,108,3.522,109,3.052,110,1.419,111,2.49,112,2.71,113,2.028,114,2.568,115,1.909,116,0.792,117,0.693,118,0.649,119,1.909,120,2.3,121,2.806,122,2.119,123,2.3,124,1.493,125,3.266,126,1.909,127,2.324,128,1.312,129,3.266,130,2.166,131,2.358,132,2.568,133,1.641,134,1.909,135,1.428,136,2.3,137,3.336,138,2.481,139,2.481,140,1.412,141,2.682,142,1.823,143,1.033,144,0.338,145,2.985,146,2.079,147,2.166,148,1.706,149,0.615,150,1.941,151,1.719,152,2.481,153,1.809,154,2.481,155,1.797,156,0.87,157,0.789,158,1.562,159,0.821,160,2.15,161,2.481,162,2.263,163,0.833,164,0.693,165,3.052,166,1.165,167,1.368,168,1.809,169,1.368,170,1.307,171,1.327,172,2.578,173,2.3,174,2.481,175,1.637,176,3.261,177,1.863,178,2.15,179,2.15,180,2.3,181,1.282,182,1.117,183,2.481,184,0.505,185,0.527,186,1.557,187,1.618,188,1.562,189,1.368,190,2.3,191,1.282,192,2.119,193,1.886,194,5.14,195,2.71,196,0.994,197,1.493,198,2.481,199,2.481,200,0.865,201,2.481,202,2.481,203,1.637,204,1.637,205,1.637,206,4.095,207,2.481,208,3.151,209,3.522,210,2.481,211,1.312,212,2.481,213,2.481,214,2.481,215,2.481,216,2.481,217,2.481,218,2.481,219,2.15,220,1.209,221,2.481,222,1.493,223,1.809,224,1.259,225,2.481,226,2.481,227,2.481,228,2.837,229,2.3,230,1.943,231,1.641,232,2.481,233,2.481,234,1.909,235,1.909,236,2.481,237,2.481,238,1.909,239,2.481,240,2.481,241,2.481,242,2.481,243,2.217,244,0.957,245,1.909,246,2.481,247,3.266,248,3.797,249,2.3,250,1.562,251,2.481,252,2.021,253,2.481,254,0.876,255,3.522,256,1.809,257,2.481,258,3.522,259,1.909,260,2.481,261,2.3,262,1.493,263,2.481,264,2.481,265,1.117,266,1.909,267,1.809,268,1.408,269,2.481,270,2.481,271,1.719,272,2.481,273,2.481,274,2.481,275,2.481,276,2.481,277,2.481,278,2.481,279,0.759,280,2.568,281,2.481,282,2.481,283,2.481,284,2.481,285,0.42,286,2.481,287,2.71,288,2.481,289,1.428,290,1.909,291,0.994,292,2.3,293,2.021,294,1.259,295,1.259,296,1.909,297,1.117,298,1.428,299,1.493,300,1.909,301,1.909,302,2.481,303,4.457,304,3.088,305,2.358,306,2.481,307,4.095,308,0.957,309,1.918,310,1.387,311,0.79,312,1.909,313,2.941,314,0.994,315,3.522,316,2.682,317,4.457,318,3.522,319,1.943,320,1.525,321,2.324,322,3.522,323,3.522,324,3.522,325,3.522,326,3.522,327,3.522,328,1.399,329,2.028,330,1.809,331,1.209,332,2.481,333,1.117,334,1.909,335,2.806,336,1.442,337,2.263,338,1.601,339,4.457,340,4.457,341,3.549,342,1.482,343,2.481,344,2.263,345,2.481,346,3.522,347,3.266,348,2.481,349,3.106,350,3.522,351,2.481,352,3.522,353,0.921,354,0.994,355,1.493,356,2.481,357,1.809,358,1.117,359,1.637,360,2.15,361,2.481,362,2.481,363,0.994,364,2.481,365,4.095,366,2.481,367,2.481,368,2.481,369,2.481,370,2.481,371,2.481,372,3.522,373,2.481,374,2.481,375,2.481]],["title/interfaces/AggregationEdgeType.html",[56,0.141,73,2.274]],["body/interfaces/AggregationEdgeType.html",[8,0.015,14,0.085,15,0.186,16,0.085,22,0.197,38,0.453,46,0.424,52,0.197,53,0.018,54,0.01,55,0.009,56,0.253,57,3.83,58,0.612,59,1.983,60,1.14,61,1.187,62,3.222,63,1.775,64,2.434,65,1.29,66,0.976,67,2.713,68,2.188,69,2.257,70,1.606,71,3.543,72,1.223,73,4.354,74,0.171,75,0.38,76,0.785,77,2.954,78,2.407,79,1.054,80,1.775,81,2.293,82,0.533,83,0.39,84,0.578,85,2.257,86,2.798,87,0.637,88,0.474,89,1.077,90,1.108,91,2.084,92,0.87,93,1.393,94,1.064,95,1.096,96,1.217,97,2.189,98,2.235,99,0.663,100,0.676,101,0.587,102,1.917,103,1.465,104,1.504,105,2.235,106,1.686,107,1.802,108,2.434,109,2.11,110,1.407,111,2.472,112,2.674,113,2.001,114,2.533,115,1.873,116,0.785,117,0.748,118,0.637,119,1.873,120,2.257,121,2.942,122,2.438,123,2.257,124,1.465,125,3.222,126,1.873,127,2.293,128,1.288,129,4.098,130,2.144,131,2.333,132,2.533,133,1.624,134,1.873,135,1.402,136,2.257,137,3.601,138,2.434,139,3.475,140,1.771,141,2.812,142,1.856,143,1.447,144,0.388,145,3.222,146,2.243,147,2.338,148,1.841,149,0.635,150,2.003,151,2.407,152,3.475,153,2.533,154,3.475,155,1.787,156,0.866,157,0.784,158,1.533,159,0.805,160,3.011,161,3.475,162,2.539,163,0.899,164,0.823,165,3.512,166,1.546,167,1.343,168,1.775,169,1.343,170,1.29,171,1.323,172,2.551,173,2.257,174,2.434,175,1.606,176,3.238,177,1.838,178,2.11,179,2.11,180,2.257,181,1.272,182,1.096,183,2.434,184,0.495,185,0.517,186,1.546,187,1.608,188,1.533,189,1.343,190,2.257,191,1.272,192,2.091,193,1.874,194,5.114,195,2.674,196,0.976,197,1.465,198,2.434,199,2.434,200,0.863,201,2.434,202,2.434,203,1.606,204,1.606,205,1.606,206,4.052,207,2.434,208,3.118,209,3.475,210,2.434,211,1.288,212,2.434,213,2.434,214,2.434,215,2.434,216,2.434,217,2.434,218,2.434,219,2.11,220,1.187,221,2.434,222,1.465,223,1.775,224,1.236,225,2.434,226,2.434,227,2.434,228,2.807,229,2.257,230,1.917,231,1.624,232,2.434,233,2.434,234,1.873,235,1.873,236,2.434,237,2.434,238,1.873,239,2.434,240,2.434,241,2.434,242,2.434,243,2.188,244,0.939,245,1.873,246,2.434,247,3.222,248,3.757,249,2.257,250,1.533,251,2.434,252,1.983,253,2.434,254,0.869,255,3.475,256,1.775,257,2.434,258,3.475,259,1.873,260,2.434,261,2.257,262,1.465,263,2.434,264,2.434,265,1.096,266,1.873,267,1.775,268,1.393,269,2.434,270,2.434,271,1.686,272,2.434,273,2.434,274,2.434,275,2.434,276,2.434,277,2.434,278,2.434,279,0.754,280,2.533,281,2.434,282,2.434,283,2.434,284,2.434,285,0.412,286,2.434,287,2.674,288,2.434,289,1.402,290,1.873,291,0.976,292,2.257,293,1.983,294,1.236,295,1.236,296,1.873,297,1.096,298,1.402,299,1.465,300,1.873,301,1.873,302,2.434,303,4.419,304,3.062,305,2.333,306,2.434,307,4.052,308,0.939,309,1.898,310,1.377,311,0.775,312,1.873,313,2.916,314,0.976,315,3.475,316,2.659,317,4.419,318,3.475,319,1.917,320,1.505,321,2.293,322,3.475,323,3.475,324,3.475,325,3.475,326,3.475,327,3.475,328,1.393,329,2.001,330,1.775,331,1.187,332,2.434,333,1.096,334,1.873,335,2.782,336,1.431,337,2.243,338,1.593,339,4.419,340,4.419,341,3.512,342,1.474,343,2.434,344,2.243,345,2.434,346,3.475,347,3.222,348,2.434,349,3.084,350,3.475,351,2.434,352,3.475,353,0.904,354,0.976,355,1.465,356,2.434,357,1.775,358,1.096,359,1.606,360,2.11,361,2.434,362,2.434,363,0.976,364,2.434,365,4.052,366,2.434,367,2.434,368,2.434,369,2.434,370,2.434,371,2.434,372,3.475,373,2.434,374,2.434,375,2.434]],["title/classes/AggregationProvider.html",[53,0.021,178,2.418]],["body/classes/AggregationProvider.html",[8,0.015,12,0.777,14,0.073,15,0.186,16,0.073,22,0.187,38,0.389,46,0.442,52,0.187,53,0.016,54,0.01,55,0.008,56,0.233,57,3.566,59,3.353,60,0.98,61,2.144,62,2.886,63,1.526,64,2.093,65,1.155,66,0.839,67,2.627,68,1.96,69,1.941,70,1.381,71,3.047,72,1.076,73,4.354,74,0.147,75,0.341,76,0.89,77,2.709,78,2.156,79,1.348,80,1.526,81,2.054,82,0.477,83,0.401,84,0.573,85,2.25,86,2.824,87,0.548,88,0.407,89,1.086,90,1.148,91,1.832,92,1.47,93,1.763,94,1.138,95,0.942,96,1.244,97,2.347,98,2.05,99,0.57,100,0.606,101,0.505,102,3.058,103,1.873,104,1.82,105,1.717,106,1.45,107,1.778,108,2.093,109,1.814,110,1.31,111,2.326,112,2.395,113,1.792,114,2.269,115,1.61,116,0.781,117,0.808,118,0.814,119,1.61,120,1.941,121,2.902,122,1.873,123,1.941,124,2.236,125,2.886,126,1.61,127,2.054,128,1.107,129,2.886,130,2.177,131,2.369,132,2.269,133,1.649,134,1.61,135,1.205,136,1.941,137,3.353,138,2.093,139,2.093,140,1.247,141,2.774,142,1.852,143,0.872,144,0.512,145,2.709,146,1.886,147,1.966,148,1.714,149,0.624,150,1.966,151,1.45,152,2.093,153,1.526,154,2.093,155,1.849,156,0.864,157,0.743,158,1.318,159,1.03,160,1.814,161,2.093,162,2.34,163,1.02,164,0.629,165,2.697,166,1.03,167,1.155,168,1.526,169,1.155,170,1.155,171,1.289,172,2.34,173,1.941,174,2.093,175,2.054,176,3.194,177,2.177,178,2.697,179,2.697,180,2.886,181,1.3,182,2.257,183,3.716,184,0.633,185,1.145,186,1.455,187,1.525,188,2.34,189,1.155,190,1.941,191,1.3,192,2.236,193,1.996,194,5.175,195,2.395,196,0.839,197,1.259,198,2.093,199,2.093,200,0.846,201,2.093,202,2.093,203,1.381,204,1.381,205,1.381,206,3.716,207,2.093,208,2.859,209,3.112,210,2.093,211,1.107,212,2.093,213,2.093,214,2.093,215,2.093,216,2.093,217,2.093,218,2.093,219,1.814,220,1.02,221,2.093,222,1.259,223,1.526,224,1.062,225,2.093,226,2.093,227,2.093,228,2.851,229,1.941,230,2.05,231,1.763,232,2.093,233,2.093,234,1.61,235,1.61,236,2.093,237,2.093,238,1.61,239,2.093,240,2.093,241,2.093,242,2.093,243,1.96,244,1.2,245,2.395,246,3.112,247,3.445,248,4.078,249,2.886,250,1.96,251,3.112,252,2.536,253,3.112,254,0.857,255,3.716,256,2.269,257,3.112,258,3.112,259,1.61,260,2.093,261,1.941,262,1.259,263,2.093,264,2.093,265,0.942,266,1.61,267,1.526,268,1.512,269,2.093,270,2.093,271,1.45,272,2.093,273,2.093,274,2.093,275,2.093,276,2.093,277,2.093,278,2.093,279,0.709,280,2.269,281,2.093,282,2.093,283,2.093,284,2.093,285,0.354,286,2.093,287,2.395,288,2.093,289,1.205,290,1.61,291,0.839,292,2.886,293,2.536,294,1.58,295,1.58,296,1.61,297,1.853,298,1.205,299,1.259,300,1.61,301,1.61,302,2.093,303,4.115,304,2.851,305,2.14,306,2.093,307,3.716,308,0.807,309,2.159,310,1.544,311,0.991,312,2.395,313,3.042,314,1.247,315,3.112,316,2.476,317,4.115,318,3.112,319,1.717,320,1.348,321,2.054,322,3.112,323,3.112,324,3.112,325,3.112,326,3.112,327,3.112,328,1.427,329,2.369,330,2.269,331,1.517,332,3.112,333,1.853,334,1.61,335,2.591,336,1.347,337,2.089,338,1.52,339,4.115,340,4.115,341,3.22,342,1.406,343,2.093,344,2.089,345,2.093,346,3.112,347,2.886,348,2.093,349,2.902,350,3.112,351,2.093,352,3.112,353,1.155,354,1.247,355,1.259,356,2.093,357,1.526,358,0.942,359,1.381,360,1.814,361,2.093,362,2.093,363,0.839,364,2.093,365,3.716,366,2.093,367,2.093,368,2.093,369,2.093,370,2.093,371,2.093,372,3.112,373,2.093,374,2.093,375,2.093,376,1.526,377,2.536,378,1.247,379,2.536,380,2.536,381,1.155,382,4.352,383,2.395,384,2.395,385,2.395,386,2.14,387,2.054,388,1.278,389,2.395,390,2.395,391,1.705,392,2.057,393,4.352,394,2.087,395,2.574,396,4.731,397,2.926,398,1.318,399,1.814,400,1.705,401,1.814,402,1.814,403,1.814,404,1.814,405,1.814,406,2.926,407,0.963,408,1.462,409,2.926,410,2.926,411,2.926,412,2.926,413,1.205,414,1.814,415,1.705,416,0.807,417,1.705,418,1.2,419,1.45,420,1.205,421,1.205,422,0.72,423,1.205,424,1.259,425,0.666,426,1.814,427,1.02,428,1.205,429,2.926,430,1.941,431,1.205,432,1.814,433,1.205,434,1.814]],["title/classes/AsyncRecordsProvider.html",[53,0.021,435,3.045]],["body/classes/AsyncRecordsProvider.html",[8,0.015,12,1.19,14,0.112,15,0.112,16,0.112,22,0.189,52,0.13,53,0.024,54,0.011,55,0.011,56,0.162,60,1.502,61,2.511,72,0.839,74,0.225,75,0.459,76,0.981,79,1.389,83,0.402,84,0.564,89,1.056,90,1.124,92,1.671,93,2.064,94,0.982,95,1.444,96,1.225,97,2.722,99,0.873,100,0.624,102,3.181,103,1.93,104,1.842,105,2.315,110,1.336,116,0.745,117,0.792,118,0.839,119,2.467,121,2.642,124,2.986,127,2.769,130,1.696,140,1.682,142,1.608,144,0.544,148,1.748,149,0.612,150,1.961,156,0.792,159,1.061,163,1.01,165,3.637,167,2.737,171,0.773,177,2.22,181,1.143,182,2.379,184,0.854,185,1.229,186,1.704,187,1.642,188,3.124,189,1.769,192,2.525,193,2.038,224,1.628,243,2.019,285,0.543,291,1.285,295,2.13,296,2.467,297,2.234,304,2.222,310,1.517,311,1.021,314,1.285,328,1.143,331,1.563,333,2.106,353,1.19,354,1.285,376,2.338,377,3.419,378,1.682,379,3.419,380,3.419,381,1.558,383,3.229,384,3.229,385,3.229,386,2.693,387,2.769,388,1.608,389,3.229,390,3.229,391,2.613,392,2.152,394,2.3,395,2.222,396,4.998,399,2.779,400,2.613,401,2.779,402,2.779,403,2.779,404,2.779,405,2.779,407,1.044,408,1.649,413,1.847,414,2.779,415,2.613,416,1.237,417,2.613,418,1.618,419,2.222,420,1.847,421,1.847,422,1.103,423,1.847,424,2.525,425,1.021,426,2.779,427,1.563,428,1.847,430,2.973,431,1.847,432,2.779,433,1.847,434,2.779,435,4.578,436,5.674,437,2.754,438,5.867,439,2.525,440,2.907,441,1.682,442,1.52,443,2.815,444,5.867,445,2.662,446,2.857,447,4.3,448,4.484,449,4.484,450,4.484,451,6.938,452,4.043,453,2.416,454,5.867,455,3.89,456,3.06,457,2.315,458,3.891,459,2.046,460,1.336,461,3.499,462,2.222,463,2.779,464,3.637,465,1.682,466,2.779,467,2.642,468,1.389,469,1.563,470,1.93,471,2.779,472,2.467,473,2.973,474,2.973,475,2.973,476,2.019,477,1.628,478,2.338,479,2.046,480,2.973,481,2.973,482,1.696,483,3.499,484,1.847,485,2.613,486,3.89,487,4.484,488,3.207,489,4.484]],["title/classes/BaseProvider.html",[53,0.021,102,1.539]],["body/classes/BaseProvider.html",[8,0.015,12,1.637,14,0.084,15,0.084,16,0.084,22,0.178,38,0.451,46,0.332,52,0.098,53,0.018,54,0.009,55,0.009,56,0.204,60,1.135,61,1.97,62,3.211,65,1.285,72,0.906,74,0.17,75,0.483,76,0.923,77,2.946,79,2.101,83,0.396,84,0.6,89,1.085,90,1.178,91,1.683,92,1.733,93,1.945,94,1.238,95,1.091,96,1.296,98,2.229,100,0.472,101,0.584,102,1.91,103,3.074,104,2.07,111,1.832,116,0.907,117,0.928,118,1.336,124,2.084,133,1.388,142,1.389,143,2.128,144,0.517,148,1.442,149,0.653,150,1.854,156,0.893,157,0.839,159,1.146,163,1.152,166,1.745,170,1.5,171,1.345,181,0.943,182,2.375,184,0.705,185,1.204,187,1.605,193,1.701,196,0.971,200,0.827,244,1.559,250,2.18,254,0.82,262,1.458,268,1.389,280,3.401,285,0.586,291,1.945,292,2.246,295,1.758,296,3.109,297,2.249,298,1.395,305,1.994,310,1.505,314,1.388,328,1.201,333,1.986,335,2.544,336,1.429,337,2.593,338,1.732,341,4.043,342,1.374,344,1.758,347,4.499,353,0.899,354,1.388,358,2.341,359,2.285,376,1.766,377,3.293,378,1.62,379,3.293,380,3.293,381,1.637,383,2.664,384,2.664,385,2.664,386,2.539,387,2.285,388,1.516,389,2.664,390,2.664,391,1.974,392,2.079,394,2.128,400,3.593,407,1.003,408,1.486,413,1.994,415,3.953,416,1.799,417,3.293,418,2.035,419,2.399,420,1.994,421,1.994,422,1.191,423,1.994,424,2.084,425,1.404,427,2.15,428,1.994,431,1.994,433,1.994,442,1.429,445,2.15,455,2.938,457,1.91,462,2.399,468,1.499,490,6.822,491,4.902,492,4.841,493,3.747,494,1.191,495,4.841,496,3.387,497,3.387,498,3.387,499,3.387,500,3.387,501,3.387,502,3.387,503,3.387,504,3.387,505,3.387,506,3.387,507,3.387,508,3.387,509,3.387,510,3.387,511,0.714,512,4.841,513,5.349,514,4.841,515,4.841,516,3.387,517,2.938,518,2.643,519,4.841,520,4.841,521,3.387,522,1.678,523,3.387,524,3.387,525,2.525,526,1.799,527,1.598,528,3.387,529,3.387,530,3.387,531,3.387,532,3.387,533,3.387,534,3.387,535,3.387,536,3.387,537,2.664,538,3.074,539,6.784,540,4.2,541,1.62,542,4.841,543,1.499,544,4.841,545,2.18,546,3.387,547,1.864,548,3.387,549,3.778,550,3.387,551,3.387,552,3.387,553,3.387,554,3.778,555,2.399,556,4.841,557,3.387,558,4.2,559,5.349,560,1.766,561,3.387,562,2.938,563,2.422,564,3.211,565,3.387,566,3.387,567,3.387,568,3.387,569,4.841,570,3.387,571,3.387,572,3.387,573,3.387,574,3.387,575,3.387,576,1.864,577,3.387,578,3.387,579,1.974,580,1.395,581,3.387,582,1.458,583,4.841,584,3.387,585,3.387,586,3.387,587,3.387,588,4.841,589,3.387,590,3.387,591,3.387,592,3.387,593,3.387,594,3.387,595,3.387,596,4.841,597,3.387,598,3.387,599,3.387,600,5.65,601,3.387,602,4.841,603,4.841,604,4.841,605,3.387,606,3.387,607,3.387,608,3.387,609,3.387,610,4.841,611,3.387,612,4.841,613,3.387,614,3.387,615,3.387,616,4.841,617,3.387,618,3.387,619,3.387]],["title/components/BsEdgeInfoCard.html",[620,0.45,621,1.476]],["body/components/BsEdgeInfoCard.html",[7,1.797,8,0.015,9,1.724,10,1.724,14,0.201,15,0.118,16,0.118,17,1.656,22,0.176,24,0.691,31,1.797,46,0.326,48,1.946,52,0.137,53,0.025,54,0.012,55,0.011,66,1.361,74,0.238,75,0.477,76,0.603,82,0.804,83,0.377,89,1.069,90,1.153,94,1.334,95,1.529,116,0.773,144,0.461,156,0.575,157,0.548,159,1.441,162,1.724,196,1.361,200,0.521,279,0.891,285,0.814,328,0.925,342,1.283,344,2.211,359,2.874,363,1.361,381,1.617,392,2.025,394,1.415,407,0.81,408,1.04,442,1.473,494,1.498,558,5.832,559,5.832,620,0.776,621,2.683,622,2.508,623,1.656,624,2.252,625,1.724,626,2.139,627,6.703,628,3.396,629,1.718,630,1.729,631,1.726,632,5.721,633,2.543,634,5.246,635,2.543,636,2.165,637,2.416,638,5.246,639,5.246,640,5.246,641,5.854,642,2.165,643,3.918,644,4.808,645,4.458,646,4.458,647,5.246,648,1.498,649,4.752,650,3.506,651,4.808,652,5.283,653,3.052,654,2.621,655,4.749,656,4.752,657,4.749,658,4.12,659,4.749,660,4.749,661,4.12,662,4.749,663,1.387,664,3.706,665,3.706,666,4.749,667,4.749,668,4.749,669,4.749,670,3.706,671,3.706,672,1.874,673,2.353,674,2.241,675,3.706,676,3.706,677,3.706,678,3.706,679,4.752,680,3.706,681,1.724,682,3.706,683,2.613,684,1.724,685,3.706,686,1.168,687,3.396,688,6.152,689,5.525,690,3.351,691,6.09,692,4.749,693,6.09,694,4.749,695,4.749,696,5.283,697,5.283,698,3.351,699,2.621,700,2.04,701,2.403,702,2.139,703,3.193,704,2.139,705,4.749,706,4.749,707,4.749,708,2.742,709,2.742,710,1.656,711,2.139,712,1.874,713,2.742,714,1.471,715,3.193,716,1.724,717,1.724,718,1.874,719,1.797,720,1.656,721,1.797,722,2.139,723,2.139,724,1.724,725,1.441,726,3.027,727,2.139,728,1.874,729,1.956,730,1.797,731,2.139,732,1.797,733,2.403,734,2.139,735,1.797,736,1.797,737,2.139,738,1.656,739,1.797,740,1.797,741,1.724,742,1.213,743,2.139,744,2.139]],["title/components/BsFacetDate.html",[620,0.45,710,1.36]],["body/components/BsFacetDate.html",[7,1.279,8,0.015,9,1.227,10,1.227,14,0.14,15,0.084,16,0.084,17,1.179,22,0.218,24,0.492,29,1.86,31,1.279,38,0.45,42,1.132,46,0.331,48,2.001,52,0.163,53,0.018,54,0.013,55,0.009,56,0.175,65,1.283,66,0.969,74,0.17,75,0.378,76,0.861,82,0.851,83,0.401,84,0.599,85,2.127,86,2.992,87,0.632,88,0.471,89,0.45,90,0.492,96,1.107,97,1.62,98,2.571,99,0.658,100,0.673,101,0.583,107,1.699,110,1.285,116,0.979,117,0.921,118,0.905,126,2.66,144,0.512,149,0.452,155,1.783,156,0.913,157,0.782,163,1.086,164,0.409,166,0.8,184,0.704,185,1.105,186,0.8,187,1.689,196,0.969,200,0.783,203,1.595,204,1.595,205,1.595,224,1.227,254,0.643,268,0.831,279,0.651,285,0.684,289,2.324,328,1.269,331,1.179,336,0.74,338,0.77,342,0.712,378,0.969,381,1.283,388,1.388,392,2.137,394,2.02,407,0.929,408,1.485,422,1.189,425,1.484,460,1.101,494,1.189,511,0.712,541,0.969,580,2.684,620,0.651,621,1.279,622,1.991,623,1.179,624,1.132,625,1.227,626,1.522,629,1.442,630,1.678,631,1.673,635,1.279,636,1.089,648,1.189,653,2.081,654,2.081,663,1.699,689,3.457,699,2.081,700,1.62,701,1.907,702,1.522,703,2.774,704,1.522,708,2.177,709,2.177,710,2.148,711,1.522,712,1.334,713,2.177,714,1.497,715,2.774,716,1.227,717,1.227,718,1.334,719,1.279,720,1.179,721,1.279,722,1.522,723,1.522,724,1.227,725,1.144,726,2.542,727,1.522,728,1.334,729,1.392,730,1.279,731,1.522,732,1.279,733,1.907,734,1.522,735,1.279,736,1.279,737,1.522,738,1.179,739,1.279,740,1.279,741,1.227,742,1.732,743,1.522,744,1.522,745,4.206,746,2.417,747,2.429,748,3.743,749,2.943,750,3,751,1.686,752,4.404,753,3.772,754,2.935,755,4.404,756,4.404,757,3.818,758,2.684,759,2.797,760,4.834,761,4.194,762,2.651,763,3.052,764,4.834,765,4.834,766,4.807,767,4.807,768,4.807,769,5.085,770,4.807,771,4.807,772,3.052,773,2.997,774,2.932,775,3.053,776,4.992,777,2.434,778,2.248,779,5.446,780,2.338,781,2.935,782,4.834,783,2.66,784,3.38,785,3.38,786,3.38,787,3.38,788,3.38,789,3.38,790,3.38,791,3.38,792,3.38,793,3.38,794,3.38,795,3.772,796,2.236,797,3.38,798,3.206,799,3.38,800,1.497,801,1.908,802,3.38,803,1.891,804,3.38,805,3.38,806,3.772,807,3.38,808,3.772,809,3.38,810,3.798,811,3.38,812,3.38,813,4.405,814,3.38,815,4.036,816,3.38,817,3.38,818,3.38,819,2.227,820,3.38,821,3.38,822,2.638,823,3.38,824,2.417,825,3.772,826,1.132,827,2.638,828,1.991,829,2.638,830,1.007,831,1.97,832,2.241,833,2.638,834,2.638,835,1.522,836,2.241,837,4.404,838,2.638,839,2.638,840,2.095,841,1.132,842,1.97,843,1.455,844,2.638,845,2.638,846,1.455,847,2.638,848,1.334,849,1.455,850,1.392,851,2.638,852,3.772,853,3.772,854,3.772,855,2.638,856,2.638,857,2.417,858,2.417,859,2.638,860,2.66,861,3.772,862,2.638,863,2.638,864,2.638,865,2.638,866,1.675,867,2.638,868,2.638,869,2.638,870,3.772,871,2.638,872,2.638,873,2.638,874,2.638,875,2.638,876,1.763,877,2.797,878,2.638,879,2.638,880,2.638,881,2.638,882,2.417,883,2.638,884,2.638,885,2.241,886,2.638,887,2.638,888,2.638,889,2.638,890,3.772,891,2.417,892,2.064,893,2.638,894,2.417,895,2.638,896,2.638,897,2.638,898,2.638,899,1.97,900,3.289,901,1.97,902,2.638,903,2.638,904,2.638,905,3.106,906,1.675,907,1.97,908,2.638,909,1.595,910,1.97,911,2.417,912,2.638,913,2.638,914,1.97,915,2.638,916,1.97,917,1.97,918,2.638,919,2.638,920,2.417,921,2.638,922,2.638,923,2.638,924,2.638,925,2.638,926,1.595,927,2.638,928,4.834,929,4.834,930,3.38,931,5.644,932,3.38,933,2.638,934,3.38,935,4.834,936,3.38,937,2.417,938,2.932,939,2.241,940,4.194,941,3.38,942,3.38,943,2.241,944,3.38]],["title/components/BsHeatmapComponent.html",[620,0.45,716,1.417]],["body/components/BsHeatmapComponent.html",[7,1.227,8,0.015,9,1.178,10,1.178,14,0.137,15,0.081,16,0.081,17,1.131,22,0.136,24,0.472,31,1.227,32,3.112,46,0.501,48,1.702,52,0.136,53,0.017,54,0.01,55,0.009,56,0.117,66,0.93,72,0.878,74,0.163,75,0.367,76,0.876,82,0.775,83,0.407,84,0.54,89,0.432,90,0.472,107,1.521,116,0.815,117,0.928,136,2.151,140,1.345,144,0.473,149,0.439,151,2.325,155,1.639,160,2.909,163,1.098,164,0.96,166,1.305,171,0.951,184,0.683,191,0.632,200,0.802,230,1.28,244,0.895,254,0.624,268,1.486,279,0.697,289,1.336,308,0.895,309,2.148,331,1.131,344,2.328,353,0.861,381,1.246,392,2.161,394,2.176,395,1.607,407,0.917,408,1.464,422,1.154,452,1.89,460,0.739,470,1.396,484,1.336,485,2.735,494,1.154,541,1.581,543,1.708,580,2.641,620,0.636,621,1.227,622,1.933,623,1.923,624,1.087,625,1.178,626,1.461,629,1.409,630,1.671,631,1.675,633,2.086,635,2.426,636,2.153,637,1.946,642,1.776,646,2.151,648,1.154,653,2.967,654,2.02,663,1.719,672,1.28,684,1.704,686,1.154,699,2.76,700,1.848,701,1.852,702,1.461,703,2.722,704,1.461,708,2.113,709,2.113,710,1.131,711,1.461,712,1.28,713,2.113,714,1.005,715,2.722,716,2.194,717,1.178,718,1.28,719,2.529,720,1.131,721,1.227,722,1.461,723,1.461,724,1.178,725,1.111,726,2.483,727,1.461,728,1.28,729,1.336,730,1.227,731,1.461,732,1.227,733,1.852,734,1.461,735,1.227,736,1.227,737,1.461,738,1.131,739,1.227,740,1.227,741,1.178,742,0.829,743,1.461,744,1.461,751,1.636,796,2.194,803,1.572,877,2.325,892,1.087,937,4.781,938,2.814,943,3.112,945,2.531,946,3.214,947,4.784,948,4.072,949,4.784,950,3.522,951,3.522,952,4.784,953,3.214,954,3.214,955,3.214,956,3.214,957,3.214,958,3.214,959,4.693,960,4.257,961,3.214,962,4.192,963,3.214,964,5.564,965,5.515,966,3.737,967,4.693,968,4.693,969,4.693,970,4.784,971,5.243,972,3.214,973,4.784,974,2.373,975,5.564,976,5.564,977,2.176,978,5.564,979,3.662,980,4.784,981,4.784,982,3.243,983,3.498,984,4.693,985,2.735,986,3.243,987,3.662,988,3.243,989,4.072,990,3.243,991,5.349,992,3.243,993,2.735,994,2.852,995,3.243,996,3.243,997,2.722,998,2.489,999,3.313,1000,2.113,1001,3.243,1002,3.243,1003,3.243,1004,2.489,1005,1.852,1006,3.243,1007,2.735,1008,3.243,1009,3.243,1010,2.53,1011,3.243,1012,3.243,1013,4.072,1014,3.243,1015,3.214,1016,4.784,1017,3.214,1018,2.601,1019,4.072,1020,5.243,1021,4.072,1022,3.681,1023,2.447,1024,3.179,1025,2.735,1026,4.072,1027,4.072,1028,4.784,1029,3.243,1030,3.243,1031,3.243,1032,3.662,1033,3.243,1034,3.243,1035,2.426,1036,2.909,1037,3.243,1038,3.243,1039,5.243,1040,4.072,1041,4.784,1042,3.243,1043,4.072,1044,3.112,1045,2.113,1046,4.784,1047,3.243,1048,3.243,1049,3.662,1050,3.243,1051,3.243,1052,3.243,1053,3.243,1054,3.243,1055,3.243,1056,3.243,1057,3.243,1058,3.243,1059,3.243,1060,3.243,1061,3.243,1062,3.243,1063,2.01,1064,3.243,1065,5.217,1066,3.243,1067,3.522,1068,3.243,1069,3.243,1070,3.243,1071,2.176,1072,2.325,1073,1.396,1074,2.814,1075,2.814,1076,1.607,1077,2.814,1078,1.531,1079,2.325,1080,1.607,1081,1.933,1082,1.89,1083,1.89,1084,2.641,1085,2.151,1086,2.531,1087,2.814,1088,4.072,1089,4.072,1090,2.814,1091,2.814,1092,2.814,1093,2.814,1094,2.814,1095,2.814,1096,2.814,1097,2.814,1098,2.814,1099,1.89,1100,2.814,1101,2.735,1102,3.214,1103,1.89,1104,1.89,1105,1.89,1106,2.814,1107,1.89,1108,1.89,1109,1.89,1110,2.814,1111,2.814,1112,2.814,1113,1.531,1114,1.691,1115,1.89,1116,2.814,1117,2.151,1118,1.785,1119,2.151,1120,1.89,1121,1.89,1122,1.89,1123,1.89,1124,1.89,1125,2.814,1126,2.01,1127,2.01,1128,2.814,1129,2.814,1130,2.814,1131,2.814,1132,3.112,1133,2.814,1134,2.814,1135,2.814,1136,2.814,1137,2.814,1138,2.814,1139,2.814,1140,1.345,1141,2.447,1142,2.814,1143,2.814,1144,2.151,1145,2.531,1146,2.531,1147,2.814,1148,3.112,1149,2.01,1150,4.072,1151,4.072,1152,2.113,1153,4.072,1154,2.814,1155,2.814,1156,1.89,1157,2.814,1158,2.814,1159,1.89,1160,1.396,1161,2.583,1162,1.89,1163,1.89,1164,2.735,1165,2.735,1166,2.735,1167,1.89,1168,1.89,1169,1.087,1170,1.89,1171,1.89,1172,2.814,1173,2.814,1174,4.784,1175,4.072,1176,4.072,1177,2.814,1178,2.531,1179,2.814,1180,2.814,1181,2.814,1182,2.814,1183,4.693,1184,4.693,1185,4.693,1186,6.044,1187,4.693,1188,4.693,1189,4.693,1190,4.693,1191,4.693,1192,4.693,1193,4.693,1194,2.735,1195,3.243,1196,3.243,1197,2.814,1198,3.243,1199,4.784,1200,4.784,1201,3.243,1202,1.607,1203,3.243,1204,3.243,1205,3.243,1206,3.243,1207,3.243,1208,3.243,1209,4.693,1210,4.784,1211,4.693,1212,3.243,1213,3.243,1214,3.243,1215,3.243,1216,3.243,1217,2.32,1218,4.693,1219,2.113,1220,3.662,1221,3.243,1222,1.89,1223,2.01]],["title/modules/BsHeatmapModule.html",[0,1.933,1224,2.418]],["body/modules/BsHeatmapModule.html",[2,2.64,3,3.123,8,0.015,11,2.418,12,1.556,13,2.415,14,0.146,15,0.146,16,0.146,20,3.616,21,3.616,22,0.235,23,3.616,24,0.853,25,3.616,26,3.057,27,4.96,28,4.96,29,3.226,33,3.616,34,1.498,37,4.298,38,0.78,48,1.556,50,3.057,52,0.17,53,0.031,54,0.014,55,0.013,681,2.129,712,3.228,716,2.97,718,3.228,719,2.218,721,3.095,1224,5.117,1225,5.086,1226,5.086,1227,5.086,1228,5.863,1229,4.599,1230,2.415,1231,5.863,1232,6.935]],["title/components/BsNodeInfoCard.html",[620,0.45,717,1.417]],["body/components/BsNodeInfoCard.html",[7,1.705,8,0.015,9,1.636,10,1.636,14,0.2,15,0.112,16,0.112,17,1.571,22,0.17,24,0.656,31,1.705,46,0.404,48,1.915,52,0.17,53,0.024,54,0.012,55,0.011,56,0.163,66,1.292,74,0.226,75,0.461,76,0.572,82,0.791,83,0.388,84,0.353,89,1.093,90,0.857,94,1.289,95,1.451,116,0.833,118,0.843,142,1.447,144,0.477,156,0.546,157,0.756,159,1.393,162,1.636,164,0.713,166,1.808,196,1.292,200,0.763,220,1.571,244,1.243,279,0.899,285,0.794,289,1.856,299,1.939,328,0.877,342,1.24,344,2.137,353,1.196,358,1.451,363,1.292,381,1.563,392,2,394,1.342,398,2.029,407,0.783,408,0.987,442,1.436,460,1.026,477,1.636,494,1.447,526,1.243,620,0.756,621,1.705,622,2.424,623,1.571,624,2.196,625,1.636,626,2.029,628,3.222,629,1.675,630,1.722,631,1.719,632,5.627,633,2.48,634,5.115,635,2.48,636,2.111,637,2.382,638,5.115,639,5.115,640,5.115,641,5.772,642,2.111,643,3.82,644,4.688,645,4.347,646,4.347,647,5.115,648,1.447,649,4.593,650,3.418,651,4.688,652,5.106,653,2.991,654,2.533,656,4.593,658,3.909,661,3.909,663,1.34,664,3.516,665,3.516,670,3.516,671,3.516,672,1.778,673,2.233,674,2.126,675,3.516,676,3.516,677,3.516,678,3.516,679,4.593,680,3.516,681,1.636,682,3.516,683,2.479,684,1.636,685,3.516,686,1.108,687,3.222,688,5.106,689,4.971,696,5.106,697,5.106,699,2.533,700,1.972,701,2.322,702,2.029,703,3.13,704,2.029,708,2.65,709,2.65,710,1.571,711,2.029,712,1.778,713,2.65,714,1.395,715,3.13,716,1.636,717,2.524,718,1.778,719,1.705,720,1.571,721,1.705,722,2.029,723,2.029,724,1.636,725,1.393,726,2.952,727,2.029,728,1.778,729,1.856,730,1.705,731,2.029,732,1.705,733,2.322,734,2.029,735,1.705,736,1.705,737,2.029,738,1.571,739,1.705,740,1.705,741,1.636,742,1.151,743,2.029,744,2.029,1233,5.963,1234,4.308,1235,5.465,1236,4.505,1237,4.505,1238,4.505,1239,4.505,1240,4.505,1241,3.909,1242,3.909,1243,3.909,1244,3.909,1245,3.909,1246,3.909,1247,3.909,1248,3.418,1249,5.687,1250,3.069,1251,2.349,1252,3.909,1253,3.909,1254,3.222,1255,3.909,1256,3.909,1257,3.909,1258,3.516,1259,3.909,1260,3.909,1261,3.222,1262,3.909,1263,3.909,1264,3.909,1265,3.909,1266,3.909,1267,3.516,1268,3.909,1269,3.909,1270,3.909,1271,3.909,1272,3.909,1273,3.909,1274,5.886,1275,4.505,1276,5.886,1277,5.886,1278,4.505]],["title/modules/BsTimelineModule.html",[0,1.933,1279,2.79]],["body/modules/BsTimelineModule.html",[0,2.816,2,2.559,3,3.065,8,0.015,11,2.374,12,1.509,13,2.341,14,0.141,15,0.141,16,0.141,20,3.55,21,3.55,22,0.238,23,3.55,24,0.827,25,3.55,26,2.964,27,4.869,28,4.869,29,3.127,33,3.55,34,1.452,35,4.22,36,2.682,37,4.22,38,0.756,41,4.869,42,1.904,48,1.807,50,3.55,52,0.164,53,0.03,54,0.012,55,0.012,319,2.242,620,0.656,710,2.842,714,2.524,719,2.15,720,2.842,741,2.959,742,1.452,750,2.242,824,4.065,1084,2.341,1224,4.86,1229,4.514,1230,2.341,1279,5.907,1280,4.931,1281,4.931,1282,5.683,1283,4.931,1284,5.683,1285,4.931,1286,3.746,1287,3.769,1288,6.807,1289,5.906,1290,4.931]],["title/components/BsTooltipComponent.html",[620,0.45,721,1.476]],["body/components/BsTooltipComponent.html",[7,1.83,8,0.015,9,1.756,10,1.756,14,0.169,15,0.12,16,0.12,17,1.687,22,0.14,24,0.704,31,1.83,46,0.332,48,1.957,52,0.14,53,0.026,54,0.012,55,0.011,66,1.387,74,0.358,83,0.37,89,0.644,90,0.704,117,0.893,144,0.422,157,0.711,163,1.073,164,0.821,211,2.565,279,0.87,392,2.001,562,5.346,580,3.104,620,0.782,621,1.83,622,2.538,623,2.148,624,2.272,625,1.756,626,2.178,630,1.731,631,1.749,633,2.852,635,2.934,636,2.558,637,2.184,643,4.653,654,2.652,663,1.716,699,2.652,700,2.064,701,2.431,702,2.178,703,3.215,704,2.178,708,2.775,709,2.775,710,1.687,711,2.178,712,1.908,713,2.775,714,1.498,715,3.215,716,1.756,717,1.756,718,1.908,719,1.83,720,1.687,721,2.701,722,2.178,723,2.178,724,1.756,725,1.458,726,3.053,727,2.178,728,1.908,729,1.992,730,1.83,731,2.178,732,1.83,733,2.431,734,2.178,735,1.83,736,1.83,737,2.178,738,1.687,739,1.83,740,1.83,741,1.756,742,1.236,743,2.178,744,2.178,773,3.819,977,2.675,1004,2.94,1005,2.431,1084,3.155,1194,3.951,1291,4.196,1292,4.849,1293,6.781,1294,3.731,1295,6.781,1296,4.849,1297,6.781,1298,6.54,1299,6.781,1300,6.781,1301,7.538,1302,8.145,1303,7.538,1304,6.781,1305,5.291,1306,4.837,1307,4.837,1308,4.837,1309,4.837,1310,4.837,1311,4.837,1312,4.837,1313,4.837,1314,4.837,1315,4.837,1316,6.162,1317,6.162,1318,6.162,1319,4.808,1320,6.162,1321,4.837,1322,4.837]],["title/interfaces/ChartDataPoint.html",[56,0.141,1323,2.274]],["body/interfaces/ChartDataPoint.html",[8,0.015,14,0.135,15,0.135,16,0.135,22,0.224,24,0.789,34,1.385,36,2.558,46,0.372,52,0.207,53,0.029,54,0.012,55,0.012,56,0.239,58,0.974,74,0.272,75,0.518,82,0.595,83,0.383,84,0.629,100,0.755,101,0.935,116,0.84,117,0.951,143,1.615,144,0.51,149,0.507,157,0.879,163,0.963,164,0.865,184,0.789,187,1.283,196,1.554,285,0.801,388,1.627,408,1.188,468,1.679,494,1.333,511,1.142,580,2.725,620,0.763,629,1.69,630,1.142,631,1.142,648,1.333,663,1.626,725,1.69,738,1.89,749,3.45,751,1.89,762,2.333,763,2.686,800,1.679,801,2.049,828,2.725,892,2.216,972,3.855,983,3.278,1010,2.817,1018,2.847,1071,2.139,1072,2.686,1078,3.122,1222,3.159,1323,4.333,1324,3.877,1325,5.163,1326,2.593,1327,5.163,1328,5.572,1329,5.163,1330,3.595,1331,3.641,1332,4.735,1333,3.855,1334,4.23,1335,3.595,1336,3.595,1337,4.23,1338,4.23,1339,2.333,1340,4.23,1341,4.23,1342,3.37,1343,2.558,1344,4.23,1345,4.23,1346,4.23,1347,3.595,1348,4.23,1349,2.983,1350,4.23,1351,4.23,1352,4.23,1353,3.929,1354,4.23,1355,5.163,1356,3.595,1357,3.595,1358,4.23,1359,3.595,1360,3.595,1361,4.23,1362,4.23,1363,4.23,1364,2.307,1365,4.23,1366,4.23,1367,2.686,1368,3.595,1369,1.283,1370,4.23,1371,4.23,1372,4.23,1373,3.159,1374,4.23,1375,4.23,1376,4.23,1377,2.558,1378,4.23,1379,4.23,1380,4.23,1381,5.163,1382,4.23,1383,4.23,1384,3.159,1385,4.23]],["title/interfaces/ChartOptions.html",[56,0.141,1333,2.274]],["body/interfaces/ChartOptions.html",[8,0.015,14,0.133,15,0.133,16,0.133,22,0.224,24,0.779,34,1.367,36,2.526,46,0.367,52,0.205,53,0.028,54,0.012,55,0.012,56,0.237,58,0.962,72,1.385,74,0.269,75,0.514,76,0.982,82,0.587,83,0.402,84,0.633,100,0.745,101,0.923,116,0.834,117,0.897,143,1.594,144,0.367,149,0.5,157,0.876,163,0.955,164,0.648,184,0.779,187,1.266,196,1.534,285,0.795,388,1.614,408,1.172,468,1.657,494,1.316,511,1.128,580,2.703,620,0.757,629,1.677,630,1.128,631,1.128,648,1.316,663,1.617,725,1.68,738,1.866,749,3.423,751,1.866,762,2.303,763,2.652,800,1.657,801,2.033,828,2.703,892,2.199,972,4.427,983,3.252,1010,2.801,1018,2.825,1071,2.111,1072,2.652,1078,3.098,1222,3.119,1323,4.137,1324,3.827,1325,5.122,1326,2.578,1327,5.122,1328,5.54,1329,5.122,1330,3.549,1331,3.612,1332,4.708,1333,4.137,1334,5.776,1335,4.909,1336,3.549,1337,4.176,1338,4.176,1339,2.303,1340,4.176,1341,4.176,1342,3.351,1343,2.526,1344,4.176,1345,4.176,1346,4.176,1347,3.549,1348,4.176,1349,2.945,1350,4.176,1351,4.176,1352,4.176,1353,3.907,1354,4.176,1355,5.122,1356,3.549,1357,3.549,1358,4.176,1359,3.549,1360,3.549,1361,4.176,1362,4.176,1363,4.176,1364,2.289,1365,4.176,1366,4.176,1367,2.652,1368,3.549,1369,1.266,1370,4.176,1371,4.176,1372,4.176,1373,3.119,1374,4.176,1375,4.176,1376,4.176,1377,2.526,1378,4.176,1379,4.176,1380,4.176,1381,5.122,1382,4.176,1383,4.176,1384,3.119,1385,4.176]],["title/interfaces/Column.html",[56,0.141,1386,2.274]],["body/interfaces/Column.html",[7,1.02,8,0.015,9,0.979,10,1.486,12,0.716,14,0.067,15,0.067,16,0.102,17,2.672,18,2.104,22,0.219,24,0.392,31,3.051,34,0.689,36,1.273,38,0.359,42,0.903,46,0.487,47,2.339,48,1.313,49,2.339,52,0.143,53,0.014,54,0.013,55,0.007,56,0.098,58,0.485,65,1.576,72,1.215,74,0.135,75,0.32,76,0.628,83,0.205,84,0.547,87,0.505,88,0.375,96,1.236,97,2.44,99,0.525,100,0.57,101,0.465,110,0.932,116,0.943,117,0.599,118,1.282,119,2.252,133,0.773,144,0.185,146,0.979,147,1.02,149,0.607,153,1.406,156,0.846,157,0.79,163,0.596,164,0.327,165,1.671,167,2.342,170,1.313,171,1.078,177,1.02,181,0.525,184,0.392,185,1.042,186,0.638,191,1.156,196,1.583,200,0.807,231,1.862,244,1.846,249,1.788,268,0.663,271,2.736,279,0.311,285,0.599,309,2.176,320,0.835,328,1.075,330,1.406,336,1.369,337,2.156,338,1.726,341,4.247,342,1.251,344,2.429,353,1.466,360,1.671,363,0.773,378,1.418,388,1.006,407,0.735,416,0.744,418,1.129,422,0.663,425,1.257,439,1.16,441,1.173,442,0.591,459,0.94,465,1.791,472,2.252,486,2.339,491,2.339,493,3.28,494,0.663,511,0.568,513,3.551,517,2.339,522,2.028,526,1.129,540,3.551,543,0.835,549,4.309,560,1.406,582,1.16,620,0.472,622,1.111,629,1.046,630,0.568,631,0.568,637,1.912,642,1.318,648,0.663,663,1.76,681,0.979,684,0.979,686,1.216,700,0.903,749,2.134,750,1.064,751,0.94,758,2.445,762,1.16,763,1.336,775,2.227,778,1.593,780,1.657,796,2.269,800,0.835,801,1.268,803,1.371,826,0.903,828,2.037,835,1.843,842,1.571,843,1.761,848,2.179,850,2.274,891,1.929,911,1.929,939,1.788,977,2.562,998,1.111,1005,1.615,1015,1.571,1032,2.104,1035,2.364,1073,1.16,1084,1.111,1160,1.16,1230,1.111,1267,5.221,1294,2.722,1326,1.796,1332,3.28,1339,1.16,1364,2.436,1368,1.788,1369,0.968,1377,1.273,1386,4.554,1387,2.339,1388,5.937,1389,5.151,1390,2.339,1391,2.579,1392,3.551,1393,2.339,1394,1.671,1395,3.949,1396,4.946,1397,2.339,1398,2.697,1399,4.093,1400,4.093,1401,4.946,1402,4.093,1403,4.093,1404,4.093,1405,4.093,1406,4.093,1407,4.946,1408,4.946,1409,4.093,1410,4.093,1411,4.093,1412,4.093,1413,4.093,1414,2.104,1415,4.093,1416,2.697,1417,2.104,1418,5.804,1419,2.697,1420,2.697,1421,1.406,1422,1.761,1423,4.791,1424,5.522,1425,1.273,1426,2.697,1427,2.697,1428,2.697,1429,2.697,1430,2.697,1431,4.093,1432,4.093,1433,4.093,1434,4.093,1435,4.093,1436,5.634,1437,4.946,1438,2.697,1439,3.096,1440,2.697,1441,2.697,1442,1.064,1443,1.219,1444,2.697,1445,5.522,1446,2.697,1447,2.697,1448,4.946,1449,2.697,1450,4.946,1451,1.788,1452,1.788,1453,2.697,1454,1.336,1455,2.697,1456,4.093,1457,2.697,1458,4.093,1459,3.662,1460,4.093,1461,2.697,1462,2.697,1463,2.927,1464,2.697,1465,2.697,1466,2.697,1467,4.946,1468,5.617,1469,3.423,1470,2.697,1471,2.697,1472,1.671,1473,2.606,1474,2.697,1475,4.093,1476,2.697,1477,2.697,1478,2.697,1479,2.927,1480,2.697,1481,4.093,1482,4.093,1483,4.093,1484,4.093,1485,2.697,1486,2.339,1487,2.697,1488,2.697,1489,2.697,1490,2.104,1491,2.697,1492,2.697,1493,2.697,1494,4.093,1495,3.551,1496,2.339,1497,4.093,1498,2.697,1499,1.788,1500,2.697,1501,2.697,1502,2.697,1503,2.697,1504,2.697,1505,4.093,1506,2.697,1507,2.697,1508,1.484,1509,2.339,1510,4.093,1511,2.697,1512,5.634,1513,2.697,1514,2.697,1515,2.697,1516,2.697,1517,2.697,1518,2.697,1519,1.671,1520,2.697,1521,4.093,1522,2.714,1523,2.697,1524,4.093,1525,2.697,1526,2.697,1527,2.697,1528,2.697,1529,4.946,1530,2.697,1531,2.697,1532,2.697,1533,2.697,1534,4.093,1535,2.697,1536,5.522,1537,2.697,1538,2.697,1539,6.494,1540,4.093,1541,4.093,1542,2.697,1543,2.697,1544,4.093,1545,2.697,1546,4.946,1547,6.25,1548,4.946,1549,4.093,1550,4.093,1551,4.093,1552,2.697,1553,2.697,1554,2.697,1555,2.697,1556,5.937,1557,4.093,1558,4.946,1559,2.697,1560,2.697,1561,2.697,1562,2.697,1563,4.093,1564,2.697,1565,2.697,1566,1.788,1567,2.697,1568,4.093,1569,2.697,1570,2.697,1571,2.697,1572,2.697,1573,2.697,1574,4.291,1575,2.697,1576,2.697,1577,4.946,1578,2.697,1579,2.697,1580,4.093,1581,4.093,1582,2.697,1583,2.697,1584,4.093,1585,4.093,1586,4.946,1587,2.697,1588,2.697,1589,2.697,1590,2.697,1591,4.093,1592,2.697,1593,2.697,1594,2.697,1595,2.697,1596,4.093,1597,2.697,1598,2.697,1599,2.129,1600,2.697,1601,2.697,1602,2.697,1603,4.093,1604,2.339,1605,2.697,1606,2.697,1607,2.697,1608,2.697,1609,2.697,1610,2.697,1611,2.697,1612,2.697,1613,2.697,1614,2.697,1615,5.522,1616,2.697,1617,2.697,1618,2.697,1619,2.697,1620,2.697,1621,2.697,1622,2.339,1623,2.697,1624,2.697,1625,2.697,1626,2.697,1627,6.25,1628,2.697,1629,5.937,1630,3.551,1631,2.697,1632,2.697,1633,2.697,1634,1.484,1635,2.697,1636,2.697,1637,2.697,1638,2.697,1639,3.551,1640,2.697,1641,2.697,1642,2.697,1643,4.093,1644,2.697,1645,2.697,1646,2.697,1647,3.066,1648,2.339,1649,2.697,1650,2.697,1651,2.104,1652,4.791,1653,2.697,1654,2.697,1655,2.697,1656,3.68,1657,2.697,1658,2.339,1659,2.697,1660,2.697,1661,4.946,1662,4.093,1663,2.697,1664,2.697,1665,1.571,1666,2.697,1667,2.697,1668,2.697,1669,2.697,1670,2.697,1671,1.788,1672,2.697,1673,2.252,1674,2.697,1675,2.697,1676,1.788,1677,2.697,1678,4.093,1679,2.697,1680,2.697,1681,2.697,1682,2.697,1683,2.697,1684,2.697,1685,1.406,1686,1.725,1687,2.697,1688,4.093,1689,4.093,1690,2.697,1691,2.697,1692,4.946,1693,2.697,1694,2.697,1695,2.339,1696,2.697,1697,2.697,1698,4.093,1699,3.551,1700,2.697,1701,2.697,1702,2.339,1703,2.697,1704,4.093,1705,2.697,1706,2.697,1707,2.697,1708,2.697,1709,2.697,1710,2.697,1711,2.339,1712,2.697,1713,2.697,1714,2.697,1715,2.697,1716,2.697,1717,2.697,1718,1.671,1719,2.697,1720,2.697,1721,2.697,1722,2.697,1723,2.697,1724,5.937,1725,1.788,1726,2.697,1727,2.697,1728,2.697,1729,2.697,1730,1.671,1731,2.697,1732,4.093,1733,2.697,1734,2.697,1735,2.697,1736,2.697,1737,2.697,1738,2.697,1739,2.697,1740,2.697,1741,2.697,1742,2.697,1743,2.697,1744,2.697,1745,2.697,1746,2.697,1747,2.697,1748,2.697,1749,2.697,1750,4.093,1751,2.697,1752,2.697,1753,2.697,1754,2.697,1755,2.697,1756,2.697,1757,2.697,1758,1.788,1759,1.484,1760,2.697,1761,2.697,1762,2.697,1763,2.697,1764,2.697,1765,3.423,1766,1.484,1767,2.697,1768,2.697,1769,4.093,1770,2.697,1771,2.697,1772,4.093,1773,2.697,1774,3.194,1775,2.697,1776,2.697,1777,1.929,1778,2.697,1779,2.697,1780,2.697,1781,2.697,1782,2.697,1783,1.406,1784,2.339,1785,2.697,1786,2.697,1787,2.697,1788,2.697]],["title/interfaces/CustomData.html",[56,0.141,1789,2.418]],["body/interfaces/CustomData.html",[8,0.015,14,0.076,15,0.076,16,0.076,22,0.181,38,0.404,46,0.485,52,0.196,53,0.016,54,0.008,55,0.008,56,0.226,58,0.546,60,1.018,61,1.059,63,2.333,65,1.734,66,2.2,67,1.103,70,2.112,71,3.347,72,1.222,74,0.361,75,0.459,76,0.88,77,3.407,78,2.903,79,1.815,80,3.055,81,3.396,82,0.685,83,0.406,84,0.593,87,0.568,88,0.423,89,1.095,90,1.163,91,1.746,92,1.497,93,0.871,94,0.98,95,0.978,96,1.123,100,0.423,101,0.524,102,1.765,103,1.307,104,1.793,105,1.765,110,1.209,111,2.472,112,2.462,113,2.187,114,2.333,115,1.672,116,0.947,117,0.884,118,0.568,127,2.112,128,1.149,130,2.009,131,2.413,132,2.333,133,1.283,135,1.843,141,1.307,142,1.876,144,0.307,149,0.662,150,2.038,151,1.505,153,1.584,156,0.542,157,0.83,159,1.257,162,1.103,163,0.442,164,0.818,166,1.257,167,2.792,168,3.055,169,1.199,170,0.807,171,1.343,172,2.392,175,2.507,181,1.034,184,0.442,185,0.462,186,1.387,187,1.703,188,1.368,189,1.199,191,1.141,193,2.013,197,1.307,200,0.818,220,1.059,228,2.217,231,1.522,243,2.392,244,1.616,245,2.923,250,1.368,254,0.831,259,1.672,265,2.104,268,1.705,279,0.721,280,2.333,285,0.903,287,2.923,290,1.672,298,1.251,301,1.672,304,2.217,305,1.843,308,0.838,310,1.119,311,1.209,312,1.672,313,1.434,314,0.871,316,2.286,328,1.216,329,1.251,331,1.059,333,0.978,334,1.672,335,2.015,336,0.98,337,1.625,338,1.019,342,0.943,353,1.41,354,0.871,355,1.307,387,1.434,407,0.595,418,1.802,419,1.505,420,1.251,423,1.843,424,1.307,425,1.209,437,2.355,440,1.505,441,0.871,442,0.98,443,1.307,445,1.852,446,2.855,447,1.883,456,1.584,459,1.56,460,0.692,462,1.505,463,1.883,464,3.632,465,2.317,466,1.883,467,3.475,468,0.941,469,1.56,470,1.307,471,1.883,472,1.672,477,2.268,478,1.584,479,1.059,484,1.251,485,1.77,522,2.217,525,1.584,527,3.188,537,1.672,538,2.522,543,0.941,545,1.368,560,1.584,673,1.505,686,1.607,835,1.368,1023,1.584,1035,1.149,1045,2.392,1113,1.434,1126,3.292,1234,2.773,1364,1.059,1369,1.059,1373,1.77,1394,3.632,1421,1.584,1443,1.582,1472,1.883,1519,1.883,1522,2.015,1599,1.307,1634,2.462,1676,2.015,1789,3.871,1790,1.77,1791,2.923,1792,3.2,1793,3.2,1794,2.462,1795,1.584,1796,3.642,1797,2.173,1798,1.584,1799,3.2,1800,2.607,1801,2.507,1802,2.173,1803,2.173,1804,1.434,1805,2.173,1806,2.173,1807,2.173,1808,2.173,1809,2.173,1810,2.173,1811,1.77,1812,2.607,1813,2.173,1814,1.584,1815,2.967,1816,2.173,1817,3.522,1818,2.173,1819,2.173,1820,2.967,1821,2.015,1822,2.173,1823,2.173,1824,2.015,1825,2.923,1826,1.77,1827,2.967,1828,1.77,1829,1.434,1830,2.173,1831,2.173,1832,2.173,1833,2.173,1834,1.883,1835,2.173,1836,2.173,1837,2.173,1838,3.2,1839,2.173,1840,2.173,1841,2.173,1842,2.173,1843,2.173,1844,1.883,1845,2.773,1846,2.967,1847,2.173,1848,2.173,1849,2.173,1850,3.632,1851,2.173,1852,2.173,1853,2.173,1854,3.798,1855,2.173,1856,2.173,1857,2.173,1858,2.173,1859,2.173,1860,3.2,1861,3.2,1862,3.2,1863,2.173,1864,3.2,1865,2.173,1866,1.505,1867,2.173,1868,1.883,1869,2.173,1870,3.798,1871,1.883,1872,2.173,1873,1.584,1874,2.173,1875,3.2,1876,2.173,1877,2.173,1878,1.672,1879,2.173,1880,2.173,1881,2.173,1882,2.173,1883,1.843,1884,2.173,1885,2.173,1886,1.149,1887,2.173,1888,2.173,1889,2.173,1890,2.173,1891,3.2,1892,2.173,1893,2.173,1894,2.173,1895,2.173,1896,2.173,1897,2.173,1898,2.173,1899,2.173,1900,2.173,1901,2.173,1902,2.015,1903,2.173,1904,2.173,1905,3.2,1906,2.173,1907,2.173,1908,2.173,1909,2.173,1910,2.173,1911,1.77,1912,2.173,1913,2.173,1914,2.173,1915,2.173,1916,2.173,1917,2.173,1918,2.173,1919,2.173,1920,2.173,1921,2.173,1922,3.798,1923,2.173,1924,2.173,1925,3.2,1926,2.173,1927,2.173,1928,4.19,1929,2.173,1930,3.271,1931,2.765,1932,4.19,1933,4.19,1934,2.765,1935,2.173,1936,2.173,1937,2.173,1938,4.19,1939,3.188,1940,2.173,1941,2.015,1942,3.798,1943,2.173,1944,3.798,1945,3.2,1946,3.2,1947,3.2,1948,3.2,1949,2.173,1950,2.173,1951,3.798,1952,3.798,1953,2.173,1954,2.112,1955,2.173,1956,2.173,1957,2.173,1958,2.173,1959,2.173,1960,2.173,1961,1.883,1962,1.584,1963,2.173,1964,1.77,1965,2.173,1966,2.173]],["title/components/DataModalComponent.html",[9,1.417,620,0.45]],["body/components/DataModalComponent.html",[7,1.839,8,0.015,9,2.597,10,1.764,14,0.169,15,0.121,16,0.121,17,2.771,22,0.222,24,0.707,31,1.839,36,2.293,38,0.647,46,0.541,48,1.96,52,0.141,53,0.026,54,0.012,55,0.011,66,1.393,74,0.244,75,0.484,76,0.617,79,1.914,82,0.533,83,0.385,84,0.532,87,0.909,88,0.677,89,0.647,90,0.707,96,1.172,99,0.946,100,0.677,101,0.838,116,0.785,117,0.589,144,0.466,149,0.454,163,0.707,184,0.899,185,1.191,336,1.065,338,1.107,342,1.024,381,1.641,392,2.08,394,1.448,407,0.822,408,1.354,541,1.948,620,0.784,621,1.839,622,2.545,623,1.694,624,2.277,625,1.764,626,2.188,630,1.732,631,1.729,642,2.189,648,1.52,689,4.42,699,2.66,700,2.07,701,2.438,702,2.188,703,3.22,704,2.188,708,2.783,709,2.783,710,1.694,711,2.188,712,1.917,713,2.783,714,1.505,715,3.22,716,1.764,717,1.764,718,1.917,719,1.839,720,1.694,721,1.839,722,2.188,723,2.188,724,1.764,725,1.462,726,3.06,727,2.188,728,1.917,729,2.001,730,1.839,731,2.188,732,1.839,733,2.438,734,2.188,735,1.839,736,1.839,737,2.188,738,1.694,739,1.839,740,1.839,741,1.764,742,1.242,743,2.188,744,2.188,763,3.544,848,1.917,877,3.062,943,4.506,1049,3.792,1079,3.367,1086,5.303,1160,2.925,1296,4.86,1332,5.237,1386,2.832,1389,5.896,1395,5.647,1397,4.216,1436,6.205,1439,2.534,1468,5.581,1512,4.216,1639,5.362,1648,5.362,1652,4.216,1658,4.216,1711,4.216,1967,6.162,1968,3.792,1969,6.18,1970,5.896,1971,6.796,1972,6.18,1973,6.796,1974,5.115,1975,4.86,1976,6.406,1977,6.18,1978,4.86,1979,4.86,1980,4.86,1981,4.86,1982,4.86,1983,6.18,1984,4.86,1985,4.86,1986,4.86,1987,5.362,1988,4.86,1989,4.86,1990,4.86,1991,4.86,1992,4.86,1993,3.475,1994,4.86,1995,4.86,1996,4.86]],["title/interfaces/DynamicEdge.html",[56,0.141,1997,2.587]],["body/interfaces/DynamicEdge.html",[8,0.015,14,0.101,15,0.2,16,0.101,22,0.208,38,0.538,46,0.477,52,0.193,53,0.021,54,0.014,55,0.01,56,0.259,58,0.726,60,1.354,61,1.409,70,1.907,72,1.024,74,0.203,75,0.486,82,0.443,83,0.368,84,0.428,87,0.756,88,0.563,89,1.094,90,1.145,91,2.072,92,1.399,94,1.199,95,1.301,96,1.138,97,2.604,99,0.787,100,0.563,104,1.847,105,2.626,106,2.002,110,1.515,116,0.513,121,2.465,130,2.518,131,2.557,133,1.158,135,2.865,141,1.739,142,1.859,144,0.277,146,1.467,148,1.631,149,0.581,150,2.123,156,0.806,157,0.632,162,2.254,164,0.663,166,1.296,169,1.594,170,1.073,171,1.287,172,2.796,177,2.349,181,1.355,184,0.588,185,0.614,186,1.469,187,1.789,189,1.594,191,1.453,193,1.713,200,0.763,220,1.409,223,2.107,224,1.467,230,3.016,231,1.78,254,0.538,256,2.855,279,0.716,285,0.489,291,1.569,293,3.19,294,1.988,298,2.255,305,2.557,308,1.115,310,1.572,311,1.247,313,1.907,314,1.158,316,2.672,320,1.252,328,1.209,329,2.255,330,2.107,335,1.82,336,0.885,337,1.467,338,0.92,342,0.851,353,1.073,354,1.158,355,1.739,357,2.107,358,1.301,359,1.907,407,0.826,416,1.115,418,1.51,437,2.165,439,2.356,440,2.002,441,1.569,442,1.199,443,2.672,446,2.255,456,2.107,457,2.16,459,2.321,465,2.243,467,1.82,468,1.252,469,1.409,479,1.409,482,1.529,488,2.89,511,0.851,522,2.002,526,1.115,543,1.252,560,2.107,636,1.301,683,2.224,686,1.346,830,1.983,841,1.354,860,2.224,1035,2.071,1036,3.849,1118,2.224,1140,1.908,1202,2.002,1364,1.409,1369,1.296,1422,1.739,1425,2.584,1443,1.631,1479,2.89,1599,1.739,1634,2.224,1730,2.505,1783,2.107,1794,3.417,1795,3.238,1796,1.907,1811,2.355,1812,2.355,1814,2.107,1883,1.664,1886,1.529,1997,4.118,1998,2.355,1999,2.002,2000,3.788,2001,2.224,2002,4.445,2003,2.68,2004,2.68,2005,2.68,2006,2.68,2007,2.68,2008,3.89,2009,2.89,2010,3.153,2011,3.153,2012,3.153,2013,3.153,2014,2.505,2015,1.664,2016,2.68,2017,2.68,2018,4.414,2019,3.631,2020,2.855,2021,2.68,2022,4.118,2023,2.68,2024,4.272,2025,2.68,2026,2.68,2027,3.153,2028,2.68,2029,2.68,2030,2.68,2031,1.82,2032,2.68,2033,4.845,2034,2.68,2035,2.68,2036,2.89,2037,4.118,2038,2.68,2039,2.224,2040,2.68,2041,2.68,2042,3.153,2043,2.68,2044,2.68,2045,2.68,2046,2.68,2047,2.68,2048,2.68,2049,2.68,2050,2.68,2051,2.68,2052,4.272,2053,4.272,2054,2.68,2055,2.68,2056,2.68,2057,2.68,2058,2.68,2059,2.68,2060,4.272,2061,3.153,2062,2.505,2063,4.272,2064,3.153,2065,2.68,2066,2.107,2067,3.153,2068,3.153,2069,3.153,2070,2.68,2071,2.68,2072,2.68,2073,3.631,2074,3.631,2075,3.631,2076,3.631,2077,4.272,2078,4.272,2079,2.68,2080,4.272,2081,4.272,2082,3.631]],["title/classes/DynamicEdgeProvider.html",[53,0.021,2017,2.587]],["body/classes/DynamicEdgeProvider.html",[8,0.015,12,0.896,14,0.084,15,0.2,16,0.084,22,0.196,38,0.449,46,0.465,52,0.178,53,0.018,54,0.013,55,0.009,56,0.236,60,1.131,61,2.271,70,1.593,72,1.055,74,0.169,75,0.441,76,0.906,79,1.045,82,0.619,83,0.4,84,0.53,87,0.631,88,0.47,89,1.096,90,1.162,91,2.078,92,1.664,93,1.616,94,1.058,95,1.087,96,1.236,97,2.546,99,0.657,100,0.47,102,3.074,103,1.452,104,1.956,105,2.428,106,1.672,110,1.402,116,0.613,117,0.683,118,0.631,121,2.539,124,2.078,130,2.563,131,2.535,133,0.967,135,2.79,141,1.452,142,1.834,144,0.517,146,1.225,148,1.68,149,0.576,150,2.124,156,0.821,157,0.557,159,0.799,162,2.365,163,0.896,164,0.585,166,1.143,167,1.905,169,1.331,170,0.896,171,1.231,172,2.539,177,2.329,181,1.268,182,2.182,184,0.703,185,1.172,186,1.334,187,1.719,189,1.331,191,1.389,193,1.924,200,0.715,220,1.684,223,1.76,224,1.225,230,2.973,231,1.616,254,0.449,256,2.94,279,0.65,285,0.409,291,1.764,293,2.814,294,1.753,295,1.225,297,1.816,298,1.989,305,2.322,308,0.931,310,1.613,311,1.483,313,1.593,314,1.384,316,2.427,320,1.045,328,1.098,329,2.322,330,2.518,333,1.816,335,1.52,336,0.739,337,1.225,338,0.768,342,0.711,353,1.282,354,1.384,355,1.452,357,1.76,358,1.087,359,1.593,376,1.76,377,2.814,378,1.384,379,2.814,380,2.814,381,1.282,383,2.657,384,2.657,385,2.657,386,2.322,387,2.279,388,1.387,389,2.657,390,2.657,391,1.966,392,2.078,394,2.126,395,1.672,396,4.83,399,2.092,400,1.966,401,2.092,402,2.092,403,2.092,404,2.092,405,2.092,407,1.019,408,1.484,413,1.39,414,2.092,415,1.966,416,1.332,417,1.966,418,1.555,419,1.672,420,1.39,421,1.39,422,0.83,423,1.39,424,1.452,425,0.768,426,2.092,427,1.177,428,1.39,430,2.238,431,1.39,432,2.092,433,1.39,434,2.092,437,2.146,439,2.427,440,2.393,441,1.616,442,1.058,443,2.803,446,2.535,456,1.76,457,2.428,459,2.146,465,2.045,467,2.174,468,1.496,469,1.177,473,2.238,474,2.238,475,2.238,476,1.52,477,1.225,478,1.76,479,1.966,480,2.238,481,2.238,482,1.827,488,2.413,511,0.711,522,1.672,526,0.931,543,1.496,560,1.76,636,1.555,683,1.857,686,1.387,830,1.834,841,1.131,860,2.657,1035,2.329,1036,4.037,1118,1.857,1140,1.764,1202,1.672,1364,1.177,1369,1.143,1422,1.452,1425,2.905,1443,1.439,1479,3.453,1599,1.452,1634,1.857,1730,2.092,1783,2.518,1794,2.657,1795,2.94,1796,1.593,1811,1.966,1812,1.966,1814,1.76,1883,1.39,1886,1.277,1997,3.202,1998,2.814,1999,1.672,2000,3.734,2001,1.857,2002,4.502,2003,2.238,2004,2.238,2005,2.238,2006,2.238,2007,2.238,2008,3.721,2009,2.413,2010,2.633,2011,3.768,2012,3.768,2013,3.768,2014,2.993,2015,1.989,2016,3.202,2017,3.202,2018,4.082,2019,3.202,2020,2.518,2021,2.238,2022,3.739,2023,2.238,2024,4.803,2025,3.739,2026,3.739,2027,2.633,2028,2.238,2029,2.238,2030,2.238,2031,1.52,2032,2.238,2033,4.4,2034,2.238,2035,2.238,2036,2.413,2037,3.739,2038,2.238,2039,1.857,2040,2.238,2041,2.238,2042,2.633,2043,2.238,2044,2.238,2045,2.238,2046,2.238,2047,2.238,2048,2.238,2049,2.238,2050,2.238,2051,2.238,2052,3.768,2053,3.768,2054,2.238,2055,2.238,2056,2.238,2057,2.238,2058,2.238,2059,2.238,2060,3.768,2061,2.633,2062,2.092,2063,3.768,2064,2.633,2065,2.238,2066,1.76,2067,2.633,2068,2.633,2069,2.633,2070,2.238,2071,2.238,2072,2.238,2073,3.202,2074,3.202,2075,3.202,2076,3.202,2077,3.768,2078,3.768,2079,2.238,2080,3.768,2081,3.768,2082,3.202,2083,3.375,2084,3.375,2085,3.375,2086,3.375,2087,2.633]],["title/interfaces/DynamicEdgeType.html",[56,0.141,2002,2.418]],["body/interfaces/DynamicEdgeType.html",[8,0.015,14,0.098,15,0.2,16,0.098,22,0.206,38,0.523,46,0.472,52,0.19,53,0.021,54,0.014,55,0.01,56,0.257,58,0.706,60,1.316,61,1.37,70,2.535,72,1.289,74,0.197,75,0.515,76,0.682,82,0.431,83,0.377,84,0.42,87,0.735,88,0.547,89,1.094,90,1.126,91,2.169,92,1.372,94,1.177,95,1.265,96,1.128,97,2.639,99,0.765,100,0.547,104,1.829,105,2.595,106,1.947,110,1.498,116,0.499,121,2.419,130,2.69,131,2.837,133,1.126,135,3.052,141,2.311,142,1.888,144,0.269,146,1.95,148,1.6,149,0.572,150,2.116,156,0.797,157,0.62,162,2.582,164,0.834,166,1.683,169,1.55,170,1.043,171,1.278,172,2.756,177,2.315,181,1.385,184,0.572,185,0.597,186,1.448,187,1.779,189,1.55,191,1.443,193,1.688,200,0.756,220,1.37,223,2.049,224,1.426,230,3,231,1.754,254,0.523,256,2.801,279,0.706,285,0.476,291,1.54,293,3.13,294,1.95,298,2.212,305,2.52,308,1.084,310,1.562,311,1.223,313,1.854,314,1.126,316,2.634,320,1.217,328,1.192,329,2.52,330,2.049,335,1.769,336,0.861,337,1.426,338,0.895,342,0.828,353,1.043,354,1.126,355,1.691,357,2.049,358,1.265,359,1.854,407,0.916,416,1.084,418,1.084,437,2.294,439,2.311,440,1.947,441,1.54,442,1.441,443,2.634,446,2.212,456,2.049,457,2.119,459,2.294,465,2.087,467,1.769,468,1.217,469,1.37,479,1.37,482,1.486,488,2.81,511,0.828,522,1.947,526,1.084,543,1.217,560,2.801,636,1.265,683,2.956,686,1.321,830,1.96,841,1.316,860,2.162,1035,2.032,1036,3.793,1118,2.162,1140,1.886,1202,1.947,1364,1.37,1369,1.271,1422,1.691,1425,2.535,1443,1.823,1479,2.81,1599,1.691,1634,2.162,1730,2.435,1783,2.049,1794,3.368,1795,2.801,1796,1.854,1811,3.13,1812,3.13,1814,2.801,1883,1.618,1886,1.486,1997,3.562,1998,2.289,1999,1.947,2000,3.86,2001,2.956,2002,4.512,2003,3.562,2004,3.562,2005,4.362,2006,3.562,2007,3.562,2008,3.92,2009,2.81,2010,3.066,2011,3.066,2012,3.066,2013,3.066,2014,2.435,2015,1.618,2016,2.605,2017,2.605,2018,4.362,2019,3.562,2020,2.801,2021,2.605,2022,4.058,2023,2.605,2024,4.191,2025,2.605,2026,2.605,2027,3.066,2028,2.605,2029,2.605,2030,2.605,2031,1.769,2032,2.605,2033,4.775,2034,2.605,2035,2.605,2036,2.81,2037,4.058,2038,2.605,2039,2.162,2040,2.605,2041,2.605,2042,3.066,2043,2.605,2044,2.605,2045,2.605,2046,2.605,2047,2.605,2048,2.605,2049,2.605,2050,2.605,2051,2.605,2052,4.191,2053,4.191,2054,2.605,2055,2.605,2056,2.605,2057,2.605,2058,2.605,2059,2.605,2060,4.191,2061,3.066,2062,2.435,2063,4.191,2064,3.066,2065,2.605,2066,2.049,2067,3.066,2068,3.066,2069,3.066,2070,2.605,2071,2.605,2072,2.605,2073,3.562,2074,3.562,2075,3.562,2076,3.562,2077,4.191,2078,4.191,2079,2.605,2080,4.191,2081,4.191,2082,3.562]],["title/classes/DynamicNodeProvider.html",[53,0.021,2088,2.79]],["body/classes/DynamicNodeProvider.html",[8,0.015,12,0.913,14,0.086,15,0.186,16,0.086,22,0.203,38,0.458,46,0.426,52,0.142,53,0.018,54,0.01,55,0.009,56,0.206,60,1.152,61,2.288,66,1.403,67,2.476,72,1.162,74,0.173,75,0.446,76,0.911,79,1.065,82,0.625,83,0.388,84,0.534,87,0.644,88,0.479,89,1.101,90,1.062,92,1.676,93,1.634,94,1.072,95,1.108,96,1.227,97,2.479,99,0.67,100,0.682,101,0.593,102,3.082,103,1.48,104,1.904,105,2.249,106,1.705,110,1.298,113,2.016,116,0.437,117,0.795,118,0.644,121,2.566,124,2.107,130,2.349,131,2.557,135,2.557,137,2.005,140,1.403,141,1.48,142,1.401,143,1.955,144,0.518,149,0.581,150,2.118,156,0.795,157,0.565,159,0.814,162,2.382,163,0.904,167,1.931,171,1.237,177,2.156,181,1.209,182,2.196,184,0.712,185,1.175,186,1.553,187,1.751,188,2.796,189,1.357,191,1.441,193,1.935,200,0.72,220,1.707,223,1.794,224,1.249,228,1.705,230,2.954,231,1.634,243,2.204,250,3.229,254,0.758,256,2.553,279,0.757,285,0.417,291,1.78,294,1.249,295,1.249,297,1.835,298,1.417,305,2.347,308,0.949,310,1.578,311,0.783,314,1.403,316,2.453,320,1.065,328,1.11,329,1.417,333,1.835,336,0.754,337,1.249,338,0.783,342,0.725,354,1.403,355,1.48,357,1.794,358,1.108,359,1.623,376,1.794,377,2.853,378,1.403,379,2.853,380,2.853,381,1.3,383,2.694,384,2.694,385,2.694,386,2.347,387,2.31,388,1.401,389,2.694,390,2.694,391,2.005,392,2.083,394,2.136,395,1.705,396,4.842,399,2.132,400,2.005,401,2.132,402,2.132,403,2.132,404,2.132,405,2.132,407,1.006,408,1.494,413,1.417,414,3.034,415,2.005,416,0.949,417,2.005,418,1.35,419,1.705,420,1.417,421,1.417,422,0.846,423,1.417,424,1.48,425,0.783,426,2.132,427,1.199,428,1.417,430,2.281,431,1.417,432,2.132,433,1.417,434,2.132,437,2.446,441,1.78,442,0.754,443,2.824,445,2.446,446,2.557,457,2.45,459,2.165,462,2.426,465,2.056,467,2.204,469,1.199,473,2.281,474,2.281,475,2.281,476,1.549,477,1.249,478,1.794,479,1.987,480,2.281,481,2.281,482,1.852,511,0.725,526,0.949,537,3.752,543,1.516,554,2.684,555,1.705,654,1.48,683,1.893,686,1.401,830,1.85,841,1.152,860,2.694,1036,2.132,1140,1.403,1202,1.705,1261,2.46,1364,1.199,1422,2.107,1443,1.458,1599,1.48,1730,2.132,1795,2.553,1796,3.534,1800,2.005,1814,1.794,1826,2.853,1844,2.132,1850,3.849,1886,1.301,1961,2.132,1998,2.853,1999,1.705,2000,3.779,2001,1.893,2003,2.281,2004,2.281,2005,3.779,2006,2.281,2007,2.281,2008,3.805,2014,3.034,2015,2.016,2016,3.246,2018,3.779,2019,3.246,2020,1.794,2021,2.281,2022,3.779,2023,2.281,2025,3.779,2026,3.779,2028,2.281,2029,2.281,2030,2.281,2031,1.549,2032,2.281,2034,2.281,2035,2.281,2037,3.246,2038,2.281,2039,2.694,2040,2.281,2041,2.281,2043,2.281,2044,2.281,2045,2.281,2046,2.281,2047,2.281,2048,2.281,2049,3.779,2050,2.281,2051,2.281,2054,2.281,2055,2.281,2056,2.281,2057,2.281,2058,2.281,2059,2.281,2065,3.246,2066,1.794,2070,2.281,2071,2.281,2072,2.281,2073,2.281,2074,2.281,2075,2.281,2076,2.281,2079,2.281,2082,3.246,2087,2.684,2088,3.501,2089,4.944,2090,3.246,2091,4.247,2092,2.672,2093,3.618,2094,2.31,2095,3.82,2096,4.247,2097,2.553,2098,4.247,2099,4.247,2100,4.247,2101,4.44,2102,3.44,2103,2.984,2104,3.44,2105,2.984,2106,4.247,2107,4.247,2108,2.984,2109,2.984,2110,2.984,2111,2.984,2112,4.944,2113,2.984,2114,4.247,2115,2.984,2116,2.984,2117,2.984,2118,2.984,2119,2.984,2120,2.984,2121,2.984,2122,2.984,2123,2.684,2124,2.684,2125,2.984,2126,4.247,2127,2.984,2128,4.247,2129,2.984,2130,2.984,2131,2.984]],["title/interfaces/DynamicNodeType.html",[56,0.141,2101,2.79]],["body/interfaces/DynamicNodeType.html",[8,0.015,14,0.101,15,0.19,16,0.101,22,0.212,38,0.539,46,0.426,52,0.159,53,0.022,54,0.011,55,0.01,56,0.241,58,0.728,60,1.357,61,1.412,66,1.161,67,2.257,72,1.343,74,0.203,75,0.521,82,0.444,83,0.312,84,0.429,87,0.758,88,0.564,89,1.101,92,1.401,94,1.201,95,1.305,96,1.105,97,2.605,99,0.789,100,0.763,101,0.699,104,1.769,105,2.453,106,2.007,110,1.416,113,1.668,117,0.491,121,2.469,130,2.634,131,2.867,135,3.022,137,3.196,140,1.161,141,2.36,142,1.348,143,2.074,144,0.278,149,0.581,150,2.116,156,0.753,157,0.633,162,2.606,171,1.288,177,2.075,181,1.356,184,0.59,185,0.616,186,1.647,187,1.81,188,2.469,189,1.598,191,1.489,193,1.715,200,0.764,220,1.412,223,2.112,224,1.471,228,2.007,230,2.985,231,1.782,243,2.469,250,3,254,0.827,256,2.112,279,0.803,285,0.491,291,1.572,294,1.471,298,1.668,305,2.56,308,1.117,310,1.467,314,1.161,316,2.676,320,1.255,328,1.211,329,2.258,336,0.887,337,1.471,338,0.922,342,0.853,354,1.161,355,1.743,357,2.112,358,1.305,359,1.912,407,0.886,437,2.502,441,1.782,442,1.201,443,2.676,445,2.559,446,2.258,457,2.164,459,2.323,462,2.007,465,2.14,467,1.824,469,1.412,479,1.412,482,1.533,511,0.853,526,1.117,537,3.421,543,1.255,554,3.161,555,2.007,654,1.743,683,3.018,686,1.348,830,1.985,841,1.357,860,2.229,1036,2.511,1140,1.572,1202,2.007,1261,2.897,1364,1.412,1422,2.36,1443,1.852,1599,1.743,1730,2.511,1795,2.112,1796,3.463,1800,2.361,1814,2.86,1826,2.361,1844,2.511,1850,4.13,1886,1.533,1961,2.511,1998,2.361,1999,2.007,2000,3.749,2001,3.018,2003,3.637,2004,3.637,2005,4.866,2006,3.637,2007,3.637,2008,3.988,2014,2.511,2015,1.668,2016,2.686,2018,4.123,2019,3.637,2020,2.112,2021,2.686,2022,4.123,2023,2.686,2025,2.686,2026,2.686,2028,2.686,2029,2.686,2030,2.686,2031,1.824,2032,2.686,2034,2.686,2035,2.686,2037,3.637,2038,2.686,2039,3.018,2040,2.686,2041,2.686,2043,2.686,2044,2.686,2045,2.686,2046,2.686,2047,2.686,2048,2.686,2049,4.123,2050,2.686,2051,2.686,2054,2.686,2055,2.686,2056,2.686,2057,2.686,2058,2.686,2059,2.686,2065,3.637,2066,2.112,2070,2.686,2071,2.686,2072,2.686,2073,2.686,2074,2.686,2075,2.686,2076,2.686,2079,2.686,2082,3.637,2088,2.897,2089,4.758,2090,2.686,2091,3.514,2092,2.36,2093,3.196,2094,1.912,2095,3.161,2096,3.514,2097,2.112,2098,3.514,2099,3.514,2100,3.514,2101,4.446,2105,3.514,2106,4.758,2107,4.758,2108,3.514,2109,3.514,2110,3.514,2111,3.514,2112,5.394,2113,3.514,2114,4.758,2115,3.514,2116,3.514,2117,3.514,2118,3.514,2119,3.514,2120,3.514,2121,3.514,2122,3.514,2123,3.161,2124,3.161,2125,3.514,2126,4.758,2127,3.514,2128,4.758,2129,3.514,2130,3.514,2131,3.514]],["title/interfaces/Edge.html",[56,0.141,90,0.568]],["body/interfaces/Edge.html",[8,0.015,14,0.083,15,0.083,16,0.083,22,0.206,34,0.855,38,0.445,46,0.445,52,0.201,53,0.018,54,0.009,55,0.009,56,0.257,58,0.601,65,1.274,67,1.742,68,1.506,72,1.05,74,0.308,75,0.529,76,0.609,79,1.899,82,0.781,83,0.394,84,0.64,85,0.923,88,0.668,89,1.095,90,1.184,91,1.934,92,1.658,93,1.995,94,1.343,96,1.104,99,0.651,100,0.668,101,0.577,104,2.015,107,0.923,111,1.265,117,0.743,118,1.147,122,2.065,128,2.123,133,1.375,140,1.608,142,1.893,143,2.218,144,0.445,147,1.265,148,1.934,149,0.666,150,2.066,155,0.855,156,0.743,157,0.882,159,0.792,163,0.698,164,0.786,166,1.78,170,1.49,171,0.577,181,1.194,182,1.545,185,1.189,191,1.411,193,2.136,200,0.673,254,0.445,262,1.439,265,1.807,279,0.647,285,0.405,291,1.861,294,1.214,295,1.214,297,2.334,308,1.324,309,2.175,310,1.011,311,1.621,314,0.959,320,1.486,321,2.264,333,1.077,354,0.959,358,1.974,363,1.375,378,1.375,386,1.377,388,0.822,407,0.864,408,0.733,413,1.377,416,1.324,418,1.548,421,2.673,422,0.822,425,1.621,427,2.137,428,1.377,431,1.377,433,1.377,441,1.375,442,0.733,445,2.137,453,2.311,457,1.893,460,1.278,468,1.036,476,2.761,477,1.742,479,2.137,482,2.456,511,0.705,526,1.919,538,3.119,541,1.375,545,2.527,547,2.64,555,2.378,576,1.841,582,2.907,672,1.893,674,1.579,681,1.742,690,2.64,698,1.841,725,0.792,777,1.956,778,1.807,780,1.88,826,1.121,830,1.826,841,1.121,843,1.439,892,2.331,1080,1.657,1081,1.976,1140,1.608,1169,1.121,1248,2.502,1250,2.502,1251,1.744,1326,2.037,1343,1.579,1369,0.792,1377,1.579,1422,2.065,1425,1.579,1442,1.893,1443,1.826,1508,2.64,1686,1.166,1759,1.841,1801,3.063,1804,2.264,1829,1.579,1883,1.377,1886,1.265,1930,1.579,1931,1.579,1934,2.264,1939,1.579,1954,1.579,2031,1.506,2092,2.065,2097,2.502,2132,1.744,2133,1.841,2134,2.796,2135,2.796,2136,2.525,2137,2.932,2138,1.841,2139,2.64,2140,2.065,2141,2.502,2142,1.949,2143,2.796,2144,1.893,2145,1.949,2146,1.949,2147,1.949,2148,2.796,2149,1.949,2150,1.949,2151,2.648,2152,2.796,2153,1.949,2154,1.949,2155,1.949,2156,1.949,2157,1.841,2158,1.949,2159,1.949,2160,1.949,2161,1.949,2162,1.841,2163,2.065,2164,1.949,2165,1.949,2166,1.32,2167,1.744,2168,1.949,2169,1.841,2170,1.949,2171,1.949,2172,1.949,2173,1.949,2174,1.949,2175,1.949,2176,1.949,2177,1.949,2178,1.949,2179,1.949,2180,1.949,2181,1.949,2182,1.949,2183,1.949,2184,1.949,2185,1.949,2186,1.949,2187,1.949,2188,2.796,2189,2.64,2190,1.949,2191,1.949,2192,1.949,2193,1.949,2194,1.949,2195,1.949,2196,1.949,2197,1.949,2198,1.949,2199,2.796,2200,1.949,2201,1.949,2202,1.949,2203,1.949,2204,2.796,2205,1.949,2206,1.949,2207,1.949,2208,1.949,2209,2.796,2210,2.796,2211,1.949,2212,1.949,2213,1.949,2214,1.949,2215,1.949,2216,2.796,2217,1.949,2218,1.949,2219,1.949,2220,1.949,2221,1.949,2222,3.572,2223,1.949,2224,1.949,2225,1.949,2226,1.949,2227,1.949,2228,1.949,2229,1.949,2230,1.949,2231,1.949,2232,1.949,2233,1.949,2234,1.841,2235,2.796,2236,1.949,2237,2.065,2238,1.949,2239,1.949,2240,2.796,2241,1.976,2242,1.949,2243,1.949,2244,1.949,2245,1.949,2246,2.796,2247,1.949,2248,2.796,2249,1.949,2250,2.796,2251,2.796,2252,1.949,2253,1.949,2254,1.949,2255,1.949,2256,1.949,2257,1.949,2258,1.949,2259,2.796,2260,1.949,2261,1.949,2262,2.796,2263,1.949,2264,1.949,2265,1.949,2266,1.949,2267,1.949,2268,1.949,2269,1.949,2270,1.949,2271,2.796,2272,1.949,2273,1.949,2274,1.949,2275,1.949,2276,1.949,2277,1.949,2278,1.949,2279,1.949,2280,1.949,2281,1.949,2282,1.949,2283,1.949,2284,1.949,2285,1.949,2286,1.949,2287,1.949,2288,1.949,2289,1.949,2290,1.949,2291,2.796,2292,1.949,2293,1.949,2294,1.949,2295,1.949,2296,1.949,2297,1.949,2298,1.949,2299,1.949]],["title/interfaces/EdgeType.html",[56,0.141,91,1.162]],["body/interfaces/EdgeType.html",[8,0.015,14,0.084,15,0.084,16,0.084,22,0.206,34,0.861,38,0.448,46,0.446,52,0.202,53,0.018,54,0.009,55,0.009,56,0.258,58,0.606,65,1.281,67,2.046,68,2.173,72,1.054,74,0.309,75,0.53,76,0.613,79,1.044,82,0.743,83,0.378,84,0.636,85,1.331,88,0.672,89,1.096,90,1.185,91,1.833,92,1.663,93,1.866,94,1.348,96,1.107,99,0.656,100,0.672,101,0.581,104,1.956,107,1.331,111,1.275,117,0.745,118,1.151,122,2.076,128,2.132,133,1.383,140,1.763,142,1.895,143,2.244,144,0.446,147,1.275,148,1.939,149,0.667,150,2.058,155,0.861,156,0.745,157,0.889,159,1.142,163,0.702,164,0.683,166,1.65,170,1.496,171,0.581,181,1.198,182,1.554,185,1.19,191,1.414,193,2.138,200,0.675,254,0.448,262,1.451,265,1.815,279,0.65,285,0.408,291,1.615,294,1.224,295,1.224,297,2.181,308,1.331,309,2.181,310,1.017,311,1.624,314,0.966,320,1.494,321,2.277,333,1.085,354,0.966,358,2.097,363,1.383,378,1.383,386,1.388,388,0.829,398,2.173,407,0.866,408,0.738,413,1.388,416,0.93,418,1.331,421,2.533,422,0.829,425,1.678,427,2.145,428,1.388,431,1.388,433,1.388,441,1.383,442,0.738,445,2.361,453,2.321,457,1.904,460,1.283,468,1.494,476,2.77,477,1.752,479,2.145,482,2.463,511,0.71,526,1.697,538,2.915,541,1.383,545,2.77,547,3.101,555,2.391,576,1.855,582,2.915,672,2.223,674,1.591,681,1.752,690,2.655,698,1.855,725,0.798,777,1.965,778,1.815,780,1.888,826,1.129,830,1.833,841,1.129,843,1.451,892,2.336,1080,1.67,1081,1.388,1140,1.615,1169,1.129,1248,2.516,1250,2.516,1251,1.758,1326,2.046,1343,1.591,1369,0.798,1377,1.591,1422,2.425,1425,2.277,1442,1.904,1443,1.833,1508,2.655,1686,1.175,1759,1.855,1801,3.072,1804,2.277,1829,1.591,1883,1.388,1886,1.275,1930,1.591,1931,1.591,1934,2.277,1939,1.591,1954,1.591,2031,1.518,2092,2.076,2097,2.516,2132,1.758,2133,1.855,2134,1.964,2135,1.964,2136,2.321,2137,2.99,2138,1.855,2139,2.655,2140,2.425,2141,2.938,2142,1.964,2143,2.812,2144,2.223,2145,2.812,2146,3.585,2147,2.812,2148,3.794,2149,1.964,2150,1.964,2151,2.659,2152,2.812,2153,1.964,2154,1.964,2155,1.964,2156,1.964,2157,1.855,2158,1.964,2159,1.964,2160,1.964,2161,1.964,2162,1.855,2163,2.076,2164,1.964,2165,1.964,2166,1.33,2167,1.758,2168,1.964,2169,1.855,2170,1.964,2171,1.964,2172,1.964,2173,1.964,2174,1.964,2175,1.964,2176,1.964,2177,1.964,2178,1.964,2179,1.964,2180,1.964,2181,1.964,2182,1.964,2183,1.964,2184,1.964,2185,1.964,2186,1.964,2187,1.964,2188,2.812,2189,2.655,2190,1.964,2191,1.964,2192,1.964,2193,1.964,2194,1.964,2195,1.964,2196,1.964,2197,1.964,2198,1.964,2199,2.812,2200,1.964,2201,1.964,2202,1.964,2203,1.964,2204,2.812,2205,1.964,2206,1.964,2207,1.964,2208,1.964,2209,2.812,2210,2.812,2211,1.964,2212,1.964,2213,1.964,2214,1.964,2215,1.964,2216,2.812,2217,1.964,2218,1.964,2219,1.964,2220,1.964,2221,1.964,2222,3.585,2223,1.964,2224,1.964,2225,1.964,2226,1.964,2227,1.964,2228,1.964,2229,1.964,2230,1.964,2231,1.964,2232,1.964,2233,1.964,2234,1.855,2235,2.812,2236,1.964,2237,2.076,2238,1.964,2239,1.964,2240,2.812,2241,1.987,2242,1.964,2243,1.964,2244,1.964,2245,1.964,2246,2.812,2247,1.964,2248,2.812,2249,1.964,2250,2.812,2251,2.812,2252,1.964,2253,1.964,2254,1.964,2255,1.964,2256,1.964,2257,1.964,2258,1.964,2259,2.812,2260,1.964,2261,1.964,2262,2.812,2263,1.964,2264,1.964,2265,1.964,2266,1.964,2267,1.964,2268,1.964,2269,1.964,2270,1.964,2271,2.812,2272,1.964,2273,1.964,2274,1.964,2275,1.964,2276,1.964,2277,1.964,2278,1.964,2279,1.964,2280,1.964,2281,1.964,2282,1.964,2283,1.964,2284,1.964,2285,1.964,2286,1.964,2287,1.964,2288,1.964,2289,1.964,2290,1.964,2291,2.812,2292,1.964,2293,1.964,2294,1.964,2295,1.964,2296,1.964,2297,1.964,2298,1.964,2299,1.964]],["title/interfaces/FacetChartDataPoint.html",[56,0.141,2300,2.79]],["body/interfaces/FacetChartDataPoint.html",[8,0.015,14,0.107,15,0.107,16,0.107,22,0.224,24,0.624,34,1.096,38,0.571,42,1.437,46,0.468,48,1.937,52,0.165,53,0.023,54,0.014,55,0.01,56,0.155,58,0.771,74,0.321,75,0.446,81,2.025,82,0.702,83,0.286,84,0.61,85,1.958,86,3.066,87,0.803,88,0.597,96,1.237,99,0.835,100,0.793,101,0.74,110,1.457,116,0.901,117,0.916,140,1.23,143,1.698,144,0.391,146,1.558,149,0.638,155,2.035,156,0.775,157,0.919,163,0.624,171,0.74,175,2.025,176,2.126,181,0.835,182,2.061,184,0.829,186,1.349,196,1.23,197,1.846,200,0.817,219,2.659,244,1.572,254,0.758,268,1.055,279,0.657,289,1.767,297,1.382,300,2.361,328,1.421,336,0.94,338,0.977,342,1.201,344,1.558,349,2.025,353,1.139,378,1.23,381,1.139,388,1.401,407,0.851,422,1.055,425,0.977,442,0.94,453,1.767,494,1.055,511,0.904,518,3.348,580,1.767,620,0.657,629,1.456,630,0.904,631,1.348,648,1.055,654,1.846,663,1.76,686,1.055,724,1.558,725,1.349,747,2.754,749,2.972,758,2.347,762,1.846,763,2.126,775,2.882,780,2.144,798,2.845,800,1.329,801,1.765,803,1.909,828,2.636,843,1.846,846,1.846,848,1.693,849,1.846,850,1.767,876,2.237,877,3.689,885,2.845,892,2.629,909,2.025,933,3.348,972,3.321,1018,2.935,1073,2.754,1078,2.025,1113,2.025,1230,1.767,1323,4.136,1326,2.324,1331,2.361,1333,3.321,1335,3.779,1336,2.845,1347,2.845,1356,2.845,1357,2.845,1359,2.845,1360,2.845,1369,1.015,1391,3.337,1442,1.693,1469,2.659,1473,2.025,1490,4.447,1673,3.136,1686,1.496,1834,2.659,1868,2.659,1871,2.659,1873,2.237,2166,1.693,2300,4.577,2301,3.348,2302,3.068,2303,3.348,2304,3.068,2305,4.944,2306,3.722,2307,3.722,2308,3.722,2309,3.722,2310,3.722,2311,3.722,2312,3.722,2313,3.722,2314,3.722,2315,3.722,2316,2.126,2317,3.722,2318,2.845,2319,2.453,2320,2.126,2321,2.126,2322,3.722,2323,3.722,2324,3.722,2325,3.722,2326,3.722,2327,3.722,2328,4.944,2329,3.722,2330,3.722,2331,2.659,2332,3.722,2333,4.944,2334,4.944,2335,3.722,2336,3.722,2337,3.722,2338,3.722,2339,2.361,2340,3.722,2341,3.722,2342,3.722,2343,3.722,2344,3.722,2345,3.722,2346,3.722,2347,4.944,2348,3.779,2349,4.944,2350,3.722,2351,3.722,2352,3.348,2353,3.722,2354,3.722,2355,2.659,2356,3.722,2357,3.722,2358,3.722,2359,2.5,2360,3.722,2361,3.722,2362,3.722,2363,3.722,2364,3.722,2365,3.722,2366,3.722,2367,3.722,2368,3.722,2369,3.722,2370,3.722,2371,3.722,2372,3.722,2373,3.722,2374,3.722,2375,4.944,2376,3.722,2377,3.722,2378,4.944,2379,3.722,2380,3.722,2381,3.722,2382,3.722,2383,3.722,2384,3.722,2385,3.722,2386,3.722,2387,3.722,2388,2.845,2389,3.722,2390,3.722,2391,3.722,2392,4.944,2393,3.722,2394,2.659,2395,3.722,2396,3.722,2397,3.722,2398,3.722,2399,3.722,2400,3.722,2401,3.722,2402,3.722,2403,3.722,2404,3.722,2405,3.722,2406,3.722,2407,3.722,2408,3.722,2409,4.944,2410,3.722,2411,3.722,2412,3.722,2413,3.722,2414,4.944,2415,3.722,2416,3.722,2417,3.722]],["title/interfaces/FacetDateConfig.html",[56,0.141,832,2.587]],["body/interfaces/FacetDateConfig.html",[8,0.015,14,0.108,15,0.108,16,0.108,22,0.228,24,0.634,29,2.398,38,0.58,42,1.46,46,0.299,48,1.712,52,0.187,53,0.023,54,0.013,55,0.011,56,0.208,58,0.783,65,1.529,74,0.219,75,0.451,82,0.842,83,0.344,84,0.607,85,2.182,86,2.825,87,0.815,88,0.607,96,1.163,97,1.929,98,2.815,99,0.849,100,0.802,101,0.752,107,1.588,110,1.468,116,0.985,117,0.697,118,1.077,126,3.169,144,0.299,149,0.538,155,1.648,156,0.946,157,0.845,164,0.528,166,1.031,184,0.634,185,0.98,186,1.031,187,1.795,196,1.249,200,0.833,203,2.056,204,2.056,205,2.056,224,1.582,254,0.766,268,1.071,279,0.744,285,0.697,289,1.794,328,1.256,331,1.519,336,0.955,338,0.992,342,0.918,388,1.416,422,1.416,425,0.992,460,1.311,494,1.071,511,0.918,620,0.664,629,1.471,630,0.918,631,0.918,648,1.071,663,1.779,710,1.519,714,1.35,742,1.753,745,2.272,746,3.116,747,2.478,748,3.818,749,3.003,750,2.949,751,1.519,752,3.4,753,3.4,754,1.962,755,3.4,756,3.4,757,3.569,758,2.656,759,2.159,762,1.875,763,2.159,766,4.493,767,4.493,768,4.493,769,5.032,770,4.493,771,4.493,772,2.853,775,2.904,776,4.612,777,2.249,778,2.077,779,5.032,780,2.161,781,2.593,783,2.398,795,3.4,796,1.582,798,2.89,800,1.35,801,1.783,803,1.929,806,3.4,808,3.4,810,3.998,813,4.612,815,4.118,819,2.272,824,3.116,825,5.032,826,1.46,827,3.4,828,2.371,829,3.4,830,1.298,831,2.539,832,3.818,833,3.4,834,3.4,835,1.962,836,2.89,837,5.032,838,3.4,839,3.4,840,2.701,841,1.46,842,2.539,843,1.875,844,3.4,845,3.4,846,1.875,847,3.4,848,1.719,849,1.875,850,1.794,851,3.4,852,4.493,853,4.493,854,4.493,855,3.4,856,3.4,857,3.116,858,3.116,859,3.4,860,3.169,861,4.493,862,3.4,863,3.4,864,3.4,865,3.4,866,2.159,867,3.4,868,3.4,869,3.4,870,4.493,871,3.4,872,3.4,873,3.4,874,3.4,875,3.4,876,2.272,877,3.196,878,3.4,879,3.4,880,3.4,881,3.4,882,3.116,883,3.4,884,3.4,885,2.89,886,3.4,887,3.4,888,3.4,889,3.4,890,4.493,891,3.116,892,2.299,893,3.4,894,3.116,895,3.4,896,3.4,897,3.4,898,3.4,899,2.539,900,3.758,901,2.539,902,3.4,903,3.4,904,3.4,905,3.549,906,2.159,907,2.539,908,3.4,909,2.056,910,2.539,911,3.116,912,3.4,913,3.4,914,2.539,915,3.4,916,2.539,917,2.539,918,3.4,919,3.4,920,3.116,921,3.4,922,3.4,923,3.4,924,3.4,925,3.4,926,2.056,927,3.4]],["title/interfaces/FacetDateParams.html",[56,0.141,748,2.587]],["body/interfaces/FacetDateParams.html",[8,0.015,14,0.105,15,0.105,16,0.105,22,0.226,24,0.613,29,2.319,38,0.561,42,1.412,46,0.289,48,1.684,52,0.184,53,0.022,54,0.013,55,0.01,56,0.204,58,0.757,65,1.495,74,0.212,75,0.441,76,1.005,82,0.888,83,0.383,84,0.619,85,2.201,86,2.788,87,0.789,88,0.587,96,1.152,97,1.887,98,2.784,99,0.821,100,0.784,101,0.727,107,1.554,110,1.282,116,0.979,117,0.682,118,1.054,126,3.099,144,0.289,149,0.527,155,1.621,156,0.941,157,0.837,164,0.51,166,0.997,184,0.613,185,0.964,186,0.997,187,1.782,196,1.208,200,0.826,203,1.989,204,1.989,205,1.989,224,1.53,254,0.749,268,1.036,279,0.732,285,0.682,289,1.736,328,1.235,331,1.469,336,0.923,338,0.96,342,0.888,388,1.385,422,1.385,425,0.96,460,1.282,494,1.036,511,0.888,620,0.65,629,1.439,630,0.888,631,0.888,648,1.036,663,1.769,710,1.469,714,1.305,742,1.73,745,2.198,746,3.014,747,2.424,748,4.206,749,2.937,750,2.925,751,1.469,752,3.289,753,3.289,754,1.898,755,3.289,756,3.289,757,3.491,758,2.612,759,2.088,762,1.814,763,2.088,766,5.506,767,5.506,768,5.506,769,5.665,770,5.506,771,5.506,772,3.496,775,2.856,776,4.536,777,2.212,778,2.043,779,4.95,780,2.125,781,2.536,783,2.319,795,3.289,796,1.53,798,2.795,800,1.305,801,1.744,803,1.887,806,3.289,808,3.289,810,3.945,813,4.536,815,4.028,819,2.222,824,3.014,825,4.395,826,1.412,827,3.289,828,2.319,829,3.289,830,1.256,831,2.456,832,2.795,833,3.289,834,3.289,835,1.898,836,2.795,837,4.95,838,3.289,839,3.289,840,2.612,841,1.412,842,2.456,843,1.814,844,3.289,845,3.289,846,1.814,847,3.289,848,1.663,849,1.814,850,1.736,851,3.289,852,4.395,853,4.395,854,4.395,855,3.289,856,3.289,857,3.014,858,3.014,859,3.289,860,3.099,861,4.395,862,3.289,863,3.289,864,3.289,865,3.289,866,2.088,867,3.289,868,3.289,869,3.289,870,4.395,871,3.289,872,3.289,873,3.289,874,3.289,875,3.289,876,2.198,877,3.143,878,3.289,879,3.289,880,3.289,881,3.289,882,3.014,883,3.289,884,3.289,885,2.795,886,3.289,887,3.289,888,3.289,889,3.289,890,4.395,891,3.014,892,2.268,893,3.289,894,3.014,895,3.289,896,3.289,897,3.289,898,3.289,899,2.456,900,3.696,901,2.456,902,3.289,903,3.289,904,3.289,905,3.49,906,2.088,907,2.456,908,3.289,909,1.989,910,2.456,911,3.014,912,3.289,913,3.289,914,2.456,915,3.289,916,2.456,917,2.456,918,3.289,919,3.289,920,3.014,921,3.289,922,3.289,923,3.289,924,3.289,925,3.289,926,1.989,927,3.289]],["title/components/FacetNgxChart.html",[620,0.45,724,1.417]],["body/components/FacetNgxChart.html",[7,1.296,8,0.015,9,1.244,10,1.244,14,0.142,15,0.085,16,0.085,17,1.194,22,0.214,24,0.499,31,1.296,34,0.875,38,0.456,42,1.148,46,0.491,48,2.062,52,0.141,53,0.018,54,0.014,55,0.009,56,0.124,66,0.982,74,0.285,75,0.382,76,0.832,81,1.617,82,0.747,83,0.392,84,0.616,85,1.976,86,3.002,87,0.641,88,0.477,89,0.456,90,0.499,96,1.199,99,0.667,100,0.68,101,0.591,110,1.295,116,0.89,117,0.915,140,1.399,143,1.846,144,0.507,146,1.772,149,0.58,155,1.947,156,0.793,157,0.891,163,0.953,171,0.591,175,1.617,176,2.818,181,0.951,182,1.831,184,0.828,186,1.155,196,0.982,197,2.101,200,0.769,219,2.123,244,1.569,254,0.649,268,0.842,279,0.563,289,1.411,297,1.572,300,1.885,328,1.42,336,0.75,338,0.78,342,1.028,344,1.244,349,1.617,353,0.909,378,1.399,381,1.51,388,1.398,392,2.117,394,1.952,407,1.034,408,1.358,422,1.2,425,0.78,442,0.75,453,2.01,494,1.2,511,0.722,518,2.673,580,1.411,620,0.656,621,1.296,622,2.01,623,1.194,625,1.244,626,1.543,629,1.453,630,1.68,631,1.684,648,1.2,653,2.101,654,2.447,663,1.684,686,0.842,699,2.101,700,1.635,701,1.926,702,1.543,703,2.791,704,1.543,708,2.198,709,2.198,710,1.194,711,1.543,712,1.352,713,2.198,714,1.061,715,2.791,716,1.244,717,1.244,718,1.352,719,1.296,720,1.194,721,1.296,722,1.543,723,1.543,724,2.25,725,1.907,726,2.561,727,1.543,728,1.352,729,1.411,730,1.296,731,1.543,732,1.296,733,1.926,734,1.543,735,1.296,736,1.296,737,1.543,738,1.194,739,1.296,740,1.296,741,1.244,742,0.875,743,1.543,744,1.543,747,2.667,749,2.965,758,2.552,761,4.235,762,2.667,763,3.071,773,3.025,774,2.972,775,3.066,780,2.348,798,3.237,800,1.512,801,1.919,803,2.195,822,2.673,828,2.342,843,1.474,846,1.474,848,1.352,849,1.474,850,1.411,876,1.786,877,3.472,885,2.272,892,2.531,909,1.617,933,2.673,972,3.611,1018,2.819,1073,2.667,1078,1.617,1113,1.617,1230,1.411,1323,4.174,1326,2.544,1331,1.885,1333,3.314,1335,4.11,1336,3.237,1339,2.101,1347,2.272,1356,2.272,1357,2.272,1359,2.272,1360,3.771,1369,0.811,1384,2.844,1391,3.654,1442,1.352,1469,2.123,1473,1.617,1490,4.836,1673,3.41,1686,1.194,1834,2.123,1868,2.123,1871,2.123,1873,1.786,2166,1.926,2300,4.067,2301,6.238,2302,5.717,2303,2.673,2304,2.45,2305,5.377,2306,4.235,2307,2.972,2308,4.933,2309,4.235,2310,4.933,2311,4.235,2312,4.933,2313,2.972,2314,2.972,2315,2.972,2316,1.698,2317,2.972,2318,2.272,2319,2.447,2320,1.698,2321,1.698,2322,2.972,2323,2.972,2324,2.972,2325,2.972,2326,2.972,2327,2.972,2328,4.235,2329,2.972,2330,2.972,2331,2.123,2332,2.972,2333,4.235,2334,4.235,2335,4.235,2336,5.377,2337,4.235,2338,2.972,2339,1.885,2340,2.972,2341,2.972,2342,4.235,2343,5.377,2344,2.972,2345,2.972,2346,2.972,2347,4.235,2348,3.237,2349,4.235,2350,2.972,2351,2.972,2352,2.673,2353,2.972,2354,2.972,2355,2.123,2356,2.972,2357,2.972,2358,2.972,2359,1.996,2360,2.972,2361,2.972,2362,2.972,2363,2.972,2364,2.972,2365,2.972,2366,2.972,2367,2.972,2368,2.972,2369,2.972,2370,2.972,2371,2.972,2372,2.972,2373,2.972,2374,2.972,2375,4.235,2376,2.972,2377,2.972,2378,4.235,2379,2.972,2380,2.972,2381,2.972,2382,2.972,2383,2.972,2384,2.972,2385,2.972,2386,2.972,2387,2.972,2388,3.237,2389,4.235,2390,4.235,2391,4.235,2392,4.235,2393,2.972,2394,2.123,2395,2.972,2396,2.972,2397,2.972,2398,2.972,2399,2.972,2400,2.972,2401,2.972,2402,4.235,2403,2.972,2404,2.972,2405,2.972,2406,2.972,2407,2.972,2408,4.235,2409,4.235,2410,2.972,2411,2.972,2412,2.972,2413,2.972,2414,4.235,2415,2.972,2416,5.377,2417,2.972,2418,4.881,2419,3.426,2420,3.426,2421,3.426,2422,3.426,2423,3.426,2424,3.426,2425,3.426,2426,3.426,2427,3.426,2428,3.426,2429,3.426,2430,3.426,2431,3.426,2432,3.426,2433,3.426,2434,3.426,2435,3.426,2436,3.426,2437,3.426,2438,3.426,2439,3.426,2440,3.426,2441,3.426]],["title/components/FacetWrapperComponent.html",[10,1.417,620,0.45]],["body/components/FacetWrapperComponent.html",[7,1.677,8,0.015,9,1.61,10,2.508,14,0.162,15,0.11,16,0.11,17,2.816,22,0.217,24,0.645,31,2.461,42,1.485,46,0.304,48,2.154,52,0.128,53,0.024,54,0.014,55,0.011,66,1.271,74,0.223,75,0.456,76,0.826,82,0.824,83,0.382,84,0.576,85,2.031,87,0.83,88,0.617,89,0.59,90,0.645,99,0.863,100,0.811,101,0.765,116,0.74,118,0.83,144,0.522,156,0.705,157,0.889,159,1.539,191,1.5,200,0.714,265,1.876,268,1.699,309,1.951,319,1.749,349,2.749,381,1.546,392,2.131,394,1.938,407,0.955,408,1.425,425,1.634,549,3.46,620,0.75,621,1.677,622,2.399,623,2.031,624,2.179,625,1.61,626,3.38,630,1.72,631,1.733,633,2.461,637,2.095,699,2.507,700,1.951,701,2.298,702,1.997,703,3.111,704,1.997,708,2.623,709,2.623,710,1.546,711,1.997,712,1.749,713,2.623,714,1.373,715,3.111,716,1.61,717,1.61,718,1.749,719,1.677,720,1.546,721,1.677,722,1.997,723,1.997,724,1.61,725,1.378,726,2.929,727,1.997,728,1.749,729,1.826,730,1.677,731,1.997,732,1.677,733,2.298,734,1.997,735,1.677,736,1.677,737,1.997,738,1.546,739,1.677,740,1.677,741,1.61,742,1.133,743,1.997,744,1.997,773,3.61,775,3.231,780,2.404,882,3.171,905,3.579,920,4.94,926,2.749,940,6.389,997,2.929,1197,5.643,1199,5.643,1200,5.643,1343,2.749,1414,3.46,1417,4.545,1418,5.993,1423,3.847,1439,2.312,1459,2.94,1468,4.545,1604,5.053,1656,4.565,2442,6.964,2443,3.847,2444,6.504,2445,6.504,2446,4.652,2447,6.504,2448,7.364,2449,6.504,2450,5.824,2451,5.824,2452,6.908,2453,6.908,2454,5.824,2455,5.824,2456,7.364,2457,4.434,2458,5.824,2459,6.908,2460,4.434,2461,4.434,2462,4.434,2463,5.824,2464,4.434,2465,4.434,2466,4.434,2467,4.434,2468,4.434,2469,4.434,2470,4.434,2471,4.434,2472,4.434,2473,4.434,2474,2.94,2475,4.434,2476,4.434,2477,4.434,2478,4.434,2479,4.434,2480,4.434,2481,4.434,2482,4.434,2483,4.434,2484,5.824,2485,4.434,2486,4.434,2487,4.434,2488,4.434,2489,4.434,2490,4.434,2491,4.434,2492,4.434,2493,4.434,2494,4.434,2495,4.434,2496,4.434,2497,4.434,2498,2.748,2499,4.434,2500,4.434,2501,4.434,2502,4.434]],["title/modules/FinanceModule.html",[0,1.933,2503,2.79]],["body/modules/FinanceModule.html",[2,2.668,3,3.142,8,0.015,11,2.433,12,1.573,13,2.44,14,0.147,15,0.147,16,0.147,20,3.639,21,3.639,22,0.233,23,3.639,24,0.862,25,3.639,26,3.09,33,3.639,34,1.514,35,4.325,36,2.796,37,4.325,38,0.788,50,3.639,52,0.171,53,0.031,54,0.013,55,0.013,732,3.099,733,2.753,735,3.099,1224,4.907,1285,5.141,1286,3.261,2503,5.858,2504,5.141,2505,5.141,2506,5.925,2507,5.141,2508,5.925,2509,4.624,2510,4.624,2511,5.925]],["title/modules/FusionChartsModule.html",[0,1.933,2512,2.79]],["body/modules/FusionChartsModule.html",[2,3.137,3,3.137,8,0.015,11,2.429,12,1.569,13,2.433,14,0.147,15,0.147,16,0.147,20,3.633,21,3.633,22,0.237,23,3.633,24,0.86,25,3.633,26,3.081,32,3.918,33,3.633,34,1.51,35,4.318,36,2.788,50,3.081,52,0.171,53,0.031,54,0.013,55,0.013,285,0.716,728,3.231,729,2.433,977,2.749,1004,2.433,1005,2.331,1018,2.543,1229,4.62,1230,2.433,1331,3.834,2304,4.226,2512,5.755,2513,5.126,2514,5.126,2515,5.126,2516,5.909,2517,6.966,2518,6.638,2519,5.126,2520,5.909,2521,6.966,2522,5.909,2523,6.966,2524,5.909,2525,5.909,2526,5.909,2527,5.909]],["title/modules/GoogleMapsModule.html",[0,1.933,2528,2.79]],["body/modules/GoogleMapsModule.html",[2,2.722,3,3.18,8,0.015,11,2.462,12,1.605,13,2.49,14,0.15,15,0.15,16,0.15,20,3.682,21,3.682,22,0.234,23,3.682,24,0.88,25,3.682,26,3.152,33,3.682,34,1.545,37,4.377,38,0.804,41,5.05,42,2.025,50,3.152,52,0.175,53,0.032,54,0.013,55,0.013,730,3.106,1229,4.682,1230,2.49,2528,5.738,2529,5.245,2530,5.245,2531,5.245,2532,6.045,2533,7.061,2534,4.717,2535,6.045]],["title/interfaces/HeatmapItem.html",[56,0.141,991,2.79]],["body/interfaces/HeatmapItem.html",[8,0.015,14,0.112,15,0.112,16,0.112,22,0.17,24,0.654,32,2.98,46,0.494,52,0.17,53,0.024,54,0.011,55,0.011,56,0.163,58,0.807,72,0.841,74,0.226,75,0.46,76,0.746,82,0.791,83,0.371,84,0.618,107,1.621,116,0.832,117,0.841,140,1.288,149,0.549,151,2.227,155,1.501,160,2.785,164,0.935,166,1.643,171,1.129,184,0.654,200,0.855,230,1.773,244,1.239,254,0.598,268,1.772,279,0.678,289,1.851,308,1.239,309,1.968,331,1.567,344,2.377,353,1.193,394,2.069,422,1.105,452,2.618,460,1.023,470,1.934,484,1.851,494,1.105,541,1.288,543,1.82,580,2.696,620,0.678,623,1.567,629,1.501,630,0.947,631,0.947,633,1.7,635,2.223,636,2.108,637,1.447,642,1.447,648,1.105,653,2.817,663,1.809,672,1.773,684,1.631,686,1.105,700,1.505,716,1.631,719,2.223,751,1.567,796,2.133,803,1.505,877,2.911,892,1.505,945,3.506,946,3.424,947,3.898,948,3.898,949,3.898,950,3.424,951,3.424,952,3.898,953,2.618,954,2.618,955,2.618,956,2.618,957,2.618,958,2.618,960,4.501,961,2.618,962,4.451,963,2.618,964,5.097,966,3.424,970,3.898,971,5.097,972,2.618,973,3.898,974,1.934,975,5.097,976,5.097,977,1.773,978,5.097,980,3.898,981,3.898,983,3.441,985,2.618,987,3.506,989,3.898,991,5.286,993,2.618,994,2.773,997,2.023,998,2.42,999,3.244,1000,2.023,1004,2.42,1005,1.773,1007,2.618,1010,2.583,1013,3.898,1015,3.424,1016,3.898,1017,3.424,1018,2.529,1019,3.898,1020,5.097,1021,3.898,1022,3.414,1023,2.343,1024,3.328,1025,2.618,1026,3.898,1027,3.898,1028,5.097,1032,3.506,1035,2.223,1039,3.898,1040,3.898,1041,3.898,1043,3.898,1044,2.98,1045,2.023,1046,5.097,1065,5.418,1067,3.424,1071,2.583,1072,2.911,1073,2.988,1074,3.898,1075,3.898,1076,2.227,1077,3.898,1078,2.121,1079,2.911,1080,2.227,1081,2.42,1082,2.618,1083,2.618,1084,2.42,1085,2.98,1086,3.506,1087,3.898,1088,5.097,1089,5.097,1090,3.898,1091,3.898,1092,3.898,1093,3.898,1094,3.898,1095,3.898,1096,3.898,1097,3.898,1098,3.898,1099,2.618,1100,3.898,1101,3.424,1102,3.815,1103,2.618,1104,2.618,1105,2.618,1106,3.898,1107,2.618,1108,2.618,1109,2.618,1110,3.898,1111,3.898,1112,3.898,1113,2.121,1114,2.343,1115,2.618,1116,3.898,1117,2.98,1118,2.473,1119,2.98,1120,2.618,1121,2.618,1122,2.618,1123,2.618,1124,2.618,1125,3.898,1126,2.785,1127,2.785,1128,3.898,1129,3.898,1130,3.898,1131,3.898,1132,3.896,1133,3.898,1134,3.898,1135,3.898,1136,3.898,1137,3.898,1138,3.898,1139,3.898,1140,1.684,1141,3.064,1142,3.898,1143,3.898,1144,2.98,1145,3.506,1146,3.506,1147,3.898,1148,2.98,1149,2.785,1150,5.097,1151,5.097,1152,2.646,1153,5.097,1154,3.898,1155,3.898,1156,2.618,1157,3.898,1158,3.898,1159,2.618,1160,1.934,1161,3.233,1162,2.618,1163,2.618,1164,3.424,1165,3.424,1166,3.424,1167,2.618,1168,2.618,1169,1.505,1170,2.618,1171,2.618,1172,3.898,1173,3.898,1174,5.68,1175,5.097,1176,5.097,1177,3.898,1178,3.506,1179,3.898,1180,3.898,1181,3.898,1182,3.898]],["title/components/MapComponent.html",[620,0.45,730,1.476]],["body/components/MapComponent.html",[7,1.442,8,0.015,9,1.384,10,1.384,14,0.175,15,0.095,16,0.095,17,1.329,22,0.213,24,0.555,31,1.442,38,0.507,42,1.277,46,0.261,48,1.917,52,0.11,53,0.02,54,0.014,55,0.01,65,1.012,66,1.093,74,0.191,75,0.412,76,0.917,82,0.577,83,0.404,84,0.508,87,0.713,88,0.531,89,0.507,90,0.555,96,1.185,98,1.504,99,0.742,100,0.531,110,1.198,116,0.484,117,0.853,118,0.713,119,2.895,140,1.508,144,0.54,149,0.563,156,0.637,163,1.051,164,0.825,184,0.766,185,1.135,191,1.265,197,1.641,200,0.748,229,3.489,254,0.507,279,0.44,285,0.462,308,1.052,310,1.108,328,1.173,336,1.152,337,1.384,338,1.198,342,1.108,353,1.397,381,1.397,392,2.143,394,2.03,395,1.889,407,0.907,408,1.493,416,1.052,422,1.294,425,1.479,437,2.265,442,1.152,465,2.237,494,1.294,620,0.695,621,1.442,622,2.167,623,1.329,624,1.763,625,1.384,626,1.717,629,1.539,630,1.697,631,1.694,636,1.228,642,2.195,648,1.294,650,3.387,653,2.264,654,2.264,663,1.644,681,1.91,699,2.264,700,1.763,701,2.076,702,1.717,703,2.925,704,1.717,708,2.369,709,2.369,710,1.329,711,1.717,712,1.504,713,2.369,714,1.181,715,2.925,716,1.384,717,1.384,718,1.504,719,1.442,720,1.329,721,1.442,722,1.717,723,1.717,724,1.384,725,1.245,726,2.713,727,1.717,728,1.504,729,1.57,730,2.457,731,1.717,732,1.442,733,2.076,734,1.717,735,1.442,736,1.442,737,1.717,738,1.329,739,1.442,740,1.442,741,1.384,742,0.974,743,1.717,744,1.717,747,2.593,758,1.57,773,3.261,775,3.404,777,2.636,778,2.405,796,2.745,800,1.181,801,1.866,803,1.277,822,2.975,826,1.277,830,2.367,846,1.641,848,1.504,849,1.641,850,1.57,979,4.105,1004,2.675,1005,2.563,1010,2.377,1025,3.066,1035,2.457,1071,2.076,1073,1.641,1076,2.607,1080,1.889,1169,1.277,1202,2.985,1298,6.113,1442,1.504,1443,1.567,1472,2.363,1473,1.799,1622,4.564,1685,1.988,1686,1.329,1845,3.261,1846,3.489,2234,2.895,2237,2.264,2316,2.985,2319,1.641,2320,1.889,2321,1.889,2352,2.975,2534,2.975,2536,3.307,2537,5.261,2538,5.261,2539,7.358,2540,6.024,2541,6.024,2542,6.024,2543,6.024,2544,6.024,2545,6.495,2546,5.261,2547,5.261,2548,5.261,2549,6.024,2550,6.024,2551,5.226,2552,3.812,2553,5.261,2554,5.261,2555,3.812,2556,5.261,2557,6.815,2558,3.812,2559,6.495,2560,6.495,2561,6.815,2562,3.812,2563,3.812,2564,4.564,2565,5.261,2566,3.812,2567,3.812,2568,5.261,2569,3.812,2570,5.261,2571,5.261,2572,3.812,2573,3.812,2574,5.261,2575,6.815,2576,3.812,2577,5.261,2578,3.812,2579,5.261,2580,6.495,2581,7.046,2582,3.812,2583,3.812,2584,3.812,2585,3.812,2586,3.812,2587,3.812,2588,5.261,2589,3.812,2590,5.261,2591,5.261,2592,3.812,2593,5.261,2594,5.261,2595,3.812,2596,5.226,2597,6.495,2598,3.812,2599,3.812,2600,4.105,2601,3.812,2602,3.261,2603,3.812,2604,2.895,2605,3.812,2606,3.812,2607,2.528,2608,5.261,2609,3.812,2610,3.812,2611,3.812,2612,5.261,2613,3.812,2614,3.812,2615,3.812,2616,3.812,2617,5.261,2618,3.812,2619,3.812,2620,6.024,2621,3.812,2622,3.812,2623,3.812,2624,3.812,2625,5.261,2626,6.024,2627,5.261,2628,5.261,2629,3.307,2630,3.812,2631,5.261,2632,6.495,2633,3.812,2634,5.261,2635,3.812,2636,3.812,2637,3.812,2638,3.812,2639,5.261,2640,3.812,2641,3.812,2642,3.812,2643,3.812,2644,3.812]],["title/interfaces/MoneyCloudDatum.html",[56,0.141,2645,3.045]],["body/interfaces/MoneyCloudDatum.html",[8,0.015,14,0.098,15,0.098,16,0.098,22,0.218,24,0.575,38,0.525,42,1.323,46,0.37,52,0.156,53,0.021,54,0.013,55,0.01,56,0.143,58,0.71,71,1.957,72,0.739,74,0.198,75,0.422,82,0.433,83,0.358,84,0.606,85,1.487,86,2.22,87,0.739,88,0.55,96,1.13,98,1.558,99,0.769,100,0.75,101,0.681,107,1.089,110,0.899,116,0.779,117,0.931,144,0.271,149,0.574,155,1.009,156,0.798,157,0.796,164,0.955,166,1.56,179,2.448,184,0.575,185,1.049,186,0.935,187,1.56,200,0.875,211,1.494,222,1.7,254,0.717,267,2.059,271,1.957,279,0.708,300,3.628,319,1.558,328,1.195,336,0.865,338,0.899,342,0.832,407,0.525,460,0.899,484,1.626,494,0.971,527,1.864,541,1.132,580,1.626,620,0.622,625,1.957,629,1.009,630,0.832,631,0.832,633,1.494,635,2.039,636,1.976,637,1.272,642,1.272,644,2.824,648,0.971,663,1.75,686,1.509,700,1.323,732,1.494,733,2.928,747,2.32,751,1.377,754,1.778,757,2.448,777,2.14,778,1.976,781,2.427,800,1.223,801,1.669,826,1.323,830,1.606,836,2.619,846,1.7,848,1.558,849,1.7,850,1.626,877,2.671,892,1.323,909,1.864,926,1.864,946,2.301,950,2.301,951,2.301,953,2.301,954,2.301,955,2.301,956,2.301,957,2.301,958,2.301,960,4.15,961,3.141,962,3.842,963,3.141,966,3.141,974,1.7,977,1.558,983,3.419,985,2.301,994,1.864,997,1.778,1000,1.778,1004,2.22,1005,1.558,1017,3.141,1022,3.598,1024,2.427,1045,1.778,1063,2.448,1065,4.206,1067,3.141,1072,1.957,1081,2.527,1082,2.301,1083,2.301,1084,2.22,1099,2.301,1101,3.141,1102,3.576,1103,2.301,1104,2.301,1105,2.301,1107,2.301,1108,2.301,1109,2.301,1115,3.576,1120,2.301,1121,2.301,1122,2.301,1123,2.301,1124,2.301,1140,1.545,1141,3.2,1152,2.427,1156,3.576,1159,2.301,1160,1.7,1161,2.966,1162,2.301,1163,2.301,1164,3.141,1165,3.141,1166,3.141,1167,2.301,1168,2.301,1169,1.323,1170,2.301,1171,2.301,1217,2.824,1219,1.778,1230,1.626,1254,2.824,1349,2.966,1353,2.966,1369,1.275,1386,3.576,1391,3.2,1395,4.388,1454,1.957,1473,1.864,1647,3.341,1665,2.301,1673,2.173,1685,2.811,1686,1.377,1695,3.426,1718,2.448,1765,2.448,1866,1.957,1873,2.811,1962,2.059,1974,2.824,1987,4.676,1993,2.824,2015,2.22,2062,2.448,2093,3.141,2094,1.864,2163,1.7,2166,1.558,2237,1.7,2316,1.957,2319,1.7,2320,1.957,2321,1.957,2339,2.173,2498,2.448,2510,3.082,2604,2.173,2645,5.688,2646,3.082,2647,3.426,2648,6.9,2649,6.179,2650,5.987,2651,5.39,2652,3.949,2653,3.949,2654,3.426,2655,3.949,2656,3.949,2657,3.426,2658,3.949,2659,3.949,2660,3.426,2661,3.426,2662,3.949,2663,2.811,2664,3.426,2665,2.059,2666,3.949,2667,3.949,2668,3.574,2669,6.136,2670,3.855,2671,4.676,2672,2.619,2673,2.619,2674,3.341,2675,3.426,2676,4.676,2677,3.574,2678,3.426,2679,3.426,2680,3.426,2681,3.949,2682,5.39,2683,2.448,2684,2.619,2685,2.619,2686,2.619,2687,4.069,2688,5.39,2689,4.676,2690,2.619,2691,3.426,2692,3.426,2693,3.426,2694,3.426,2695,2.619,2696,2.619,2697,3.574,2698,2.619,2699,2.619,2700,3.574,2701,3.426,2702,2.619,2703,3.426,2704,2.619,2705,2.619,2706,2.619,2707,2.619,2708,2.619,2709,2.619,2710,2.619,2711,2.619,2712,2.619,2713,2.619,2714,2.619,2715,3.426,2716,2.619,2717,3.426,2718,3.426,2719,3.426,2720,3.426,2721,5.324,2722,3.949,2723,3.426,2724,3.426,2725,3.949,2726,5.39,2727,3.949,2728,3.949,2729,3.426,2730,3.426,2731,3.426,2732,3.426,2733,3.949,2734,3.949,2735,3.949,2736,3.949,2737,3.949,2738,3.949,2739,3.426,2740,3.949,2741,2.619,2742,3.426,2743,3.426,2744,3.426,2745,3.949,2746,3.426,2747,3.426,2748,3.426,2749,3.949,2750,3.949,2751,3.949,2752,3.949,2753,3.426,2754,3.426,2755,3.426,2756,3.949,2757,3.949,2758,2.824,2759,3.949,2760,3.949,2761,3.949,2762,3.949,2763,3.949,2764,2.619,2765,3.574,2766,2.619,2767,3.426,2768,3.426,2769,2.619,2770,2.619,2771,2.619,2772,3.426,2773,2.619,2774,2.619,2775,2.619,2776,2.619,2777,2.619,2778,2.619,2779,2.619,2780,2.619,2781,2.619,2782,2.619,2783,2.619,2784,3.949,2785,2.619,2786,3.426,2787,2.619,2788,2.619,2789,2.619,2790,2.619,2791,2.619,2792,2.619,2793,3.426,2794,3.949,2795,3.426,2796,2.448,2797,3.426,2798,3.949,2799,3.949,2800,3.426,2801,3.426,2802,3.949,2803,3.949,2804,3.426,2805,3.426,2806,2.619]],["title/interfaces/MoneyDatum.html",[56,0.141,2807,3.045]],["body/interfaces/MoneyDatum.html",[8,0.015,14,0.096,15,0.096,16,0.096,22,0.217,24,0.562,38,0.514,42,1.293,46,0.469,52,0.154,53,0.02,54,0.013,55,0.01,56,0.14,58,0.694,71,1.913,72,0.722,74,0.194,75,0.415,78,1.913,82,0.424,83,0.355,84,0.567,85,1.464,87,0.722,88,0.537,96,1.122,98,1.523,99,1.033,100,0.844,101,0.666,107,1.065,110,0.879,116,0.77,117,0.829,118,0.722,144,0.265,148,1.15,149,0.567,156,0.878,157,0.79,164,0.941,166,1.62,171,1.046,179,2.392,184,0.562,185,0.922,186,0.913,187,1.545,195,2.124,200,0.866,211,1.46,222,1.661,254,0.514,268,0.949,271,1.913,279,0.612,289,1.59,300,2.124,310,1.118,319,1.523,328,1.181,336,0.846,338,0.879,342,0.813,353,1.025,407,0.514,416,1.065,460,0.879,465,2.212,484,1.59,494,0.949,541,1.106,620,0.699,625,1.927,629,0.986,630,0.813,631,0.813,633,1.46,635,2.007,636,1.953,637,1.243,642,1.243,648,0.949,663,1.757,686,1.606,700,1.293,733,3.044,735,1.46,742,1.356,747,2.284,750,2.912,751,1.346,754,1.738,757,2.392,777,2.114,778,1.953,781,2.389,800,1.195,801,1.643,826,1.293,830,1.15,836,2.56,846,1.661,848,1.523,849,1.661,850,1.59,877,2.629,892,1.293,909,1.822,926,1.822,946,2.249,950,2.249,951,2.249,953,2.249,954,2.249,955,2.249,956,2.249,957,2.249,958,2.249,960,3.989,961,3.092,962,3.805,963,3.092,966,3.092,974,1.661,977,1.523,983,3.392,985,2.249,993,2.249,994,1.822,997,1.738,1000,1.738,1004,2.185,1005,1.523,1007,2.249,1010,2.093,1017,3.092,1018,1.661,1022,3.569,1024,2.389,1045,1.738,1063,2.392,1067,3.092,1071,2.093,1072,1.913,1081,2.497,1082,2.249,1083,2.249,1084,2.819,1099,2.249,1101,2.249,1102,3.533,1103,2.249,1104,2.249,1105,2.249,1107,2.249,1108,2.249,1109,2.249,1115,3.533,1120,2.249,1121,2.249,1122,2.249,1123,2.249,1124,2.249,1140,1.738,1141,3.405,1152,2.73,1156,3.533,1159,2.249,1160,1.661,1161,2.92,1162,2.249,1163,2.249,1164,3.092,1165,3.092,1166,3.092,1167,2.249,1168,2.249,1169,1.293,1170,2.249,1171,2.249,1194,2.249,1219,1.738,1254,2.76,1349,2.92,1353,2.92,1386,3.533,1395,4.336,1454,1.913,1473,1.822,1647,3.289,1665,2.249,1673,2.124,1685,2.767,1686,1.346,1718,2.392,1765,2.392,1774,3.012,1866,1.913,1873,2.767,1962,2.013,1974,2.76,1993,2.76,2015,2.185,2062,2.392,2093,3.092,2094,2.504,2123,3.012,2163,1.661,2166,1.523,2237,1.661,2316,1.913,2319,2.284,2320,1.913,2321,1.913,2339,2.124,2359,2.249,2498,2.392,2509,3.012,2551,3.349,2604,2.124,2646,3.012,2649,5.939,2650,5.939,2654,3.349,2657,3.349,2660,3.349,2661,3.349,2663,2.767,2664,3.349,2665,2.013,2668,2.56,2671,4.603,2672,2.56,2673,2.56,2674,3.289,2675,3.349,2676,4.603,2677,3.519,2678,3.349,2679,3.349,2680,3.349,2683,2.392,2684,2.56,2685,2.56,2686,2.56,2687,3.519,2689,4.603,2690,2.56,2691,3.349,2692,3.349,2693,3.349,2694,3.349,2695,2.56,2696,2.56,2697,3.519,2698,2.56,2699,2.56,2700,3.519,2701,3.349,2702,2.56,2703,3.349,2704,2.56,2705,2.56,2706,2.56,2707,2.56,2708,2.56,2709,2.56,2710,2.56,2711,2.56,2712,2.56,2713,2.56,2714,2.56,2715,3.349,2716,2.56,2717,3.349,2718,3.349,2719,3.349,2720,3.349,2721,6.136,2723,3.349,2724,3.349,2729,3.349,2730,3.349,2731,3.349,2732,4.603,2739,3.349,2741,2.56,2742,3.349,2743,4.603,2744,3.349,2746,3.349,2747,3.349,2748,3.349,2753,3.349,2754,3.349,2755,3.349,2764,2.56,2765,3.519,2766,2.56,2767,3.349,2768,3.349,2769,2.56,2770,2.56,2771,2.56,2772,3.349,2773,2.56,2774,2.56,2775,2.56,2776,2.56,2777,2.56,2778,2.56,2779,2.56,2780,2.56,2781,2.56,2782,2.56,2783,2.56,2785,2.56,2786,3.349,2787,2.56,2788,2.56,2789,2.56,2790,2.56,2791,3.519,2792,2.56,2793,3.349,2795,3.349,2796,2.392,2797,3.349,2800,3.349,2801,3.349,2804,3.349,2805,3.349,2806,2.56,2807,5.759,2808,2.249,2809,2.124,2810,2.124,2811,5.306,2812,3.86,2813,3.349,2814,2.76,2815,2.76,2816,2.76,2817,2.76,2818,2.76,2819,3.86,2820,3.86,2821,2.76,2822,3.86,2823,3.86,2824,3.86,2825,3.86,2826,3.86,2827,3.86,2828,3.86,2829,3.86,2830,3.86,2831,3.86,2832,3.86,2833,2.76,2834,3.86,2835,2.76,2836,2.76,2837,3.86,2838,3.86,2839,3.86,2840,3.86,2841,3.795,2842,2.76,2843,4.336,2844,3.86,2845,2.124,2846,3.86,2847,3.86,2848,3.86,2849,3.86,2850,3.86,2851,2.76,2852,3.86,2853,3.86,2854,3.86,2855,3.86]],["title/interfaces/NetworkContext.html",[56,0.141,93,1.118]],["body/interfaces/NetworkContext.html",[8,0.015,14,0.083,15,0.083,16,0.083,22,0.206,34,0.85,38,0.443,46,0.462,52,0.201,53,0.018,54,0.009,55,0.009,56,0.257,58,0.598,65,1.269,67,1.735,68,1.498,72,1.047,74,0.307,75,0.528,76,0.422,79,1.03,82,0.74,83,0.386,84,0.635,85,0.918,88,0.779,89,1.096,90,1.185,91,1.666,92,1.655,93,1.933,94,1.419,96,1.102,99,0.648,100,0.665,101,0.574,104,1.95,107,0.918,111,1.258,117,0.677,118,1.047,122,2.057,128,2.116,133,1.37,140,1.603,142,1.921,143,2.216,144,0.504,147,1.258,148,1.822,149,0.665,150,2.083,155,0.85,156,0.741,157,0.881,159,0.787,163,0.696,164,0.677,166,1.644,170,1.485,171,0.574,181,1.191,182,1.539,185,1.188,191,1.41,193,2.172,196,1.37,200,0.671,254,0.443,262,1.431,265,1.801,279,0.645,285,0.403,291,1.603,294,1.208,295,1.208,297,2.172,308,1.318,309,2.17,310,1.007,311,1.618,314,0.953,320,1.48,321,2.255,333,1.071,354,0.953,358,1.969,363,1.37,378,1.37,381,1.269,386,1.37,388,0.818,392,0.883,394,0.991,395,2.368,407,0.897,408,1.047,413,1.37,416,0.918,418,1.318,421,2.518,422,0.818,425,1.535,427,2.132,428,1.37,431,1.37,433,1.37,441,1.37,442,0.729,445,2.132,453,2.304,457,1.886,460,1.392,468,1.03,476,2.753,477,1.735,479,2.132,482,2.45,511,0.701,526,1.687,538,2.902,541,1.37,545,2.519,547,2.63,555,2.368,576,1.83,582,2.902,672,1.886,674,2.886,681,1.735,690,2.63,698,1.83,725,0.787,777,2.478,778,2.289,780,2.381,826,1.114,830,1.822,841,1.114,843,1.431,892,2.327,1080,2.368,1081,1.37,1140,1.603,1169,1.114,1248,2.492,1250,2.492,1251,1.734,1326,2.581,1343,1.57,1369,0.787,1377,1.57,1422,2.057,1425,1.57,1442,1.886,1443,1.822,1508,2.63,1686,1.16,1759,2.63,1801,3.056,1804,2.255,1829,1.57,1883,1.37,1886,1.258,1930,1.57,1931,1.57,1934,2.255,1939,1.57,1954,1.57,2031,1.498,2092,2.057,2097,2.492,2132,2.492,2133,1.83,2134,1.938,2135,1.938,2136,2.304,2137,2.927,2138,1.83,2139,3.365,2140,2.057,2141,2.492,2142,1.938,2143,2.785,2144,1.886,2145,1.938,2146,1.938,2147,1.938,2148,2.785,2149,1.938,2150,1.938,2151,2.64,2152,2.785,2153,1.938,2154,1.938,2155,1.938,2156,1.938,2157,1.83,2158,1.938,2159,1.938,2160,1.938,2161,1.938,2162,1.83,2163,2.057,2164,1.938,2165,1.938,2166,1.886,2167,2.492,2168,2.785,2169,2.63,2170,1.938,2171,1.938,2172,1.938,2173,1.938,2174,1.938,2175,1.938,2176,1.938,2177,1.938,2178,1.938,2179,1.938,2180,1.938,2181,1.938,2182,1.938,2183,1.938,2184,1.938,2185,1.938,2186,1.938,2187,1.938,2188,2.785,2189,2.63,2190,1.938,2191,1.938,2192,1.938,2193,1.938,2194,1.938,2195,1.938,2196,1.938,2197,1.938,2198,1.938,2199,2.785,2200,1.938,2201,1.938,2202,1.938,2203,1.938,2204,2.785,2205,1.938,2206,1.938,2207,1.938,2208,1.938,2209,2.785,2210,2.785,2211,1.938,2212,1.938,2213,1.938,2214,1.938,2215,1.938,2216,2.785,2217,1.938,2218,1.938,2219,1.938,2220,1.938,2221,1.938,2222,3.563,2223,1.938,2224,1.938,2225,1.938,2226,1.938,2227,1.938,2228,1.938,2229,1.938,2230,1.938,2231,1.938,2232,1.938,2233,1.938,2234,1.83,2235,2.785,2236,1.938,2237,2.057,2238,1.938,2239,1.938,2240,2.785,2241,1.968,2242,1.938,2243,1.938,2244,1.938,2245,1.938,2246,2.785,2247,1.938,2248,2.785,2249,1.938,2250,2.785,2251,2.785,2252,1.938,2253,1.938,2254,1.938,2255,1.938,2256,1.938,2257,1.938,2258,1.938,2259,2.785,2260,1.938,2261,1.938,2262,2.785,2263,1.938,2264,1.938,2265,1.938,2266,1.938,2267,1.938,2268,1.938,2269,1.938,2270,1.938,2271,2.785,2272,1.938,2273,1.938,2274,1.938,2275,1.938,2276,1.938,2277,1.938,2278,1.938,2279,1.938,2280,1.938,2281,1.938,2282,1.938,2283,1.938,2284,1.938,2285,1.938,2286,1.938,2287,1.938,2288,1.938,2289,1.938,2290,1.938,2291,2.785,2292,1.938,2293,1.938,2294,1.938,2295,1.938,2296,1.938,2297,1.938,2298,1.938,2299,1.938,2856,3.326]],["title/classes/NetworkDataset.html",[53,0.021,92,0.997]],["body/classes/NetworkDataset.html",[8,0.015,14,0.073,15,0.073,16,0.073,22,0.199,34,0.75,38,0.39,46,0.422,52,0.193,53,0.016,54,0.008,55,0.008,56,0.248,65,1.157,67,1.583,68,1.321,72,0.974,74,0.289,75,0.505,76,0.931,79,0.909,82,0.783,83,0.385,84,0.641,85,0.809,88,0.607,89,1.097,90,1.184,91,1.55,92,1.791,93,1.765,94,1.262,96,1.06,99,0.571,100,0.607,101,0.506,104,1.894,107,0.809,111,1.11,117,0.63,118,0.974,122,2.239,128,2.179,133,1.651,140,1.491,142,1.95,143,2.157,144,0.524,147,1.11,148,1.716,149,0.642,150,2.1,155,1.114,156,0.781,157,0.862,159,0.694,163,0.757,164,0.63,166,1.624,170,1.634,171,0.506,181,1.256,182,1.404,185,1.246,191,1.467,193,2.163,200,0.632,254,0.39,262,1.262,265,1.676,279,0.6,285,0.528,291,1.491,294,1.065,295,1.065,297,2.078,308,1.203,309,2.062,310,0.919,311,1.669,314,0.841,320,1.35,321,2.455,333,0.945,354,0.841,358,1.855,363,1.651,376,1.53,378,1.25,381,1.157,386,1.208,388,0.721,392,2.049,394,2.184,395,1.454,407,1.057,408,1.463,413,1.208,416,0.809,418,1.203,421,2.657,422,0.721,425,1.469,427,2.008,428,1.208,431,1.208,433,1.208,441,1.491,442,0.643,445,2.008,453,2.143,457,1.72,460,1.185,468,0.909,476,2.594,477,1.889,479,2.329,482,2.441,511,0.618,526,1.968,538,3.017,541,1.25,545,2.343,547,2.399,555,2.16,576,1.614,582,2.776,672,1.72,674,1.384,681,1.583,690,2.399,698,1.614,725,0.694,777,1.814,778,1.676,780,1.743,826,0.983,830,1.716,841,0.983,843,1.262,892,2.238,1080,1.454,1081,1.208,1140,1.765,1169,0.983,1248,2.273,1250,2.273,1251,1.53,1326,1.889,1343,1.384,1369,0.694,1377,1.384,1422,1.876,1425,1.384,1442,2.053,1443,1.99,1508,3.17,1686,2.008,1759,1.614,1801,2.905,1804,2.058,1829,2.058,1883,1.208,1886,1.11,1930,1.384,1931,1.384,1934,2.058,1939,1.384,1954,1.384,2031,1.321,2092,1.876,2097,2.273,2132,4.042,2133,1.614,2134,1.709,2135,1.709,2136,2.143,2137,2.887,2138,1.614,2139,2.399,2140,1.876,2141,2.273,2142,1.709,2143,3.032,2144,1.72,2145,1.709,2146,1.709,2147,1.709,2148,3.032,2149,1.709,2150,1.709,2151,2.718,2152,2.541,2153,1.709,2154,1.709,2155,1.709,2156,1.709,2157,1.614,2158,1.709,2159,1.709,2160,1.709,2161,1.709,2162,1.614,2163,1.876,2164,1.709,2165,1.709,2166,1.157,2167,1.53,2168,1.709,2169,1.614,2170,1.709,2171,1.709,2172,2.541,2173,1.709,2174,2.541,2175,1.709,2176,2.541,2177,1.709,2178,2.541,2179,1.709,2180,3.357,2181,1.709,2182,3.357,2183,1.709,2184,3.357,2185,1.709,2186,1.709,2187,3.357,2188,2.541,2189,3.387,2190,3.357,2191,1.709,2192,3.357,2193,1.709,2194,1.709,2195,1.709,2196,2.541,2197,1.709,2198,1.709,2199,2.541,2200,1.709,2201,2.541,2202,1.709,2203,1.709,2204,2.541,2205,1.709,2206,1.709,2207,3.032,2208,1.709,2209,2.541,2210,2.541,2211,1.709,2212,1.709,2213,2.541,2214,1.709,2215,1.709,2216,3.587,2217,2.541,2218,2.541,2219,2.541,2220,1.709,2221,1.709,2222,3.893,2223,1.709,2224,1.709,2225,1.709,2226,1.709,2227,1.709,2228,2.541,2229,2.541,2230,2.541,2231,2.541,2232,1.709,2233,1.709,2234,2.399,2235,3.032,2236,2.541,2237,2.479,2238,2.541,2239,2.541,2240,2.541,2241,1.795,2242,1.709,2243,1.709,2244,1.709,2245,1.709,2246,2.541,2247,1.709,2248,2.541,2249,1.709,2250,2.541,2251,2.541,2252,1.709,2253,1.709,2254,1.709,2255,1.709,2256,1.709,2257,1.709,2258,1.709,2259,2.541,2260,1.709,2261,1.709,2262,2.541,2263,1.709,2264,1.709,2265,1.709,2266,1.709,2267,1.709,2268,1.709,2269,1.709,2270,1.709,2271,2.541,2272,1.709,2273,1.709,2274,1.709,2275,1.709,2276,1.709,2277,1.709,2278,2.541,2279,2.541,2280,1.709,2281,1.709,2282,1.709,2283,1.709,2284,1.709,2285,1.709,2286,1.709,2287,1.709,2288,1.709,2289,1.709,2290,1.709,2291,2.541,2292,1.709,2293,1.709,2294,1.709,2295,1.709,2296,1.709,2297,1.709,2298,1.709,2299,1.709,2857,4.36,2858,4.36,2859,4.36,2860,4.36,2861,4.36,2862,4.36,2863,4.36,2864,4.36,2865,4.36,2866,4.36,2867,2.933,2868,2.933,2869,2.933,2870,2.933,2871,2.933,2872,2.933,2873,2.933,2874,2.933,2875,2.933,2876,2.933,2877,2.933,2878,2.933,2879,2.933,2880,2.933,2881,2.933,2882,2.933,2883,2.933,2884,2.933,2885,2.933]],["title/modules/NetworkModule.html",[0,1.933,2886,2.79]],["body/modules/NetworkModule.html",[2,2.605,3,3.098,8,0.015,11,2.399,12,1.536,13,2.383,14,0.183,15,0.144,16,0.144,20,3.588,21,3.588,22,0.236,23,3.588,24,0.842,25,3.588,26,3.017,27,4.921,28,4.921,29,3.184,33,3.588,34,1.478,35,4.265,36,2.73,37,4.265,38,0.77,41,4.921,42,1.938,50,3.017,52,0.167,53,0.031,54,0.013,55,0.013,89,0.77,90,0.842,621,3.09,717,2.966,725,1.369,736,3.09,1289,5.969,1290,5.019,2137,2.383,2886,5.859,2887,5.019,2888,5.019,2889,5.019,2890,5.786,2891,5.969,2892,5.786,2893,6.88]],["title/interfaces/NetworkProvider.html",[56,0.141,291,1.118]],["body/interfaces/NetworkProvider.html",[8,0.015,14,0.078,15,0.078,16,0.078,22,0.202,34,0.798,38,0.415,46,0.467,52,0.197,53,0.017,54,0.008,55,0.008,56,0.253,58,0.561,65,1.212,67,1.657,68,1.406,72,1.01,74,0.298,75,0.516,76,0.865,79,0.967,82,0.766,83,0.387,84,0.632,85,0.861,88,0.751,89,1.097,90,1.185,91,1.608,92,1.821,93,2.043,94,1.493,96,1.189,99,0.608,100,0.635,101,0.539,104,2.057,107,0.861,111,1.181,117,0.654,118,1.01,122,1.964,124,1.964,128,2.041,133,1.309,140,1.547,142,1.884,143,2.187,144,0.525,147,1.181,148,1.882,149,0.653,150,2.057,155,0.798,156,0.846,157,0.872,159,0.739,163,0.664,164,0.654,166,1.612,170,1.576,171,0.539,181,1.285,182,1.47,185,1.178,191,1.446,193,2.178,200,0.651,254,0.415,262,1.344,265,1.738,279,0.622,285,0.378,291,1.702,294,1.657,295,1.657,297,2.364,308,1.259,309,2.426,310,1.251,311,1.591,314,1.309,320,1.414,321,2.154,333,1.912,354,1.309,358,1.912,363,1.309,378,1.891,381,1.212,383,2.512,384,2.512,385,2.512,386,2.445,387,2.154,388,1.46,389,2.512,390,2.512,392,1.923,394,2.03,407,1.02,408,0.684,413,1.88,416,0.861,418,1.259,421,2.445,422,1.122,425,1.502,427,2.376,428,1.88,431,1.88,433,1.88,441,1.547,442,0.684,445,2.07,453,2.717,457,2.342,460,1.352,468,0.967,476,2.673,477,1.657,479,2.07,482,2.578,511,0.658,526,1.638,538,2.839,541,1.309,545,2.673,547,2.512,555,2.262,576,1.718,582,2.839,672,1.801,674,1.473,681,2.155,690,2.512,698,1.718,725,0.739,777,1.881,778,1.738,780,1.808,826,1.046,830,1.769,841,1.046,843,1.964,892,2.283,1080,1.547,1081,1.286,1140,1.547,1169,1.046,1248,2.38,1250,2.38,1251,1.628,1326,1.959,1343,2.154,1369,0.739,1377,2.154,1422,1.964,1425,1.473,1442,2.129,1443,1.769,1508,2.512,1686,1.089,1759,1.718,1801,2.981,1804,2.154,1829,1.473,1883,1.286,1886,1.181,1930,1.473,1931,1.473,1934,2.154,1939,1.473,1954,1.473,2031,1.406,2092,1.964,2097,3.096,2132,3.827,2133,1.718,2134,1.819,2135,1.819,2136,2.222,2137,2.935,2138,1.718,2139,2.512,2140,1.964,2141,2.38,2142,1.819,2143,2.66,2144,1.801,2145,1.819,2146,1.819,2147,1.819,2148,2.66,2149,1.819,2150,1.819,2151,2.546,2152,2.66,2153,1.819,2154,2.66,2155,2.66,2156,2.66,2157,2.512,2158,2.66,2159,1.819,2160,1.819,2161,1.819,2162,2.512,2163,2.555,2164,2.66,2165,2.66,2166,1.232,2167,1.628,2168,1.819,2169,1.718,2170,1.819,2171,1.819,2172,1.819,2173,1.819,2174,1.819,2175,1.819,2176,1.819,2177,1.819,2178,1.819,2179,1.819,2180,1.819,2181,1.819,2182,1.819,2183,1.819,2184,1.819,2185,1.819,2186,1.819,2187,1.819,2188,2.66,2189,2.512,2190,1.819,2191,1.819,2192,1.819,2193,1.819,2194,1.819,2195,1.819,2196,1.819,2197,1.819,2198,1.819,2199,2.66,2200,1.819,2201,1.819,2202,1.819,2203,1.819,2204,2.66,2205,1.819,2206,1.819,2207,1.819,2208,1.819,2209,2.66,2210,2.66,2211,1.819,2212,1.819,2213,1.819,2214,1.819,2215,1.819,2216,2.66,2217,1.819,2218,1.819,2219,1.819,2220,1.819,2221,1.819,2222,3.459,2223,1.819,2224,1.819,2225,1.819,2226,1.819,2227,1.819,2228,1.819,2229,1.819,2230,1.819,2231,1.819,2232,1.819,2233,1.819,2234,1.718,2235,2.66,2236,1.819,2237,1.964,2238,1.819,2239,1.819,2240,2.66,2241,1.88,2242,1.819,2243,1.819,2244,1.819,2245,1.819,2246,2.66,2247,1.819,2248,2.66,2249,1.819,2250,2.66,2251,2.66,2252,1.819,2253,1.819,2254,1.819,2255,1.819,2256,1.819,2257,1.819,2258,1.819,2259,2.66,2260,1.819,2261,1.819,2262,2.66,2263,1.819,2264,1.819,2265,1.819,2266,1.819,2267,1.819,2268,1.819,2269,1.819,2270,1.819,2271,2.66,2272,1.819,2273,1.819,2274,1.819,2275,1.819,2276,1.819,2277,1.819,2278,1.819,2279,1.819,2280,1.819,2281,1.819,2282,1.819,2283,1.819,2284,1.819,2285,1.819,2286,1.819,2287,1.819,2288,1.819,2289,1.819,2290,1.819,2291,2.66,2292,1.819,2293,1.819,2294,1.819,2295,1.819,2296,1.819,2297,1.819,2298,1.819,2299,1.819,2894,3.122,2895,3.122,2896,3.122,2897,3.122,2898,3.122,2899,3.122,2900,3.122,2901,3.122,2902,3.122,2903,3.122]],["title/components/NgxChart.html",[620,0.45,738,1.36]],["body/components/NgxChart.html",[7,1.665,8,0.015,9,1.598,10,1.598,14,0.161,15,0.11,16,0.11,17,1.535,22,0.213,24,0.641,31,1.665,34,1.124,36,2.077,46,0.472,48,1.9,52,0.188,53,0.023,54,0.012,55,0.011,56,0.21,66,1.262,74,0.221,75,0.454,76,0.823,82,0.636,83,0.401,84,0.608,89,0.586,90,0.641,100,0.613,101,0.759,116,0.823,117,0.867,143,1.931,144,0.504,149,0.412,155,1.481,157,0.826,163,0.943,164,0.533,167,2.287,184,0.844,187,1.041,196,1.858,285,0.834,381,1.539,388,1.594,392,2.142,394,1.931,407,0.978,408,1.61,468,2.133,494,1.425,511,0.927,538,1.894,580,2.387,620,0.748,621,1.665,622,2.387,623,1.535,624,1.474,625,1.598,626,1.982,629,1.656,630,1.719,631,1.721,637,1.417,642,1.417,648,1.425,653,2.494,654,2.494,663,1.476,699,2.494,700,1.942,701,2.287,702,1.982,703,3.102,704,1.982,708,2.61,709,2.61,710,1.535,711,1.982,712,1.736,713,2.61,714,1.363,715,3.102,716,1.598,717,1.598,718,1.736,719,1.665,720,1.535,721,1.665,722,1.982,723,1.982,724,1.598,725,1.933,726,2.918,727,1.982,728,1.736,729,1.812,730,1.665,731,1.982,732,1.665,733,2.287,734,1.982,735,1.665,736,1.665,737,1.982,738,2.402,739,1.665,740,1.665,741,1.598,742,1.124,743,1.982,744,1.982,749,3.379,751,2.021,762,2.964,763,3.413,773,3.593,800,1.795,801,2.133,803,1.474,828,2.669,892,1.942,972,4.014,979,4.523,983,3.211,998,1.812,1010,2.717,1018,3.163,1049,5.057,1071,1.736,1072,2.181,1078,2.735,1222,2.565,1323,4.014,1324,3.147,1325,5.057,1326,2.668,1327,5.057,1328,5.057,1329,4.523,1330,2.919,1331,3.19,1332,4.969,1333,3.777,1334,3.434,1335,2.919,1336,3.844,1337,5.057,1338,3.434,1339,2.789,1340,3.434,1341,3.434,1342,3.468,1343,3.25,1344,3.434,1345,5.057,1346,3.434,1347,4.298,1348,3.434,1349,3.79,1350,3.434,1351,3.434,1352,3.434,1353,3.566,1354,3.434,1355,4.523,1356,2.919,1357,2.919,1358,3.434,1359,2.919,1360,4.298,1361,3.434,1362,3.434,1363,3.434,1364,2.021,1365,3.434,1366,3.434,1367,2.181,1368,2.919,1369,1.041,1370,3.434,1371,3.434,1372,3.434,1373,2.565,1374,3.434,1375,3.434,1376,3.434,1377,2.077,1378,3.434,1379,3.434,1380,5.375,1381,4.523,1382,3.434,1383,3.434,1384,2.565,1385,3.434,1970,3.818,2904,5.796,2905,4.401,2906,5.796,2907,4.401,2908,4.401,2909,4.401,2910,4.401,2911,4.401,2912,4.401,2913,4.401,2914,4.401,2915,4.401,2916,4.401,2917,4.401,2918,4.401,2919,4.401,2920,4.401,2921,4.401,2922,4.401,2923,4.401,2924,4.401,2925,4.401,2926,4.401,2927,4.401,2928,4.401,2929,5.796,2930,5.796,2931,5.796,2932,5.028,2933,4.401]],["title/modules/NgxChartsModule.html",[0,1.933,2934,2.79]],["body/modules/NgxChartsModule.html",[2,3.134,3,3.134,8,0.015,11,2.427,12,1.566,13,2.43,14,0.147,15,0.147,16,0.147,20,3.63,21,3.63,22,0.233,23,3.63,24,0.859,25,3.63,26,3.077,33,3.63,34,1.508,35,4.315,36,2.784,48,1.566,50,3.077,52,0.171,53,0.031,54,0.013,55,0.013,724,2.972,725,1.647,738,2.855,1018,2.539,1229,4.616,1230,2.43,1330,3.913,1331,3.83,2302,4.22,2304,4.22,2934,5.814,2935,5.119,2936,5.119,2937,5.119,2938,5.9,2939,5.9,2940,6.961,2941,6.961,2942,6.961,2943,6.961,2944,6.961,2945,6.961]],["title/interfaces/Node.html",[56,0.141,89,0.519]],["body/interfaces/Node.html",[8,0.015,14,0.083,15,0.083,16,0.083,22,0.206,34,0.853,38,0.444,46,0.445,52,0.201,53,0.018,54,0.009,55,0.009,56,0.257,58,0.6,65,1.272,67,1.74,68,1.503,72,1.146,74,0.307,75,0.528,76,0.609,79,1.034,82,0.781,83,0.391,84,0.637,85,0.921,88,0.667,89,1.098,90,1.18,91,1.67,92,1.657,93,1.993,94,1.342,96,1.103,99,0.65,100,0.667,101,0.576,104,2.014,107,0.921,111,1.263,117,0.679,118,1.049,122,2.062,128,2.12,133,1.373,140,1.756,142,1.903,143,2.217,144,0.445,147,1.263,148,1.825,149,0.665,150,2.055,155,0.853,156,0.742,157,0.882,159,0.79,163,0.697,164,0.842,166,1.761,170,1.488,171,0.576,181,1.193,182,1.543,185,1.188,191,1.411,193,2.146,200,0.672,254,0.444,262,2.062,265,1.805,279,0.647,285,0.404,291,1.859,294,1.212,295,1.212,297,2.333,308,1.322,309,2.173,310,1.01,311,1.62,314,0.957,320,1.484,321,2.261,333,1.075,354,0.957,358,2.24,363,1.373,378,1.373,386,1.375,388,0.821,407,0.863,408,0.731,413,1.375,416,0.921,418,1.546,421,2.671,422,0.821,425,1.537,427,2.135,428,1.375,431,1.375,433,1.375,441,1.373,442,1.05,445,2.354,453,2.308,457,1.89,460,1.276,468,1.034,476,2.758,477,1.74,479,2.135,482,2.454,511,0.703,526,1.918,538,3.118,541,1.756,545,2.524,547,2.637,555,2.374,576,1.837,582,2.905,672,1.89,674,1.575,681,1.74,690,2.637,698,1.837,725,0.79,777,1.954,778,1.805,780,1.878,826,1.118,830,1.825,841,1.118,843,1.437,892,2.33,1080,1.654,1081,1.375,1140,1.607,1169,1.605,1248,2.499,1250,2.499,1251,1.741,1326,2.035,1343,1.575,1369,0.79,1377,1.575,1422,2.062,1425,1.575,1442,1.89,1443,1.825,1508,2.637,1686,1.164,1759,1.837,1801,3.47,1804,2.261,1829,1.575,1883,1.375,1886,1.263,1930,1.575,1931,1.575,1934,2.261,1939,1.575,1954,1.575,2031,1.503,2092,2.062,2097,2.499,2132,1.741,2133,1.837,2134,1.945,2135,1.945,2136,2.308,2137,2.93,2138,1.837,2139,2.637,2140,2.062,2141,2.499,2142,1.945,2143,2.792,2144,1.89,2145,1.945,2146,1.945,2147,1.945,2148,2.792,2149,2.792,2150,2.792,2151,3.061,2152,3.266,2153,2.792,2154,1.945,2155,1.945,2156,1.945,2157,1.837,2158,1.945,2159,1.945,2160,1.945,2161,1.945,2162,1.837,2163,2.062,2164,1.945,2165,1.945,2166,1.317,2167,1.741,2168,1.945,2169,1.837,2170,1.945,2171,1.945,2172,1.945,2173,1.945,2174,1.945,2175,1.945,2176,1.945,2177,1.945,2178,1.945,2179,1.945,2180,1.945,2181,1.945,2182,1.945,2183,1.945,2184,1.945,2185,1.945,2186,1.945,2187,1.945,2188,2.792,2189,2.637,2190,1.945,2191,1.945,2192,1.945,2193,1.945,2194,1.945,2195,1.945,2196,1.945,2197,1.945,2198,1.945,2199,2.792,2200,1.945,2201,1.945,2202,1.945,2203,1.945,2204,2.792,2205,1.945,2206,1.945,2207,1.945,2208,1.945,2209,2.792,2210,2.792,2211,1.945,2212,1.945,2213,1.945,2214,1.945,2215,1.945,2216,2.792,2217,1.945,2218,1.945,2219,1.945,2220,1.945,2221,1.945,2222,3.569,2223,1.945,2224,1.945,2225,1.945,2226,1.945,2227,1.945,2228,1.945,2229,1.945,2230,1.945,2231,1.945,2232,1.945,2233,1.945,2234,1.837,2235,2.792,2236,1.945,2237,2.062,2238,1.945,2239,1.945,2240,2.792,2241,1.973,2242,1.945,2243,1.945,2244,1.945,2245,1.945,2246,2.792,2247,1.945,2248,2.792,2249,1.945,2250,2.792,2251,2.792,2252,1.945,2253,1.945,2254,1.945,2255,1.945,2256,1.945,2257,1.945,2258,1.945,2259,2.792,2260,1.945,2261,1.945,2262,2.792,2263,1.945,2264,1.945,2265,1.945,2266,1.945,2267,1.945,2268,1.945,2269,1.945,2270,1.945,2271,2.792,2272,1.945,2273,1.945,2274,1.945,2275,1.945,2276,1.945,2277,1.945,2278,1.945,2279,1.945,2280,1.945,2281,1.945,2282,1.945,2283,1.945,2284,1.945,2285,1.945,2286,1.945,2287,1.945,2288,1.945,2289,1.945,2290,1.945,2291,2.792,2292,1.945,2293,1.945,2294,1.945,2295,1.945,2296,1.945,2297,1.945,2298,1.945,2299,1.945]],["title/interfaces/NodeData.html",[56,0.141,1235,2.79]],["body/interfaces/NodeData.html",[8,0.015,14,0.189,15,0.133,16,0.133,22,0.19,24,0.776,46,0.366,52,0.19,53,0.028,54,0.012,55,0.012,56,0.193,58,0.958,74,0.268,75,0.512,76,0.832,82,0.719,83,0.371,84,0.417,89,1.101,90,0.776,94,1.434,95,1.717,116,0.9,118,0.998,142,1.61,144,0.366,156,0.646,157,0.818,162,1.936,164,0.895,166,1.906,196,1.528,200,0.811,220,1.859,244,1.471,279,0.853,285,0.858,289,2.196,299,2.294,328,1.038,353,1.415,358,1.717,363,1.528,442,1.168,460,1.214,477,1.936,494,1.311,526,1.471,620,0.755,624,1.786,628,3.813,629,1.673,630,1.123,631,1.123,632,5.11,633,2.017,634,4.16,635,2.017,636,1.717,637,2.109,638,4.16,639,4.16,640,4.16,641,5.11,642,1.717,643,3.107,644,3.813,645,3.535,646,3.535,647,4.16,648,1.311,649,4.16,650,2.78,651,3.813,653,2.294,656,4.16,663,1.491,664,4.16,665,4.16,670,4.16,671,4.16,672,2.103,673,2.642,674,2.516,675,4.16,676,4.16,677,4.16,678,4.16,679,5.11,680,4.16,681,1.936,682,4.16,683,2.934,684,1.936,685,4.16,686,1.311,687,3.813,717,1.936,1233,4.16,1234,4.059,1235,5.524,1241,4.625,1242,4.625,1243,4.625,1244,4.625,1245,4.625,1246,4.625,1247,4.625,1248,3.696,1249,6.149,1250,3.415,1251,2.78,1252,4.625,1253,4.625,1254,3.813,1255,4.625,1256,4.625,1257,4.625,1258,4.16,1259,4.625,1260,4.625,1261,3.813,1262,4.625,1263,4.625,1264,4.625,1265,4.625,1266,4.625,1267,4.16,1268,4.625,1269,4.625,1270,4.625,1271,4.625,1272,4.625,1273,4.625]],["title/interfaces/NodeType.html",[56,0.141,445,1.36]],["body/interfaces/NodeType.html",[8,0.015,14,0.084,15,0.084,16,0.084,22,0.207,34,0.865,38,0.451,46,0.447,52,0.202,53,0.018,54,0.009,55,0.009,56,0.258,58,0.609,65,1.285,67,1.758,68,1.525,72,1.057,74,0.31,75,0.531,76,0.615,79,1.049,82,0.744,83,0.375,84,0.637,85,0.934,88,0.674,89,1.097,90,1.181,91,1.683,92,1.666,93,1.87,94,1.351,96,1.108,99,0.66,100,0.674,101,0.584,104,1.958,107,0.934,111,1.281,117,0.747,118,1.154,122,2.084,128,2.138,133,1.388,140,1.767,142,1.896,143,2.246,144,0.49,147,1.281,148,1.943,149,0.668,150,2.059,155,0.865,156,0.747,157,0.884,159,0.801,163,0.705,164,0.684,166,1.653,170,1.5,171,0.584,181,1.201,182,1.559,185,1.19,191,1.416,193,2.139,200,0.676,254,0.451,262,1.458,265,1.82,279,0.652,285,0.41,291,1.62,294,1.23,295,1.23,297,2.185,308,1.335,309,2.185,310,1.02,311,1.626,314,0.971,320,1.499,321,2.285,333,1.091,354,0.971,358,2.1,363,1.388,378,1.388,386,1.395,388,0.833,398,2.18,407,0.868,408,0.742,413,1.395,416,0.934,418,1.335,421,2.539,422,0.833,425,1.679,427,2.15,428,1.395,431,1.395,433,1.395,441,1.388,442,0.742,445,2.274,453,2.327,457,1.91,460,1.287,468,1.049,476,2.776,477,1.758,479,2.15,482,2.468,511,0.714,526,1.701,538,2.919,541,1.388,545,2.776,547,3.109,555,2.399,576,1.864,582,2.919,672,2.229,674,1.598,681,1.758,690,2.664,698,1.864,725,0.801,777,1.97,778,1.82,780,1.893,826,1.135,830,1.837,841,1.135,843,1.458,892,2.34,1080,1.678,1081,1.395,1140,1.62,1169,1.135,1248,2.525,1250,2.525,1251,1.766,1326,2.052,1343,1.598,1369,0.801,1377,1.598,1422,2.432,1425,1.598,1442,1.91,1443,1.837,1508,2.664,1686,1.181,1759,1.864,1801,3.078,1804,2.285,1829,1.598,1883,1.395,1886,1.281,1930,1.598,1931,1.598,1934,2.285,1939,1.598,1954,1.598,2031,1.525,2092,2.084,2097,2.525,2132,1.766,2133,1.864,2134,1.974,2135,1.974,2136,2.327,2137,2.994,2138,1.864,2139,2.664,2140,2.432,2141,2.946,2142,2.821,2143,3.801,2144,2.229,2145,1.974,2146,1.974,2147,1.974,2148,2.821,2149,1.974,2150,1.974,2151,2.667,2152,2.821,2153,1.974,2154,1.974,2155,1.974,2156,1.974,2157,1.864,2158,1.974,2159,1.974,2160,1.974,2161,1.974,2162,1.864,2163,2.084,2164,1.974,2165,1.974,2166,1.336,2167,1.766,2168,1.974,2169,1.864,2170,1.974,2171,1.974,2172,1.974,2173,1.974,2174,1.974,2175,1.974,2176,1.974,2177,1.974,2178,1.974,2179,1.974,2180,1.974,2181,1.974,2182,1.974,2183,1.974,2184,1.974,2185,1.974,2186,1.974,2187,1.974,2188,2.821,2189,2.664,2190,1.974,2191,1.974,2192,1.974,2193,1.974,2194,1.974,2195,1.974,2196,1.974,2197,1.974,2198,1.974,2199,2.821,2200,1.974,2201,1.974,2202,1.974,2203,1.974,2204,2.821,2205,1.974,2206,1.974,2207,1.974,2208,1.974,2209,2.821,2210,2.821,2211,1.974,2212,1.974,2213,1.974,2214,1.974,2215,1.974,2216,2.821,2217,1.974,2218,1.974,2219,1.974,2220,1.974,2221,1.974,2222,3.593,2223,1.974,2224,1.974,2225,1.974,2226,1.974,2227,1.974,2228,1.974,2229,1.974,2230,1.974,2231,1.974,2232,1.974,2233,1.974,2234,1.864,2235,2.821,2236,1.974,2237,2.084,2238,1.974,2239,1.974,2240,2.821,2241,1.994,2242,1.974,2243,1.974,2244,1.974,2245,1.974,2246,2.821,2247,1.974,2248,2.821,2249,1.974,2250,2.821,2251,2.821,2252,1.974,2253,1.974,2254,1.974,2255,1.974,2256,1.974,2257,1.974,2258,1.974,2259,2.821,2260,1.974,2261,1.974,2262,2.821,2263,1.974,2264,1.974,2265,1.974,2266,1.974,2267,1.974,2268,1.974,2269,1.974,2270,1.974,2271,2.821,2272,1.974,2273,1.974,2274,1.974,2275,1.974,2276,1.974,2277,1.974,2278,1.974,2279,1.974,2280,1.974,2281,1.974,2282,1.974,2283,1.974,2284,1.974,2285,1.974,2286,1.974,2287,1.974,2288,1.974,2289,1.974,2290,1.974,2291,2.821,2292,1.974,2293,1.974,2294,1.974,2295,1.974,2296,1.974,2297,1.974,2298,1.974,2299,1.974]],["title/interfaces/RecordNode.html",[56,0.141,1796,1.841]],["body/interfaces/RecordNode.html",[8,0.015,14,0.077,15,0.077,16,0.077,22,0.182,38,0.41,46,0.477,52,0.196,53,0.016,54,0.008,55,0.008,56,0.238,58,0.554,60,1.034,61,1.076,63,1.609,65,1.744,66,2.205,67,1.12,70,1.456,71,3.255,72,1.176,74,0.363,75,0.462,76,0.392,77,2.794,78,1.529,79,0.956,80,1.609,81,3.1,82,0.588,83,0.403,84,0.531,87,0.577,88,0.43,89,1.097,90,1.162,91,1.759,92,1.508,93,0.884,94,0.991,95,0.994,96,1.127,100,0.43,101,0.532,102,1.785,103,1.328,104,1.802,105,2.114,110,1.344,111,2.485,112,2.49,113,2.207,114,2.36,115,1.698,116,0.95,117,0.887,118,0.577,127,2.136,128,1.167,130,2.027,131,2.431,132,2.36,133,1.297,135,1.864,141,1.328,142,1.869,144,0.31,149,0.664,150,2.031,151,1.529,153,1.609,156,0.548,157,0.833,159,1.268,162,1.12,163,0.449,164,0.822,166,1.268,167,2.803,168,3.078,169,1.217,170,0.819,171,1.346,172,2.413,175,2.529,181,1.044,184,0.449,185,0.469,186,1.397,187,1.709,188,1.389,189,1.217,191,1.149,193,2.019,197,1.328,200,0.821,220,1.076,228,2.242,231,1.536,243,2.413,244,1.628,245,2.949,250,1.389,254,0.836,259,1.698,265,2.116,268,1.712,279,0.725,280,2.36,285,0.906,287,2.949,290,1.698,298,1.271,301,1.698,304,2.242,305,1.864,308,0.851,310,1.129,311,1.03,312,1.698,313,1.456,314,0.884,316,2.306,328,1.224,329,1.271,331,1.076,333,0.994,334,1.698,335,2.038,336,0.991,337,1.643,338,1.03,342,0.953,353,1.423,354,0.884,355,1.328,387,1.456,407,0.602,418,1.734,419,1.529,420,1.271,423,1.864,424,1.328,425,1.22,437,2.367,440,1.529,441,0.884,442,1.174,443,1.328,445,1.869,446,2.867,447,1.912,456,1.609,459,1.578,460,0.703,462,1.529,463,1.912,464,3.659,465,2.335,466,1.912,467,3.465,468,0.956,469,1.578,470,1.328,471,1.912,472,1.698,477,2.282,478,1.609,479,1.076,484,1.271,485,1.798,522,2.242,525,1.609,527,3.204,537,1.698,538,2.54,543,0.956,545,1.389,560,1.609,673,1.529,686,1.615,835,1.389,1023,1.609,1035,1.167,1045,2.413,1113,1.456,1126,3.322,1234,2.805,1364,1.076,1369,1.071,1373,1.798,1394,3.659,1421,1.609,1443,1.348,1472,1.912,1519,1.912,1522,2.046,1599,1.328,1634,2.49,1676,2.046,1789,3.659,1790,1.798,1791,2.49,1792,2.206,1793,2.206,1794,2.949,1795,2.36,1796,3.667,1797,2.206,1798,1.609,1799,3.236,1800,2.637,1801,2.529,1802,2.206,1803,2.206,1804,1.456,1805,2.206,1806,2.206,1807,2.206,1808,2.206,1809,2.206,1810,2.206,1811,1.798,1812,2.637,1813,2.206,1814,1.609,1815,3.001,1816,2.206,1817,3.554,1818,2.206,1819,2.206,1820,3.001,1821,2.046,1822,2.206,1823,2.206,1824,2.046,1825,2.949,1826,1.798,1827,3.001,1828,1.798,1829,1.456,1830,2.206,1831,2.206,1832,2.206,1833,2.206,1834,1.912,1835,2.206,1836,2.206,1837,2.206,1838,3.236,1839,2.206,1840,2.206,1841,2.206,1842,2.206,1843,2.206,1844,1.912,1845,2.805,1846,3.001,1847,2.206,1848,2.206,1849,2.206,1850,3.659,1851,2.206,1852,2.206,1853,2.206,1854,3.833,1855,2.206,1856,2.206,1857,2.206,1858,2.206,1859,2.206,1860,3.236,1861,3.236,1862,3.236,1863,2.206,1864,3.236,1865,2.206,1866,1.529,1867,2.206,1868,1.912,1869,2.206,1870,3.833,1871,1.912,1872,2.206,1873,1.609,1874,2.206,1875,3.236,1876,2.206,1877,2.206,1878,1.698,1879,2.206,1880,2.206,1881,2.206,1882,2.206,1883,1.864,1884,2.206,1885,2.206,1886,1.167,1887,2.206,1888,2.206,1889,2.206,1890,2.206,1891,3.236,1892,2.206,1893,2.206,1894,2.206,1895,2.206,1896,2.206,1897,2.206,1898,2.206,1899,2.206,1900,2.206,1901,2.206,1902,2.046,1903,2.206,1904,2.206,1905,3.236,1906,2.206,1907,2.206,1908,2.206,1909,2.206,1910,2.206,1911,1.798,1912,2.206,1913,2.206,1914,2.206,1915,2.206,1916,2.206,1917,2.206,1918,2.206,1919,2.206,1920,2.206,1921,2.206,1922,3.833,1923,2.206,1924,2.206,1925,3.236,1926,2.206,1927,2.206,1928,4.221,1929,2.206,1930,3.286,1931,2.786,1932,4.221,1933,4.221,1934,2.786,1935,2.206,1936,2.206,1937,2.206,1938,4.221,1939,3.204,1940,2.206,1941,2.046,1942,3.833,1943,2.206,1944,3.833,1945,3.236,1946,3.236,1947,3.236,1948,3.236,1949,2.206,1950,2.206,1951,3.833,1952,3.833,1953,2.206,1954,2.136,1955,2.206,1956,2.206,1957,2.206,1958,2.206,1959,2.206,1960,2.206,1961,1.912,1962,1.609,1963,2.206,1964,1.798,1965,2.206,1966,2.206]],["title/classes/RecordsProvider.html",[53,0.021,443,1.679]],["body/classes/RecordsProvider.html",[8,0.015,12,0.716,14,0.067,15,0.067,16,0.067,22,0.172,38,0.359,46,0.459,52,0.188,53,0.014,54,0.007,55,0.007,56,0.215,60,0.903,61,1.925,63,1.406,65,1.659,66,2.16,67,0.979,70,1.273,71,3.097,72,1.169,74,0.351,75,0.432,76,0.87,77,2.579,78,1.336,79,1.268,80,1.406,81,2.949,82,0.543,83,0.406,84,0.556,87,0.505,88,0.375,89,1.096,90,1.167,91,1.645,92,1.659,93,1.583,94,1.083,95,0.868,96,1.203,100,0.375,101,0.465,102,3.023,103,1.761,104,1.911,105,1.615,110,1.257,111,2.457,112,2.252,113,2.274,114,2.134,115,1.484,116,0.935,117,0.899,118,0.766,124,1.761,127,2.606,128,1.02,130,2.089,131,2.274,132,2.134,133,1.173,135,1.685,141,1.761,142,1.893,144,0.499,149,0.653,150,2.06,151,1.336,153,1.406,156,0.669,157,0.806,159,1.307,162,0.979,163,0.91,164,0.787,166,1.17,167,2.873,168,2.88,169,1.064,170,0.716,171,1.322,172,2.227,175,2.334,181,0.963,182,2.013,184,0.596,185,1.129,186,1.307,187,1.653,188,2.227,189,1.064,191,1.075,193,2.048,197,1.761,200,0.799,220,0.94,228,2.028,231,1.418,243,2.227,244,1.523,245,2.722,250,1.843,254,0.79,259,1.484,265,2.013,268,1.645,279,0.685,280,2.134,285,0.882,287,2.722,290,1.484,295,0.979,297,1.593,298,1.111,301,1.484,304,2.451,305,1.685,308,0.744,310,1.41,311,1.126,312,1.484,313,1.273,314,1.173,316,2.129,328,1.265,329,1.111,331,1.427,333,1.778,334,1.484,335,1.843,336,0.897,337,1.486,338,0.932,342,0.862,353,1.466,354,1.173,355,1.16,376,1.406,377,2.385,378,1.173,379,2.385,380,2.385,381,1.086,383,2.252,384,2.252,385,2.252,386,2.037,387,2.334,388,1.216,389,2.252,390,2.252,391,1.571,392,2.013,394,1.993,395,1.336,396,4.67,399,1.671,400,1.571,401,1.671,402,1.671,403,1.671,404,1.671,405,1.671,407,0.958,408,1.369,413,1.111,414,1.671,415,1.571,416,0.744,417,1.571,418,1.791,419,2.028,420,1.685,421,1.111,422,0.663,423,2.037,424,2.129,425,1.257,426,1.671,427,0.94,428,1.111,430,1.788,431,1.111,432,1.671,433,1.111,434,1.671,437,2.436,440,1.336,441,0.773,442,0.897,443,1.761,445,2.264,446,2.877,447,3.066,456,1.406,459,1.427,460,0.614,461,2.104,462,2.028,463,2.537,464,3.874,465,2.317,466,2.537,467,3.467,468,1.268,469,1.725,470,1.761,471,2.537,472,2.252,473,1.788,474,1.788,475,1.788,476,1.214,477,2.269,478,2.134,479,1.725,480,1.788,481,1.788,482,1.02,483,2.104,484,1.685,485,2.385,522,2.028,525,1.406,527,3.157,537,2.252,538,2.376,543,0.835,545,1.214,560,1.406,673,1.336,686,1.537,835,1.214,1023,1.406,1035,1.02,1045,2.227,1113,1.273,1126,3.066,1234,2.537,1364,0.94,1369,0.968,1373,1.571,1394,3.423,1421,1.406,1443,1.219,1472,1.671,1519,1.671,1522,1.788,1599,1.16,1634,2.252,1676,1.788,1789,3.423,1790,2.385,1791,2.722,1792,1.929,1793,1.929,1794,2.252,1795,1.406,1796,3.578,1797,1.929,1798,1.406,1799,2.927,1800,2.385,1801,2.334,1802,1.929,1803,1.929,1804,1.273,1805,1.929,1806,1.929,1807,1.929,1808,1.929,1809,1.929,1810,1.929,1811,1.571,1812,2.385,1813,1.929,1814,1.406,1815,2.714,1816,1.929,1817,3.28,1818,1.929,1819,1.929,1820,2.714,1821,1.788,1822,1.929,1823,2.927,1824,2.714,1825,3.267,1826,2.385,1827,3.662,1828,2.385,1829,1.273,1830,1.929,1831,1.929,1832,1.929,1833,1.929,1834,1.671,1835,1.929,1836,1.929,1837,1.929,1838,2.927,1839,1.929,1840,1.929,1841,1.929,1842,1.929,1843,1.929,1844,1.671,1845,2.537,1846,2.714,1847,1.929,1848,1.929,1849,1.929,1850,3.423,1851,1.929,1852,1.929,1853,1.929,1854,3.537,1855,1.929,1856,1.929,1857,1.929,1858,1.929,1859,1.929,1860,2.927,1861,2.927,1862,2.927,1863,1.929,1864,2.927,1865,1.929,1866,1.336,1867,1.929,1868,1.671,1869,1.929,1870,3.537,1871,1.671,1872,1.929,1873,1.406,1874,1.929,1875,2.927,1876,1.929,1877,1.929,1878,1.484,1879,1.929,1880,1.929,1881,1.929,1882,1.929,1883,1.685,1884,1.929,1885,1.929,1886,1.02,1887,1.929,1888,1.929,1889,1.929,1890,1.929,1891,2.927,1892,1.929,1893,1.929,1894,1.929,1895,1.929,1896,1.929,1897,1.929,1898,1.929,1899,1.929,1900,1.929,1901,1.929,1902,1.788,1903,1.929,1904,1.929,1905,2.927,1906,1.929,1907,1.929,1908,1.929,1909,1.929,1910,1.929,1911,1.571,1912,1.929,1913,1.929,1914,1.929,1915,1.929,1916,1.929,1917,1.929,1918,1.929,1919,1.929,1920,1.929,1921,1.929,1922,3.537,1923,1.929,1924,1.929,1925,2.927,1926,1.929,1927,1.929,1928,3.949,1929,1.929,1930,3.157,1931,2.606,1932,3.949,1933,3.949,1934,2.606,1935,1.929,1936,1.929,1937,1.929,1938,3.949,1939,3.065,1940,1.929,1941,1.788,1942,3.537,1943,1.929,1944,3.537,1945,2.927,1946,2.927,1947,2.927,1948,2.927,1949,1.929,1950,1.929,1951,3.537,1952,3.537,1953,1.929,1954,1.931,1955,1.929,1956,1.929,1957,1.929,1958,1.929,1959,1.929,1960,1.929,1961,1.671,1962,1.406,1963,1.929,1964,1.571,1965,1.929,1966,1.929,2087,2.104,2946,2.697,2947,2.697]],["title/components/ResultTimeline.html",[620,0.45,739,1.476]],["body/components/ResultTimeline.html",[7,1.608,8,0.015,9,1.543,10,1.543,14,0.159,15,0.106,16,0.106,17,1.482,22,0.197,24,0.619,31,1.608,46,0.291,48,1.878,52,0.164,53,0.023,54,0.012,55,0.01,66,1.219,74,0.213,75,0.499,76,0.719,83,0.396,84,0.499,87,0.795,88,0.592,89,0.566,90,0.619,107,1.874,116,0.54,117,0.914,143,1.898,144,0.509,149,0.398,155,1.086,163,1.098,164,0.914,184,0.619,185,0.861,200,0.873,254,0.941,279,0.653,285,0.686,381,1.504,392,2.121,394,1.688,407,0.848,408,1.395,465,2.086,494,1.393,526,1.952,579,3.301,620,0.735,621,1.608,622,2.333,623,1.482,625,1.543,626,1.914,629,1.628,630,1.714,631,1.71,648,1.393,653,2.438,654,2.438,663,1.757,684,2.467,699,2.438,700,1.898,701,2.235,702,1.914,703,3.345,704,1.914,708,2.551,709,2.551,710,1.482,711,1.914,712,1.677,713,2.551,714,1.317,715,3.059,716,1.543,717,1.543,718,1.677,719,1.608,720,1.482,721,1.608,722,1.914,723,1.914,724,1.543,725,1.507,726,2.869,727,1.914,728,1.677,729,1.751,730,1.608,731,1.914,732,1.608,733,2.235,734,1.914,735,1.608,736,1.608,737,1.914,738,1.482,739,2.57,740,2.677,741,1.543,742,1.859,743,1.914,744,1.914,750,2.977,783,3.506,800,1.317,801,1.973,803,1.424,894,3.04,974,1.829,998,2.333,1022,2.217,1149,3.511,1258,3.317,1294,3.117,1798,2.954,2137,3.329,2948,5.896,2949,3.317,2950,5.664,2951,6.37,2952,7.64,2953,6.794,2954,6.794,2955,3.739,2956,6.37,2957,6.37,2958,6.37,2959,6.37,2960,4.251,2961,5.664,2962,7.076,2963,4.251,2964,4.251,2965,4.251,2966,5.664,2967,4.251,2968,4.251,2969,4.251,2970,4.251,2971,5.894,2972,4.556,2973,4.251,2974,4.251,2975,4.251,2976,4.251,2977,4.251,2978,4.251,2979,6.37,2980,4.251,2981,3.688,2982,3.688,2983,3.688,2984,3.688,2985,4.251,2986,4.251,2987,4.251,2988,4.251,2989,4.251,2990,4.251,2991,5.664,2992,4.251,2993,2.819,2994,4.251,2995,4.251,2996,4.251,2997,5.664,2998,4.251,2999,4.251,3000,4.251,3001,4.251,3002,4.251,3003,4.251,3004,5.664,3005,4.251,3006,4.251,3007,4.225,3008,5.664,3009,4.251,3010,4.251,3011,4.251,3012,4.251,3013,5.664,3014,5.664,3015,5.664,3016,5.664,3017,5.664,3018,4.251,3019,4.251,3020,5.664,3021,4.251,3022,4.251,3023,4.251,3024,4.251,3025,4.251,3026,4.251,3027,4.251,3028,5.664,3029,4.251,3030,5.664,3031,4.251,3032,4.251,3033,4.251,3034,4.251,3035,4.251,3036,4.251,3037,4.251,3038,4.251,3039,4.251,3040,4.251,3041,4.251,3042,4.251,3043,4.251,3044,4.251,3045,4.251,3046,4.251,3047,4.251,3048,4.251,3049,4.251,3050,4.251,3051,4.251,3052,4.251,3053,4.251,3054,4.251,3055,4.251,3056,4.251]],["title/classes/SelectedRecordsProvider.html",[53,0.021,3057,3.045]],["body/classes/SelectedRecordsProvider.html",[8,0.015,12,1.19,14,0.112,15,0.112,16,0.112,22,0.208,52,0.13,53,0.024,54,0.011,55,0.011,56,0.162,60,1.501,61,2.418,72,0.838,74,0.225,75,0.459,76,0.97,79,1.388,83,0.402,84,0.543,87,0.838,88,0.624,89,1.066,90,1.123,92,1.671,93,2.064,94,0.982,95,1.443,96,1.225,102,3.181,103,1.929,104,1.841,105,2.314,106,2.906,110,1.336,116,0.569,117,0.84,118,0.838,124,2.524,127,2.768,130,1.695,142,1.608,144,0.542,146,2.13,148,1.747,149,0.419,150,1.961,156,0.71,159,1.06,163,1.048,167,2.737,182,2.379,184,0.854,185,1.218,186,1.748,187,1.641,188,3.123,189,1.768,191,0.873,193,1.913,197,2.524,200,0.492,243,2.641,285,0.543,291,1.285,295,2.13,296,2.466,297,2.234,304,2.221,310,1.517,311,1.02,314,1.285,328,1.142,330,2.337,331,1.563,333,2.106,353,1.19,354,1.285,376,2.337,377,3.418,378,1.681,379,3.418,380,3.418,381,1.557,383,3.228,384,3.228,385,3.228,386,2.693,387,2.768,388,1.706,389,3.228,390,3.228,391,2.611,392,2.152,394,2.274,395,2.221,396,4.997,399,2.778,400,2.611,401,2.778,402,2.778,403,2.778,404,2.778,405,2.778,407,1.036,408,1.618,413,1.846,414,2.778,415,2.611,416,1.236,417,2.611,418,1.618,419,2.221,420,1.846,421,1.846,422,1.102,423,1.846,424,2.524,425,1.02,426,2.778,427,1.563,428,1.846,431,1.846,432,2.778,433,1.846,434,2.778,437,2.754,439,2.524,440,3.437,443,3.098,445,2.662,446,2.857,447,4.299,461,3.497,462,2.221,463,2.778,464,3.636,465,2.117,466,2.778,467,2.641,468,1.388,469,1.563,470,2.814,471,2.778,472,2.466,473,2.972,474,2.972,475,2.972,476,2.018,477,1.627,478,2.337,479,2.045,480,2.972,481,2.972,482,1.695,483,3.497,484,1.846,485,2.611,511,0.944,543,1.817,828,2.857,1073,2.985,1230,1.846,1390,3.888,1391,4.118,1495,3.888,1496,3.888,2103,3.888,2140,2.524,2189,3.228,3057,4.577,3058,5.672,3059,4.195,3060,5.088,3061,5.088,3062,5.865,3063,5.865,3064,5.865,3065,6.538,3066,5.865,3067,4.481,3068,4.481,3069,2.337,3070,5.865,3071,4.481,3072,4.481,3073,4.481,3074,4.481,3075,4.481,3076,4.481]],["title/interfaces/StructuralEdgeType.html",[56,0.141,446,1.607]],["body/interfaces/StructuralEdgeType.html",[8,0.015,14,0.073,15,0.073,16,0.073,22,0.178,38,0.392,46,0.471,52,0.194,53,0.016,54,0.008,55,0.008,56,0.234,58,0.529,60,0.987,61,1.027,63,1.536,65,1.776,66,2.213,67,1.069,70,1.39,71,3.539,72,1.285,74,0.359,75,0.483,76,0.783,77,2.719,78,1.459,79,0.912,80,1.536,81,3.312,82,0.572,83,0.404,84,0.549,87,0.551,88,0.41,89,1.094,90,1.162,91,1.925,92,1.475,93,0.844,94,0.958,95,0.948,96,1.15,100,0.41,101,0.508,102,1.725,103,1.267,104,1.824,105,2.058,110,1.314,111,2.444,112,2.406,113,2.148,114,2.28,115,1.621,116,0.942,117,0.889,118,0.551,127,2.063,128,1.654,130,1.973,131,2.754,132,2.28,133,1.253,135,1.801,141,1.267,142,1.879,144,0.358,149,0.656,150,2.04,151,1.459,153,1.536,156,0.53,157,0.824,159,1.234,162,2.095,163,0.429,164,0.865,166,1.583,167,2.859,168,3.215,169,1.162,170,0.782,171,1.338,172,2.348,175,2.461,181,1.016,184,0.429,185,0.448,186,1.366,187,1.69,188,1.326,189,1.162,191,1.124,193,2.045,197,1.267,200,0.813,220,1.027,228,2.167,231,1.654,243,2.348,244,1.592,245,3.176,250,1.326,254,0.82,259,1.621,265,2.081,268,1.839,279,0.745,280,2.28,285,0.92,287,2.87,290,1.621,298,1.213,301,1.621,304,2.167,305,1.801,308,0.812,310,1.099,311,0.996,312,2.406,313,1.39,314,0.844,316,2.244,328,1.201,329,1.801,331,1.027,333,0.948,334,1.621,335,1.969,336,0.958,337,1.588,338,0.996,342,0.921,353,1.637,354,0.844,355,1.267,387,2.063,407,0.582,418,1.701,419,1.459,420,1.213,423,1.801,424,1.267,425,1.564,437,2.332,440,1.459,441,0.844,442,0.958,443,1.267,445,1.818,446,2.89,447,1.825,456,1.536,459,1.525,460,0.996,462,1.459,463,1.825,464,3.577,465,2.323,466,1.825,467,3.46,468,0.912,469,1.525,470,1.267,471,1.825,472,1.621,477,2.239,478,2.28,479,1.027,484,1.213,485,1.716,522,2.167,525,1.536,527,3.242,537,1.621,538,2.484,543,0.912,545,1.326,560,2.28,673,1.459,686,1.589,835,1.969,1023,2.28,1035,1.654,1045,2.909,1113,2.063,1126,3.232,1234,2.71,1364,1.027,1369,1.366,1373,2.548,1394,4.258,1421,1.536,1443,1.303,1472,1.825,1519,1.825,1522,1.953,1599,1.267,1634,2.406,1676,1.953,1789,3.577,1790,1.716,1791,2.406,1792,2.106,1793,2.106,1794,2.87,1795,1.536,1796,3.626,1797,3.127,1798,2.28,1799,4.127,1800,3.363,1801,3.049,1802,3.127,1803,3.127,1804,2.063,1805,3.127,1806,3.127,1807,3.127,1808,3.127,1809,3.127,1810,3.127,1811,2.548,1812,3.363,1813,3.127,1814,2.28,1815,3.827,1816,3.127,1817,3.827,1818,3.127,1819,3.127,1820,3.827,1821,1.953,1822,2.106,1823,2.106,1824,1.953,1825,2.87,1826,1.716,1827,2.9,1828,1.716,1829,1.39,1830,2.106,1831,2.106,1832,2.106,1833,2.106,1834,1.825,1835,2.106,1836,2.106,1837,2.106,1838,3.127,1839,2.106,1840,2.106,1841,2.106,1842,2.106,1843,2.106,1844,1.825,1845,2.71,1846,2.9,1847,2.106,1848,2.106,1849,2.106,1850,3.577,1851,2.106,1852,2.106,1853,2.106,1854,3.73,1855,2.106,1856,2.106,1857,2.106,1858,2.106,1859,2.106,1860,3.127,1861,3.127,1862,3.127,1863,2.106,1864,3.127,1865,2.106,1866,1.459,1867,2.106,1868,1.825,1869,2.106,1870,3.73,1871,1.825,1872,2.106,1873,1.536,1874,2.106,1875,3.127,1876,2.106,1877,2.106,1878,1.621,1879,2.106,1880,2.106,1881,2.106,1882,2.106,1883,1.801,1884,2.106,1885,2.106,1886,1.114,1887,2.106,1888,2.106,1889,2.106,1890,2.106,1891,3.127,1892,2.106,1893,2.106,1894,2.106,1895,2.106,1896,2.106,1897,2.106,1898,2.106,1899,2.106,1900,2.106,1901,2.106,1902,1.953,1903,2.106,1904,2.106,1905,3.127,1906,2.106,1907,2.106,1908,2.106,1909,2.106,1910,2.106,1911,1.716,1912,2.106,1913,2.106,1914,2.106,1915,2.106,1916,2.106,1917,2.106,1918,2.106,1919,2.106,1920,2.106,1921,2.106,1922,3.73,1923,2.106,1924,2.106,1925,3.127,1926,2.106,1927,2.106,1928,4.127,1929,2.106,1930,3.242,1931,2.724,1932,4.127,1933,4.127,1934,2.724,1935,2.106,1936,2.106,1937,2.106,1938,4.127,1939,3.156,1940,2.106,1941,1.953,1942,3.73,1943,2.106,1944,3.73,1945,3.127,1946,3.127,1947,3.127,1948,3.127,1949,2.106,1950,2.106,1951,3.73,1952,3.73,1953,2.106,1954,2.063,1955,2.106,1956,2.106,1957,2.106,1958,2.106,1959,2.106,1960,2.106,1961,1.825,1962,1.536,1963,2.106,1964,1.716,1965,2.106,1966,2.106]],["title/interfaces/TimelineAggregation.html",[56,0.141,772,1.933]],["body/interfaces/TimelineAggregation.html",[8,0.015,11,1.694,12,0.695,13,1.648,14,0.065,15,0.065,16,0.065,22,0.212,24,0.381,38,0.348,42,0.877,46,0.424,48,1.444,52,0.186,53,0.014,54,0.012,55,0.007,56,0.197,58,0.471,65,1.063,72,1.018,74,0.131,75,0.313,76,0.842,82,0.746,83,0.363,84,0.605,85,2.207,86,2.545,87,0.49,88,0.365,96,1.052,97,1.341,98,1.917,99,0.51,100,0.557,101,0.452,107,1.5,110,0.596,113,1.078,116,0.617,118,0.49,144,0.424,145,1.366,146,1.453,147,2.432,148,0.78,149,0.659,155,1.642,156,0.929,157,0.913,158,1.179,163,0.792,164,0.803,171,1.355,176,2.695,177,1.514,181,1.059,184,0.381,185,0.977,186,0.62,191,1.291,192,1.722,196,1.559,200,0.845,203,1.236,204,1.236,205,1.236,208,1.441,211,0.991,222,1.127,224,0.951,231,1.393,234,1.441,235,1.441,238,1.441,244,1.34,254,0.724,265,1.289,266,1.441,267,3.222,268,1.195,279,0.813,285,0.485,299,1.722,310,0.552,311,0.911,319,1.033,320,0.811,328,1.059,336,0.574,338,0.596,342,0.552,349,2.293,363,1.559,378,1.147,381,1.063,398,2.449,407,0.532,408,0.574,416,1.104,418,0.722,420,1.078,422,0.644,423,1.078,425,1.106,427,1.897,437,1.694,439,1.127,441,1.559,442,0.574,453,1.078,458,3.222,459,1.396,460,0.911,465,1.9,469,0.913,470,2.091,494,0.644,511,0.552,525,1.366,526,1.104,527,1.889,541,1.68,543,0.811,564,3.222,582,2.767,620,0.56,624,1.963,629,1.023,630,0.552,631,0.552,633,0.991,635,0.991,636,0.843,637,1.565,642,1.289,648,0.644,650,1.366,663,1.773,684,2.467,686,1.581,714,0.811,742,1.849,745,1.366,747,1.722,750,3.182,751,0.913,754,1.179,758,2.945,759,3.185,772,3.367,775,2.188,777,1.694,778,1.565,780,1.628,781,1.802,783,2.673,796,2.128,800,0.811,801,1.24,803,1.341,810,4.579,819,2.146,826,0.877,830,0.78,831,1.526,835,1.179,841,0.877,846,1.127,848,1.033,849,1.127,850,1.078,866,2.904,876,1.366,899,1.526,900,4.488,901,1.526,905,2.202,906,2.904,907,1.526,909,1.236,910,1.526,914,1.526,916,1.526,917,1.526,926,1.236,974,1.127,977,1.033,993,1.526,994,1.236,997,1.179,998,1.648,999,1.298,1000,1.179,1004,1.648,1005,1.033,1010,1.579,1024,1.802,1025,1.526,1035,2.058,1045,1.179,1071,1.579,1073,2.659,1076,1.983,1078,1.236,1079,1.983,1084,1.078,1114,1.366,1127,1.623,1140,1.147,1152,2.188,1160,1.127,1169,2.07,1219,1.179,1230,1.078,1286,1.441,1287,1.737,1294,1.441,1339,1.722,1342,3.034,1364,2.369,1367,1.298,1369,1.287,1391,2.533,1439,1.366,1443,0.78,1451,1.737,1452,1.737,1454,1.298,1473,1.236,1499,1.737,1566,2.654,1656,1.623,1665,1.526,1671,1.737,1685,2.087,1686,0.913,1758,2.654,1766,1.441,1798,2.087,1825,1.441,1999,1.298,2000,1.298,2008,1.366,2015,1.078,2020,1.366,2066,1.366,2094,1.236,2136,1.648,2144,1.579,2151,1.236,2241,1.078,2316,1.298,2319,2.984,2320,1.298,2321,1.298,2331,1.623,2339,1.441,2355,1.623,2359,1.526,2394,1.623,2474,2.654,2604,2.673,2607,1.737,2663,2.533,2665,1.366,2674,1.623,2683,1.623,2796,1.623,2808,1.526,2809,1.441,2810,1.441,2845,1.441,2955,2.202,2993,1.737,3007,1.737,3069,1.366,3077,3.17,3078,3.17,3079,3.17,3080,4.741,3081,3.89,3082,2.862,3083,1.873,3084,2.533,3085,3.185,3086,2.202,3087,3.415,3088,3.89,3089,1.526,3090,2.862,3091,1.873,3092,3.601,3093,3.17,3094,1.873,3095,1.873,3096,2.654,3097,2.654,3098,1.526,3099,1.526,3100,1.526,3101,1.526,3102,1.873,3103,2.831,3104,1.873,3105,2.862,3106,1.873,3107,1.873,3108,1.526,3109,1.526,3110,1.526,3111,1.526,3112,1.526,3113,2.332,3114,1.526,3115,1.526,3116,1.873,3117,1.623,3118,1.366,3119,1.873,3120,1.873,3121,1.873,3122,1.873,3123,1.623,3124,1.873,3125,1.873,3126,3.89,3127,2.332,3128,1.873,3129,1.873,3130,1.873,3131,1.873,3132,1.873,3133,2.862,3134,1.873,3135,1.873,3136,1.873,3137,1.526,3138,1.873,3139,1.873,3140,1.526,3141,2.862,3142,1.873,3143,1.873,3144,4.191,3145,1.873,3146,1.526,3147,1.873,3148,2.862,3149,1.526,3150,1.873,3151,1.873,3152,1.873,3153,1.873,3154,1.873,3155,2.862,3156,1.873,3157,1.873,3158,1.873,3159,1.873,3160,1.873,3161,1.873,3162,1.873,3163,1.873,3164,2.862,3165,2.332,3166,1.873,3167,1.873,3168,1.526,3169,1.873,3170,1.873,3171,1.873,3172,1.873,3173,1.873,3174,1.873,3175,1.873,3176,1.873,3177,2.862,3178,1.873,3179,1.873,3180,1.873,3181,1.873,3182,1.873,3183,1.873,3184,1.873,3185,1.873,3186,1.873,3187,1.873,3188,1.526,3189,2.862,3190,1.873,3191,3.474,3192,2.862,3193,4.191,3194,1.873,3195,2.862,3196,5.28,3197,1.873,3198,1.873,3199,1.873,3200,2.862,3201,3.89,3202,1.873,3203,2.862,3204,2.862,3205,1.873,3206,2.862,3207,1.873,3208,3.474,3209,3.474,3210,2.862,3211,1.526,3212,1.873,3213,1.873,3214,1.873,3215,1.873,3216,1.873,3217,1.873,3218,1.873,3219,1.873,3220,1.873,3221,1.873,3222,2.862,3223,2.862,3224,1.873,3225,2.862,3226,2.862,3227,1.873,3228,1.873,3229,1.873,3230,1.873,3231,1.873,3232,1.873,3233,2.862,3234,1.873,3235,4.419,3236,2.831,3237,3.89,3238,1.873,3239,2.862,3240,4.419,3241,1.873,3242,1.873,3243,1.873,3244,1.873,3245,1.873,3246,1.873,3247,1.873,3248,2.862,3249,1.873,3250,1.873,3251,1.873,3252,1.873,3253,1.873,3254,1.873,3255,1.873,3256,1.873,3257,1.873,3258,1.526,3259,1.873,3260,1.873,3261,3.474,3262,1.873,3263,1.873,3264,1.873,3265,1.873,3266,1.873,3267,1.873,3268,1.873,3269,1.873,3270,2.862,3271,1.873,3272,1.873,3273,1.873,3274,1.873,3275,1.873,3276,1.873,3277,1.526,3278,1.873,3279,1.873,3280,1.873,3281,1.873,3282,1.873,3283,1.873,3284,1.873,3285,1.873,3286,1.873,3287,2.862,3288,1.873,3289,1.873,3290,1.873,3291,1.873,3292,1.873,3293,1.873,3294,1.873,3295,1.873,3296,1.873,3297,1.873,3298,1.873,3299,1.873,3300,1.873,3301,1.873,3302,1.873,3303,1.873,3304,1.873,3305,1.873,3306,3.474,3307,1.873,3308,1.873,3309,1.873,3310,3.056,3311,1.873,3312,1.873,3313,1.873,3314,1.873,3315,1.873,3316,1.873,3317,1.873,3318,1.873,3319,1.873,3320,1.873,3321,1.873,3322,1.526,3323,1.873,3324,1.873,3325,1.526,3326,1.873,3327,4.191,3328,1.873,3329,1.873,3330,1.526,3331,1.873,3332,1.873,3333,1.873,3334,1.873,3335,1.873,3336,1.873,3337,1.873,3338,1.737,3339,1.873,3340,1.873,3341,1.873,3342,1.873,3343,1.873,3344,1.873,3345,1.873,3346,1.873,3347,1.873,3348,1.873,3349,1.873,3350,2.862,3351,4.741,3352,3.89,3353,2.862,3354,2.862,3355,2.862,3356,2.862,3357,1.873,3358,1.873,3359,1.873,3360,1.873,3361,1.873,3362,1.873,3363,2.862,3364,1.873,3365,1.873,3366,1.873,3367,1.873,3368,2.862,3369,1.873,3370,2.481,3371,1.873]],["title/interfaces/TimelineCombinedAggregations.html",[56,0.141,3087,2.274]],["body/interfaces/TimelineCombinedAggregations.html",[8,0.015,11,1.702,12,0.7,13,1.658,14,0.066,15,0.066,16,0.066,22,0.212,24,0.384,38,0.351,42,0.884,46,0.425,48,1.45,52,0.187,53,0.014,54,0.012,55,0.007,56,0.197,58,0.474,65,1.069,72,1.022,74,0.132,75,0.315,76,0.511,82,0.645,83,0.324,84,0.595,85,2.198,86,2.552,87,0.494,88,0.367,96,1.054,97,1.349,98,1.926,99,0.514,100,0.56,101,0.455,107,1.506,110,0.601,113,1.087,116,0.62,118,0.494,144,0.335,145,1.376,146,1.462,147,2.439,148,0.786,149,0.66,155,1.647,156,0.93,157,0.914,158,1.188,163,0.938,164,0.841,171,1.356,176,3.194,177,1.523,181,1.063,184,0.384,185,0.98,186,0.624,191,1.294,192,1.732,196,1.565,200,0.846,203,1.245,204,1.245,205,1.245,208,1.452,211,0.998,222,1.136,224,0.958,231,1.399,234,1.452,235,1.452,238,1.452,244,1.346,254,0.726,265,1.296,266,1.452,267,3.232,268,1.2,279,0.815,285,0.488,299,1.732,310,0.556,311,0.917,319,1.041,320,0.817,328,1.063,336,0.578,338,0.601,342,0.556,349,2.303,363,1.565,378,1.154,381,1.069,407,0.536,408,0.578,416,1.11,418,0.728,420,1.087,422,0.649,423,1.087,425,1.111,427,1.904,437,1.702,439,1.136,441,1.565,442,0.578,453,1.087,458,3.237,459,1.404,460,0.917,465,1.905,469,0.92,470,2.1,494,0.649,511,0.556,525,1.376,526,1.11,527,1.9,541,1.685,543,0.817,564,3.237,582,2.774,620,0.563,624,1.97,629,1.029,630,0.556,631,0.556,633,0.998,635,0.998,636,0.85,637,1.572,642,1.296,648,0.649,650,1.376,663,1.775,684,2.472,686,1.585,714,0.817,742,1.852,745,1.376,747,1.732,750,3.184,751,0.92,754,1.188,758,2.95,759,3.194,772,3.63,775,2.198,777,1.702,778,1.572,780,1.635,781,1.813,783,2.686,796,2.135,800,0.817,801,1.247,803,1.349,810,4.582,819,2.154,826,0.884,830,0.786,831,1.538,835,1.188,841,0.884,846,1.136,848,1.041,849,1.136,850,1.087,866,2.914,876,1.376,899,1.538,900,4.493,901,1.538,905,2.215,906,1.995,907,1.538,909,1.245,910,1.538,914,1.538,916,1.538,917,1.538,926,1.245,974,1.136,977,1.041,993,1.538,994,1.245,997,1.188,998,1.658,999,1.307,1000,1.188,1004,1.658,1005,1.041,1010,1.588,1024,1.813,1025,1.538,1035,2.066,1045,1.188,1071,1.588,1073,2.667,1076,1.995,1078,1.245,1079,1.995,1084,1.087,1114,1.376,1127,1.636,1140,1.154,1152,2.198,1160,1.136,1169,2.076,1219,1.188,1230,1.087,1286,1.452,1287,1.75,1294,1.452,1339,1.732,1342,3.042,1364,2.374,1367,1.307,1369,1.292,1391,2.545,1439,1.376,1443,0.786,1451,1.75,1452,1.75,1454,1.307,1473,1.245,1499,1.75,1566,2.67,1656,1.636,1665,1.538,1671,1.75,1685,2.099,1686,0.92,1758,2.67,1766,1.452,1798,2.099,1825,1.452,1999,1.307,2000,1.307,2008,1.376,2015,1.087,2020,1.376,2066,1.376,2094,1.245,2136,1.658,2144,1.588,2151,1.245,2241,1.087,2316,1.307,2319,3.12,2320,1.307,2321,1.307,2331,1.636,2339,1.452,2355,1.636,2359,1.538,2394,1.636,2474,2.67,2604,2.686,2607,1.75,2663,2.545,2665,1.376,2674,1.636,2683,1.636,2796,1.636,2808,1.538,2809,1.452,2810,1.452,2845,1.452,2955,2.215,2993,1.75,3007,1.75,3069,1.376,3077,1.538,3078,1.538,3079,1.538,3080,4.752,3081,3.905,3082,2.879,3083,1.887,3084,2.545,3085,3.194,3086,2.215,3087,3.611,3088,4.61,3089,1.538,3090,2.879,3091,1.887,3092,3.611,3093,3.182,3094,1.887,3095,1.887,3096,2.67,3097,2.67,3098,1.538,3099,1.538,3100,1.538,3101,1.538,3102,1.887,3103,2.844,3104,1.887,3105,2.879,3106,1.887,3107,1.887,3108,1.538,3109,1.538,3110,1.538,3111,1.538,3112,1.538,3113,2.346,3114,1.538,3115,1.538,3116,1.887,3117,1.636,3118,1.376,3119,1.887,3120,1.887,3121,1.887,3122,1.887,3123,1.636,3124,1.887,3125,1.887,3126,3.905,3127,2.346,3128,1.887,3129,1.887,3130,1.887,3131,1.887,3132,1.887,3133,2.879,3134,1.887,3135,1.887,3136,1.887,3137,1.538,3138,1.887,3139,1.887,3140,1.538,3141,2.879,3142,1.887,3143,1.887,3144,4.205,3145,1.887,3146,1.538,3147,1.887,3148,2.879,3149,1.538,3150,1.887,3151,1.887,3152,1.887,3153,1.887,3154,1.887,3155,2.879,3156,1.887,3157,1.887,3158,1.887,3159,1.887,3160,1.887,3161,1.887,3162,1.887,3163,1.887,3164,2.879,3165,2.346,3166,1.887,3167,1.887,3168,1.538,3169,1.887,3170,1.887,3171,1.887,3172,1.887,3173,1.887,3174,1.887,3175,1.887,3176,1.887,3177,2.879,3178,1.887,3179,1.887,3180,1.887,3181,1.887,3182,1.887,3183,1.887,3184,1.887,3185,1.887,3186,1.887,3187,1.887,3188,1.538,3189,2.879,3190,1.887,3191,3.491,3192,2.879,3193,4.205,3194,1.887,3195,2.879,3196,5.288,3197,1.887,3198,1.887,3199,1.887,3200,2.879,3201,3.905,3202,1.887,3203,2.879,3204,2.879,3205,1.887,3206,2.879,3207,1.887,3208,3.491,3209,3.491,3210,2.879,3211,1.538,3212,1.887,3213,1.887,3214,1.887,3215,1.887,3216,1.887,3217,1.887,3218,1.887,3219,1.887,3220,1.887,3221,1.887,3222,2.879,3223,2.879,3224,1.887,3225,2.879,3226,2.879,3227,1.887,3228,1.887,3229,1.887,3230,1.887,3231,1.887,3232,1.887,3233,2.879,3234,1.887,3235,4.432,3236,2.844,3237,3.905,3238,1.887,3239,2.879,3240,4.432,3241,1.887,3242,1.887,3243,1.887,3244,1.887,3245,1.887,3246,1.887,3247,1.887,3248,2.879,3249,1.887,3250,1.887,3251,1.887,3252,1.887,3253,1.887,3254,1.887,3255,1.887,3256,1.887,3257,1.887,3258,1.538,3259,1.887,3260,1.887,3261,3.491,3262,1.887,3263,1.887,3264,1.887,3265,1.887,3266,1.887,3267,1.887,3268,1.887,3269,1.887,3270,2.879,3271,1.887,3272,1.887,3273,1.887,3274,1.887,3275,1.887,3276,1.887,3277,1.538,3278,1.887,3279,1.887,3280,1.887,3281,1.887,3282,1.887,3283,1.887,3284,1.887,3285,1.887,3286,1.887,3287,2.879,3288,1.887,3289,1.887,3290,1.887,3291,1.887,3292,1.887,3293,1.887,3294,1.887,3295,1.887,3296,1.887,3297,1.887,3298,1.887,3299,1.887,3300,1.887,3301,1.887,3302,1.887,3303,1.887,3304,1.887,3305,1.887,3306,3.491,3307,1.887,3308,1.887,3309,1.887,3310,3.066,3311,1.887,3312,1.887,3313,1.887,3314,1.887,3315,1.887,3316,1.887,3317,1.887,3318,1.887,3319,1.887,3320,1.887,3321,1.887,3322,1.538,3323,1.887,3324,1.887,3325,1.538,3326,1.887,3327,4.205,3328,1.887,3329,1.887,3330,1.538,3331,1.887,3332,1.887,3333,1.887,3334,1.887,3335,1.887,3336,1.887,3337,1.887,3338,1.75,3339,1.887,3340,1.887,3341,1.887,3342,1.887,3343,1.887,3344,1.887,3345,1.887,3346,1.887,3347,1.887,3348,1.887,3349,1.887,3350,2.879,3351,4.752,3352,3.905,3353,2.879,3354,2.879,3355,2.879,3356,2.879,3357,1.887,3358,1.887,3359,1.887,3360,1.887,3361,1.887,3362,1.887,3363,2.879,3364,1.887,3365,1.887,3366,1.887,3367,1.887,3368,2.879,3369,1.887,3370,2.495,3371,1.887]],["title/interfaces/TimelineDate.html",[56,0.141,3084,2.035]],["body/interfaces/TimelineDate.html",[8,0.015,11,2.212,12,0.67,14,0.063,15,0.063,16,0.063,22,0.167,24,0.367,34,0.645,46,0.492,52,0.154,53,0.013,54,0.007,55,0.007,56,0.172,58,0.453,74,0.195,75,0.304,82,0.696,83,0.238,84,0.451,87,0.472,88,0.351,116,0.832,117,0.646,133,0.723,134,1.388,140,0.723,144,0.173,149,0.539,156,0.831,157,0.871,159,1.55,164,0.942,169,0.995,170,0.67,171,1.13,181,0.491,184,0.367,187,1.735,191,0.924,192,2.296,195,1.388,200,0.886,211,0.955,220,0.88,222,1.086,230,0.995,231,1.115,244,1.073,252,1.47,254,0.767,268,1.167,271,1.25,279,0.838,285,0.646,299,1.086,309,1.303,311,1.081,319,1.873,331,0.88,344,1.723,363,1.115,388,0.956,392,0.67,407,0.517,424,1.086,439,1.086,452,1.47,459,1.356,460,0.574,465,1.361,469,0.88,484,1.039,493,1.673,494,0.62,511,0.532,526,0.696,541,1.819,543,1.652,563,2.782,579,2.267,620,0.449,623,0.88,624,0.845,625,1.723,629,0.994,630,0.532,631,0.532,633,1.472,635,1.796,636,1.529,637,0.813,642,0.813,643,1.47,648,0.62,653,1.086,663,1.718,672,0.995,673,1.25,681,0.916,684,2.574,686,1.718,700,0.845,701,1.535,720,0.88,740,0.955,742,0.645,750,2.892,751,0.88,754,1.136,758,3.045,759,1.927,762,1.086,781,1.752,796,2.492,800,0.781,801,1.205,803,1.93,819,2.273,828,1.602,840,1.564,842,1.47,866,1.25,906,1.927,939,1.673,946,2.267,950,2.267,951,2.267,953,1.47,954,1.47,955,1.47,956,1.47,957,1.47,958,2.267,960,4.371,961,1.47,962,3.817,963,2.267,966,3.108,974,1.086,977,0.995,983,2.855,985,1.47,994,1.191,997,1.136,998,1.955,999,1.25,1000,1.752,1004,1.602,1005,0.995,1007,1.47,1010,2.105,1015,1.47,1017,3.108,1018,1.086,1022,3.416,1023,1.316,1024,1.752,1044,1.673,1063,1.564,1067,3.108,1071,2.105,1072,1.927,1076,1.25,1079,1.927,1081,2.507,1082,1.47,1083,1.47,1084,2.373,1085,1.673,1099,3.108,1101,1.47,1102,2.766,1103,2.267,1104,1.47,1105,1.47,1107,1.47,1108,1.47,1109,1.47,1113,1.191,1114,1.316,1115,3.108,1117,1.673,1118,1.388,1119,1.673,1120,1.47,1121,1.47,1122,1.47,1123,1.47,1124,1.47,1132,1.673,1140,1.361,1141,3.005,1144,1.673,1148,1.673,1149,1.564,1152,2.857,1156,2.267,1159,1.47,1160,1.086,1161,2.14,1162,1.47,1163,1.47,1164,2.267,1165,2.267,1166,2.267,1167,1.47,1168,1.47,1169,2.3,1170,1.47,1171,1.47,1194,1.47,1202,1.25,1219,1.136,1222,2.267,1223,2.942,1292,3.815,1326,1.723,1339,1.086,1342,2.24,1349,2.612,1353,2.14,1367,1.25,1369,0.597,1384,1.47,1421,1.316,1442,0.995,1454,1.25,1459,1.673,1463,1.804,1469,4.544,1599,1.086,1647,2.411,1673,1.388,1718,1.564,1725,1.673,1765,2.411,1766,1.388,1777,2.782,1783,1.316,1791,1.388,1828,1.47,1866,1.25,1878,1.388,1911,1.47,1962,1.316,1964,2.267,2001,1.388,2015,1.602,2039,1.388,2090,2.579,2092,1.086,2093,1.47,2094,1.836,2136,1.039,2140,1.086,2144,0.995,2163,1.086,2166,0.995,2237,1.086,2241,1.039,2318,1.673,2319,2.043,2348,1.673,2388,1.673,2446,2.782,2498,2.411,2602,1.564,2663,2.028,2665,1.316,2668,3.148,2670,2.782,2672,3.537,2673,2.579,2677,3.148,2684,1.673,2685,1.673,2686,1.673,2687,4.037,2690,1.673,2695,1.673,2696,1.673,2697,2.579,2698,1.673,2699,1.673,2700,3.537,2702,1.673,2704,1.673,2705,1.673,2706,1.673,2707,1.673,2708,1.673,2709,1.673,2710,1.673,2711,1.673,2712,1.673,2713,1.673,2714,3.821,2716,1.673,2741,1.673,2758,1.804,2764,1.673,2765,2.579,2766,1.673,2769,1.673,2770,1.673,2771,1.673,2773,1.673,2774,1.673,2775,3.537,2776,1.673,2777,1.673,2778,1.673,2779,1.673,2780,1.673,2781,1.673,2782,1.673,2783,1.673,2785,1.673,2787,1.673,2788,1.673,2789,1.673,2790,3.148,2791,2.579,2792,1.673,2806,3.148,2809,1.388,2810,1.388,2814,2.782,2815,1.804,2816,3.395,2817,1.804,2818,1.804,2821,1.804,2833,2.782,2835,1.804,2836,2.782,2841,2.782,2842,1.804,2843,4.121,2845,2.14,2851,1.804,2955,2.14,3059,1.804,3069,1.316,3077,1.47,3078,1.47,3079,1.47,3084,2.475,3085,3.33,3089,2.267,3098,1.47,3099,1.47,3100,1.47,3101,1.47,3103,1.47,3108,1.47,3109,1.47,3110,1.47,3111,1.47,3112,1.47,3113,1.47,3114,1.47,3115,1.47,3118,2.475,3127,1.47,3137,3.108,3140,1.47,3146,1.47,3149,1.47,3165,1.47,3168,1.47,3188,2.267,3211,1.47,3236,1.47,3258,1.47,3277,1.47,3310,1.316,3322,1.47,3325,1.47,3330,2.766,3372,1.804,3373,3.035,3374,1.804,3375,2.782,3376,1.969,3377,3.704,3378,1.969,3379,1.969,3380,1.969,3381,1.969,3382,1.969,3383,1.969,3384,1.969,3385,3.035,3386,3.035,3387,3.035,3388,3.035,3389,1.969,3390,1.969,3391,1.969,3392,1.969,3393,1.969,3394,3.704,3395,1.969,3396,1.969,3397,5.451,3398,4.162,3399,1.969,3400,1.969,3401,1.969,3402,1.969,3403,1.969,3404,1.969,3405,1.969,3406,1.969,3407,1.969,3408,1.969,3409,1.969,3410,1.969,3411,1.969,3412,4.162,3413,1.969,3414,3.035,3415,3.035,3416,3.035,3417,1.969,3418,1.969,3419,3.035,3420,1.969,3421,1.969,3422,1.969,3423,1.969,3424,3.035,3425,4.95,3426,1.969,3427,3.035,3428,1.969,3429,3.035,3430,1.969,3431,1.969,3432,1.969,3433,3.035,3434,3.035,3435,3.035,3436,3.704,3437,1.969,3438,1.969,3439,1.969,3440,1.969,3441,1.969,3442,5.356,3443,3.035,3444,3.035,3445,1.969,3446,1.969,3447,1.969,3448,1.969,3449,1.969,3450,1.969,3451,3.035,3452,1.969,3453,1.969,3454,3.035,3455,1.969,3456,3.704,3457,1.969,3458,1.969,3459,1.969,3460,1.969,3461,1.969,3462,3.035,3463,1.969,3464,1.969,3465,4.162,3466,1.969,3467,1.969,3468,3.035,3469,3.035,3470,3.035,3471,1.969,3472,1.969,3473,1.969,3474,1.969,3475,3.704,3476,1.969,3477,1.969,3478,1.969,3479,1.969,3480,1.969,3481,1.969,3482,1.969,3483,1.969,3484,1.969,3485,1.969,3486,3.035,3487,1.969,3488,1.969,3489,1.969,3490,1.969,3491,1.969,3492,1.969,3493,1.969,3494,1.969,3495,3.035,3496,1.969,3497,1.969,3498,1.969,3499,1.969,3500,1.969,3501,1.969,3502,1.969,3503,4.162,3504,3.704,3505,1.969,3506,1.969,3507,1.969,3508,1.969,3509,1.969,3510,1.969,3511,1.969,3512,1.969,3513,1.969,3514,1.969,3515,3.035,3516,1.969,3517,1.969,3518,1.969,3519,3.704,3520,1.969,3521,1.969,3522,1.969,3523,3.035,3524,1.969,3525,1.969,3526,1.969,3527,1.969,3528,1.969,3529,1.969,3530,1.969,3531,1.969,3532,3.035,3533,1.969,3534,1.969,3535,1.969,3536,1.969,3537,1.969,3538,1.969,3539,1.969,3540,1.969,3541,1.969,3542,1.969,3543,1.969,3544,1.969,3545,1.969,3546,1.969,3547,1.969,3548,1.969,3549,1.969,3550,4.95,3551,4.95,3552,3.035,3553,3.035,3554,1.969,3555,1.969,3556,3.035,3557,3.035,3558,3.035,3559,3.035,3560,3.035,3561,3.035,3562,3.035,3563,3.035,3564,3.035,3565,1.969,3566,1.969,3567,3.704,3568,1.969,3569,1.969,3570,1.969,3571,1.969,3572,1.969,3573,1.969,3574,3.035,3575,1.969,3576,1.969,3577,1.969,3578,1.969,3579,1.969,3580,1.969,3581,1.969,3582,1.969,3583,1.969,3584,4.496,3585,1.969,3586,1.969,3587,3.035,3588,1.969,3589,1.969,3590,3.035,3591,1.969,3592,1.969,3593,1.969,3594,3.704,3595,1.969,3596,1.969,3597,1.969,3598,1.969,3599,1.969,3600,1.969,3601,1.969,3602,3.035,3603,1.969,3604,1.969,3605,1.969,3606,1.969,3607,1.969,3608,1.969,3609,1.969,3610,1.969,3611,1.969,3612,1.969,3613,1.969,3614,1.969,3615,1.969,3616,1.969,3617,1.969,3618,1.969,3619,3.035,3620,3.035,3621,3.704,3622,1.969,3623,3.035,3624,1.969,3625,1.969,3626,1.969,3627,3.704,3628,1.969,3629,1.969,3630,1.969,3631,1.969,3632,1.969,3633,1.969,3634,1.969,3635,3.035,3636,1.969,3637,1.969,3638,1.969,3639,1.969,3640,1.969,3641,1.969,3642,1.969,3643,1.969,3644,1.969,3645,3.035,3646,1.969,3647,1.969,3648,3.035,3649,1.969,3650,1.969,3651,1.969,3652,1.969,3653,1.969,3654,1.969,3655,1.969,3656,1.969,3657,1.969,3658,1.969,3659,3.035,3660,1.969,3661,1.969,3662,3.035,3663,1.969,3664,1.969,3665,1.969,3666,1.969,3667,1.969,3668,1.969,3669,3.704,3670,1.969,3671,3.704,3672,1.969,3673,3.035,3674,3.035,3675,1.969,3676,1.804,3677,1.969,3678,1.969,3679,1.804,3680,1.969,3681,1.969,3682,1.969,3683,1.969,3684,1.969,3685,1.969,3686,3.035,3687,4.95,3688,1.969,3689,1.969,3690,1.969,3691,1.804,3692,4.751,3693,3.704,3694,4.95,3695,1.969,3696,1.969,3697,3.035,3698,1.969,3699,1.969,3700,1.969,3701,1.969,3702,1.969,3703,3.035,3704,1.969]],["title/interfaces/TimelineEvent.html",[56,0.141,3085,1.933]],["body/interfaces/TimelineEvent.html",[8,0.015,11,2.201,12,0.661,14,0.062,15,0.062,16,0.062,22,0.166,24,0.362,34,0.636,46,0.491,52,0.153,53,0.013,54,0.007,55,0.007,56,0.17,58,0.447,74,0.193,75,0.301,76,0.828,82,0.693,83,0.343,84,0.524,87,0.466,88,0.347,116,0.828,117,0.301,133,0.714,134,1.37,140,0.714,144,0.171,149,0.536,156,0.828,157,0.869,159,1.543,164,0.946,169,0.982,170,0.661,171,1.125,181,0.485,184,0.362,187,1.73,191,0.916,192,2.279,195,1.37,200,0.885,211,0.942,220,0.868,222,1.071,230,0.982,231,1.103,244,1.062,252,1.451,254,0.762,268,1.489,271,1.233,279,0.835,285,0.641,299,1.071,309,1.29,311,1.072,319,1.857,331,0.868,344,1.709,363,1.103,388,0.947,392,0.661,398,1.733,407,0.512,424,1.071,439,1.071,452,1.451,459,1.342,460,0.567,465,1.869,469,0.868,484,1.025,493,1.651,494,0.612,511,0.524,526,1.461,541,1.96,543,1.64,563,2.753,579,2.243,620,0.444,623,0.868,624,1.774,625,1.709,629,0.983,630,0.524,631,0.524,633,1.456,635,1.781,636,1.516,637,0.802,642,0.802,643,1.451,648,0.612,653,1.071,663,1.715,672,0.982,673,1.233,681,0.904,684,2.566,686,1.712,700,0.834,701,1.519,720,0.868,740,0.942,742,0.636,750,2.885,751,0.868,754,1.121,758,3.037,759,1.907,762,1.071,781,1.733,796,2.483,800,0.771,801,1.192,803,1.919,819,2.259,828,1.585,840,1.543,842,1.451,866,1.233,906,1.907,939,1.651,946,2.243,950,2.243,951,2.243,953,1.451,954,1.451,955,1.451,956,1.451,957,1.451,958,2.243,960,4.361,961,1.451,962,3.801,963,2.243,966,3.086,974,1.071,977,0.982,983,2.838,985,1.451,994,1.175,997,1.121,998,1.938,999,1.233,1000,1.733,1004,1.585,1005,0.982,1007,1.451,1010,2.09,1015,1.451,1017,3.086,1018,1.071,1022,3.401,1023,1.298,1024,1.733,1044,1.651,1063,1.543,1067,3.086,1071,2.09,1072,1.907,1076,1.233,1079,1.907,1081,2.494,1082,1.451,1083,1.451,1084,2.358,1085,1.651,1099,3.086,1101,1.451,1102,2.743,1103,2.243,1104,1.451,1105,1.451,1107,1.451,1108,1.451,1109,1.451,1113,1.175,1114,1.298,1115,3.086,1117,1.651,1118,1.37,1119,1.651,1120,1.451,1121,1.451,1122,1.451,1123,1.451,1124,1.451,1132,1.651,1140,1.349,1141,2.986,1144,1.651,1148,1.651,1149,1.543,1152,2.843,1156,2.243,1159,1.451,1160,1.071,1161,2.118,1162,1.451,1163,1.451,1164,2.243,1165,2.243,1166,2.243,1167,1.451,1168,1.451,1169,2.291,1170,1.451,1171,1.451,1194,1.451,1202,1.233,1219,1.121,1222,2.243,1223,2.917,1292,3.788,1326,1.709,1339,1.071,1342,2.221,1349,2.59,1353,2.118,1367,1.233,1369,0.589,1384,1.451,1421,1.298,1442,0.982,1454,1.233,1459,1.651,1463,1.78,1469,4.532,1599,1.071,1647,2.386,1673,1.37,1718,1.543,1725,1.651,1765,2.386,1766,1.37,1777,2.753,1783,1.298,1791,1.37,1828,1.451,1866,1.233,1878,1.37,1911,1.451,1962,1.298,1964,2.243,2001,1.37,2015,1.585,2039,1.37,2090,2.553,2092,1.071,2093,1.451,2094,1.817,2136,1.025,2140,1.071,2144,0.982,2163,1.071,2166,0.982,2237,1.071,2241,1.025,2318,1.651,2319,2.025,2348,1.651,2388,1.651,2446,2.753,2498,2.386,2602,1.543,2663,2.007,2665,1.298,2668,3.121,2670,2.753,2672,3.512,2673,2.553,2677,3.121,2684,1.651,2685,1.651,2686,1.651,2687,4.015,2690,1.651,2695,1.651,2696,1.651,2697,2.553,2698,1.651,2699,1.651,2700,3.512,2702,1.651,2704,1.651,2705,1.651,2706,1.651,2707,1.651,2708,1.651,2709,1.651,2710,1.651,2711,1.651,2712,1.651,2713,1.651,2714,3.798,2716,1.651,2741,1.651,2758,1.78,2764,1.651,2765,2.553,2766,1.651,2769,1.651,2770,1.651,2771,1.651,2773,1.651,2774,1.651,2775,3.512,2776,1.651,2777,1.651,2778,1.651,2779,1.651,2780,1.651,2781,1.651,2782,1.651,2783,1.651,2785,1.651,2787,1.651,2788,1.651,2789,1.651,2790,3.121,2791,2.553,2792,1.651,2806,3.121,2809,1.37,2810,1.37,2814,2.753,2815,1.78,2816,3.366,2817,1.78,2818,1.78,2821,1.78,2833,2.753,2835,1.78,2836,2.753,2841,2.753,2842,1.78,2843,4.096,2845,2.118,2851,1.78,2955,2.118,3059,1.78,3069,1.298,3077,1.451,3078,1.451,3079,1.451,3084,2.007,3085,3.389,3089,2.243,3098,1.451,3099,1.451,3100,1.451,3101,1.451,3103,1.451,3108,1.451,3109,1.451,3110,1.451,3111,1.451,3112,1.451,3113,1.451,3114,1.451,3115,1.451,3118,2.454,3127,1.451,3137,3.086,3140,1.451,3146,1.451,3149,1.451,3165,1.451,3168,1.451,3188,2.243,3211,1.451,3236,1.451,3258,1.451,3277,1.451,3310,1.298,3322,1.451,3325,1.451,3330,2.743,3372,1.78,3373,3.004,3374,1.78,3375,2.753,3376,4.133,3377,3.673,3378,1.942,3379,1.942,3380,1.942,3381,1.942,3382,1.942,3383,1.942,3384,1.942,3385,3.004,3386,3.004,3387,3.004,3388,3.004,3389,1.942,3390,1.942,3391,1.942,3392,1.942,3393,1.942,3394,3.673,3395,1.942,3396,1.942,3397,5.432,3398,4.133,3399,1.942,3400,1.942,3401,1.942,3402,1.942,3403,1.942,3404,1.942,3405,1.942,3406,1.942,3407,1.942,3408,1.942,3409,1.942,3410,1.942,3411,1.942,3412,4.133,3413,1.942,3414,3.004,3415,3.004,3416,3.004,3417,1.942,3418,1.942,3419,3.004,3420,1.942,3421,1.942,3422,1.942,3423,1.942,3424,3.004,3425,4.926,3426,1.942,3427,3.004,3428,1.942,3429,3.004,3430,1.942,3431,1.942,3432,1.942,3433,3.004,3434,3.004,3435,3.004,3436,3.673,3437,1.942,3438,1.942,3439,1.942,3440,1.942,3441,1.942,3442,5.336,3443,3.004,3444,3.004,3445,1.942,3446,1.942,3447,1.942,3448,1.942,3449,1.942,3450,1.942,3451,3.004,3452,1.942,3453,1.942,3454,3.004,3455,1.942,3456,3.673,3457,1.942,3458,1.942,3459,1.942,3460,1.942,3461,1.942,3462,3.004,3463,1.942,3464,1.942,3465,4.133,3466,1.942,3467,1.942,3468,3.004,3469,3.004,3470,3.004,3471,1.942,3472,1.942,3473,1.942,3474,1.942,3475,3.673,3476,1.942,3477,1.942,3478,1.942,3479,1.942,3480,1.942,3481,1.942,3482,1.942,3483,1.942,3484,1.942,3485,1.942,3486,3.004,3487,1.942,3488,1.942,3489,1.942,3490,1.942,3491,1.942,3492,1.942,3493,1.942,3494,1.942,3495,3.004,3496,1.942,3497,1.942,3498,1.942,3499,1.942,3500,1.942,3501,1.942,3502,1.942,3503,4.133,3504,3.673,3505,1.942,3506,1.942,3507,1.942,3508,1.942,3509,1.942,3510,1.942,3511,1.942,3512,1.942,3513,1.942,3514,1.942,3515,3.004,3516,1.942,3517,1.942,3518,1.942,3519,3.673,3520,1.942,3521,1.942,3522,1.942,3523,3.004,3524,1.942,3525,1.942,3526,1.942,3527,1.942,3528,1.942,3529,1.942,3530,1.942,3531,1.942,3532,3.004,3533,1.942,3534,1.942,3535,1.942,3536,1.942,3537,1.942,3538,1.942,3539,1.942,3540,1.942,3541,1.942,3542,1.942,3543,1.942,3544,1.942,3545,1.942,3546,1.942,3547,1.942,3548,1.942,3549,1.942,3550,4.926,3551,4.926,3552,3.004,3553,3.004,3554,1.942,3555,1.942,3556,3.004,3557,3.004,3558,3.004,3559,3.004,3560,3.004,3561,3.004,3562,3.004,3563,3.004,3564,3.004,3565,1.942,3566,1.942,3567,3.673,3568,1.942,3569,1.942,3570,1.942,3571,1.942,3572,1.942,3573,1.942,3574,3.004,3575,1.942,3576,1.942,3577,1.942,3578,1.942,3579,1.942,3580,1.942,3581,1.942,3582,1.942,3583,1.942,3584,4.469,3585,1.942,3586,1.942,3587,3.004,3588,1.942,3589,1.942,3590,3.004,3591,1.942,3592,1.942,3593,1.942,3594,3.673,3595,1.942,3596,1.942,3597,1.942,3598,1.942,3599,1.942,3600,1.942,3601,1.942,3602,3.004,3603,1.942,3604,1.942,3605,1.942,3606,1.942,3607,1.942,3608,1.942,3609,1.942,3610,1.942,3611,1.942,3612,1.942,3613,1.942,3614,1.942,3615,1.942,3616,1.942,3617,1.942,3618,1.942,3619,3.004,3620,3.004,3621,3.673,3622,1.942,3623,3.004,3624,1.942,3625,1.942,3626,1.942,3627,3.673,3628,1.942,3629,1.942,3630,1.942,3631,1.942,3632,1.942,3633,1.942,3634,1.942,3635,3.004,3636,1.942,3637,1.942,3638,1.942,3639,1.942,3640,1.942,3641,1.942,3642,1.942,3643,1.942,3644,1.942,3645,3.004,3646,1.942,3647,1.942,3648,3.004,3649,1.942,3650,1.942,3651,1.942,3652,1.942,3653,1.942,3654,1.942,3655,1.942,3656,1.942,3657,1.942,3658,1.942,3659,3.004,3660,1.942,3661,1.942,3662,3.004,3663,1.942,3664,1.942,3665,1.942,3666,1.942,3667,1.942,3668,1.942,3669,3.673,3670,1.942,3671,3.673,3672,1.942,3673,3.004,3674,3.004,3675,1.942,3676,1.78,3677,1.942,3678,1.942,3679,1.78,3680,1.942,3681,1.942,3682,1.942,3683,1.942,3684,1.942,3685,1.942,3686,3.004,3687,4.926,3688,1.942,3689,1.942,3690,1.942,3691,1.78,3692,4.725,3693,3.673,3694,4.926,3695,1.942,3696,1.942,3697,3.004,3698,1.942,3699,1.942,3700,1.942,3701,1.942,3702,1.942,3703,3.004,3704,1.942]],["title/interfaces/TimelineEventAggregation.html",[56,0.141,3093,2.274]],["body/interfaces/TimelineEventAggregation.html",[8,0.015,11,1.699,12,0.699,13,1.655,14,0.066,15,0.066,16,0.066,22,0.212,24,0.383,38,0.35,42,0.882,46,0.425,48,1.448,52,0.186,53,0.014,54,0.012,55,0.007,56,0.197,58,0.473,65,1.067,72,1.021,74,0.132,75,0.315,76,0.693,82,0.645,83,0.333,84,0.601,85,2.208,86,2.55,87,0.493,88,0.367,96,1.054,97,1.346,98,1.923,99,0.513,100,0.559,101,0.454,107,1.505,110,0.599,113,1.084,116,0.619,118,0.493,144,0.334,145,1.373,146,1.459,147,2.437,148,0.784,149,0.66,155,1.646,156,0.929,157,0.913,158,1.186,163,0.794,164,0.841,171,1.356,176,2.703,177,1.52,181,1.062,184,0.383,185,0.979,186,0.623,191,1.293,192,1.729,196,1.564,200,0.846,203,1.242,204,1.242,205,1.242,208,1.449,211,0.996,222,1.133,224,0.956,231,1.397,234,1.449,235,1.449,238,1.449,244,1.344,254,0.726,265,1.294,266,1.449,267,3.229,268,1.199,279,0.814,285,0.487,299,1.729,310,0.555,311,0.915,319,1.039,320,0.815,328,1.062,336,0.577,338,0.599,342,0.555,349,2.3,363,1.564,378,1.152,381,1.067,398,1.81,407,0.535,408,0.577,416,1.109,418,0.726,420,1.084,422,0.647,423,1.084,425,1.11,427,1.902,437,1.699,439,1.133,441,1.564,442,0.577,453,1.084,458,3.232,459,1.401,460,0.915,465,1.904,469,0.918,470,2.098,494,0.647,511,0.555,525,1.373,526,1.109,527,1.897,541,1.904,543,0.815,564,3.232,582,2.772,620,0.562,624,2.225,629,1.027,630,0.555,631,0.555,633,0.996,635,0.996,636,0.848,637,1.57,642,1.294,648,0.647,650,1.373,663,1.774,684,2.471,686,1.584,714,0.815,742,1.852,745,1.373,747,1.729,750,3.183,751,0.918,754,1.186,758,2.949,759,3.191,772,3.29,775,2.195,777,1.699,778,1.57,780,1.633,781,1.81,783,2.682,796,2.133,800,0.815,801,1.245,803,1.346,810,4.581,819,2.152,826,0.882,830,0.784,831,1.534,835,1.186,841,0.882,846,1.133,848,1.039,849,1.133,850,1.084,866,2.911,876,1.373,899,1.534,900,4.491,901,1.534,905,2.211,906,1.991,907,1.534,909,1.242,910,1.534,914,1.534,916,1.534,917,1.534,926,1.242,974,1.133,977,1.039,993,1.534,994,1.242,997,1.186,998,1.655,999,1.305,1000,1.186,1004,1.655,1005,1.039,1010,1.586,1024,1.81,1025,1.534,1035,2.064,1045,1.186,1071,1.586,1073,2.665,1076,1.991,1078,1.242,1079,1.991,1084,1.084,1114,1.373,1127,1.632,1140,1.152,1152,2.195,1160,1.133,1169,2.074,1219,1.186,1230,1.084,1286,1.449,1287,1.746,1294,1.449,1339,1.729,1342,3.039,1364,2.373,1367,1.305,1369,1.291,1391,2.542,1439,1.373,1443,0.784,1451,1.746,1452,1.746,1454,1.305,1473,1.242,1499,1.746,1566,2.665,1656,1.632,1665,1.534,1671,1.746,1685,2.096,1686,0.918,1758,2.665,1766,1.449,1798,2.096,1825,1.449,1999,1.305,2000,1.305,2008,1.373,2015,1.084,2020,1.373,2066,1.373,2094,1.242,2136,1.655,2144,1.586,2151,1.242,2241,1.084,2316,1.305,2319,2.988,2320,1.305,2321,1.305,2331,1.632,2339,1.449,2355,1.632,2359,1.534,2394,1.632,2474,2.665,2604,2.682,2607,1.746,2663,2.542,2665,1.373,2674,1.632,2683,1.632,2796,1.632,2808,1.534,2809,1.449,2810,1.449,2845,1.449,2955,2.211,2993,1.746,3007,1.746,3069,1.373,3077,1.534,3078,1.534,3079,1.534,3080,4.749,3081,3.901,3082,2.874,3083,1.883,3084,2.542,3085,3.191,3086,2.211,3087,3.423,3088,3.901,3089,1.534,3090,2.874,3091,1.883,3092,3.608,3093,3.423,3094,3.901,3095,3.901,3096,2.665,3097,2.665,3098,1.534,3099,1.534,3100,1.534,3101,1.534,3102,1.883,3103,2.84,3104,1.883,3105,2.874,3106,1.883,3107,1.883,3108,1.534,3109,1.534,3110,1.534,3111,1.534,3112,1.534,3113,2.342,3114,1.534,3115,1.534,3116,1.883,3117,1.632,3118,1.373,3119,1.883,3120,1.883,3121,1.883,3122,1.883,3123,1.632,3124,1.883,3125,1.883,3126,3.901,3127,2.342,3128,1.883,3129,1.883,3130,1.883,3131,1.883,3132,1.883,3133,2.874,3134,1.883,3135,1.883,3136,1.883,3137,1.534,3138,1.883,3139,1.883,3140,1.534,3141,2.874,3142,1.883,3143,1.883,3144,4.201,3145,1.883,3146,1.534,3147,1.883,3148,2.874,3149,1.534,3150,1.883,3151,1.883,3152,1.883,3153,1.883,3154,1.883,3155,2.874,3156,1.883,3157,1.883,3158,1.883,3159,1.883,3160,1.883,3161,1.883,3162,1.883,3163,1.883,3164,2.874,3165,2.342,3166,1.883,3167,1.883,3168,1.534,3169,1.883,3170,1.883,3171,1.883,3172,1.883,3173,1.883,3174,1.883,3175,1.883,3176,1.883,3177,2.874,3178,1.883,3179,1.883,3180,1.883,3181,1.883,3182,1.883,3183,1.883,3184,1.883,3185,1.883,3186,1.883,3187,1.883,3188,1.534,3189,2.874,3190,1.883,3191,3.486,3192,2.874,3193,4.201,3194,1.883,3195,2.874,3196,5.286,3197,1.883,3198,1.883,3199,1.883,3200,2.874,3201,3.901,3202,1.883,3203,2.874,3204,2.874,3205,1.883,3206,2.874,3207,1.883,3208,3.486,3209,3.486,3210,2.874,3211,1.534,3212,1.883,3213,1.883,3214,1.883,3215,1.883,3216,1.883,3217,1.883,3218,1.883,3219,1.883,3220,1.883,3221,1.883,3222,2.874,3223,2.874,3224,1.883,3225,2.874,3226,2.874,3227,1.883,3228,1.883,3229,1.883,3230,1.883,3231,1.883,3232,1.883,3233,2.874,3234,1.883,3235,4.428,3236,2.84,3237,3.901,3238,1.883,3239,2.874,3240,4.428,3241,1.883,3242,1.883,3243,1.883,3244,1.883,3245,1.883,3246,1.883,3247,1.883,3248,2.874,3249,1.883,3250,1.883,3251,1.883,3252,1.883,3253,1.883,3254,1.883,3255,1.883,3256,1.883,3257,1.883,3258,1.534,3259,1.883,3260,1.883,3261,3.486,3262,1.883,3263,1.883,3264,1.883,3265,1.883,3266,1.883,3267,1.883,3268,1.883,3269,1.883,3270,2.874,3271,1.883,3272,1.883,3273,1.883,3274,1.883,3275,1.883,3276,1.883,3277,1.534,3278,1.883,3279,1.883,3280,1.883,3281,1.883,3282,1.883,3283,1.883,3284,1.883,3285,1.883,3286,1.883,3287,2.874,3288,1.883,3289,1.883,3290,1.883,3291,1.883,3292,1.883,3293,1.883,3294,1.883,3295,1.883,3296,1.883,3297,1.883,3298,1.883,3299,1.883,3300,1.883,3301,1.883,3302,1.883,3303,1.883,3304,1.883,3305,1.883,3306,3.486,3307,1.883,3308,1.883,3309,1.883,3310,3.063,3311,1.883,3312,1.883,3313,1.883,3314,1.883,3315,1.883,3316,1.883,3317,1.883,3318,1.883,3319,1.883,3320,1.883,3321,1.883,3322,1.534,3323,1.883,3324,1.883,3325,1.534,3326,1.883,3327,4.201,3328,1.883,3329,1.883,3330,1.534,3331,1.883,3332,1.883,3333,1.883,3334,1.883,3335,1.883,3336,1.883,3337,1.883,3338,1.746,3339,1.883,3340,1.883,3341,1.883,3342,1.883,3343,1.883,3344,1.883,3345,1.883,3346,1.883,3347,1.883,3348,1.883,3349,1.883,3350,2.874,3351,4.749,3352,3.901,3353,2.874,3354,2.874,3355,2.874,3356,2.874,3357,1.883,3358,1.883,3359,1.883,3360,1.883,3361,1.883,3362,1.883,3363,2.874,3364,1.883,3365,1.883,3366,1.883,3367,1.883,3368,2.874,3369,1.883,3370,2.491,3371,1.883]],["title/interfaces/TimelineEventType.html",[56,0.141,3086,2.147]],["body/interfaces/TimelineEventType.html",[8,0.015,14,0.147,15,0.147,16,0.147,22,0.202,24,0.862,46,0.406,52,0.202,53,0.031,54,0.013,55,0.013,56,0.214,58,1.065,74,0.297,75,0.546,76,0.886,83,0.384,84,0.58,144,0.536,158,2.668,159,1.402,164,0.718,398,3.142,541,1.699,580,2.44,620,0.805,623,2.066,624,2.617,630,1.248,631,1.248,637,1.908,663,1.802,684,2.151,699,2.55,741,2.151,742,1.514,796,2.151,819,2.753,937,4.238,943,3.929,1141,3.09,1217,4.238,1219,3.34,1220,4.624,1223,3.673,1286,3.261,1296,4.238,1305,4.624,1439,3.09,2602,3.673,3086,4.082,3117,3.673,3118,3.639,3123,3.673,3310,3.639,3370,4.325,3705,4.624,3706,4.624,3707,5.141,3708,5.141,3709,5.141,3710,5.141,3711,5.141,3712,5.141,3713,5.141,3714,5.141]],["title/components/TimelineLegendComponent.html",[620,0.45,741,1.417]],["body/components/TimelineLegendComponent.html",[7,1.902,8,0.015,9,1.825,10,1.825,14,0.172,15,0.125,16,0.125,17,1.753,22,0.183,24,0.732,31,1.902,46,0.496,48,1.98,52,0.183,53,0.027,54,0.013,55,0.012,56,0.182,66,1.441,74,0.252,83,0.382,84,0.393,89,0.669,90,0.732,117,0.765,144,0.522,158,2.843,159,1.633,163,0.919,164,0.765,392,1.98,398,2.263,541,1.979,580,2.843,620,0.796,621,1.902,622,2.6,623,2.201,624,2.426,625,1.825,626,2.263,630,1.736,631,1.734,637,2.223,654,2.717,663,1.733,684,2.506,699,3.116,700,2.115,701,2.491,702,2.263,703,3.26,704,2.263,708,2.843,709,2.843,710,1.753,711,2.263,712,1.983,713,2.843,714,1.557,715,3.26,716,1.825,717,1.825,718,1.983,719,1.902,720,1.753,721,1.902,722,2.263,723,2.263,724,1.825,725,1.494,726,3.108,727,2.263,728,1.983,729,2.07,730,1.902,731,2.263,732,1.902,733,2.491,734,2.263,735,1.902,736,1.902,737,2.263,738,1.753,739,1.902,740,1.902,741,2.629,742,1.764,743,2.263,744,2.263,796,2.506,819,2.723,937,4.936,943,4.577,1141,3.599,1217,4.936,1219,3.55,1220,5.386,1223,4.278,1286,2.766,1296,4.936,1305,5.386,1386,2.929,1439,3.599,2602,4.278,3086,3.798,3117,4.278,3118,3.292,3123,3.116,3310,3.97,3370,4.719,3705,5.94,3706,3.922,3707,5.988,3708,5.988,3709,5.988,3710,5.988,3711,5.988,3712,5.988,3713,5.988,3714,5.988,3715,5.026,3716,5.026,3717,5.026,3718,5.026,3719,5.026]],["title/interfaces/TimelineRecords.html",[56,0.141,3092,2.274]],["body/interfaces/TimelineRecords.html",[8,0.015,11,1.698,12,0.698,13,1.654,14,0.065,15,0.065,16,0.065,22,0.212,24,0.383,38,0.35,42,0.881,46,0.424,48,1.447,52,0.186,53,0.014,54,0.012,55,0.007,56,0.197,58,0.473,65,1.066,72,1.158,74,0.132,75,0.314,76,0.786,82,0.644,83,0.342,84,0.6,85,2.197,86,2.549,87,0.492,88,0.366,96,1.053,97,1.345,98,1.922,99,0.512,100,0.559,101,0.454,107,1.504,110,0.599,113,1.083,116,0.619,118,0.492,144,0.334,145,1.372,146,1.458,147,2.436,148,0.784,149,0.66,155,1.645,156,0.929,157,0.913,158,1.184,163,0.793,164,0.841,171,1.356,176,2.701,177,1.519,181,1.062,184,0.383,185,0.979,186,0.622,191,1.293,192,1.728,196,1.563,200,0.846,203,1.241,204,1.241,205,1.241,208,1.447,211,0.995,222,1.132,224,0.955,231,1.396,234,1.447,235,1.447,238,1.447,244,1.344,254,0.725,265,1.293,266,1.447,267,3.228,268,1.522,279,0.814,285,0.486,299,1.728,310,0.554,311,0.914,319,1.038,320,0.815,328,1.062,336,0.576,338,0.599,342,0.554,349,2.299,363,1.563,378,1.151,381,1.066,398,1.808,407,0.534,408,0.576,416,1.108,418,0.726,420,1.083,422,0.647,423,1.083,425,1.409,427,1.901,437,1.698,439,1.132,441,1.563,442,0.576,453,1.083,458,3.23,459,1.4,460,0.914,465,1.903,469,0.917,470,2.096,494,0.647,511,0.554,525,1.372,526,1.108,527,1.895,541,1.903,543,0.815,564,3.23,582,2.771,620,0.562,624,2.224,629,1.026,630,0.554,631,0.554,633,0.995,635,0.995,636,0.847,637,1.569,642,1.293,648,0.647,650,1.372,663,1.774,684,2.47,686,1.583,714,0.815,742,1.851,745,1.372,747,1.728,750,3.183,751,0.917,754,1.184,758,2.948,759,3.19,772,3.289,775,2.194,777,1.698,778,1.569,780,1.632,781,1.808,783,2.681,796,2.132,800,0.815,801,1.244,803,1.345,810,4.581,819,2.151,826,0.881,830,0.784,831,1.533,835,1.184,841,0.881,846,1.132,848,1.038,849,1.132,850,1.083,866,2.909,876,1.372,899,1.533,900,4.491,901,1.533,905,2.21,906,1.99,907,1.533,909,1.241,910,1.533,914,1.533,916,1.533,917,1.533,926,1.241,974,1.132,977,1.038,993,1.533,994,1.241,997,1.184,998,1.654,999,1.303,1000,1.184,1004,1.654,1005,1.038,1010,1.584,1024,1.808,1025,1.533,1035,2.063,1045,1.184,1071,1.584,1073,2.664,1076,1.99,1078,1.241,1079,1.99,1084,1.083,1114,1.372,1127,1.63,1140,1.151,1152,2.194,1160,1.132,1169,2.074,1219,1.184,1230,1.083,1286,1.447,1287,1.744,1294,1.447,1339,1.728,1342,3.038,1364,2.372,1367,1.303,1369,1.29,1391,2.54,1439,1.372,1443,0.784,1451,1.744,1452,1.744,1454,1.303,1473,1.241,1499,1.744,1566,2.663,1656,1.63,1665,1.533,1671,1.744,1685,2.094,1686,0.917,1758,2.663,1766,1.447,1798,2.094,1825,1.447,1999,1.303,2000,1.303,2008,1.372,2015,1.083,2020,1.372,2066,1.372,2094,1.241,2136,1.654,2144,1.584,2151,1.241,2241,1.083,2316,1.303,2319,2.987,2320,1.303,2321,1.303,2331,1.63,2339,1.447,2355,1.63,2359,1.533,2394,1.63,2474,2.663,2604,2.681,2607,1.744,2663,2.54,2665,1.372,2674,1.63,2683,1.63,2796,1.63,2808,1.533,2809,1.447,2810,1.447,2845,1.447,2955,2.21,2993,1.744,3007,1.744,3069,1.372,3077,1.533,3078,1.533,3079,1.533,3080,4.748,3081,3.899,3082,2.872,3083,1.881,3084,2.54,3085,3.19,3086,2.21,3087,3.422,3088,3.899,3089,1.533,3090,2.872,3091,1.881,3092,3.752,3093,3.177,3094,1.881,3095,1.881,3096,2.663,3097,2.663,3098,1.533,3099,1.533,3100,1.533,3101,1.533,3102,1.881,3103,2.839,3104,1.881,3105,2.872,3106,1.881,3107,1.881,3108,1.533,3109,1.533,3110,1.533,3111,1.533,3112,1.533,3113,2.34,3114,1.533,3115,1.533,3116,1.881,3117,1.63,3118,1.372,3119,1.881,3120,1.881,3121,1.881,3122,1.881,3123,1.63,3124,1.881,3125,1.881,3126,3.899,3127,2.34,3128,1.881,3129,1.881,3130,1.881,3131,1.881,3132,1.881,3133,2.872,3134,1.881,3135,1.881,3136,1.881,3137,1.533,3138,1.881,3139,1.881,3140,1.533,3141,2.872,3142,1.881,3143,1.881,3144,4.199,3145,1.881,3146,1.533,3147,1.881,3148,2.872,3149,1.533,3150,1.881,3151,1.881,3152,1.881,3153,1.881,3154,1.881,3155,2.872,3156,1.881,3157,1.881,3158,1.881,3159,1.881,3160,1.881,3161,1.881,3162,1.881,3163,1.881,3164,2.872,3165,2.34,3166,1.881,3167,1.881,3168,1.533,3169,1.881,3170,1.881,3171,1.881,3172,1.881,3173,1.881,3174,1.881,3175,1.881,3176,1.881,3177,2.872,3178,1.881,3179,1.881,3180,1.881,3181,1.881,3182,1.881,3183,1.881,3184,1.881,3185,1.881,3186,1.881,3187,1.881,3188,1.533,3189,2.872,3190,1.881,3191,3.484,3192,2.872,3193,4.199,3194,1.881,3195,2.872,3196,5.285,3197,1.881,3198,1.881,3199,1.881,3200,2.872,3201,3.899,3202,1.881,3203,2.872,3204,2.872,3205,1.881,3206,2.872,3207,1.881,3208,3.484,3209,3.484,3210,2.872,3211,1.533,3212,1.881,3213,1.881,3214,1.881,3215,1.881,3216,1.881,3217,1.881,3218,1.881,3219,1.881,3220,1.881,3221,1.881,3222,2.872,3223,2.872,3224,1.881,3225,2.872,3226,2.872,3227,1.881,3228,1.881,3229,1.881,3230,1.881,3231,1.881,3232,1.881,3233,2.872,3234,1.881,3235,4.427,3236,2.839,3237,3.899,3238,1.881,3239,2.872,3240,4.427,3241,1.881,3242,1.881,3243,1.881,3244,1.881,3245,1.881,3246,1.881,3247,1.881,3248,2.872,3249,1.881,3250,1.881,3251,1.881,3252,1.881,3253,1.881,3254,1.881,3255,1.881,3256,1.881,3257,1.881,3258,1.533,3259,1.881,3260,1.881,3261,3.484,3262,1.881,3263,1.881,3264,1.881,3265,1.881,3266,1.881,3267,1.881,3268,1.881,3269,1.881,3270,2.872,3271,1.881,3272,1.881,3273,1.881,3274,1.881,3275,1.881,3276,1.881,3277,1.533,3278,1.881,3279,1.881,3280,1.881,3281,1.881,3282,1.881,3283,1.881,3284,1.881,3285,1.881,3286,1.881,3287,2.872,3288,1.881,3289,1.881,3290,1.881,3291,1.881,3292,1.881,3293,1.881,3294,1.881,3295,1.881,3296,1.881,3297,1.881,3298,1.881,3299,1.881,3300,1.881,3301,1.881,3302,1.881,3303,1.881,3304,1.881,3305,1.881,3306,3.484,3307,1.881,3308,1.881,3309,1.881,3310,3.062,3311,1.881,3312,1.881,3313,1.881,3314,1.881,3315,1.881,3316,1.881,3317,1.881,3318,1.881,3319,1.881,3320,1.881,3321,1.881,3322,1.533,3323,1.881,3324,1.881,3325,1.533,3326,1.881,3327,4.199,3328,1.881,3329,1.881,3330,1.533,3331,1.881,3332,1.881,3333,1.881,3334,1.881,3335,1.881,3336,1.881,3337,1.881,3338,1.744,3339,1.881,3340,1.881,3341,1.881,3342,1.881,3343,1.881,3344,1.881,3345,1.881,3346,1.881,3347,1.881,3348,1.881,3349,1.881,3350,2.872,3351,4.748,3352,3.899,3353,2.872,3354,2.872,3355,2.872,3356,2.872,3357,1.881,3358,1.881,3359,1.881,3360,1.881,3361,1.881,3362,1.881,3363,2.872,3364,1.881,3365,1.881,3366,1.881,3367,1.881,3368,2.872,3369,1.881,3370,2.489,3371,1.881]],["title/interfaces/TimelineSeries.html",[56,0.141,819,1.539]],["body/interfaces/TimelineSeries.html",[8,0.015,11,2.203,12,0.662,14,0.062,15,0.062,16,0.062,22,0.166,24,0.363,34,0.637,46,0.491,52,0.153,53,0.013,54,0.007,55,0.007,56,0.17,58,0.448,74,0.194,75,0.302,76,0.77,82,0.764,83,0.35,84,0.494,87,0.467,88,0.347,116,0.829,117,0.302,133,0.715,134,1.373,140,0.715,144,0.364,149,0.536,156,0.829,157,0.869,159,1.544,164,0.934,169,0.984,170,0.662,171,1.126,181,0.486,184,0.363,187,1.731,191,0.918,192,2.282,195,1.373,200,0.885,211,0.944,220,0.87,222,1.073,230,0.984,231,1.105,244,1.064,252,1.454,254,0.763,268,1.159,271,1.236,279,0.836,285,0.642,299,1.073,309,1.292,311,1.073,319,1.859,331,0.87,344,1.711,363,1.105,388,0.948,392,0.662,398,2.388,407,0.513,424,1.073,439,1.073,452,1.454,459,1.344,460,0.568,465,1.351,469,0.87,484,1.027,493,1.654,494,0.613,511,0.526,526,0.688,541,1.811,543,1.642,563,2.757,579,2.247,620,0.445,623,0.87,624,0.836,625,1.711,629,0.985,630,0.526,631,0.526,633,1.459,635,1.783,636,1.518,637,0.803,642,0.803,643,1.454,648,0.613,653,1.073,663,1.715,672,0.984,673,1.236,681,0.906,684,2.567,686,1.713,700,0.836,701,1.521,720,0.87,740,0.944,742,0.637,750,2.7,751,0.87,754,1.123,758,3.039,759,1.91,762,1.073,781,1.736,796,2.484,800,0.773,801,1.194,803,1.92,819,2.391,828,1.588,840,1.546,842,1.454,866,1.236,906,2.84,939,1.654,946,2.247,950,2.247,951,2.247,953,1.454,954,1.454,955,1.454,956,1.454,957,1.454,958,2.247,960,4.363,961,1.454,962,3.803,963,2.247,966,3.09,974,1.073,977,0.984,983,2.84,985,1.454,994,1.177,997,1.123,998,1.941,999,1.236,1000,1.736,1004,1.588,1005,0.984,1007,1.454,1010,2.092,1015,1.454,1017,3.09,1018,1.073,1022,3.403,1023,1.301,1024,1.736,1044,1.654,1063,1.546,1067,3.09,1071,2.092,1072,1.91,1076,1.236,1079,1.91,1081,2.496,1082,1.454,1083,1.454,1084,2.361,1085,1.654,1099,3.09,1101,1.454,1102,2.746,1103,2.247,1104,1.454,1105,1.454,1107,1.454,1108,1.454,1109,1.454,1113,1.177,1114,1.301,1115,3.09,1117,1.654,1118,1.373,1119,1.654,1120,1.454,1121,1.454,1122,1.454,1123,1.454,1124,1.454,1132,1.654,1140,1.351,1141,2.989,1144,1.654,1148,1.654,1149,1.546,1152,2.845,1156,2.247,1159,1.454,1160,1.073,1161,2.122,1162,1.454,1163,1.454,1164,2.247,1165,2.247,1166,2.247,1167,1.454,1168,1.454,1169,2.292,1170,1.454,1171,1.454,1194,1.454,1202,1.236,1219,1.123,1222,2.247,1223,2.921,1292,3.792,1326,1.711,1339,1.073,1342,2.224,1349,2.593,1353,2.122,1367,1.236,1369,0.59,1384,1.454,1421,1.301,1442,0.984,1454,1.236,1459,1.654,1463,1.784,1469,4.534,1599,1.073,1647,2.39,1673,1.373,1718,1.546,1725,1.654,1765,2.39,1766,1.373,1777,2.757,1783,1.301,1791,1.373,1828,1.454,1866,1.236,1878,1.373,1911,1.454,1962,1.301,1964,2.247,2001,1.373,2015,1.588,2039,1.373,2090,2.557,2092,1.073,2093,1.454,2094,1.819,2136,1.027,2140,1.073,2144,0.984,2163,1.073,2166,0.984,2237,1.073,2241,1.027,2318,1.654,2319,2.028,2348,1.654,2388,1.654,2446,2.757,2498,2.39,2602,1.546,2663,2.01,2665,1.301,2668,3.125,2670,2.757,2672,3.516,2673,2.557,2677,3.125,2684,1.654,2685,1.654,2686,1.654,2687,4.019,2690,1.654,2695,1.654,2696,1.654,2697,2.557,2698,1.654,2699,1.654,2700,3.516,2702,1.654,2704,1.654,2705,1.654,2706,1.654,2707,1.654,2708,1.654,2709,1.654,2710,1.654,2711,1.654,2712,1.654,2713,1.654,2714,3.801,2716,1.654,2741,1.654,2758,1.784,2764,1.654,2765,2.557,2766,1.654,2769,1.654,2770,1.654,2771,1.654,2773,1.654,2774,1.654,2775,3.516,2776,1.654,2777,1.654,2778,1.654,2779,1.654,2780,1.654,2781,1.654,2782,1.654,2783,1.654,2785,1.654,2787,1.654,2788,1.654,2789,1.654,2790,3.125,2791,2.557,2792,1.654,2806,3.125,2809,1.373,2810,1.373,2814,2.757,2815,1.784,2816,3.37,2817,1.784,2818,1.784,2821,1.784,2833,2.757,2835,1.784,2836,2.757,2841,2.757,2842,1.784,2843,4.099,2845,2.122,2851,1.784,2955,3.154,3059,1.784,3069,1.301,3077,3.09,3078,3.09,3079,3.09,3084,2.765,3085,3.319,3089,2.247,3098,1.454,3099,1.454,3100,1.454,3101,1.454,3103,1.454,3108,1.454,3109,1.454,3110,1.454,3111,1.454,3112,1.454,3113,1.454,3114,1.454,3115,1.454,3118,2.457,3127,1.454,3137,3.09,3140,1.454,3146,1.454,3149,1.454,3165,1.454,3168,1.454,3188,2.247,3211,1.454,3236,1.454,3258,1.454,3277,1.454,3310,1.301,3322,1.454,3325,1.454,3330,2.746,3372,1.784,3373,3.009,3374,1.784,3375,2.757,3376,1.946,3377,3.677,3378,1.946,3379,1.946,3380,1.946,3381,1.946,3382,1.946,3383,1.946,3384,1.946,3385,3.009,3386,3.009,3387,3.009,3388,3.009,3389,1.946,3390,1.946,3391,1.946,3392,1.946,3393,1.946,3394,3.677,3395,1.946,3396,1.946,3397,5.435,3398,4.137,3399,1.946,3400,1.946,3401,1.946,3402,1.946,3403,1.946,3404,1.946,3405,1.946,3406,1.946,3407,1.946,3408,1.946,3409,1.946,3410,1.946,3411,1.946,3412,4.137,3413,1.946,3414,3.009,3415,3.009,3416,3.009,3417,1.946,3418,1.946,3419,3.009,3420,1.946,3421,1.946,3422,1.946,3423,1.946,3424,3.009,3425,4.93,3426,1.946,3427,3.009,3428,1.946,3429,3.009,3430,1.946,3431,1.946,3432,1.946,3433,3.009,3434,3.009,3435,3.009,3436,3.677,3437,1.946,3438,1.946,3439,1.946,3440,1.946,3441,1.946,3442,5.339,3443,3.009,3444,3.009,3445,1.946,3446,1.946,3447,1.946,3448,1.946,3449,1.946,3450,1.946,3451,3.009,3452,1.946,3453,1.946,3454,3.009,3455,1.946,3456,3.677,3457,1.946,3458,1.946,3459,1.946,3460,1.946,3461,1.946,3462,3.009,3463,1.946,3464,1.946,3465,4.137,3466,1.946,3467,1.946,3468,3.009,3469,3.009,3470,3.009,3471,1.946,3472,1.946,3473,1.946,3474,1.946,3475,3.677,3476,1.946,3477,1.946,3478,1.946,3479,1.946,3480,1.946,3481,1.946,3482,1.946,3483,1.946,3484,1.946,3485,1.946,3486,3.009,3487,1.946,3488,1.946,3489,1.946,3490,1.946,3491,1.946,3492,1.946,3493,1.946,3494,1.946,3495,3.009,3496,1.946,3497,1.946,3498,1.946,3499,1.946,3500,1.946,3501,1.946,3502,1.946,3503,4.137,3504,3.677,3505,1.946,3506,1.946,3507,1.946,3508,1.946,3509,1.946,3510,1.946,3511,1.946,3512,1.946,3513,1.946,3514,1.946,3515,3.009,3516,1.946,3517,1.946,3518,1.946,3519,3.677,3520,1.946,3521,1.946,3522,1.946,3523,3.009,3524,1.946,3525,1.946,3526,1.946,3527,1.946,3528,1.946,3529,1.946,3530,1.946,3531,1.946,3532,3.009,3533,1.946,3534,1.946,3535,1.946,3536,1.946,3537,1.946,3538,1.946,3539,1.946,3540,1.946,3541,1.946,3542,1.946,3543,1.946,3544,1.946,3545,1.946,3546,1.946,3547,1.946,3548,1.946,3549,1.946,3550,4.93,3551,4.93,3552,3.009,3553,3.009,3554,1.946,3555,1.946,3556,3.009,3557,3.009,3558,3.009,3559,3.009,3560,3.009,3561,3.009,3562,3.009,3563,3.009,3564,3.009,3565,1.946,3566,1.946,3567,3.677,3568,1.946,3569,1.946,3570,1.946,3571,1.946,3572,1.946,3573,1.946,3574,3.009,3575,1.946,3576,1.946,3577,1.946,3578,1.946,3579,1.946,3580,1.946,3581,1.946,3582,1.946,3583,1.946,3584,4.473,3585,1.946,3586,1.946,3587,3.009,3588,1.946,3589,1.946,3590,3.009,3591,1.946,3592,1.946,3593,1.946,3594,3.677,3595,1.946,3596,1.946,3597,1.946,3598,1.946,3599,1.946,3600,1.946,3601,1.946,3602,3.009,3603,1.946,3604,1.946,3605,1.946,3606,1.946,3607,1.946,3608,1.946,3609,1.946,3610,1.946,3611,1.946,3612,1.946,3613,1.946,3614,1.946,3615,1.946,3616,1.946,3617,1.946,3618,1.946,3619,3.009,3620,3.009,3621,3.677,3622,1.946,3623,3.009,3624,1.946,3625,1.946,3626,1.946,3627,3.677,3628,1.946,3629,1.946,3630,1.946,3631,1.946,3632,1.946,3633,1.946,3634,1.946,3635,3.009,3636,1.946,3637,1.946,3638,1.946,3639,1.946,3640,1.946,3641,1.946,3642,1.946,3643,1.946,3644,1.946,3645,3.009,3646,1.946,3647,1.946,3648,3.009,3649,1.946,3650,1.946,3651,1.946,3652,1.946,3653,1.946,3654,1.946,3655,1.946,3656,1.946,3657,1.946,3658,1.946,3659,3.009,3660,1.946,3661,1.946,3662,3.009,3663,1.946,3664,1.946,3665,1.946,3666,1.946,3667,1.946,3668,1.946,3669,3.677,3670,1.946,3671,3.677,3672,1.946,3673,3.009,3674,3.009,3675,1.946,3676,1.784,3677,1.946,3678,1.946,3679,1.784,3680,1.946,3681,1.946,3682,1.946,3683,1.946,3684,1.946,3685,1.946,3686,3.009,3687,4.93,3688,1.946,3689,1.946,3690,1.946,3691,1.784,3692,4.729,3693,3.677,3694,4.93,3695,1.946,3696,1.946,3697,3.009,3698,1.946,3699,1.946,3700,1.946,3701,1.946,3702,1.946,3703,3.009,3704,1.946]],["title/interfaces/VisEvent.html",[56,0.141,3720,3.045]],["body/interfaces/VisEvent.html",[8,0.015,11,1.211,14,0.123,15,0.086,16,0.086,22,0.223,24,0.506,29,1.912,34,0.888,38,0.462,42,1.164,46,0.482,48,1.309,52,0.166,53,0.018,54,0.013,55,0.009,56,0.178,58,0.624,61,1.211,63,2.571,74,0.174,75,0.448,81,2.704,82,0.541,83,0.331,84,0.535,87,0.65,88,0.484,89,1.03,90,1.112,92,1.594,93,1.413,94,1.673,95,1.119,96,1.202,99,0.677,100,0.686,101,0.599,104,1.309,107,1.72,110,0.791,116,0.942,117,0.421,124,1.495,132,1.812,140,1.413,142,1.73,143,2.179,144,0.393,145,1.812,146,1.79,149,0.731,150,1.942,157,0.812,158,1.564,162,2.264,163,0.834,164,0.798,167,1.371,170,0.922,171,0.988,175,1.64,180,2.304,182,1.119,184,0.506,185,1.07,186,1.167,187,1.476,192,2.122,193,1.817,196,0.996,200,0.823,211,1.314,230,1.371,231,1.643,244,0.958,254,0.656,279,0.401,285,0.597,291,1.413,296,1.912,297,1.588,308,1.36,309,1.92,310,1.207,311,0.791,328,1.444,329,1.431,336,1.255,337,1.79,338,1.305,342,1.314,344,1.261,353,1.309,360,3.056,363,1.888,378,0.996,388,1.212,452,2.025,456,1.812,457,2.886,460,0.791,472,2.713,478,1.812,482,1.865,484,1.431,494,0.854,511,0.732,522,1.722,620,0.661,623,1.211,629,1.26,630,0.732,631,0.732,642,1.119,645,2.304,646,3.269,648,0.854,650,2.571,663,1.558,674,2.943,681,1.261,684,2.264,686,1.73,687,2.485,725,1.167,736,1.314,747,2.466,750,1.371,757,3.552,762,1.495,776,4.098,777,2.296,778,2.121,780,2.206,796,2.555,800,1.076,801,1.527,813,2.485,815,3.526,826,1.164,828,2.03,846,1.495,848,1.371,849,1.495,850,1.431,857,2.485,858,2.485,926,2.704,998,2.36,1007,2.025,1010,2.261,1035,2.492,1071,2.261,1073,2.122,1152,1.564,1194,2.025,1210,5.411,1294,1.912,1326,2.391,1339,2.122,1342,2.327,1368,2.304,1392,4.277,1393,3.014,1394,4.533,1442,1.371,1473,2.327,1486,3.014,1509,4.972,1574,3.014,1630,3.014,1685,1.812,1686,1.719,1699,4.277,1702,4.277,1725,2.304,1774,4.867,1783,2.571,1800,2.025,1866,1.722,1878,1.912,1902,2.304,1941,2.304,1974,2.485,1993,4.098,1999,2.443,2014,2.153,2036,2.485,2062,2.153,2124,3.847,2137,2.712,2138,1.912,2139,2.713,2140,1.495,2141,2.571,2157,1.912,2162,1.912,2166,1.371,2167,2.988,2169,1.912,2316,1.722,2319,1.495,2320,1.722,2321,1.722,2519,3.014,2596,4.972,2604,1.912,2972,3.526,3069,2.988,3374,2.485,3375,4.098,3676,2.485,3679,4.098,3691,2.485,3720,4.472,3721,2.711,3722,4.93,3723,4.277,3724,3.014,3725,3.474,3726,3.474,3727,3.474,3728,3.474,3729,3.474,3730,4.93,3731,4.93,3732,3.474,3733,4.93,3734,4.93,3735,3.474,3736,3.474,3737,3.474,3738,3.474,3739,3.474,3740,3.474,3741,3.474,3742,3.474,3743,7.036,3744,3.474,3745,3.474,3746,3.474,3747,3.474,3748,3.474,3749,6.586,3750,3.474,3751,3.474,3752,3.474,3753,3.474,3754,5.73,3755,6.237,3756,5.73,3757,3.474,3758,3.474,3759,3.474,3760,3.474,3761,4.93,3762,4.93,3763,3.474,3764,4.93,3765,3.474,3766,3.474,3767,3.474,3768,3.474,3769,3.474,3770,3.474,3771,3.474,3772,3.474,3773,3.474,3774,3.474,3775,3.474,3776,3.474,3777,3.474,3778,4.93,3779,4.93,3780,3.474,3781,6.237,3782,3.474,3783,3.474,3784,3.014,3785,3.474,3786,3.474,3787,3.474,3788,3.474,3789,3.474,3790,3.474,3791,4.93,3792,4.93,3793,3.474,3794,3.474,3795,3.474,3796,3.474,3797,3.474,3798,4.93,3799,3.474,3800,3.474,3801,3.474,3802,3.474,3803,3.474,3804,3.474,3805,3.474,3806,3.474,3807,3.474,3808,3.474,3809,3.474,3810,3.474,3811,3.474,3812,3.474,3813,3.474,3814,4.93,3815,5.73,3816,3.474,3817,3.474,3818,3.474,3819,3.474,3820,3.474,3821,3.474,3822,3.474,3823,3.474,3824,3.474,3825,3.474,3826,3.474,3827,3.474,3828,3.474,3829,3.474,3830,3.474,3831,3.474,3832,3.474,3833,3.474,3834,3.474,3835,3.474,3836,3.474,3837,3.474,3838,3.474,3839,3.474,3840,3.474,3841,3.474,3842,3.474,3843,3.474,3844,3.474,3845,3.474,3846,3.474,3847,3.474,3848,3.474,3849,3.474,3850,3.474,3851,3.474,3852,3.474,3853,3.474,3854,3.474,3855,3.474,3856,4.93,3857,3.474,3858,4.93,3859,3.474,3860,4.93,3861,3.474,3862,4.93,3863,3.474,3864,4.93,3865,3.474,3866,3.474,3867,3.474,3868,6.237,3869,6.237,3870,6.237,3871,3.474,3872,6.586,3873,6.841,3874,3.474,3875,4.93,3876,3.474,3877,3.474,3878,3.474,3879,3.474,3880,3.474,3881,3.474,3882,3.474,3883,3.474,3884,3.474,3885,3.474,3886,3.474,3887,6.586,3888,3.474,3889,3.474,3890,3.474,3891,3.474,3892,3.474,3893,6.586,3894,3.474,3895,3.474,3896,3.474,3897,3.474,3898,3.474]],["title/modules/VisTimelineModule.html",[0,1.933,3899,2.79]],["body/modules/VisTimelineModule.html",[2,2.764,3,3.208,8,0.015,11,2.484,12,1.63,13,2.528,14,0.153,15,0.153,16,0.153,20,3.715,21,3.715,22,0.228,23,3.715,24,0.893,25,3.715,26,3.201,33,3.715,34,1.568,50,3.201,52,0.178,53,0.033,54,0.013,55,0.013,725,1.453,739,3.111,740,2.323,742,1.82,2137,2.934,2891,6.181,2948,4.39,3899,5.755,3900,5.326,3901,5.326,3902,5.326,3903,6.139,3904,6.139]],["title/coverage.html",[3905,4.638]],["body/coverage.html",[7,1.572,8,0.015,9,1.509,10,1.509,14,0.157,16,0.103,17,2.618,18,4.354,31,2.111,53,0.04,54,0.01,55,0.01,56,0.298,57,2.576,59,4.092,60,2.695,72,1.496,73,2.422,83,0.209,89,0.838,90,1.022,91,1.238,92,1.062,93,1.191,102,1.64,109,2.576,149,0.389,178,2.576,185,0.632,211,2.111,279,0.956,291,1.191,435,3.243,436,3.605,437,1.945,443,1.788,445,1.449,446,1.711,490,3.605,620,0.933,621,1.572,627,3.605,628,4.504,645,4.464,710,1.449,712,1.64,714,1.287,716,1.509,717,1.509,718,1.64,719,1.572,720,1.449,721,1.572,724,1.509,725,1.662,728,1.64,730,1.572,732,1.572,735,1.572,736,1.572,738,1.449,739,1.572,741,1.509,745,3.915,746,4.504,748,2.756,772,2.059,819,1.64,832,2.756,945,4.354,991,2.972,998,3.337,999,2.765,1000,1.871,1146,3.243,1178,3.243,1233,4.354,1235,2.972,1291,3.605,1319,3.243,1323,2.422,1324,4.504,1333,2.422,1386,2.422,1387,4.84,1417,3.243,1784,3.605,1789,2.576,1790,4.092,1796,1.961,1967,3.243,1968,3.243,1997,2.756,1998,4.213,2002,2.576,2017,2.756,2088,2.972,2101,2.972,2132,4.216,2133,4.065,2137,2.298,2300,2.972,2301,4.354,2302,3.99,2303,4.354,2442,3.605,2443,3.605,2509,4.354,2510,4.354,2536,3.605,2564,3.605,2600,3.243,2645,3.243,2646,5.253,2647,4.84,2807,3.243,2808,4.304,2948,4.815,2949,4.354,2972,3.99,3057,3.243,3058,3.605,3084,2.167,3085,2.059,3086,2.287,3087,2.422,3092,2.422,3093,2.422,3372,4.815,3705,4.354,3706,4.354,3720,3.243,3721,4.915,3784,6.937,3905,3.605,3906,4.156,3907,4.156,3908,4.156,3909,4.156,3910,7.022,3911,4.156,3912,3.605,3913,4.156,3914,4.156,3915,4.156,3916,5.464,3917,3.605,3918,7.967,3919,3.605,3920,3.605,3921,5.464,3922,3.605,3923,3.605,3924,3.605,3925,4.156,3926,7.022,3927,4.156,3928,4.156,3929,4.84,3930,5.579,3931,4.156,3932,3.605,3933,3.605,3934,3.605,3935,4.156,3936,5.464,3937,3.605,3938,3.605,3939,3.605,3940,4.156,3941,4.156,3942,4.156,3943,4.156,3944,4.156,3945,4.156,3946,4.156,3947,4.156,3948,6.298,3949,5.464,3950,3.605,3951,3.605,3952,3.605,3953,6.298,3954,4.156,3955,4.156,3956,4.156,3957,4.156,3958,4.156,3959,4.156,3960,4.156,3961,4.156,3962,4.156,3963,4.156,3964,4.156,3965,6.852,3966,6.852,3967,3.605,3968,8.022,3969,3.605,3970,3.605,3971,3.605,3972,3.605,3973,3.605,3974,3.605,3975,3.605,3976,3.605,3977,3.605,3978,3.605,3979,3.605,3980,3.605,3981,3.605,3982,4.156,3983,6.298,3984,6.298,3985,4.156,3986,4.156,3987,4.156,3988,4.156,3989,4.156,3990,3.605,3991,4.156,3992,4.156,3993,4.156,3994,4.156,3995,6.298,3996,6.298,3997,5.579,3998,4.156,3999,3.605,4000,4.156,4001,4.156,4002,4.156,4003,3.605,4004,3.605,4005,4.156,4006,4.156,4007,3.605,4008,4.156,4009,5.579,4010,6.298,4011,4.156,4012,4.156,4013,5.579,4014,3.605,4015,3.605,4016,4.156,4017,4.156,4018,4.156,4019,4.156,4020,4.156,4021,4.156]],["title/dependencies.html",[3,2.116,4022,3.248]],["body/dependencies.html",[3,3.236,8,0.015,17,2.505,31,2.718,32,4.765,46,0.427,54,0.013,55,0.013,94,1.365,725,1.474,742,1.592,1024,2.806,1330,4.132,1331,3.429,1414,4.862,2137,3.259,2518,6.234,2534,4.862,4023,6.23,4024,6.23,4025,6.23,4026,6.23,4027,6.23,4028,6.23,4029,6.23,4030,6.23,4031,6.23,4032,6.23,4033,6.23,4034,7.185,4035,6.23,4036,6.23,4037,6.23,4038,7.185]],["title/miscellaneous/functions.html",[1651,3.666,4039,2.013]],["body/miscellaneous/functions.html",[8,0.015,54,0.01,55,0.01,59,2.378,60,2.409,61,2.782,66,1.789,68,3.239,69,5.196,73,3.211,74,0.205,76,1.013,78,2.731,80,2.874,83,0.408,85,1.721,89,0.83,90,1.115,91,2.19,94,1.741,97,2.239,104,2.092,114,2.128,121,3.009,122,1.756,137,2.378,142,1.716,144,0.547,146,2.534,149,0.515,150,2.147,158,2.482,163,0.594,169,2.462,170,1.657,172,2.81,173,2.706,177,2.361,181,1.215,190,2.706,191,1.456,197,2.686,231,1.58,247,4.875,248,4.138,250,2.81,261,4.138,262,2.372,268,1.808,291,2.258,294,1.482,310,0.86,336,1.367,344,1.482,353,1.774,358,1.775,394,2.377,407,1.065,416,1.925,437,2.782,440,2.731,441,1.58,446,1.68,462,3.904,465,2.232,467,2.81,468,1.933,470,1.756,527,3.674,537,2.245,579,3.211,651,2.918,778,2.593,803,1.846,1015,2.378,1073,3.095,1364,2.176,1421,2.128,1519,2.529,1651,3.184,1783,2.874,1790,2.378,1791,3.033,1794,2.245,1821,2.706,1824,4.875,1826,4.357,1827,2.706,1845,4.142,1873,2.874,1998,2.378,2000,3.311,2002,3.416,2009,2.918,2092,2.372,2095,4.3,2132,2.128,2144,1.61,2163,1.756,2629,5.797,2813,3.54,2932,3.54,3060,3.54,3061,3.54,3338,2.706,3965,6.868,3966,6.868,3967,4.781,3969,4.781,3970,4.781,3971,4.781,3972,4.781,3973,4.781,3974,4.781,3975,4.781,3976,4.781,3977,4.781,3978,4.781,3979,4.781,3980,4.781,3981,4.781,3990,4.781,3999,4.781,4004,7.178,4007,4.781,4039,2.529,4040,7.878,4041,3.54,4042,4.08,4043,3.54,4044,4.08,4045,6.24,4046,4.08,4047,6.682,4048,6.24,4049,7.878,4050,4.08,4051,8.051,4052,7.785,4053,4.08,4054,4.08,4055,4.08,4056,5.511,4057,4.08,4058,4.08,4059,4.08,4060,4.08,4061,5.511,4062,4.08,4063,4.08,4064,4.08,4065,5.511,4066,5.511,4067,6.24,4068,5.511,4069,4.08,4070,4.08,4071,4.08,4072,4.08,4073,4.08,4074,4.08,4075,4.08,4076,5.511,4077,5.511,4078,5.511,4079,4.08,4080,4.08,4081,4.08,4082,4.08,4083,4.08,4084,4.08,4085,4.08,4086,4.08,4087,4.08,4088,4.08,4089,4.08,4090,6.24,4091,4.08,4092,4.08]],["title/index.html",[74,0.196,4093,3.385]],["body/index.html",[1,5.677,2,2.357,3,2.916,4,4.541,5,4.541,6,4.541,7,2.949,8,0.015,9,2.553,10,2.553,11,2.258,12,1.39,13,2.156,54,0.012,55,0.012,58,0.941,254,0.696,376,2.729,621,2.949,622,2.156,710,2.718,712,3.075,714,2.414,716,2.83,717,2.83,718,3.075,720,2.718,721,2.949,724,2.83,728,3.075,730,2.949,732,2.949,735,2.949,736,2.949,738,2.718,739,2.949,741,2.83,987,5.052,1224,5.063,1225,4.541,1226,4.541,1227,4.541,1279,5.842,1280,4.541,1281,4.541,1283,4.541,1319,4.085,2503,5.714,2504,4.541,2505,4.541,2507,4.541,2512,5.398,2513,4.541,2514,4.541,2515,4.541,2528,5.398,2529,4.541,2530,4.541,2531,4.541,2886,5.745,2887,4.541,2888,4.541,2889,4.541,2934,5.632,2935,4.541,2936,4.541,2937,4.541,3899,5.398,3900,4.541,3901,4.541,3902,4.541,4003,4.541,4093,4.541,4094,5.234]],["title/modules.html",[2,2.407]],["body/modules.html",[1,4.486,2,2.825,8,0.013,54,0.013,55,0.013,134,4.494,1161,4.494,1224,3.888,1279,4.486,2503,4.486,2512,4.486,2528,4.486,2886,4.486,2934,4.486,3899,4.486,4095,8.166,4096,8.166]],["title/miscellaneous/typealiases.html",[4039,2.013,4097,4.698]],["body/miscellaneous/typealiases.html",[8,0.015,15,0.176,17,2.693,54,0.013,55,0.013,59,3.546,60,2.635,74,0.306,83,0.377,89,0.943,118,1.326,119,3.349,120,4.035,121,2.74,122,2.619,123,4.035,124,2.619,125,4.035,126,3.349,127,2.872,128,2.302,129,4.7,130,2.682,131,2.919,135,2.506,168,3.173,398,3.192,745,3.173,772,3.015,819,2.401,1790,3.546,1815,4.7,1817,4.035,1820,4.7,1967,4.748,1968,5.531,1976,6.149,2808,4.37,3085,3.015,3087,3.546,3092,3.546,3093,3.546,3096,4.7,3097,4.7,3912,5.279,4039,3.772,4041,5.279,4043,6.149,4098,6.085,4099,6.085,4100,6.085,4101,7.088]],["title/miscellaneous/variables.html",[4039,2.013,4102,4.076]],["body/miscellaneous/variables.html",[8,0.015,17,2.436,54,0.011,55,0.011,74,0.229,83,0.351,94,1,117,0.978,143,1.769,155,1.166,156,0.553,163,1.179,185,0.902,254,0.607,442,1,579,3.459,580,3.383,642,1.47,729,1.88,974,1.964,977,1.801,1022,2.38,1145,3.562,2137,2.445,2140,1.964,2141,2.38,2167,2.38,2600,4.632,2948,4.245,2949,4.632,2971,3.96,2972,4.996,2981,3.96,2982,3.96,2983,3.96,2984,3.96,3721,3.562,3723,3.96,3724,3.96,3916,3.96,3917,5.15,3919,5.15,3920,5.15,3921,3.96,3922,5.15,3923,5.15,3924,5.15,3929,3.96,3932,5.15,3933,3.96,3934,5.15,3936,3.96,3937,5.15,3938,5.15,3939,5.15,3949,3.96,3950,5.15,3951,5.15,3952,5.15,4014,5.15,4015,5.15,4039,2.829,4102,3.96,4103,4.565,4104,4.565,4105,4.565,4106,4.565,4107,6.597,4108,6.597,4109,6.597,4110,6.597,4111,8.214,4112,7.558,4113,8.214,4114,6.986,4115,7.663,4116,4.565,4117,7.242,4118,4.565,4119,8.18,4120,4.565,4121,6.986,4122,5.936,4123,4.565,4124,4.565,4125,4.565,4126,4.565,4127,4.565,4128,4.565,4129,6.597,4130,6.597,4131,5.936,4132,4.565,4133,5.936,4134,5.936,4135,4.565,4136,6.597,4137,4.565,4138,5.936,4139,6.986,4140,4.565,4141,4.565,4142,4.565,4143,5.936,4144,4.565,4145,4.565,4146,4.565,4147,5.936,4148,4.565,4149,4.565,4150,4.565,4151,4.565,4152,7.919,4153,4.565,4154,5.936,4155,4.565,4156,5.936,4157,4.565,4158,5.936,4159,4.565,4160,4.565,4161,4.565,4162,4.565,4163,4.565,4164,4.565,4165,4.565,4166,4.565,4167,4.565,4168,4.565,4169,4.565,4170,4.565,4171,4.565,4172,4.565,4173,4.565]]],"invertedIndex":[["",{"_index":8,"title":{},"body":{"modules/AgGridModule.html":{},"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"components/BsEdgeInfoCard.html":{},"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"modules/BsHeatmapModule.html":{},"components/BsNodeInfoCard.html":{},"modules/BsTimelineModule.html":{},"components/BsTooltipComponent.html":{},"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/Column.html":{},"interfaces/CustomData.html":{},"components/DataModalComponent.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/FacetChartDataPoint.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{},"components/FacetNgxChart.html":{},"components/FacetWrapperComponent.html":{},"modules/FinanceModule.html":{},"modules/FusionChartsModule.html":{},"modules/GoogleMapsModule.html":{},"interfaces/HeatmapItem.html":{},"components/MapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"modules/NetworkModule.html":{},"interfaces/NetworkProvider.html":{},"components/NgxChart.html":{},"modules/NgxChartsModule.html":{},"interfaces/Node.html":{},"interfaces/NodeData.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"components/ResultTimeline.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineEventType.html":{},"components/TimelineLegendComponent.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{},"modules/VisTimelineModule.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":279,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"components/BsEdgeInfoCard.html":{},"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"components/BsTooltipComponent.html":{},"interfaces/Column.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/FacetChartDataPoint.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{},"components/FacetNgxChart.html":{},"interfaces/HeatmapItem.html":{},"components/MapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeData.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"components/ResultTimeline.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{},"coverage.html":{}}}],["0(n",{"_index":2230,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["0.0.1",{"_index":4024,"title":{},"body":{"dependencies.html":{}}}],["0.02",{"_index":2632,"title":{},"body":{"components/MapComponent.html":{}}}],["0.25rem!important",{"_index":2448,"title":{},"body":{"components/FacetWrapperComponent.html":{}}}],["0.2s",{"_index":1213,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["0.3",{"_index":573,"title":{},"body":{"classes/BaseProvider.html":{}}}],["0.5",{"_index":1217,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/TimelineEventType.html":{},"components/TimelineLegendComponent.html":{}}}],["0.8",{"_index":938,"title":{},"body":{"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{}}}],["0.9",{"_index":1211,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["0/1",{"_index":3918,"title":{},"body":{"coverage.html":{}}}],["0/10",{"_index":3911,"title":{},"body":{"coverage.html":{}}}],["0/11",{"_index":3915,"title":{},"body":{"coverage.html":{}}}],["0/17",{"_index":4009,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":4013,"title":{},"body":{"coverage.html":{}}}],["0/27",{"_index":4016,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":3910,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":4010,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":3948,"title":{},"body":{"coverage.html":{}}}],["0/7",{"_index":3926,"title":{},"body":{"coverage.html":{}}}],["0/8",{"_index":3953,"title":{},"body":{"coverage.html":{}}}],["0/9",{"_index":4017,"title":{},"body":{"coverage.html":{}}}],["023e58",{"_index":4129,"title":{},"body":{"miscellaneous/variables.html":{}}}],["0f5132",{"_index":934,"title":{},"body":{"components/BsFacetDate.html":{}}}],["0s",{"_index":1215,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["1",{"_index":254,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"classes/BaseProvider.html":{},"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/FacetChartDataPoint.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{},"components/FacetNgxChart.html":{},"interfaces/HeatmapItem.html":{},"components/MapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"components/ResultTimeline.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["1).split",{"_index":3001,"title":{},"body":{"components/ResultTimeline.html":{}}}],["1.0",{"_index":1184,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["1.5em",{"_index":641,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsNodeInfoCard.html":{},"interfaces/NodeData.html":{}}}],["1/1",{"_index":3968,"title":{},"body":{"coverage.html":{}}}],["1/2",{"_index":3997,"title":{},"body":{"coverage.html":{}}}],["1/3",{"_index":3988,"title":{},"body":{"coverage.html":{}}}],["1/6",{"_index":3984,"title":{},"body":{"coverage.html":{}}}],["10",{"_index":211,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"components/BsTooltipComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{},"coverage.html":{}}}],["10/21",{"_index":3986,"title":{},"body":{"coverage.html":{}}}],["100",{"_index":998,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/Column.html":{},"interfaces/HeatmapItem.html":{},"components/NgxChart.html":{},"components/ResultTimeline.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{},"coverage.html":{}}}],["1000",{"_index":1007,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{}}}],["10000",{"_index":2966,"title":{},"body":{"components/ResultTimeline.html":{}}}],["10px",{"_index":1218,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["11/26",{"_index":3914,"title":{},"body":{"coverage.html":{}}}],["11/60",{"_index":3947,"title":{},"body":{"coverage.html":{}}}],["12",{"_index":3355,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["12/24",{"_index":3935,"title":{},"body":{"coverage.html":{}}}],["12px",{"_index":1296,"title":{},"body":{"components/BsTooltipComponent.html":{},"components/DataModalComponent.html":{},"interfaces/TimelineEventType.html":{},"components/TimelineLegendComponent.html":{}}}],["13/45",{"_index":3928,"title":{},"body":{"coverage.html":{}}}],["13/56",{"_index":3942,"title":{},"body":{"coverage.html":{}}}],["14.0.0",{"_index":4028,"title":{},"body":{"dependencies.html":{}}}],["14/15",{"_index":3961,"title":{},"body":{"coverage.html":{}}}],["15",{"_index":2663,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{}}}],["15/60",{"_index":4019,"title":{},"body":{"coverage.html":{}}}],["150px",{"_index":2982,"title":{},"body":{"components/ResultTimeline.html":{},"miscellaneous/variables.html":{}}}],["16",{"_index":3983,"title":{},"body":{"coverage.html":{}}}],["16rem",{"_index":2933,"title":{},"body":{"components/NgxChart.html":{}}}],["17",{"_index":4011,"title":{},"body":{"coverage.html":{}}}],["17px",{"_index":1301,"title":{},"body":{"components/BsTooltipComponent.html":{}}}],["18",{"_index":3946,"title":{},"body":{"coverage.html":{}}}],["187",{"_index":3711,"title":{},"body":{"interfaces/TimelineEventType.html":{},"components/TimelineLegendComponent.html":{}}}],["19/20",{"_index":3955,"title":{},"body":{"coverage.html":{}}}],["1950",{"_index":3012,"title":{},"body":{"components/ResultTimeline.html":{}}}],["1].date",{"_index":3341,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["1a3646",{"_index":4118,"title":{},"body":{"miscellaneous/variables.html":{}}}],["1d2c4d",{"_index":4114,"title":{},"body":{"miscellaneous/variables.html":{}}}],["2",{"_index":159,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"components/BsEdgeInfoCard.html":{},"components/BsNodeInfoCard.html":{},"interfaces/CustomData.html":{},"classes/DynamicEdgeProvider.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"components/FacetWrapperComponent.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventType.html":{},"components/TimelineLegendComponent.html":{},"interfaces/TimelineSeries.html":{}}}],["2).split",{"_index":2735,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{}}}],["2*size",{"_index":3704,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["2/10",{"_index":3956,"title":{},"body":{"coverage.html":{}}}],["2/4",{"_index":3964,"title":{},"body":{"coverage.html":{}}}],["2/9",{"_index":3963,"title":{},"body":{"coverage.html":{}}}],["20",{"_index":999,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"coverage.html":{}}}],["200",{"_index":1454,"title":{},"body":{"interfaces/Column.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{}}}],["2000",{"_index":3897,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["200px",{"_index":2444,"title":{},"body":{"components/FacetWrapperComponent.html":{}}}],["2020",{"_index":3346,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["206",{"_index":3712,"title":{},"body":{"interfaces/TimelineEventType.html":{},"components/TimelineLegendComponent.html":{}}}],["21",{"_index":1319,"title":{},"body":{"components/BsTooltipComponent.html":{},"coverage.html":{},"index.html":{}}}],["22",{"_index":3962,"title":{},"body":{"coverage.html":{}}}],["222222",{"_index":4148,"title":{},"body":{"miscellaneous/variables.html":{}}}],["23",{"_index":3930,"title":{},"body":{"coverage.html":{}}}],["24",{"_index":3514,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["25",{"_index":4018,"title":{},"body":{"coverage.html":{}}}],["25.2.0",{"_index":4038,"title":{},"body":{"dependencies.html":{}}}],["255763",{"_index":4141,"title":{},"body":{"miscellaneous/variables.html":{}}}],["28",{"_index":3927,"title":{},"body":{"coverage.html":{}}}],["283d6a",{"_index":4131,"title":{},"body":{"miscellaneous/variables.html":{}}}],["2c6675",{"_index":4140,"title":{},"body":{"miscellaneous/variables.html":{}}}],["2px",{"_index":3371,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["3",{"_index":158,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineEventType.html":{},"components/TimelineLegendComponent.html":{},"interfaces/TimelineRecords.html":{},"interfaces/VisEvent.html":{},"miscellaneous/functions.html":{}}}],["3*24",{"_index":3358,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["3*size/2",{"_index":3703,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["3.0.0",{"_index":4026,"title":{},"body":{"dependencies.html":{}}}],["3.0.4",{"_index":4029,"title":{},"body":{"dependencies.html":{}}}],["3.1.0",{"_index":4032,"title":{},"body":{"dependencies.html":{}}}],["3.15.1",{"_index":4030,"title":{},"body":{"dependencies.html":{}}}],["3/3",{"_index":4000,"title":{},"body":{"coverage.html":{}}}],["3/4",{"_index":3958,"title":{},"body":{"coverage.html":{}}}],["30",{"_index":2664,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{}}}],["30/33",{"_index":4005,"title":{},"body":{"coverage.html":{}}}],["300",{"_index":2554,"title":{},"body":{"components/MapComponent.html":{}}}],["304a7d",{"_index":4137,"title":{},"body":{"miscellaneous/variables.html":{}}}],["31",{"_index":3993,"title":{},"body":{"coverage.html":{}}}],["33",{"_index":3987,"title":{},"body":{"coverage.html":{}}}],["334e87",{"_index":4127,"title":{},"body":{"miscellaneous/variables.html":{}}}],["34",{"_index":4094,"title":{},"body":{"index.html":{}}}],["35",{"_index":1146,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{},"coverage.html":{}}}],["350px",{"_index":2984,"title":{},"body":{"components/ResultTimeline.html":{},"miscellaneous/variables.html":{}}}],["36",{"_index":3995,"title":{},"body":{"coverage.html":{}}}],["365",{"_index":3112,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{}}}],["3a4762",{"_index":4146,"title":{},"body":{"miscellaneous/variables.html":{}}}],["3c7680",{"_index":4135,"title":{},"body":{"miscellaneous/variables.html":{}}}],["4",{"_index":3691,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{}}}],["4.0.0",{"_index":4036,"title":{},"body":{"dependencies.html":{}}}],["4/10",{"_index":3959,"title":{},"body":{"coverage.html":{}}}],["4/23",{"_index":4012,"title":{},"body":{"coverage.html":{}}}],["4/4",{"_index":3998,"title":{},"body":{"coverage.html":{}}}],["40",{"_index":1000,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"coverage.html":{}}}],["42",{"_index":3913,"title":{},"body":{"coverage.html":{}}}],["45",{"_index":3991,"title":{},"body":{"coverage.html":{}}}],["45/61",{"_index":3909,"title":{},"body":{"coverage.html":{}}}],["47",{"_index":3985,"title":{},"body":{"coverage.html":{}}}],["4b6878",{"_index":4122,"title":{},"body":{"miscellaneous/variables.html":{}}}],["4e6d70",{"_index":4149,"title":{},"body":{"miscellaneous/variables.html":{}}}],["4px",{"_index":941,"title":{},"body":{"components/BsFacetDate.html":{}}}],["5",{"_index":579,"title":{},"body":{"classes/BaseProvider.html":{},"components/ResultTimeline.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["5.15.1",{"_index":4037,"title":{},"body":{"dependencies.html":{}}}],["5/46",{"_index":3925,"title":{},"body":{"coverage.html":{}}}],["5/5",{"_index":3989,"title":{},"body":{"coverage.html":{}}}],["50",{"_index":645,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsNodeInfoCard.html":{},"interfaces/NodeData.html":{},"interfaces/VisEvent.html":{},"coverage.html":{}}}],["500px",{"_index":3724,"title":{},"body":{"interfaces/VisEvent.html":{},"miscellaneous/variables.html":{}}}],["50vh",{"_index":1971,"title":{},"body":{"components/DataModalComponent.html":{}}}],["5px",{"_index":634,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsNodeInfoCard.html":{},"interfaces/NodeData.html":{}}}],["6",{"_index":3236,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{}}}],["6)*2",{"_index":3699,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["6.5.1",{"_index":4033,"title":{},"body":{"dependencies.html":{}}}],["6/19",{"_index":3994,"title":{},"body":{"coverage.html":{}}}],["6/6",{"_index":4006,"title":{},"body":{"coverage.html":{}}}],["60",{"_index":3515,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["600",{"_index":994,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{}}}],["600px",{"_index":1428,"title":{},"body":{"interfaces/Column.html":{}}}],["600x400",{"_index":1378,"title":{},"body":{"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"components/NgxChart.html":{}}}],["64779e",{"_index":4124,"title":{},"body":{"miscellaneous/variables.html":{}}}],["69420",{"_index":2657,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{}}}],["6f9ba5",{"_index":4132,"title":{},"body":{"miscellaneous/variables.html":{}}}],["6px",{"_index":942,"title":{},"body":{"components/BsFacetDate.html":{}}}],["7",{"_index":1316,"title":{},"body":{"components/BsTooltipComponent.html":{}}}],["7.3.4",{"_index":4034,"title":{},"body":{"dependencies.html":{}}}],["7/19",{"_index":3996,"title":{},"body":{"coverage.html":{}}}],["7/20",{"_index":4008,"title":{},"body":{"coverage.html":{}}}],["7/65",{"_index":4020,"title":{},"body":{"coverage.html":{}}}],["73",{"_index":3908,"title":{},"body":{"coverage.html":{}}}],["75",{"_index":3957,"title":{},"body":{"coverage.html":{}}}],["7aa3e5",{"_index":2306,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["7acce5",{"_index":2311,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["7c7c7c",{"_index":3713,"title":{},"body":{"interfaces/TimelineEventType.html":{},"components/TimelineLegendComponent.html":{}}}],["7rem",{"_index":944,"title":{},"body":{"components/BsFacetDate.html":{}}}],["8",{"_index":3690,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["8/38",{"_index":3982,"title":{},"body":{"coverage.html":{}}}],["8/39",{"_index":3943,"title":{},"body":{"coverage.html":{}}}],["80",{"_index":638,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsNodeInfoCard.html":{},"interfaces/NodeData.html":{}}}],["808080",{"_index":581,"title":{},"body":{"classes/BaseProvider.html":{}}}],["84",{"_index":3357,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["86400000",{"_index":3535,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["8ec3b9",{"_index":4116,"title":{},"body":{"miscellaneous/variables.html":{}}}],["8px",{"_index":1297,"title":{},"body":{"components/BsTooltipComponent.html":{}}}],["9",{"_index":987,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{},"index.html":{}}}],["9/20",{"_index":3992,"title":{},"body":{"coverage.html":{}}}],["9/38",{"_index":3931,"title":{},"body":{"coverage.html":{}}}],["90",{"_index":1178,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{},"coverage.html":{}}}],["90px",{"_index":1064,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["93",{"_index":3960,"title":{},"body":{"coverage.html":{}}}],["95",{"_index":3954,"title":{},"body":{"coverage.html":{}}}],["98a5be",{"_index":4138,"title":{},"body":{"miscellaneous/variables.html":{}}}],["_action",{"_index":3783,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["_actions",{"_index":3735,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["_datapoint",{"_index":2409,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["_datapoint.$item",{"_index":2414,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["_datapoint.name",{"_index":2411,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["_datapoint.value",{"_index":2412,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["_definance",{"_index":4153,"title":{},"body":{"miscellaneous/variables.html":{}}}],["_degooglemaps",{"_index":4159,"title":{},"body":{"miscellaneous/variables.html":{}}}],["_degrid",{"_index":4162,"title":{},"body":{"miscellaneous/variables.html":{}}}],["_deheatmap",{"_index":4165,"title":{},"body":{"miscellaneous/variables.html":{}}}],["_enfinance",{"_index":4155,"title":{},"body":{"miscellaneous/variables.html":{}}}],["_engooglemaps",{"_index":4160,"title":{},"body":{"miscellaneous/variables.html":{}}}],["_engrid",{"_index":4163,"title":{},"body":{"miscellaneous/variables.html":{}}}],["_enheatmap",{"_index":4168,"title":{},"body":{"miscellaneous/variables.html":{}}}],["_field",{"_index":834,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{}}}],["_filterinput",{"_index":1475,"title":{},"body":{"interfaces/Column.html":{}}}],["_frfinance",{"_index":4157,"title":{},"body":{"miscellaneous/variables.html":{}}}],["_frgooglemaps",{"_index":4161,"title":{},"body":{"miscellaneous/variables.html":{}}}],["_frgrid",{"_index":4164,"title":{},"body":{"miscellaneous/variables.html":{}}}],["_frheatmap",{"_index":4171,"title":{},"body":{"miscellaneous/variables.html":{}}}],["_items",{"_index":3332,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["_networkinitialized",{"_index":3732,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["_queries",{"_index":2054,"title":{},"body":{"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{}}}],["_selectededge",{"_index":3734,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["_selectednode",{"_index":3733,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["a.count",{"_index":1273,"title":{},"body":{"components/BsNodeInfoCard.html":{},"interfaces/NodeData.html":{}}}],["a.date.gettime",{"_index":3655,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["a.name",{"_index":1695,"title":{},"body":{"interfaces/Column.html":{},"interfaces/MoneyCloudDatum.html":{}}}],["above",{"_index":1429,"title":{},"body":{"interfaces/Column.html":{}}}],["absolute",{"_index":1295,"title":{},"body":{"components/BsTooltipComponent.html":{}}}],["absolutely",{"_index":1195,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["abstract",{"_index":2415,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["abstractfacet",{"_index":747,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/FacetChartDataPoint.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{},"components/FacetNgxChart.html":{},"components/MapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/VisEvent.html":{}}}],["abstractions",{"_index":1027,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["access",{"_index":672,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/HeatmapItem.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeData.html":{},"interfaces/NodeType.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["accessible",{"_index":3479,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["accessor",{"_index":3890,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["accessors",{"_index":773,"title":{},"body":{"components/BsFacetDate.html":{},"components/BsTooltipComponent.html":{},"components/FacetNgxChart.html":{},"components/FacetWrapperComponent.html":{},"components/MapComponent.html":{},"components/NgxChart.html":{}}}],["accordingly",{"_index":2016,"title":{},"body":{"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{}}}],["account",{"_index":2265,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["accumulates",{"_index":544,"title":{},"body":{"classes/BaseProvider.html":{}}}],["act",{"_index":466,"title":{},"body":{"classes/AsyncRecordsProvider.html":{},"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["action",{"_index":96,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"components/BsFacetDate.html":{},"interfaces/Column.html":{},"interfaces/CustomData.html":{},"components/DataModalComponent.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/FacetChartDataPoint.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{},"components/FacetNgxChart.html":{},"components/MapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/VisEvent.html":{}}}],["action.children",{"_index":2327,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["action.icon",{"_index":517,"title":{},"body":{"classes/BaseProvider.html":{},"interfaces/Column.html":{}}}],["action.selected",{"_index":1577,"title":{},"body":{"interfaces/Column.html":{}}}],["action.text",{"_index":518,"title":{},"body":{"classes/BaseProvider.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["actions",{"_index":328,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"components/BsEdgeInfoCard.html":{},"components/BsFacetDate.html":{},"components/BsNodeInfoCard.html":{},"interfaces/Column.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/FacetChartDataPoint.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{},"components/FacetNgxChart.html":{},"components/MapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/NodeData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/VisEvent.html":{}}}],["actions.length",{"_index":883,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{}}}],["actions.push(new",{"_index":335,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"classes/BaseProvider.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["actions.push(this.clearfilters",{"_index":2339,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["actions.push(this.clearfiltersaction",{"_index":884,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{}}}],["actions.push(this.createexpandaction(types[0",{"_index":356,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{}}}],["actions.push(this.selectfield",{"_index":2341,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["actions.unshift(new",{"_index":2129,"title":{},"body":{"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{}}}],["activateaction",{"_index":377,"title":{},"body":{"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"classes/DynamicEdgeProvider.html":{},"classes/DynamicNodeProvider.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{}}}],["activated",{"_index":1819,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["active",{"_index":378,"title":{},"body":{"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"components/BsFacetDate.html":{},"interfaces/Column.html":{},"classes/DynamicEdgeProvider.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/VisEvent.html":{}}}],["actual",{"_index":1463,"title":{},"body":{"interfaces/Column.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["actual_component",{"_index":744,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"components/BsTooltipComponent.html":{},"components/DataModalComponent.html":{},"components/FacetNgxChart.html":{},"components/FacetWrapperComponent.html":{},"components/MapComponent.html":{},"components/NgxChart.html":{},"components/ResultTimeline.html":{},"components/TimelineLegendComponent.html":{}}}],["actually",{"_index":1015,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/Column.html":{},"interfaces/HeatmapItem.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{},"miscellaneous/functions.html":{}}}],["actualwidth",{"_index":1166,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["adapted",{"_index":3200,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["add",{"_index":133,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"classes/BaseProvider.html":{},"interfaces/Column.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["add/replace",{"_index":3281,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["addaggregationnodes",{"_index":382,"title":{},"body":{"classes/AggregationProvider.html":{}}}],["addaggregationnodes(item",{"_index":257,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{}}}],["addcustomedge(recordnode",{"_index":1903,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["adddynamicedges(sourcenodes",{"_index":2064,"title":{},"body":{"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{}}}],["added",{"_index":122,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["addedge(edge",{"_index":2289,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["addedges",{"_index":2857,"title":{},"body":{"classes/NetworkDataset.html":{}}}],["addedges(edges",{"_index":2201,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["addition",{"_index":1910,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["additional",{"_index":137,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"miscellaneous/functions.html":{}}}],["additionally",{"_index":1824,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"miscellaneous/functions.html":{}}}],["addnode(node",{"_index":2286,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["addnodes",{"_index":2858,"title":{},"body":{"classes/NetworkDataset.html":{}}}],["addnodes(nodes",{"_index":2196,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["addrecordnodes(records",{"_index":1835,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["adds",{"_index":245,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["addstructuraledge(dataset",{"_index":1881,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["addstructuraledges(node",{"_index":1848,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["adjacent",{"_index":421,"title":{},"body":{"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"classes/DynamicEdgeProvider.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{}}}],["adjust",{"_index":484,"title":{},"body":{"classes/AsyncRecordsProvider.html":{},"components/BsHeatmapComponent.html":{},"interfaces/CustomData.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{}}}],["adjusts",{"_index":475,"title":{},"body":{"classes/AsyncRecordsProvider.html":{},"classes/DynamicEdgeProvider.html":{},"classes/DynamicNodeProvider.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{}}}],["administrative.country",{"_index":4120,"title":{},"body":{"miscellaneous/variables.html":{}}}],["administrative.land_parcel",{"_index":4123,"title":{},"body":{"miscellaneous/variables.html":{}}}],["administrative.province",{"_index":4125,"title":{},"body":{"miscellaneous/variables.html":{}}}],["advancedservice",{"_index":779,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{}}}],["afterviewinit",{"_index":946,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["ag",{"_index":17,"title":{},"body":{"modules/AgGridModule.html":{},"components/BsEdgeInfoCard.html":{},"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"components/BsTooltipComponent.html":{},"interfaces/Column.html":{},"components/DataModalComponent.html":{},"components/FacetNgxChart.html":{},"components/FacetWrapperComponent.html":{},"components/MapComponent.html":{},"components/NgxChart.html":{},"components/ResultTimeline.html":{},"components/TimelineLegendComponent.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["agdatecolumnfilter",{"_index":1563,"title":{},"body":{"interfaces/Column.html":{}}}],["agg",{"_index":349,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"components/FacetWrapperComponent.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["aggregate",{"_index":204,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"components/BsFacetDate.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["aggregation",{"_index":85,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"components/BsFacetDate.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/FacetChartDataPoint.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{},"components/FacetNgxChart.html":{},"components/FacetWrapperComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"miscellaneous/functions.html":{}}}],["aggregation.items",{"_index":235,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["aggregation.items.foreach(item",{"_index":241,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{}}}],["aggregation.items.length",{"_index":240,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{}}}],["aggregation.items.map(item",{"_index":3316,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["aggregation.name",{"_index":238,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["aggregationdata",{"_index":57,"title":{"interfaces/AggregationData.html":{}},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"coverage.html":{}}}],["aggregationedge",{"_index":109,"title":{"interfaces/AggregationEdge.html":{}},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"coverage.html":{}}}],["aggregationedgetype",{"_index":73,"title":{"interfaces/AggregationEdgeType.html":{}},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["aggregationedgetype).aggregation",{"_index":174,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{}}}],["aggregationitem",{"_index":86,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"components/BsFacetDate.html":{},"interfaces/FacetChartDataPoint.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{},"components/FacetNgxChart.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["aggregationname",{"_index":905,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{},"components/FacetWrapperComponent.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["aggregationprovider",{"_index":178,"title":{"classes/AggregationProvider.html":{}},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"coverage.html":{}}}],["aggregations",{"_index":176,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["aggregations.foreach(aggregation",{"_index":233,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{}}}],["aggregationtriggertype",{"_index":129,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"miscellaneous/typealiases.html":{}}}],["aggridmodule",{"_index":1,"title":{"modules/AgGridModule.html":{}},"body":{"modules/AgGridModule.html":{},"index.html":{},"modules.html":{}}}],["aggridviewcomponent",{"_index":7,"title":{},"body":{"modules/AgGridModule.html":{},"components/BsEdgeInfoCard.html":{},"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"components/BsTooltipComponent.html":{},"interfaces/Column.html":{},"components/DataModalComponent.html":{},"components/FacetNgxChart.html":{},"components/FacetWrapperComponent.html":{},"components/MapComponent.html":{},"components/NgxChart.html":{},"components/ResultTimeline.html":{},"components/TimelineLegendComponent.html":{},"coverage.html":{},"index.html":{}}}],["aginit",{"_index":2450,"title":{},"body":{"components/FacetWrapperComponent.html":{}}}],["aginit(params",{"_index":2455,"title":{},"body":{"components/FacetWrapperComponent.html":{}}}],["agm/core",{"_index":2534,"title":{},"body":{"modules/GoogleMapsModule.html":{},"components/MapComponent.html":{},"dependencies.html":{}}}],["agmcoremodule",{"_index":2533,"title":{},"body":{"modules/GoogleMapsModule.html":{}}}],["agminfowindow",{"_index":2581,"title":{},"body":{"components/MapComponent.html":{}}}],["agmodule",{"_index":30,"title":{},"body":{"modules/AgGridModule.html":{}}}],["agmodule.withcomponents([facetwrappercomponent",{"_index":51,"title":{},"body":{"modules/AgGridModule.html":{}}}],["agnumbercolumnfilter",{"_index":1557,"title":{},"body":{"interfaces/Column.html":{}}}],["algorithm",{"_index":3642,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["alias",{"_index":2484,"title":{},"body":{"components/FacetWrapperComponent.html":{}}}],["aliases",{"_index":4098,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["align",{"_index":1320,"title":{},"body":{"components/BsTooltipComponent.html":{}}}],["all_dates",{"_index":2995,"title":{},"body":{"components/ResultTimeline.html":{}}}],["all_dates.indexof(dateobj.display",{"_index":3026,"title":{},"body":{"components/ResultTimeline.html":{}}}],["all_dates.push(cooc[1",{"_index":3019,"title":{},"body":{"components/ResultTimeline.html":{}}}],["all_ids",{"_index":2994,"title":{},"body":{"components/ResultTimeline.html":{}}}],["all_ids.indexof(id",{"_index":3016,"title":{},"body":{"components/ResultTimeline.html":{}}}],["all_ids.push(id",{"_index":3020,"title":{},"body":{"components/ResultTimeline.html":{}}}],["allcolumns",{"_index":1706,"title":{},"body":{"interfaces/Column.html":{}}}],["allen",{"_index":4089,"title":{},"body":{"miscellaneous/functions.html":{}}}],["allow",{"_index":126,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"components/BsFacetDate.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{},"miscellaneous/typealiases.html":{}}}],["allowcustomrange",{"_index":766,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{}}}],["allowed",{"_index":839,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{}}}],["allowing",{"_index":330,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"interfaces/Column.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/SelectedRecordsProvider.html":{}}}],["allowpredefinedrange",{"_index":767,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{}}}],["allows",{"_index":560,"title":{},"body":{"classes/BaseProvider.html":{},"interfaces/Column.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["allprimarydates",{"_index":3490,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["allprimarydates.length",{"_index":3500,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["along",{"_index":3172,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["alpine",{"_index":1450,"title":{},"body":{"interfaces/Column.html":{}}}],["already",{"_index":320,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"interfaces/Column.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["alt",{"_index":522,"title":{},"body":{"classes/BaseProvider.html":{},"interfaces/Column.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/VisEvent.html":{}}}],["alternative",{"_index":1204,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["alternatively",{"_index":419,"title":{},"body":{"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"interfaces/CustomData.html":{},"classes/DynamicEdgeProvider.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["always",{"_index":1113,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/CustomData.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"interfaces/HeatmapItem.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["amount",{"_index":2732,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{}}}],["amount.split",{"_index":2737,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{}}}],["anchor",{"_index":1148,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["and/or",{"_index":463,"title":{},"body":{"classes/AsyncRecordsProvider.html":{},"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["angular",{"_index":32,"title":{},"body":{"modules/AgGridModule.html":{},"components/BsHeatmapComponent.html":{},"modules/FusionChartsModule.html":{},"interfaces/HeatmapItem.html":{},"dependencies.html":{}}}],["angular/common",{"_index":26,"title":{},"body":{"modules/AgGridModule.html":{},"modules/BsHeatmapModule.html":{},"modules/BsTimelineModule.html":{},"modules/FinanceModule.html":{},"modules/FusionChartsModule.html":{},"modules/GoogleMapsModule.html":{},"modules/NetworkModule.html":{},"modules/NgxChartsModule.html":{},"modules/VisTimelineModule.html":{}}}],["angular/core",{"_index":24,"title":{},"body":{"modules/AgGridModule.html":{},"components/BsEdgeInfoCard.html":{},"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"modules/BsHeatmapModule.html":{},"components/BsNodeInfoCard.html":{},"modules/BsTimelineModule.html":{},"components/BsTooltipComponent.html":{},"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/Column.html":{},"components/DataModalComponent.html":{},"interfaces/FacetChartDataPoint.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{},"components/FacetNgxChart.html":{},"components/FacetWrapperComponent.html":{},"modules/FinanceModule.html":{},"modules/FusionChartsModule.html":{},"modules/GoogleMapsModule.html":{},"interfaces/HeatmapItem.html":{},"components/MapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"modules/NetworkModule.html":{},"components/NgxChart.html":{},"modules/NgxChartsModule.html":{},"interfaces/NodeData.html":{},"components/ResultTimeline.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineEventType.html":{},"components/TimelineLegendComponent.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{},"modules/VisTimelineModule.html":{}}}],["angular/forms",{"_index":29,"title":{},"body":{"modules/AgGridModule.html":{},"components/BsFacetDate.html":{},"modules/BsHeatmapModule.html":{},"modules/BsTimelineModule.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{},"modules/NetworkModule.html":{},"interfaces/VisEvent.html":{}}}],["angular/modules/components/selection.html#selection",{"_index":3064,"title":{},"body":{"classes/SelectedRecordsProvider.html":{}}}],["animation",{"_index":679,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsNodeInfoCard.html":{},"interfaces/NodeData.html":{}}}],["another",{"_index":2234,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"components/MapComponent.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["any).getmodelfromui",{"_index":1771,"title":{},"body":{"interfaces/Column.html":{}}}],["anymore",{"_index":2047,"title":{},"body":{"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{}}}],["api",{"_index":1467,"title":{},"body":{"interfaces/Column.html":{}}}],["api.ts",{"_index":4014,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["app",{"_index":3726,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["appear",{"_index":3461,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["append(\"g",{"_index":3467,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["apple/steve",{"_index":272,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{}}}],["apply",{"_index":493,"title":{},"body":{"classes/BaseProvider.html":{},"interfaces/Column.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["applycolumnstateparams",{"_index":1415,"title":{},"body":{"interfaces/Column.html":{}}}],["applyorder",{"_index":1701,"title":{},"body":{"interfaces/Column.html":{}}}],["appropriate",{"_index":3816,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["appservice",{"_index":780,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/Column.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/FacetChartDataPoint.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{},"components/FacetNgxChart.html":{},"components/FacetWrapperComponent.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/VisEvent.html":{}}}],["april",{"_index":3347,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["area",{"_index":2602,"title":{},"body":{"components/MapComponent.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventType.html":{},"components/TimelineLegendComponent.html":{},"interfaces/TimelineSeries.html":{}}}],["areachartmodule",{"_index":2940,"title":{},"body":{"modules/NgxChartsModule.html":{}}}],["areastyles",{"_index":3077,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{}}}],["around",{"_index":2628,"title":{},"body":{"components/MapComponent.html":{}}}],["array",{"_index":1264,"title":{},"body":{"components/BsNodeInfoCard.html":{},"interfaces/NodeData.html":{}}}],["array.from(new",{"_index":1088,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["array.from(this.edgeidx.keys",{"_index":2193,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["array.from(this.edgeidx.values",{"_index":2183,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["array.from(this.nodeidx.keys",{"_index":2191,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["array.from(this.nodeidx.values",{"_index":2181,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["array.isarray(edges",{"_index":2202,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["array.isarray(ids",{"_index":2209,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["array.isarray(nodes",{"_index":2197,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["arrow",{"_index":562,"title":{},"body":{"classes/BaseProvider.html":{},"components/BsTooltipComponent.html":{}}}],["arrows",{"_index":1634,"title":{},"body":{"interfaces/Column.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["articles",{"_index":4081,"title":{},"body":{"miscellaneous/functions.html":{}}}],["asks",{"_index":4072,"title":{},"body":{"miscellaneous/functions.html":{}}}],["associate",{"_index":2565,"title":{},"body":{"components/MapComponent.html":{}}}],["assume",{"_index":253,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{}}}],["assumed",{"_index":246,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{}}}],["assuming",{"_index":270,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{}}}],["async",{"_index":3676,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{}}}],["asynchronous",{"_index":451,"title":{},"body":{"classes/AsyncRecordsProvider.html":{}}}],["asynchronously",{"_index":294,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"miscellaneous/functions.html":{}}}],["asyncrecordsprovider",{"_index":435,"title":{"classes/AsyncRecordsProvider.html":{}},"body":{"classes/AsyncRecordsProvider.html":{},"coverage.html":{}}}],["asyncrecordsproviderdemo",{"_index":3967,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["asyncrecordsproviderdemo(providerfactory",{"_index":4044,"title":{},"body":{"miscellaneous/functions.html":{}}}],["attach",{"_index":256,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{}}}],["attached",{"_index":468,"title":{},"body":{"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"components/NgxChart.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"miscellaneous/functions.html":{}}}],["attr(\"class",{"_index":3468,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["attr(\"d",{"_index":3472,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["attr(\"display",{"_index":3470,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["attr(\"text",{"_index":3474,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["attr(\"transform",{"_index":1144,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["attr(\"x",{"_index":3476,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["attr(\"y",{"_index":3477,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["audit",{"_index":3138,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["auditeventtype",{"_index":3083,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["auditwebservice",{"_index":3082,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["auto",{"_index":1160,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/Column.html":{},"components/DataModalComponent.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{}}}],["automatically",{"_index":151,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"components/BsHeatmapComponent.html":{},"interfaces/CustomData.html":{},"interfaces/HeatmapItem.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["autoresize",{"_index":1719,"title":{},"body":{"interfaces/Column.html":{}}}],["autosize",{"_index":1433,"title":{},"body":{"interfaces/Column.html":{}}}],["available",{"_index":1730,"title":{},"body":{"interfaces/Column.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{}}}],["avoid",{"_index":308,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"components/BsHeatmapComponent.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/HeatmapItem.html":{},"components/MapComponent.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/VisEvent.html":{}}}],["avoiding",{"_index":1374,"title":{},"body":{"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"components/NgxChart.html":{}}}],["axes",{"_index":1017,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["axis",{"_index":1022,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"components/ResultTimeline.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{},"miscellaneous/variables.html":{}}}],["axis.clickable",{"_index":1205,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["axis/scales",{"_index":1077,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["axisclickable",{"_index":970,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["axisclicked",{"_index":980,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["b",{"_index":3596,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["b.count",{"_index":1272,"title":{},"body":{"components/BsNodeInfoCard.html":{},"interfaces/NodeData.html":{}}}],["b.date.gettime",{"_index":3656,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["b0d5ce",{"_index":4142,"title":{},"body":{"miscellaneous/variables.html":{}}}],["background",{"_index":931,"title":{},"body":{"components/BsFacetDate.html":{}}}],["balham",{"_index":1448,"title":{},"body":{"interfaces/Column.html":{}}}],["ballmer",{"_index":4087,"title":{},"body":{"miscellaneous/functions.html":{}}}],["bar",{"_index":2307,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["barack",{"_index":4073,"title":{},"body":{"miscellaneous/functions.html":{}}}],["barchartmodule",{"_index":2941,"title":{},"body":{"modules/NgxChartsModule.html":{}}}],["barhorizontalcomponent",{"_index":1329,"title":{},"body":{"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"components/NgxChart.html":{}}}],["barverticalcomponent",{"_index":1328,"title":{},"body":{"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"components/NgxChart.html":{}}}],["base",{"_index":103,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"interfaces/CustomData.html":{},"classes/DynamicEdgeProvider.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["basechartcomponent",{"_index":1327,"title":{},"body":{"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"components/NgxChart.html":{}}}],["based",{"_index":2136,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{}}}],["baseprovider",{"_index":102,"title":{"classes/BaseProvider.html":{}},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"interfaces/CustomData.html":{},"classes/DynamicEdgeProvider.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"coverage.html":{}}}],["baseprovider:13",{"_index":449,"title":{},"body":{"classes/AsyncRecordsProvider.html":{}}}],["baseprovider:15",{"_index":403,"title":{},"body":{"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"classes/DynamicEdgeProvider.html":{},"classes/DynamicNodeProvider.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{}}}],["baseprovider:151",{"_index":426,"title":{},"body":{"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"classes/DynamicEdgeProvider.html":{},"classes/DynamicNodeProvider.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{}}}],["baseprovider:159",{"_index":429,"title":{},"body":{"classes/AggregationProvider.html":{}}}],["baseprovider:16",{"_index":401,"title":{},"body":{"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"classes/DynamicEdgeProvider.html":{},"classes/DynamicNodeProvider.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{}}}],["baseprovider:163",{"_index":434,"title":{},"body":{"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"classes/DynamicEdgeProvider.html":{},"classes/DynamicNodeProvider.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{}}}],["baseprovider:171",{"_index":432,"title":{},"body":{"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"classes/DynamicEdgeProvider.html":{},"classes/DynamicNodeProvider.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{}}}],["baseprovider:18",{"_index":404,"title":{},"body":{"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"classes/DynamicEdgeProvider.html":{},"classes/DynamicNodeProvider.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{}}}],["baseprovider:190",{"_index":2086,"title":{},"body":{"classes/DynamicEdgeProvider.html":{}}}],["baseprovider:195",{"_index":409,"title":{},"body":{"classes/AggregationProvider.html":{}}}],["baseprovider:199",{"_index":2104,"title":{},"body":{"classes/DynamicNodeProvider.html":{}}}],["baseprovider:202",{"_index":2085,"title":{},"body":{"classes/DynamicEdgeProvider.html":{}}}],["baseprovider:21",{"_index":399,"title":{},"body":{"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"classes/DynamicEdgeProvider.html":{},"classes/DynamicNodeProvider.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{}}}],["baseprovider:211",{"_index":414,"title":{},"body":{"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"classes/DynamicEdgeProvider.html":{},"classes/DynamicNodeProvider.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{}}}],["baseprovider:219",{"_index":412,"title":{},"body":{"classes/AggregationProvider.html":{}}}],["baseprovider:22",{"_index":3067,"title":{},"body":{"classes/SelectedRecordsProvider.html":{}}}],["baseprovider:23",{"_index":405,"title":{},"body":{"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"classes/DynamicEdgeProvider.html":{},"classes/DynamicNodeProvider.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{}}}],["baseprovider:241",{"_index":411,"title":{},"body":{"classes/AggregationProvider.html":{}}}],["baseprovider:245",{"_index":430,"title":{},"body":{"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"classes/DynamicEdgeProvider.html":{},"classes/DynamicNodeProvider.html":{},"classes/RecordsProvider.html":{}}}],["baseprovider:25",{"_index":402,"title":{},"body":{"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"classes/DynamicEdgeProvider.html":{},"classes/DynamicNodeProvider.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{}}}],["baseprovider:265",{"_index":2087,"title":{},"body":{"classes/DynamicEdgeProvider.html":{},"classes/DynamicNodeProvider.html":{},"classes/RecordsProvider.html":{}}}],["baseprovider:278",{"_index":474,"title":{},"body":{"classes/AsyncRecordsProvider.html":{},"classes/DynamicEdgeProvider.html":{},"classes/DynamicNodeProvider.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{}}}],["baseprovider:279",{"_index":410,"title":{},"body":{"classes/AggregationProvider.html":{}}}],["baseprovider:305",{"_index":483,"title":{},"body":{"classes/AsyncRecordsProvider.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{}}}],["baseprovider:328",{"_index":473,"title":{},"body":{"classes/AsyncRecordsProvider.html":{},"classes/DynamicEdgeProvider.html":{},"classes/DynamicNodeProvider.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{}}}],["baseprovider:340",{"_index":461,"title":{},"body":{"classes/AsyncRecordsProvider.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{}}}],["baseprovider:38",{"_index":450,"title":{},"body":{"classes/AsyncRecordsProvider.html":{}}}],["baseprovider:42",{"_index":2103,"title":{},"body":{"classes/DynamicNodeProvider.html":{},"classes/SelectedRecordsProvider.html":{}}}],["baseprovider:48",{"_index":3068,"title":{},"body":{"classes/SelectedRecordsProvider.html":{}}}],["baseprovider:61",{"_index":2084,"title":{},"body":{"classes/DynamicEdgeProvider.html":{}}}],["baseprovider:68",{"_index":397,"title":{},"body":{"classes/AggregationProvider.html":{}}}],["baseprovider:77",{"_index":2947,"title":{},"body":{"classes/RecordsProvider.html":{}}}],["become",{"_index":4077,"title":{},"body":{"miscellaneous/functions.html":{}}}],["before",{"_index":1114,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{}}}],["behavior",{"_index":3523,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["behaviors",{"_index":3388,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["bellow",{"_index":3441,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["belong",{"_index":219,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["below",{"_index":3326,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["benefit",{"_index":1026,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["bestaggregation",{"_index":3273,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["beta.0",{"_index":4027,"title":{},"body":{"dependencies.html":{}}}],["better",{"_index":1203,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["between",{"_index":527,"title":{},"body":{"classes/BaseProvider.html":{},"interfaces/CustomData.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"miscellaneous/functions.html":{}}}],["bill",{"_index":250,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"classes/BaseProvider.html":{},"interfaces/CustomData.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"miscellaneous/functions.html":{}}}],["bin",{"_index":3635,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["bisectdate",{"_index":3401,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["black",{"_index":933,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["block",{"_index":1197,"title":{},"body":{"components/BsHeatmapComponent.html":{},"components/FacetWrapperComponent.html":{}}}],["boolean",{"_index":82,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"components/BsEdgeInfoCard.html":{},"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/CustomData.html":{},"components/DataModalComponent.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/FacetChartDataPoint.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{},"components/FacetNgxChart.html":{},"components/FacetWrapperComponent.html":{},"interfaces/HeatmapItem.html":{},"components/MapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"components/NgxChart.html":{},"interfaces/Node.html":{},"interfaces/NodeData.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{}}}],["border",{"_index":643,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsNodeInfoCard.html":{},"components/BsTooltipComponent.html":{},"interfaces/NodeData.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["both",{"_index":424,"title":{},"body":{"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"interfaces/CustomData.html":{},"classes/DynamicEdgeProvider.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["bottom",{"_index":997,"title":{},"body":{"components/BsHeatmapComponent.html":{},"components/FacetWrapperComponent.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{}}}],["bounds",{"_index":2539,"title":{},"body":{"components/MapComponent.html":{}}}],["bracket",{"_index":3345,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["break",{"_index":1558,"title":{},"body":{"interfaces/Column.html":{}}}],["briefly",{"_index":1375,"title":{},"body":{"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"components/NgxChart.html":{}}}],["browse",{"_index":4096,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":4095,"title":{},"body":{"modules.html":{}}}],["brush",{"_index":3397,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["brush's",{"_index":3580,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["brushbehavior",{"_index":3389,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["brushing",{"_index":3405,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["brushselection",{"_index":3393,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["bsactionmodule",{"_index":37,"title":{},"body":{"modules/AgGridModule.html":{},"modules/BsHeatmapModule.html":{},"modules/BsTimelineModule.html":{},"modules/FinanceModule.html":{},"modules/GoogleMapsModule.html":{},"modules/NetworkModule.html":{}}}],["bsadvancedmodule",{"_index":1288,"title":{},"body":{"modules/BsTimelineModule.html":{}}}],["bsedgeinfocard",{"_index":621,"title":{"components/BsEdgeInfoCard.html":{}},"body":{"components/BsEdgeInfoCard.html":{},"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"components/BsTooltipComponent.html":{},"components/DataModalComponent.html":{},"components/FacetNgxChart.html":{},"components/FacetWrapperComponent.html":{},"components/MapComponent.html":{},"modules/NetworkModule.html":{},"components/NgxChart.html":{},"components/ResultTimeline.html":{},"components/TimelineLegendComponent.html":{},"coverage.html":{},"index.html":{}}}],["bsfacetdate",{"_index":710,"title":{"components/BsFacetDate.html":{}},"body":{"components/BsEdgeInfoCard.html":{},"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"modules/BsTimelineModule.html":{},"components/BsTooltipComponent.html":{},"components/DataModalComponent.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{},"components/FacetNgxChart.html":{},"components/FacetWrapperComponent.html":{},"components/MapComponent.html":{},"components/NgxChart.html":{},"components/ResultTimeline.html":{},"components/TimelineLegendComponent.html":{},"coverage.html":{},"index.html":{}}}],["bsfacetheatmapcomponent",{"_index":712,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"modules/BsHeatmapModule.html":{},"components/BsNodeInfoCard.html":{},"components/BsTooltipComponent.html":{},"components/DataModalComponent.html":{},"components/FacetNgxChart.html":{},"components/FacetWrapperComponent.html":{},"components/MapComponent.html":{},"components/NgxChart.html":{},"components/ResultTimeline.html":{},"components/TimelineLegendComponent.html":{},"coverage.html":{},"index.html":{}}}],["bsfacetmodule",{"_index":41,"title":{},"body":{"modules/AgGridModule.html":{},"modules/BsTimelineModule.html":{},"modules/GoogleMapsModule.html":{},"modules/NetworkModule.html":{}}}],["bsfacettimelinecomponent",{"_index":714,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"modules/BsTimelineModule.html":{},"components/BsTooltipComponent.html":{},"components/DataModalComponent.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{},"components/FacetNgxChart.html":{},"components/FacetWrapperComponent.html":{},"components/MapComponent.html":{},"components/NgxChart.html":{},"components/ResultTimeline.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"components/TimelineLegendComponent.html":{},"interfaces/TimelineRecords.html":{},"coverage.html":{},"index.html":{}}}],["bsfacettimelinecomponent.createaggregationevents(config",{"_index":3229,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["bsfacettimelinecomponent.createtimeseries",{"_index":904,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{}}}],["bsfacettimelinecomponent.createtimeseries(config",{"_index":3224,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["bsfacettimelinecomponent.defaultrecordstyle(r.$selected",{"_index":3241,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["bsheatmapcomponent",{"_index":716,"title":{"components/BsHeatmapComponent.html":{}},"body":{"components/BsEdgeInfoCard.html":{},"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"modules/BsHeatmapModule.html":{},"components/BsNodeInfoCard.html":{},"components/BsTooltipComponent.html":{},"components/DataModalComponent.html":{},"components/FacetNgxChart.html":{},"components/FacetWrapperComponent.html":{},"interfaces/HeatmapItem.html":{},"components/MapComponent.html":{},"components/NgxChart.html":{},"components/ResultTimeline.html":{},"components/TimelineLegendComponent.html":{},"coverage.html":{},"index.html":{}}}],["bsheatmapmodule",{"_index":1224,"title":{"modules/BsHeatmapModule.html":{}},"body":{"modules/BsHeatmapModule.html":{},"modules/BsTimelineModule.html":{},"modules/FinanceModule.html":{},"index.html":{},"modules.html":{}}}],["bsmodalmodule",{"_index":39,"title":{},"body":{"modules/AgGridModule.html":{}}}],["bsnodeinfocard",{"_index":717,"title":{"components/BsNodeInfoCard.html":{}},"body":{"components/BsEdgeInfoCard.html":{},"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"components/BsTooltipComponent.html":{},"components/DataModalComponent.html":{},"components/FacetNgxChart.html":{},"components/FacetWrapperComponent.html":{},"components/MapComponent.html":{},"modules/NetworkModule.html":{},"components/NgxChart.html":{},"interfaces/NodeData.html":{},"components/ResultTimeline.html":{},"components/TimelineLegendComponent.html":{},"coverage.html":{},"index.html":{}}}],["bsresultsheatmapview",{"_index":718,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"modules/BsHeatmapModule.html":{},"components/BsNodeInfoCard.html":{},"components/BsTooltipComponent.html":{},"components/DataModalComponent.html":{},"components/FacetNgxChart.html":{},"components/FacetWrapperComponent.html":{},"components/MapComponent.html":{},"components/NgxChart.html":{},"components/ResultTimeline.html":{},"components/TimelineLegendComponent.html":{},"coverage.html":{},"index.html":{}}}],["bsselectionmodule",{"_index":1229,"title":{},"body":{"modules/BsHeatmapModule.html":{},"modules/BsTimelineModule.html":{},"modules/FusionChartsModule.html":{},"modules/GoogleMapsModule.html":{},"modules/NgxChartsModule.html":{}}}],["bstimelinecomponent",{"_index":720,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"modules/BsTimelineModule.html":{},"components/BsTooltipComponent.html":{},"components/DataModalComponent.html":{},"components/FacetNgxChart.html":{},"components/FacetWrapperComponent.html":{},"components/MapComponent.html":{},"components/NgxChart.html":{},"components/ResultTimeline.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"components/TimelineLegendComponent.html":{},"interfaces/TimelineSeries.html":{},"coverage.html":{},"index.html":{}}}],["bstimelinecomponent.counter",{"_index":3411,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["bstimelinemodule",{"_index":1279,"title":{"modules/BsTimelineModule.html":{}},"body":{"modules/BsTimelineModule.html":{},"index.html":{},"modules.html":{}}}],["bstooltipcomponent",{"_index":721,"title":{"components/BsTooltipComponent.html":{}},"body":{"components/BsEdgeInfoCard.html":{},"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"modules/BsHeatmapModule.html":{},"components/BsNodeInfoCard.html":{},"components/BsTooltipComponent.html":{},"components/DataModalComponent.html":{},"components/FacetNgxChart.html":{},"components/FacetWrapperComponent.html":{},"components/MapComponent.html":{},"components/NgxChart.html":{},"components/ResultTimeline.html":{},"components/TimelineLegendComponent.html":{},"coverage.html":{},"index.html":{}}}],["buckets",{"_index":971,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["bugs",{"_index":3804,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["build",{"_index":1020,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["buildchart",{"_index":964,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["buildchart(update",{"_index":1013,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["builds",{"_index":1016,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["built",{"_index":2315,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["button",{"_index":1479,"title":{},"body":{"interfaces/Column.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{}}}],["buttons",{"_index":1477,"title":{},"body":{"interfaces/Column.html":{}}}],["c",{"_index":2675,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{}}}],["c.field",{"_index":1692,"title":{},"body":{"interfaces/Column.html":{}}}],["c.hide",{"_index":1698,"title":{},"body":{"interfaces/Column.html":{}}}],["c3e6cb",{"_index":2309,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["cache",{"_index":2022,"title":{},"body":{"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{}}}],["call",{"_index":452,"title":{},"body":{"classes/AsyncRecordsProvider.html":{},"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{}}}],["call(d3.axisleft(this.y).ticksize(0",{"_index":1135,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["call(d3.axistop(this.x).ticksize(0",{"_index":1131,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["call(this.brushbehavior",{"_index":3458,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["call(this.zoombehavior",{"_index":3543,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["callback",{"_index":1724,"title":{},"body":{"interfaces/Column.html":{}}}],["callbacks",{"_index":3277,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{}}}],["called",{"_index":309,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"components/BsHeatmapComponent.html":{},"interfaces/Column.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"components/FacetWrapperComponent.html":{},"interfaces/HeatmapItem.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{}}}],["calling",{"_index":2709,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["calls",{"_index":3883,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["cancel",{"_index":2165,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["candy",{"_index":2526,"title":{},"body":{"modules/FusionChartsModule.html":{}}}],["candytheme",{"_index":2523,"title":{},"body":{"modules/FusionChartsModule.html":{}}}],["capture",{"_index":1760,"title":{},"body":{"interfaces/Column.html":{}}}],["card",{"_index":632,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsNodeInfoCard.html":{},"interfaces/NodeData.html":{}}}],["card'},{'name",{"_index":709,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"components/BsTooltipComponent.html":{},"components/DataModalComponent.html":{},"components/FacetNgxChart.html":{},"components/FacetWrapperComponent.html":{},"components/MapComponent.html":{},"components/NgxChart.html":{},"components/ResultTimeline.html":{},"components/TimelineLegendComponent.html":{}}}],["card.component",{"_index":2893,"title":{},"body":{"modules/NetworkModule.html":{}}}],["card.component.html",{"_index":649,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsNodeInfoCard.html":{},"interfaces/NodeData.html":{}}}],["card.component.ts",{"_index":628,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsNodeInfoCard.html":{},"interfaces/NodeData.html":{},"coverage.html":{}}}],["card.component.ts:24",{"_index":655,"title":{},"body":{"components/BsEdgeInfoCard.html":{}}}],["card.component.ts:26",{"_index":659,"title":{},"body":{"components/BsEdgeInfoCard.html":{}}}],["card.component.ts:27",{"_index":660,"title":{},"body":{"components/BsEdgeInfoCard.html":{}}}],["card.component.ts:29",{"_index":661,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsNodeInfoCard.html":{}}}],["card.component.ts:30",{"_index":662,"title":{},"body":{"components/BsEdgeInfoCard.html":{}}}],["card.component.ts:31",{"_index":1238,"title":{},"body":{"components/BsNodeInfoCard.html":{}}}],["card.component.ts:32",{"_index":658,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsNodeInfoCard.html":{}}}],["card.component.ts:34",{"_index":1240,"title":{},"body":{"components/BsNodeInfoCard.html":{}}}],["card.component.ts:36",{"_index":1239,"title":{},"body":{"components/BsNodeInfoCard.html":{}}}],["card.component.ts:38",{"_index":1237,"title":{},"body":{"components/BsNodeInfoCard.html":{}}}],["card.component.ts:40",{"_index":657,"title":{},"body":{"components/BsEdgeInfoCard.html":{}}}],["card.component.ts:70",{"_index":1236,"title":{},"body":{"components/BsNodeInfoCard.html":{}}}],["cards",{"_index":687,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsNodeInfoCard.html":{},"interfaces/NodeData.html":{},"interfaces/VisEvent.html":{}}}],["case",{"_index":1364,"title":{},"body":{"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/Column.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"components/NgxChart.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"miscellaneous/functions.html":{}}}],["catch",{"_index":3033,"title":{},"body":{"components/ResultTimeline.html":{}}}],["categories",{"_index":2666,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{}}}],["category",{"_index":2648,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{}}}],["cause",{"_index":3675,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["caused",{"_index":2708,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["cc",{"_index":369,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{}}}],["cc?.column.split",{"_index":371,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{}}}],["ccaggregation",{"_index":900,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["ccaggregation?.mask",{"_index":3314,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["cccolumn",{"_index":1389,"title":{},"body":{"interfaces/Column.html":{},"components/DataModalComponent.html":{}}}],["cdref",{"_index":754,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{}}}],["cell",{"_index":1652,"title":{},"body":{"interfaces/Column.html":{},"components/DataModalComponent.html":{}}}],["cell's",{"_index":1662,"title":{},"body":{"interfaces/Column.html":{}}}],["celldoubleclickedevent",{"_index":1405,"title":{},"body":{"interfaces/Column.html":{}}}],["cellrenderer",{"_index":1520,"title":{},"body":{"interfaces/Column.html":{}}}],["center",{"_index":3120,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["centered",{"_index":2627,"title":{},"body":{"components/MapComponent.html":{}}}],["change",{"_index":3442,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["change.currentvalue",{"_index":3672,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["change.previousvalue",{"_index":3670,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["changed",{"_index":1765,"title":{},"body":{"interfaces/Column.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["changedetectorref",{"_index":781,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{}}}],["changes",{"_index":803,"title":{},"body":{"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"interfaces/Column.html":{},"interfaces/FacetChartDataPoint.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{},"components/FacetNgxChart.html":{},"interfaces/HeatmapItem.html":{},"components/MapComponent.html":{},"components/NgxChart.html":{},"components/ResultTimeline.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"miscellaneous/functions.html":{}}}],["changes.events",{"_index":3152,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["changes.results",{"_index":876,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/FacetChartDataPoint.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{},"components/FacetNgxChart.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["changes.toolbaractions",{"_index":1507,"title":{},"body":{"interfaces/Column.html":{}}}],["changes[\"data",{"_index":3449,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["changes[\"events",{"_index":3182,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["changes[\"results",{"_index":2701,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{}}}],["changes[\"selection",{"_index":3444,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["changes[\"timeseries",{"_index":3175,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["changes[\"width",{"_index":3453,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["changes['dates",{"_index":2988,"title":{},"body":{"components/ResultTimeline.html":{}}}],["changes['events",{"_index":2989,"title":{},"body":{"components/ResultTimeline.html":{}}}],["changes['providers",{"_index":3752,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["chart",{"_index":1018,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"modules/FusionChartsModule.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyDatum.html":{},"components/NgxChart.html":{},"modules/NgxChartsModule.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["chart's",{"_index":2820,"title":{},"body":{"interfaces/MoneyDatum.html":{}}}],["chart'},{'name",{"_index":726,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"components/BsTooltipComponent.html":{},"components/DataModalComponent.html":{},"components/FacetNgxChart.html":{},"components/FacetWrapperComponent.html":{},"components/MapComponent.html":{},"components/NgxChart.html":{},"components/ResultTimeline.html":{},"components/TimelineLegendComponent.html":{}}}],["chart.html",{"_index":1336,"title":{},"body":{"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"components/NgxChart.html":{}}}],["chart.scss",{"_index":1337,"title":{},"body":{"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"components/NgxChart.html":{}}}],["chart.ts",{"_index":2303,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"coverage.html":{}}}],["chart.ts:112",{"_index":2431,"title":{},"body":{"components/FacetNgxChart.html":{}}}],["chart.ts:189",{"_index":2440,"title":{},"body":{"components/FacetNgxChart.html":{}}}],["chart.ts:204",{"_index":2436,"title":{},"body":{"components/FacetNgxChart.html":{}}}],["chart.ts:21",{"_index":2426,"title":{},"body":{"components/FacetNgxChart.html":{}}}],["chart.ts:215",{"_index":2434,"title":{},"body":{"components/FacetNgxChart.html":{}}}],["chart.ts:22",{"_index":2420,"title":{},"body":{"components/FacetNgxChart.html":{}}}],["chart.ts:23",{"_index":2421,"title":{},"body":{"components/FacetNgxChart.html":{}}}],["chart.ts:230",{"_index":2435,"title":{},"body":{"components/FacetNgxChart.html":{}}}],["chart.ts:235",{"_index":2428,"title":{},"body":{"components/FacetNgxChart.html":{}}}],["chart.ts:24",{"_index":2422,"title":{},"body":{"components/FacetNgxChart.html":{}}}],["chart.ts:25",{"_index":2424,"title":{},"body":{"components/FacetNgxChart.html":{}}}],["chart.ts:251",{"_index":2432,"title":{},"body":{"components/FacetNgxChart.html":{}}}],["chart.ts:255",{"_index":2429,"title":{},"body":{"components/FacetNgxChart.html":{}}}],["chart.ts:26",{"_index":2423,"title":{},"body":{"components/FacetNgxChart.html":{}}}],["chart.ts:264",{"_index":2433,"title":{},"body":{"components/FacetNgxChart.html":{}}}],["chart.ts:27",{"_index":2425,"title":{},"body":{"components/FacetNgxChart.html":{}}}],["chart.ts:28",{"_index":2427,"title":{},"body":{"components/FacetNgxChart.html":{}}}],["chart.ts:31",{"_index":2437,"title":{},"body":{"components/FacetNgxChart.html":{}}}],["chart.ts:34",{"_index":2438,"title":{},"body":{"components/FacetNgxChart.html":{}}}],["chart.ts:35",{"_index":2439,"title":{},"body":{"components/FacetNgxChart.html":{}}}],["chart.ts:46",{"_index":2419,"title":{},"body":{"components/FacetNgxChart.html":{}}}],["chart.ts:91",{"_index":2430,"title":{},"body":{"components/FacetNgxChart.html":{}}}],["chart.ts:98",{"_index":2441,"title":{},"body":{"components/FacetNgxChart.html":{}}}],["chart/chart",{"_index":2304,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"modules/FusionChartsModule.html":{},"modules/NgxChartsModule.html":{}}}],["chart/facet",{"_index":2302,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"modules/NgxChartsModule.html":{},"coverage.html":{}}}],["chartcomponent",{"_index":2904,"title":{},"body":{"components/NgxChart.html":{}}}],["chartcomponent(type",{"_index":2910,"title":{},"body":{"components/NgxChart.html":{}}}],["chartcomponent(type:string",{"_index":1362,"title":{},"body":{"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"components/NgxChart.html":{}}}],["chartdatapoint",{"_index":1323,"title":{"interfaces/ChartDataPoint.html":{}},"body":{"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"components/NgxChart.html":{},"coverage.html":{}}}],["chartoptions",{"_index":1333,"title":{"interfaces/ChartOptions.html":{}},"body":{"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"components/NgxChart.html":{},"coverage.html":{}}}],["charts",{"_index":1331,"title":{},"body":{"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"modules/FusionChartsModule.html":{},"components/NgxChart.html":{},"modules/NgxChartsModule.html":{},"dependencies.html":{}}}],["charts.module.ts",{"_index":2939,"title":{},"body":{"modules/NgxChartsModule.html":{}}}],["charts/chart/chart.ts",{"_index":1324,"title":{},"body":{"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"components/NgxChart.html":{},"coverage.html":{}}}],["charts/chart/chart.ts:28",{"_index":2908,"title":{},"body":{"components/NgxChart.html":{}}}],["charts/chart/chart.ts:29",{"_index":2907,"title":{},"body":{"components/NgxChart.html":{}}}],["charts/chart/chart.ts:30",{"_index":2909,"title":{},"body":{"components/NgxChart.html":{}}}],["charts/chart/chart.ts:31",{"_index":2924,"title":{},"body":{"components/NgxChart.html":{}}}],["charts/chart/chart.ts:32",{"_index":2922,"title":{},"body":{"components/NgxChart.html":{}}}],["charts/chart/chart.ts:33",{"_index":2918,"title":{},"body":{"components/NgxChart.html":{}}}],["charts/chart/chart.ts:34",{"_index":2919,"title":{},"body":{"components/NgxChart.html":{}}}],["charts/chart/chart.ts:35",{"_index":2906,"title":{},"body":{"components/NgxChart.html":{}}}],["charts/chart/chart.ts:43",{"_index":2916,"title":{},"body":{"components/NgxChart.html":{}}}],["charts/chart/chart.ts:49",{"_index":2915,"title":{},"body":{"components/NgxChart.html":{}}}],["charts/chart/chart.ts:57",{"_index":2914,"title":{},"body":{"components/NgxChart.html":{}}}],["charts/chart/chart.ts:62",{"_index":2926,"title":{},"body":{"components/NgxChart.html":{}}}],["charts/chart/chart.ts:66",{"_index":2911,"title":{},"body":{"components/NgxChart.html":{}}}],["charts/chart/chart.ts:75",{"_index":2928,"title":{},"body":{"components/NgxChart.html":{}}}],["charts/chart/chart.ts:79",{"_index":2913,"title":{},"body":{"components/NgxChart.html":{}}}],["charts/chart/chart.ts:83",{"_index":2912,"title":{},"body":{"components/NgxChart.html":{}}}],["charts/chart/chart.ts:92",{"_index":2920,"title":{},"body":{"components/NgxChart.html":{}}}],["charts/facet",{"_index":2301,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"coverage.html":{}}}],["charts/ngx",{"_index":2938,"title":{},"body":{"modules/NgxChartsModule.html":{}}}],["charttype",{"_index":1360,"title":{},"body":{"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"components/NgxChart.html":{}}}],["check",{"_index":1647,"title":{},"body":{"interfaces/Column.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["checkbox",{"_index":1568,"title":{},"body":{"interfaces/Column.html":{}}}],["checkboxes",{"_index":1444,"title":{},"body":{"interfaces/Column.html":{}}}],["checkdatachanges(change",{"_index":3668,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["children",{"_index":360,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"interfaces/Column.html":{},"interfaces/VisEvent.html":{}}}],["choice",{"_index":1447,"title":{},"body":{"interfaces/Column.html":{}}}],["circle",{"_index":340,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{}}}],["circular",{"_index":639,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsNodeInfoCard.html":{},"interfaces/NodeData.html":{}}}],["class",{"_index":53,"title":{"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"classes/DynamicEdgeProvider.html":{},"classes/DynamicNodeProvider.html":{},"classes/NetworkDataset.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{}},"body":{"modules/AgGridModule.html":{},"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"components/BsEdgeInfoCard.html":{},"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"modules/BsHeatmapModule.html":{},"components/BsNodeInfoCard.html":{},"modules/BsTimelineModule.html":{},"components/BsTooltipComponent.html":{},"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/Column.html":{},"interfaces/CustomData.html":{},"components/DataModalComponent.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/FacetChartDataPoint.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{},"components/FacetNgxChart.html":{},"components/FacetWrapperComponent.html":{},"modules/FinanceModule.html":{},"modules/FusionChartsModule.html":{},"modules/GoogleMapsModule.html":{},"interfaces/HeatmapItem.html":{},"components/MapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"modules/NetworkModule.html":{},"interfaces/NetworkProvider.html":{},"components/NgxChart.html":{},"modules/NgxChartsModule.html":{},"interfaces/Node.html":{},"interfaces/NodeData.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"components/ResultTimeline.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineEventType.html":{},"components/TimelineLegendComponent.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{},"modules/VisTimelineModule.html":{},"coverage.html":{}}}],["class=\"me",{"_index":696,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsNodeInfoCard.html":{}}}],["classes",{"_index":376,"title":{},"body":{"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"classes/DynamicEdgeProvider.html":{},"classes/DynamicNodeProvider.html":{},"classes/NetworkDataset.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{},"index.html":{}}}],["clause",{"_index":1612,"title":{},"body":{"interfaces/Column.html":{}}}],["clean",{"_index":1484,"title":{},"body":{"interfaces/Column.html":{}}}],["cleanremovenode",{"_index":2207,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["cleanremovenode(nodeid",{"_index":2219,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["clear",{"_index":1686,"title":{},"body":{"interfaces/Column.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"components/MapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/VisEvent.html":{}}}],["clearfilters",{"_index":2316,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"components/MapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/VisEvent.html":{}}}],["clearfiltersaction",{"_index":755,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{}}}],["clearing",{"_index":2603,"title":{},"body":{"components/MapComponent.html":{}}}],["clearly",{"_index":3681,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["clears",{"_index":1829,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["click",{"_index":1339,"title":{},"body":{"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/Column.html":{},"components/FacetNgxChart.html":{},"components/NgxChart.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{}}}],["click(datapoint",{"_index":2402,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["clicked",{"_index":310,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"components/MapComponent.html":{},"interfaces/MoneyDatum.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/VisEvent.html":{},"miscellaneous/functions.html":{}}}],["clicks",{"_index":1036,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{}}}],["clientside",{"_index":1482,"title":{},"body":{"interfaces/Column.html":{}}}],["clipboard",{"_index":1711,"title":{},"body":{"interfaces/Column.html":{},"components/DataModalComponent.html":{}}}],["close",{"_index":1964,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["closed",{"_index":650,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsNodeInfoCard.html":{},"components/MapComponent.html":{},"interfaces/NodeData.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/VisEvent.html":{}}}],["closeness",{"_index":3637,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["closetooltip",{"_index":3306,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["closewindow",{"_index":2545,"title":{},"body":{"components/MapComponent.html":{}}}],["cloud",{"_index":2651,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{}}}],["cloud'},{'name",{"_index":734,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"components/BsTooltipComponent.html":{},"components/DataModalComponent.html":{},"components/FacetNgxChart.html":{},"components/FacetWrapperComponent.html":{},"components/MapComponent.html":{},"components/NgxChart.html":{},"components/ResultTimeline.html":{},"components/TimelineLegendComponent.html":{}}}],["cloud.component",{"_index":2511,"title":{},"body":{"modules/FinanceModule.html":{}}}],["cloud.component.html",{"_index":2652,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{}}}],["cloud.component.scss",{"_index":2653,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{}}}],["cloud.component.ts",{"_index":2647,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"coverage.html":{}}}],["cloud/money",{"_index":2510,"title":{},"body":{"modules/FinanceModule.html":{},"interfaces/MoneyCloudDatum.html":{},"coverage.html":{}}}],["clunky",{"_index":1372,"title":{},"body":{"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"components/NgxChart.html":{}}}],["cluster_aggridmodule",{"_index":4,"title":{},"body":{"modules/AgGridModule.html":{},"index.html":{}}}],["cluster_aggridmodule_declarations",{"_index":5,"title":{},"body":{"modules/AgGridModule.html":{},"index.html":{}}}],["cluster_aggridmodule_exports",{"_index":6,"title":{},"body":{"modules/AgGridModule.html":{},"index.html":{}}}],["cluster_bsheatmapmodule",{"_index":1225,"title":{},"body":{"modules/BsHeatmapModule.html":{},"index.html":{}}}],["cluster_bsheatmapmodule_declarations",{"_index":1227,"title":{},"body":{"modules/BsHeatmapModule.html":{},"index.html":{}}}],["cluster_bsheatmapmodule_exports",{"_index":1226,"title":{},"body":{"modules/BsHeatmapModule.html":{},"index.html":{}}}],["cluster_bstimelinemodule",{"_index":1280,"title":{},"body":{"modules/BsTimelineModule.html":{},"index.html":{}}}],["cluster_bstimelinemodule_declarations",{"_index":1283,"title":{},"body":{"modules/BsTimelineModule.html":{},"index.html":{}}}],["cluster_bstimelinemodule_exports",{"_index":1281,"title":{},"body":{"modules/BsTimelineModule.html":{},"index.html":{}}}],["cluster_bstimelinemodule_imports",{"_index":1282,"title":{},"body":{"modules/BsTimelineModule.html":{}}}],["cluster_financemodule",{"_index":2504,"title":{},"body":{"modules/FinanceModule.html":{},"index.html":{}}}],["cluster_financemodule_declarations",{"_index":2507,"title":{},"body":{"modules/FinanceModule.html":{},"index.html":{}}}],["cluster_financemodule_exports",{"_index":2505,"title":{},"body":{"modules/FinanceModule.html":{},"index.html":{}}}],["cluster_financemodule_imports",{"_index":2506,"title":{},"body":{"modules/FinanceModule.html":{}}}],["cluster_fusionchartsmodule",{"_index":2513,"title":{},"body":{"modules/FusionChartsModule.html":{},"index.html":{}}}],["cluster_fusionchartsmodule_declarations",{"_index":2514,"title":{},"body":{"modules/FusionChartsModule.html":{},"index.html":{}}}],["cluster_fusionchartsmodule_exports",{"_index":2515,"title":{},"body":{"modules/FusionChartsModule.html":{},"index.html":{}}}],["cluster_googlemapsmodule",{"_index":2529,"title":{},"body":{"modules/GoogleMapsModule.html":{},"index.html":{}}}],["cluster_googlemapsmodule_declarations",{"_index":2530,"title":{},"body":{"modules/GoogleMapsModule.html":{},"index.html":{}}}],["cluster_googlemapsmodule_exports",{"_index":2531,"title":{},"body":{"modules/GoogleMapsModule.html":{},"index.html":{}}}],["cluster_networkmodule",{"_index":2887,"title":{},"body":{"modules/NetworkModule.html":{},"index.html":{}}}],["cluster_networkmodule_declarations",{"_index":2888,"title":{},"body":{"modules/NetworkModule.html":{},"index.html":{}}}],["cluster_networkmodule_exports",{"_index":2889,"title":{},"body":{"modules/NetworkModule.html":{},"index.html":{}}}],["cluster_ngxchartsmodule",{"_index":2935,"title":{},"body":{"modules/NgxChartsModule.html":{},"index.html":{}}}],["cluster_ngxchartsmodule_declarations",{"_index":2937,"title":{},"body":{"modules/NgxChartsModule.html":{},"index.html":{}}}],["cluster_ngxchartsmodule_exports",{"_index":2936,"title":{},"body":{"modules/NgxChartsModule.html":{},"index.html":{}}}],["cluster_vistimelinemodule",{"_index":3900,"title":{},"body":{"modules/VisTimelineModule.html":{},"index.html":{}}}],["cluster_vistimelinemodule_declarations",{"_index":3902,"title":{},"body":{"modules/VisTimelineModule.html":{},"index.html":{}}}],["cluster_vistimelinemodule_exports",{"_index":3901,"title":{},"body":{"modules/VisTimelineModule.html":{},"index.html":{}}}],["clustering",{"_index":3644,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["col",{"_index":549,"title":{},"body":{"classes/BaseProvider.html":{},"interfaces/Column.html":{},"components/FacetWrapperComponent.html":{}}}],["col.$column",{"_index":1532,"title":{},"body":{"interfaces/Column.html":{}}}],["col.$column?.label",{"_index":1537,"title":{},"body":{"interfaces/Column.html":{}}}],["col.cellrenderer",{"_index":1541,"title":{},"body":{"interfaces/Column.html":{}}}],["col.cellrendererframework",{"_index":1542,"title":{},"body":{"interfaces/Column.html":{}}}],["col.checkboxselection",{"_index":1571,"title":{},"body":{"interfaces/Column.html":{}}}],["col.field",{"_index":1539,"title":{},"body":{"interfaces/Column.html":{}}}],["col.filter",{"_index":1556,"title":{},"body":{"interfaces/Column.html":{}}}],["col.headername",{"_index":1536,"title":{},"body":{"interfaces/Column.html":{}}}],["col.headertooltip",{"_index":1540,"title":{},"body":{"interfaces/Column.html":{}}}],["col.hide",{"_index":1548,"title":{},"body":{"interfaces/Column.html":{}}}],["col.sortable",{"_index":1544,"title":{},"body":{"interfaces/Column.html":{}}}],["col.tooltipvaluegetter",{"_index":1534,"title":{},"body":{"interfaces/Column.html":{}}}],["col.width",{"_index":1549,"title":{},"body":{"interfaces/Column.html":{}}}],["coldef",{"_index":1388,"title":{},"body":{"interfaces/Column.html":{}}}],["coldefs",{"_index":1466,"title":{},"body":{"interfaces/Column.html":{}}}],["colid",{"_index":1615,"title":{},"body":{"interfaces/Column.html":{}}}],["collapsed",{"_index":480,"title":{},"body":{"classes/AsyncRecordsProvider.html":{},"classes/DynamicEdgeProvider.html":{},"classes/DynamicNodeProvider.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{}}}],["collapsemodule",{"_index":1289,"title":{},"body":{"modules/BsTimelineModule.html":{},"modules/NetworkModule.html":{}}}],["collapsing",{"_index":464,"title":{},"body":{"classes/AsyncRecordsProvider.html":{},"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["color",{"_index":580,"title":{},"body":{"classes/BaseProvider.html":{},"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"components/BsTooltipComponent.html":{},"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"components/NgxChart.html":{},"interfaces/TimelineEventType.html":{},"components/TimelineLegendComponent.html":{},"miscellaneous/variables.html":{}}}],["colors",{"_index":2305,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["colorscheme",{"_index":972,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"interfaces/HeatmapItem.html":{},"components/NgxChart.html":{}}}],["column",{"_index":1386,"title":{"interfaces/Column.html":{}},"body":{"interfaces/Column.html":{},"components/DataModalComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"components/TimelineLegendComponent.html":{},"coverage.html":{}}}],["column's",{"_index":1480,"title":{},"body":{"interfaces/Column.html":{}}}],["column).$column",{"_index":1741,"title":{},"body":{"interfaces/Column.html":{}}}],["columnapi",{"_index":1402,"title":{},"body":{"interfaces/Column.html":{}}}],["columns",{"_index":1424,"title":{},"body":{"interfaces/Column.html":{}}}],["columnsaction",{"_index":1481,"title":{},"body":{"interfaces/Column.html":{}}}],["columnvisibility",{"_index":1431,"title":{},"body":{"interfaces/Column.html":{}}}],["combination",{"_index":3128,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["combined",{"_index":3103,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{}}}],["combinelastest",{"_index":3129,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["combinelatest",{"_index":1999,"title":{},"body":{"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/VisEvent.html":{}}}],["combinelatest(sourceproviders.map(p",{"_index":2028,"title":{},"body":{"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{}}}],["combinelatest(this.events$).pipe",{"_index":3185,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["combinelatest(this.timeseries",{"_index":3179,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["come",{"_index":2014,"title":{},"body":{"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/VisEvent.html":{}}}],["comes",{"_index":252,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["commonmodule",{"_index":25,"title":{},"body":{"modules/AgGridModule.html":{},"modules/BsHeatmapModule.html":{},"modules/BsTimelineModule.html":{},"modules/FinanceModule.html":{},"modules/FusionChartsModule.html":{},"modules/GoogleMapsModule.html":{},"modules/NetworkModule.html":{},"modules/NgxChartsModule.html":{},"modules/VisTimelineModule.html":{}}}],["community",{"_index":1414,"title":{},"body":{"interfaces/Column.html":{},"components/FacetWrapperComponent.html":{},"dependencies.html":{}}}],["community/dist/lib/columncontroller/columnapi",{"_index":1416,"title":{},"body":{"interfaces/Column.html":{}}}],["companies",{"_index":4066,"title":{},"body":{"miscellaneous/functions.html":{}}}],["company",{"_index":4052,"title":{},"body":{"miscellaneous/functions.html":{}}}],["compare",{"_index":3685,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["compares",{"_index":3303,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["compatible",{"_index":1799,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["completed",{"_index":3323,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["complexity",{"_index":138,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{}}}],["component",{"_index":620,"title":{"components/BsEdgeInfoCard.html":{},"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"components/BsTooltipComponent.html":{},"components/DataModalComponent.html":{},"components/FacetNgxChart.html":{},"components/FacetWrapperComponent.html":{},"components/MapComponent.html":{},"components/NgxChart.html":{},"components/ResultTimeline.html":{},"components/TimelineLegendComponent.html":{}},"body":{"components/BsEdgeInfoCard.html":{},"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"modules/BsTimelineModule.html":{},"components/BsTooltipComponent.html":{},"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/Column.html":{},"components/DataModalComponent.html":{},"interfaces/FacetChartDataPoint.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{},"components/FacetNgxChart.html":{},"components/FacetWrapperComponent.html":{},"interfaces/HeatmapItem.html":{},"components/MapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"components/NgxChart.html":{},"interfaces/NodeData.html":{},"components/ResultTimeline.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineEventType.html":{},"components/TimelineLegendComponent.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{},"coverage.html":{}}}],["component_template",{"_index":704,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"components/BsTooltipComponent.html":{},"components/DataModalComponent.html":{},"components/FacetNgxChart.html":{},"components/FacetWrapperComponent.html":{},"components/MapComponent.html":{},"components/NgxChart.html":{},"components/ResultTimeline.html":{},"components/TimelineLegendComponent.html":{}}}],["components",{"_index":622,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"components/BsTooltipComponent.html":{},"interfaces/Column.html":{},"components/DataModalComponent.html":{},"components/FacetNgxChart.html":{},"components/FacetWrapperComponent.html":{},"components/MapComponent.html":{},"components/NgxChart.html":{},"components/ResultTimeline.html":{},"components/TimelineLegendComponent.html":{},"index.html":{}}}],["compress",{"_index":1958,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["compute",{"_index":195,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["computed",{"_index":2660,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{}}}],["computes",{"_index":2123,"title":{},"body":{"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/MoneyDatum.html":{}}}],["concretely",{"_index":2011,"title":{},"body":{"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{}}}],["config",{"_index":3196,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["config.aggregations.length",{"_index":3265,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["config.current",{"_index":3201,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["config.default",{"_index":3202,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["config.display",{"_index":3243,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["config.display(r",{"_index":3244,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["config.getdate(item",{"_index":3318,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["config.getdate(item).toutcstring()+\"|\"+config.getdisplay(item",{"_index":3317,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["config.getdisplay(item",{"_index":3321,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["config.maxnmonths.foreach((maxnmonths",{"_index":3271,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["config.maxnmonths.length",{"_index":3264,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["config.name",{"_index":3312,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["config.size",{"_index":3235,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["config.size(item",{"_index":3319,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["config.size(r",{"_index":3238,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["config.styles",{"_index":3240,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["config.styles(item",{"_index":3320,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["config.styles(r",{"_index":3242,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["configs.ts",{"_index":3966,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["configuration",{"_index":147,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"interfaces/Column.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["configure",{"_index":1455,"title":{},"body":{"interfaces/Column.html":{}}}],["configured",{"_index":3062,"title":{},"body":{"classes/SelectedRecordsProvider.html":{}}}],["conflicts",{"_index":1908,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["connected",{"_index":321,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["connectednodes",{"_index":322,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{}}}],["connectednodes.length",{"_index":327,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{}}}],["console.error('invalid",{"_index":3501,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["console.error(config",{"_index":3266,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["console.log",{"_index":3011,"title":{},"body":{"components/ResultTimeline.html":{}}}],["console.log(\"aginit",{"_index":2500,"title":{},"body":{"components/FacetWrapperComponent.html":{}}}],["console.log(\"cooc1:\",data_date[i+2",{"_index":3003,"title":{},"body":{"components/ResultTimeline.html":{}}}],["console.log(\"date:\",data_date[i+1",{"_index":3023,"title":{},"body":{"components/ResultTimeline.html":{}}}],["console.log(\"no",{"_index":3052,"title":{},"body":{"components/ResultTimeline.html":{}}}],["console.log('event",{"_index":3040,"title":{},"body":{"components/ResultTimeline.html":{}}}],["console.log('selected",{"_index":3038,"title":{},"body":{"components/ResultTimeline.html":{}}}],["console.log(cooc",{"_index":3006,"title":{},"body":{"components/ResultTimeline.html":{}}}],["console.log(data",{"_index":3031,"title":{},"body":{"components/ResultTimeline.html":{}}}],["console.log(properties",{"_index":3042,"title":{},"body":{"components/ResultTimeline.html":{}}}],["console.log(regdate.test(date",{"_index":3010,"title":{},"body":{"components/ResultTimeline.html":{}}}],["console.log(this.items.get(properties.items[0",{"_index":3045,"title":{},"body":{"components/ResultTimeline.html":{}}}],["console.log(year",{"_index":3009,"title":{},"body":{"components/ResultTimeline.html":{}}}],["console.warn(`aggregation",{"_index":221,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{}}}],["const",{"_index":200,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"classes/BaseProvider.html":{},"components/BsEdgeInfoCard.html":{},"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"interfaces/Column.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/FacetChartDataPoint.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{},"components/FacetNgxChart.html":{},"components/FacetWrapperComponent.html":{},"interfaces/HeatmapItem.html":{},"components/MapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeData.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"components/ResultTimeline.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{}}}],["constant",{"_index":3875,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["constant',true",{"_index":3888,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["constructed",{"_index":108,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{}}}],["constructor",{"_index":184,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/Column.html":{},"interfaces/CustomData.html":{},"components/DataModalComponent.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/FacetChartDataPoint.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{},"components/FacetNgxChart.html":{},"interfaces/HeatmapItem.html":{},"components/MapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"components/NgxChart.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"components/ResultTimeline.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{}}}],["constructor(el",{"_index":982,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["constructor(facetservice",{"_index":774,"title":{},"body":{"components/BsFacetDate.html":{},"components/FacetNgxChart.html":{}}}],["constructor(intlservice",{"_index":2905,"title":{},"body":{"components/NgxChart.html":{}}}],["constructor(model",{"_index":1975,"title":{},"body":{"components/DataModalComponent.html":{}}}],["constructor(name",{"_index":391,"title":{},"body":{"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"classes/DynamicEdgeProvider.html":{},"classes/DynamicNodeProvider.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{}}}],["constructor(public",{"_index":2985,"title":{},"body":{"components/ResultTimeline.html":{}}}],["constructor(searchservice",{"_index":2552,"title":{},"body":{"components/MapComponent.html":{}}}],["constructor(vistimelineservice",{"_index":2960,"title":{},"body":{"components/ResultTimeline.html":{}}}],["contain",{"_index":1519,"title":{},"body":{"interfaces/Column.html":{},"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"miscellaneous/functions.html":{}}}],["contained",{"_index":1845,"title":{},"body":{"interfaces/CustomData.html":{},"components/MapComponent.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"miscellaneous/functions.html":{}}}],["container",{"_index":1162,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["containing",{"_index":1421,"title":{},"body":{"interfaces/Column.html":{},"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{},"miscellaneous/functions.html":{}}}],["contains",{"_index":1791,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{},"miscellaneous/functions.html":{}}}],["content",{"_index":1294,"title":{},"body":{"components/BsTooltipComponent.html":{},"interfaces/Column.html":{},"components/ResultTimeline.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/VisEvent.html":{}}}],["contentchild",{"_index":3374,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{}}}],["contentchild(\"edgetpl",{"_index":3739,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["contentchild(\"nodetpl",{"_index":3737,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["contentchild(\"tooltiptpl",{"_index":3380,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["context",{"_index":297,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"classes/DynamicEdgeProvider.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/VisEvent.html":{}}}],["convenience",{"_index":62,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"classes/BaseProvider.html":{}}}],["convert",{"_index":1163,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["converted",{"_index":152,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{}}}],["cooc",{"_index":2999,"title":{},"body":{"components/ResultTimeline.html":{}}}],["cooc[0",{"_index":3018,"title":{},"body":{"components/ResultTimeline.html":{}}}],["coocaggregationdemo",{"_index":3969,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["coocaggregationdemo(providerfactory",{"_index":4050,"title":{},"body":{"miscellaneous/functions.html":{}}}],["cooccurrence",{"_index":68,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"miscellaneous/functions.html":{}}}],["coocrecorddemo",{"_index":3970,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["coocrecorddemo(providerfactory",{"_index":4053,"title":{},"body":{"miscellaneous/functions.html":{}}}],["cool",{"_index":1371,"title":{},"body":{"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"components/NgxChart.html":{}}}],["coordinate",{"_index":1164,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["coordinates",{"_index":3700,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["copy",{"_index":1639,"title":{},"body":{"interfaces/Column.html":{},"components/DataModalComponent.html":{}}}],["copyaction",{"_index":1973,"title":{},"body":{"components/DataModalComponent.html":{}}}],["copyselection",{"_index":1434,"title":{},"body":{"interfaces/Column.html":{}}}],["copytoclipboard",{"_index":1712,"title":{},"body":{"interfaces/Column.html":{}}}],["corresponding",{"_index":228,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"interfaces/CustomData.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["count",{"_index":166,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"classes/BaseProvider.html":{},"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeData.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["counter",{"_index":939,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/Column.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["counts",{"_index":300,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{}}}],["counts.get(d.category",{"_index":2727,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{}}}],["counts.get(money.value",{"_index":2827,"title":{},"body":{"interfaces/MoneyDatum.html":{}}}],["counts.set(item.value.tostring",{"_index":2823,"title":{},"body":{"interfaces/MoneyDatum.html":{}}}],["cover",{"_index":647,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsNodeInfoCard.html":{},"interfaces/NodeData.html":{}}}],["coverage",{"_index":3905,"title":{"coverage.html":{}},"body":{"coverage.html":{}}}],["create",{"_index":244,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"classes/BaseProvider.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"interfaces/Column.html":{},"interfaces/CustomData.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"interfaces/HeatmapItem.html":{},"interfaces/NodeData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{}}}],["createactions",{"_index":1621,"title":{},"body":{"interfaces/Column.html":{}}}],["createaggregationevents(config",{"_index":3315,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["createchartoptions",{"_index":2369,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["createcolumns",{"_index":1528,"title":{},"body":{"interfaces/Column.html":{}}}],["created",{"_index":420,"title":{},"body":{"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"interfaces/CustomData.html":{},"classes/DynamicEdgeProvider.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["createdatapoints(items",{"_index":3328,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["createedge(type",{"_index":565,"title":{},"body":{"classes/BaseProvider.html":{}}}],["createexpandaction(type",{"_index":366,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{}}}],["createnode(type",{"_index":546,"title":{},"body":{"classes/BaseProvider.html":{}}}],["createrows",{"_index":1582,"title":{},"body":{"interfaces/Column.html":{}}}],["creates",{"_index":462,"title":{},"body":{"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"interfaces/CustomData.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"miscellaneous/functions.html":{}}}],["createtimeseries(config",{"_index":3311,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["cross",{"_index":247,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"miscellaneous/functions.html":{}}}],["crossaggregationdemo",{"_index":3971,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["crossaggregationdemo(providerfactory",{"_index":4057,"title":{},"body":{"miscellaneous/functions.html":{}}}],["crossaggregationexpanddemo",{"_index":3972,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["crossaggregationexpanddemo(providerfactory",{"_index":4058,"title":{},"body":{"miscellaneous/functions.html":{}}}],["csv",{"_index":1704,"title":{},"body":{"interfaces/Column.html":{}}}],["csvexportparams",{"_index":1408,"title":{},"body":{"interfaces/Column.html":{}}}],["cur",{"_index":3772,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["currency",{"_index":2649,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{}}}],["current",{"_index":2319,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"components/MapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{}}}],["currently",{"_index":1202,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"components/MapComponent.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["currentrange",{"_index":3133,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["currentselection",{"_index":3394,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["currentvalue",{"_index":3671,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["currentvalue.length",{"_index":3684,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["cursor",{"_index":1209,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["curve(d3[this.curvetype",{"_index":3414,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["curvemonotonex",{"_index":3115,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{}}}],["curvetype",{"_index":3114,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{}}}],["custom",{"_index":65,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"classes/BaseProvider.html":{},"components/BsFacetDate.html":{},"interfaces/Column.html":{},"interfaces/CustomData.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{},"components/MapComponent.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["customdata",{"_index":1789,"title":{"interfaces/CustomData.html":{}},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"coverage.html":{}}}],["customprops",{"_index":539,"title":{},"body":{"classes/BaseProvider.html":{}}}],["d",{"_index":1152,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{}}}],["d.aggregation",{"_index":3225,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["d.category",{"_index":2750,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{}}}],["d.ccaggregation",{"_index":3226,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["d.count",{"_index":2744,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{}}}],["d.currency",{"_index":2756,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{}}}],["d.date",{"_index":2833,"title":{},"body":{"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["d.i",{"_index":2726,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{}}}],["d.record.id",{"_index":2839,"title":{},"body":{"interfaces/MoneyDatum.html":{}}}],["d.type",{"_index":3475,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["d.value",{"_index":2741,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["d0",{"_index":3619,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["d0.date.gettime",{"_index":3624,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["d1",{"_index":3621,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["d1.date.gettime",{"_index":3625,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["d1e7dd",{"_index":935,"title":{},"body":{"components/BsFacetDate.html":{}}}],["d3",{"_index":1024,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"dependencies.html":{}}}],["d3.area",{"_index":3386,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["d3.axisbottom(this.x",{"_index":2767,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{}}}],["d3.axisleft(this.y",{"_index":2783,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["d3.bisector(d",{"_index":3402,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["d3.brushbehavior",{"_index":3390,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["d3.brushselection(this.gbrush.nativeelement",{"_index":3591,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["d3.brushx",{"_index":3423,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["d3.countabletimeinterval",{"_index":3362,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["d3.extent(allprimarydates",{"_index":3494,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["d3.extent(this.data",{"_index":2743,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{}}}],["d3.line",{"_index":3387,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["d3.max(data",{"_index":3496,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["d3.max(s.dates",{"_index":3498,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["d3.mouse(this.gbrush.nativeelement)[0",{"_index":3613,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["d3.mouse(this.overlay.nativeelement)[0",{"_index":2844,"title":{},"body":{"interfaces/MoneyDatum.html":{}}}],["d3.scaleband",{"_index":1065,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{}}}],["d3.scalelinear",{"_index":2670,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["d3.scalelog",{"_index":2689,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{}}}],["d3.scalelogarithmic",{"_index":2671,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{}}}],["d3.scaleordinal",{"_index":2676,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{}}}],["d3.scalequantile",{"_index":1046,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["d3.scaletime",{"_index":2814,"title":{},"body":{"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["d3.scaleutc",{"_index":2816,"title":{},"body":{"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["d3.select(nodes[i",{"_index":1173,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["d3.select(this.gbrush.nativeelement",{"_index":3457,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["d3.select(this.gx.nativeelement",{"_index":1121,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["d3.select(this.gy.nativeelement",{"_index":1123,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["d3.select(this.overlay.nativeelement",{"_index":2703,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{}}}],["d3.selection",{"_index":1067,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["d3.timeday",{"_index":3363,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["d3.timeday.offset(date",{"_index":3359,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["d3.timeformat(\"%y",{"_index":3136,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["d3.timehour.offset(date",{"_index":3354,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["d3.timemonth",{"_index":3365,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["d3.timemonth.count(range[0",{"_index":3262,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["d3.timemonth.offset(date",{"_index":3360,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["d3.timeweek",{"_index":3364,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["d3.timeyear",{"_index":3366,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["d3.transition",{"_index":1129,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["d3.transition().duration(this.transition",{"_index":1128,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["d3.zoom",{"_index":3537,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["d3.zoombehavior",{"_index":3392,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["d3.zoomidentity",{"_index":3530,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["d3.zoomtransform(this.brush$.node",{"_index":3606,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["damping",{"_index":3868,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["dampingcontrol",{"_index":3860,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["dampingcontrol.value",{"_index":3877,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["dampingpref",{"_index":3895,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["dark",{"_index":1005,"title":{},"body":{"components/BsHeatmapComponent.html":{},"components/BsTooltipComponent.html":{},"interfaces/Column.html":{},"modules/FusionChartsModule.html":{},"interfaces/HeatmapItem.html":{},"components/MapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{}}}],["darkgrey",{"_index":1220,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/TimelineEventType.html":{},"components/TimelineLegendComponent.html":{}}}],["darkstyle",{"_index":2600,"title":{},"body":{"components/MapComponent.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["data",{"_index":46,"title":{},"body":{"modules/AgGridModule.html":{},"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"classes/BaseProvider.html":{},"components/BsEdgeInfoCard.html":{},"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"components/BsTooltipComponent.html":{},"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/Column.html":{},"interfaces/CustomData.html":{},"components/DataModalComponent.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/FacetChartDataPoint.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{},"components/FacetNgxChart.html":{},"components/FacetWrapperComponent.html":{},"interfaces/HeatmapItem.html":{},"components/MapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"components/NgxChart.html":{},"interfaces/Node.html":{},"interfaces/NodeData.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"components/ResultTimeline.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineEventType.html":{},"components/TimelineLegendComponent.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{},"dependencies.html":{}}}],["data([{type",{"_index":3464,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["data.addedges(this.createedge(type",{"_index":286,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{}}}],["data.addnodes(node",{"_index":1867,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["data.directed",{"_index":1914,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["data.directed[i",{"_index":1915,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["data.fieldvalue",{"_index":1917,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["data.filter(s",{"_index":3487,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["data.length",{"_index":1189,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["data.relations",{"_index":1912,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["data.relations[i",{"_index":1913,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["data.values.length",{"_index":1905,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["data/peer/esm/vis",{"_index":2138,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/VisEvent.html":{}}}],["data[0",{"_index":3489,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["data_date",{"_index":2997,"title":{},"body":{"components/ResultTimeline.html":{}}}],["data_date.substring(1,data_date.length",{"_index":3000,"title":{},"body":{"components/ResultTimeline.html":{}}}],["datafiltered",{"_index":949,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["datafiltered.length",{"_index":1187,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["dataitem",{"_index":2979,"title":{},"body":{"components/ResultTimeline.html":{}}}],["datamodalcomponent",{"_index":9,"title":{"components/DataModalComponent.html":{}},"body":{"modules/AgGridModule.html":{},"components/BsEdgeInfoCard.html":{},"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"components/BsTooltipComponent.html":{},"interfaces/Column.html":{},"components/DataModalComponent.html":{},"components/FacetNgxChart.html":{},"components/FacetWrapperComponent.html":{},"components/MapComponent.html":{},"components/NgxChart.html":{},"components/ResultTimeline.html":{},"components/TimelineLegendComponent.html":{},"coverage.html":{},"index.html":{}}}],["datamodel",{"_index":1976,"title":{},"body":{"components/DataModalComponent.html":{},"miscellaneous/typealiases.html":{}}}],["datapoint",{"_index":1384,"title":{},"body":{"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"components/FacetNgxChart.html":{},"components/NgxChart.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["datapoint.name",{"_index":2378,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["datapoint.value",{"_index":2413,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["datapoints",{"_index":2312,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["dataset",{"_index":193,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/VisEvent.html":{}}}],["dataset.addedges(edge",{"_index":1901,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["dataset.addedges(this.createedge(type",{"_index":1916,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["dataset.addnodes(node",{"_index":1897,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["dataset.addnodes(recordnode",{"_index":1909,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["dataset.foreach(dataset",{"_index":2030,"title":{},"body":{"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{}}}],["dataset.getadjacentedges(neighbor.id",{"_index":1936,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["dataset.getadjacentedges(node.id",{"_index":1924,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["dataset.getedges().foreach(edge",{"_index":2255,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["dataset.getnode(node.id",{"_index":1929,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["dataset.getnodes().foreach(node",{"_index":2031,"title":{},"body":{"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["dataset.updatedatasets(this.context.nodes",{"_index":3776,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["datasets",{"_index":482,"title":{},"body":{"classes/AsyncRecordsProvider.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/VisEvent.html":{}}}],["datasets.reduce((prev",{"_index":3771,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["datasource",{"_index":1418,"title":{},"body":{"interfaces/Column.html":{},"components/FacetWrapperComponent.html":{}}}],["date",{"_index":750,"title":{},"body":{"components/BsFacetDate.html":{},"modules/BsTimelineModule.html":{},"interfaces/Column.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{},"interfaces/MoneyDatum.html":{},"components/ResultTimeline.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{}}}],["date'},{'name",{"_index":711,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"components/BsTooltipComponent.html":{},"components/DataModalComponent.html":{},"components/FacetNgxChart.html":{},"components/FacetWrapperComponent.html":{},"components/MapComponent.html":{},"components/NgxChart.html":{},"components/ResultTimeline.html":{},"components/TimelineLegendComponent.html":{}}}],["date(cooc[1",{"_index":3002,"title":{},"body":{"components/ResultTimeline.html":{}}}],["date(parsedexpr.values[0",{"_index":3161,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["date(parsedexpr.values[1",{"_index":3162,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["date(this.selection[0].gettime",{"_index":3169,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["date(this.selection[1].gettime()+interval*0.1",{"_index":3171,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["date.getfullyear",{"_index":3008,"title":{},"body":{"components/ResultTimeline.html":{}}}],["date.gettime",{"_index":3623,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["date.html",{"_index":753,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{}}}],["date.scss",{"_index":752,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{}}}],["date.ts",{"_index":746,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{},"coverage.html":{}}}],["date.ts:101",{"_index":805,"title":{},"body":{"components/BsFacetDate.html":{}}}],["date.ts:139",{"_index":802,"title":{},"body":{"components/BsFacetDate.html":{}}}],["date.ts:150",{"_index":804,"title":{},"body":{"components/BsFacetDate.html":{}}}],["date.ts:154",{"_index":823,"title":{},"body":{"components/BsFacetDate.html":{}}}],["date.ts:162",{"_index":797,"title":{},"body":{"components/BsFacetDate.html":{}}}],["date.ts:173",{"_index":807,"title":{},"body":{"components/BsFacetDate.html":{}}}],["date.ts:291",{"_index":809,"title":{},"body":{"components/BsFacetDate.html":{}}}],["date.ts:297",{"_index":799,"title":{},"body":{"components/BsFacetDate.html":{}}}],["date.ts:55",{"_index":789,"title":{},"body":{"components/BsFacetDate.html":{}}}],["date.ts:56",{"_index":791,"title":{},"body":{"components/BsFacetDate.html":{}}}],["date.ts:57",{"_index":784,"title":{},"body":{"components/BsFacetDate.html":{}}}],["date.ts:58",{"_index":794,"title":{},"body":{"components/BsFacetDate.html":{}}}],["date.ts:59",{"_index":788,"title":{},"body":{"components/BsFacetDate.html":{}}}],["date.ts:60",{"_index":792,"title":{},"body":{"components/BsFacetDate.html":{}}}],["date.ts:61",{"_index":787,"title":{},"body":{"components/BsFacetDate.html":{}}}],["date.ts:62",{"_index":786,"title":{},"body":{"components/BsFacetDate.html":{}}}],["date.ts:63",{"_index":785,"title":{},"body":{"components/BsFacetDate.html":{}}}],["date.ts:64",{"_index":793,"title":{},"body":{"components/BsFacetDate.html":{}}}],["date.ts:65",{"_index":790,"title":{},"body":{"components/BsFacetDate.html":{}}}],["date.ts:67",{"_index":812,"title":{},"body":{"components/BsFacetDate.html":{}}}],["date.ts:68",{"_index":817,"title":{},"body":{"components/BsFacetDate.html":{}}}],["date.ts:70",{"_index":816,"title":{},"body":{"components/BsFacetDate.html":{}}}],["date.ts:71",{"_index":814,"title":{},"body":{"components/BsFacetDate.html":{}}}],["date.ts:73",{"_index":820,"title":{},"body":{"components/BsFacetDate.html":{}}}],["date.ts:74",{"_index":818,"title":{},"body":{"components/BsFacetDate.html":{}}}],["date.ts:79",{"_index":782,"title":{},"body":{"components/BsFacetDate.html":{}}}],["date.ts:88",{"_index":811,"title":{},"body":{"components/BsFacetDate.html":{}}}],["dateobj.display",{"_index":3025,"title":{},"body":{"components/ResultTimeline.html":{}}}],["dateobj.locations.split(\",\")[0",{"_index":3024,"title":{},"body":{"components/ResultTimeline.html":{}}}],["datepickers",{"_index":837,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{}}}],["daterange",{"_index":859,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{}}}],["daterangecontrol",{"_index":756,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{}}}],["dates",{"_index":2955,"title":{},"body":{"components/ResultTimeline.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{}}}],["dates.foreach(dateobj",{"_index":3021,"title":{},"body":{"components/ResultTimeline.html":{}}}],["date|undefined",{"_index":3377,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["datum",{"_index":2721,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{}}}],["datum.currency",{"_index":2849,"title":{},"body":{"interfaces/MoneyDatum.html":{}}}],["datum.rawvalue",{"_index":2795,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{}}}],["day",{"_index":3110,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{}}}],["days",{"_index":3258,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{}}}],["dd",{"_index":3353,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["deactivate",{"_index":3545,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["deal)#(usd",{"_index":2656,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{}}}],["debounce",{"_index":3881,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["debouncesync",{"_index":3884,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["debouncetime",{"_index":829,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{}}}],["debouncetime(500",{"_index":871,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{}}}],["decimal",{"_index":2560,"title":{},"body":{"components/MapComponent.html":{}}}],["declarations",{"_index":20,"title":{},"body":{"modules/AgGridModule.html":{},"modules/BsHeatmapModule.html":{},"modules/BsTimelineModule.html":{},"modules/FinanceModule.html":{},"modules/FusionChartsModule.html":{},"modules/GoogleMapsModule.html":{},"modules/NetworkModule.html":{},"modules/NgxChartsModule.html":{},"modules/VisTimelineModule.html":{}}}],["declare",{"_index":1989,"title":{},"body":{"components/DataModalComponent.html":{}}}],["decoration",{"_index":1207,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["decorators",{"_index":1049,"title":{},"body":{"components/BsHeatmapComponent.html":{},"components/DataModalComponent.html":{},"components/NgxChart.html":{}}}],["decreasing",{"_index":1268,"title":{},"body":{"components/BsNodeInfoCard.html":{},"interfaces/NodeData.html":{}}}],["deep",{"_index":1200,"title":{},"body":{"components/BsHeatmapComponent.html":{},"components/FacetWrapperComponent.html":{}}}],["defacet",{"_index":4154,"title":{},"body":{"miscellaneous/variables.html":{}}}],["default",{"_index":163,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"components/BsTooltipComponent.html":{},"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/Column.html":{},"interfaces/CustomData.html":{},"components/DataModalComponent.html":{},"classes/DynamicEdgeProvider.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"components/MapComponent.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"components/NgxChart.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"components/ResultTimeline.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"components/TimelineLegendComponent.html":{},"interfaces/TimelineRecords.html":{},"interfaces/VisEvent.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["defaultchart",{"_index":3932,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["defaultcoldef",{"_index":1461,"title":{},"body":{"interfaces/Column.html":{}}}],["defaultcolumnwidth",{"_index":1453,"title":{},"body":{"interfaces/Column.html":{}}}],["defaultoptions",{"_index":2972,"title":{},"body":{"components/ResultTimeline.html":{},"interfaces/VisEvent.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["defaultrecordstyle(selected",{"_index":3367,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["defaults",{"_index":1426,"title":{},"body":{"interfaces/Column.html":{}}}],["defaultstate",{"_index":1689,"title":{},"body":{"interfaces/Column.html":{}}}],["definance",{"_index":3922,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["define",{"_index":161,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{}}}],["defined",{"_index":392,"title":{},"body":{"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"components/BsEdgeInfoCard.html":{},"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"components/BsTooltipComponent.html":{},"components/DataModalComponent.html":{},"classes/DynamicEdgeProvider.html":{},"classes/DynamicNodeProvider.html":{},"components/FacetNgxChart.html":{},"components/FacetWrapperComponent.html":{},"components/MapComponent.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"components/NgxChart.html":{},"classes/RecordsProvider.html":{},"components/ResultTimeline.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"components/TimelineLegendComponent.html":{},"interfaces/TimelineSeries.html":{}}}],["defines",{"_index":1814,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["definition",{"_index":1460,"title":{},"body":{"interfaces/Column.html":{}}}],["definitions",{"_index":1423,"title":{},"body":{"interfaces/Column.html":{},"components/FacetWrapperComponent.html":{}}}],["degooglemaps",{"_index":3937,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["degrid",{"_index":3917,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["deheatmap",{"_index":3950,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["delay",{"_index":3802,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["delete",{"_index":1678,"title":{},"body":{"interfaces/Column.html":{}}}],["denser",{"_index":1449,"title":{},"body":{"interfaces/Column.html":{}}}],["dependencies",{"_index":3,"title":{"dependencies.html":{}},"body":{"modules/AgGridModule.html":{},"modules/BsHeatmapModule.html":{},"modules/BsTimelineModule.html":{},"modules/FinanceModule.html":{},"modules/FusionChartsModule.html":{},"modules/GoogleMapsModule.html":{},"modules/NetworkModule.html":{},"modules/NgxChartsModule.html":{},"modules/VisTimelineModule.html":{},"dependencies.html":{},"index.html":{}}}],["depending",{"_index":1919,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["deprecated",{"_index":1201,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["deresultsview",{"_index":4166,"title":{},"body":{"miscellaneous/variables.html":{}}}],["derived",{"_index":1464,"title":{},"body":{"interfaces/Column.html":{}}}],["deriving",{"_index":1517,"title":{},"body":{"interfaces/Column.html":{}}}],["description",{"_index":61,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/VisEvent.html":{},"miscellaneous/functions.html":{}}}],["desearch",{"_index":4167,"title":{},"body":{"miscellaneous/variables.html":{}}}],["desired",{"_index":2556,"title":{},"body":{"components/MapComponent.html":{}}}],["destroy",{"_index":1485,"title":{},"body":{"interfaces/Column.html":{}}}],["detail",{"_index":3296,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["determined",{"_index":3230,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["determines",{"_index":2150,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["diff",{"_index":3509,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["difference",{"_index":3674,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["different",{"_index":220,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"components/BsNodeInfoCard.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/NodeData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["dimensional",{"_index":255,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{}}}],["dimensions",{"_index":1379,"title":{},"body":{"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"components/NgxChart.html":{}}}],["directed",{"_index":77,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"classes/BaseProvider.html":{},"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["directive",{"_index":702,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"components/BsTooltipComponent.html":{},"components/DataModalComponent.html":{},"components/FacetNgxChart.html":{},"components/FacetWrapperComponent.html":{},"components/MapComponent.html":{},"components/NgxChart.html":{},"components/ResultTimeline.html":{},"components/TimelineLegendComponent.html":{}}}],["directives",{"_index":743,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"components/BsTooltipComponent.html":{},"components/DataModalComponent.html":{},"components/FacetNgxChart.html":{},"components/FacetWrapperComponent.html":{},"components/MapComponent.html":{},"components/NgxChart.html":{},"components/ResultTimeline.html":{},"components/TimelineLegendComponent.html":{}}}],["directly",{"_index":439,"title":{},"body":{"classes/AsyncRecordsProvider.html":{},"interfaces/Column.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{}}}],["disabled",{"_index":346,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{}}}],["discarded",{"_index":2164,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["display",{"_index":268,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"classes/BaseProvider.html":{},"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"interfaces/Column.html":{},"interfaces/CustomData.html":{},"interfaces/FacetChartDataPoint.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{},"components/FacetNgxChart.html":{},"components/FacetWrapperComponent.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyDatum.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"miscellaneous/functions.html":{}}}],["display=existingnodes",{"_index":1803,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["display=paginate",{"_index":1880,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["displaycheckbox",{"_index":1446,"title":{},"body":{"interfaces/Column.html":{}}}],["displayed",{"_index":353,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"interfaces/Column.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"interfaces/HeatmapItem.html":{},"components/MapComponent.html":{},"interfaces/MoneyDatum.html":{},"interfaces/NodeData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/VisEvent.html":{},"miscellaneous/functions.html":{}}}],["displayemptydistributionintervals",{"_index":768,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{}}}],["displays",{"_index":78,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"interfaces/CustomData.html":{},"interfaces/MoneyDatum.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"miscellaneous/functions.html":{}}}],["distribution",{"_index":248,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"miscellaneous/functions.html":{}}}],["distributions",{"_index":261,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"miscellaneous/functions.html":{}}}],["div.pb",{"_index":2447,"title":{},"body":{"components/FacetWrapperComponent.html":{}}}],["doc",{"_index":3053,"title":{},"body":{"components/ResultTimeline.html":{}}}],["docheck",{"_index":1325,"title":{},"body":{"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"components/NgxChart.html":{}}}],["document",{"_index":2352,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"components/MapComponent.html":{}}}],["document.body.contains(this.wrapper.nativeelement",{"_index":1383,"title":{},"body":{"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"components/NgxChart.html":{}}}],["documentation",{"_index":3906,"title":{},"body":{"coverage.html":{}}}],["documents",{"_index":197,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"interfaces/CustomData.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"components/MapComponent.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"miscellaneous/functions.html":{}}}],["doesfilterpass",{"_index":2451,"title":{},"body":{"components/FacetWrapperComponent.html":{}}}],["doesfilterpass(params",{"_index":2458,"title":{},"body":{"components/FacetWrapperComponent.html":{}}}],["doesn't",{"_index":1569,"title":{},"body":{"interfaces/Column.html":{}}}],["dom",{"_index":625,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"components/BsTooltipComponent.html":{},"components/DataModalComponent.html":{},"components/FacetNgxChart.html":{},"components/FacetWrapperComponent.html":{},"components/MapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"components/NgxChart.html":{},"components/ResultTimeline.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"components/TimelineLegendComponent.html":{},"interfaces/TimelineSeries.html":{}}}],["domain",{"_index":2673,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["domain([0",{"_index":2751,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{}}}],["domain(this.datafiltered.map(item",{"_index":1111,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["domain(this.x.domain",{"_index":3570,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["domain(this.xt.domain",{"_index":3572,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["domain(xlabels",{"_index":1100,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["domain(ylabels",{"_index":1106,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["domain[0].gettime",{"_index":3652,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["domain[1].gettime",{"_index":3651,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["don't",{"_index":1367,"title":{},"body":{"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"components/NgxChart.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{}}}],["double",{"_index":1733,"title":{},"body":{"interfaces/Column.html":{}}}],["download",{"_index":1643,"title":{},"body":{"interfaces/Column.html":{}}}],["downloadcsv",{"_index":1716,"title":{},"body":{"interfaces/Column.html":{}}}],["downloadselection",{"_index":1435,"title":{},"body":{"interfaces/Column.html":{}}}],["draw",{"_index":2712,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["drawevents(events",{"_index":3701,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["drawn",{"_index":563,"title":{},"body":{"classes/BaseProvider.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["draws",{"_index":2765,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["drawxaxis",{"_index":2766,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["drawyaxis",{"_index":2770,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["due",{"_index":3384,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["duplicate",{"_index":1891,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["duplicates",{"_index":2235,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["dynamic",{"_index":2000,"title":{},"body":{"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"miscellaneous/functions.html":{}}}],["dynamicedge",{"_index":1997,"title":{"interfaces/DynamicEdge.html":{}},"body":{"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"coverage.html":{}}}],["dynamicedgeprovider",{"_index":2017,"title":{"classes/DynamicEdgeProvider.html":{}},"body":{"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"coverage.html":{}}}],["dynamicedgetype",{"_index":2002,"title":{"interfaces/DynamicEdgeType.html":{}},"body":{"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["dynamicedgetype).getquery",{"_index":2010,"title":{},"body":{"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{}}}],["dynamicnodeprovider",{"_index":2088,"title":{"classes/DynamicNodeProvider.html":{}},"body":{"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"coverage.html":{}}}],["dynamicnodetype",{"_index":2101,"title":{"interfaces/DynamicNodeType.html":{}},"body":{"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"coverage.html":{}}}],["e",{"_index":3140,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{}}}],["e.count",{"_index":1253,"title":{},"body":{"components/BsNodeInfoCard.html":{},"interfaces/NodeData.html":{}}}],["e.from",{"_index":1248,"title":{},"body":{"components/BsNodeInfoCard.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeData.html":{},"interfaces/NodeType.html":{}}}],["e.to",{"_index":1250,"title":{},"body":{"components/BsNodeInfoCard.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeData.html":{},"interfaces/NodeType.html":{}}}],["e.value",{"_index":277,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{}}}],["e.visible",{"_index":1954,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["each",{"_index":231,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"interfaces/Column.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{},"miscellaneous/functions.html":{}}}],["each(this.wrap",{"_index":1150,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["ease",{"_index":1214,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["east",{"_index":2630,"title":{},"body":{"components/MapComponent.html":{}}}],["edge",{"_index":90,"title":{"interfaces/Edge.html":{}},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"components/BsEdgeInfoCard.html":{},"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"components/BsTooltipComponent.html":{},"interfaces/CustomData.html":{},"components/DataModalComponent.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"components/FacetNgxChart.html":{},"components/FacetWrapperComponent.html":{},"components/MapComponent.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"modules/NetworkModule.html":{},"interfaces/NetworkProvider.html":{},"components/NgxChart.html":{},"interfaces/Node.html":{},"interfaces/NodeData.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"components/ResultTimeline.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"components/TimelineLegendComponent.html":{},"interfaces/VisEvent.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["edge.context.name",{"_index":603,"title":{},"body":{"classes/BaseProvider.html":{}}}],["edge.context.nodes.get(edge.from",{"_index":595,"title":{},"body":{"classes/BaseProvider.html":{}}}],["edge.context.nodes.get(edge.to",{"_index":597,"title":{},"body":{"classes/BaseProvider.html":{}}}],["edge.context.searchservice.query.addselect(expr",{"_index":602,"title":{},"body":{"classes/BaseProvider.html":{}}}],["edge.context.searchservice.search",{"_index":604,"title":{},"body":{"classes/BaseProvider.html":{}}}],["edge.count",{"_index":690,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["edge.fieldvalue",{"_index":600,"title":{},"body":{"classes/BaseProvider.html":{}}}],["edge.from",{"_index":1931,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["edge.id",{"_index":1934,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["edge.provider",{"_index":598,"title":{},"body":{"classes/BaseProvider.html":{}}}],["edge.to",{"_index":1930,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["edge.type",{"_index":1926,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["edge.type['trigger",{"_index":1943,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["edge.visible",{"_index":1939,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["edge[\"arrows",{"_index":571,"title":{},"body":{"classes/BaseProvider.html":{}}}],["edge[\"font",{"_index":578,"title":{},"body":{"classes/BaseProvider.html":{}}}],["edge[\"label",{"_index":576,"title":{},"body":{"classes/BaseProvider.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["edge[\"labels",{"_index":577,"title":{},"body":{"classes/BaseProvider.html":{}}}],["edge[\"labels\"].foreach(label",{"_index":2267,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["edge['aggregation'].name",{"_index":692,"title":{},"body":{"components/BsEdgeInfoCard.html":{}}}],["edge['record']['title",{"_index":694,"title":{},"body":{"components/BsEdgeInfoCard.html":{}}}],["edge[\\'aggregation\\'].name",{"_index":705,"title":{},"body":{"components/BsEdgeInfoCard.html":{}}}],["edge[\\'record\\'][\\'title",{"_index":706,"title":{},"body":{"components/BsEdgeInfoCard.html":{}}}],["edgeclicked",{"_index":3731,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["edgeidx",{"_index":2171,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["edgeoptions",{"_index":2148,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["edges",{"_index":142,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"components/BsNodeInfoCard.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeData.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/VisEvent.html":{},"miscellaneous/functions.html":{}}}],["edges.foreach(edge",{"_index":2203,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["edges.remove(edges.get().filter(e",{"_index":2282,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["edges.update(this.getvisibleedges",{"_index":2285,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["edgeseparator",{"_index":379,"title":{},"body":{"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"classes/DynamicEdgeProvider.html":{},"classes/DynamicNodeProvider.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{}}}],["edgetpl",{"_index":3740,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["edgetype",{"_index":91,"title":{"interfaces/EdgeType.html":{}},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"classes/BaseProvider.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["edgetype.nodetypes[1",{"_index":2027,"title":{},"body":{"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{}}}],["edgetypes",{"_index":188,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"interfaces/CustomData.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["effect",{"_index":3278,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["eg",{"_index":111,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"classes/BaseProvider.html":{},"interfaces/CustomData.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["el",{"_index":985,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["element",{"_index":701,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"components/BsTooltipComponent.html":{},"components/DataModalComponent.html":{},"components/FacetNgxChart.html":{},"components/FacetWrapperComponent.html":{},"components/MapComponent.html":{},"components/NgxChart.html":{},"components/ResultTimeline.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"components/TimelineLegendComponent.html":{},"interfaces/TimelineSeries.html":{}}}],["elementref",{"_index":983,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"components/NgxChart.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["elements",{"_index":2677,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["elementtype",{"_index":4111,"title":{},"body":{"miscellaneous/variables.html":{}}}],["elusive",{"_index":3803,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["email",{"_index":1894,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["emitevent",{"_index":865,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{}}}],["emits",{"_index":229,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"components/MapComponent.html":{}}}],["emitted",{"_index":3722,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["emitter",{"_index":2570,"title":{},"body":{"components/MapComponent.html":{}}}],["empty",{"_index":2155,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["enabled",{"_index":574,"title":{},"body":{"classes/BaseProvider.html":{}}}],["end",{"_index":1222,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"components/NgxChart.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["enfacet",{"_index":4156,"title":{},"body":{"miscellaneous/variables.html":{}}}],["enfinance",{"_index":3923,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["enforce",{"_index":3503,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["enginetype",{"_index":1398,"title":{},"body":{"interfaces/Column.html":{}}}],["enginetype.csv",{"_index":1565,"title":{},"body":{"interfaces/Column.html":{}}}],["enginetype.date",{"_index":1559,"title":{},"body":{"interfaces/Column.html":{}}}],["enginetype.dates",{"_index":1560,"title":{},"body":{"interfaces/Column.html":{}}}],["enginetype.datetime",{"_index":1561,"title":{},"body":{"interfaces/Column.html":{}}}],["enginetype.datetimes",{"_index":1562,"title":{},"body":{"interfaces/Column.html":{}}}],["enginetype.double",{"_index":1553,"title":{},"body":{"interfaces/Column.html":{}}}],["enginetype.float",{"_index":1554,"title":{},"body":{"interfaces/Column.html":{}}}],["enginetype.integer",{"_index":1555,"title":{},"body":{"interfaces/Column.html":{}}}],["enginetype.string",{"_index":1564,"title":{},"body":{"interfaces/Column.html":{}}}],["engooglemaps",{"_index":3938,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["engrid",{"_index":3919,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["enheatmap",{"_index":3951,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["enresultsview",{"_index":4169,"title":{},"body":{"miscellaneous/variables.html":{}}}],["enrich",{"_index":2091,"title":{},"body":{"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{}}}],["enriched",{"_index":2095,"title":{},"body":{"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"miscellaneous/functions.html":{}}}],["ensearch",{"_index":4170,"title":{},"body":{"miscellaneous/variables.html":{}}}],["enter",{"_index":3466,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["entities",{"_index":69,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"miscellaneous/functions.html":{}}}],["entity",{"_index":1873,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"miscellaneous/functions.html":{}}}],["entityitem",{"_index":2962,"title":{},"body":{"components/ResultTimeline.html":{}}}],["err",{"_index":3209,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["error",{"_index":3208,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["error(\"column",{"_index":2491,"title":{},"body":{"components/FacetWrapperComponent.html":{}}}],["error(\"maxnmonths",{"_index":3267,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["error(`aggregation",{"_index":266,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["error(`an",{"_index":2497,"title":{},"body":{"components/FacetWrapperComponent.html":{}}}],["error(`edge",{"_index":2291,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["error(`inconsistent",{"_index":1851,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["error(`missing",{"_index":1933,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["error(`node",{"_index":2288,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["error(`wrong",{"_index":1906,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["errors",{"_index":2707,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["especially",{"_index":3508,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["essentially",{"_index":3628,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["et",{"_index":172,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"miscellaneous/functions.html":{}}}],["etc",{"_index":2144,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"miscellaneous/functions.html":{}}}],["even",{"_index":3451,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["event",{"_index":796,"title":{},"body":{"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"interfaces/Column.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{},"interfaces/HeatmapItem.html":{},"components/MapComponent.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineEventType.html":{},"components/TimelineLegendComponent.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{}}}],["event.api",{"_index":1728,"title":{},"body":{"interfaces/Column.html":{}}}],["event.coldef",{"_index":1740,"title":{},"body":{"interfaces/Column.html":{}}}],["event.coldef.field",{"_index":1738,"title":{},"body":{"interfaces/Column.html":{}}}],["event.coldef.headername",{"_index":1737,"title":{},"body":{"interfaces/Column.html":{}}}],["event.columnapi",{"_index":1729,"title":{},"body":{"interfaces/Column.html":{}}}],["event.data",{"_index":1736,"title":{},"body":{"interfaces/Column.html":{}}}],["event.display",{"_index":2998,"title":{},"body":{"components/ResultTimeline.html":{}}}],["event.filterinstance",{"_index":1770,"title":{},"body":{"interfaces/Column.html":{}}}],["event.filterinstance.getmodel",{"_index":1768,"title":{},"body":{"interfaces/Column.html":{}}}],["event.locations.split(\",\")[0",{"_index":3005,"title":{},"body":{"components/ResultTimeline.html":{}}}],["event.name",{"_index":3708,"title":{},"body":{"interfaces/TimelineEventType.html":{},"components/TimelineLegendComponent.html":{}}}],["event.nodes.length",{"_index":3824,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["event.preventdefault",{"_index":889,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{}}}],["event.stoppropagation",{"_index":891,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/Column.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{}}}],["event.type",{"_index":1494,"title":{},"body":{"interfaces/Column.html":{}}}],["event.value",{"_index":1739,"title":{},"body":{"interfaces/Column.html":{}}}],["eventclicked",{"_index":3125,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["eventdata",{"_index":3817,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["eventdata[0",{"_index":3819,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["eventdata[1",{"_index":3820,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["eventemitter",{"_index":1010,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/HeatmapItem.html":{},"components/MapComponent.html":{},"interfaces/MoneyDatum.html":{},"components/NgxChart.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{}}}],["events",{"_index":684,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"interfaces/Column.html":{},"interfaces/HeatmapItem.html":{},"interfaces/NodeData.html":{},"components/ResultTimeline.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineEventType.html":{},"components/TimelineLegendComponent.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{}}}],["events.foreach(event",{"_index":2996,"title":{},"body":{"components/ResultTimeline.html":{}}}],["events.push([event",{"_index":3659,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["events[0].size",{"_index":3697,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["events[0].sizeopened",{"_index":3698,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["events[events.length",{"_index":3661,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["eventsize(events",{"_index":3695,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["example",{"_index":2093,"title":{},"body":{"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["exanding",{"_index":1949,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["except",{"_index":3447,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["exclusion",{"_index":2342,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["execute",{"_index":2003,"title":{},"body":{"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{}}}],["executed",{"_index":2006,"title":{},"body":{"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{}}}],["exist",{"_index":222,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{}}}],["existing",{"_index":128,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"interfaces/CustomData.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"miscellaneous/typealiases.html":{}}}],["existingedge",{"_index":2259,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["existingedge.count",{"_index":2261,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["existingedge.from",{"_index":2272,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["existingedge.to].map(id",{"_index":2273,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["existingedge.type",{"_index":2276,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["existingedge.type.edgeoptions",{"_index":2271,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["existingedge.type.edgeoptions(nodes",{"_index":2275,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["existingedge.visible",{"_index":2262,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["existingedge[\"label",{"_index":2269,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["existingedge[\"labels\"].push(label",{"_index":2270,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["existingnode",{"_index":476,"title":{},"body":{"classes/AsyncRecordsProvider.html":{},"classes/DynamicEdgeProvider.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{}}}],["existingnode.count",{"_index":2249,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["existingnode.precedence",{"_index":2245,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["existingnode.type",{"_index":2253,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["existingnode.type.nodeoptions",{"_index":2251,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["existingnode.type.nodeoptions(existingnode",{"_index":2252,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["existingnode.visible",{"_index":2250,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["existingnodes",{"_index":168,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"miscellaneous/typealiases.html":{}}}],["exists",{"_index":1508,"title":{},"body":{"interfaces/Column.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["expand",{"_index":313,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["expandable",{"_index":4061,"title":{},"body":{"miscellaneous/functions.html":{}}}],["expanded",{"_index":651,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsNodeInfoCard.html":{},"interfaces/NodeData.html":{},"miscellaneous/functions.html":{}}}],["expanding",{"_index":127,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"miscellaneous/typealiases.html":{}}}],["expected",{"_index":3448,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["export",{"_index":52,"title":{},"body":{"modules/AgGridModule.html":{},"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"components/BsEdgeInfoCard.html":{},"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"modules/BsHeatmapModule.html":{},"components/BsNodeInfoCard.html":{},"modules/BsTimelineModule.html":{},"components/BsTooltipComponent.html":{},"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/Column.html":{},"interfaces/CustomData.html":{},"components/DataModalComponent.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/FacetChartDataPoint.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{},"components/FacetNgxChart.html":{},"components/FacetWrapperComponent.html":{},"modules/FinanceModule.html":{},"modules/FusionChartsModule.html":{},"modules/GoogleMapsModule.html":{},"interfaces/HeatmapItem.html":{},"components/MapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"modules/NetworkModule.html":{},"interfaces/NetworkProvider.html":{},"components/NgxChart.html":{},"modules/NgxChartsModule.html":{},"interfaces/Node.html":{},"interfaces/NodeData.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"components/ResultTimeline.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineEventType.html":{},"components/TimelineLegendComponent.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{},"modules/VisTimelineModule.html":{}}}],["exporting",{"_index":1703,"title":{},"body":{"interfaces/Column.html":{}}}],["exports",{"_index":21,"title":{},"body":{"modules/AgGridModule.html":{},"modules/BsHeatmapModule.html":{},"modules/BsTimelineModule.html":{},"modules/FinanceModule.html":{},"modules/FusionChartsModule.html":{},"modules/GoogleMapsModule.html":{},"modules/NetworkModule.html":{},"modules/NgxChartsModule.html":{},"modules/VisTimelineModule.html":{}}}],["exportvaluegetter",{"_index":1663,"title":{},"body":{"interfaces/Column.html":{}}}],["expr",{"_index":98,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"classes/BaseProvider.html":{},"components/BsFacetDate.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{},"components/MapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["expr.operands.map(e",{"_index":276,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{}}}],["expr.value",{"_index":923,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{}}}],["expr.values",{"_index":922,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{}}}],["exprbuilder",{"_index":777,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{},"components/MapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/VisEvent.html":{}}}],["expression",{"_index":2706,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["exprfrom",{"_index":613,"title":{},"body":{"classes/BaseProvider.html":{}}}],["exproperator",{"_index":827,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{}}}],["exprs",{"_index":3286,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["exprs.push(this.exprbuilder.makerangeexpr(ccaggregation.column",{"_index":3291,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["exprto",{"_index":616,"title":{},"body":{"classes/BaseProvider.html":{}}}],["extends",{"_index":110,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"components/BsFacetDate.html":{},"interfaces/Column.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/FacetChartDataPoint.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{},"components/FacetNgxChart.html":{},"components/MapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/VisEvent.html":{}}}],["extension",{"_index":105,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["extent([[0",{"_index":3424,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["external",{"_index":1491,"title":{},"body":{"interfaces/Column.html":{}}}],["extract",{"_index":2717,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{}}}],["f8f9fa",{"_index":932,"title":{},"body":{"components/BsFacetDate.html":{}}}],["fa",{"_index":338,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"classes/BaseProvider.html":{},"components/BsFacetDate.html":{},"interfaces/Column.html":{},"interfaces/CustomData.html":{},"components/DataModalComponent.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/FacetChartDataPoint.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{},"components/FacetNgxChart.html":{},"components/MapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/VisEvent.html":{}}}],["facet",{"_index":48,"title":{},"body":{"modules/AgGridModule.html":{},"components/BsEdgeInfoCard.html":{},"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"modules/BsHeatmapModule.html":{},"components/BsNodeInfoCard.html":{},"modules/BsTimelineModule.html":{},"components/BsTooltipComponent.html":{},"interfaces/Column.html":{},"components/DataModalComponent.html":{},"interfaces/FacetChartDataPoint.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{},"components/FacetNgxChart.html":{},"components/FacetWrapperComponent.html":{},"components/MapComponent.html":{},"components/NgxChart.html":{},"modules/NgxChartsModule.html":{},"components/ResultTimeline.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"components/TimelineLegendComponent.html":{},"interfaces/TimelineRecords.html":{},"interfaces/VisEvent.html":{}}}],["facetactive",{"_index":1604,"title":{},"body":{"interfaces/Column.html":{},"components/FacetWrapperComponent.html":{}}}],["facetchartdatapoint",{"_index":2300,"title":{"interfaces/FacetChartDataPoint.html":{}},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"coverage.html":{}}}],["facetconfig",{"_index":825,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{}}}],["facetdateconfig",{"_index":832,"title":{"interfaces/FacetDateConfig.html":{}},"body":{"components/BsFacetDate.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{},"coverage.html":{}}}],["facetdateparams",{"_index":748,"title":{"interfaces/FacetDateParams.html":{}},"body":{"components/BsFacetDate.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{},"coverage.html":{}}}],["facetname",{"_index":2397,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["facetngxchart",{"_index":724,"title":{"components/FacetNgxChart.html":{}},"body":{"components/BsEdgeInfoCard.html":{},"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"components/BsTooltipComponent.html":{},"components/DataModalComponent.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"components/FacetWrapperComponent.html":{},"components/MapComponent.html":{},"components/NgxChart.html":{},"modules/NgxChartsModule.html":{},"components/ResultTimeline.html":{},"components/TimelineLegendComponent.html":{},"coverage.html":{},"index.html":{}}}],["facets",{"_index":1602,"title":{},"body":{"interfaces/Column.html":{}}}],["facetservice",{"_index":775,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/Column.html":{},"interfaces/FacetChartDataPoint.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{},"components/FacetNgxChart.html":{},"components/FacetWrapperComponent.html":{},"components/MapComponent.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["facetwrappercomponent",{"_index":10,"title":{"components/FacetWrapperComponent.html":{}},"body":{"modules/AgGridModule.html":{},"components/BsEdgeInfoCard.html":{},"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"components/BsTooltipComponent.html":{},"interfaces/Column.html":{},"components/DataModalComponent.html":{},"components/FacetNgxChart.html":{},"components/FacetWrapperComponent.html":{},"components/MapComponent.html":{},"components/NgxChart.html":{},"components/ResultTimeline.html":{},"components/TimelineLegendComponent.html":{},"coverage.html":{},"index.html":{}}}],["fact",{"_index":1761,"title":{},"body":{"interfaces/Column.html":{}}}],["factory",{"_index":4049,"title":{},"body":{"miscellaneous/functions.html":{}}}],["factory.ts",{"_index":4002,"title":{},"body":{"coverage.html":{}}}],["false",{"_index":285,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"components/BsEdgeInfoCard.html":{},"components/BsFacetDate.html":{},"components/BsNodeInfoCard.html":{},"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/Column.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{},"modules/FusionChartsModule.html":{},"components/MapComponent.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"components/NgxChart.html":{},"interfaces/Node.html":{},"interfaces/NodeData.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"components/ResultTimeline.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{}}}],["far",{"_index":848,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/Column.html":{},"components/DataModalComponent.html":{},"interfaces/FacetChartDataPoint.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{},"components/FacetNgxChart.html":{},"components/MapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/VisEvent.html":{}}}],["fas",{"_index":337,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"classes/BaseProvider.html":{},"interfaces/Column.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"components/MapComponent.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/VisEvent.html":{}}}],["fcmodule",{"_index":2517,"title":{},"body":{"modules/FusionChartsModule.html":{}}}],["fcmodule.fcroot(fusioncharts",{"_index":2527,"title":{},"body":{"modules/FusionChartsModule.html":{}}}],["features",{"_index":492,"title":{},"body":{"classes/BaseProvider.html":{}}}],["featuretype",{"_index":4119,"title":{},"body":{"miscellaneous/variables.html":{}}}],["fetch",{"_index":165,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"interfaces/Column.html":{}}}],["fetchaggregation(aggregation",{"_index":3250,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["fetchaggregations(types",{"_index":199,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{}}}],["fetched",{"_index":121,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["fetches",{"_index":190,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"miscellaneous/functions.html":{}}}],["fetching",{"_index":2020,"title":{},"body":{"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["field",{"_index":425,"title":{},"body":{"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"components/BsFacetDate.html":{},"interfaces/Column.html":{},"interfaces/CustomData.html":{},"classes/DynamicEdgeProvider.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/FacetChartDataPoint.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{},"components/FacetNgxChart.html":{},"components/FacetWrapperComponent.html":{},"components/MapComponent.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["fields",{"_index":1825,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["fieldvalue",{"_index":79,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"interfaces/CustomData.html":{},"components/DataModalComponent.html":{},"classes/DynamicEdgeProvider.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["file",{"_index":16,"title":{},"body":{"modules/AgGridModule.html":{},"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"components/BsEdgeInfoCard.html":{},"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"modules/BsHeatmapModule.html":{},"components/BsNodeInfoCard.html":{},"modules/BsTimelineModule.html":{},"components/BsTooltipComponent.html":{},"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/Column.html":{},"interfaces/CustomData.html":{},"components/DataModalComponent.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/FacetChartDataPoint.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{},"components/FacetNgxChart.html":{},"components/FacetWrapperComponent.html":{},"modules/FinanceModule.html":{},"modules/FusionChartsModule.html":{},"modules/GoogleMapsModule.html":{},"interfaces/HeatmapItem.html":{},"components/MapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"modules/NetworkModule.html":{},"interfaces/NetworkProvider.html":{},"components/NgxChart.html":{},"modules/NgxChartsModule.html":{},"interfaces/Node.html":{},"interfaces/NodeData.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"components/ResultTimeline.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineEventType.html":{},"components/TimelineLegendComponent.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{},"modules/VisTimelineModule.html":{},"coverage.html":{}}}],["fill",{"_index":1219,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineEventType.html":{},"components/TimelineLegendComponent.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{}}}],["fills",{"_index":227,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{}}}],["filter",{"_index":118,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"components/BsFacetDate.html":{},"components/BsNodeInfoCard.html":{},"interfaces/Column.html":{},"interfaces/CustomData.html":{},"classes/DynamicEdgeProvider.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{},"components/FacetWrapperComponent.html":{},"components/MapComponent.html":{},"interfaces/MoneyDatum.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeData.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"miscellaneous/typealiases.html":{}}}],["filter(e",{"_index":1247,"title":{},"body":{"components/BsNodeInfoCard.html":{},"interfaces/NodeData.html":{}}}],["filter(edge",{"_index":1925,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["filter(item",{"_index":3339,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["filter(node",{"_index":324,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{}}}],["filter(r",{"_index":3232,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["filter(record",{"_index":2356,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["filter(tick",{"_index":2773,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["filter(v",{"_index":2329,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["filterarea",{"_index":2540,"title":{},"body":{"components/MapComponent.html":{}}}],["filterchangedevent",{"_index":1411,"title":{},"body":{"interfaces/Column.html":{}}}],["filterdatum(datum",{"_index":2793,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{}}}],["filtered",{"_index":422,"title":{},"body":{"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"interfaces/Column.html":{},"classes/DynamicEdgeProvider.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/FacetChartDataPoint.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{},"components/FacetNgxChart.html":{},"interfaces/HeatmapItem.html":{},"components/MapComponent.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["filteredcolor",{"_index":2308,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["filtering",{"_index":1671,"title":{},"body":{"interfaces/Column.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["filteritem",{"_index":760,"title":{},"body":{"components/BsFacetDate.html":{}}}],["filteritem(item",{"_index":795,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{}}}],["filtermodifiedevent",{"_index":1412,"title":{},"body":{"interfaces/Column.html":{}}}],["filters",{"_index":1473,"title":{},"body":{"interfaces/Column.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"components/MapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/VisEvent.html":{}}}],["filtertype",{"_index":1607,"title":{},"body":{"interfaces/Column.html":{}}}],["finally",{"_index":1597,"title":{},"body":{"interfaces/Column.html":{}}}],["finance/.../index.ts",{"_index":4107,"title":{},"body":{"miscellaneous/variables.html":{}}}],["finance/finance.module.ts",{"_index":2508,"title":{},"body":{"modules/FinanceModule.html":{}}}],["finance/messages/index.ts",{"_index":3921,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["finance/money",{"_index":2646,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"coverage.html":{}}}],["financemodule",{"_index":2503,"title":{"modules/FinanceModule.html":{}},"body":{"modules/FinanceModule.html":{},"index.html":{},"modules.html":{}}}],["find",{"_index":3268,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["find(a",{"_index":2719,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{}}}],["fire",{"_index":3611,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["first",{"_index":842,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/Column.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["fit",{"_index":646,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"interfaces/NodeData.html":{},"interfaces/VisEvent.html":{}}}],["fitbounds",{"_index":2541,"title":{},"body":{"components/MapComponent.html":{}}}],["fitnetwork",{"_index":3805,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["fitting",{"_index":2590,"title":{},"body":{"components/MapComponent.html":{}}}],["flag",{"_index":1776,"title":{},"body":{"interfaces/Column.html":{}}}],["flags",{"_index":1471,"title":{},"body":{"interfaces/Column.html":{}}}],["focus",{"_index":675,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsNodeInfoCard.html":{},"interfaces/NodeData.html":{}}}],["focusnode",{"_index":652,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsNodeInfoCard.html":{}}}],["focusnode(node",{"_index":656,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsNodeInfoCard.html":{},"interfaces/NodeData.html":{}}}],["following",{"_index":3325,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{}}}],["font",{"_index":943,"title":{},"body":{"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"components/DataModalComponent.html":{},"interfaces/TimelineEventType.html":{},"components/TimelineLegendComponent.html":{}}}],["for(let",{"_index":1599,"title":{},"body":{"interfaces/Column.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["foreach",{"_index":3304,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["foreach(edge",{"_index":1928,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["foreach(event",{"_index":3657,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["foreach(item",{"_index":1254,"title":{},"body":{"components/BsNodeInfoCard.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/NodeData.html":{}}}],["foreach(list",{"_index":1270,"title":{},"body":{"components/BsNodeInfoCard.html":{},"interfaces/NodeData.html":{}}}],["foreach(node",{"_index":1923,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["foreach(record",{"_index":2358,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["forget",{"_index":2046,"title":{},"body":{"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{}}}],["form",{"_index":757,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/VisEvent.html":{}}}],["format",{"_index":271,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"interfaces/Column.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["formatcontent",{"_index":1436,"title":{},"body":{"interfaces/Column.html":{},"components/DataModalComponent.html":{}}}],["formatdayrequest",{"_index":3135,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["formating",{"_index":3134,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["formatservice",{"_index":1395,"title":{},"body":{"interfaces/Column.html":{},"components/DataModalComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{}}}],["formatted",{"_index":249,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"interfaces/Column.html":{}}}],["formatter",{"_index":547,"title":{},"body":{"classes/BaseProvider.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["formatting",{"_index":2345,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["formbuilder",{"_index":776,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{},"interfaces/VisEvent.html":{}}}],["formcontrol",{"_index":813,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{},"interfaces/VisEvent.html":{}}}],["formcontrol(this.dampingpref",{"_index":3861,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["formcontrol(this.gravitypref",{"_index":3865,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["formcontrol(this.repulsionpref",{"_index":3863,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["formcontrol(this.springconstantpref",{"_index":3859,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["formcontrol(this.springlengthpref",{"_index":3857,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["formgroup",{"_index":815,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{},"interfaces/VisEvent.html":{}}}],["formsmodule",{"_index":27,"title":{},"body":{"modules/AgGridModule.html":{},"modules/BsHeatmapModule.html":{},"modules/BsTimelineModule.html":{},"modules/NetworkModule.html":{}}}],["forwarded",{"_index":1440,"title":{},"body":{"interfaces/Column.html":{}}}],["found",{"_index":2236,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["foundid",{"_index":1754,"title":{},"body":{"interfaces/Column.html":{}}}],["foundrow",{"_index":1748,"title":{},"body":{"interfaces/Column.html":{}}}],["fractional",{"_index":2386,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["frame",{"_index":3782,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["frameworkcomponents",{"_index":1476,"title":{},"body":{"interfaces/Column.html":{}}}],["frfacet",{"_index":4158,"title":{},"body":{"miscellaneous/variables.html":{}}}],["frfinance",{"_index":3924,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["frgooglemaps",{"_index":3939,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["frgrid",{"_index":3920,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["frheatmap",{"_index":3952,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["fromnode",{"_index":558,"title":{},"body":{"classes/BaseProvider.html":{},"components/BsEdgeInfoCard.html":{}}}],["fromnode.id",{"_index":567,"title":{},"body":{"classes/BaseProvider.html":{}}}],["frresultsview",{"_index":4172,"title":{},"body":{"miscellaneous/variables.html":{}}}],["frsearch",{"_index":4173,"title":{},"body":{"miscellaneous/variables.html":{}}}],["fulltext",{"_index":1177,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["function",{"_index":72,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"components/BsHeatmapComponent.html":{},"interfaces/ChartOptions.html":{},"interfaces/Column.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"coverage.html":{}}}],["functionality",{"_index":1457,"title":{},"body":{"interfaces/Column.html":{}}}],["functions",{"_index":1651,"title":{"miscellaneous/functions.html":{}},"body":{"interfaces/Column.html":{},"miscellaneous/functions.html":{}}}],["fusion",{"_index":729,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"components/BsTooltipComponent.html":{},"components/DataModalComponent.html":{},"components/FacetNgxChart.html":{},"components/FacetWrapperComponent.html":{},"modules/FusionChartsModule.html":{},"components/MapComponent.html":{},"components/NgxChart.html":{},"components/ResultTimeline.html":{},"components/TimelineLegendComponent.html":{},"miscellaneous/variables.html":{}}}],["fusionchart",{"_index":728,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"components/BsTooltipComponent.html":{},"components/DataModalComponent.html":{},"components/FacetNgxChart.html":{},"components/FacetWrapperComponent.html":{},"modules/FusionChartsModule.html":{},"components/MapComponent.html":{},"components/NgxChart.html":{},"components/ResultTimeline.html":{},"components/TimelineLegendComponent.html":{},"coverage.html":{},"index.html":{}}}],["fusioncharts",{"_index":2518,"title":{},"body":{"modules/FusionChartsModule.html":{},"dependencies.html":{}}}],["fusioncharts.options.creditlabel",{"_index":2525,"title":{},"body":{"modules/FusionChartsModule.html":{}}}],["fusioncharts/.../chart.ts",{"_index":4104,"title":{},"body":{"miscellaneous/variables.html":{}}}],["fusioncharts/chart/chart.ts",{"_index":3929,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["fusioncharts/fusioncharts.charts",{"_index":2520,"title":{},"body":{"modules/FusionChartsModule.html":{}}}],["fusioncharts/fusioncharts.module.ts",{"_index":2516,"title":{},"body":{"modules/FusionChartsModule.html":{}}}],["fusioncharts/themes/fusioncharts.theme.candy",{"_index":2524,"title":{},"body":{"modules/FusionChartsModule.html":{}}}],["fusioncharts/themes/fusioncharts.theme.fusion",{"_index":2522,"title":{},"body":{"modules/FusionChartsModule.html":{}}}],["fusionchartsmodule",{"_index":2512,"title":{"modules/FusionChartsModule.html":{}},"body":{"modules/FusionChartsModule.html":{},"index.html":{},"modules.html":{}}}],["fusiontheme",{"_index":2521,"title":{},"body":{"modules/FusionChartsModule.html":{}}}],["fw",{"_index":341,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"classes/BaseProvider.html":{},"interfaces/Column.html":{}}}],["gain",{"_index":671,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsNodeInfoCard.html":{},"interfaces/NodeData.html":{}}}],["gate",{"_index":2096,"title":{},"body":{"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{}}}],["gates",{"_index":537,"title":{},"body":{"classes/BaseProvider.html":{},"interfaces/CustomData.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"miscellaneous/functions.html":{}}}],["gates)#(ceo)#(microsoft",{"_index":4068,"title":{},"body":{"miscellaneous/functions.html":{}}}],["gates/microsoft",{"_index":251,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{}}}],["gaugemodule",{"_index":2945,"title":{},"body":{"modules/NgxChartsModule.html":{}}}],["gaxis",{"_index":2711,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["gbrush",{"_index":3396,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["general",{"_index":2157,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/VisEvent.html":{}}}],["generate",{"_index":141,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["generated",{"_index":1795,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["generates",{"_index":175,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"interfaces/CustomData.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/VisEvent.html":{}}}],["generating",{"_index":1823,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["generic",{"_index":4048,"title":{},"body":{"miscellaneous/functions.html":{}}}],["geo",{"_index":2629,"title":{},"body":{"components/MapComponent.html":{},"miscellaneous/functions.html":{}}}],["geolocated",{"_index":2594,"title":{},"body":{"components/MapComponent.html":{}}}],["geometry",{"_index":4112,"title":{},"body":{"miscellaneous/variables.html":{}}}],["geometry.fill",{"_index":4134,"title":{},"body":{"miscellaneous/variables.html":{}}}],["geometry.stroke",{"_index":4121,"title":{},"body":{"miscellaneous/variables.html":{}}}],["georecords",{"_index":2542,"title":{},"body":{"components/MapComponent.html":{}}}],["getactions",{"_index":822,"title":{},"body":{"components/BsFacetDate.html":{},"components/FacetNgxChart.html":{},"components/MapComponent.html":{}}}],["getadjacentedges",{"_index":2859,"title":{},"body":{"classes/NetworkDataset.html":{}}}],["getadjacentedges(nodeid",{"_index":2229,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["getaggregation",{"_index":2474,"title":{},"body":{"components/FacetWrapperComponent.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["getaggregation(aggregationname",{"_index":907,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["getaggregationlabel(aggregation",{"_index":368,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{}}}],["getappservice",{"_index":2476,"title":{},"body":{"components/FacetWrapperComponent.html":{}}}],["getcharttype",{"_index":2925,"title":{},"body":{"components/NgxChart.html":{}}}],["getcolorscheme",{"_index":2927,"title":{},"body":{"components/NgxChart.html":{}}}],["getconnectednodes",{"_index":2860,"title":{},"body":{"classes/NetworkDataset.html":{}}}],["getconnectednodes(nodeid",{"_index":2231,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["getd3timeinterval(resolution",{"_index":3361,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["getdata",{"_index":124,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"classes/DynamicEdgeProvider.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/NetworkProvider.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/VisEvent.html":{},"miscellaneous/typealiases.html":{}}}],["getdata(context",{"_index":295,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"classes/DynamicEdgeProvider.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{}}}],["getdatasource",{"_index":2470,"title":{},"body":{"components/FacetWrapperComponent.html":{}}}],["getdate",{"_index":3094,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["getdisplay",{"_index":3095,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["getedge",{"_index":2861,"title":{},"body":{"classes/NetworkDataset.html":{}}}],["getedge(id",{"_index":2178,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["getedgeactions",{"_index":385,"title":{},"body":{"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"classes/DynamicEdgeProvider.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/NetworkProvider.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{}}}],["getedgeactions(edge",{"_index":413,"title":{},"body":{"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"classes/DynamicEdgeProvider.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{}}}],["getedgeid(node1",{"_index":528,"title":{},"body":{"classes/BaseProvider.html":{}}}],["getedgeids",{"_index":2192,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["getedges",{"_index":2182,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["geteventaggregation(config",{"_index":3227,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["getexportparams",{"_index":1705,"title":{},"body":{"interfaces/Column.html":{}}}],["getfacetservice",{"_index":2478,"title":{},"body":{"components/FacetWrapperComponent.html":{}}}],["getfield",{"_index":821,"title":{},"body":{"components/BsFacetDate.html":{}}}],["getitem",{"_index":2418,"title":{},"body":{"components/FacetNgxChart.html":{}}}],["getitem(datapoint",{"_index":2408,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["getitemcolor",{"_index":1334,"title":{},"body":{"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"components/NgxChart.html":{}}}],["getlegend",{"_index":965,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["getmaxdate",{"_index":3147,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["getmindate",{"_index":3143,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["getmodel",{"_index":2452,"title":{},"body":{"components/FacetWrapperComponent.html":{}}}],["getname",{"_index":2336,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["getnode",{"_index":2862,"title":{},"body":{"classes/NetworkDataset.html":{}}}],["getnode(id",{"_index":2176,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["getnodeactions",{"_index":383,"title":{},"body":{"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"classes/DynamicEdgeProvider.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/NetworkProvider.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{}}}],["getnodeactions(node",{"_index":354,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["getnodeid(type",{"_index":533,"title":{},"body":{"classes/BaseProvider.html":{}}}],["getnodeids",{"_index":2190,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["getnodes",{"_index":2180,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["getnodevalue(node",{"_index":535,"title":{},"body":{"classes/BaseProvider.html":{}}}],["getprovider",{"_index":386,"title":{},"body":{"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"classes/DynamicEdgeProvider.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{}}}],["getprovideractions",{"_index":333,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"interfaces/CustomData.html":{},"classes/DynamicEdgeProvider.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["getquery",{"_index":2005,"title":{},"body":{"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{}}}],["getrecordsasevents(config",{"_index":3231,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["getresults",{"_index":2472,"title":{},"body":{"components/FacetWrapperComponent.html":{}}}],["getresults(query",{"_index":912,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{}}}],["getrows",{"_index":1670,"title":{},"body":{"interfaces/Column.html":{}}}],["gets",{"_index":3338,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"miscellaneous/functions.html":{}}}],["getstyle",{"_index":1311,"title":{},"body":{"components/BsTooltipComponent.html":{}}}],["gettimeseries(config",{"_index":3220,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["getvisibleedges",{"_index":2187,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["getvisiblenodes",{"_index":2184,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["given",{"_index":181,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"interfaces/Column.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"miscellaneous/functions.html":{}}}],["global",{"_index":1676,"title":{},"body":{"interfaces/Column.html":{},"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["google",{"_index":114,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"miscellaneous/functions.html":{}}}],["google.maps.latlngbounds",{"_index":2575,"title":{},"body":{"components/MapComponent.html":{}}}],["google.maps.latlngboundsliteral",{"_index":2588,"title":{},"body":{"components/MapComponent.html":{}}}],["googlemaps",{"_index":2537,"title":{},"body":{"components/MapComponent.html":{}}}],["googlemaps'},{'name",{"_index":731,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"components/BsTooltipComponent.html":{},"components/DataModalComponent.html":{},"components/FacetNgxChart.html":{},"components/FacetWrapperComponent.html":{},"components/MapComponent.html":{},"components/NgxChart.html":{},"components/ResultTimeline.html":{},"components/TimelineLegendComponent.html":{}}}],["googlemaps/.../dark",{"_index":4103,"title":{},"body":{"miscellaneous/variables.html":{}}}],["googlemaps/.../index.ts",{"_index":4108,"title":{},"body":{"miscellaneous/variables.html":{}}}],["googlemaps/dark",{"_index":3933,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["googlemaps/googlemaps.module.ts",{"_index":2532,"title":{},"body":{"modules/GoogleMapsModule.html":{}}}],["googlemaps/map.component.ts",{"_index":2536,"title":{},"body":{"components/MapComponent.html":{},"coverage.html":{}}}],["googlemaps/map.component.ts:102",{"_index":2573,"title":{},"body":{"components/MapComponent.html":{}}}],["googlemaps/map.component.ts:134",{"_index":2572,"title":{},"body":{"components/MapComponent.html":{}}}],["googlemaps/map.component.ts:144",{"_index":2578,"title":{},"body":{"components/MapComponent.html":{}}}],["googlemaps/map.component.ts:148",{"_index":2582,"title":{},"body":{"components/MapComponent.html":{}}}],["googlemaps/map.component.ts:154",{"_index":2576,"title":{},"body":{"components/MapComponent.html":{}}}],["googlemaps/map.component.ts:19",{"_index":2563,"title":{},"body":{"components/MapComponent.html":{}}}],["googlemaps/map.component.ts:21",{"_index":2566,"title":{},"body":{"components/MapComponent.html":{}}}],["googlemaps/map.component.ts:23",{"_index":2555,"title":{},"body":{"components/MapComponent.html":{}}}],["googlemaps/map.component.ts:25",{"_index":2558,"title":{},"body":{"components/MapComponent.html":{}}}],["googlemaps/map.component.ts:27",{"_index":2562,"title":{},"body":{"components/MapComponent.html":{}}}],["googlemaps/map.component.ts:29",{"_index":2567,"title":{},"body":{"components/MapComponent.html":{}}}],["googlemaps/map.component.ts:31",{"_index":2569,"title":{},"body":{"components/MapComponent.html":{}}}],["googlemaps/map.component.ts:34",{"_index":2592,"title":{},"body":{"components/MapComponent.html":{}}}],["googlemaps/map.component.ts:36",{"_index":2589,"title":{},"body":{"components/MapComponent.html":{}}}],["googlemaps/map.component.ts:39",{"_index":2587,"title":{},"body":{"components/MapComponent.html":{}}}],["googlemaps/map.component.ts:40",{"_index":2584,"title":{},"body":{"components/MapComponent.html":{}}}],["googlemaps/map.component.ts:43",{"_index":2583,"title":{},"body":{"components/MapComponent.html":{}}}],["googlemaps/map.component.ts:45",{"_index":2595,"title":{},"body":{"components/MapComponent.html":{}}}],["googlemaps/map.component.ts:48",{"_index":2553,"title":{},"body":{"components/MapComponent.html":{}}}],["googlemaps/map.component.ts:51",{"_index":2598,"title":{},"body":{"components/MapComponent.html":{}}}],["googlemaps/map.component.ts:52",{"_index":2586,"title":{},"body":{"components/MapComponent.html":{}}}],["googlemaps/map.component.ts:53",{"_index":2585,"title":{},"body":{"components/MapComponent.html":{}}}],["googlemaps/map.component.ts:91",{"_index":2599,"title":{},"body":{"components/MapComponent.html":{}}}],["googlemaps/messages/index.ts",{"_index":3936,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["googlemapsmodule",{"_index":2528,"title":{"modules/GoogleMapsModule.html":{}},"body":{"modules/GoogleMapsModule.html":{},"index.html":{},"modules.html":{}}}],["goup",{"_index":3459,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["graph",{"_index":3478,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["graphical",{"_index":1074,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["gravity",{"_index":3870,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["gravitycontrol",{"_index":3864,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["gravitycontrol.value",{"_index":3879,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["gravitypref",{"_index":3898,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["green",{"_index":3369,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["grid",{"_index":31,"title":{},"body":{"modules/AgGridModule.html":{},"components/BsEdgeInfoCard.html":{},"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"components/BsTooltipComponent.html":{},"interfaces/Column.html":{},"components/DataModalComponent.html":{},"components/FacetNgxChart.html":{},"components/FacetWrapperComponent.html":{},"components/MapComponent.html":{},"components/NgxChart.html":{},"components/ResultTimeline.html":{},"components/TimelineLegendComponent.html":{},"coverage.html":{},"dependencies.html":{}}}],["grid.module.ts",{"_index":19,"title":{},"body":{"modules/AgGridModule.html":{}}}],["grid/.../data",{"_index":4099,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["grid/.../datasource.ts",{"_index":4100,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["grid/.../index.ts",{"_index":4109,"title":{},"body":{"miscellaneous/variables.html":{}}}],["grid/ag",{"_index":18,"title":{},"body":{"modules/AgGridModule.html":{},"interfaces/Column.html":{},"coverage.html":{}}}],["grid/data",{"_index":1967,"title":{},"body":{"components/DataModalComponent.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["grid/datasource.ts",{"_index":3912,"title":{},"body":{"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["grid/facet",{"_index":2442,"title":{},"body":{"components/FacetWrapperComponent.html":{},"coverage.html":{}}}],["grid/messages/index.ts",{"_index":3916,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["gridactions",{"_index":1478,"title":{},"body":{"interfaces/Column.html":{}}}],["gridapi",{"_index":1401,"title":{},"body":{"interfaces/Column.html":{}}}],["gridcolumnapi",{"_index":1470,"title":{},"body":{"interfaces/Column.html":{}}}],["gridreadyevent",{"_index":1403,"title":{},"body":{"interfaces/Column.html":{}}}],["gridreset",{"_index":1432,"title":{},"body":{"interfaces/Column.html":{}}}],["grip",{"_index":3469,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["gripheight",{"_index":3687,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["grips",{"_index":3398,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["gripwidth",{"_index":3692,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["group",{"_index":2446,"title":{},"body":{"components/FacetWrapperComponent.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["groupedevents",{"_index":3382,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["groupevents(pixperevent",{"_index":3646,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["grouping",{"_index":3519,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["guess",{"_index":3163,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["gx",{"_index":950,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["gy",{"_index":951,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["h",{"_index":1635,"title":{},"body":{"interfaces/Column.html":{}}}],["hack",{"_index":670,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsNodeInfoCard.html":{},"interfaces/NodeData.html":{}}}],["handled",{"_index":2160,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["handling",{"_index":1866,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{}}}],["happens",{"_index":4078,"title":{},"body":{"miscellaneous/functions.html":{}}}],["hascollapsededge",{"_index":1952,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["hasedge",{"_index":2863,"title":{},"body":{"classes/NetworkDataset.html":{}}}],["hasedge(id",{"_index":2174,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["hasexpandededge",{"_index":1951,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["hasfiltered",{"_index":2343,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["hasn't",{"_index":1766,"title":{},"body":{"interfaces/Column.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{}}}],["hasnode",{"_index":2864,"title":{},"body":{"classes/NetworkDataset.html":{}}}],["hasnode(id",{"_index":2172,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["header",{"_index":1524,"title":{},"body":{"interfaces/Column.html":{}}}],["heatmap",{"_index":719,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"modules/BsHeatmapModule.html":{},"components/BsNodeInfoCard.html":{},"modules/BsTimelineModule.html":{},"components/BsTooltipComponent.html":{},"components/DataModalComponent.html":{},"components/FacetNgxChart.html":{},"components/FacetWrapperComponent.html":{},"interfaces/HeatmapItem.html":{},"components/MapComponent.html":{},"components/NgxChart.html":{},"components/ResultTimeline.html":{},"components/TimelineLegendComponent.html":{},"coverage.html":{}}}],["heatmap'},{'name",{"_index":713,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"components/BsTooltipComponent.html":{},"components/DataModalComponent.html":{},"components/FacetNgxChart.html":{},"components/FacetWrapperComponent.html":{},"components/MapComponent.html":{},"components/NgxChart.html":{},"components/ResultTimeline.html":{},"components/TimelineLegendComponent.html":{}}}],["heatmap.component",{"_index":1232,"title":{},"body":{"modules/BsHeatmapModule.html":{}}}],["heatmap.component.html",{"_index":948,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["heatmap.component.scss",{"_index":947,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["heatmap.component.ts",{"_index":3941,"title":{},"body":{"coverage.html":{}}}],["heatmap/.../index.ts",{"_index":4110,"title":{},"body":{"miscellaneous/variables.html":{}}}],["heatmap/bootstrap/facet",{"_index":3940,"title":{},"body":{"coverage.html":{}}}],["heatmap/bootstrap/heatmap.component.ts",{"_index":945,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{},"coverage.html":{}}}],["heatmap/bootstrap/heatmap.component.ts:108",{"_index":1030,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["heatmap/bootstrap/heatmap.component.ts:123",{"_index":1014,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["heatmap/bootstrap/heatmap.component.ts:160",{"_index":1042,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["heatmap/bootstrap/heatmap.component.ts:189",{"_index":1038,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["heatmap/bootstrap/heatmap.component.ts:200",{"_index":1034,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["heatmap/bootstrap/heatmap.component.ts:209",{"_index":1029,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["heatmap/bootstrap/heatmap.component.ts:23",{"_index":992,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["heatmap/bootstrap/heatmap.component.ts:230",{"_index":1060,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["heatmap/bootstrap/heatmap.component.ts:26",{"_index":995,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["heatmap/bootstrap/heatmap.component.ts:27",{"_index":1009,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["heatmap/bootstrap/heatmap.component.ts:28",{"_index":1001,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["heatmap/bootstrap/heatmap.component.ts:29",{"_index":1008,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["heatmap/bootstrap/heatmap.component.ts:32",{"_index":996,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["heatmap/bootstrap/heatmap.component.ts:33",{"_index":986,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["heatmap/bootstrap/heatmap.component.ts:36",{"_index":988,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["heatmap/bootstrap/heatmap.component.ts:37",{"_index":990,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["heatmap/bootstrap/heatmap.component.ts:38",{"_index":1002,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["heatmap/bootstrap/heatmap.component.ts:39",{"_index":1003,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["heatmap/bootstrap/heatmap.component.ts:40",{"_index":1006,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["heatmap/bootstrap/heatmap.component.ts:43",{"_index":1012,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["heatmap/bootstrap/heatmap.component.ts:44",{"_index":1011,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["heatmap/bootstrap/heatmap.component.ts:47",{"_index":1066,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["heatmap/bootstrap/heatmap.component.ts:48",{"_index":1069,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["heatmap/bootstrap/heatmap.component.ts:49",{"_index":1047,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["heatmap/bootstrap/heatmap.component.ts:52",{"_index":1051,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["heatmap/bootstrap/heatmap.component.ts:53",{"_index":1053,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["heatmap/bootstrap/heatmap.component.ts:54",{"_index":1068,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["heatmap/bootstrap/heatmap.component.ts:55",{"_index":1070,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["heatmap/bootstrap/heatmap.component.ts:58",{"_index":1048,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["heatmap/bootstrap/heatmap.component.ts:61",{"_index":1054,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["heatmap/bootstrap/heatmap.component.ts:62",{"_index":1056,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["heatmap/bootstrap/heatmap.component.ts:63",{"_index":1058,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["heatmap/bootstrap/heatmap.component.ts:64",{"_index":1057,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["heatmap/bootstrap/heatmap.component.ts:65",{"_index":1055,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["heatmap/bootstrap/heatmap.component.ts:68",{"_index":1059,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["heatmap/bootstrap/heatmap.component.ts:69",{"_index":984,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["heatmap/bootstrap/heatmap.component.ts:78",{"_index":1031,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["heatmap/bootstrap/heatmap.module.ts",{"_index":1228,"title":{},"body":{"modules/BsHeatmapModule.html":{}}}],["heatmap/bootstrap/results",{"_index":3944,"title":{},"body":{"coverage.html":{}}}],["heatmap/bootstrap/tooltip.component.ts",{"_index":1291,"title":{},"body":{"components/BsTooltipComponent.html":{},"coverage.html":{}}}],["heatmap/bootstrap/tooltip.component.ts:37",{"_index":1307,"title":{},"body":{"components/BsTooltipComponent.html":{}}}],["heatmap/bootstrap/tooltip.component.ts:38",{"_index":1306,"title":{},"body":{"components/BsTooltipComponent.html":{}}}],["heatmap/bootstrap/tooltip.component.ts:39",{"_index":1308,"title":{},"body":{"components/BsTooltipComponent.html":{}}}],["heatmap/bootstrap/tooltip.component.ts:40",{"_index":1310,"title":{},"body":{"components/BsTooltipComponent.html":{}}}],["heatmap/bootstrap/tooltip.component.ts:41",{"_index":1309,"title":{},"body":{"components/BsTooltipComponent.html":{}}}],["heatmap/bootstrap/tooltip.component.ts:43",{"_index":1312,"title":{},"body":{"components/BsTooltipComponent.html":{}}}],["heatmap/messages/index.ts",{"_index":3949,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["heatmapitem",{"_index":991,"title":{"interfaces/HeatmapItem.html":{}},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{},"coverage.html":{}}}],["height",{"_index":642,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"interfaces/Column.html":{},"components/DataModalComponent.html":{},"interfaces/HeatmapItem.html":{},"components/MapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"components/NgxChart.html":{},"interfaces/NodeData.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{},"miscellaneous/variables.html":{}}}],["hidden",{"_index":2932,"title":{},"body":{"components/NgxChart.html":{},"miscellaneous/functions.html":{}}}],["hide",{"_index":1547,"title":{},"body":{"interfaces/Column.html":{}}}],["hidepref",{"_index":1546,"title":{},"body":{"interfaces/Column.html":{}}}],["hiderecordnode",{"_index":447,"title":{},"body":{"classes/AsyncRecordsProvider.html":{},"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["hiderecordnode=true",{"_index":4055,"title":{},"body":{"miscellaneous/functions.html":{}}}],["hides",{"_index":3549,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["highest",{"_index":2153,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["highlight",{"_index":2391,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["histogram",{"_index":3641,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["horizontalbar",{"_index":1365,"title":{},"body":{"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"components/NgxChart.html":{}}}],["host",{"_index":1196,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["hover",{"_index":936,"title":{},"body":{"components/BsFacetDate.html":{}}}],["hovered",{"_index":2852,"title":{},"body":{"interfaces/MoneyDatum.html":{}}}],["hovers",{"_index":1043,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["html",{"_index":700,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"components/BsTooltipComponent.html":{},"interfaces/Column.html":{},"components/DataModalComponent.html":{},"components/FacetNgxChart.html":{},"components/FacetWrapperComponent.html":{},"interfaces/HeatmapItem.html":{},"components/MapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"components/NgxChart.html":{},"components/ResultTimeline.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"components/TimelineLegendComponent.html":{},"interfaces/TimelineSeries.html":{}}}],["htmlelement",{"_index":1657,"title":{},"body":{"interfaces/Column.html":{}}}],["htmlelement).offsetwidth",{"_index":1168,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["http://localhost:4000/sba",{"_index":3063,"title":{},"body":{"classes/SelectedRecordsProvider.html":{}}}],["https://github.com/angular/angular/issues/16982",{"_index":3677,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["https://github.com/d3/d3",{"_index":2787,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["https://stackoverflow.com/questions/13576906/d3",{"_index":2778,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["https://visjs.github.io/vis",{"_index":2141,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/VisEvent.html":{},"miscellaneous/variables.html":{}}}],["human",{"_index":4046,"title":{},"body":{"miscellaneous/functions.html":{}}}],["humans",{"_index":4082,"title":{},"body":{"miscellaneous/functions.html":{}}}],["hybrid",{"_index":1888,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["i=0",{"_index":1911,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["i=this.searchservice.query.select.length",{"_index":1681,"title":{},"body":{"interfaces/Column.html":{}}}],["i>=0",{"_index":1682,"title":{},"body":{"interfaces/Column.html":{}}}],["icellrendererfunc",{"_index":1399,"title":{},"body":{"interfaces/Column.html":{}}}],["icon",{"_index":336,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"classes/BaseProvider.html":{},"components/BsFacetDate.html":{},"interfaces/Column.html":{},"interfaces/CustomData.html":{},"components/DataModalComponent.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/FacetChartDataPoint.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{},"components/FacetNgxChart.html":{},"components/MapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/VisEvent.html":{},"miscellaneous/functions.html":{}}}],["id",{"_index":526,"title":{},"body":{"classes/BaseProvider.html":{},"components/BsNodeInfoCard.html":{},"interfaces/Column.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeData.html":{},"interfaces/NodeType.html":{},"components/ResultTimeline.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{}}}],["idatasource",{"_index":1407,"title":{},"body":{"interfaces/Column.html":{}}}],["identifier",{"_index":2564,"title":{},"body":{"components/MapComponent.html":{},"coverage.html":{}}}],["idoesfilterpassparams",{"_index":2459,"title":{},"body":{"components/FacetWrapperComponent.html":{}}}],["ids",{"_index":2189,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"classes/SelectedRecordsProvider.html":{}}}],["ids.foreach(id",{"_index":2210,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["ie",{"_index":423,"title":{},"body":{"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"interfaces/CustomData.html":{},"classes/DynamicEdgeProvider.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["if(!!changes['record",{"_index":2987,"title":{},"body":{"components/ResultTimeline.html":{}}}],["if(!!existingedge[\"label",{"_index":2266,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["if(!!item.value",{"_index":3334,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["if(!!this.selectfield.text",{"_index":2340,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["if(!agg",{"_index":2496,"title":{},"body":{"components/FacetWrapperComponent.html":{}}}],["if(!changes.timeseries",{"_index":3151,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["if(!changes[\"height",{"_index":3437,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["if(!config.maxnmonths",{"_index":3263,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["if(!d0",{"_index":3622,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["if(!dataset.hasedge(edge.id",{"_index":1900,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["if(!dataset.hasnode(node.id",{"_index":1890,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["if(!foundid",{"_index":1756,"title":{},"body":{"interfaces/Column.html":{}}}],["if(!foundrow",{"_index":1751,"title":{},"body":{"interfaces/Column.html":{}}}],["if(!item.display",{"_index":264,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{}}}],["if(!items",{"_index":3329,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["if(!keepdanglingnodes",{"_index":2225,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["if(!neighbor",{"_index":1932,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["if(!neighbor.visible",{"_index":1945,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["if(!node",{"_index":1839,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["if(!previousvalue",{"_index":3682,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["if(!record.modified",{"_index":2830,"title":{},"body":{"interfaces/MoneyDatum.html":{}}}],["if(!select",{"_index":3173,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["if(!series.showdatapoints",{"_index":3617,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["if(!sourcenode",{"_index":263,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{}}}],["if(!this._filterinput",{"_index":1764,"title":{},"body":{"interfaces/Column.html":{}}}],["if(!this.active",{"_index":1831,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["if(!this.context.appservice.getccaggregation(aggregation",{"_index":217,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{}}}],["if(!this.currentrange",{"_index":3164,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["if(!this.events",{"_index":3181,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["if(!this.gridactions",{"_index":1506,"title":{},"body":{"interfaces/Column.html":{}}}],["if(!this.hasedge(edge.id",{"_index":2256,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["if(!this.hasnode(edge.from",{"_index":2292,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["if(!this.hasnode(node.id",{"_index":2242,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["if(!this.isfiltered(item",{"_index":2404,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["if(!this.neighbors[type",{"_index":1262,"title":{},"body":{"components/BsNodeInfoCard.html":{},"interfaces/NodeData.html":{}}}],["if(!this.optionsprefs.physics",{"_index":3839,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["if(!this.optionsprefs.physics.barneshut",{"_index":3841,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["if(!this.params.coldef.field",{"_index":2490,"title":{},"body":{"components/FacetWrapperComponent.html":{}}}],["if(!this.permanent",{"_index":2073,"title":{},"body":{"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{}}}],["if(!this.query",{"_index":1675,"title":{},"body":{"interfaces/Column.html":{}}}],["if(!this.showtooltip",{"_index":2854,"title":{},"body":{"interfaces/MoneyDatum.html":{}}}],["if(!this.timeseries",{"_index":3174,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["if(!this.tooltipitem",{"_index":2841,"title":{},"body":{"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["if(!this.x",{"_index":2686,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["if(!this.zoomable",{"_index":3525,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["if(!utils.isstring(action",{"_index":1625,"title":{},"body":{"interfaces/Column.html":{}}}],["if(!utils.isstring(parsedexpr",{"_index":3157,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["if(!xextent[0",{"_index":2835,"title":{},"body":{"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["if(!yextent[0",{"_index":2745,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{}}}],["if((config",{"_index":3193,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["if((neighbor.visible",{"_index":1960,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["if((node.precedence",{"_index":2244,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["if(_queries.length",{"_index":2057,"title":{},"body":{"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{}}}],["if(action",{"_index":1627,"title":{},"body":{"interfaces/Column.html":{}}}],["if(action.selected",{"_index":1579,"title":{},"body":{"interfaces/Column.html":{}}}],["if(actions.length",{"_index":3791,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["if(agg.aggregation",{"_index":3197,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["if(aggregation",{"_index":234,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["if(array.isarray(config",{"_index":3219,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["if(bin",{"_index":3665,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["if(ccaggregation",{"_index":3248,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["if(changes.columns",{"_index":1502,"title":{},"body":{"interfaces/Column.html":{}}}],["if(changes.results",{"_index":1504,"title":{},"body":{"interfaces/Column.html":{}}}],["if(changes[\"events",{"_index":3455,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["if(changes[\"height",{"_index":2695,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["if(changes[\"width",{"_index":2698,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["if(changes['options",{"_index":3757,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["if(changes['results",{"_index":3751,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["if(changes['style",{"_index":2621,"title":{},"body":{"components/MapComponent.html":{}}}],["if(col.field",{"_index":1601,"title":{},"body":{"interfaces/Column.html":{}}}],["if(col.filter",{"_index":1551,"title":{},"body":{"interfaces/Column.html":{}}}],["if(col?.formatter",{"_index":551,"title":{},"body":{"classes/BaseProvider.html":{}}}],["if(currentvalue",{"_index":3678,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["if(data",{"_index":1714,"title":{},"body":{"interfaces/Column.html":{}}}],["if(datum",{"_index":2723,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{}}}],["if(diff",{"_index":3516,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["if(directed",{"_index":570,"title":{},"body":{"classes/BaseProvider.html":{}}}],["if(edge.type.field",{"_index":599,"title":{},"body":{"classes/BaseProvider.html":{}}}],["if(event.edges.length",{"_index":3823,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["if(event.event.type",{"_index":3821,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["if(event.nodes.length",{"_index":3826,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["if(event.records.find(r",{"_index":1498,"title":{},"body":{"interfaces/Column.html":{}}}],["if(event.source",{"_index":1493,"title":{},"body":{"interfaces/Column.html":{}}}],["if(event.type",{"_index":3073,"title":{},"body":{"classes/SelectedRecordsProvider.html":{}}}],["if(events!==this.tooltipitem",{"_index":3696,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["if(events.length",{"_index":3658,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["if(existingedge[\"labels\"].indexof(label",{"_index":2268,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["if(exprs.length",{"_index":3292,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["if(formatcontent",{"_index":1511,"title":{},"body":{"interfaces/Column.html":{}}}],["if(hascollapsededge",{"_index":1955,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["if(hasexpandededge",{"_index":1957,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["if(i",{"_index":1566,"title":{},"body":{"interfaces/Column.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["if(isnan(value",{"_index":2740,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{}}}],["if(item.node",{"_index":1255,"title":{},"body":{"components/BsNodeInfoCard.html":{},"interfaces/NodeData.html":{}}}],["if(maxnmonths",{"_index":3272,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["if(neighborsneighbors.length",{"_index":1937,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["if(node.data?.$selected",{"_index":1786,"title":{},"body":{"interfaces/Column.html":{}}}],["if(node.visible",{"_index":2032,"title":{},"body":{"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{}}}],["if(nodefrom",{"_index":605,"title":{},"body":{"classes/BaseProvider.html":{}}}],["if(opened",{"_index":3855,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["if(parsedexpr.values",{"_index":3160,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["if(properties.items.length>0",{"_index":3043,"title":{},"body":{"components/ResultTimeline.html":{}}}],["if(query",{"_index":2071,"title":{},"body":{"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{}}}],["if(query.orderby",{"_index":1614,"title":{},"body":{"interfaces/Column.html":{}}}],["if(range",{"_index":3251,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["if(recorddata",{"_index":1856,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["if(recordnode.id",{"_index":1885,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["if(relation",{"_index":575,"title":{},"body":{"classes/BaseProvider.html":{}}}],["if(relativex",{"_index":1171,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["if(results.records.length",{"_index":2117,"title":{},"body":{"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{}}}],["if(select",{"_index":3154,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["if(selection",{"_index":3283,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["if(sourcenode",{"_index":212,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{}}}],["if(this._filterinput",{"_index":1779,"title":{},"body":{"interfaces/Column.html":{}}}],["if(this._networkinitialized",{"_index":3778,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["if(this._selectededge",{"_index":3793,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["if(this._selectednode",{"_index":3789,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["if(this.active",{"_index":305,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"classes/BaseProvider.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["if(this.aggregations",{"_index":2325,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["if(this.checkselectionchange(this.currentselection",{"_index":3599,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["if(this.currentselection",{"_index":3556,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["if(this.data",{"_index":2348,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["if(this.edgetype.trigger",{"_index":2042,"title":{},"body":{"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{}}}],["if(this.events",{"_index":3647,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["if(this.facetservice.hasfiltered(this.name",{"_index":2607,"title":{},"body":{"components/MapComponent.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["if(this.formatcontent",{"_index":1658,"title":{},"body":{"interfaces/Column.html":{},"components/DataModalComponent.html":{}}}],["if(this.georecords.length",{"_index":2625,"title":{},"body":{"components/MapComponent.html":{}}}],["if(this.gridapi",{"_index":1583,"title":{},"body":{"interfaces/Column.html":{}}}],["if(this.gridapi?.getselectedrows().length",{"_index":1709,"title":{},"body":{"interfaces/Column.html":{}}}],["if(this.hasedge(edge.id",{"_index":2290,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["if(this.hasfiltered",{"_index":2338,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["if(this.hasnode(node.id",{"_index":2287,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["if(this.initdone",{"_index":3054,"title":{},"body":{"components/ResultTimeline.html":{}}}],["if(this.items.length",{"_index":3028,"title":{},"body":{"components/ResultTimeline.html":{}}}],["if(this.maxdate",{"_index":3507,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["if(this.mindate",{"_index":3505,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["if(this.nodecache.has(node.id",{"_index":2072,"title":{},"body":{"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{}}}],["if(this.nodetype.trigger",{"_index":2105,"title":{},"body":{"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{}}}],["if(this.openedwindow",{"_index":2637,"title":{},"body":{"components/MapComponent.html":{}}}],["if(this.orientation",{"_index":1313,"title":{},"body":{"components/BsTooltipComponent.html":{}}}],["if(this.providerssubscription",{"_index":3761,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["if(this.results",{"_index":1665,"title":{},"body":{"interfaces/Column.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["if(this.searchservice.breadcrumbs",{"_index":3786,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["if(this.searchservice.query.findselect(this.name",{"_index":2683,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["if(this.searchservice.query.select?.length",{"_index":1680,"title":{},"body":{"interfaces/Column.html":{}}}],["if(this.searchservice.query.select[i].facet.startswith(\"grid",{"_index":1683,"title":{},"body":{"interfaces/Column.html":{}}}],["if(this.selectedvalues.has(utils.tosqlvalue(item.value).tolowercase",{"_index":2381,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["if(this.skips[type.aggregation+node.id",{"_index":318,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{}}}],["if(this.tooltipitem",{"_index":2806,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["if(this.viewinit",{"_index":1115,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["if(this.zoombehavior",{"_index":3526,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["if(type",{"_index":239,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{}}}],["if(type.display",{"_index":1922,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["if(type.field",{"_index":548,"title":{},"body":{"classes/BaseProvider.html":{}}}],["if(type.nodetypes.length",{"_index":1904,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["if(type.nodetypes[0",{"_index":1849,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["if(type.parse",{"_index":259,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["if(typeof",{"_index":555,"title":{},"body":{"classes/BaseProvider.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["if(types.length",{"_index":317,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{}}}],["if(update",{"_index":1126,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/CustomData.html":{},"interfaces/HeatmapItem.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["if(utils.isarray(recorddata",{"_index":1860,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["if(utils.isarray(val",{"_index":2364,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["if(utils.isstring(recorddata",{"_index":1869,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["if(utils.isstring(this.record.modified",{"_index":3034,"title":{},"body":{"components/ResultTimeline.html":{}}}],["if(utils.isstring(v",{"_index":2366,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["if(utils.isstring(val",{"_index":2362,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["if(utils.isstring(value",{"_index":1872,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["if(utils.isundefined(x",{"_index":2802,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{}}}],["if(val",{"_index":2361,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["if(value[\"value",{"_index":1874,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["if(values.length",{"_index":278,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{}}}],["if(visibilityaction",{"_index":1696,"title":{},"body":{"interfaces/Column.html":{}}}],["if(year",{"_index":3014,"title":{},"body":{"components/ResultTimeline.html":{}}}],["ifilterparams",{"_index":2456,"title":{},"body":{"components/FacetWrapperComponent.html":{}}}],["ignore",{"_index":1777,"title":{},"body":{"interfaces/Column.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["ignored",{"_index":3102,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["image",{"_index":640,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsNodeInfoCard.html":{},"interfaces/NodeData.html":{}}}],["implementation",{"_index":491,"title":{},"body":{"classes/BaseProvider.html":{},"interfaces/Column.html":{}}}],["implemented",{"_index":1805,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["implements",{"_index":494,"title":{},"body":{"classes/BaseProvider.html":{},"components/BsEdgeInfoCard.html":{},"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/Column.html":{},"interfaces/FacetChartDataPoint.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{},"components/FacetNgxChart.html":{},"interfaces/HeatmapItem.html":{},"components/MapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"components/NgxChart.html":{},"interfaces/NodeData.html":{},"components/ResultTimeline.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{}}}],["import",{"_index":22,"title":{},"body":{"modules/AgGridModule.html":{},"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"components/BsEdgeInfoCard.html":{},"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"modules/BsHeatmapModule.html":{},"components/BsNodeInfoCard.html":{},"modules/BsTimelineModule.html":{},"components/BsTooltipComponent.html":{},"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/Column.html":{},"interfaces/CustomData.html":{},"components/DataModalComponent.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/FacetChartDataPoint.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{},"components/FacetNgxChart.html":{},"components/FacetWrapperComponent.html":{},"modules/FinanceModule.html":{},"modules/FusionChartsModule.html":{},"modules/GoogleMapsModule.html":{},"interfaces/HeatmapItem.html":{},"components/MapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"modules/NetworkModule.html":{},"interfaces/NetworkProvider.html":{},"components/NgxChart.html":{},"modules/NgxChartsModule.html":{},"interfaces/Node.html":{},"interfaces/NodeData.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"components/ResultTimeline.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineEventType.html":{},"components/TimelineLegendComponent.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{},"modules/VisTimelineModule.html":{}}}],["importance",{"_index":542,"title":{},"body":{"classes/BaseProvider.html":{}}}],["important",{"_index":3438,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["imports",{"_index":50,"title":{},"body":{"modules/AgGridModule.html":{},"modules/BsHeatmapModule.html":{},"modules/BsTimelineModule.html":{},"modules/FinanceModule.html":{},"modules/FusionChartsModule.html":{},"modules/GoogleMapsModule.html":{},"modules/NetworkModule.html":{},"modules/NgxChartsModule.html":{},"modules/VisTimelineModule.html":{}}}],["improved",{"_index":3643,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["inactive",{"_index":2154,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["incl",{"_index":2729,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{}}}],["include",{"_index":1794,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"miscellaneous/functions.html":{}}}],["includes",{"_index":415,"title":{},"body":{"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"classes/DynamicEdgeProvider.html":{},"classes/DynamicNodeProvider.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{}}}],["including",{"_index":1834,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["index",{"_index":74,"title":{"index.html":{}},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"components/BsEdgeInfoCard.html":{},"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"components/BsTooltipComponent.html":{},"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/Column.html":{},"interfaces/CustomData.html":{},"components/DataModalComponent.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/FacetChartDataPoint.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{},"components/FacetNgxChart.html":{},"components/FacetWrapperComponent.html":{},"interfaces/HeatmapItem.html":{},"components/MapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"components/NgxChart.html":{},"interfaces/Node.html":{},"interfaces/NodeData.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"components/ResultTimeline.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineEventType.html":{},"components/TimelineLegendComponent.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["individually",{"_index":332,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{}}}],["infinite",{"_index":1459,"title":{},"body":{"interfaces/Column.html":{},"components/FacetWrapperComponent.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["influence",{"_index":1879,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["info",{"_index":14,"title":{},"body":{"modules/AgGridModule.html":{},"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"components/BsEdgeInfoCard.html":{},"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"modules/BsHeatmapModule.html":{},"components/BsNodeInfoCard.html":{},"modules/BsTimelineModule.html":{},"components/BsTooltipComponent.html":{},"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/Column.html":{},"interfaces/CustomData.html":{},"components/DataModalComponent.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/FacetChartDataPoint.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{},"components/FacetNgxChart.html":{},"components/FacetWrapperComponent.html":{},"modules/FinanceModule.html":{},"modules/FusionChartsModule.html":{},"modules/GoogleMapsModule.html":{},"interfaces/HeatmapItem.html":{},"components/MapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"modules/NetworkModule.html":{},"interfaces/NetworkProvider.html":{},"components/NgxChart.html":{},"modules/NgxChartsModule.html":{},"interfaces/Node.html":{},"interfaces/NodeData.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"components/ResultTimeline.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineEventType.html":{},"components/TimelineLegendComponent.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{},"modules/VisTimelineModule.html":{},"coverage.html":{}}}],["information",{"_index":2100,"title":{},"body":{"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{}}}],["infowindow",{"_index":2580,"title":{},"body":{"components/MapComponent.html":{}}}],["inherited",{"_index":396,"title":{},"body":{"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"classes/DynamicEdgeProvider.html":{},"classes/DynamicNodeProvider.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{}}}],["initdone",{"_index":2951,"title":{},"body":{"components/ResultTimeline.html":{}}}],["initial",{"_index":3098,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{}}}],["initialization",{"_index":1622,"title":{},"body":{"interfaces/Column.html":{},"components/MapComponent.html":{}}}],["initialize",{"_index":299,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"components/BsNodeInfoCard.html":{},"interfaces/NodeData.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{}}}],["initialized",{"_index":1725,"title":{},"body":{"interfaces/Column.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{}}}],["inject",{"_index":1986,"title":{},"body":{"components/DataModalComponent.html":{}}}],["inject(modal_model",{"_index":1983,"title":{},"body":{"components/DataModalComponent.html":{}}}],["injectable",{"_index":4003,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["innerheight",{"_index":2685,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["innerwidth",{"_index":2684,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["input",{"_index":663,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"components/BsTooltipComponent.html":{},"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/Column.html":{},"interfaces/FacetChartDataPoint.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{},"components/FacetNgxChart.html":{},"interfaces/HeatmapItem.html":{},"components/MapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"components/NgxChart.html":{},"interfaces/NodeData.html":{},"components/ResultTimeline.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineEventType.html":{},"components/TimelineLegendComponent.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{}}}],["input(\"field",{"_index":833,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{}}}],["inputs",{"_index":654,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"components/BsTooltipComponent.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"components/MapComponent.html":{},"components/NgxChart.html":{},"components/ResultTimeline.html":{},"components/TimelineLegendComponent.html":{}}}],["insert",{"_index":2078,"title":{},"body":{"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{}}}],["inserted",{"_index":1783,"title":{},"body":{"interfaces/Column.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{},"miscellaneous/functions.html":{}}}],["inside",{"_index":1063,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["instance",{"_index":673,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsNodeInfoCard.html":{},"interfaces/CustomData.html":{},"interfaces/NodeData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["instanceof",{"_index":3335,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["instead",{"_index":440,"title":{},"body":{"classes/AsyncRecordsProvider.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"miscellaneous/functions.html":{}}}],["integer",{"_index":2776,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["integers",{"_index":2781,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["interaction",{"_index":1076,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{},"components/MapComponent.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{}}}],["interactions",{"_index":1080,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/HeatmapItem.html":{},"components/MapComponent.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["interface",{"_index":56,"title":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/Column.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/FacetChartDataPoint.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/NetworkContext.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeData.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineEventType.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{}},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/Column.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/FacetChartDataPoint.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{},"components/FacetNgxChart.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"components/NgxChart.html":{},"interfaces/Node.html":{},"interfaces/NodeData.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineEventType.html":{},"components/TimelineLegendComponent.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{},"coverage.html":{}}}],["interfaces",{"_index":58,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/Column.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/FacetChartDataPoint.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/NetworkContext.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeData.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineEventType.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{},"index.html":{}}}],["intermediate",{"_index":471,"title":{},"body":{"classes/AsyncRecordsProvider.html":{},"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["internally",{"_index":2161,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["interval",{"_index":3165,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{}}}],["interval*0.1",{"_index":3170,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["intervals",{"_index":3554,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["intlmodule",{"_index":33,"title":{},"body":{"modules/AgGridModule.html":{},"modules/BsHeatmapModule.html":{},"modules/BsTimelineModule.html":{},"modules/FinanceModule.html":{},"modules/FusionChartsModule.html":{},"modules/GoogleMapsModule.html":{},"modules/NetworkModule.html":{},"modules/NgxChartsModule.html":{},"modules/VisTimelineModule.html":{}}}],["intlservice",{"_index":1326,"title":{},"body":{"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/Column.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"components/NgxChart.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{}}}],["intlsubscription",{"_index":3403,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["invalid/empty",{"_index":3482,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["invisible",{"_index":1947,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["is(sq",{"_index":2445,"title":{},"body":{"components/FacetWrapperComponent.html":{}}}],["isaggregationedgetype",{"_index":3990,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["isaggregationedgetype(et",{"_index":173,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"miscellaneous/functions.html":{}}}],["isdynamicedgetype",{"_index":3999,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["isdynamicedgetype(et",{"_index":2009,"title":{},"body":{"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"miscellaneous/functions.html":{}}}],["isedgevisible(type",{"_index":1921,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["isfilteractive",{"_index":2453,"title":{},"body":{"components/FacetWrapperComponent.html":{}}}],["isfiltered",{"_index":761,"title":{},"body":{"components/BsFacetDate.html":{},"components/FacetNgxChart.html":{}}}],["isfiltered(item",{"_index":798,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/FacetChartDataPoint.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{},"components/FacetNgxChart.html":{}}}],["ishidden",{"_index":2416,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["isnan(val[1",{"_index":2831,"title":{},"body":{"interfaces/MoneyDatum.html":{}}}],["isoltated",{"_index":1965,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["isstructuraledgetype",{"_index":4007,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["isstructuraledgetype(et",{"_index":1821,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"miscellaneous/functions.html":{}}}],["istree",{"_index":2449,"title":{},"body":{"components/FacetWrapperComponent.html":{}}}],["it's",{"_index":2158,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["item",{"_index":155,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/FacetChartDataPoint.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{},"components/FacetNgxChart.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"components/NgxChart.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"components/ResultTimeline.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"miscellaneous/variables.html":{}}}],["item.count",{"_index":289,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"interfaces/FacetChartDataPoint.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{},"components/FacetNgxChart.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyDatum.html":{},"interfaces/NodeData.html":{}}}],["item.date",{"_index":3342,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["item.display!.length",{"_index":2734,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{}}}],["item.display!.substr(1",{"_index":2733,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{}}}],["item.display.split",{"_index":274,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{}}}],["item.node",{"_index":1266,"title":{},"body":{"components/BsNodeInfoCard.html":{},"interfaces/NodeData.html":{}}}],["item.node.context.appservice.getplurallabel(item.node.type.field",{"_index":1257,"title":{},"body":{"components/BsNodeInfoCard.html":{},"interfaces/NodeData.html":{}}}],["item.node.type.field",{"_index":1256,"title":{},"body":{"components/BsNodeInfoCard.html":{},"interfaces/NodeData.html":{}}}],["item.node.type.name",{"_index":1260,"title":{},"body":{"components/BsNodeInfoCard.html":{},"interfaces/NodeData.html":{}}}],["item.start",{"_index":1183,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["item.unsubscribe",{"_index":881,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{}}}],["item.value",{"_index":267,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["item.value.tostring",{"_index":3336,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["item:hover",{"_index":930,"title":{},"body":{"components/BsFacetDate.html":{}}}],["itemclicked",{"_index":981,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["itemclickevent",{"_index":1340,"title":{},"body":{"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"components/NgxChart.html":{}}}],["items",{"_index":107,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"components/ResultTimeline.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/VisEvent.html":{}}}],["items._data[properties.items[0]].start",{"_index":3046,"title":{},"body":{"components/ResultTimeline.html":{}}}],["itemsclickable",{"_index":973,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["itimeseries",{"_index":3259,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["itooltipparams",{"_index":1400,"title":{},"body":{"interfaces/Column.html":{}}}],["itself",{"_index":1889,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["j",{"_index":2066,"title":{},"body":{"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["jmin",{"_index":3270,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["job",{"_index":4067,"title":{},"body":{"miscellaneous/functions.html":{}}}],["jobs",{"_index":273,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{}}}],["join",{"_index":375,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{}}}],["justify",{"_index":3119,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["keep",{"_index":2775,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["keepdanglingnodes",{"_index":2216,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["keeping",{"_index":2593,"title":{},"body":{"components/MapComponent.html":{}}}],["kept",{"_index":2151,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["key",{"_index":582,"title":{},"body":{"classes/BaseProvider.html":{},"interfaces/Column.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["key:string",{"_index":3118,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineEventType.html":{},"components/TimelineLegendComponent.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{}}}],["keyword",{"_index":2655,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{}}}],["l",{"_index":3694,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["label",{"_index":358,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"classes/BaseProvider.html":{},"components/BsNodeInfoCard.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeData.html":{},"interfaces/NodeType.html":{},"miscellaneous/functions.html":{}}}],["label1",{"_index":609,"title":{},"body":{"classes/BaseProvider.html":{}}}],["label2",{"_index":611,"title":{},"body":{"classes/BaseProvider.html":{}}}],["labeldisplay",{"_index":4150,"title":{},"body":{"miscellaneous/variables.html":{}}}],["labels",{"_index":2263,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["labels.text.fill",{"_index":4115,"title":{},"body":{"miscellaneous/variables.html":{}}}],["labels.text.stroke",{"_index":4117,"title":{},"body":{"miscellaneous/variables.html":{}}}],["landscape.man_made",{"_index":4126,"title":{},"body":{"miscellaneous/variables.html":{}}}],["landscape.natural",{"_index":4128,"title":{},"body":{"miscellaneous/variables.html":{}}}],["language",{"_index":2388,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["larry",{"_index":112,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["last",{"_index":3660,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["last.push(event",{"_index":3666,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["lastbin",{"_index":3662,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["lastnode",{"_index":287,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["latitude",{"_index":2557,"title":{},"body":{"components/MapComponent.html":{}}}],["latitudefield",{"_index":2549,"title":{},"body":{"components/MapComponent.html":{}}}],["left",{"_index":635,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"components/BsTooltipComponent.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/NodeData.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{}}}],["left.px",{"_index":1314,"title":{},"body":{"components/BsTooltipComponent.html":{}}}],["legend",{"_index":699,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"components/BsTooltipComponent.html":{},"components/DataModalComponent.html":{},"components/FacetNgxChart.html":{},"components/FacetWrapperComponent.html":{},"components/MapComponent.html":{},"components/NgxChart.html":{},"components/ResultTimeline.html":{},"interfaces/TimelineEventType.html":{},"components/TimelineLegendComponent.html":{}}}],["legend.component",{"_index":1287,"title":{},"body":{"modules/BsTimelineModule.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["legend.component.ts",{"_index":3706,"title":{},"body":{"interfaces/TimelineEventType.html":{},"components/TimelineLegendComponent.html":{},"coverage.html":{}}}],["legend.component.ts:54",{"_index":3715,"title":{},"body":{"components/TimelineLegendComponent.html":{}}}],["legend.component.ts:55",{"_index":3716,"title":{},"body":{"components/TimelineLegendComponent.html":{}}}],["legend.component.ts:56",{"_index":3718,"title":{},"body":{"components/TimelineLegendComponent.html":{}}}],["legend.component.ts:57",{"_index":3719,"title":{},"body":{"components/TimelineLegendComponent.html":{}}}],["legend.component.ts:58",{"_index":3717,"title":{},"body":{"components/TimelineLegendComponent.html":{}}}],["legendevents",{"_index":3121,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["legendorientation",{"_index":3122,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["legendstyles",{"_index":3117,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineEventType.html":{},"components/TimelineLegendComponent.html":{},"interfaces/TimelineRecords.html":{}}}],["legendyoffset",{"_index":3124,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["length",{"_index":3679,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{}}}],["lets",{"_index":1605,"title":{},"body":{"interfaces/Column.html":{}}}],["library",{"_index":2519,"title":{},"body":{"modules/FusionChartsModule.html":{},"interfaces/VisEvent.html":{}}}],["life",{"_index":2131,"title":{},"body":{"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{}}}],["light",{"_index":1004,"title":{},"body":{"components/BsHeatmapComponent.html":{},"components/BsTooltipComponent.html":{},"modules/FusionChartsModule.html":{},"interfaces/HeatmapItem.html":{},"components/MapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{}}}],["lightblue",{"_index":3709,"title":{},"body":{"interfaces/TimelineEventType.html":{},"components/TimelineLegendComponent.html":{}}}],["limit",{"_index":3604,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["limits",{"_index":1811,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["line",{"_index":1141,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventType.html":{},"components/TimelineLegendComponent.html":{},"interfaces/TimelineSeries.html":{}}}],["linestyles",{"_index":3078,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{}}}],["link",{"_index":1818,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["linked",{"_index":4056,"title":{},"body":{"miscellaneous/functions.html":{}}}],["links",{"_index":1963,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["list",{"_index":191,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"components/BsHeatmapComponent.html":{},"interfaces/Column.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"components/FacetWrapperComponent.html":{},"components/MapComponent.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"miscellaneous/functions.html":{}}}],["list.sort((a,b",{"_index":1271,"title":{},"body":{"components/BsNodeInfoCard.html":{},"interfaces/NodeData.html":{}}}],["listen",{"_index":860,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{}}}],["listener",{"_index":3758,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["literal",{"_index":398,"title":{},"body":{"classes/AggregationProvider.html":{},"components/BsNodeInfoCard.html":{},"interfaces/EdgeType.html":{},"interfaces/NodeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineEventType.html":{},"components/TimelineLegendComponent.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"miscellaneous/typealiases.html":{}}}],["locale",{"_index":3406,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["localechange",{"_index":1347,"title":{},"body":{"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"components/NgxChart.html":{}}}],["longitude",{"_index":2561,"title":{},"body":{"components/MapComponent.html":{}}}],["longitudefield",{"_index":2550,"title":{},"body":{"components/MapComponent.html":{}}}],["look",{"_index":1595,"title":{},"body":{"interfaces/Column.html":{}}}],["lot",{"_index":2098,"title":{},"body":{"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{}}}],["m",{"_index":3137,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{}}}],["made",{"_index":3199,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["make",{"_index":1948,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["makedata",{"_index":2346,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["makedatasource",{"_index":1664,"title":{},"body":{"interfaces/Column.html":{}}}],["manage",{"_index":1472,"title":{},"body":{"interfaces/Column.html":{},"interfaces/CustomData.html":{},"components/MapComponent.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["manages",{"_index":2089,"title":{},"body":{"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{}}}],["managing",{"_index":64,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{}}}],["manual",{"_index":131,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"miscellaneous/typealiases.html":{}}}],["manually",{"_index":4092,"title":{},"body":{"miscellaneous/functions.html":{}}}],["many",{"_index":180,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"interfaces/VisEvent.html":{}}}],["map",{"_index":830,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{},"components/MapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["map((results",{"_index":913,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{}}}],["map(agg",{"_index":2331,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["map(col",{"_index":372,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{}}}],["map(d",{"_index":3223,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["map(e",{"_index":1251,"title":{},"body":{"components/BsNodeInfoCard.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeData.html":{},"interfaces/NodeType.html":{}}}],["map(events",{"_index":3186,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["map(item",{"_index":3333,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["map(r",{"_index":3234,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["map(results",{"_index":3255,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["map(x",{"_index":3597,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["map.component",{"_index":2535,"title":{},"body":{"modules/GoogleMapsModule.html":{}}}],["map.component.html",{"_index":2538,"title":{},"body":{"components/MapComponent.html":{}}}],["map.set(node.id",{"_index":2034,"title":{},"body":{"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{}}}],["mapcomponent",{"_index":730,"title":{"components/MapComponent.html":{}},"body":{"components/BsEdgeInfoCard.html":{},"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"components/BsTooltipComponent.html":{},"components/DataModalComponent.html":{},"components/FacetNgxChart.html":{},"components/FacetWrapperComponent.html":{},"modules/GoogleMapsModule.html":{},"components/MapComponent.html":{},"components/NgxChart.html":{},"components/ResultTimeline.html":{},"components/TimelineLegendComponent.html":{},"coverage.html":{},"index.html":{}}}],["mapstyles",{"_index":2543,"title":{},"body":{"components/MapComponent.html":{}}}],["margin",{"_index":974,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"components/ResultTimeline.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"miscellaneous/variables.html":{}}}],["marker",{"_index":2571,"title":{},"body":{"components/MapComponent.html":{}}}],["markers",{"_index":2591,"title":{},"body":{"components/MapComponent.html":{}}}],["marks",{"_index":2780,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["matching",{"_index":55,"title":{},"body":{"modules/AgGridModule.html":{},"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"components/BsEdgeInfoCard.html":{},"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"modules/BsHeatmapModule.html":{},"components/BsNodeInfoCard.html":{},"modules/BsTimelineModule.html":{},"components/BsTooltipComponent.html":{},"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/Column.html":{},"interfaces/CustomData.html":{},"components/DataModalComponent.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/FacetChartDataPoint.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{},"components/FacetNgxChart.html":{},"components/FacetWrapperComponent.html":{},"modules/FinanceModule.html":{},"modules/FusionChartsModule.html":{},"modules/GoogleMapsModule.html":{},"interfaces/HeatmapItem.html":{},"components/MapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"modules/NetworkModule.html":{},"interfaces/NetworkProvider.html":{},"components/NgxChart.html":{},"modules/NgxChartsModule.html":{},"interfaces/Node.html":{},"interfaces/NodeData.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"components/ResultTimeline.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineEventType.html":{},"components/TimelineLegendComponent.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{},"modules/VisTimelineModule.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["math.floor(event.date.gettime",{"_index":3664,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["math.floor(last[0].date.gettime",{"_index":3663,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["math.floor(this.innerwidth",{"_index":3649,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["math.max((this.innerheight",{"_index":3689,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["math.min(10",{"_index":3688,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["math.round(this.height",{"_index":3577,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["math.round(this.width",{"_index":3575,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["max",{"_index":1079,"title":{},"body":{"components/BsHeatmapComponent.html":{},"components/DataModalComponent.html":{},"interfaces/HeatmapItem.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{}}}],["max_dates",{"_index":2956,"title":{},"body":{"components/ResultTimeline.html":{}}}],["max_year",{"_index":2957,"title":{},"body":{"components/ResultTimeline.html":{}}}],["maxaggregationdate",{"_index":3107,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["maxdate",{"_index":3101,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{}}}],["maxheight",{"_index":2983,"title":{},"body":{"components/ResultTimeline.html":{},"miscellaneous/variables.html":{}}}],["maximum",{"_index":3089,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{}}}],["maxlat",{"_index":2610,"title":{},"body":{"components/MapComponent.html":{}}}],["maxlng",{"_index":2614,"title":{},"body":{"components/MapComponent.html":{}}}],["maxnmonths",{"_index":3088,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["maxx",{"_index":975,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["maxy",{"_index":976,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["maxzoomdays",{"_index":3111,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{}}}],["meaning",{"_index":4076,"title":{},"body":{"miscellaneous/functions.html":{}}}],["means",{"_index":120,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"miscellaneous/typealiases.html":{}}}],["measured",{"_index":3638,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["menu",{"_index":2314,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["merge",{"_index":479,"title":{},"body":{"classes/AsyncRecordsProvider.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["merge(dataset",{"_index":2239,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["merged",{"_index":545,"title":{},"body":{"classes/BaseProvider.html":{},"interfaces/CustomData.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["mergedatasets(datasets",{"_index":3770,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["mergedevents",{"_index":3131,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["mergedtimeseries",{"_index":3130,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["merges",{"_index":1902,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/VisEvent.html":{}}}],["merging",{"_index":2152,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["metadata",{"_index":66,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"components/BsEdgeInfoCard.html":{},"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"components/BsTooltipComponent.html":{},"interfaces/CustomData.html":{},"components/DataModalComponent.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"components/FacetNgxChart.html":{},"components/FacetWrapperComponent.html":{},"components/MapComponent.html":{},"components/NgxChart.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"components/ResultTimeline.html":{},"interfaces/StructuralEdgeType.html":{},"components/TimelineLegendComponent.html":{},"miscellaneous/functions.html":{}}}],["method",{"_index":363,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"components/BsEdgeInfoCard.html":{},"components/BsNodeInfoCard.html":{},"interfaces/Column.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeData.html":{},"interfaces/NodeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{}}}],["methods",{"_index":381,"title":{},"body":{"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"components/BsEdgeInfoCard.html":{},"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"components/DataModalComponent.html":{},"classes/DynamicEdgeProvider.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"components/FacetWrapperComponent.html":{},"components/MapComponent.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"components/NgxChart.html":{},"classes/RecordsProvider.html":{},"components/ResultTimeline.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["microsoft",{"_index":1827,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"miscellaneous/functions.html":{}}}],["middle",{"_index":564,"title":{},"body":{"classes/BaseProvider.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["min",{"_index":3269,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["min_dates",{"_index":2958,"title":{},"body":{"components/ResultTimeline.html":{}}}],["min_year",{"_index":2959,"title":{},"body":{"components/ResultTimeline.html":{}}}],["minaggregationdate",{"_index":3106,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["mindate",{"_index":3100,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{}}}],["mindiff",{"_index":3512,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["minheight",{"_index":2981,"title":{},"body":{"components/ResultTimeline.html":{},"miscellaneous/variables.html":{}}}],["minimum",{"_index":3504,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["minlat",{"_index":2608,"title":{},"body":{"components/MapComponent.html":{}}}],["minlng",{"_index":2612,"title":{},"body":{"components/MapComponent.html":{}}}],["minus",{"_index":849,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/FacetChartDataPoint.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{},"components/FacetNgxChart.html":{},"components/MapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/VisEvent.html":{}}}],["minzoomdays",{"_index":3109,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{}}}],["misc",{"_index":1085,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["miscellaneous",{"_index":4039,"title":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["missing",{"_index":2294,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["mistake",{"_index":218,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{}}}],["mm",{"_index":3352,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["modal",{"_index":1969,"title":{},"body":{"components/DataModalComponent.html":{}}}],["modal'},{'name",{"_index":723,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"components/BsTooltipComponent.html":{},"components/DataModalComponent.html":{},"components/FacetNgxChart.html":{},"components/FacetWrapperComponent.html":{},"components/MapComponent.html":{},"components/NgxChart.html":{},"components/ResultTimeline.html":{},"components/TimelineLegendComponent.html":{}}}],["modal.component",{"_index":47,"title":{},"body":{"modules/AgGridModule.html":{},"interfaces/Column.html":{}}}],["modal.component.html",{"_index":1972,"title":{},"body":{"components/DataModalComponent.html":{}}}],["modal.component.ts",{"_index":1968,"title":{},"body":{"components/DataModalComponent.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["modal.component.ts:30",{"_index":1980,"title":{},"body":{"components/DataModalComponent.html":{}}}],["modal.component.ts:31",{"_index":1981,"title":{},"body":{"components/DataModalComponent.html":{}}}],["modal.component.ts:32",{"_index":1977,"title":{},"body":{"components/DataModalComponent.html":{}}}],["modal.component.ts:35",{"_index":1984,"title":{},"body":{"components/DataModalComponent.html":{}}}],["modal.component.ts:36",{"_index":1985,"title":{},"body":{"components/DataModalComponent.html":{}}}],["modal.component.ts:37",{"_index":1982,"title":{},"body":{"components/DataModalComponent.html":{}}}],["modal.component.ts:42",{"_index":1978,"title":{},"body":{"components/DataModalComponent.html":{}}}],["modal.component.ts:53",{"_index":1979,"title":{},"body":{"components/DataModalComponent.html":{}}}],["modal_model",{"_index":1988,"title":{},"body":{"components/DataModalComponent.html":{}}}],["modalservice",{"_index":1396,"title":{},"body":{"interfaces/Column.html":{}}}],["mode",{"_index":119,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"interfaces/Column.html":{},"components/MapComponent.html":{},"miscellaneous/typealiases.html":{}}}],["model",{"_index":1468,"title":{},"body":{"interfaces/Column.html":{},"components/DataModalComponent.html":{},"components/FacetWrapperComponent.html":{}}}],["model.defaultstate",{"_index":1619,"title":{},"body":{"interfaces/Column.html":{}}}],["model.formatcontent",{"_index":1990,"title":{},"body":{"components/DataModalComponent.html":{}}}],["model.name",{"_index":2929,"title":{},"body":{"components/NgxChart.html":{}}}],["model.state",{"_index":1618,"title":{},"body":{"interfaces/Column.html":{}}}],["model.value",{"_index":2930,"title":{},"body":{"components/NgxChart.html":{}}}],["model[col.field",{"_index":1603,"title":{},"body":{"interfaces/Column.html":{}}}],["models",{"_index":95,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"components/BsEdgeInfoCard.html":{},"components/BsNodeInfoCard.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/NodeData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/VisEvent.html":{}}}],["models.ts",{"_index":2133,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"coverage.html":{}}}],["models.ts:100",{"_index":2901,"title":{},"body":{"interfaces/NetworkProvider.html":{}}}],["models.ts:103",{"_index":2898,"title":{},"body":{"interfaces/NetworkProvider.html":{}}}],["models.ts:106",{"_index":2896,"title":{},"body":{"interfaces/NetworkProvider.html":{}}}],["models.ts:109",{"_index":2895,"title":{},"body":{"interfaces/NetworkProvider.html":{}}}],["models.ts:112",{"_index":2900,"title":{},"body":{"interfaces/NetworkProvider.html":{}}}],["models.ts:128",{"_index":2856,"title":{},"body":{"interfaces/NetworkContext.html":{}}}],["models.ts:142",{"_index":2882,"title":{},"body":{"classes/NetworkDataset.html":{}}}],["models.ts:147",{"_index":2881,"title":{},"body":{"classes/NetworkDataset.html":{}}}],["models.ts:152",{"_index":2876,"title":{},"body":{"classes/NetworkDataset.html":{}}}],["models.ts:157",{"_index":2873,"title":{},"body":{"classes/NetworkDataset.html":{}}}],["models.ts:162",{"_index":2878,"title":{},"body":{"classes/NetworkDataset.html":{}}}],["models.ts:167",{"_index":2875,"title":{},"body":{"classes/NetworkDataset.html":{}}}],["models.ts:172",{"_index":2880,"title":{},"body":{"classes/NetworkDataset.html":{}}}],["models.ts:177",{"_index":2879,"title":{},"body":{"classes/NetworkDataset.html":{}}}],["models.ts:182",{"_index":2877,"title":{},"body":{"classes/NetworkDataset.html":{}}}],["models.ts:187",{"_index":2874,"title":{},"body":{"classes/NetworkDataset.html":{}}}],["models.ts:192",{"_index":2870,"title":{},"body":{"classes/NetworkDataset.html":{}}}],["models.ts:198",{"_index":2868,"title":{},"body":{"classes/NetworkDataset.html":{}}}],["models.ts:203",{"_index":2867,"title":{},"body":{"classes/NetworkDataset.html":{}}}],["models.ts:213",{"_index":2884,"title":{},"body":{"classes/NetworkDataset.html":{}}}],["models.ts:218",{"_index":2869,"title":{},"body":{"classes/NetworkDataset.html":{}}}],["models.ts:230",{"_index":2871,"title":{},"body":{"classes/NetworkDataset.html":{}}}],["models.ts:235",{"_index":2872,"title":{},"body":{"classes/NetworkDataset.html":{}}}],["models.ts:251",{"_index":2883,"title":{},"body":{"classes/NetworkDataset.html":{}}}],["models.ts:318",{"_index":2885,"title":{},"body":{"classes/NetworkDataset.html":{}}}],["models.ts:85",{"_index":2897,"title":{},"body":{"interfaces/NetworkProvider.html":{}}}],["models.ts:88",{"_index":2894,"title":{},"body":{"interfaces/NetworkProvider.html":{}}}],["models.ts:91",{"_index":2899,"title":{},"body":{"interfaces/NetworkProvider.html":{}}}],["models.ts:94",{"_index":2903,"title":{},"body":{"interfaces/NetworkProvider.html":{}}}],["models.ts:97",{"_index":2902,"title":{},"body":{"interfaces/NetworkProvider.html":{}}}],["modelupdatedevent",{"_index":1413,"title":{},"body":{"interfaces/Column.html":{}}}],["modes",{"_index":125,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"miscellaneous/typealiases.html":{}}}],["modified",{"_index":783,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{},"components/ResultTimeline.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["modifying",{"_index":2241,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{}}}],["module",{"_index":0,"title":{"modules/AgGridModule.html":{},"modules/BsHeatmapModule.html":{},"modules/BsTimelineModule.html":{},"modules/FinanceModule.html":{},"modules/FusionChartsModule.html":{},"modules/GoogleMapsModule.html":{},"modules/NetworkModule.html":{},"modules/NgxChartsModule.html":{},"modules/VisTimelineModule.html":{}},"body":{"modules/BsTimelineModule.html":{}}}],["module.ts",{"_index":3904,"title":{},"body":{"modules/VisTimelineModule.html":{}}}],["modules",{"_index":2,"title":{"modules.html":{}},"body":{"modules/AgGridModule.html":{},"modules/BsHeatmapModule.html":{},"modules/BsTimelineModule.html":{},"modules/FinanceModule.html":{},"modules/FusionChartsModule.html":{},"modules/GoogleMapsModule.html":{},"modules/NetworkModule.html":{},"modules/NgxChartsModule.html":{},"modules/VisTimelineModule.html":{},"index.html":{},"modules.html":{}}}],["moment",{"_index":1798,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"components/ResultTimeline.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["moment(date).format('ll",{"_index":3027,"title":{},"body":{"components/ResultTimeline.html":{}}}],["moment(dateobj.display).todate",{"_index":3022,"title":{},"body":{"components/ResultTimeline.html":{}}}],["moment(val.length",{"_index":3337,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["money",{"_index":733,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"components/BsTooltipComponent.html":{},"components/DataModalComponent.html":{},"components/FacetNgxChart.html":{},"components/FacetWrapperComponent.html":{},"modules/FinanceModule.html":{},"components/MapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"components/NgxChart.html":{},"components/ResultTimeline.html":{},"components/TimelineLegendComponent.html":{}}}],["moneyaggregation",{"_index":2661,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{}}}],["moneycloudcomponent",{"_index":732,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"components/BsTooltipComponent.html":{},"components/DataModalComponent.html":{},"components/FacetNgxChart.html":{},"components/FacetWrapperComponent.html":{},"modules/FinanceModule.html":{},"components/MapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"components/NgxChart.html":{},"components/ResultTimeline.html":{},"components/TimelineLegendComponent.html":{},"coverage.html":{},"index.html":{}}}],["moneyclouddatum",{"_index":2645,"title":{"interfaces/MoneyCloudDatum.html":{}},"body":{"interfaces/MoneyCloudDatum.html":{},"coverage.html":{}}}],["moneycolumn",{"_index":2812,"title":{},"body":{"interfaces/MoneyDatum.html":{}}}],["moneydatum",{"_index":2807,"title":{"interfaces/MoneyDatum.html":{}},"body":{"interfaces/MoneyDatum.html":{},"coverage.html":{}}}],["moneytimelinecomponent",{"_index":735,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"components/BsTooltipComponent.html":{},"components/DataModalComponent.html":{},"components/FacetNgxChart.html":{},"components/FacetWrapperComponent.html":{},"modules/FinanceModule.html":{},"components/MapComponent.html":{},"interfaces/MoneyDatum.html":{},"components/NgxChart.html":{},"components/ResultTimeline.html":{},"components/TimelineLegendComponent.html":{},"coverage.html":{},"index.html":{}}}],["moneyvaluecolumn",{"_index":2658,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{}}}],["mono",{"_index":1857,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["month",{"_index":3348,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["months",{"_index":3090,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["more",{"_index":1425,"title":{},"body":{"interfaces/Column.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["mouse",{"_index":1044,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["mouseevent",{"_index":1041,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["move",{"_index":680,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsNodeInfoCard.html":{},"interfaces/NodeData.html":{}}}],["moved",{"_index":3581,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["ms",{"_index":1075,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["msg#facet.clearselects",{"_index":2321,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"components/MapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/VisEvent.html":{}}}],["msg#facet.date.custom",{"_index":929,"title":{},"body":{"components/BsFacetDate.html":{}}}],["msg#facet.filters.clear",{"_index":851,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{}}}],["msg#googlemaps.filterarea",{"_index":2606,"title":{},"body":{"components/MapComponent.html":{}}}],["msg#grid.autosize",{"_index":1636,"title":{},"body":{"interfaces/Column.html":{}}}],["msg#grid.autosizetitle",{"_index":1637,"title":{},"body":{"interfaces/Column.html":{}}}],["msg#grid.columns",{"_index":1488,"title":{},"body":{"interfaces/Column.html":{}}}],["msg#grid.copy",{"_index":1640,"title":{},"body":{"interfaces/Column.html":{}}}],["msg#grid.copytitle",{"_index":1641,"title":{},"body":{"interfaces/Column.html":{}}}],["msg#grid.download",{"_index":1644,"title":{},"body":{"interfaces/Column.html":{}}}],["msg#grid.downloadtitle",{"_index":1645,"title":{},"body":{"interfaces/Column.html":{}}}],["msg#grid.formatdata",{"_index":1648,"title":{},"body":{"interfaces/Column.html":{},"components/DataModalComponent.html":{}}}],["msg#grid.formatdatatitle",{"_index":1649,"title":{},"body":{"interfaces/Column.html":{}}}],["msg#grid.reset",{"_index":1631,"title":{},"body":{"interfaces/Column.html":{}}}],["msg#grid.resettitle",{"_index":1632,"title":{},"body":{"interfaces/Column.html":{}}}],["msg#heatmap.showing",{"_index":1185,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["msg#heatmap.tooltip",{"_index":1192,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["msg#network.actions.active",{"_index":514,"title":{},"body":{"classes/BaseProvider.html":{}}}],["msg#network.actions.collapsemeta",{"_index":1959,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["msg#network.actions.expandmeta",{"_index":1956,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["msg#network.actions.fetchmoreall",{"_index":343,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{}}}],["msg#network.actions.fetchmorealltext",{"_index":345,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{}}}],["msg#network.actions.inactive",{"_index":515,"title":{},"body":{"classes/BaseProvider.html":{}}}],["msg#network.actions.providers",{"_index":3797,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["msg#network.actions.refresh",{"_index":3748,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["msg#network.actions.reset",{"_index":523,"title":{},"body":{"classes/BaseProvider.html":{}}}],["msg#network.actions.resettitle",{"_index":524,"title":{},"body":{"classes/BaseProvider.html":{}}}],["msg#network.actions.toggle",{"_index":516,"title":{},"body":{"classes/BaseProvider.html":{}}}],["msg#network.infocards.aggregation",{"_index":691,"title":{},"body":{"components/BsEdgeInfoCard.html":{}}}],["msg#network.infocards.count",{"_index":688,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsNodeInfoCard.html":{}}}],["msg#network.infocards.record",{"_index":693,"title":{},"body":{"components/BsEdgeInfoCard.html":{}}}],["msgfrom",{"_index":1895,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["msgto",{"_index":1896,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["multi",{"_index":1858,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["multiple",{"_index":1443,"title":{},"body":{"interfaces/Column.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"components/MapComponent.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["multivalued",{"_index":2417,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["mutable",{"_index":2149,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["mutate",{"_index":2112,"title":{},"body":{"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{}}}],["mutatenodes(nodes",{"_index":2120,"title":{},"body":{"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{}}}],["mutates",{"_index":2119,"title":{},"body":{"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{}}}],["mutation",{"_index":2124,"title":{},"body":{"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/VisEvent.html":{}}}],["muted",{"_index":697,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsNodeInfoCard.html":{}}}],["n.visible",{"_index":2186,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["name",{"_index":144,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"components/BsEdgeInfoCard.html":{},"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"components/BsTooltipComponent.html":{},"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/Column.html":{},"interfaces/CustomData.html":{},"components/DataModalComponent.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/FacetChartDataPoint.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{},"components/FacetNgxChart.html":{},"components/FacetWrapperComponent.html":{},"components/MapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"components/NgxChart.html":{},"interfaces/Node.html":{},"interfaces/NodeData.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"components/ResultTimeline.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineEventType.html":{},"components/TimelineLegendComponent.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{},"miscellaneous/functions.html":{}}}],["names",{"_index":1525,"title":{},"body":{"interfaces/Column.html":{}}}],["native",{"_index":2702,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["nbins",{"_index":3648,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["necessarily",{"_index":1518,"title":{},"body":{"interfaces/Column.html":{}}}],["necessary",{"_index":2015,"title":{},"body":{"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{}}}],["need",{"_index":319,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"modules/BsTimelineModule.html":{},"components/FacetWrapperComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{}}}],["needs",{"_index":2498,"title":{},"body":{"components/FacetWrapperComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["neighbor",{"_index":477,"title":{},"body":{"classes/AsyncRecordsProvider.html":{},"components/BsNodeInfoCard.html":{},"interfaces/CustomData.html":{},"classes/DynamicEdgeProvider.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeData.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["neighbor.count",{"_index":2224,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["neighbor.key",{"_index":1274,"title":{},"body":{"components/BsNodeInfoCard.html":{}}}],["neighbor.visible",{"_index":1938,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["neighbors",{"_index":1234,"title":{},"body":{"components/BsNodeInfoCard.html":{},"interfaces/CustomData.html":{},"interfaces/NodeData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["neighborsneighbors",{"_index":1935,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["network",{"_index":94,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"components/BsEdgeInfoCard.html":{},"components/BsNodeInfoCard.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeData.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/VisEvent.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["network'},{'name",{"_index":737,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"components/BsTooltipComponent.html":{},"components/DataModalComponent.html":{},"components/FacetNgxChart.html":{},"components/FacetWrapperComponent.html":{},"components/MapComponent.html":{},"components/NgxChart.html":{},"components/ResultTimeline.html":{},"components/TimelineLegendComponent.html":{}}}],["network.component",{"_index":2892,"title":{},"body":{"modules/NetworkModule.html":{}}}],["network.component.html",{"_index":3725,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["network/.../aggregation",{"_index":4041,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["network/.../dynamic",{"_index":4042,"title":{},"body":{"miscellaneous/functions.html":{}}}],["network/.../network",{"_index":4040,"title":{},"body":{"miscellaneous/functions.html":{}}}],["network/.../network.component.ts",{"_index":4105,"title":{},"body":{"miscellaneous/variables.html":{}}}],["network/.../records",{"_index":4043,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["network/docs/network",{"_index":3723,"title":{},"body":{"interfaces/VisEvent.html":{},"miscellaneous/variables.html":{}}}],["network/docs/network/edges.html",{"_index":2147,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["network/docs/network/nodes.html",{"_index":2142,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["network/edge",{"_index":627,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"coverage.html":{}}}],["network/network",{"_index":2132,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["network/network.component.ts",{"_index":3721,"title":{},"body":{"interfaces/VisEvent.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["network/network.module.ts",{"_index":2890,"title":{},"body":{"modules/NetworkModule.html":{}}}],["network/node",{"_index":1233,"title":{},"body":{"components/BsNodeInfoCard.html":{},"interfaces/NodeData.html":{},"coverage.html":{}}}],["network/providers/aggregation",{"_index":59,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["network/providers/async",{"_index":436,"title":{},"body":{"classes/AsyncRecordsProvider.html":{},"coverage.html":{}}}],["network/providers/base",{"_index":490,"title":{},"body":{"classes/BaseProvider.html":{},"coverage.html":{}}}],["network/providers/dynamic",{"_index":1998,"title":{},"body":{"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["network/providers/provider",{"_index":4001,"title":{},"body":{"coverage.html":{}}}],["network/providers/records",{"_index":1790,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["network/providers/selected",{"_index":3058,"title":{},"body":{"classes/SelectedRecordsProvider.html":{},"coverage.html":{}}}],["networkcomponent",{"_index":736,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"components/BsTooltipComponent.html":{},"components/DataModalComponent.html":{},"components/FacetNgxChart.html":{},"components/FacetWrapperComponent.html":{},"components/MapComponent.html":{},"modules/NetworkModule.html":{},"components/NgxChart.html":{},"components/ResultTimeline.html":{},"components/TimelineLegendComponent.html":{},"interfaces/VisEvent.html":{},"coverage.html":{},"index.html":{}}}],["networkcontext",{"_index":93,"title":{"interfaces/NetworkContext.html":{}},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"interfaces/CustomData.html":{},"classes/DynamicEdgeProvider.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/VisEvent.html":{},"coverage.html":{}}}],["networkdataset",{"_index":92,"title":{"classes/NetworkDataset.html":{}},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/VisEvent.html":{},"coverage.html":{}}}],["networkinitialized",{"_index":3807,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["networkinstance",{"_index":676,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsNodeInfoCard.html":{},"interfaces/NodeData.html":{}}}],["networkinstance.focus(node.id",{"_index":678,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsNodeInfoCard.html":{},"interfaces/NodeData.html":{}}}],["networkinstance.selectnodes([node.id",{"_index":682,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsNodeInfoCard.html":{},"interfaces/NodeData.html":{}}}],["networkmodule",{"_index":2886,"title":{"modules/NetworkModule.html":{}},"body":{"modules/NetworkModule.html":{},"index.html":{},"modules.html":{}}}],["networkprovider",{"_index":291,"title":{"interfaces/NetworkProvider.html":{}},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/VisEvent.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["networkservice",{"_index":674,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsNodeInfoCard.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeData.html":{},"interfaces/NodeType.html":{},"interfaces/VisEvent.html":{}}}],["new",{"_index":149,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/Column.html":{},"interfaces/CustomData.html":{},"components/DataModalComponent.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/FacetChartDataPoint.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{},"components/FacetNgxChart.html":{},"interfaces/HeatmapItem.html":{},"components/MapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"components/NgxChart.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"components/ResultTimeline.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["newmodel",{"_index":1769,"title":{},"body":{"interfaces/Column.html":{}}}],["newrows",{"_index":1743,"title":{},"body":{"interfaces/Column.html":{}}}],["newrows?.find(row",{"_index":1749,"title":{},"body":{"interfaces/Column.html":{}}}],["newrows?.foreach(row",{"_index":1753,"title":{},"body":{"interfaces/Column.html":{}}}],["newselection",{"_index":3594,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["next",{"_index":458,"title":{},"body":{"classes/AsyncRecordsProvider.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["ng",{"_index":1199,"title":{},"body":{"components/BsHeatmapComponent.html":{},"components/FacetWrapperComponent.html":{}}}],["ngafterviewinit",{"_index":966,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["ngdocheck",{"_index":1380,"title":{},"body":{"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"components/NgxChart.html":{}}}],["ngmodule",{"_index":23,"title":{},"body":{"modules/AgGridModule.html":{},"modules/BsHeatmapModule.html":{},"modules/BsTimelineModule.html":{},"modules/FinanceModule.html":{},"modules/FusionChartsModule.html":{},"modules/GoogleMapsModule.html":{},"modules/NetworkModule.html":{},"modules/NgxChartsModule.html":{},"modules/VisTimelineModule.html":{}}}],["ngonchanges",{"_index":653,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"components/FacetNgxChart.html":{},"interfaces/HeatmapItem.html":{},"components/MapComponent.html":{},"components/NgxChart.html":{},"interfaces/NodeData.html":{},"components/ResultTimeline.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["ngonchanges(changes",{"_index":800,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/Column.html":{},"interfaces/FacetChartDataPoint.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{},"components/FacetNgxChart.html":{},"components/MapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"components/NgxChart.html":{},"components/ResultTimeline.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{}}}],["ngonchanges(changes:simplechanges",{"_index":2986,"title":{},"body":{"components/ResultTimeline.html":{}}}],["ngondestroy",{"_index":762,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/Column.html":{},"interfaces/FacetChartDataPoint.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{},"components/FacetNgxChart.html":{},"components/NgxChart.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{}}}],["ngoninit",{"_index":763,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/Column.html":{},"components/DataModalComponent.html":{},"interfaces/FacetChartDataPoint.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{},"components/FacetNgxChart.html":{},"components/NgxChart.html":{}}}],["ngx",{"_index":725,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"components/BsTooltipComponent.html":{},"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"components/DataModalComponent.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"components/FacetWrapperComponent.html":{},"components/MapComponent.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"modules/NetworkModule.html":{},"interfaces/NetworkProvider.html":{},"components/NgxChart.html":{},"modules/NgxChartsModule.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"components/ResultTimeline.html":{},"components/TimelineLegendComponent.html":{},"interfaces/VisEvent.html":{},"modules/VisTimelineModule.html":{},"coverage.html":{},"dependencies.html":{}}}],["ngxchart",{"_index":738,"title":{"components/NgxChart.html":{}},"body":{"components/BsEdgeInfoCard.html":{},"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"components/BsTooltipComponent.html":{},"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"components/DataModalComponent.html":{},"components/FacetNgxChart.html":{},"components/FacetWrapperComponent.html":{},"components/MapComponent.html":{},"components/NgxChart.html":{},"modules/NgxChartsModule.html":{},"components/ResultTimeline.html":{},"components/TimelineLegendComponent.html":{},"coverage.html":{},"index.html":{}}}],["ngxchartsmodule",{"_index":2934,"title":{"modules/NgxChartsModule.html":{}},"body":{"modules/NgxChartsModule.html":{},"index.html":{},"modules.html":{}}}],["nmonths",{"_index":3261,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["node",{"_index":89,"title":{"interfaces/Node.html":{}},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"components/BsEdgeInfoCard.html":{},"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"components/BsTooltipComponent.html":{},"interfaces/CustomData.html":{},"components/DataModalComponent.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"components/FacetNgxChart.html":{},"components/FacetWrapperComponent.html":{},"components/MapComponent.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"modules/NetworkModule.html":{},"interfaces/NetworkProvider.html":{},"components/NgxChart.html":{},"interfaces/Node.html":{},"interfaces/NodeData.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"components/ResultTimeline.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"components/TimelineLegendComponent.html":{},"interfaces/VisEvent.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["node's",{"_index":4085,"title":{},"body":{"miscellaneous/functions.html":{}}}],["node.context.name",{"_index":592,"title":{},"body":{"classes/BaseProvider.html":{}}}],["node.context.networkservice['networks'][node.context.name",{"_index":677,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsNodeInfoCard.html":{},"interfaces/NodeData.html":{}}}],["node.context.searchservice.query.addselect(expr",{"_index":591,"title":{},"body":{"classes/BaseProvider.html":{}}}],["node.context.searchservice.search",{"_index":593,"title":{},"body":{"classes/BaseProvider.html":{}}}],["node.context.select(node",{"_index":685,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsNodeInfoCard.html":{},"interfaces/NodeData.html":{}}}],["node.count",{"_index":698,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["node.data.id",{"_index":1500,"title":{},"body":{"interfaces/Column.html":{}}}],["node.id",{"_index":1886,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["node.id.substr(node.type.name.length+1",{"_index":536,"title":{},"body":{"classes/BaseProvider.html":{}}}],["node.isselected",{"_index":1787,"title":{},"body":{"interfaces/Column.html":{}}}],["node.label",{"_index":359,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"classes/BaseProvider.html":{},"components/BsEdgeInfoCard.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{}}}],["node.provider",{"_index":586,"title":{},"body":{"classes/BaseProvider.html":{}}}],["node.record",{"_index":1864,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["node.record[type.field",{"_index":1855,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["node.setselected(event.type",{"_index":1501,"title":{},"body":{"interfaces/Column.html":{}}}],["node.setselected(true",{"_index":1788,"title":{},"body":{"interfaces/Column.html":{}}}],["node.type",{"_index":316,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["node.type.field",{"_index":587,"title":{},"body":{"classes/BaseProvider.html":{}}}],["node.visible",{"_index":1883,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["node1.id",{"_index":530,"title":{},"body":{"classes/BaseProvider.html":{}}}],["node2",{"_index":529,"title":{},"body":{"classes/BaseProvider.html":{}}}],["node2.id",{"_index":532,"title":{},"body":{"classes/BaseProvider.html":{}}}],["node['icon']['code",{"_index":695,"title":{},"body":{"components/BsEdgeInfoCard.html":{}}}],["node[\\'icon\\'][\\'code",{"_index":707,"title":{},"body":{"components/BsEdgeInfoCard.html":{}}}],["nodecache",{"_index":2023,"title":{},"body":{"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{}}}],["nodeclicked",{"_index":3730,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["nodedata",{"_index":1235,"title":{"interfaces/NodeData.html":{}},"body":{"components/BsNodeInfoCard.html":{},"interfaces/NodeData.html":{},"coverage.html":{}}}],["nodedata.count",{"_index":1277,"title":{},"body":{"components/BsNodeInfoCard.html":{}}}],["nodedata.node.label",{"_index":1276,"title":{},"body":{"components/BsNodeInfoCard.html":{}}}],["nodedata.node['icon']['code",{"_index":1275,"title":{},"body":{"components/BsNodeInfoCard.html":{}}}],["nodedata.node[\\'icon\\'][\\'code",{"_index":1278,"title":{},"body":{"components/BsNodeInfoCard.html":{}}}],["nodefrom",{"_index":594,"title":{},"body":{"classes/BaseProvider.html":{}}}],["nodefrom.label",{"_index":610,"title":{},"body":{"classes/BaseProvider.html":{}}}],["nodefrom.type.field",{"_index":606,"title":{},"body":{"classes/BaseProvider.html":{}}}],["nodeid",{"_index":2222,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["nodeidx",{"_index":2170,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["nodeoptions",{"_index":2143,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["nodes",{"_index":150,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/VisEvent.html":{},"miscellaneous/functions.html":{}}}],["nodes.foreach(node",{"_index":2198,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["nodes.remove(nodes.get().filter(n",{"_index":2280,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["nodes.update(this.getvisiblenodes",{"_index":2284,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["nodes/edges",{"_index":1892,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["nodes[i].getcomputedtextlength",{"_index":1175,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["nodeto",{"_index":596,"title":{},"body":{"classes/BaseProvider.html":{}}}],["nodeto.label",{"_index":612,"title":{},"body":{"classes/BaseProvider.html":{}}}],["nodeto.type.field",{"_index":607,"title":{},"body":{"classes/BaseProvider.html":{}}}],["nodetpl",{"_index":3738,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["nodetype",{"_index":445,"title":{"interfaces/NodeType.html":{}},"body":{"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"interfaces/CustomData.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"coverage.html":{}}}],["nodetypes",{"_index":2146,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["nodetypes[1",{"_index":154,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{}}}],["none",{"_index":1223,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventType.html":{},"components/TimelineLegendComponent.html":{},"interfaces/TimelineSeries.html":{}}}],["normalize",{"_index":2728,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{}}}],["north",{"_index":2633,"title":{},"body":{"components/MapComponent.html":{}}}],["note",{"_index":543,"title":{},"body":{"classes/BaseProvider.html":{},"components/BsHeatmapComponent.html":{},"interfaces/Column.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/HeatmapItem.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{}}}],["nothing",{"_index":3667,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["notify",{"_index":1774,"title":{},"body":{"interfaces/Column.html":{},"interfaces/MoneyDatum.html":{},"interfaces/VisEvent.html":{}}}],["now",{"_index":3809,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["nticks",{"_index":3574,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["null",{"_index":1469,"title":{},"body":{"interfaces/Column.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["null/undefined",{"_index":3673,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["number",{"_index":164,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"components/BsTooltipComponent.html":{},"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/Column.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{},"interfaces/HeatmapItem.html":{},"components/MapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"components/NgxChart.html":{},"interfaces/Node.html":{},"interfaces/NodeData.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"components/ResultTimeline.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineEventType.html":{},"components/TimelineLegendComponent.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{}}}],["number.isinteger(tick",{"_index":2774,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["number.max_value",{"_index":3551,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["number.min_value",{"_index":3550,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["numbercardmodule",{"_index":2944,"title":{},"body":{"modules/NgxChartsModule.html":{}}}],["numerical",{"_index":2730,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{}}}],["o(n",{"_index":2228,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["obama",{"_index":4074,"title":{},"body":{"miscellaneous/functions.html":{}}}],["object",{"_index":442,"title":{},"body":{"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"components/BsEdgeInfoCard.html":{},"components/BsNodeInfoCard.html":{},"interfaces/Column.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"components/MapComponent.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeData.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"miscellaneous/variables.html":{}}}],["object.assign",{"_index":2240,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["object.keys(query.aggregations).foreach(aggregation",{"_index":216,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{}}}],["object.values(this.neighbors",{"_index":1269,"title":{},"body":{"components/BsNodeInfoCard.html":{},"interfaces/NodeData.html":{}}}],["objects",{"_index":1422,"title":{},"body":{"interfaces/Column.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["observable",{"_index":3080,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["observables",{"_index":3126,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["obtain",{"_index":2004,"title":{},"body":{"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{}}}],["obtained",{"_index":1118,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/HeatmapItem.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["occurrences",{"_index":836,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{}}}],["of({aggregation",{"_index":3247,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["oldmodel",{"_index":1767,"title":{},"body":{"interfaces/Column.html":{}}}],["oldrows",{"_index":1745,"title":{},"body":{"interfaces/Column.html":{}}}],["oldrows.find(id",{"_index":1755,"title":{},"body":{"interfaces/Column.html":{}}}],["oldrows.foreach(id",{"_index":1747,"title":{},"body":{"interfaces/Column.html":{}}}],["on(\"click",{"_index":1151,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["on(\"end",{"_index":1132,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["on(\"mousedown.zoom",{"_index":3544,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["on(\"mousemove",{"_index":2704,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["on(\"mouseout",{"_index":2817,"title":{},"body":{"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["on(\"start",{"_index":3426,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["on(\"touchend.zoom",{"_index":3548,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["on(\"touchmove.zoom",{"_index":3547,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["on(\"touchstart.zoom",{"_index":3546,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["on(\"zoom",{"_index":3540,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["on('brush",{"_index":3428,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["on('end",{"_index":3430,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["on/off",{"_index":3630,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["onafterviewinit",{"_index":1117,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["onaxisclicked",{"_index":967,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["onaxisclicked(value",{"_index":1033,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["onboundschange",{"_index":2546,"title":{},"body":{"components/MapComponent.html":{}}}],["onboundschange(bounds",{"_index":2574,"title":{},"body":{"components/MapComponent.html":{}}}],["onbrush",{"_index":3589,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["onbrushend",{"_index":3593,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["once",{"_index":331,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"interfaces/CustomData.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{},"interfaces/HeatmapItem.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["oncelldoubleclicked(event",{"_index":1734,"title":{},"body":{"interfaces/Column.html":{}}}],["onchange",{"_index":3728,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["onchanges",{"_index":629,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/Column.html":{},"interfaces/FacetChartDataPoint.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{},"components/FacetNgxChart.html":{},"interfaces/HeatmapItem.html":{},"components/MapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"components/NgxChart.html":{},"interfaces/NodeData.html":{},"components/ResultTimeline.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{}}}],["onchanges,afterviewinit",{"_index":2654,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{}}}],["onclick",{"_index":130,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"miscellaneous/typealiases.html":{}}}],["ondatasetsmerged",{"_index":387,"title":{},"body":{"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"interfaces/CustomData.html":{},"classes/DynamicEdgeProvider.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/NetworkProvider.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["ondatasetsmerged(dataset",{"_index":428,"title":{},"body":{"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"classes/DynamicEdgeProvider.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{}}}],["ondestroy",{"_index":388,"title":{},"body":{"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"components/BsFacetDate.html":{},"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/Column.html":{},"classes/DynamicEdgeProvider.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/FacetChartDataPoint.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{},"components/FacetNgxChart.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"components/NgxChart.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{}}}],["one",{"_index":311,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{}}}],["onedgeclicked",{"_index":389,"title":{},"body":{"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"classes/DynamicEdgeProvider.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/NetworkProvider.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{}}}],["onedgeclicked(edge",{"_index":431,"title":{},"body":{"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"classes/DynamicEdgeProvider.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{}}}],["ones",{"_index":1966,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["oneventclick(event",{"_index":3631,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["oneventclicked(event",{"_index":3307,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["onfilterchanged",{"_index":1762,"title":{},"body":{"interfaces/Column.html":{}}}],["onfilterchanged(event",{"_index":1775,"title":{},"body":{"interfaces/Column.html":{}}}],["onfiltermodified(event",{"_index":1763,"title":{},"body":{"interfaces/Column.html":{}}}],["ongridready(event",{"_index":1726,"title":{},"body":{"interfaces/Column.html":{}}}],["oninit",{"_index":749,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/Column.html":{},"interfaces/FacetChartDataPoint.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{},"components/FacetNgxChart.html":{},"components/NgxChart.html":{}}}],["oninsert",{"_index":135,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"miscellaneous/typealiases.html":{}}}],["onitemclicked",{"_index":968,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["onitemclicked(item",{"_index":1037,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["only/56821215",{"_index":2782,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["onmapclick",{"_index":2547,"title":{},"body":{"components/MapComponent.html":{}}}],["onmapclick(event",{"_index":2577,"title":{},"body":{"components/MapComponent.html":{}}}],["onmarkerclick",{"_index":2548,"title":{},"body":{"components/MapComponent.html":{}}}],["onmarkerclick(event",{"_index":2579,"title":{},"body":{"components/MapComponent.html":{}}}],["onmodelupdated(event",{"_index":1785,"title":{},"body":{"interfaces/Column.html":{}}}],["onmouseenterdatum(datum",{"_index":2797,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{}}}],["onmousemove",{"_index":2792,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["onmouseout",{"_index":2851,"title":{},"body":{"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["onmouseover",{"_index":969,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["onmouseover(item",{"_index":1040,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["onnetworkclick(eventdata",{"_index":3818,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["onnodeclicked",{"_index":384,"title":{},"body":{"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"classes/DynamicEdgeProvider.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/NetworkProvider.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{}}}],["onnodeclicked(node",{"_index":314,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["onnodesinserted",{"_index":390,"title":{},"body":{"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"classes/DynamicEdgeProvider.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/NetworkProvider.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{}}}],["onnodesinserted(nodes",{"_index":433,"title":{},"body":{"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"classes/DynamicEdgeProvider.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{}}}],["onopensettings(opened",{"_index":3854,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["onrangechange(range",{"_index":3299,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["onrecordclicked(datum",{"_index":2846,"title":{},"body":{"interfaces/MoneyDatum.html":{}}}],["onresize",{"_index":1352,"title":{},"body":{"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"components/NgxChart.html":{}}}],["onrowdatachanged(event",{"_index":1731,"title":{},"body":{"interfaces/Column.html":{}}}],["onselectionchange(selection",{"_index":3282,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["onselectionchanged(event",{"_index":1742,"title":{},"body":{"interfaces/Column.html":{}}}],["onsortchanged(event",{"_index":1781,"title":{},"body":{"interfaces/Column.html":{}}}],["onzoom",{"_index":3601,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["onzoomend",{"_index":3609,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["ootbconfig",{"_index":3973,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["ootbconfig(providerfactory",{"_index":4059,"title":{},"body":{"miscellaneous/functions.html":{}}}],["opacity",{"_index":937,"title":{},"body":{"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"interfaces/TimelineEventType.html":{},"components/TimelineLegendComponent.html":{}}}],["open",{"_index":3553,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["opened",{"_index":2596,"title":{},"body":{"components/MapComponent.html":{},"interfaces/VisEvent.html":{}}}],["openedwindow",{"_index":2544,"title":{},"body":{"components/MapComponent.html":{}}}],["optional",{"_index":76,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"components/BsEdgeInfoCard.html":{},"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"interfaces/ChartOptions.html":{},"interfaces/Column.html":{},"interfaces/CustomData.html":{},"components/DataModalComponent.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/FacetDateParams.html":{},"components/FacetNgxChart.html":{},"components/FacetWrapperComponent.html":{},"interfaces/HeatmapItem.html":{},"components/MapComponent.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"components/NgxChart.html":{},"interfaces/Node.html":{},"interfaces/NodeData.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"components/ResultTimeline.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineEventType.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"miscellaneous/functions.html":{}}}],["options",{"_index":143,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"classes/BaseProvider.html":{},"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"components/NgxChart.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"components/ResultTimeline.html":{},"interfaces/VisEvent.html":{},"miscellaneous/variables.html":{}}}],["optionsprefs",{"_index":3729,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["order",{"_index":1673,"title":{},"body":{"interfaces/Column.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["orderby",{"_index":1611,"title":{},"body":{"interfaces/Column.html":{}}}],["ordering",{"_index":1700,"title":{},"body":{"interfaces/Column.html":{}}}],["ored",{"_index":2238,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["orientation",{"_index":1305,"title":{},"body":{"components/BsTooltipComponent.html":{},"interfaces/TimelineEventType.html":{},"components/TimelineLegendComponent.html":{}}}],["original",{"_index":2092,"title":{},"body":{"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{},"miscellaneous/functions.html":{}}}],["originalcount",{"_index":952,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["others",{"_index":1802,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["out",{"_index":13,"title":{},"body":{"modules/AgGridModule.html":{},"modules/BsHeatmapModule.html":{},"modules/BsTimelineModule.html":{},"modules/FinanceModule.html":{},"modules/FusionChartsModule.html":{},"modules/GoogleMapsModule.html":{},"modules/NetworkModule.html":{},"modules/NgxChartsModule.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"modules/VisTimelineModule.html":{},"index.html":{}}}],["output",{"_index":1071,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/HeatmapItem.html":{},"components/MapComponent.html":{},"interfaces/MoneyDatum.html":{},"components/NgxChart.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{}}}],["output(\"item",{"_index":1338,"title":{},"body":{"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"components/NgxChart.html":{}}}],["outputs",{"_index":979,"title":{},"body":{"components/BsHeatmapComponent.html":{},"components/MapComponent.html":{},"components/NgxChart.html":{}}}],["outside",{"_index":3440,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["over",{"_index":1045,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/CustomData.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["overflow",{"_index":1970,"title":{},"body":{"components/DataModalComponent.html":{},"components/NgxChart.html":{}}}],["overlay",{"_index":2679,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{}}}],["override",{"_index":186,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"components/BsFacetDate.html":{},"interfaces/Column.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/FacetChartDataPoint.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{},"components/FacetNgxChart.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/VisEvent.html":{}}}],["overriden",{"_index":1452,"title":{},"body":{"interfaces/Column.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["overview",{"_index":4093,"title":{"index.html":{}},"body":{"index.html":{}}}],["p.getdata(this.context",{"_index":3768,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["p.getedgeactions(this._selectededge",{"_index":3794,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["p.getnodeactions(this._selectednode",{"_index":3790,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["p.getprovider",{"_index":3765,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["p.getprovider())).subscribe(dataset",{"_index":2029,"title":{},"body":{"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{}}}],["p.getprovideractions",{"_index":3799,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["p.ondatasetsmerged(dataset",{"_index":3774,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["p.onedgeclicked(edge",{"_index":3746,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["p.onnodeclicked(node",{"_index":3744,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["p.onnodesinserted(this.context.nodes.get",{"_index":3780,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["package",{"_index":4022,"title":{"dependencies.html":{}},"body":{}}],["padding",{"_index":940,"title":{},"body":{"components/BsFacetDate.html":{},"components/FacetWrapperComponent.html":{}}}],["page",{"_index":113,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"interfaces/CustomData.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["pages",{"_index":4079,"title":{},"body":{"miscellaneous/functions.html":{}}}],["paginate",{"_index":1817,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"miscellaneous/typealiases.html":{}}}],["pagination",{"_index":1812,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["panel",{"_index":3853,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["param",{"_index":171,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"components/BsHeatmapComponent.html":{},"interfaces/Column.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyDatum.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{}}}],["parameter",{"_index":160,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["parameters",{"_index":394,"title":{},"body":{"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"components/BsEdgeInfoCard.html":{},"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"components/DataModalComponent.html":{},"classes/DynamicEdgeProvider.html":{},"classes/DynamicNodeProvider.html":{},"components/FacetNgxChart.html":{},"components/FacetWrapperComponent.html":{},"interfaces/HeatmapItem.html":{},"components/MapComponent.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"components/NgxChart.html":{},"classes/RecordsProvider.html":{},"components/ResultTimeline.html":{},"classes/SelectedRecordsProvider.html":{},"miscellaneous/functions.html":{}}}],["params",{"_index":1656,"title":{},"body":{"interfaces/Column.html":{},"components/FacetWrapperComponent.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["params.coldef",{"_index":1654,"title":{},"body":{"interfaces/Column.html":{}}}],["params.coldef.$column",{"_index":1660,"title":{},"body":{"interfaces/Column.html":{}}}],["params.onlyselected",{"_index":1710,"title":{},"body":{"interfaces/Column.html":{}}}],["params.value",{"_index":1653,"title":{},"body":{"interfaces/Column.html":{}}}],["parent",{"_index":2845,"title":{},"body":{"interfaces/MoneyDatum.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{}}}],["parse",{"_index":71,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"interfaces/CustomData.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["parsed",{"_index":1792,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["parsedexpr",{"_index":3155,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["parsedexpr.operands[0",{"_index":3159,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["parseentity",{"_index":2731,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{}}}],["parsefloat(val[1",{"_index":2832,"title":{},"body":{"interfaces/MoneyDatum.html":{}}}],["parsefloat(valuestr",{"_index":2738,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{}}}],["parseint(id[1",{"_index":3050,"title":{},"body":{"components/ResultTimeline.html":{}}}],["parsing",{"_index":269,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{}}}],["particular",{"_index":2001,"title":{},"body":{"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["passed",{"_index":2162,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/VisEvent.html":{}}}],["path",{"_index":3693,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["paul",{"_index":4088,"title":{},"body":{"miscellaneous/functions.html":{}}}],["peer",{"_index":4025,"title":{},"body":{"dependencies.html":{}}}],["people",{"_index":4090,"title":{},"body":{"miscellaneous/functions.html":{}}}],["per",{"_index":3127,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{}}}],["performs",{"_index":1809,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["permanent",{"_index":2025,"title":{},"body":{"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{}}}],["persist",{"_index":1573,"title":{},"body":{"interfaces/Column.html":{}}}],["person",{"_index":4051,"title":{},"body":{"miscellaneous/functions.html":{}}}],["piece",{"_index":3686,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["piechartmodule",{"_index":2942,"title":{},"body":{"modules/NgxChartsModule.html":{}}}],["pipe",{"_index":870,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{}}}],["pixel",{"_index":3639,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["pixperevent",{"_index":3645,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["plus",{"_index":339,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{}}}],["poi",{"_index":4130,"title":{},"body":{"miscellaneous/variables.html":{}}}],["poi.park",{"_index":4133,"title":{},"body":{"miscellaneous/variables.html":{}}}],["point",{"_index":1119,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["pointer",{"_index":1210,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/VisEvent.html":{}}}],["points",{"_index":2390,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["populate",{"_index":1572,"title":{},"body":{"interfaces/Column.html":{}}}],["popup_extract(id[0",{"_index":3049,"title":{},"body":{"components/ResultTimeline.html":{}}}],["pos",{"_index":3004,"title":{},"body":{"components/ResultTimeline.html":{}}}],["position",{"_index":1194,"title":{},"body":{"components/BsHeatmapComponent.html":{},"components/BsTooltipComponent.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{}}}],["possible",{"_index":1846,"title":{},"body":{"interfaces/CustomData.html":{},"components/MapComponent.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["possibly",{"_index":1451,"title":{},"body":{"interfaces/Column.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["post",{"_index":478,"title":{},"body":{"classes/AsyncRecordsProvider.html":{},"interfaces/CustomData.html":{},"classes/DynamicEdgeProvider.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/VisEvent.html":{}}}],["potentially",{"_index":312,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["pre",{"_index":1086,"title":{},"body":{"components/BsHeatmapComponent.html":{},"components/DataModalComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["precedence",{"_index":1801,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["preference",{"_index":1574,"title":{},"body":{"interfaces/Column.html":{},"interfaces/VisEvent.html":{}}}],["preferences",{"_index":1509,"title":{},"body":{"interfaces/Column.html":{},"interfaces/VisEvent.html":{}}}],["prefs",{"_index":1486,"title":{},"body":{"interfaces/Column.html":{},"interfaces/VisEvent.html":{}}}],["present",{"_index":1893,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["pretty",{"_index":1259,"title":{},"body":{"components/BsNodeInfoCard.html":{},"interfaces/NodeData.html":{}}}],["prev.merge(cur",{"_index":3773,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["prevent",{"_index":1962,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["previous",{"_index":840,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["previously",{"_index":2074,"title":{},"body":{"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{}}}],["previousvalue",{"_index":3669,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["previousvalue.length",{"_index":3683,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["primary",{"_index":906,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{}}}],["primaryseries",{"_index":3486,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["primitives",{"_index":2821,"title":{},"body":{"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["prior",{"_index":3099,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{}}}],["private",{"_index":892,"title":{},"body":{"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/FacetChartDataPoint.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{},"components/FacetNgxChart.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"components/NgxChart.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["probably",{"_index":1828,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["process",{"_index":230,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"components/BsHeatmapComponent.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/HeatmapItem.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{}}}],["processcellcallback",{"_index":1707,"title":{},"body":{"interfaces/Column.html":{}}}],["processcellforexportparams",{"_index":1409,"title":{},"body":{"interfaces/Column.html":{}}}],["processed",{"_index":2018,"title":{},"body":{"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{}}}],["processednodes",{"_index":2019,"title":{},"body":{"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{}}}],["processes",{"_index":2111,"title":{},"body":{"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{}}}],["processing",{"_index":1806,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["processnode(node",{"_index":2070,"title":{},"body":{"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{}}}],["produce",{"_index":3727,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["produced",{"_index":3769,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["programmatic",{"_index":1778,"title":{},"body":{"interfaces/Column.html":{}}}],["programmatically",{"_index":1023,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/CustomData.html":{},"interfaces/HeatmapItem.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["propagate",{"_index":1946,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["propagated",{"_index":3305,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["properties",{"_index":75,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"components/BsEdgeInfoCard.html":{},"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/Column.html":{},"interfaces/CustomData.html":{},"components/DataModalComponent.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/FacetChartDataPoint.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{},"components/FacetNgxChart.html":{},"components/FacetWrapperComponent.html":{},"interfaces/HeatmapItem.html":{},"components/MapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"components/NgxChart.html":{},"interfaces/Node.html":{},"interfaces/NodeData.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"components/ResultTimeline.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineEventType.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{}}}],["properties.event",{"_index":3041,"title":{},"body":{"components/ResultTimeline.html":{}}}],["properties.event.target,url",{"_index":3051,"title":{},"body":{"components/ResultTimeline.html":{}}}],["properties.items",{"_index":3039,"title":{},"body":{"components/ResultTimeline.html":{}}}],["properties.items[0].split",{"_index":3044,"title":{},"body":{"components/ResultTimeline.html":{}}}],["property",{"_index":418,"title":{},"body":{"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"interfaces/Column.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["protected",{"_index":187,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"components/BsFacetDate.html":{},"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"components/NgxChart.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{}}}],["provide",{"_index":2097,"title":{},"body":{"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["provided",{"_index":148,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/MoneyDatum.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["provider",{"_index":104,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/VisEvent.html":{},"miscellaneous/functions.html":{}}}],["provider.ts",{"_index":60,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["provider.ts:10",{"_index":448,"title":{},"body":{"classes/AsyncRecordsProvider.html":{}}}],["provider.ts:141",{"_index":406,"title":{},"body":{"classes/AggregationProvider.html":{}}}],["provider.ts:15",{"_index":498,"title":{},"body":{"classes/BaseProvider.html":{}}}],["provider.ts:151",{"_index":504,"title":{},"body":{"classes/BaseProvider.html":{}}}],["provider.ts:155",{"_index":501,"title":{},"body":{"classes/BaseProvider.html":{}}}],["provider.ts:159",{"_index":506,"title":{},"body":{"classes/BaseProvider.html":{}}}],["provider.ts:16",{"_index":497,"title":{},"body":{"classes/BaseProvider.html":{}}}],["provider.ts:163",{"_index":510,"title":{},"body":{"classes/BaseProvider.html":{}}}],["provider.ts:167",{"_index":509,"title":{},"body":{"classes/BaseProvider.html":{}}}],["provider.ts:171",{"_index":508,"title":{},"body":{"classes/BaseProvider.html":{}}}],["provider.ts:179",{"_index":505,"title":{},"body":{"classes/BaseProvider.html":{}}}],["provider.ts:18",{"_index":499,"title":{},"body":{"classes/BaseProvider.html":{}}}],["provider.ts:188",{"_index":503,"title":{},"body":{"classes/BaseProvider.html":{}}}],["provider.ts:19",{"_index":3066,"title":{},"body":{"classes/SelectedRecordsProvider.html":{}}}],["provider.ts:21",{"_index":496,"title":{},"body":{"classes/BaseProvider.html":{}}}],["provider.ts:211",{"_index":502,"title":{},"body":{"classes/BaseProvider.html":{}}}],["provider.ts:23",{"_index":500,"title":{},"body":{"classes/BaseProvider.html":{}}}],["provider.ts:245",{"_index":507,"title":{},"body":{"classes/BaseProvider.html":{}}}],["provider.ts:25",{"_index":495,"title":{},"body":{"classes/BaseProvider.html":{}}}],["provider.ts:28",{"_index":455,"title":{},"body":{"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{}}}],["provider.ts:39",{"_index":2102,"title":{},"body":{"classes/DynamicNodeProvider.html":{}}}],["provider.ts:58",{"_index":2083,"title":{},"body":{"classes/DynamicEdgeProvider.html":{}}}],["provider.ts:65",{"_index":393,"title":{},"body":{"classes/AggregationProvider.html":{}}}],["provider.ts:74",{"_index":2946,"title":{},"body":{"classes/RecordsProvider.html":{}}}],["providerfactory",{"_index":4004,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["providers",{"_index":457,"title":{},"body":{"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/VisEvent.html":{}}}],["providersactionlist",{"_index":3795,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["providerssubscription",{"_index":3741,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["provides",{"_index":1523,"title":{},"body":{"interfaces/Column.html":{}}}],["providing",{"_index":1847,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["public",{"_index":185,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"components/BsFacetDate.html":{},"interfaces/Column.html":{},"interfaces/CustomData.html":{},"components/DataModalComponent.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{},"components/MapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"components/ResultTimeline.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/VisEvent.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["q",{"_index":2056,"title":{},"body":{"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{}}}],["queries",{"_index":2008,"title":{},"body":{"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["queries.filter(q",{"_index":2055,"title":{},"body":{"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{}}}],["query",{"_index":97,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"components/BsFacetDate.html":{},"interfaces/Column.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"miscellaneous/functions.html":{}}}],["query.action",{"_index":203,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"components/BsFacetDate.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["query.addselect(`${ccaggregation.column}:[${this.formatdayrequest(range[0])}..${this.formatdayrequest(range[1",{"_index":3252,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["query.addselect(this.context.exprbuilder.makeexpr(sourcenode.type.field",{"_index":214,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{}}}],["query.aggregations",{"_index":205,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"components/BsFacetDate.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["query.aggregations[type.aggregation",{"_index":207,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{}}}],["query.findselect(\"grid",{"_index":1600,"title":{},"body":{"interfaces/Column.html":{}}}],["query.orderby.split",{"_index":1616,"title":{},"body":{"interfaces/Column.html":{}}}],["query.select",{"_index":3280,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["query|undefined",{"_index":2065,"title":{},"body":{"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{}}}],["r",{"_index":2674,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["r.$selected",{"_index":3239,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["r.id",{"_index":1499,"title":{},"body":{"interfaces/Column.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["r.records.length",{"_index":2109,"title":{},"body":{"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{}}}],["r.records[0",{"_index":2110,"title":{},"body":{"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{}}}],["r.title",{"_index":3245,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["r[this.latitudefield",{"_index":2619,"title":{},"body":{"components/MapComponent.html":{}}}],["r[this.moneyvaluecolumn]?.foreach((item",{"_index":2762,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{}}}],["radius",{"_index":644,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsNodeInfoCard.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/NodeData.html":{}}}],["range",{"_index":810,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["range([0",{"_index":1101,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["range([4",{"_index":2692,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{}}}],["range([this.innerheight",{"_index":2690,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["range(d3.schemecategory10",{"_index":2694,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{}}}],["range(d3[this.colorscheme][this.buckets",{"_index":1112,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["range(this.x.range",{"_index":3571,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["range(this.xt.range",{"_index":3573,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["range).pipe",{"_index":3222,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["range).subscribe",{"_index":3206,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["range[0",{"_index":916,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["range[1",{"_index":917,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["rangechange",{"_index":3379,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["rangeinit",{"_index":3378,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["raw",{"_index":993,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["rawdata",{"_index":258,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{}}}],["rawdata.directed",{"_index":283,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{}}}],["rawdata.directed[i",{"_index":284,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{}}}],["rawdata.fieldvalue",{"_index":288,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{}}}],["rawdata.relations",{"_index":281,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{}}}],["rawdata.relations[i",{"_index":282,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{}}}],["rawvalue",{"_index":2650,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{}}}],["rawvalue.split",{"_index":2828,"title":{},"body":{"interfaces/MoneyDatum.html":{}}}],["re",{"_index":2122,"title":{},"body":{"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{}}}],["reactiveformsmodule",{"_index":28,"title":{},"body":{"modules/AgGridModule.html":{},"modules/BsHeatmapModule.html":{},"modules/BsTimelineModule.html":{},"modules/NetworkModule.html":{}}}],["read",{"_index":2672,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["read/write",{"_index":2668,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["readable",{"_index":2156,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["readonly",{"_index":182,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"classes/DynamicEdgeProvider.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/VisEvent.html":{}}}],["rebuild",{"_index":2039,"title":{},"body":{"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["rebuilds",{"_index":2036,"title":{},"body":{"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/VisEvent.html":{}}}],["recomputed",{"_index":3104,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["recomputes",{"_index":2819,"title":{},"body":{"interfaces/MoneyDatum.html":{}}}],["record",{"_index":465,"title":{},"body":{"classes/AsyncRecordsProvider.html":{},"interfaces/Column.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"components/MapComponent.html":{},"interfaces/MoneyDatum.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"components/ResultTimeline.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"miscellaneous/functions.html":{}}}],["record.$selected",{"_index":2357,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["record.id",{"_index":1838,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["record.title",{"_index":1841,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["record?.[this.moneycolumn]?.foreach(money",{"_index":2825,"title":{},"body":{"interfaces/MoneyDatum.html":{}}}],["record['title",{"_index":2643,"title":{},"body":{"components/MapComponent.html":{}}}],["record[\\'title",{"_index":2644,"title":{},"body":{"components/MapComponent.html":{}}}],["record[this.appservice.getcolumnalias(this.appservice.getcolumn(this.data.column",{"_index":2360,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["recordclicked",{"_index":2551,"title":{},"body":{"components/MapComponent.html":{},"interfaces/MoneyDatum.html":{}}}],["recorddata",{"_index":1854,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["recorddata.foreach((value,i",{"_index":1861,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["recordnode",{"_index":1796,"title":{"interfaces/RecordNode.html":{}},"body":{"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"coverage.html":{}}}],["recordnode).record",{"_index":1961,"title":{},"body":{"interfaces/CustomData.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["recordnode.record",{"_index":1899,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["records",{"_index":437,"title":{},"body":{"classes/AsyncRecordsProvider.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"components/MapComponent.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["records.length",{"_index":1832,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["records.map(record",{"_index":1836,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["recordsprovider",{"_index":443,"title":{"classes/RecordsProvider.html":{}},"body":{"classes/AsyncRecordsProvider.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"coverage.html":{}}}],["recordsproviderdemo",{"_index":3974,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["recordsproviderdemo(providerfactory",{"_index":4062,"title":{},"body":{"miscellaneous/functions.html":{}}}],["recordsproviders",{"_index":438,"title":{},"body":{"classes/AsyncRecordsProvider.html":{}}}],["record|undefined",{"_index":2121,"title":{},"body":{"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{}}}],["recreate",{"_index":3568,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["rect",{"_index":1221,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["rectangle",{"_index":3460,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["red",{"_index":3368,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["redraw",{"_index":2790,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["redrawing",{"_index":3446,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["referencing",{"_index":198,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{}}}],["reflect",{"_index":540,"title":{},"body":{"classes/BaseProvider.html":{},"interfaces/Column.html":{}}}],["reformat",{"_index":2389,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["refresh",{"_index":3069,"title":{},"body":{"classes/SelectedRecordsProvider.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{}}}],["refreshaction",{"_index":3736,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["refreshed",{"_index":3060,"title":{},"body":{"classes/SelectedRecordsProvider.html":{},"miscellaneous/functions.html":{}}}],["refreshnodeoptions(node",{"_index":2125,"title":{},"body":{"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{}}}],["register",{"_index":3810,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["relation",{"_index":280,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"classes/BaseProvider.html":{},"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["relations",{"_index":80,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"miscellaneous/functions.html":{}}}],["relative",{"_index":1198,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["relativex",{"_index":1170,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["relevant",{"_index":2337,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["remaining",{"_index":2218,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["remove",{"_index":1140,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{}}}],["removed",{"_index":841,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["removeedge(id",{"_index":2298,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["removeedges",{"_index":2865,"title":{},"body":{"classes/NetworkDataset.html":{}}}],["removeedges(ids",{"_index":2213,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["removenode(id",{"_index":2296,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["removenodes(ids",{"_index":2208,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["removes",{"_index":2217,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["rendercell",{"_index":1655,"title":{},"body":{"interfaces/Column.html":{}}}],["rendered",{"_index":2163,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{},"miscellaneous/functions.html":{}}}],["rendering",{"_index":1377,"title":{},"body":{"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/Column.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"components/NgxChart.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["reorganize",{"_index":3610,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["replacecurrent",{"_index":769,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{}}}],["replaysubject",{"_index":3081,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["replaysubject(1",{"_index":3177,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["representing",{"_index":2134,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["repulsion",{"_index":3869,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["repulsioncontrol",{"_index":3862,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["repulsioncontrol.value",{"_index":3878,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["repulsionpref",{"_index":3896,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["require",{"_index":3150,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["required",{"_index":136,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"components/BsHeatmapComponent.html":{}}}],["res",{"_index":2063,"title":{},"body":{"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{}}}],["res.results",{"_index":2061,"title":{},"body":{"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{}}}],["res.results.map(r",{"_index":2108,"title":{},"body":{"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{}}}],["reset",{"_index":12,"title":{},"body":{"modules/AgGridModule.html":{},"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"modules/BsHeatmapModule.html":{},"modules/BsTimelineModule.html":{},"interfaces/Column.html":{},"classes/DynamicEdgeProvider.html":{},"classes/DynamicNodeProvider.html":{},"modules/FinanceModule.html":{},"modules/FusionChartsModule.html":{},"modules/GoogleMapsModule.html":{},"modules/NetworkModule.html":{},"modules/NgxChartsModule.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"modules/VisTimelineModule.html":{},"index.html":{}}}],["resetaction",{"_index":380,"title":{},"body":{"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"classes/DynamicEdgeProvider.html":{},"classes/DynamicNodeProvider.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{}}}],["resets",{"_index":1699,"title":{},"body":{"interfaces/Column.html":{},"interfaces/VisEvent.html":{}}}],["resetstate",{"_index":1674,"title":{},"body":{"interfaces/Column.html":{}}}],["resizable",{"_index":1462,"title":{},"body":{"interfaces/Column.html":{}}}],["resize",{"_index":1718,"title":{},"body":{"interfaces/Column.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["resolution",{"_index":3327,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["respond",{"_index":1032,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/Column.html":{},"interfaces/HeatmapItem.html":{}}}],["responds",{"_index":3626,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["rest",{"_index":1019,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["result",{"_index":740,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"components/BsTooltipComponent.html":{},"components/DataModalComponent.html":{},"components/FacetNgxChart.html":{},"components/FacetWrapperComponent.html":{},"components/MapComponent.html":{},"components/NgxChart.html":{},"components/ResultTimeline.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"components/TimelineLegendComponent.html":{},"interfaces/TimelineSeries.html":{},"modules/VisTimelineModule.html":{}}}],["resulting",{"_index":481,"title":{},"body":{"classes/AsyncRecordsProvider.html":{},"classes/DynamicEdgeProvider.html":{},"classes/DynamicNodeProvider.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{}}}],["resultmodule",{"_index":43,"title":{},"body":{"modules/AgGridModule.html":{}}}],["results",{"_index":54,"title":{},"body":{"modules/AgGridModule.html":{},"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"components/BsEdgeInfoCard.html":{},"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"modules/BsHeatmapModule.html":{},"components/BsNodeInfoCard.html":{},"modules/BsTimelineModule.html":{},"components/BsTooltipComponent.html":{},"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/Column.html":{},"interfaces/CustomData.html":{},"components/DataModalComponent.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/FacetChartDataPoint.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{},"components/FacetNgxChart.html":{},"components/FacetWrapperComponent.html":{},"modules/FinanceModule.html":{},"modules/FusionChartsModule.html":{},"modules/GoogleMapsModule.html":{},"interfaces/HeatmapItem.html":{},"components/MapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"modules/NetworkModule.html":{},"interfaces/NetworkProvider.html":{},"components/NgxChart.html":{},"modules/NgxChartsModule.html":{},"interfaces/Node.html":{},"interfaces/NodeData.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"components/ResultTimeline.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineEventType.html":{},"components/TimelineLegendComponent.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{},"modules/VisTimelineModule.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["results.aggregations[0",{"_index":914,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["results.records[0",{"_index":2118,"title":{},"body":{"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{}}}],["resulttimeline",{"_index":739,"title":{"components/ResultTimeline.html":{}},"body":{"components/BsEdgeInfoCard.html":{},"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"components/BsTooltipComponent.html":{},"components/DataModalComponent.html":{},"components/FacetNgxChart.html":{},"components/FacetWrapperComponent.html":{},"components/MapComponent.html":{},"components/NgxChart.html":{},"components/ResultTimeline.html":{},"components/TimelineLegendComponent.html":{},"modules/VisTimelineModule.html":{},"coverage.html":{},"index.html":{}}}],["retrieve",{"_index":453,"title":{},"body":{"classes/AsyncRecordsProvider.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["retrieves",{"_index":292,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"classes/BaseProvider.html":{}}}],["return",{"_index":157,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"classes/BaseProvider.html":{},"components/BsEdgeInfoCard.html":{},"components/BsFacetDate.html":{},"components/BsNodeInfoCard.html":{},"components/BsTooltipComponent.html":{},"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/Column.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/FacetChartDataPoint.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{},"components/FacetNgxChart.html":{},"components/FacetWrapperComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"components/NgxChart.html":{},"interfaces/Node.html":{},"interfaces/NodeData.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{}}}],["returned",{"_index":70,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["returns",{"_index":407,"title":{},"body":{"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"components/BsEdgeInfoCard.html":{},"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"interfaces/Column.html":{},"interfaces/CustomData.html":{},"components/DataModalComponent.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"components/FacetWrapperComponent.html":{},"components/MapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"components/NgxChart.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"components/ResultTimeline.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"miscellaneous/functions.html":{}}}],["rextent",{"_index":2742,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{}}}],["rextent[0",{"_index":2747,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{}}}],["rextent[1",{"_index":2748,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{}}}],["rgb(0,0,0,0.125",{"_index":1303,"title":{},"body":{"components/BsTooltipComponent.html":{}}}],["rgb(132",{"_index":3710,"title":{},"body":{"interfaces/TimelineEventType.html":{},"components/TimelineLegendComponent.html":{}}}],["right",{"_index":636,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"components/BsTooltipComponent.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/HeatmapItem.html":{},"components/MapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/NodeData.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{}}}],["right.px",{"_index":1321,"title":{},"body":{"components/BsTooltipComponent.html":{}}}],["rnode",{"_index":2068,"title":{},"body":{"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{}}}],["rnode.record",{"_index":2069,"title":{},"body":{"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{}}}],["road",{"_index":4136,"title":{},"body":{"miscellaneous/variables.html":{}}}],["road.highway",{"_index":4139,"title":{},"body":{"miscellaneous/variables.html":{}}}],["rolling",{"_index":2384,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["rotate",{"_index":1145,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{},"miscellaneous/variables.html":{}}}],["row",{"_index":1439,"title":{},"body":{"interfaces/Column.html":{},"components/DataModalComponent.html":{},"components/FacetWrapperComponent.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineEventType.html":{},"components/TimelineLegendComponent.html":{},"interfaces/TimelineRecords.html":{}}}],["row\"|\"column",{"_index":3123,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineEventType.html":{},"components/TimelineLegendComponent.html":{},"interfaces/TimelineRecords.html":{}}}],["row.id",{"_index":1750,"title":{},"body":{"interfaces/Column.html":{}}}],["rowdata",{"_index":1483,"title":{},"body":{"interfaces/Column.html":{}}}],["rowdatachangedevent",{"_index":1404,"title":{},"body":{"interfaces/Column.html":{}}}],["rowmodeltype",{"_index":1458,"title":{},"body":{"interfaces/Column.html":{}}}],["rows",{"_index":1445,"title":{},"body":{"interfaces/Column.html":{}}}],["rowselection",{"_index":1441,"title":{},"body":{"interfaces/Column.html":{}}}],["rxjs",{"_index":511,"title":{},"body":{"classes/BaseProvider.html":{},"components/BsFacetDate.html":{},"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/Column.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/FacetChartDataPoint.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{},"components/FacetNgxChart.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"components/NgxChart.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{}}}],["rxjs/operators",{"_index":831,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["s",{"_index":3497,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["s.dates",{"_index":3492,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["s.primary",{"_index":3488,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["s.unsubscribe",{"_index":1516,"title":{},"body":{"interfaces/Column.html":{}}}],["same",{"_index":469,"title":{},"body":{"classes/AsyncRecordsProvider.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{}}}],["sample",{"_index":3965,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["saved",{"_index":3891,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["scale",{"_index":1169,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/HeatmapItem.html":{},"components/MapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{}}}],["scaleextent",{"_index":3532,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["scaleextent([scaleextent/this.maxzoomdays",{"_index":3538,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["scaleextent/this.minzoomdays",{"_index":3539,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["scalefactor",{"_index":572,"title":{},"body":{"classes/BaseProvider.html":{}}}],["scales",{"_index":1081,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["scaling",{"_index":3132,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["scheme",{"_index":1078,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"interfaces/HeatmapItem.html":{},"components/NgxChart.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["schemeblues",{"_index":989,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["scratch",{"_index":2040,"title":{},"body":{"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{}}}],["scrollable",{"_index":1489,"title":{},"body":{"interfaces/Column.html":{}}}],["scrolling",{"_index":1456,"title":{},"body":{"interfaces/Column.html":{}}}],["search",{"_index":416,"title":{},"body":{"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"interfaces/Column.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"components/MapComponent.html":{},"interfaces/MoneyDatum.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"miscellaneous/functions.html":{}}}],["search?action=select&resultid=\"+resultid+\"&item=%22tag%3b\"+settings.date_column+\"%3b\"+date+\"%3b\"+date+\"%22",{"_index":3048,"title":{},"body":{"components/ResultTimeline.html":{}}}],["searches",{"_index":3256,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["searchinactive",{"_index":224,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"components/BsFacetDate.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["searchservice",{"_index":778,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/Column.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{},"components/MapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/VisEvent.html":{},"miscellaneous/functions.html":{}}}],["searchservice.query",{"_index":1427,"title":{},"body":{"interfaces/Column.html":{}}}],["secondaryedgetypes",{"_index":2024,"title":{},"body":{"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{}}}],["see",{"_index":2140,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{},"miscellaneous/variables.html":{}}}],["seeing",{"_index":1376,"title":{},"body":{"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"components/NgxChart.html":{}}}],["select",{"_index":196,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"classes/BaseProvider.html":{},"components/BsEdgeInfoCard.html":{},"components/BsFacetDate.html":{},"components/BsNodeInfoCard.html":{},"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/Column.html":{},"interfaces/FacetChartDataPoint.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{},"components/FacetNgxChart.html":{},"interfaces/NetworkContext.html":{},"components/NgxChart.html":{},"interfaces/NodeData.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/VisEvent.html":{}}}],["select(node",{"_index":2169,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/VisEvent.html":{}}}],["select.expression",{"_index":1609,"title":{},"body":{"interfaces/Column.html":{}}}],["selected",{"_index":1073,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/Column.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"interfaces/HeatmapItem.html":{},"components/MapComponent.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/VisEvent.html":{},"miscellaneous/functions.html":{}}}],["selectedcolor",{"_index":2310,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["selectedge(edge",{"_index":3833,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["selecteditems",{"_index":2667,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{}}}],["selectedrecordsprovider",{"_index":3057,"title":{"classes/SelectedRecordsProvider.html":{}},"body":{"classes/SelectedRecordsProvider.html":{},"coverage.html":{}}}],["selectedrecordsproviderdemo",{"_index":3975,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["selectedrecordsproviderdemo(providerfactory",{"_index":4063,"title":{},"body":{"miscellaneous/functions.html":{}}}],["selectedvalues",{"_index":2313,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["selectfield",{"_index":2317,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["selecting",{"_index":2601,"title":{},"body":{"components/MapComponent.html":{}}}],["selection",{"_index":758,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/Column.html":{},"interfaces/FacetChartDataPoint.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{},"components/FacetNgxChart.html":{},"components/MapComponent.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{}}}],["selection[i",{"_index":3584,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["selection[index",{"_index":3587,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["selectionchange",{"_index":2318,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["selectionchanged",{"_index":3443,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["selectionchangedevent",{"_index":1406,"title":{},"body":{"interfaces/Column.html":{}}}],["selectioneventtype",{"_index":1390,"title":{},"body":{"interfaces/Column.html":{},"classes/SelectedRecordsProvider.html":{}}}],["selectioneventtype.select",{"_index":1495,"title":{},"body":{"interfaces/Column.html":{},"classes/SelectedRecordsProvider.html":{}}}],["selectioneventtype.unselect",{"_index":1496,"title":{},"body":{"interfaces/Column.html":{},"classes/SelectedRecordsProvider.html":{}}}],["selections",{"_index":2166,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{}}}],["selectionservice",{"_index":1391,"title":{},"body":{"interfaces/Column.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"interfaces/MoneyCloudDatum.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["selectionservice.events.subscribe(event",{"_index":3072,"title":{},"body":{"classes/SelectedRecordsProvider.html":{}}}],["selectionservice.getselecteditems",{"_index":3070,"title":{},"body":{"classes/SelectedRecordsProvider.html":{}}}],["selectionsubscription",{"_index":3065,"title":{},"body":{"classes/SelectedRecordsProvider.html":{}}}],["selectnode(node",{"_index":3830,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["selector",{"_index":630,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"components/BsTooltipComponent.html":{},"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/Column.html":{},"components/DataModalComponent.html":{},"interfaces/FacetChartDataPoint.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{},"components/FacetNgxChart.html":{},"components/FacetWrapperComponent.html":{},"interfaces/HeatmapItem.html":{},"components/MapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"components/NgxChart.html":{},"interfaces/NodeData.html":{},"components/ResultTimeline.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineEventType.html":{},"components/TimelineLegendComponent.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{}}}],["selects",{"_index":1025,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{},"components/MapComponent.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["self",{"_index":1172,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["self.append('svg:title').text(fulltext",{"_index":1182,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["self.text",{"_index":1176,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["self.text(text",{"_index":1181,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["semantic",{"_index":2258,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["semi",{"_index":3552,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["separator",{"_index":348,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{}}}],["series",{"_index":3310,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineEventType.html":{},"components/TimelineLegendComponent.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{}}}],["series.dates[i",{"_index":3620,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["server",{"_index":177,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"interfaces/Column.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"miscellaneous/functions.html":{}}}],["service",{"_index":146,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"interfaces/Column.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/VisEvent.html":{},"miscellaneous/functions.html":{}}}],["services",{"_index":88,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"components/BsFacetDate.html":{},"interfaces/Column.html":{},"interfaces/CustomData.html":{},"components/DataModalComponent.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/FacetChartDataPoint.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{},"components/FacetNgxChart.html":{},"components/FacetWrapperComponent.html":{},"components/MapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"components/ResultTimeline.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{}}}],["set",{"_index":1369,"title":{},"body":{"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/Column.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"components/NgxChart.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{}}}],["set(this.data.map(value",{"_index":1089,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["setcustomdateselect(range",{"_index":915,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{}}}],["setdefaults",{"_index":3886,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["setmodel",{"_index":2454,"title":{},"body":{"components/FacetWrapperComponent.html":{}}}],["setmodel(model",{"_index":2463,"title":{},"body":{"components/FacetWrapperComponent.html":{}}}],["setquery",{"_index":444,"title":{},"body":{"classes/AsyncRecordsProvider.html":{}}}],["setquery(query",{"_index":454,"title":{},"body":{"classes/AsyncRecordsProvider.html":{}}}],["sets",{"_index":456,"title":{},"body":{"classes/AsyncRecordsProvider.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/VisEvent.html":{}}}],["settings",{"_index":1394,"title":{},"body":{"interfaces/Column.html":{},"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/VisEvent.html":{}}}],["setup",{"_index":2501,"title":{},"body":{"components/FacetWrapperComponent.html":{}}}],["shapes",{"_index":3385,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["shift",{"_index":3344,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["shiftdate(date",{"_index":3349,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["show",{"_index":835,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/Column.html":{},"interfaces/CustomData.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["show/hide",{"_index":838,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{}}}],["showall",{"_index":1816,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["showcount",{"_index":770,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{}}}],["showcounter",{"_index":1438,"title":{},"body":{"interfaces/Column.html":{}}}],["showcustomrange",{"_index":771,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{}}}],["showdatapoints",{"_index":3079,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{}}}],["showing",{"_index":2813,"title":{},"body":{"interfaces/MoneyDatum.html":{},"miscellaneous/functions.html":{}}}],["showlegend",{"_index":3116,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["shown",{"_index":485,"title":{},"body":{"classes/AsyncRecordsProvider.html":{},"components/BsHeatmapComponent.html":{},"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["shows",{"_index":2624,"title":{},"body":{"components/MapComponent.html":{}}}],["showtooltip",{"_index":2665,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{}}}],["side",{"_index":3168,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{}}}],["simple",{"_index":2094,"title":{},"body":{"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{}}}],["simplechange",{"_index":3373,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["simplechanges",{"_index":801,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/Column.html":{},"interfaces/FacetChartDataPoint.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{},"components/FacetNgxChart.html":{},"components/MapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"components/NgxChart.html":{},"components/ResultTimeline.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{}}}],["simply",{"_index":3518,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["simultaneous",{"_index":2007,"title":{},"body":{"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{}}}],["sinequa",{"_index":1522,"title":{},"body":{"interfaces/Column.html":{},"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["sinequa/analytics/heatmap",{"_index":1285,"title":{},"body":{"modules/BsTimelineModule.html":{},"modules/FinanceModule.html":{}}}],["sinequa/components",{"_index":4023,"title":{},"body":{"dependencies.html":{}}}],["sinequa/components/action",{"_index":38,"title":{},"body":{"modules/AgGridModule.html":{},"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"classes/BaseProvider.html":{},"components/BsFacetDate.html":{},"modules/BsHeatmapModule.html":{},"modules/BsTimelineModule.html":{},"interfaces/Column.html":{},"interfaces/CustomData.html":{},"components/DataModalComponent.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/FacetChartDataPoint.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{},"components/FacetNgxChart.html":{},"modules/FinanceModule.html":{},"modules/GoogleMapsModule.html":{},"components/MapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"modules/NetworkModule.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/VisEvent.html":{}}}],["sinequa/components/advanced",{"_index":824,"title":{},"body":{"components/BsFacetDate.html":{},"modules/BsTimelineModule.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{}}}],["sinequa/components/collapse",{"_index":1290,"title":{},"body":{"modules/BsTimelineModule.html":{},"modules/NetworkModule.html":{}}}],["sinequa/components/facet",{"_index":42,"title":{},"body":{"modules/AgGridModule.html":{},"components/BsFacetDate.html":{},"modules/BsTimelineModule.html":{},"interfaces/Column.html":{},"interfaces/FacetChartDataPoint.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{},"components/FacetNgxChart.html":{},"components/FacetWrapperComponent.html":{},"modules/GoogleMapsModule.html":{},"components/MapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"modules/NetworkModule.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/VisEvent.html":{}}}],["sinequa/components/modal",{"_index":40,"title":{},"body":{"modules/AgGridModule.html":{}}}],["sinequa/components/result",{"_index":44,"title":{},"body":{"modules/AgGridModule.html":{}}}],["sinequa/components/search",{"_index":826,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/Column.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{},"components/MapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/VisEvent.html":{}}}],["sinequa/components/selection",{"_index":1230,"title":{},"body":{"modules/BsHeatmapModule.html":{},"modules/BsTimelineModule.html":{},"interfaces/Column.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"modules/FusionChartsModule.html":{},"modules/GoogleMapsModule.html":{},"interfaces/MoneyCloudDatum.html":{},"modules/NgxChartsModule.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["sinequa/components/user",{"_index":1393,"title":{},"body":{"interfaces/Column.html":{},"interfaces/VisEvent.html":{}}}],["sinequa/components/utils",{"_index":36,"title":{},"body":{"modules/AgGridModule.html":{},"modules/BsTimelineModule.html":{},"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/Column.html":{},"components/DataModalComponent.html":{},"modules/FinanceModule.html":{},"modules/FusionChartsModule.html":{},"modules/NetworkModule.html":{},"components/NgxChart.html":{},"modules/NgxChartsModule.html":{}}}],["sinequa/core/app",{"_index":99,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"components/BsFacetDate.html":{},"interfaces/Column.html":{},"components/DataModalComponent.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/FacetChartDataPoint.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{},"components/FacetNgxChart.html":{},"components/FacetWrapperComponent.html":{},"components/MapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/VisEvent.html":{}}}],["sinequa/core/base",{"_index":101,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"classes/BaseProvider.html":{},"components/BsFacetDate.html":{},"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/Column.html":{},"interfaces/CustomData.html":{},"components/DataModalComponent.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/FacetChartDataPoint.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{},"components/FacetNgxChart.html":{},"components/FacetWrapperComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"components/NgxChart.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/VisEvent.html":{}}}],["sinequa/core/intl",{"_index":34,"title":{},"body":{"modules/AgGridModule.html":{},"modules/BsHeatmapModule.html":{},"modules/BsTimelineModule.html":{},"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/Column.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"modules/FinanceModule.html":{},"modules/FusionChartsModule.html":{},"modules/GoogleMapsModule.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"modules/NetworkModule.html":{},"interfaces/NetworkProvider.html":{},"components/NgxChart.html":{},"modules/NgxChartsModule.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{},"modules/VisTimelineModule.html":{}}}],["sinequa/core/modal",{"_index":1397,"title":{},"body":{"interfaces/Column.html":{},"components/DataModalComponent.html":{}}}],["sinequa/core/web",{"_index":87,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"components/BsFacetDate.html":{},"interfaces/Column.html":{},"interfaces/CustomData.html":{},"components/DataModalComponent.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/FacetChartDataPoint.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{},"components/FacetNgxChart.html":{},"components/FacetWrapperComponent.html":{},"components/MapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"components/ResultTimeline.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{}}}],["sinequacomponentsmodule",{"_index":4015,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["single",{"_index":1442,"title":{},"body":{"interfaces/Column.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"components/MapComponent.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{}}}],["size",{"_index":541,"title":{},"body":{"classes/BaseProvider.html":{},"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"components/DataModalComponent.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineEventType.html":{},"components/TimelineLegendComponent.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{}}}],["sizeopened",{"_index":3376,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["skip",{"_index":208,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["skip/count",{"_index":2159,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["skips",{"_index":183,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{}}}],["slantlabel",{"_index":4151,"title":{},"body":{"miscellaneous/variables.html":{}}}],["solid",{"_index":1299,"title":{},"body":{"components/BsTooltipComponent.html":{}}}],["somehow",{"_index":3775,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["sort",{"_index":1267,"title":{},"body":{"components/BsNodeInfoCard.html":{},"interfaces/Column.html":{},"interfaces/NodeData.html":{}}}],["sort((a,b",{"_index":3654,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["sort((a,b)=>a",{"_index":3595,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["sortchangedevent",{"_index":1410,"title":{},"body":{"interfaces/Column.html":{}}}],["sorted",{"_index":1527,"title":{},"body":{"interfaces/Column.html":{}}}],["sorting",{"_index":1672,"title":{},"body":{"interfaces/Column.html":{}}}],["sorts",{"_index":1474,"title":{},"body":{"interfaces/Column.html":{}}}],["source",{"_index":15,"title":{},"body":{"modules/AgGridModule.html":{},"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"components/BsEdgeInfoCard.html":{},"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"modules/BsHeatmapModule.html":{},"components/BsNodeInfoCard.html":{},"modules/BsTimelineModule.html":{},"components/BsTooltipComponent.html":{},"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/Column.html":{},"interfaces/CustomData.html":{},"components/DataModalComponent.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/FacetChartDataPoint.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{},"components/FacetNgxChart.html":{},"components/FacetWrapperComponent.html":{},"modules/FinanceModule.html":{},"modules/FusionChartsModule.html":{},"modules/GoogleMapsModule.html":{},"interfaces/HeatmapItem.html":{},"components/MapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"modules/NetworkModule.html":{},"interfaces/NetworkProvider.html":{},"components/NgxChart.html":{},"modules/NgxChartsModule.html":{},"interfaces/Node.html":{},"interfaces/NodeData.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"components/ResultTimeline.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineEventType.html":{},"components/TimelineLegendComponent.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{},"modules/VisTimelineModule.html":{},"miscellaneous/typealiases.html":{}}}],["sourcecsv",{"_index":1871,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["sourcenode",{"_index":194,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{}}}],["sourcenode.type.field",{"_index":213,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{}}}],["sourcenodes",{"_index":2037,"title":{},"body":{"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{}}}],["sourcenodes.filter(node",{"_index":2048,"title":{},"body":{"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{}}}],["sourcenodes.find(node",{"_index":2045,"title":{},"body":{"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{}}}],["sourcenodes.map(node",{"_index":2050,"title":{},"body":{"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{}}}],["sourceproviders",{"_index":2026,"title":{},"body":{"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{}}}],["sourcestr",{"_index":1868,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["south",{"_index":2635,"title":{},"body":{"components/MapComponent.html":{}}}],["special",{"_index":1887,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["specific",{"_index":329,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/VisEvent.html":{}}}],["specifically",{"_index":4045,"title":{},"body":{"miscellaneous/functions.html":{}}}],["specified",{"_index":2013,"title":{},"body":{"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{}}}],["specifying",{"_index":139,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{}}}],["split",{"_index":2829,"title":{},"body":{"interfaces/MoneyDatum.html":{}}}],["spring",{"_index":3873,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["springconstant",{"_index":3867,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["springconstantcontrol",{"_index":3858,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["springconstantcontrol.value",{"_index":3876,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["springconstantpref",{"_index":3894,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["springlength",{"_index":3866,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["springlengthcontrol",{"_index":3856,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["springlengthcontrol.value",{"_index":3874,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["springlengthpref",{"_index":3892,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["sq",{"_index":631,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"components/BsTooltipComponent.html":{},"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/Column.html":{},"components/DataModalComponent.html":{},"interfaces/FacetChartDataPoint.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{},"components/FacetNgxChart.html":{},"components/FacetWrapperComponent.html":{},"interfaces/HeatmapItem.html":{},"components/MapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"components/NgxChart.html":{},"interfaces/NodeData.html":{},"components/ResultTimeline.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineEventType.html":{},"components/TimelineLegendComponent.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{}}}],["sqdatasource",{"_index":1417,"title":{},"body":{"interfaces/Column.html":{},"components/FacetWrapperComponent.html":{},"coverage.html":{}}}],["sqdatasource(this.results",{"_index":1666,"title":{},"body":{"interfaces/Column.html":{}}}],["sqdatasource)?.filterchanged",{"_index":1780,"title":{},"body":{"interfaces/Column.html":{}}}],["sqdatasource)?.sortchanged",{"_index":1782,"title":{},"body":{"interfaces/Column.html":{}}}],["sqdatasource.exprtomodel(filtertype",{"_index":1608,"title":{},"body":{"interfaces/Column.html":{}}}],["sqmessage",{"_index":689,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsFacetDate.html":{},"components/BsNodeInfoCard.html":{},"components/DataModalComponent.html":{}}}],["sqmessage:{values",{"_index":1186,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["square",{"_index":850,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/Column.html":{},"interfaces/FacetChartDataPoint.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{},"components/FacetNgxChart.html":{},"components/MapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/VisEvent.html":{}}}],["sqvalue",{"_index":2931,"title":{},"body":{"components/NgxChart.html":{}}}],["sqvalue:item.$column",{"_index":928,"title":{},"body":{"components/BsFacetDate.html":{}}}],["sr.1",{"_index":4031,"title":{},"body":{"dependencies.html":{}}}],["standard",{"_index":525,"title":{},"body":{"classes/BaseProvider.html":{},"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["star",{"_index":2130,"title":{},"body":{"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{}}}],["start",{"_index":1149,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{},"components/ResultTimeline.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["state",{"_index":472,"title":{},"body":{"classes/AsyncRecordsProvider.html":{},"interfaces/Column.html":{},"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/VisEvent.html":{}}}],["statement",{"_index":3439,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["statements",{"_index":3907,"title":{},"body":{"coverage.html":{}}}],["static",{"_index":1342,"title":{},"body":{"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"components/NgxChart.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{}}}],["statistical",{"_index":2257,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["steve",{"_index":4086,"title":{},"body":{"miscellaneous/functions.html":{}}}],["stop",{"_index":3481,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["store",{"_index":106,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"classes/SelectedRecordsProvider.html":{}}}],["stored",{"_index":2062,"title":{},"body":{"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/VisEvent.html":{}}}],["stores",{"_index":179,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{}}}],["storing",{"_index":2559,"title":{},"body":{"components/MapComponent.html":{}}}],["stream",{"_index":1246,"title":{},"body":{"components/BsNodeInfoCard.html":{},"interfaces/NodeData.html":{}}}],["strength",{"_index":2135,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["string",{"_index":84,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/Column.html":{},"interfaces/CustomData.html":{},"components/DataModalComponent.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/FacetChartDataPoint.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{},"components/FacetNgxChart.html":{},"components/FacetWrapperComponent.html":{},"interfaces/HeatmapItem.html":{},"components/MapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"components/NgxChart.html":{},"interfaces/Node.html":{},"interfaces/NodeData.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"components/ResultTimeline.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineEventType.html":{},"components/TimelineLegendComponent.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{}}}],["strings",{"_index":1062,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["stroke",{"_index":3370,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineEventType.html":{},"components/TimelineLegendComponent.html":{},"interfaces/TimelineRecords.html":{}}}],["structural",{"_index":467,"title":{},"body":{"classes/AsyncRecordsProvider.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"miscellaneous/functions.html":{}}}],["structuraldisplaytype",{"_index":1820,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"miscellaneous/typealiases.html":{}}}],["structuraledgetype",{"_index":446,"title":{"interfaces/StructuralEdgeType.html":{}},"body":{"classes/AsyncRecordsProvider.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["structuraledgetype).display",{"_index":1927,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["structuraledgetype).field",{"_index":1822,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["structuraltriggertype",{"_index":1815,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"miscellaneous/typealiases.html":{}}}],["structure",{"_index":63,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/VisEvent.html":{}}}],["structured",{"_index":2099,"title":{},"body":{"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{}}}],["structures",{"_index":2168,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["style",{"_index":1298,"title":{},"body":{"components/BsTooltipComponent.html":{},"components/MapComponent.html":{}}}],["style(\"text",{"_index":1147,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["style.ts",{"_index":3934,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["stylers",{"_index":4113,"title":{},"body":{"miscellaneous/variables.html":{}}}],["styles",{"_index":624,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"components/BsTooltipComponent.html":{},"components/DataModalComponent.html":{},"components/FacetWrapperComponent.html":{},"components/MapComponent.html":{},"components/NgxChart.html":{},"interfaces/NodeData.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineEventType.html":{},"components/TimelineLegendComponent.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{}}}],["styleurls",{"_index":751,"title":{},"body":{"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/Column.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"components/NgxChart.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{}}}],["subject",{"_index":427,"title":{},"body":{"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"classes/DynamicEdgeProvider.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["subject.error(err",{"_index":3210,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["subject.next(config",{"_index":3195,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["subject.next(d",{"_index":3207,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["subject.next(t",{"_index":3218,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["subject.next(this.getrecordsasevents(config",{"_index":3214,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["subscribe",{"_index":1490,"title":{},"body":{"interfaces/Column.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["subscribe((value",{"_index":873,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{}}}],["subscribe(datasets",{"_index":3766,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["subscribe(results",{"_index":488,"title":{},"body":{"classes/AsyncRecordsProvider.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{}}}],["subscription",{"_index":828,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/Column.html":{},"interfaces/FacetChartDataPoint.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{},"components/FacetNgxChart.html":{},"components/NgxChart.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{}}}],["subscriptions",{"_index":843,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/Column.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/FacetChartDataPoint.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{},"components/FacetNgxChart.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["super",{"_index":846,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/FacetChartDataPoint.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{},"components/FacetNgxChart.html":{},"components/MapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/VisEvent.html":{}}}],["super(name",{"_index":189,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["super.getnodeactions(node",{"_index":355,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["super.getprovideractions",{"_index":334,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["super.onnodeclicked(node",{"_index":2079,"title":{},"body":{"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{}}}],["support",{"_index":134,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{},"modules.html":{}}}],["supported",{"_index":2568,"title":{},"body":{"components/MapComponent.html":{}}}],["svg",{"_index":1161,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{},"modules.html":{}}}],["swap",{"_index":2247,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["swimlane/ngx",{"_index":1330,"title":{},"body":{"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"components/NgxChart.html":{},"modules/NgxChartsModule.html":{},"dependencies.html":{}}}],["switch(col.$column?.etype",{"_index":1552,"title":{},"body":{"interfaces/Column.html":{}}}],["switch(resolution",{"_index":3350,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["switch(type",{"_index":1363,"title":{},"body":{"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"components/NgxChart.html":{}}}],["switching",{"_index":3091,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["sync",{"_index":1630,"title":{},"body":{"interfaces/Column.html":{},"interfaces/VisEvent.html":{}}}],["synchronously",{"_index":293,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{}}}],["syncing",{"_index":3882,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["syntax",{"_index":1021,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["system",{"_index":1165,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["systematically",{"_index":123,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"miscellaneous/typealiases.html":{}}}],["t",{"_index":1127,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["table",{"_index":1784,"title":{},"body":{"interfaces/Column.html":{},"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":4021,"title":{},"body":{"coverage.html":{}}}],["take",{"_index":1800,"title":{},"body":{"interfaces/CustomData.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/VisEvent.html":{}}}],["taken",{"_index":3059,"title":{},"body":{"classes/SelectedRecordsProvider.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["takes",{"_index":1804,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["taking",{"_index":2264,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["talking",{"_index":4083,"title":{},"body":{"miscellaneous/functions.html":{}}}],["tap",{"_index":3822,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["target",{"_index":1877,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["tasks",{"_index":3796,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["tell",{"_index":1606,"title":{},"body":{"interfaces/Column.html":{}}}],["tells",{"_index":1526,"title":{},"body":{"interfaces/Column.html":{}}}],["temp",{"_index":2248,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["template",{"_index":623,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"components/BsTooltipComponent.html":{},"components/DataModalComponent.html":{},"components/FacetNgxChart.html":{},"components/FacetWrapperComponent.html":{},"interfaces/HeatmapItem.html":{},"components/MapComponent.html":{},"components/NgxChart.html":{},"components/ResultTimeline.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventType.html":{},"components/TimelineLegendComponent.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{}}}],["templateref",{"_index":3375,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{}}}],["templateurl",{"_index":648,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/Column.html":{},"components/DataModalComponent.html":{},"interfaces/FacetChartDataPoint.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{},"components/FacetNgxChart.html":{},"interfaces/HeatmapItem.html":{},"components/MapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"components/NgxChart.html":{},"interfaces/NodeData.html":{},"components/ResultTimeline.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{}}}],["test",{"_index":1940,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["tests",{"_index":169,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{},"miscellaneous/functions.html":{}}}],["text",{"_index":344,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"classes/BaseProvider.html":{},"components/BsEdgeInfoCard.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"interfaces/Column.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"interfaces/HeatmapItem.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{},"miscellaneous/functions.html":{}}}],["text.length",{"_index":1179,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["text.slice(0",{"_index":1180,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["text:hover",{"_index":1206,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["textlength",{"_index":1174,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["theme",{"_index":977,"title":{},"body":{"components/BsHeatmapComponent.html":{},"components/BsTooltipComponent.html":{},"interfaces/Column.html":{},"modules/FusionChartsModule.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"miscellaneous/variables.html":{}}}],["themselves",{"_index":4054,"title":{},"body":{"miscellaneous/functions.html":{}}}],["there's",{"_index":3680,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this._actions",{"_index":3781,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["this._actions.concat(actions",{"_index":3792,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["this._actions.push(providersactionlist",{"_index":3800,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["this._actions.push(this.clearfilters",{"_index":3788,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["this._actions.push(this.refreshaction",{"_index":3801,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["this._field",{"_index":844,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{}}}],["this._filterinput",{"_index":1772,"title":{},"body":{"interfaces/Column.html":{}}}],["this._networkinitialized",{"_index":3808,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["this._selectededge",{"_index":3834,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["this._selectednode",{"_index":3831,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["this.activateaction",{"_index":512,"title":{},"body":{"classes/BaseProvider.html":{}}}],["this.active",{"_index":347,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"classes/BaseProvider.html":{}}}],["this.addaggregationnodes(item",{"_index":242,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{}}}],["this.addcustomedge(node",{"_index":1862,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["this.adddynamicedges([node",{"_index":2077,"title":{},"body":{"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{}}}],["this.adddynamicedges(sourcenodes",{"_index":2060,"title":{},"body":{"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{}}}],["this.addedge(edge",{"_index":2204,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["this.addedge(edges",{"_index":2205,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["this.addnode(node",{"_index":2199,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["this.addnode(nodes",{"_index":2200,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["this.addrecordnodes(records",{"_index":1833,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["this.addstructuraledge(data",{"_index":1870,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["this.addstructuraledges(node",{"_index":1844,"title":{},"body":{"interfaces/CustomData.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["this.advancedservice.validators.date(this.field",{"_index":856,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{}}}],["this.advancedservice.validators.range(this.field",{"_index":855,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{}}}],["this.aggregation",{"_index":2333,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["this.aggregation?.name",{"_index":2495,"title":{},"body":{"components/FacetWrapperComponent.html":{}}}],["this.aggregationname",{"_index":2499,"title":{},"body":{"components/FacetWrapperComponent.html":{}}}],["this.aggregations",{"_index":2328,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["this.allowcustomrange",{"_index":853,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{}}}],["this.appservice",{"_index":1667,"title":{},"body":{"interfaces/Column.html":{}}}],["this.appservice.getccaggregation(aggregation",{"_index":3290,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["this.appservice.getccaggregation(aggregationname",{"_index":901,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["this.appservice.getcolumn(a.column",{"_index":2483,"title":{},"body":{"components/FacetWrapperComponent.html":{}}}],["this.appservice.getcolumn(col.field",{"_index":1533,"title":{},"body":{"interfaces/Column.html":{}}}],["this.appservice.getcolumnalias(col",{"_index":2485,"title":{},"body":{"components/FacetWrapperComponent.html":{}}}],["this.appservice.getcolumnalias(this.appservice.getcolumn(colid",{"_index":1617,"title":{},"body":{"interfaces/Column.html":{}}}],["this.appservice.issortable(col.field",{"_index":1545,"title":{},"body":{"interfaces/Column.html":{}}}],["this.appservice.istree(this.field",{"_index":2494,"title":{},"body":{"components/FacetWrapperComponent.html":{}}}],["this.appservice.parseexpr(select.expression",{"_index":3156,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["this.area",{"_index":3413,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.area.y0(this.y(0",{"_index":3432,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.attached",{"_index":1381,"title":{},"body":{"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"components/NgxChart.html":{}}}],["this.autoresize",{"_index":1638,"title":{},"body":{"interfaces/Column.html":{}}}],["this.bisectdate(series.dates",{"_index":3618,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.bounds",{"_index":2642,"title":{},"body":{"components/MapComponent.html":{}}}],["this.bounds.getnortheast().lat",{"_index":2611,"title":{},"body":{"components/MapComponent.html":{}}}],["this.bounds.getnortheast().lng",{"_index":2615,"title":{},"body":{"components/MapComponent.html":{}}}],["this.bounds.getsouthwest().lat",{"_index":2609,"title":{},"body":{"components/MapComponent.html":{}}}],["this.bounds.getsouthwest().lng",{"_index":2613,"title":{},"body":{"components/MapComponent.html":{}}}],["this.brush",{"_index":3456,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.brush$.call(this.brushbehavior",{"_index":3434,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.brush$.call(this.brushbehavior.move",{"_index":3564,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.brush$.selectall(\".grip",{"_index":3463,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.brushbehavior",{"_index":3422,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.brushbehavior.extent([[0",{"_index":3433,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.brushbehavior.move(this.brush",{"_index":3608,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.brushing",{"_index":3427,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.brushselection",{"_index":3590,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.buildchart",{"_index":1125,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["this.buildchart(!!this.transition",{"_index":1116,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["this.c",{"_index":2693,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{}}}],["this.c.domain(this.data.map(d",{"_index":2755,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{}}}],["this.categories",{"_index":2757,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{}}}],["this.cdref.detectchanges",{"_index":2713,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.chart",{"_index":1350,"title":{},"body":{"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"components/NgxChart.html":{}}}],["this.chart.update",{"_index":1351,"title":{},"body":{"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"components/NgxChart.html":{}}}],["this.charttype",{"_index":2371,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["this.checkdatachanges(changes[\"data",{"_index":3450,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.checkselectionchange(this.selection",{"_index":3566,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.clearfilters",{"_index":2320,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"components/MapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/VisEvent.html":{}}}],["this.clearfiltersaction",{"_index":847,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{}}}],["this.closed",{"_index":664,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsNodeInfoCard.html":{},"interfaces/NodeData.html":{}}}],["this.closewindow",{"_index":2620,"title":{},"body":{"components/MapComponent.html":{}}}],["this.coldefs",{"_index":1529,"title":{},"body":{"interfaces/Column.html":{}}}],["this.coldefs.map(col",{"_index":1576,"title":{},"body":{"interfaces/Column.html":{}}}],["this.color",{"_index":1110,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["this.colors",{"_index":2374,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["this.colors.length",{"_index":2375,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["this.colors[index",{"_index":2383,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["this.colorscheme",{"_index":2373,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["this.columns",{"_index":1465,"title":{},"body":{"interfaces/Column.html":{}}}],["this.columns.map(c",{"_index":1691,"title":{},"body":{"interfaces/Column.html":{}}}],["this.columns?.map((col,i",{"_index":1530,"title":{},"body":{"interfaces/Column.html":{}}}],["this.columnsaction",{"_index":1487,"title":{},"body":{"interfaces/Column.html":{}}}],["this.columnsaction.children",{"_index":1575,"title":{},"body":{"interfaces/Column.html":{}}}],["this.columnsaction.children?.find(a",{"_index":1694,"title":{},"body":{"interfaces/Column.html":{}}}],["this.context",{"_index":296,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/VisEvent.html":{}}}],["this.context.appservice.formatservice.formatfieldvalue({value",{"_index":552,"title":{},"body":{"classes/BaseProvider.html":{}}}],["this.context.appservice.getccaggregation(aggregation",{"_index":370,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{}}}],["this.context.appservice.getcolumn(type.field",{"_index":550,"title":{},"body":{"classes/BaseProvider.html":{}}}],["this.context.appservice.getplurallabel(col",{"_index":373,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{}}}],["this.context.appservice.parseexpr(item.value.tostring",{"_index":275,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{}}}],["this.context.edges",{"_index":3777,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["this.context.edges.clear",{"_index":3760,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["this.context.exprbuilder.concatandexpr([exprfrom",{"_index":619,"title":{},"body":{"classes/BaseProvider.html":{}}}],["this.context.exprbuilder.makeexpr(edge.type.field",{"_index":601,"title":{},"body":{"classes/BaseProvider.html":{}}}],["this.context.exprbuilder.makeexpr(node.type.field",{"_index":589,"title":{},"body":{"classes/BaseProvider.html":{}}}],["this.context.exprbuilder.makeexpr(nodefrom.type.field",{"_index":614,"title":{},"body":{"classes/BaseProvider.html":{}}}],["this.context.exprbuilder.makeexpr(nodeto.type.field",{"_index":617,"title":{},"body":{"classes/BaseProvider.html":{}}}],["this.context.intlservice.formatmessage(\"msg#network.actions.expandnode",{"_index":357,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{}}}],["this.context.intlservice.formatmessage(\"msg#network.actions.expandnodewith",{"_index":367,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{}}}],["this.context.intlservice.formatmessage(\"msg#network.actions.fetchmoreagg",{"_index":351,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{}}}],["this.context.intlservice.formatmessage(\"msg#network.actions.filtersearch",{"_index":588,"title":{},"body":{"classes/BaseProvider.html":{}}}],["this.context.intlservice.formatmessage(\"msg#network.actions.filtersearch2",{"_index":608,"title":{},"body":{"classes/BaseProvider.html":{}}}],["this.context.intlservice.formatmessage(col",{"_index":374,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{}}}],["this.context.name",{"_index":3753,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["this.context.nodes.clear",{"_index":3759,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["this.context.searchservice.getmultipleresults(_queries",{"_index":2058,"title":{},"body":{"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{}}}],["this.context.searchservice.getresults(query",{"_index":223,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{}}}],["this.context.searchservice.getresults(this.query",{"_index":487,"title":{},"body":{"classes/AsyncRecordsProvider.html":{}}}],["this.context.searchservice.query",{"_index":202,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{}}}],["this.copyaction",{"_index":1991,"title":{},"body":{"components/DataModalComponent.html":{}}}],["this.copytoclipboard",{"_index":1642,"title":{},"body":{"interfaces/Column.html":{}}}],["this.createactions",{"_index":1513,"title":{},"body":{"interfaces/Column.html":{}}}],["this.createchartoptions",{"_index":2400,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["this.createcolumns",{"_index":1503,"title":{},"body":{"interfaces/Column.html":{}}}],["this.createdatapoints(aggregation.items",{"_index":3313,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["this.createedge(this.edgetype",{"_index":2067,"title":{},"body":{"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{}}}],["this.createedge(type",{"_index":1898,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["this.createexpandaction(type",{"_index":362,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{}}}],["this.createnode(this.nodetype",{"_index":1840,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["this.createnode(type.nodetypes[1",{"_index":1882,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["this.createrows",{"_index":1505,"title":{},"body":{"interfaces/Column.html":{}}}],["this.currentrange",{"_index":3144,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["this.currentrange[0",{"_index":3145,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["this.currentrange[1",{"_index":3148,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["this.currentselection",{"_index":3567,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.currentselection[0",{"_index":3558,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.currentselection[1",{"_index":3561,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.dampingpref",{"_index":3848,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["this.data",{"_index":877,"title":{},"body":{"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"components/DataModalComponent.html":{},"interfaces/FacetChartDataPoint.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{},"components/FacetNgxChart.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{}}}],["this.data.filter(value",{"_index":1096,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["this.data.foreach(d",{"_index":2725,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{}}}],["this.data.items",{"_index":2349,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["this.data.length",{"_index":3480,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.data.push(datum",{"_index":2724,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{}}}],["this.data?.column",{"_index":845,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{}}}],["this.data?.items",{"_index":896,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{}}}],["this.data?.items?.filter((item",{"_index":897,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{}}}],["this.data?.map(series",{"_index":3616,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.datafiltered",{"_index":1095,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["this.datapoints",{"_index":2347,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["this.datapoints.find(_datapoint",{"_index":2410,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["this.datapoints.findindex(datapoint",{"_index":2377,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["this.datapoints.push",{"_index":2350,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["this.dataset",{"_index":2041,"title":{},"body":{"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{}}}],["this.dataset.addnodes(node",{"_index":1843,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["this.dataset.clear",{"_index":298,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"classes/BaseProvider.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["this.dataset.getadjacentedges(node.id",{"_index":1942,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["this.dataset.getadjacentedges(node.id).foreach(e",{"_index":1953,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["this.dataset.getconnectednodes(node.id",{"_index":323,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{}}}],["this.dataset.getnode(node.id",{"_index":1944,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["this.dataset.getnode(this.getnodeid(this.nodetype",{"_index":1837,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["this.dataset.hasnode(node.id",{"_index":2081,"title":{},"body":{"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{}}}],["this.dataset.merge(data",{"_index":290,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["this.dataset.merge(dataset",{"_index":1918,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["this.datasource",{"_index":1586,"title":{},"body":{"interfaces/Column.html":{}}}],["this.datasource.appservice",{"_index":2487,"title":{},"body":{"components/FacetWrapperComponent.html":{}}}],["this.datasource.facetservice",{"_index":2488,"title":{},"body":{"components/FacetWrapperComponent.html":{}}}],["this.datasource.latestresults",{"_index":2481,"title":{},"body":{"components/FacetWrapperComponent.html":{}}}],["this.datasource?.destroy",{"_index":1677,"title":{},"body":{"interfaces/Column.html":{}}}],["this.daterangecontrol",{"_index":854,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{}}}],["this.daterangecontrol.setvalue(value",{"_index":864,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{}}}],["this.daterangecontrol.valuechanges",{"_index":869,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{}}}],["this.dates",{"_index":2992,"title":{},"body":{"components/ResultTimeline.html":{}}}],["this.debouncesync",{"_index":3880,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["this.defaultcolumnwidth",{"_index":1550,"title":{},"body":{"interfaces/Column.html":{}}}],["this.displaycheckbox",{"_index":1567,"title":{},"body":{"interfaces/Column.html":{}}}],["this.displayemptydistributionintervals",{"_index":895,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{}}}],["this.downloadcsv",{"_index":1646,"title":{},"body":{"interfaces/Column.html":{}}}],["this.drawgrips",{"_index":3436,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.drawxaxis",{"_index":2700,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.drawyaxis",{"_index":2697,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.edge.context.nodes.get(this.edge.from",{"_index":667,"title":{},"body":{"components/BsEdgeInfoCard.html":{}}}],["this.edge.context.nodes.get(this.edge.to",{"_index":669,"title":{},"body":{"components/BsEdgeInfoCard.html":{}}}],["this.edgeclicked.next",{"_index":3835,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["this.edgeclicked.subscribe((edge",{"_index":3745,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["this.edgeidx.clear",{"_index":2195,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["this.edgeidx.delete(id",{"_index":2299,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["this.edgeidx.get(id",{"_index":2179,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["this.edgeidx.has(id",{"_index":2175,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["this.edgeidx.set(edge.id",{"_index":2295,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["this.edgeseparator",{"_index":531,"title":{},"body":{"classes/BaseProvider.html":{}}}],["this.edgetype",{"_index":2053,"title":{},"body":{"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{}}}],["this.edgetype.getquery(node",{"_index":2052,"title":{},"body":{"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{}}}],["this.edgetype.nodetypes[0",{"_index":2033,"title":{},"body":{"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{}}}],["this.edgetype.trigger",{"_index":2080,"title":{},"body":{"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{}}}],["this.edgetypes.filter(type",{"_index":303,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{}}}],["this.edgetypes.foreach(type",{"_index":301,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["this.edgetypes.length",{"_index":1950,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["this.el.nativeelement",{"_index":1167,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.eventclicked.next(event",{"_index":3308,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["this.events",{"_index":2993,"title":{},"body":{"components/ResultTimeline.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["this.events$[i",{"_index":3213,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["this.events$[i].next(this.getrecordsasevents(this.events[i",{"_index":3142,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["this.events.concat",{"_index":3653,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.events.findindex(e",{"_index":3139,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["this.events.foreach((config",{"_index":3212,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["this.events.map(_",{"_index":3183,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["this.expanded",{"_index":665,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsNodeInfoCard.html":{},"interfaces/NodeData.html":{}}}],["this.exportvaluegetter",{"_index":1708,"title":{},"body":{"interfaces/Column.html":{}}}],["this.exprbuilder.concatandexpr",{"_index":2616,"title":{},"body":{"components/MapComponent.html":{}}}],["this.exprbuilder.concatorexpr(exprs",{"_index":3293,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["this.exprbuilder.makeexpr(this.moneycolumn",{"_index":2848,"title":{},"body":{"interfaces/MoneyDatum.html":{}}}],["this.exprbuilder.makeexpr(this.moneyvaluecolumn",{"_index":2794,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{}}}],["this.exprbuilder.makenumericalexpr",{"_index":919,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{}}}],["this.exprbuilder.makenumericalexpr(this.field",{"_index":921,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{}}}],["this.exprbuilder.makenumericalexpr(this.latitudefield",{"_index":2617,"title":{},"body":{"components/MapComponent.html":{}}}],["this.exprbuilder.makenumericalexpr(this.longitudefield",{"_index":2618,"title":{},"body":{"components/MapComponent.html":{}}}],["this.exprbuilder.makerangeexpr(this.field",{"_index":918,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{}}}],["this.facetservice",{"_index":1668,"title":{},"body":{"interfaces/Column.html":{}}}],["this.facetservice.addfiltersearch(this.getname",{"_index":2405,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["this.facetservice.addfiltersearch(this.name",{"_index":886,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{}}}],["this.facetservice.clearfilterssearch(this.getname",{"_index":2322,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["this.facetservice.clearfilterssearch(this.name",{"_index":852,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{}}}],["this.facetservice.filteredindex(this.data",{"_index":927,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{}}}],["this.facetservice.formatvalue(item",{"_index":2351,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["this.facetservice.getaggregation",{"_index":908,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{}}}],["this.facetservice.getaggregation(aggregationname",{"_index":3246,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["this.facetservice.getaggregation(this.aggregation",{"_index":2396,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["this.facetservice.getaggregationitemsfiltered",{"_index":925,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{}}}],["this.facetservice.getaggregationlabel(agg",{"_index":2332,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["this.facetservice.getaggregationlabel(this.aggregation",{"_index":2326,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["this.facetservice.hasfiltered(this.getname",{"_index":2344,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["this.facetservice.hasfiltered(this.name",{"_index":882,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{},"components/FacetWrapperComponent.html":{}}}],["this.facetservice.itemfiltered(this.getname",{"_index":2407,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["this.facetservice.removefiltersearch(this.getname",{"_index":2406,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["this.facetservice.removefiltersearch(this.name",{"_index":888,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{}}}],["this.fetchaggregation(aggregationname",{"_index":3249,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["this.fetchaggregations([type",{"_index":352,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{}}}],["this.fetchaggregations(types",{"_index":307,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{}}}],["this.field",{"_index":920,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{},"components/FacetWrapperComponent.html":{}}}],["this.filterarea",{"_index":2605,"title":{},"body":{"components/MapComponent.html":{}}}],["this.filteredcolor",{"_index":2380,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["this.fitbounds",{"_index":2626,"title":{},"body":{"components/MapComponent.html":{}}}],["this.fitnetwork",{"_index":3779,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["this.form",{"_index":857,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{},"interfaces/VisEvent.html":{}}}],["this.form.valid",{"_index":872,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{}}}],["this.form.valuechanges.subscribe(_",{"_index":3871,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["this.formatcontent",{"_index":1512,"title":{},"body":{"interfaces/Column.html":{},"components/DataModalComponent.html":{}}}],["this.formatdayrequest(selection[0",{"_index":3284,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["this.formatdayrequest(selection[1",{"_index":3285,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["this.formatservice.formatraw(params.value",{"_index":1661,"title":{},"body":{"interfaces/Column.html":{}}}],["this.formatservice.formatraw(this.model.cell",{"_index":1996,"title":{},"body":{"components/DataModalComponent.html":{}}}],["this.formatservice.formatvalue(params.value",{"_index":1659,"title":{},"body":{"interfaces/Column.html":{}}}],["this.formatservice.formatvalue(this.model.cell",{"_index":1994,"title":{},"body":{"components/DataModalComponent.html":{}}}],["this.formatservice.moneyformatter(datum.value",{"_index":2850,"title":{},"body":{"interfaces/MoneyDatum.html":{}}}],["this.formbuilder.group",{"_index":858,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{},"interfaces/VisEvent.html":{}}}],["this.fromnode",{"_index":666,"title":{},"body":{"components/BsEdgeInfoCard.html":{}}}],["this.georecords[0][this.latitudefield",{"_index":2634,"title":{},"body":{"components/MapComponent.html":{}}}],["this.georecords[0][this.longitudefield",{"_index":2631,"title":{},"body":{"components/MapComponent.html":{}}}],["this.getadjacentedges(neighbor.id).length",{"_index":2226,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["this.getadjacentedges(nodeid",{"_index":2232,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["this.getadjacentedges(nodeid).foreach(edge",{"_index":2220,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["this.getaggregation(aggregationname",{"_index":902,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{}}}],["this.getaggregation(config.aggregation",{"_index":3221,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["this.getaggregation(config.aggregation).pipe",{"_index":3228,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["this.getaggregation(this.aggregation",{"_index":878,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{}}}],["this.getaggregationlabel(type.aggregation",{"_index":350,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{}}}],["this.getd3timeinterval(resolution",{"_index":3331,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["this.getdata(this.context",{"_index":519,"title":{},"body":{"classes/BaseProvider.html":{}}}],["this.getedge(e.id)?.visible",{"_index":2283,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["this.getedge(edge.id",{"_index":2260,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["this.getedgeid(fromnode",{"_index":566,"title":{},"body":{"classes/BaseProvider.html":{}}}],["this.getedges().filter(e",{"_index":2188,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["this.geteventaggregation(config",{"_index":3216,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["this.getitem(datapoint",{"_index":2403,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["this.getitem(this.datapoints[index",{"_index":2379,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["this.getname",{"_index":2398,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["this.getnode(e.from",{"_index":2233,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["this.getnode(edge.from",{"_index":2221,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["this.getnode(n.id)?.visible",{"_index":2281,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["this.getnode(node.id",{"_index":2243,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["this.getnodeid(type",{"_index":553,"title":{},"body":{"classes/BaseProvider.html":{}}}],["this.getnodes().filter(n",{"_index":2185,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["this.getnodevalue(node",{"_index":590,"title":{},"body":{"classes/BaseProvider.html":{}}}],["this.getnodevalue(nodefrom",{"_index":615,"title":{},"body":{"classes/BaseProvider.html":{}}}],["this.getnodevalue(nodeto",{"_index":618,"title":{},"body":{"classes/BaseProvider.html":{}}}],["this.getnodevalue(sourcenode",{"_index":215,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{}}}],["this.getrangevalue",{"_index":863,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{}}}],["this.gettimeseries(agg",{"_index":3205,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["this.gettimeseries(bestaggregation",{"_index":3274,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["this.gravitypref",{"_index":3852,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["this.gridactions",{"_index":1623,"title":{},"body":{"interfaces/Column.html":{}}}],["this.gridactions.push(action",{"_index":1626,"title":{},"body":{"interfaces/Column.html":{}}}],["this.gridactions.push(new",{"_index":1629,"title":{},"body":{"interfaces/Column.html":{}}}],["this.gridactions.push(this.columnsaction",{"_index":1628,"title":{},"body":{"interfaces/Column.html":{}}}],["this.gridapi",{"_index":1727,"title":{},"body":{"interfaces/Column.html":{}}}],["this.gridapi.setdatasource(this.datasource",{"_index":1588,"title":{},"body":{"interfaces/Column.html":{}}}],["this.gridapi?.exportdataascsv(this.getexportparams",{"_index":1717,"title":{},"body":{"interfaces/Column.html":{}}}],["this.gridapi?.foreachnode(node",{"_index":1497,"title":{},"body":{"interfaces/Column.html":{}}}],["this.gridapi?.getdataascsv(this.getexportparams",{"_index":1713,"title":{},"body":{"interfaces/Column.html":{}}}],["this.gridapi?.getselectedrows",{"_index":1744,"title":{},"body":{"interfaces/Column.html":{}}}],["this.gridapi?.refreshcells({force",{"_index":1723,"title":{},"body":{"interfaces/Column.html":{}}}],["this.gridapi?.setfiltermodel",{"_index":1687,"title":{},"body":{"interfaces/Column.html":{}}}],["this.gridapi?.setfiltermodel(model",{"_index":1610,"title":{},"body":{"interfaces/Column.html":{}}}],["this.gridcolumnapi",{"_index":1584,"title":{},"body":{"interfaces/Column.html":{}}}],["this.gridcolumnapi?.applycolumnstate",{"_index":1688,"title":{},"body":{"interfaces/Column.html":{}}}],["this.gridcolumnapi?.applycolumnstate(model",{"_index":1620,"title":{},"body":{"interfaces/Column.html":{}}}],["this.gridcolumnapi?.autosizeallcolumns",{"_index":1720,"title":{},"body":{"interfaces/Column.html":{}}}],["this.gridcolumnapi?.setcolumnvisible(col.field",{"_index":1578,"title":{},"body":{"interfaces/Column.html":{}}}],["this.grips",{"_index":3462,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.grips$.append(\"path",{"_index":3471,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.grips$.append(\"text",{"_index":3473,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.grips$.attr(\"display",{"_index":3583,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.grips$.selectall(\"path\").attr(\"d",{"_index":3435,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.grips$.selectall('.grip",{"_index":3586,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.groupedevents",{"_index":3520,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.groupevents(5",{"_index":3521,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.hasnode(edge.to",{"_index":2293,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["this.height",{"_index":1107,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.hiderecordnode",{"_index":1842,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["this.initdone",{"_index":3056,"title":{},"body":{"components/ResultTimeline.html":{}}}],["this.innerheight",{"_index":3425,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.innerwidth",{"_index":2687,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.instance",{"_index":3410,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.intlservice.events.subscribe(e",{"_index":3408,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.intlservice.formatdate(this.xt.invert(selection[index",{"_index":3588,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.intlservice.formatmessage(col.$column?.label",{"_index":1538,"title":{},"body":{"interfaces/Column.html":{}}}],["this.intlservice.formatmessage(p.name",{"_index":3798,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["this.intlservice.formatnumber(value",{"_index":2387,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["this.intlsubscription",{"_index":3407,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.intlsubscription.unsubscribe",{"_index":3633,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.isedgevisible(type",{"_index":1884,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["this.isfilteractive",{"_index":2502,"title":{},"body":{"components/FacetWrapperComponent.html":{}}}],["this.isfiltered(item",{"_index":885,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/FacetChartDataPoint.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{},"components/FacetNgxChart.html":{}}}],["this.istree",{"_index":2493,"title":{},"body":{"components/FacetWrapperComponent.html":{}}}],["this.itemclickevent",{"_index":1348,"title":{},"body":{"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"components/NgxChart.html":{}}}],["this.itemclickevent.emit(datapoint",{"_index":1385,"title":{},"body":{"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"components/NgxChart.html":{}}}],["this.items",{"_index":894,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{},"components/ResultTimeline.html":{}}}],["this.items.push({id",{"_index":3017,"title":{},"body":{"components/ResultTimeline.html":{}}}],["this.items.splice(0",{"_index":2991,"title":{},"body":{"components/ResultTimeline.html":{}}}],["this.left",{"_index":1315,"title":{},"body":{"components/BsTooltipComponent.html":{}}}],["this.line",{"_index":3420,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.localechange",{"_index":1356,"title":{},"body":{"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"components/NgxChart.html":{}}}],["this.localechange.unsubscribe",{"_index":1359,"title":{},"body":{"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"components/NgxChart.html":{}}}],["this.makedata",{"_index":2392,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["this.makedatasource",{"_index":1587,"title":{},"body":{"interfaces/Column.html":{}}}],["this.mapstyles",{"_index":2622,"title":{},"body":{"components/MapComponent.html":{}}}],["this.margin.bottom",{"_index":1109,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.margin.left",{"_index":1103,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.margin.right",{"_index":1104,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.margin.top",{"_index":1108,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.max_dates",{"_index":3030,"title":{},"body":{"components/ResultTimeline.html":{}}}],["this.maxaggregationdate",{"_index":3204,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["this.maxdate",{"_index":3149,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{}}}],["this.maxx",{"_index":1091,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["this.maxy",{"_index":1094,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["this.mergedatasets(datasets.filter(d",{"_index":3767,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["this.mergedevents",{"_index":3184,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["this.mergedtimeseries",{"_index":3178,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["this.min_dates",{"_index":3029,"title":{},"body":{"components/ResultTimeline.html":{}}}],["this.min_year",{"_index":3015,"title":{},"body":{"components/ResultTimeline.html":{}}}],["this.minaggregationdate",{"_index":3203,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["this.mindate",{"_index":3146,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{}}}],["this.minzoomdays",{"_index":3513,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.modalservice.open(datamodalcomponent",{"_index":1735,"title":{},"body":{"interfaces/Column.html":{}}}],["this.model.cccolumn",{"_index":1995,"title":{},"body":{"components/DataModalComponent.html":{}}}],["this.moneyaggregation",{"_index":2720,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{}}}],["this.mutatenode(node",{"_index":2114,"title":{},"body":{"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{}}}],["this.mutatenodes(sourcenodes",{"_index":2107,"title":{},"body":{"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{}}}],["this.name",{"_index":926,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{},"components/FacetWrapperComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/VisEvent.html":{}}}],["this.neighbors",{"_index":1244,"title":{},"body":{"components/BsNodeInfoCard.html":{},"interfaces/NodeData.html":{}}}],["this.neighbors[type",{"_index":1263,"title":{},"body":{"components/BsNodeInfoCard.html":{},"interfaces/NodeData.html":{}}}],["this.neighbors[type].push",{"_index":1265,"title":{},"body":{"components/BsNodeInfoCard.html":{},"interfaces/NodeData.html":{}}}],["this.networkservice.click.subscribe((eventdata",{"_index":3812,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["this.networkservice.fit(this.name",{"_index":3806,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["this.networkservice.off(this.name",{"_index":3836,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["this.networkservice.on(this.name",{"_index":3811,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["this.networkservice.setoptions(this.name",{"_index":3814,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["this.ngonchanges",{"_index":2334,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["this.node",{"_index":1242,"title":{},"body":{"components/BsNodeInfoCard.html":{},"interfaces/NodeData.html":{}}}],["this.node.context.edges",{"_index":1245,"title":{},"body":{"components/BsNodeInfoCard.html":{},"interfaces/NodeData.html":{}}}],["this.node.context.nodes.get(id",{"_index":1252,"title":{},"body":{"components/BsNodeInfoCard.html":{},"interfaces/NodeData.html":{}}}],["this.node.count",{"_index":1243,"title":{},"body":{"components/BsNodeInfoCard.html":{},"interfaces/NodeData.html":{}}}],["this.node.id",{"_index":1249,"title":{},"body":{"components/BsNodeInfoCard.html":{},"interfaces/NodeData.html":{}}}],["this.nodecache.has(node.id",{"_index":2051,"title":{},"body":{"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{}}}],["this.nodecache[node.id",{"_index":2115,"title":{},"body":{"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{}}}],["this.nodeclicked.next(node",{"_index":3832,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["this.nodeclicked.subscribe((node",{"_index":3742,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["this.nodedata",{"_index":1241,"title":{},"body":{"components/BsNodeInfoCard.html":{},"interfaces/NodeData.html":{}}}],["this.nodeidx.clear",{"_index":2194,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["this.nodeidx.delete(id",{"_index":2297,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["this.nodeidx.get(id",{"_index":2177,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["this.nodeidx.has(id",{"_index":2173,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["this.nodeidx.set(node.id",{"_index":2246,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["this.nodeidx[id",{"_index":2274,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["this.nodetype",{"_index":1850,"title":{},"body":{"interfaces/CustomData.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["this.nodetype.getquery(node",{"_index":2106,"title":{},"body":{"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{}}}],["this.nodetype.name",{"_index":1853,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["this.nodetype.nodeoptions",{"_index":2126,"title":{},"body":{"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{}}}],["this.nodetype.nodeoptions(node",{"_index":2127,"title":{},"body":{"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{}}}],["this.nodetype.trigger",{"_index":2128,"title":{},"body":{"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{}}}],["this.onaxisclicked(d",{"_index":1153,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["this.onbrush",{"_index":3429,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.onbrushend",{"_index":3431,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.onmousemove",{"_index":2705,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.onmouseout",{"_index":2818,"title":{},"body":{"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.onnetworkclick(eventdata",{"_index":3813,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["this.onopensettings(true",{"_index":3889,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["this.onresize",{"_index":1355,"title":{},"body":{"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"components/NgxChart.html":{}}}],["this.onzoom",{"_index":3541,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.onzoomend",{"_index":3542,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.openedwindow",{"_index":2639,"title":{},"body":{"components/MapComponent.html":{}}}],["this.openedwindow.close",{"_index":2638,"title":{},"body":{"components/MapComponent.html":{}}}],["this.options",{"_index":2370,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["this.options.colorscheme",{"_index":1370,"title":{},"body":{"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"components/NgxChart.html":{}}}],["this.options.getitemcolor",{"_index":2376,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["this.optionsprefs",{"_index":3815,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["this.optionsprefs.physics",{"_index":3840,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["this.optionsprefs.physics.barneshut",{"_index":3842,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["this.optionsprefs.physics.barneshut.centralgravity",{"_index":3851,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["this.optionsprefs.physics.barneshut.damping",{"_index":3847,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["this.optionsprefs.physics.barneshut.gravitationalconstant",{"_index":3849,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["this.optionsprefs.physics.barneshut.springconstant",{"_index":3845,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["this.optionsprefs.physics.barneshut.springlength",{"_index":3843,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["this.params",{"_index":2489,"title":{},"body":{"components/FacetWrapperComponent.html":{}}}],["this.params.coldef.field",{"_index":2492,"title":{},"body":{"components/FacetWrapperComponent.html":{}}}],["this.params.rowmodel['datasource",{"_index":2480,"title":{},"body":{"components/FacetWrapperComponent.html":{}}}],["this.parseentity(item",{"_index":2722,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{}}}],["this.parseentity(money.value",{"_index":2826,"title":{},"body":{"interfaces/MoneyDatum.html":{}}}],["this.prefs.delete(\"ag",{"_index":1580,"title":{},"body":{"interfaces/Column.html":{}}}],["this.prefs.delete(this.name",{"_index":3887,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["this.prefs.get(\"ag",{"_index":1510,"title":{},"body":{"interfaces/Column.html":{}}}],["this.prefs.get(this.name",{"_index":3893,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["this.prefs.set(\"ag",{"_index":1581,"title":{},"body":{"interfaces/Column.html":{}}}],["this.prefs.set(this.name",{"_index":3872,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["this.prefs.sync",{"_index":1702,"title":{},"body":{"interfaces/Column.html":{},"interfaces/VisEvent.html":{}}}],["this.processednodes",{"_index":2043,"title":{},"body":{"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{}}}],["this.processednodes.filter(id",{"_index":2044,"title":{},"body":{"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{}}}],["this.processednodes.indexof(node.id",{"_index":2049,"title":{},"body":{"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{}}}],["this.processednodes.push(node.id",{"_index":2076,"title":{},"body":{"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{}}}],["this.processednodes.splice(0",{"_index":2075,"title":{},"body":{"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{}}}],["this.processnode(node",{"_index":2082,"title":{},"body":{"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{}}}],["this.provider",{"_index":585,"title":{},"body":{"classes/BaseProvider.html":{}}}],["this.provider.next(this.dataset",{"_index":243,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"interfaces/CustomData.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["this.providers.foreach(p",{"_index":3743,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["this.providers.map(p",{"_index":3764,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["this.providerssubscription",{"_index":3763,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["this.providerssubscription.unsubscribe",{"_index":3762,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["this.query",{"_index":486,"title":{},"body":{"classes/AsyncRecordsProvider.html":{},"interfaces/Column.html":{}}}],["this.r",{"_index":2691,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{}}}],["this.r(datum.count",{"_index":2801,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{}}}],["this.r.domain(rextent",{"_index":2754,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{}}}],["this.rangechange.next(this.xt.domain",{"_index":3612,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.rangeinit.next(this.xt.domain",{"_index":3517,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.record.id",{"_index":3013,"title":{},"body":{"components/ResultTimeline.html":{}}}],["this.record.modified.length>=10",{"_index":3035,"title":{},"body":{"components/ResultTimeline.html":{}}}],["this.recordclicked.next(datum.record",{"_index":2847,"title":{},"body":{"interfaces/MoneyDatum.html":{}}}],["this.recordclicked.next(record",{"_index":2641,"title":{},"body":{"components/MapComponent.html":{}}}],["this.refreshaction",{"_index":3747,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["this.removeedge(id",{"_index":2214,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["this.removeedge(ids",{"_index":2215,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["this.removeedges(edge.id",{"_index":2223,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["this.removenode(id",{"_index":2211,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["this.removenode(ids",{"_index":2212,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["this.removenodes(neighbor.id",{"_index":2227,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["this.rendercell",{"_index":1543,"title":{},"body":{"interfaces/Column.html":{}}}],["this.replacecurrent",{"_index":887,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{}}}],["this.repulsionpref",{"_index":3850,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["this.resetaction",{"_index":520,"title":{},"body":{"classes/BaseProvider.html":{}}}],["this.resetstate",{"_index":1633,"title":{},"body":{"interfaces/Column.html":{}}}],["this.results",{"_index":909,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/FacetChartDataPoint.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{},"components/FacetNgxChart.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["this.results.aggregations",{"_index":2718,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{}}}],["this.results.aggregations.find(a",{"_index":2482,"title":{},"body":{"components/FacetWrapperComponent.html":{}}}],["this.results.records",{"_index":2355,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["this.results.records?.foreach(record",{"_index":2824,"title":{},"body":{"interfaces/MoneyDatum.html":{}}}],["this.results?.records",{"_index":1594,"title":{},"body":{"interfaces/Column.html":{}}}],["this.right",{"_index":1322,"title":{},"body":{"components/BsTooltipComponent.html":{}}}],["this.rowdata",{"_index":1593,"title":{},"body":{"interfaces/Column.html":{}}}],["this.rowmodeltype",{"_index":1585,"title":{},"body":{"interfaces/Column.html":{}}}],["this.searchservice",{"_index":911,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/Column.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{}}}],["this.searchservice.breadcrumbs.findselect(this.name",{"_index":3787,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["this.searchservice.getresults(query",{"_index":3253,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["this.searchservice.query",{"_index":1591,"title":{},"body":{"interfaces/Column.html":{}}}],["this.searchservice.query.addselect(expr",{"_index":2796,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["this.searchservice.query.findselect(this.name",{"_index":3153,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["this.searchservice.query.orderby",{"_index":1679,"title":{},"body":{"interfaces/Column.html":{}}}],["this.searchservice.query.removeselect(i",{"_index":1684,"title":{},"body":{"interfaces/Column.html":{}}}],["this.searchservice.query.removeselect(this.name",{"_index":2604,"title":{},"body":{"components/MapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/VisEvent.html":{}}}],["this.searchservice.querystream.subscribe",{"_index":862,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{}}}],["this.searchservice.search",{"_index":1685,"title":{},"body":{"interfaces/Column.html":{},"components/MapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/VisEvent.html":{}}}],["this.searchservice.search(undefined",{"_index":3294,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["this.select(node",{"_index":3750,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["this.selectedcolor",{"_index":2382,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["this.selectedge",{"_index":3754,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["this.selectedge(edge",{"_index":3829,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["this.selectedge(this.context.edges.get(event.edges[0",{"_index":3825,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["this.selecteditems",{"_index":2760,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{}}}],["this.selecteditems.add(item.value",{"_index":2763,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{}}}],["this.selectedvalues.add(v.tolowercase",{"_index":2367,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["this.selectedvalues.add(v.value.tolowercase",{"_index":2368,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["this.selectedvalues.add(val.tolowercase",{"_index":2363,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["this.selectedvalues.clear",{"_index":2354,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["this.selectfield",{"_index":2323,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["this.selectfield.update",{"_index":2395,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["this.selection",{"_index":866,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{}}}],["this.selection[0].gettime",{"_index":3167,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["this.selection[1].gettime",{"_index":3166,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["this.selectionchange",{"_index":2393,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["this.selectionchange.next(this.currentselection",{"_index":3600,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.selectionchange.unsubscribe",{"_index":2401,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["this.selectionservice",{"_index":1669,"title":{},"body":{"interfaces/Column.html":{}}}],["this.selectionservice.events.subscribe(e",{"_index":2681,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{}}}],["this.selectionservice.events.subscribe(event",{"_index":2394,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["this.selectionservice.getselectedids",{"_index":1746,"title":{},"body":{"interfaces/Column.html":{}}}],["this.selectionservice.getselecteditems().foreach(r",{"_index":2761,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{}}}],["this.selectionservice.toggleselectedrecords(row",{"_index":1757,"title":{},"body":{"interfaces/Column.html":{}}}],["this.selectionservice.toggleselectedrecords({id",{"_index":1752,"title":{},"body":{"interfaces/Column.html":{}}}],["this.selectionsubscription",{"_index":3071,"title":{},"body":{"classes/SelectedRecordsProvider.html":{}}}],["this.selectionsubscription?.unsubscribe",{"_index":3076,"title":{},"body":{"classes/SelectedRecordsProvider.html":{}}}],["this.selectnode",{"_index":3755,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["this.selectnode(node",{"_index":3828,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["this.selectnode(this.context.nodes.get(event.nodes[0",{"_index":3827,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["this.setcustomdateselect(range",{"_index":924,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{}}}],["this.setcustomdateselect(value",{"_index":874,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{}}}],["this.shiftdate(item.date",{"_index":3343,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["this.showcustomrange",{"_index":890,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{}}}],["this.showtooltip",{"_index":2842,"title":{},"body":{"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.skips[type.aggregation",{"_index":302,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{}}}],["this.skips[type.aggregation+(sourcenode?.id",{"_index":209,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{}}}],["this.skips[type.aggregation+node.id",{"_index":326,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{}}}],["this.springconstantpref",{"_index":3846,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["this.springlengthpref",{"_index":3844,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["this.style",{"_index":2623,"title":{},"body":{"components/MapComponent.html":{}}}],["this.subscriptions.foreach(s",{"_index":1515,"title":{},"body":{"interfaces/Column.html":{}}}],["this.subscriptions.map((item",{"_index":880,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{}}}],["this.subscriptions.push",{"_index":861,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{}}}],["this.subscriptions.push(this.selectionservice.events.subscribe(event",{"_index":1492,"title":{},"body":{"interfaces/Column.html":{}}}],["this.tickformatter",{"_index":2372,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["this.timeline.addcustomtime(this.record.modified.substring(0,10",{"_index":3036,"title":{},"body":{"components/ResultTimeline.html":{}}}],["this.timeline.on('select",{"_index":3037,"title":{},"body":{"components/ResultTimeline.html":{}}}],["this.timeline.removecustomtime(\"date",{"_index":3032,"title":{},"body":{"components/ResultTimeline.html":{}}}],["this.timeseries",{"_index":899,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["this.timeseries$[i",{"_index":3192,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["this.timeseries.foreach((config",{"_index":3191,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["this.timeseries.map(_",{"_index":3176,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["this.timeseries.push",{"_index":903,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{}}}],["this.toggleformatcontent(action",{"_index":1650,"title":{},"body":{"interfaces/Column.html":{}}}],["this.tonode",{"_index":668,"title":{},"body":{"components/BsEdgeInfoCard.html":{}}}],["this.toolbaractions",{"_index":1624,"title":{},"body":{"interfaces/Column.html":{}}}],["this.tooltipdatapoints",{"_index":3615,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.tooltipitem",{"_index":1156,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.tooltipvaluegetter",{"_index":1535,"title":{},"body":{"interfaces/Column.html":{}}}],["this.tooltipx",{"_index":2843,"title":{},"body":{"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.top",{"_index":1318,"title":{},"body":{"components/BsTooltipComponent.html":{}}}],["this.turnofftooltip",{"_index":2714,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.uiservice.addelementresizelistener(this.wrapper.nativeelement",{"_index":1354,"title":{},"body":{"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"components/NgxChart.html":{}}}],["this.uiservice.copytoclipboard(data",{"_index":1715,"title":{},"body":{"interfaces/Column.html":{}}}],["this.uiservice.copytoclipboard(this.data",{"_index":1992,"title":{},"body":{"components/DataModalComponent.html":{}}}],["this.uiservice.removeelementresizelistener(this.wrapper.nativeelement",{"_index":1358,"title":{},"body":{"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"components/NgxChart.html":{}}}],["this.updateactions",{"_index":3749,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["this.updateaxes",{"_index":2716,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.updatebrush",{"_index":3454,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.updatechart",{"_index":1353,"title":{},"body":{"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"components/NgxChart.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.updatecombinedaggregation(config",{"_index":3301,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["this.updatedata",{"_index":1993,"title":{},"body":{"components/DataModalComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/VisEvent.html":{}}}],["this.updatedataset(records",{"_index":3074,"title":{},"body":{"classes/SelectedRecordsProvider.html":{}}}],["this.updatedataset(results.aggregations",{"_index":226,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{}}}],["this.updatedataset(results.records",{"_index":489,"title":{},"body":{"classes/AsyncRecordsProvider.html":{}}}],["this.updatedataset(this.selectionservice.getselecteditems",{"_index":3075,"title":{},"body":{"classes/SelectedRecordsProvider.html":{}}}],["this.updatedynamicdataset(array.from(map.values",{"_index":2035,"title":{},"body":{"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{}}}],["this.updateevents",{"_index":3188,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{}}}],["this.updatefilterstate(this.query",{"_index":1590,"title":{},"body":{"interfaces/Column.html":{}}}],["this.updategrips(this.brushselection",{"_index":3592,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.updateitems",{"_index":879,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{}}}],["this.updateoptions",{"_index":3756,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["this.updatescales",{"_index":2715,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{}}}],["this.updatescales(this.data",{"_index":3483,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.updateselecteditems",{"_index":2682,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{}}}],["this.updateselectedvalues",{"_index":2399,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["this.updateselection",{"_index":3445,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.updatesortstate(this.query",{"_index":1592,"title":{},"body":{"interfaces/Column.html":{}}}],["this.updatetimeline",{"_index":2990,"title":{},"body":{"components/ResultTimeline.html":{}}}],["this.updatetimeseries",{"_index":3180,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["this.updatetimeseries(this.timelineaggregation",{"_index":875,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{}}}],["this.updatexaxis",{"_index":3409,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.updatezoom",{"_index":3484,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.viewinit",{"_index":1124,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.vistimelineservice.setitems(this.name",{"_index":3055,"title":{},"body":{"components/ResultTimeline.html":{}}}],["this.width",{"_index":1102,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.wrapper",{"_index":1382,"title":{},"body":{"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"components/NgxChart.html":{}}}],["this.x",{"_index":1099,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.x(datum.category",{"_index":2798,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{}}}],["this.x(datum.date",{"_index":2853,"title":{},"body":{"interfaces/MoneyDatum.html":{}}}],["this.x(item.x",{"_index":1157,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["this.x.bandwidth",{"_index":2752,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{}}}],["this.x.domain",{"_index":2758,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.x.domain(this.data.map(d",{"_index":2749,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{}}}],["this.x.domain(this.xt.domain",{"_index":3502,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.x.domain(xextent",{"_index":2838,"title":{},"body":{"interfaces/MoneyDatum.html":{}}}],["this.x.range([0",{"_index":2699,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.x_inner",{"_index":2688,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{}}}],["this.x_inner(datum.i",{"_index":2799,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{}}}],["this.xaxis",{"_index":1120,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.xaxis$.call(d3.axisbottom(this.xt).ticks(nticks",{"_index":3576,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.xaxis$.call(xaxis",{"_index":2768,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{}}}],["this.xaxis$.selectall(\".domain\").remove",{"_index":2769,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.xaxis.call(d3.axistop(this.x).ticksize(0",{"_index":1137,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["this.xaxis.selectall(\".domain\").remove",{"_index":1139,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["this.xaxis.selectall(\"text",{"_index":1142,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["this.xaxis.selectall('text').each(this.wrap",{"_index":1133,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["this.xaxis.transition(t",{"_index":1130,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["this.xt",{"_index":3412,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.xt(d.date",{"_index":3416,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.xt(event[0].date",{"_index":3632,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.xt(events[0].date",{"_index":3702,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.xt(this.currentselection[0",{"_index":3559,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.xt(this.currentselection[1",{"_index":3562,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.xt.domain",{"_index":3650,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.xt.invert(this.tooltipx",{"_index":3614,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.xt.invert(x",{"_index":3598,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.y",{"_index":1105,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.y(d.value",{"_index":3419,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.y(datum.value",{"_index":2800,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{}}}],["this.y(item.y",{"_index":1158,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["this.y.domain(yextent",{"_index":2753,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{}}}],["this.y.range([this.innerheight",{"_index":2696,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.y.ticks(5",{"_index":2772,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{}}}],["this.y.ticks(nticks",{"_index":3578,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.yaxis",{"_index":1122,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.yaxis$.call(yaxis",{"_index":2788,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.yaxis$.selectall(\".domain\").remove",{"_index":2789,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.yaxis.call(d3.axisleft(this.y).ticksize(0",{"_index":1138,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["this.yaxis.selectall(\".domain\").remove",{"_index":1154,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["this.yaxis.selectall(\"text",{"_index":1155,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["this.yaxis.selectall('text').each(this.wrap",{"_index":1136,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["this.yaxis.transition(t",{"_index":1134,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["this.zoombehavior",{"_index":3536,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.zoombehavior.on(\"end",{"_index":3528,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.zoombehavior.on(\"zoom",{"_index":3527,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.zoombehavior.transform(this.brush",{"_index":3529,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["this.zooming",{"_index":3602,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["though",{"_index":3452,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["three",{"_index":4060,"title":{},"body":{"miscellaneous/functions.html":{}}}],["through",{"_index":2335,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["throw",{"_index":265,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"interfaces/CustomData.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"components/FacetWrapperComponent.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["thumbnail",{"_index":4047,"title":{},"body":{"miscellaneous/functions.html":{}}}],["tick",{"_index":2779,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["tickformat(d3.format(\"~s",{"_index":3579,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["tickformat(this.formatservice.moneyformatter",{"_index":2786,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{}}}],["tickformatter",{"_index":1335,"title":{},"body":{"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"components/NgxChart.html":{}}}],["ticks",{"_index":2777,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["ticks(5",{"_index":2840,"title":{},"body":{"interfaces/MoneyDatum.html":{}}}],["ticksizeinner",{"_index":2784,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{}}}],["tickvalues(yaxisticks",{"_index":2785,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["tile",{"_index":1039,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["tile.clickable:hover",{"_index":1212,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["tile.selected",{"_index":1216,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["tilt",{"_index":1143,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["time",{"_index":470,"title":{},"body":{"classes/AsyncRecordsProvider.html":{},"components/BsHeatmapComponent.html":{},"interfaces/CustomData.html":{},"interfaces/HeatmapItem.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"miscellaneous/functions.html":{}}}],["timeinterval",{"_index":3330,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{}}}],["timeinterval.offset(series[series.length",{"_index":3340,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["timeline",{"_index":742,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"modules/BsTimelineModule.html":{},"components/BsTooltipComponent.html":{},"components/DataModalComponent.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{},"components/FacetNgxChart.html":{},"components/FacetWrapperComponent.html":{},"components/MapComponent.html":{},"interfaces/MoneyDatum.html":{},"components/NgxChart.html":{},"components/ResultTimeline.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineEventType.html":{},"components/TimelineLegendComponent.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"modules/VisTimelineModule.html":{},"dependencies.html":{}}}],["timeline'},{'name",{"_index":715,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"components/BsTooltipComponent.html":{},"components/DataModalComponent.html":{},"components/FacetNgxChart.html":{},"components/FacetWrapperComponent.html":{},"components/MapComponent.html":{},"components/NgxChart.html":{},"components/ResultTimeline.html":{},"components/TimelineLegendComponent.html":{}}}],["timeline.component",{"_index":1286,"title":{},"body":{"modules/BsTimelineModule.html":{},"modules/FinanceModule.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineEventType.html":{},"components/TimelineLegendComponent.html":{},"interfaces/TimelineRecords.html":{}}}],["timeline.component.html",{"_index":2809,"title":{},"body":{"interfaces/MoneyDatum.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{}}}],["timeline.component.scss",{"_index":2810,"title":{},"body":{"interfaces/MoneyDatum.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{}}}],["timeline.component.ts",{"_index":2808,"title":{},"body":{"interfaces/MoneyDatum.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["timeline.html",{"_index":2950,"title":{},"body":{"components/ResultTimeline.html":{}}}],["timeline.name",{"_index":3707,"title":{},"body":{"interfaces/TimelineEventType.html":{},"components/TimelineLegendComponent.html":{}}}],["timeline.ts",{"_index":2949,"title":{},"body":{"components/ResultTimeline.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["timeline.ts:122",{"_index":2976,"title":{},"body":{"components/ResultTimeline.html":{}}}],["timeline.ts:21",{"_index":2970,"title":{},"body":{"components/ResultTimeline.html":{}}}],["timeline.ts:22",{"_index":2974,"title":{},"body":{"components/ResultTimeline.html":{}}}],["timeline.ts:23",{"_index":2963,"title":{},"body":{"components/ResultTimeline.html":{}}}],["timeline.ts:24",{"_index":2964,"title":{},"body":{"components/ResultTimeline.html":{}}}],["timeline.ts:25",{"_index":2969,"title":{},"body":{"components/ResultTimeline.html":{}}}],["timeline.ts:26",{"_index":2967,"title":{},"body":{"components/ResultTimeline.html":{}}}],["timeline.ts:27",{"_index":2968,"title":{},"body":{"components/ResultTimeline.html":{}}}],["timeline.ts:28",{"_index":2965,"title":{},"body":{"components/ResultTimeline.html":{}}}],["timeline.ts:29",{"_index":2973,"title":{},"body":{"components/ResultTimeline.html":{}}}],["timeline.ts:31",{"_index":2978,"title":{},"body":{"components/ResultTimeline.html":{}}}],["timeline.ts:32",{"_index":2961,"title":{},"body":{"components/ResultTimeline.html":{}}}],["timeline.ts:34",{"_index":2980,"title":{},"body":{"components/ResultTimeline.html":{}}}],["timeline.ts:37",{"_index":2975,"title":{},"body":{"components/ResultTimeline.html":{}}}],["timeline.ts:43",{"_index":2977,"title":{},"body":{"components/ResultTimeline.html":{}}}],["timeline/.../facet",{"_index":4101,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["timeline/.../result",{"_index":4106,"title":{},"body":{"miscellaneous/variables.html":{}}}],["timeline/bootstrap/facet",{"_index":745,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["timeline/bootstrap/timeline",{"_index":3705,"title":{},"body":{"interfaces/TimelineEventType.html":{},"components/TimelineLegendComponent.html":{},"coverage.html":{}}}],["timeline/bootstrap/timeline.component.ts",{"_index":3372,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{},"coverage.html":{}}}],["timeline/bootstrap/timeline.module.ts",{"_index":1284,"title":{},"body":{"modules/BsTimelineModule.html":{}}}],["timeline/money",{"_index":2509,"title":{},"body":{"modules/FinanceModule.html":{},"interfaces/MoneyDatum.html":{},"coverage.html":{}}}],["timeline/result",{"_index":2948,"title":{},"body":{"components/ResultTimeline.html":{},"modules/VisTimelineModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["timeline/vis",{"_index":3903,"title":{},"body":{"modules/VisTimelineModule.html":{}}}],["timelineaggregation",{"_index":772,"title":{"interfaces/TimelineAggregation.html":{}},"body":{"components/BsFacetDate.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["timelineaggregation).aggregation",{"_index":3287,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["timelinecombinedaggregations",{"_index":3087,"title":{"interfaces/TimelineCombinedAggregations.html":{}},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["timelinecombinedaggregations).aggregations",{"_index":3300,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["timelinecombinedaggregations).default",{"_index":3288,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["timelinecombinedaggregations).default.aggregation",{"_index":3289,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["timelinedata",{"_index":3096,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"miscellaneous/typealiases.html":{}}}],["timelinedate",{"_index":3084,"title":{"interfaces/TimelineDate.html":{}},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"coverage.html":{}}}],["timelinedate[]).concat(...primaryseries.map(s",{"_index":3491,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["timelinedate|undefined",{"_index":3400,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["timelineevent",{"_index":3085,"title":{"interfaces/TimelineEvent.html":{}},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["timelineevent[]).concat(...events",{"_index":3187,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["timelineeventaggregation",{"_index":3093,"title":{"interfaces/TimelineEventAggregation.html":{}},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["timelineeventaggregation).aggregation",{"_index":3215,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["timelineeventaggregation).subscribe",{"_index":3217,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["timelineeventdata",{"_index":3097,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"miscellaneous/typealiases.html":{}}}],["timelineeventtype",{"_index":3086,"title":{"interfaces/TimelineEventType.html":{}},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineEventType.html":{},"components/TimelineLegendComponent.html":{},"interfaces/TimelineRecords.html":{},"coverage.html":{}}}],["timelineinitialized",{"_index":2953,"title":{},"body":{"components/ResultTimeline.html":{}}}],["timelinelegendcomponent",{"_index":741,"title":{"components/TimelineLegendComponent.html":{}},"body":{"components/BsEdgeInfoCard.html":{},"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"modules/BsTimelineModule.html":{},"components/BsTooltipComponent.html":{},"components/DataModalComponent.html":{},"components/FacetNgxChart.html":{},"components/FacetWrapperComponent.html":{},"components/MapComponent.html":{},"components/NgxChart.html":{},"components/ResultTimeline.html":{},"interfaces/TimelineEventType.html":{},"components/TimelineLegendComponent.html":{},"coverage.html":{},"index.html":{}}}],["timelineoptions",{"_index":2971,"title":{},"body":{"components/ResultTimeline.html":{},"miscellaneous/variables.html":{}}}],["timelinerecords",{"_index":3092,"title":{"interfaces/TimelineRecords.html":{}},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["timelinerecords).field",{"_index":3141,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["timelines",{"_index":3189,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["timelineseries",{"_index":819,"title":{"interfaces/TimelineSeries.html":{}},"body":{"components/BsFacetDate.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineEventType.html":{},"components/TimelineLegendComponent.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["timelineseries).dates",{"_index":3194,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["times",{"_index":2021,"title":{},"body":{"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{}}}],["timeseries",{"_index":759,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{}}}],["timeseries$.error(err",{"_index":3276,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["timeseries$.next(d",{"_index":3275,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["title",{"_index":342,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"classes/BaseProvider.html":{},"components/BsEdgeInfoCard.html":{},"components/BsFacetDate.html":{},"components/BsNodeInfoCard.html":{},"interfaces/Column.html":{},"interfaces/CustomData.html":{},"components/DataModalComponent.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/FacetChartDataPoint.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{},"components/FacetNgxChart.html":{},"components/MapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/VisEvent.html":{}}}],["todo",{"_index":132,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/VisEvent.html":{}}}],["together",{"_index":3636,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["toggle",{"_index":513,"title":{},"body":{"classes/BaseProvider.html":{},"interfaces/Column.html":{}}}],["togglecustomrange",{"_index":764,"title":{},"body":{"components/BsFacetDate.html":{}}}],["togglecustomrange(event",{"_index":806,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{}}}],["toggleformatcontent(action",{"_index":1722,"title":{},"body":{"interfaces/Column.html":{}}}],["toggles",{"_index":1721,"title":{},"body":{"interfaces/Column.html":{}}}],["tonode",{"_index":559,"title":{},"body":{"classes/BaseProvider.html":{},"components/BsEdgeInfoCard.html":{}}}],["tonode.id",{"_index":568,"title":{},"body":{"classes/BaseProvider.html":{}}}],["toolbar",{"_index":1437,"title":{},"body":{"interfaces/Column.html":{}}}],["toolbaractions",{"_index":1430,"title":{},"body":{"interfaces/Column.html":{}}}],["tooltip",{"_index":1084,"title":{},"body":{"components/BsHeatmapComponent.html":{},"modules/BsTimelineModule.html":{},"components/BsTooltipComponent.html":{},"interfaces/Column.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{}}}],["tooltip'},{'name",{"_index":722,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"components/BsTooltipComponent.html":{},"components/DataModalComponent.html":{},"components/FacetNgxChart.html":{},"components/FacetWrapperComponent.html":{},"components/MapComponent.html":{},"components/NgxChart.html":{},"components/ResultTimeline.html":{},"components/TimelineLegendComponent.html":{}}}],["tooltip.component",{"_index":1231,"title":{},"body":{"modules/BsHeatmapModule.html":{}}}],["tooltip.left::after",{"_index":1304,"title":{},"body":{"components/BsTooltipComponent.html":{}}}],["tooltip.right::after",{"_index":1300,"title":{},"body":{"components/BsTooltipComponent.html":{}}}],["tooltip::after",{"_index":1293,"title":{},"body":{"components/BsTooltipComponent.html":{}}}],["tooltipdatapoints",{"_index":3399,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["tooltipitem",{"_index":953,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["tooltipitem.count",{"_index":1193,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["tooltipitem.display",{"_index":1190,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["tooltipitem.value",{"_index":1191,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["tooltipleft",{"_index":954,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["tooltiporientation",{"_index":955,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["tooltipright",{"_index":956,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["tooltips",{"_index":2680,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{}}}],["tooltiptemplate",{"_index":1345,"title":{},"body":{"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"components/NgxChart.html":{}}}],["tooltiptop",{"_index":957,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["tooltiptpl",{"_index":3381,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["tooltipvaluegetter",{"_index":1521,"title":{},"body":{"interfaces/Column.html":{}}}],["tooltipx",{"_index":2815,"title":{},"body":{"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["top",{"_index":633,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"components/BsTooltipComponent.html":{},"components/FacetWrapperComponent.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/NodeData.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{}}}],["top.px",{"_index":1317,"title":{},"body":{"components/BsTooltipComponent.html":{}}}],["total",{"_index":1188,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["transfer",{"_index":2278,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["transform",{"_index":3605,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["transform.rescalex(this.x",{"_index":3607,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["transformed",{"_index":2090,"title":{},"body":{"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["transforms",{"_index":3322,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{}}}],["transit",{"_index":4143,"title":{},"body":{"miscellaneous/variables.html":{}}}],["transit.line",{"_index":4144,"title":{},"body":{"miscellaneous/variables.html":{}}}],["transit.station",{"_index":4145,"title":{},"body":{"miscellaneous/variables.html":{}}}],["transition",{"_index":978,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["transitions",{"_index":1028,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["translate",{"_index":3585,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["transparent",{"_index":1302,"title":{},"body":{"components/BsTooltipComponent.html":{}}}],["trash",{"_index":521,"title":{},"body":{"classes/BaseProvider.html":{}}}],["tree",{"_index":626,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"components/BsTooltipComponent.html":{},"components/DataModalComponent.html":{},"components/FacetNgxChart.html":{},"components/FacetWrapperComponent.html":{},"components/MapComponent.html":{},"components/NgxChart.html":{},"components/ResultTimeline.html":{},"components/TimelineLegendComponent.html":{}}}],["treemapmodule",{"_index":2943,"title":{},"body":{"modules/NgxChartsModule.html":{}}}],["triangle",{"_index":3627,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["trigger",{"_index":162,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"components/BsEdgeInfoCard.html":{},"components/BsNodeInfoCard.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/NodeData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/VisEvent.html":{}}}],["trigger/display",{"_index":1797,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["trigger=onclick",{"_index":1807,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["trigger=oninsert",{"_index":1810,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["triggered",{"_index":1758,"title":{},"body":{"interfaces/Column.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["triggers",{"_index":3298,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["triple",{"_index":4065,"title":{},"body":{"miscellaneous/functions.html":{}}}],["true",{"_index":116,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"components/BsEdgeInfoCard.html":{},"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/Column.html":{},"interfaces/CustomData.html":{},"components/DataModalComponent.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/FacetChartDataPoint.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{},"components/FacetNgxChart.html":{},"components/FacetWrapperComponent.html":{},"interfaces/HeatmapItem.html":{},"components/MapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"components/NgxChart.html":{},"interfaces/NodeData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"components/ResultTimeline.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{}}}],["true}).pipe",{"_index":3254,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["true}).subscribe",{"_index":225,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{}}}],["true}).subscribe(results",{"_index":2116,"title":{},"body":{"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{}}}],["truncates",{"_index":1061,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["try",{"_index":1258,"title":{},"body":{"components/BsNodeInfoCard.html":{},"interfaces/NodeData.html":{},"components/ResultTimeline.html":{}}}],["turn",{"_index":400,"title":{},"body":{"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"classes/DynamicEdgeProvider.html":{},"classes/DynamicNodeProvider.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{}}}],["turned",{"_index":1793,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["turning",{"_index":3629,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["two",{"_index":262,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"classes/BaseProvider.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"miscellaneous/functions.html":{}}}],["type",{"_index":83,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"components/BsEdgeInfoCard.html":{},"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"components/BsTooltipComponent.html":{},"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/Column.html":{},"interfaces/CustomData.html":{},"components/DataModalComponent.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/FacetChartDataPoint.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{},"components/FacetNgxChart.html":{},"components/FacetWrapperComponent.html":{},"interfaces/HeatmapItem.html":{},"components/MapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"components/NgxChart.html":{},"interfaces/Node.html":{},"interfaces/NodeData.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"components/ResultTimeline.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineEventType.html":{},"components/TimelineLegendComponent.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["type's",{"_index":1261,"title":{},"body":{"components/BsNodeInfoCard.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/NodeData.html":{}}}],["type.count",{"_index":210,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{}}}],["type.display",{"_index":1920,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["type.edgeoptions",{"_index":583,"title":{},"body":{"classes/BaseProvider.html":{}}}],["type.edgeoptions([fromnode",{"_index":584,"title":{},"body":{"classes/BaseProvider.html":{}}}],["type.field",{"_index":417,"title":{},"body":{"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"classes/DynamicEdgeProvider.html":{},"classes/DynamicNodeProvider.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{}}}],["type.name}:${value",{"_index":534,"title":{},"body":{"classes/BaseProvider.html":{}}}],["type.nodeoptions",{"_index":556,"title":{},"body":{"classes/BaseProvider.html":{}}}],["type.nodeoptions(node",{"_index":557,"title":{},"body":{"classes/BaseProvider.html":{}}}],["type.nodetypes.length",{"_index":1907,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["type.nodetypes[0",{"_index":315,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{}}}],["type.nodetypes[0].name",{"_index":1852,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["type.nodetypes[1",{"_index":325,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{}}}],["type.parse!(recorddata",{"_index":1865,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["type.parse!(value",{"_index":1863,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["type.parse(item",{"_index":260,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{}}}],["type.trigger",{"_index":304,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["type:auditeventtype.search_timeline_usage",{"_index":3295,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["typealiases",{"_index":4097,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["typed",{"_index":4070,"title":{},"body":{"miscellaneous/functions.html":{}}}],["typedcoocaggregationdemo",{"_index":3976,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["typedcoocaggregationdemo(providerfactory",{"_index":4064,"title":{},"body":{"miscellaneous/functions.html":{}}}],["typedcoocrecorddemo",{"_index":3977,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["typedcoocrecorddemo(providerfactory",{"_index":4069,"title":{},"body":{"miscellaneous/functions.html":{}}}],["typeof",{"_index":3237,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["types",{"_index":67,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"interfaces/CustomData.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["types.find(type",{"_index":236,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{}}}],["types.foreach(type",{"_index":206,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{}}}],["types.length",{"_index":306,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{}}}],["types.map(type",{"_index":361,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{}}}],["typically",{"_index":2145,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["uiservice",{"_index":1332,"title":{},"body":{"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/Column.html":{},"components/DataModalComponent.html":{},"components/NgxChart.html":{}}}],["undefined",{"_index":156,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"components/BsEdgeInfoCard.html":{},"components/BsFacetDate.html":{},"components/BsNodeInfoCard.html":{},"interfaces/Column.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/FacetChartDataPoint.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{},"components/FacetNgxChart.html":{},"components/FacetWrapperComponent.html":{},"components/MapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeData.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"miscellaneous/variables.html":{}}}],["undefined).subscribe(res",{"_index":2059,"title":{},"body":{"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{}}}],["underline",{"_index":1208,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["understand",{"_index":1596,"title":{},"body":{"interfaces/Column.html":{}}}],["undirected",{"_index":561,"title":{},"body":{"classes/BaseProvider.html":{}}}],["unfortunately",{"_index":2710,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["unique",{"_index":1941,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/VisEvent.html":{}}}],["unlimited",{"_index":1813,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["unselected",{"_index":3061,"title":{},"body":{"classes/SelectedRecordsProvider.html":{},"miscellaneous/functions.html":{}}}],["unsubscribe",{"_index":1514,"title":{},"body":{"interfaces/Column.html":{}}}],["until",{"_index":1808,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["up",{"_index":1368,"title":{},"body":{"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/Column.html":{},"components/NgxChart.html":{},"interfaces/VisEvent.html":{}}}],["update",{"_index":686,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"interfaces/Column.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/NodeData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{}}}],["update/reset",{"_index":3522,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["updateactions",{"_index":3785,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["updateaxes",{"_index":2764,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["updatebrush",{"_index":3555,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["updatechart",{"_index":1349,"title":{},"body":{"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"components/NgxChart.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["updatecombinedaggregation",{"_index":3302,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["updatecombinedaggregation(config",{"_index":3260,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["updated",{"_index":2237,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"components/MapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["updatedata",{"_index":1974,"title":{},"body":{"components/DataModalComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/VisEvent.html":{}}}],["updatedataset(aggregations",{"_index":232,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{}}}],["updatedataset(records",{"_index":1830,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["updatedatasets",{"_index":2866,"title":{},"body":{"classes/NetworkDataset.html":{}}}],["updatedatasets(nodes",{"_index":2279,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["updatedynamicdataset(sourcenodes",{"_index":2038,"title":{},"body":{"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{}}}],["updateevents",{"_index":3211,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{}}}],["updatefilterstate(query",{"_index":1598,"title":{},"body":{"interfaces/Column.html":{}}}],["updategrips(selection",{"_index":3582,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["updateitems",{"_index":893,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{}}}],["updateoptions",{"_index":3837,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["updater",{"_index":2324,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["updaterange",{"_index":765,"title":{},"body":{"components/BsFacetDate.html":{}}}],["updaterange(range",{"_index":808,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{}}}],["updates",{"_index":192,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{}}}],["updatescales(data",{"_index":3485,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["updateselecteditems",{"_index":2759,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{}}}],["updateselectedvalues",{"_index":2353,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["updateselection",{"_index":3565,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["updatesortstate(query",{"_index":1613,"title":{},"body":{"interfaces/Column.html":{}}}],["updatetimeline",{"_index":2954,"title":{},"body":{"components/ResultTimeline.html":{}}}],["updatetimeseries",{"_index":3190,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["updatetimeseries(aggregationname",{"_index":898,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{}}}],["updatexaxis",{"_index":3569,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["updatezoom",{"_index":3524,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["updating",{"_index":3279,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["upon",{"_index":2113,"title":{},"body":{"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{}}}],["url",{"_index":3047,"title":{},"body":{"components/ResultTimeline.html":{}}}],["usd",{"_index":2811,"title":{},"body":{"interfaces/MoneyDatum.html":{}}}],["use",{"_index":460,"title":{},"body":{"classes/AsyncRecordsProvider.html":{},"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"interfaces/CustomData.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeData.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{}}}],["used",{"_index":140,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"components/BsHeatmapComponent.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"interfaces/HeatmapItem.html":{},"components/MapComponent.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{}}}],["useful",{"_index":1759,"title":{},"body":{"interfaces/Column.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["user",{"_index":1035,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/Column.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/HeatmapItem.html":{},"components/MapComponent.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/VisEvent.html":{}}}],["userpreferences",{"_index":1392,"title":{},"body":{"interfaces/Column.html":{},"interfaces/VisEvent.html":{}}}],["users",{"_index":1732,"title":{},"body":{"interfaces/Column.html":{}}}],["uses",{"_index":3640,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["using",{"_index":153,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"interfaces/Column.html":{},"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["util",{"_index":4035,"title":{},"body":{"dependencies.html":{}}}],["utilities",{"_index":3634,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["utility",{"_index":3309,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["utils",{"_index":100,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"components/BsFacetDate.html":{},"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/Column.html":{},"interfaces/CustomData.html":{},"components/DataModalComponent.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/FacetChartDataPoint.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{},"components/FacetNgxChart.html":{},"components/FacetWrapperComponent.html":{},"components/MapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"components/NgxChart.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/VisEvent.html":{}}}],["utils.copy(this.options",{"_index":3838,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["utils.copy(this.query",{"_index":201,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{}}}],["utils.copy(this.searchservice.query",{"_index":910,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["utils.debounce",{"_index":3885,"title":{},"body":{"interfaces/VisEvent.html":{}}}],["utils.eqnc(a.name",{"_index":2822,"title":{},"body":{"interfaces/MoneyDatum.html":{}}}],["utils.eqnc(alias",{"_index":2486,"title":{},"body":{"components/FacetWrapperComponent.html":{}}}],["utils.eqnc(type.aggregation",{"_index":237,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{}}}],["utils.equals(oldmodel",{"_index":1773,"title":{},"body":{"interfaces/Column.html":{}}}],["utils.extend",{"_index":1531,"title":{},"body":{"interfaces/Column.html":{}}}],["utils.extend(edge",{"_index":569,"title":{},"body":{"classes/BaseProvider.html":{}}}],["utils.extend(existingedge",{"_index":2277,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["utils.extend(existingnode",{"_index":2254,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["utils.extend(node",{"_index":554,"title":{},"body":{"classes/BaseProvider.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{}}}],["utils.isnumber(value",{"_index":2385,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["utils.isundefined(r",{"_index":2804,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{}}}],["utils.isundefined(x",{"_index":2855,"title":{},"body":{"interfaces/MoneyDatum.html":{}}}],["utils.isundefined(x_inner",{"_index":2803,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{}}}],["utils.isundefined(y",{"_index":2805,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{}}}],["utils.merge",{"_index":4152,"title":{},"body":{"miscellaneous/variables.html":{}}}],["utils.subscribe(this.intlservice.events",{"_index":1357,"title":{},"body":{"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"components/NgxChart.html":{}}}],["utils.todate(r[config.field",{"_index":3233,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["utils.tolowercase(this.options.type",{"_index":1361,"title":{},"body":{"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"components/NgxChart.html":{}}}],["utilsmodule",{"_index":35,"title":{},"body":{"modules/AgGridModule.html":{},"modules/BsTimelineModule.html":{},"modules/FinanceModule.html":{},"modules/FusionChartsModule.html":{},"modules/NetworkModule.html":{},"modules/NgxChartsModule.html":{}}}],["v!==this.aggregation",{"_index":2330,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["val",{"_index":2359,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["val.foreach(v",{"_index":2365,"title":{},"body":{"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{}}}],["valid",{"_index":2739,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{}}}],["validity",{"_index":3499,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["value",{"_index":117,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"components/BsTooltipComponent.html":{},"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/Column.html":{},"interfaces/CustomData.html":{},"components/DataModalComponent.html":{},"classes/DynamicEdgeProvider.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/FacetChartDataPoint.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{},"components/FacetNgxChart.html":{},"interfaces/HeatmapItem.html":{},"components/MapComponent.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"components/NgxChart.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"components/ResultTimeline.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"components/TimelineLegendComponent.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{},"miscellaneous/variables.html":{}}}],["value.x))).slice(0",{"_index":1090,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["value.y))).slice(0",{"_index":1093,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["value[\"display",{"_index":1876,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["value[\"value",{"_index":1875,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["value[0",{"_index":867,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{}}}],["value[1",{"_index":868,"title":{},"body":{"components/BsFacetDate.html":{},"interfaces/FacetDateConfig.html":{},"interfaces/FacetDateParams.html":{}}}],["value_amount",{"_index":2659,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{}}}],["valueamounts",{"_index":2662,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{}}}],["valued",{"_index":1859,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["valueitem",{"_index":1987,"title":{},"body":{"components/DataModalComponent.html":{},"interfaces/MoneyCloudDatum.html":{}}}],["values",{"_index":81,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"interfaces/CustomData.html":{},"interfaces/FacetChartDataPoint.html":{},"components/FacetNgxChart.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/VisEvent.html":{}}}],["valuestr",{"_index":2736,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{}}}],["var",{"_index":703,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"components/BsTooltipComponent.html":{},"components/DataModalComponent.html":{},"components/FacetNgxChart.html":{},"components/FacetWrapperComponent.html":{},"components/MapComponent.html":{},"components/NgxChart.html":{},"components/ResultTimeline.html":{},"components/TimelineLegendComponent.html":{}}}],["variable",{"_index":3784,"title":{},"body":{"interfaces/VisEvent.html":{},"coverage.html":{}}}],["variables",{"_index":4102,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["vertical",{"_index":2791,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["verticaltalbar",{"_index":1366,"title":{},"body":{"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"components/NgxChart.html":{}}}],["via",{"_index":441,"title":{},"body":{"classes/AsyncRecordsProvider.html":{},"interfaces/Column.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"miscellaneous/functions.html":{}}}],["view",{"_index":681,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"modules/BsHeatmapModule.html":{},"components/BsNodeInfoCard.html":{},"interfaces/Column.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"components/MapComponent.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeData.html":{},"interfaces/NodeType.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{}}}],["view'},{'name",{"_index":708,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"components/BsTooltipComponent.html":{},"components/DataModalComponent.html":{},"components/FacetNgxChart.html":{},"components/FacetWrapperComponent.html":{},"components/MapComponent.html":{},"components/NgxChart.html":{},"components/ResultTimeline.html":{},"components/TimelineLegendComponent.html":{}}}],["view.component",{"_index":45,"title":{},"body":{"modules/AgGridModule.html":{}}}],["view.component.html",{"_index":1419,"title":{},"body":{"interfaces/Column.html":{}}}],["view.component.scss",{"_index":1420,"title":{},"body":{"interfaces/Column.html":{}}}],["view.component.ts",{"_index":1387,"title":{},"body":{"interfaces/Column.html":{},"coverage.html":{}}}],["view.ts",{"_index":3945,"title":{},"body":{"coverage.html":{}}}],["viewbox",{"_index":1159,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["viewchild",{"_index":1072,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"components/NgxChart.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["viewchild(\"brush",{"_index":3395,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["viewchild(\"chart",{"_index":1346,"title":{},"body":{"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"components/NgxChart.html":{}}}],["viewchild(\"overlay",{"_index":2678,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{}}}],["viewchild(\"tooltiptemplate",{"_index":1344,"title":{},"body":{"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"components/NgxChart.html":{}}}],["viewchild(\"wrapper",{"_index":1341,"title":{},"body":{"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"components/NgxChart.html":{}}}],["viewchild(\"xaxis",{"_index":1082,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["viewchild(\"yaxis",{"_index":1083,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["viewchild('chart",{"_index":2917,"title":{},"body":{"components/NgxChart.html":{}}}],["viewchild('tooltiptemplate",{"_index":2921,"title":{},"body":{"components/NgxChart.html":{}}}],["viewchild('wrapper",{"_index":2923,"title":{},"body":{"components/NgxChart.html":{}}}],["viewchild('xaxis",{"_index":1050,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["viewchild('yaxis",{"_index":1052,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["viewinit",{"_index":958,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["vis",{"_index":2137,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"modules/NetworkModule.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"components/ResultTimeline.html":{},"interfaces/VisEvent.html":{},"modules/VisTimelineModule.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/variables.html":{}}}],["vis.js",{"_index":2167,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/VisEvent.html":{},"miscellaneous/variables.html":{}}}],["visevent",{"_index":3720,"title":{"interfaces/VisEvent.html":{}},"body":{"interfaces/VisEvent.html":{},"coverage.html":{}}}],["visibility",{"_index":167,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"interfaces/Column.html":{},"interfaces/CustomData.html":{},"classes/DynamicEdgeProvider.html":{},"classes/DynamicNodeProvider.html":{},"components/NgxChart.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/VisEvent.html":{}}}],["visibilityaction",{"_index":1693,"title":{},"body":{"interfaces/Column.html":{}}}],["visibilityaction.selected",{"_index":1697,"title":{},"body":{"interfaces/Column.html":{}}}],["visible",{"_index":538,"title":{},"body":{"classes/BaseProvider.html":{},"interfaces/CustomData.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"components/NgxChart.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["visiblity",{"_index":1690,"title":{},"body":{"interfaces/Column.html":{}}}],["vismodule",{"_index":2891,"title":{},"body":{"modules/NetworkModule.html":{},"modules/VisTimelineModule.html":{}}}],["visnetworkservice",{"_index":2139,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/VisEvent.html":{}}}],["vistimelinemodule",{"_index":3899,"title":{"modules/VisTimelineModule.html":{}},"body":{"modules/VisTimelineModule.html":{},"index.html":{},"modules.html":{}}}],["vistimelineservice",{"_index":2952,"title":{},"body":{"components/ResultTimeline.html":{}}}],["void",{"_index":408,"title":{},"body":{"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"classes/BaseProvider.html":{},"components/BsEdgeInfoCard.html":{},"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"components/DataModalComponent.html":{},"classes/DynamicEdgeProvider.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"components/FacetNgxChart.html":{},"components/FacetWrapperComponent.html":{},"components/MapComponent.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"components/NgxChart.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"classes/RecordsProvider.html":{},"components/ResultTimeline.html":{},"classes/SelectedRecordsProvider.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["w",{"_index":3465,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["want",{"_index":459,"title":{},"body":{"classes/AsyncRecordsProvider.html":{},"interfaces/Column.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{}}}],["warning",{"_index":683,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsNodeInfoCard.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/NodeData.html":{}}}],["water",{"_index":4147,"title":{},"body":{"miscellaneous/variables.html":{}}}],["way",{"_index":1373,"title":{},"body":{"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/CustomData.html":{},"components/NgxChart.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["web",{"_index":145,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/VisEvent.html":{}}}],["weeks",{"_index":3257,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["well",{"_index":2206,"title":{},"body":{"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["west",{"_index":2636,"title":{},"body":{"components/MapComponent.html":{}}}],["whatever",{"_index":4084,"title":{},"body":{"miscellaneous/functions.html":{}}}],["whether",{"_index":170,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"classes/BaseProvider.html":{},"interfaces/Column.html":{},"interfaces/CustomData.html":{},"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{},"miscellaneous/functions.html":{}}}],["while(!parsedexpr.isleaf",{"_index":3158,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["whose",{"_index":2012,"title":{},"body":{"interfaces/DynamicEdge.html":{},"classes/DynamicEdgeProvider.html":{},"interfaces/DynamicEdgeType.html":{}}}],["width",{"_index":637,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"components/BsTooltipComponent.html":{},"interfaces/Column.html":{},"components/FacetWrapperComponent.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"components/NgxChart.html":{},"interfaces/NodeData.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineEventType.html":{},"components/TimelineLegendComponent.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{}}}],["wikiasyncconfig",{"_index":3978,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["wikiasyncconfig(providerfactory",{"_index":4071,"title":{},"body":{"miscellaneous/functions.html":{}}}],["wikidynconfig",{"_index":3979,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["wikidynconfig(providerfactory",{"_index":4075,"title":{},"body":{"miscellaneous/functions.html":{}}}],["wikidynedgeconfig",{"_index":3980,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["wikidynedgeconfig(providerfactory",{"_index":4080,"title":{},"body":{"miscellaneous/functions.html":{}}}],["wikimultidynconfig",{"_index":3981,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["wikimultidynconfig(providerfactory",{"_index":4091,"title":{},"body":{"miscellaneous/functions.html":{}}}],["wikipedia",{"_index":1826,"title":{},"body":{"interfaces/CustomData.html":{},"classes/DynamicNodeProvider.html":{},"interfaces/DynamicNodeType.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"miscellaneous/functions.html":{}}}],["window",{"_index":2597,"title":{},"body":{"components/MapComponent.html":{}}}],["windows",{"_index":2640,"title":{},"body":{"components/MapComponent.html":{}}}],["wish",{"_index":364,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{}}}],["within",{"_index":1878,"title":{},"body":{"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{}}}],["without",{"_index":3603,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["withtext",{"_index":365,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{}}}],["work",{"_index":1570,"title":{},"body":{"interfaces/Column.html":{}}}],["works",{"_index":115,"title":{},"body":{"interfaces/AggregationData.html":{},"interfaces/AggregationEdge.html":{},"interfaces/AggregationEdgeType.html":{},"classes/AggregationProvider.html":{},"interfaces/CustomData.html":{},"interfaces/RecordNode.html":{},"classes/RecordsProvider.html":{},"interfaces/StructuralEdgeType.html":{}}}],["wrap",{"_index":959,"title":{},"body":{"components/BsHeatmapComponent.html":{}}}],["wrapper",{"_index":1343,"title":{},"body":{"interfaces/ChartDataPoint.html":{},"interfaces/ChartOptions.html":{},"interfaces/Edge.html":{},"interfaces/EdgeType.html":{},"components/FacetWrapperComponent.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"interfaces/NetworkProvider.html":{},"components/NgxChart.html":{},"interfaces/Node.html":{},"interfaces/NodeType.html":{}}}],["wrapper'},{'name",{"_index":727,"title":{},"body":{"components/BsEdgeInfoCard.html":{},"components/BsFacetDate.html":{},"components/BsHeatmapComponent.html":{},"components/BsNodeInfoCard.html":{},"components/BsTooltipComponent.html":{},"components/DataModalComponent.html":{},"components/FacetNgxChart.html":{},"components/FacetWrapperComponent.html":{},"components/MapComponent.html":{},"components/NgxChart.html":{},"components/ResultTimeline.html":{},"components/TimelineLegendComponent.html":{}}}],["wrapper.component",{"_index":49,"title":{},"body":{"modules/AgGridModule.html":{},"interfaces/Column.html":{}}}],["wrapper.component.ts",{"_index":2443,"title":{},"body":{"components/FacetWrapperComponent.html":{},"coverage.html":{}}}],["wrapper.component.ts:28",{"_index":2469,"title":{},"body":{"components/FacetWrapperComponent.html":{}}}],["wrapper.component.ts:30",{"_index":2466,"title":{},"body":{"components/FacetWrapperComponent.html":{}}}],["wrapper.component.ts:31",{"_index":2467,"title":{},"body":{"components/FacetWrapperComponent.html":{}}}],["wrapper.component.ts:32",{"_index":2465,"title":{},"body":{"components/FacetWrapperComponent.html":{}}}],["wrapper.component.ts:33",{"_index":2468,"title":{},"body":{"components/FacetWrapperComponent.html":{}}}],["wrapper.component.ts:35",{"_index":2471,"title":{},"body":{"components/FacetWrapperComponent.html":{}}}],["wrapper.component.ts:39",{"_index":2473,"title":{},"body":{"components/FacetWrapperComponent.html":{}}}],["wrapper.component.ts:43",{"_index":2475,"title":{},"body":{"components/FacetWrapperComponent.html":{}}}],["wrapper.component.ts:51",{"_index":2477,"title":{},"body":{"components/FacetWrapperComponent.html":{}}}],["wrapper.component.ts:55",{"_index":2479,"title":{},"body":{"components/FacetWrapperComponent.html":{}}}],["wrapper.component.ts:59",{"_index":2457,"title":{},"body":{"components/FacetWrapperComponent.html":{}}}],["wrapper.component.ts:73",{"_index":2462,"title":{},"body":{"components/FacetWrapperComponent.html":{}}}],["wrapper.component.ts:78",{"_index":2460,"title":{},"body":{"components/FacetWrapperComponent.html":{}}}],["wrapper.component.ts:82",{"_index":2461,"title":{},"body":{"components/FacetWrapperComponent.html":{}}}],["wrapper.component.ts:86",{"_index":2464,"title":{},"body":{"components/FacetWrapperComponent.html":{}}}],["ww",{"_index":3356,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["x",{"_index":960,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["x(d",{"_index":3415,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["x0",{"_index":3557,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["x0,x1",{"_index":3563,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["x1",{"_index":3560,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["x_inner",{"_index":2669,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{}}}],["xaxis",{"_index":961,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["xdomain",{"_index":3531,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["xdomain[0].gettime",{"_index":3534,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["xdomain[1].gettime",{"_index":3533,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["xextent",{"_index":3493,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["xextent[0",{"_index":3506,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["xextent[0].gettime",{"_index":3511,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["xextent[1",{"_index":2836,"title":{},"body":{"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["xextent[1].gettime",{"_index":3510,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["xlabels",{"_index":1087,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["xlabels.includes(value.x",{"_index":1097,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["xt",{"_index":3383,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["y",{"_index":962,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["y(d",{"_index":3421,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["y0(this.y(0",{"_index":3417,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["y1(d",{"_index":3418,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["yaxis",{"_index":963,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{},"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["yaxisticks",{"_index":2771,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["year",{"_index":3007,"title":{},"body":{"components/ResultTimeline.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["years",{"_index":3113,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{}}}],["yes",{"_index":395,"title":{},"body":{"classes/AggregationProvider.html":{},"classes/AsyncRecordsProvider.html":{},"components/BsHeatmapComponent.html":{},"classes/DynamicEdgeProvider.html":{},"classes/DynamicNodeProvider.html":{},"components/MapComponent.html":{},"interfaces/NetworkContext.html":{},"classes/NetworkDataset.html":{},"classes/RecordsProvider.html":{},"classes/SelectedRecordsProvider.html":{}}}],["yextent",{"_index":2834,"title":{},"body":{"interfaces/MoneyDatum.html":{}}}],["yextent[0",{"_index":2837,"title":{},"body":{"interfaces/MoneyDatum.html":{}}}],["yextent[1",{"_index":2746,"title":{},"body":{"interfaces/MoneyCloudDatum.html":{},"interfaces/MoneyDatum.html":{}}}],["yielded",{"_index":1589,"title":{},"body":{"interfaces/Column.html":{}}}],["ylabels",{"_index":1092,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["ylabels.includes(value.y",{"_index":1098,"title":{},"body":{"components/BsHeatmapComponent.html":{},"interfaces/HeatmapItem.html":{}}}],["ymax",{"_index":3495,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["yoffset",{"_index":3714,"title":{},"body":{"interfaces/TimelineEventType.html":{},"components/TimelineLegendComponent.html":{}}}],["yyyy",{"_index":3351,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["z",{"_index":1292,"title":{},"body":{"components/BsTooltipComponent.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["zeros",{"_index":3324,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["zoom",{"_index":11,"title":{},"body":{"modules/AgGridModule.html":{},"modules/BsHeatmapModule.html":{},"modules/BsTimelineModule.html":{},"modules/FinanceModule.html":{},"modules/FusionChartsModule.html":{},"modules/GoogleMapsModule.html":{},"modules/NetworkModule.html":{},"modules/NgxChartsModule.html":{},"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{},"interfaces/VisEvent.html":{},"modules/VisTimelineModule.html":{},"index.html":{}}}],["zoom/selection",{"_index":3198,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["zoomable",{"_index":3108,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{},"interfaces/TimelineSeries.html":{}}}],["zoombehavior",{"_index":3391,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["zoomed",{"_index":3105,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}],["zooming",{"_index":3404,"title":{},"body":{"interfaces/TimelineDate.html":{},"interfaces/TimelineEvent.html":{},"interfaces/TimelineSeries.html":{}}}],["zooms",{"_index":3297,"title":{},"body":{"interfaces/TimelineAggregation.html":{},"interfaces/TimelineCombinedAggregations.html":{},"interfaces/TimelineEventAggregation.html":{},"interfaces/TimelineRecords.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"modules/AgGridModule.html":{"url":"modules/AgGridModule.html","title":"module - AgGridModule","body":"\n                   \n\n\n\n\n    Modules\n    AgGridModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AgGridModule\n\n\n\ncluster_AgGridModule_declarations\n\n\n\ncluster_AgGridModule_exports\n\n\n\n\nAgGridViewComponent\n\nAgGridViewComponent\n\n\n\nAgGridModule\n\nAgGridModule\n\nAgGridModule -->\n\nAgGridViewComponent->AgGridModule\n\n\n\n\n\nDataModalComponent\n\nDataModalComponent\n\nAgGridModule -->\n\nDataModalComponent->AgGridModule\n\n\n\n\n\nFacetWrapperComponent\n\nFacetWrapperComponent\n\nAgGridModule -->\n\nFacetWrapperComponent->AgGridModule\n\n\n\n\n\nAgGridViewComponent \n\nAgGridViewComponent \n\nAgGridViewComponent  -->\n\nAgGridModule->AgGridViewComponent \n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            ag-grid/ag-grid.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Declarations\n                    \n                        \n                            AgGridViewComponent\n                        \n                        \n                            DataModalComponent\n                        \n                        \n                            FacetWrapperComponent\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            AgGridViewComponent\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { NgModule } from \"@angular/core\";\nimport { CommonModule } from \"@angular/common\";\nimport { FormsModule, ReactiveFormsModule } from \"@angular/forms\";\n\nimport { AgGridModule as AGModule } from 'ag-grid-angular';\n\nimport { IntlModule } from '@sinequa/core/intl';\nimport { UtilsModule } from \"@sinequa/components/utils\";\nimport { BsActionModule } from \"@sinequa/components/action\";\nimport { BsModalModule } from \"@sinequa/components/modal\";\nimport { BsFacetModule } from \"@sinequa/components/facet\";\nimport { ResultModule } from \"@sinequa/components/result\";\n\nimport { AgGridViewComponent } from \"./ag-grid-view.component\";\nimport { DataModalComponent } from \"./data-modal.component\";\nimport { FacetWrapperComponent } from \"./facet-wrapper.component\";\n\n@NgModule({\n\n    imports: [\n        CommonModule,\n        FormsModule, ReactiveFormsModule, \n        \n        IntlModule,\n        UtilsModule,\n        BsActionModule,\n        BsModalModule,\n        ResultModule,\n        BsFacetModule,\n        \n        AGModule.withComponents([FacetWrapperComponent]),\n    ],\n    declarations: [\n        AgGridViewComponent,\n        DataModalComponent,\n        FacetWrapperComponent\n    ],\n    exports: [\n        AgGridViewComponent\n    ],\n})\nexport class AgGridModule {}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/AggregationData.html":{"url":"interfaces/AggregationData.html","title":"interface - AggregationData","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  AggregationData\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            network/providers/aggregation-provider.ts\n        \n\n\n            \n                Description\n            \n            \n                Convenience structure for managing custom metadata types (like\ncooccurrence entities). AggregationData is returned by the custom\nparse() function of an AggregationEdgeType.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            directed\n                                        \n                                \n                                \n                                        \n                                            displays\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            fieldValue\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            relations\n                                        \n                                \n                                \n                                        \n                                            values\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        directed\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        directed:     boolean[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     boolean[]\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        displays\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        displays:     string[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        fieldValue\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        fieldValue:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        relations\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        relations:     string[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string[]\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        values\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        values:     string[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Aggregation, AggregationItem } from '@sinequa/core/web-services';\nimport { Node, Edge, EdgeType, NetworkDataset, NetworkContext } from '../network-models';\nimport { Action } from '@sinequa/components/action';\nimport { Query, Expr } from '@sinequa/core/app-utils';\nimport { Utils } from '@sinequa/core/base';\nimport { BaseProvider } from './base-provider';\n\n/**\n * Extension of the Edge interface, to store the aggregation and\n * aggregation items from which the edge is constructed\n */\nexport interface AggregationEdge extends Edge {\n    aggregationItem: AggregationItem;\n    aggregation: Aggregation;\n}\n\n/**\n * Convenience structure for managing custom metadata types (like\n * cooccurrence entities). AggregationData is returned by the custom\n * parse() function of an AggregationEdgeType.\n */\nexport interface AggregationData {\n    values: string[]; // eg. LARRY PAGE, GOOGLE\n    displays: string[]; // eg. Larry Page, Google\n    relations?: string[]; // eg. Works At\n    directed?: boolean[]; // eg. true\n    fieldValue?: string; // A value on which to filter the data\n}\n\n/** Mode \"source\" means node are fetched and added systematically on getData() / other modes allow expanding an existing node*/\nexport type AggregationTriggerType = \"source\" | \"onclick\" | \"manual\";\n// TODO: Add support for \"oninsert\" (which might required additional complexity)\n\n/**\n * Extension of the EdgeType interface, specifying which aggregation is used\n * to generate the Edges, and additional options.\n */\nexport interface AggregationEdgeType extends EdgeType {\n    /** Name of the aggregation in the Web Service configuration */\n    aggregation: string;\n    /** If parse is provided, it is used to get the new nodes and edges. If not, the value is automatically converted into nodes, using nodeTypes[1] */\n    parse?: (item: AggregationItem, type: AggregationEdgeType) => AggregationData | undefined; // A cooccurrence aggregation might return 3 nodes and 2 edges\n    /** A parameter to define when the aggregation is fetched and nodes are added */\n    trigger: AggregationTriggerType;\n    /** Default number of items to fetch */\n    count?: number;\n    // TODO: add visibility modes ? (eg. existingNodes)\n}\n\n/**\n * Tests whether an EdgeType is an AggregationEdgeType\n * @param et an edge type\n */\nexport function isAggregationEdgeType(et: EdgeType): et is AggregationEdgeType {\n    return !!(et as AggregationEdgeType).aggregation;\n}\n\n/**\n * The Aggregation Provider generates nodes and edges from aggregations\n * fetched from the server.\n */\nexport class AggregationProvider extends BaseProvider {\n\n    /** Stores how many aggregation items have been fetched from the server for a given aggregation */\n    readonly skips: {[aggregation: string]: number} = {};\n\n    constructor(\n        public override name: string,\n        protected edgeTypes: AggregationEdgeType[],\n        protected query?: Query\n    ) {\n        super(name);\n    }\n\n\n    /**\n     * Fetches the list of aggregations and updates the dataset\n     * @param types list of aggregation edge types\n     * @param sourceNode if provided, will compute the aggregation with a select to compute the aggregation for documents referencing that node\n     */\n    protected fetchAggregations(types: AggregationEdgeType[], sourceNode?: Node) {\n\n        const query = Utils.copy(this.query || this.context.searchService.query);\n        query.action = \"aggregate\";\n        query.aggregations = {};\n        types.forEach(type => query.aggregations[type.aggregation] = {\n            skip: this.skips[type.aggregation+(sourceNode?.id || \"\")],\n            count: type.count || 10\n        });\n\n        if(sourceNode && sourceNode.type.field) {\n            query.addSelect(this.context.exprBuilder.makeExpr(sourceNode.type.field, this.getNodeValue(sourceNode)));\n        }\n\n        Object.keys(query.aggregations).forEach(aggregation => {\n            if(!this.context.appService.getCCAggregation(aggregation)) {\n                // This may not be a mistake if the aggregation belong to a different web service configuration\n                console.warn(`Aggregation '${aggregation}' does not exist in the Query web service configuration`);\n            }\n        });\n\n        this.context.searchService.getResults(query, undefined, {searchInactive: true}).subscribe(\n            results => {\n                this.updateDataset(results.aggregations, types, sourceNode);\n            }\n        );\n\n    }\n\n    /**\n     * Fills the dataset with nodes and edges corresponding to\n     * the given aggregations data, and emits this new dataset.\n     * @param aggregations the list of aggregations to process\n     * @param types the corresponding edge types for each aggregation\n     */\n    protected updateDataset(aggregations: Aggregation[], types: AggregationEdgeType[], sourceNode?: Node) {\n\n        aggregations.forEach(aggregation => {\n            if(aggregation && aggregation.items) {\n                const type = types.find(type => Utils.eqNC(type.aggregation, aggregation.name));\n                if(type) {\n                    this.skips[type.aggregation+(sourceNode?.id || \"\")] += aggregation.items.length;\n                    aggregation.items.forEach(item => this.addAggregationNodes(item, aggregation, type, sourceNode));\n                }\n            }\n        });\n\n        this.provider.next(this.dataset);\n    }\n\n    /**\n     * Create nodes and edges for the given aggregation item and adds them\n     * to the dataset. By default (if the edge does not have a parse() function\n     * and there is no sourceNode), the aggregation is assumed to be a cross-\n     * distribution, with items formatted as \"Bill Gates/Microsoft\".\n     * @param item the aggregation item to process\n     * @param aggregation the aggregation from which the item comes from\n     * @param type the type of the edge corresponding to that aggregation\n     * @param sourceNode if provided, will assume the distribution is 1-dimensional and attach each new node to that source node\n     */\n    addAggregationNodes(item: AggregationItem, aggregation: Aggregation, type: AggregationEdgeType, sourceNode?: Node) {\n\n        let rawData: AggregationData | undefined;\n\n        if(type.parse) {\n            rawData = type.parse(item, type);\n        }\n        else {\n            // Source distributions are at least two-dimensional\n            if(!sourceNode) {\n                if(!item.display){\n                    throw new Error(`Aggregation Item '${item.value}' has no display value`);\n                }\n                // Default parsing, assuming cross-distribution format (\"Apple/Steve Jobs\")\n                const displays = item.display.split(\"/\");\n                const expr = this.context.appService.parseExpr(item.value.toString()) as Expr;\n                const values = expr.operands.map(e => e.value!);\n                if(values.length  0){\n                    const relation = rawData.relations? rawData.relations[i-1] : undefined;\n                    const directed = rawData.directed? rawData.directed[i-1] : false;\n                    data.addEdges(this.createEdge(type, lastNode!, node, rawData.fieldValue, true, {aggregation, aggregationItem: item}, item.count, directed, relation));\n                }\n                lastNode = node;\n            }\n            this.dataset.merge(data);\n        }\n    }\n\n\n    // NetworkProvider interface\n\n    /**\n     * Retrieves the aggregation data synchronously or asynchronously, and updates the dataset with it.\n     */\n    override getData(context: NetworkContext) {\n        this.context = context;\n        this.dataset.clear();\n\n        // Initialize the counts\n        this.edgeTypes.forEach(type => this.skips[type.aggregation] = 0);\n\n        // Fetch the \"source\" aggregation edges\n        const types = this.edgeTypes.filter(type => type.trigger === \"source\");\n\n        if(this.active && types.length > 0) {\n            this.fetchAggregations(types);\n        }\n        else {\n            this.provider.next(this.dataset); // avoid undefined dataset when edge trigger !== source\n        }\n    }\n\n    /**\n     * Called when a node in the network is clicked.\n     * If one edge has an \"onclick\" trigger we potentially expand that\n     * clicked node.\n     * @param node the clicked node\n     */\n    override onNodeClicked(node?: Node) {\n        if(this.active && node) {\n            const types = this.edgeTypes.filter(type => type.trigger === \"onclick\" && type.nodeTypes[0] === node.type);\n            if(types.length > 0) {\n                types.forEach(type => {\n                    if(this.skips[type.aggregation+node.id] === undefined) {\n                        // We need to skip the already connected nodes\n                        const connectedNodes = this.dataset.getConnectedNodes(node.id)\n                            .filter(node => node.type === type.nodeTypes[1]);\n                        this.skips[type.aggregation+node.id] = connectedNodes.length;\n                    }\n                });\n                this.fetchAggregations(types, node);\n            }\n        }\n    }\n\n    /**\n     * Called to generate the list of actions specific to this provider.\n     * We display actions allowing to add additional data for \"source\" edges\n     * (either all the source edges at once, or each individually).\n     */\n    override getProviderActions(): Action[] {\n        const actions = super.getProviderActions();\n        const types = this.edgeTypes.filter(type => type.trigger === \"source\");\n        if(types.length > 0) {\n            actions.push(new Action({\n                icon: \"fas fa-plus-circle fa-fw\",\n                title: \"msg#network.actions.fetchMoreAll\",\n                text: \"msg#network.actions.fetchMoreAllText\",\n                action: () => {\n                    this.fetchAggregations(types);\n                },\n                disabled: !this.active\n            }));\n            actions.push(new Action({\n                separator: true\n            }));\n            types.forEach(type => {\n                const agg =  this.getAggregationLabel(type.aggregation);\n                actions.push(new Action({\n                    icon: \"fas fa-plus-circle fa-fw\",\n                    title: this.context.intlService.formatMessage(\"msg#network.actions.fetchMoreAgg\", {agg}),\n                    text: agg,\n                    action: () => {\n                        this.fetchAggregations([type]);\n                    },\n                    disabled: !this.active\n                }))\n            });\n        }\n        return actions;\n    }\n\n    /**\n     * Called to generate the list of actions displayed for a specific node\n     * when it is clicked on.\n     * We display \"expand\" actions for the edges with a \"manual\" trigger.\n     * @param node The clicked node\n     */\n    override getNodeActions(node: Node): Action[] {\n        const actions = super.getNodeActions(node);\n        if(this.active) {\n            const types = this.edgeTypes.filter(type => type.trigger === \"manual\" && type.nodeTypes[0] === node.type);\n            if(types.length === 1){\n                actions.push(this.createExpandAction(types[0], node));\n            }\n            else if(types.length > 1) {\n                actions.push(new Action({\n                    icon: \"fas fa-plus-circle\",\n                    title: this.context.intlService.formatMessage(\"msg#network.actions.expandNode\", {label: node.label}),\n                    children: types.map(type => this.createExpandAction(type, node, true))\n                }));\n            }\n        }\n        return actions;\n    }\n\n    /**\n     * Convenience method to generate an expand action for a given node\n     * and given edge type.\n     * @param type The edge type for expanding the node\n     * @param node The node we wish to expand\n     * @param withtext Whether or not the action should have text (or just an icon)\n     */\n    protected createExpandAction(type: AggregationEdgeType, node: Node, withtext?: boolean): Action {\n      const agg =  this.getAggregationLabel(type.aggregation);\n      const title = this.context.intlService.formatMessage(\"msg#network.actions.expandNodeWith\", {agg});\n      return new Action({\n            icon: \"fas fa-plus-circle fa-fw\",\n            title: title,\n            text: withtext? title : undefined,\n            action: () => {\n                if(this.skips[type.aggregation+node.id] === undefined) {\n                    // We need to skip the already connected nodes\n                    const connectedNodes = this.dataset.getConnectedNodes(node.id)\n                        .filter(node => node.type === type.nodeTypes[1]);\n                    this.skips[type.aggregation+node.id] = connectedNodes.length;\n                }\n                this.fetchAggregations([type], node);\n            },\n        })\n    }\n\n    protected getAggregationLabel(aggregation: string) {\n      const cc = this.context.appService.getCCAggregation(aggregation);\n      return cc?.column.split('/')\n        .map(col => this.context.appService.getPluralLabel(col))\n        .map(col => this.context.intlService.formatMessage(col))\n        .join('/') || aggregation;\n    }\n\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/AggregationEdge.html":{"url":"interfaces/AggregationEdge.html","title":"interface - AggregationEdge","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  AggregationEdge\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            network/providers/aggregation-provider.ts\n        \n\n\n            \n                Description\n            \n            \n                Extension of the Edge interface, to store the aggregation and\naggregation items from which the edge is constructed\n\n            \n\n            \n                Extends\n            \n            \n                        Edge\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            aggregation\n                                        \n                                \n                                \n                                        \n                                            aggregationItem\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        aggregation\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        aggregation:     Aggregation\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Aggregation\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        aggregationItem\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        aggregationItem:     AggregationItem\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     AggregationItem\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Aggregation, AggregationItem } from '@sinequa/core/web-services';\nimport { Node, Edge, EdgeType, NetworkDataset, NetworkContext } from '../network-models';\nimport { Action } from '@sinequa/components/action';\nimport { Query, Expr } from '@sinequa/core/app-utils';\nimport { Utils } from '@sinequa/core/base';\nimport { BaseProvider } from './base-provider';\n\n/**\n * Extension of the Edge interface, to store the aggregation and\n * aggregation items from which the edge is constructed\n */\nexport interface AggregationEdge extends Edge {\n    aggregationItem: AggregationItem;\n    aggregation: Aggregation;\n}\n\n/**\n * Convenience structure for managing custom metadata types (like\n * cooccurrence entities). AggregationData is returned by the custom\n * parse() function of an AggregationEdgeType.\n */\nexport interface AggregationData {\n    values: string[]; // eg. LARRY PAGE, GOOGLE\n    displays: string[]; // eg. Larry Page, Google\n    relations?: string[]; // eg. Works At\n    directed?: boolean[]; // eg. true\n    fieldValue?: string; // A value on which to filter the data\n}\n\n/** Mode \"source\" means node are fetched and added systematically on getData() / other modes allow expanding an existing node*/\nexport type AggregationTriggerType = \"source\" | \"onclick\" | \"manual\";\n// TODO: Add support for \"oninsert\" (which might required additional complexity)\n\n/**\n * Extension of the EdgeType interface, specifying which aggregation is used\n * to generate the Edges, and additional options.\n */\nexport interface AggregationEdgeType extends EdgeType {\n    /** Name of the aggregation in the Web Service configuration */\n    aggregation: string;\n    /** If parse is provided, it is used to get the new nodes and edges. If not, the value is automatically converted into nodes, using nodeTypes[1] */\n    parse?: (item: AggregationItem, type: AggregationEdgeType) => AggregationData | undefined; // A cooccurrence aggregation might return 3 nodes and 2 edges\n    /** A parameter to define when the aggregation is fetched and nodes are added */\n    trigger: AggregationTriggerType;\n    /** Default number of items to fetch */\n    count?: number;\n    // TODO: add visibility modes ? (eg. existingNodes)\n}\n\n/**\n * Tests whether an EdgeType is an AggregationEdgeType\n * @param et an edge type\n */\nexport function isAggregationEdgeType(et: EdgeType): et is AggregationEdgeType {\n    return !!(et as AggregationEdgeType).aggregation;\n}\n\n/**\n * The Aggregation Provider generates nodes and edges from aggregations\n * fetched from the server.\n */\nexport class AggregationProvider extends BaseProvider {\n\n    /** Stores how many aggregation items have been fetched from the server for a given aggregation */\n    readonly skips: {[aggregation: string]: number} = {};\n\n    constructor(\n        public override name: string,\n        protected edgeTypes: AggregationEdgeType[],\n        protected query?: Query\n    ) {\n        super(name);\n    }\n\n\n    /**\n     * Fetches the list of aggregations and updates the dataset\n     * @param types list of aggregation edge types\n     * @param sourceNode if provided, will compute the aggregation with a select to compute the aggregation for documents referencing that node\n     */\n    protected fetchAggregations(types: AggregationEdgeType[], sourceNode?: Node) {\n\n        const query = Utils.copy(this.query || this.context.searchService.query);\n        query.action = \"aggregate\";\n        query.aggregations = {};\n        types.forEach(type => query.aggregations[type.aggregation] = {\n            skip: this.skips[type.aggregation+(sourceNode?.id || \"\")],\n            count: type.count || 10\n        });\n\n        if(sourceNode && sourceNode.type.field) {\n            query.addSelect(this.context.exprBuilder.makeExpr(sourceNode.type.field, this.getNodeValue(sourceNode)));\n        }\n\n        Object.keys(query.aggregations).forEach(aggregation => {\n            if(!this.context.appService.getCCAggregation(aggregation)) {\n                // This may not be a mistake if the aggregation belong to a different web service configuration\n                console.warn(`Aggregation '${aggregation}' does not exist in the Query web service configuration`);\n            }\n        });\n\n        this.context.searchService.getResults(query, undefined, {searchInactive: true}).subscribe(\n            results => {\n                this.updateDataset(results.aggregations, types, sourceNode);\n            }\n        );\n\n    }\n\n    /**\n     * Fills the dataset with nodes and edges corresponding to\n     * the given aggregations data, and emits this new dataset.\n     * @param aggregations the list of aggregations to process\n     * @param types the corresponding edge types for each aggregation\n     */\n    protected updateDataset(aggregations: Aggregation[], types: AggregationEdgeType[], sourceNode?: Node) {\n\n        aggregations.forEach(aggregation => {\n            if(aggregation && aggregation.items) {\n                const type = types.find(type => Utils.eqNC(type.aggregation, aggregation.name));\n                if(type) {\n                    this.skips[type.aggregation+(sourceNode?.id || \"\")] += aggregation.items.length;\n                    aggregation.items.forEach(item => this.addAggregationNodes(item, aggregation, type, sourceNode));\n                }\n            }\n        });\n\n        this.provider.next(this.dataset);\n    }\n\n    /**\n     * Create nodes and edges for the given aggregation item and adds them\n     * to the dataset. By default (if the edge does not have a parse() function\n     * and there is no sourceNode), the aggregation is assumed to be a cross-\n     * distribution, with items formatted as \"Bill Gates/Microsoft\".\n     * @param item the aggregation item to process\n     * @param aggregation the aggregation from which the item comes from\n     * @param type the type of the edge corresponding to that aggregation\n     * @param sourceNode if provided, will assume the distribution is 1-dimensional and attach each new node to that source node\n     */\n    addAggregationNodes(item: AggregationItem, aggregation: Aggregation, type: AggregationEdgeType, sourceNode?: Node) {\n\n        let rawData: AggregationData | undefined;\n\n        if(type.parse) {\n            rawData = type.parse(item, type);\n        }\n        else {\n            // Source distributions are at least two-dimensional\n            if(!sourceNode) {\n                if(!item.display){\n                    throw new Error(`Aggregation Item '${item.value}' has no display value`);\n                }\n                // Default parsing, assuming cross-distribution format (\"Apple/Steve Jobs\")\n                const displays = item.display.split(\"/\");\n                const expr = this.context.appService.parseExpr(item.value.toString()) as Expr;\n                const values = expr.operands.map(e => e.value!);\n                if(values.length  0){\n                    const relation = rawData.relations? rawData.relations[i-1] : undefined;\n                    const directed = rawData.directed? rawData.directed[i-1] : false;\n                    data.addEdges(this.createEdge(type, lastNode!, node, rawData.fieldValue, true, {aggregation, aggregationItem: item}, item.count, directed, relation));\n                }\n                lastNode = node;\n            }\n            this.dataset.merge(data);\n        }\n    }\n\n\n    // NetworkProvider interface\n\n    /**\n     * Retrieves the aggregation data synchronously or asynchronously, and updates the dataset with it.\n     */\n    override getData(context: NetworkContext) {\n        this.context = context;\n        this.dataset.clear();\n\n        // Initialize the counts\n        this.edgeTypes.forEach(type => this.skips[type.aggregation] = 0);\n\n        // Fetch the \"source\" aggregation edges\n        const types = this.edgeTypes.filter(type => type.trigger === \"source\");\n\n        if(this.active && types.length > 0) {\n            this.fetchAggregations(types);\n        }\n        else {\n            this.provider.next(this.dataset); // avoid undefined dataset when edge trigger !== source\n        }\n    }\n\n    /**\n     * Called when a node in the network is clicked.\n     * If one edge has an \"onclick\" trigger we potentially expand that\n     * clicked node.\n     * @param node the clicked node\n     */\n    override onNodeClicked(node?: Node) {\n        if(this.active && node) {\n            const types = this.edgeTypes.filter(type => type.trigger === \"onclick\" && type.nodeTypes[0] === node.type);\n            if(types.length > 0) {\n                types.forEach(type => {\n                    if(this.skips[type.aggregation+node.id] === undefined) {\n                        // We need to skip the already connected nodes\n                        const connectedNodes = this.dataset.getConnectedNodes(node.id)\n                            .filter(node => node.type === type.nodeTypes[1]);\n                        this.skips[type.aggregation+node.id] = connectedNodes.length;\n                    }\n                });\n                this.fetchAggregations(types, node);\n            }\n        }\n    }\n\n    /**\n     * Called to generate the list of actions specific to this provider.\n     * We display actions allowing to add additional data for \"source\" edges\n     * (either all the source edges at once, or each individually).\n     */\n    override getProviderActions(): Action[] {\n        const actions = super.getProviderActions();\n        const types = this.edgeTypes.filter(type => type.trigger === \"source\");\n        if(types.length > 0) {\n            actions.push(new Action({\n                icon: \"fas fa-plus-circle fa-fw\",\n                title: \"msg#network.actions.fetchMoreAll\",\n                text: \"msg#network.actions.fetchMoreAllText\",\n                action: () => {\n                    this.fetchAggregations(types);\n                },\n                disabled: !this.active\n            }));\n            actions.push(new Action({\n                separator: true\n            }));\n            types.forEach(type => {\n                const agg =  this.getAggregationLabel(type.aggregation);\n                actions.push(new Action({\n                    icon: \"fas fa-plus-circle fa-fw\",\n                    title: this.context.intlService.formatMessage(\"msg#network.actions.fetchMoreAgg\", {agg}),\n                    text: agg,\n                    action: () => {\n                        this.fetchAggregations([type]);\n                    },\n                    disabled: !this.active\n                }))\n            });\n        }\n        return actions;\n    }\n\n    /**\n     * Called to generate the list of actions displayed for a specific node\n     * when it is clicked on.\n     * We display \"expand\" actions for the edges with a \"manual\" trigger.\n     * @param node The clicked node\n     */\n    override getNodeActions(node: Node): Action[] {\n        const actions = super.getNodeActions(node);\n        if(this.active) {\n            const types = this.edgeTypes.filter(type => type.trigger === \"manual\" && type.nodeTypes[0] === node.type);\n            if(types.length === 1){\n                actions.push(this.createExpandAction(types[0], node));\n            }\n            else if(types.length > 1) {\n                actions.push(new Action({\n                    icon: \"fas fa-plus-circle\",\n                    title: this.context.intlService.formatMessage(\"msg#network.actions.expandNode\", {label: node.label}),\n                    children: types.map(type => this.createExpandAction(type, node, true))\n                }));\n            }\n        }\n        return actions;\n    }\n\n    /**\n     * Convenience method to generate an expand action for a given node\n     * and given edge type.\n     * @param type The edge type for expanding the node\n     * @param node The node we wish to expand\n     * @param withtext Whether or not the action should have text (or just an icon)\n     */\n    protected createExpandAction(type: AggregationEdgeType, node: Node, withtext?: boolean): Action {\n      const agg =  this.getAggregationLabel(type.aggregation);\n      const title = this.context.intlService.formatMessage(\"msg#network.actions.expandNodeWith\", {agg});\n      return new Action({\n            icon: \"fas fa-plus-circle fa-fw\",\n            title: title,\n            text: withtext? title : undefined,\n            action: () => {\n                if(this.skips[type.aggregation+node.id] === undefined) {\n                    // We need to skip the already connected nodes\n                    const connectedNodes = this.dataset.getConnectedNodes(node.id)\n                        .filter(node => node.type === type.nodeTypes[1]);\n                    this.skips[type.aggregation+node.id] = connectedNodes.length;\n                }\n                this.fetchAggregations([type], node);\n            },\n        })\n    }\n\n    protected getAggregationLabel(aggregation: string) {\n      const cc = this.context.appService.getCCAggregation(aggregation);\n      return cc?.column.split('/')\n        .map(col => this.context.appService.getPluralLabel(col))\n        .map(col => this.context.intlService.formatMessage(col))\n        .join('/') || aggregation;\n    }\n\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/AggregationEdgeType.html":{"url":"interfaces/AggregationEdgeType.html","title":"interface - AggregationEdgeType","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  AggregationEdgeType\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            network/providers/aggregation-provider.ts\n        \n\n\n            \n                Description\n            \n            \n                Extension of the EdgeType interface, specifying which aggregation is used\nto generate the Edges, and additional options.\n\n            \n\n            \n                Extends\n            \n            \n                        EdgeType\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            aggregation\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            count\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            parse\n                                        \n                                \n                                \n                                        \n                                            trigger\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        aggregation\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        aggregation:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Name of the aggregation in the Web Service configuration\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        count\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        count:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Default number of items to fetch\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        parse\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        parse:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    If parse is provided, it is used to get the new nodes and edges. If not, the value is automatically converted into nodes, using nodeTypes[1]\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        trigger\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        trigger:         AggregationTriggerType\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         AggregationTriggerType\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    A parameter to define when the aggregation is fetched and nodes are added\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { Aggregation, AggregationItem } from '@sinequa/core/web-services';\nimport { Node, Edge, EdgeType, NetworkDataset, NetworkContext } from '../network-models';\nimport { Action } from '@sinequa/components/action';\nimport { Query, Expr } from '@sinequa/core/app-utils';\nimport { Utils } from '@sinequa/core/base';\nimport { BaseProvider } from './base-provider';\n\n/**\n * Extension of the Edge interface, to store the aggregation and\n * aggregation items from which the edge is constructed\n */\nexport interface AggregationEdge extends Edge {\n    aggregationItem: AggregationItem;\n    aggregation: Aggregation;\n}\n\n/**\n * Convenience structure for managing custom metadata types (like\n * cooccurrence entities). AggregationData is returned by the custom\n * parse() function of an AggregationEdgeType.\n */\nexport interface AggregationData {\n    values: string[]; // eg. LARRY PAGE, GOOGLE\n    displays: string[]; // eg. Larry Page, Google\n    relations?: string[]; // eg. Works At\n    directed?: boolean[]; // eg. true\n    fieldValue?: string; // A value on which to filter the data\n}\n\n/** Mode \"source\" means node are fetched and added systematically on getData() / other modes allow expanding an existing node*/\nexport type AggregationTriggerType = \"source\" | \"onclick\" | \"manual\";\n// TODO: Add support for \"oninsert\" (which might required additional complexity)\n\n/**\n * Extension of the EdgeType interface, specifying which aggregation is used\n * to generate the Edges, and additional options.\n */\nexport interface AggregationEdgeType extends EdgeType {\n    /** Name of the aggregation in the Web Service configuration */\n    aggregation: string;\n    /** If parse is provided, it is used to get the new nodes and edges. If not, the value is automatically converted into nodes, using nodeTypes[1] */\n    parse?: (item: AggregationItem, type: AggregationEdgeType) => AggregationData | undefined; // A cooccurrence aggregation might return 3 nodes and 2 edges\n    /** A parameter to define when the aggregation is fetched and nodes are added */\n    trigger: AggregationTriggerType;\n    /** Default number of items to fetch */\n    count?: number;\n    // TODO: add visibility modes ? (eg. existingNodes)\n}\n\n/**\n * Tests whether an EdgeType is an AggregationEdgeType\n * @param et an edge type\n */\nexport function isAggregationEdgeType(et: EdgeType): et is AggregationEdgeType {\n    return !!(et as AggregationEdgeType).aggregation;\n}\n\n/**\n * The Aggregation Provider generates nodes and edges from aggregations\n * fetched from the server.\n */\nexport class AggregationProvider extends BaseProvider {\n\n    /** Stores how many aggregation items have been fetched from the server for a given aggregation */\n    readonly skips: {[aggregation: string]: number} = {};\n\n    constructor(\n        public override name: string,\n        protected edgeTypes: AggregationEdgeType[],\n        protected query?: Query\n    ) {\n        super(name);\n    }\n\n\n    /**\n     * Fetches the list of aggregations and updates the dataset\n     * @param types list of aggregation edge types\n     * @param sourceNode if provided, will compute the aggregation with a select to compute the aggregation for documents referencing that node\n     */\n    protected fetchAggregations(types: AggregationEdgeType[], sourceNode?: Node) {\n\n        const query = Utils.copy(this.query || this.context.searchService.query);\n        query.action = \"aggregate\";\n        query.aggregations = {};\n        types.forEach(type => query.aggregations[type.aggregation] = {\n            skip: this.skips[type.aggregation+(sourceNode?.id || \"\")],\n            count: type.count || 10\n        });\n\n        if(sourceNode && sourceNode.type.field) {\n            query.addSelect(this.context.exprBuilder.makeExpr(sourceNode.type.field, this.getNodeValue(sourceNode)));\n        }\n\n        Object.keys(query.aggregations).forEach(aggregation => {\n            if(!this.context.appService.getCCAggregation(aggregation)) {\n                // This may not be a mistake if the aggregation belong to a different web service configuration\n                console.warn(`Aggregation '${aggregation}' does not exist in the Query web service configuration`);\n            }\n        });\n\n        this.context.searchService.getResults(query, undefined, {searchInactive: true}).subscribe(\n            results => {\n                this.updateDataset(results.aggregations, types, sourceNode);\n            }\n        );\n\n    }\n\n    /**\n     * Fills the dataset with nodes and edges corresponding to\n     * the given aggregations data, and emits this new dataset.\n     * @param aggregations the list of aggregations to process\n     * @param types the corresponding edge types for each aggregation\n     */\n    protected updateDataset(aggregations: Aggregation[], types: AggregationEdgeType[], sourceNode?: Node) {\n\n        aggregations.forEach(aggregation => {\n            if(aggregation && aggregation.items) {\n                const type = types.find(type => Utils.eqNC(type.aggregation, aggregation.name));\n                if(type) {\n                    this.skips[type.aggregation+(sourceNode?.id || \"\")] += aggregation.items.length;\n                    aggregation.items.forEach(item => this.addAggregationNodes(item, aggregation, type, sourceNode));\n                }\n            }\n        });\n\n        this.provider.next(this.dataset);\n    }\n\n    /**\n     * Create nodes and edges for the given aggregation item and adds them\n     * to the dataset. By default (if the edge does not have a parse() function\n     * and there is no sourceNode), the aggregation is assumed to be a cross-\n     * distribution, with items formatted as \"Bill Gates/Microsoft\".\n     * @param item the aggregation item to process\n     * @param aggregation the aggregation from which the item comes from\n     * @param type the type of the edge corresponding to that aggregation\n     * @param sourceNode if provided, will assume the distribution is 1-dimensional and attach each new node to that source node\n     */\n    addAggregationNodes(item: AggregationItem, aggregation: Aggregation, type: AggregationEdgeType, sourceNode?: Node) {\n\n        let rawData: AggregationData | undefined;\n\n        if(type.parse) {\n            rawData = type.parse(item, type);\n        }\n        else {\n            // Source distributions are at least two-dimensional\n            if(!sourceNode) {\n                if(!item.display){\n                    throw new Error(`Aggregation Item '${item.value}' has no display value`);\n                }\n                // Default parsing, assuming cross-distribution format (\"Apple/Steve Jobs\")\n                const displays = item.display.split(\"/\");\n                const expr = this.context.appService.parseExpr(item.value.toString()) as Expr;\n                const values = expr.operands.map(e => e.value!);\n                if(values.length  0){\n                    const relation = rawData.relations? rawData.relations[i-1] : undefined;\n                    const directed = rawData.directed? rawData.directed[i-1] : false;\n                    data.addEdges(this.createEdge(type, lastNode!, node, rawData.fieldValue, true, {aggregation, aggregationItem: item}, item.count, directed, relation));\n                }\n                lastNode = node;\n            }\n            this.dataset.merge(data);\n        }\n    }\n\n\n    // NetworkProvider interface\n\n    /**\n     * Retrieves the aggregation data synchronously or asynchronously, and updates the dataset with it.\n     */\n    override getData(context: NetworkContext) {\n        this.context = context;\n        this.dataset.clear();\n\n        // Initialize the counts\n        this.edgeTypes.forEach(type => this.skips[type.aggregation] = 0);\n\n        // Fetch the \"source\" aggregation edges\n        const types = this.edgeTypes.filter(type => type.trigger === \"source\");\n\n        if(this.active && types.length > 0) {\n            this.fetchAggregations(types);\n        }\n        else {\n            this.provider.next(this.dataset); // avoid undefined dataset when edge trigger !== source\n        }\n    }\n\n    /**\n     * Called when a node in the network is clicked.\n     * If one edge has an \"onclick\" trigger we potentially expand that\n     * clicked node.\n     * @param node the clicked node\n     */\n    override onNodeClicked(node?: Node) {\n        if(this.active && node) {\n            const types = this.edgeTypes.filter(type => type.trigger === \"onclick\" && type.nodeTypes[0] === node.type);\n            if(types.length > 0) {\n                types.forEach(type => {\n                    if(this.skips[type.aggregation+node.id] === undefined) {\n                        // We need to skip the already connected nodes\n                        const connectedNodes = this.dataset.getConnectedNodes(node.id)\n                            .filter(node => node.type === type.nodeTypes[1]);\n                        this.skips[type.aggregation+node.id] = connectedNodes.length;\n                    }\n                });\n                this.fetchAggregations(types, node);\n            }\n        }\n    }\n\n    /**\n     * Called to generate the list of actions specific to this provider.\n     * We display actions allowing to add additional data for \"source\" edges\n     * (either all the source edges at once, or each individually).\n     */\n    override getProviderActions(): Action[] {\n        const actions = super.getProviderActions();\n        const types = this.edgeTypes.filter(type => type.trigger === \"source\");\n        if(types.length > 0) {\n            actions.push(new Action({\n                icon: \"fas fa-plus-circle fa-fw\",\n                title: \"msg#network.actions.fetchMoreAll\",\n                text: \"msg#network.actions.fetchMoreAllText\",\n                action: () => {\n                    this.fetchAggregations(types);\n                },\n                disabled: !this.active\n            }));\n            actions.push(new Action({\n                separator: true\n            }));\n            types.forEach(type => {\n                const agg =  this.getAggregationLabel(type.aggregation);\n                actions.push(new Action({\n                    icon: \"fas fa-plus-circle fa-fw\",\n                    title: this.context.intlService.formatMessage(\"msg#network.actions.fetchMoreAgg\", {agg}),\n                    text: agg,\n                    action: () => {\n                        this.fetchAggregations([type]);\n                    },\n                    disabled: !this.active\n                }))\n            });\n        }\n        return actions;\n    }\n\n    /**\n     * Called to generate the list of actions displayed for a specific node\n     * when it is clicked on.\n     * We display \"expand\" actions for the edges with a \"manual\" trigger.\n     * @param node The clicked node\n     */\n    override getNodeActions(node: Node): Action[] {\n        const actions = super.getNodeActions(node);\n        if(this.active) {\n            const types = this.edgeTypes.filter(type => type.trigger === \"manual\" && type.nodeTypes[0] === node.type);\n            if(types.length === 1){\n                actions.push(this.createExpandAction(types[0], node));\n            }\n            else if(types.length > 1) {\n                actions.push(new Action({\n                    icon: \"fas fa-plus-circle\",\n                    title: this.context.intlService.formatMessage(\"msg#network.actions.expandNode\", {label: node.label}),\n                    children: types.map(type => this.createExpandAction(type, node, true))\n                }));\n            }\n        }\n        return actions;\n    }\n\n    /**\n     * Convenience method to generate an expand action for a given node\n     * and given edge type.\n     * @param type The edge type for expanding the node\n     * @param node The node we wish to expand\n     * @param withtext Whether or not the action should have text (or just an icon)\n     */\n    protected createExpandAction(type: AggregationEdgeType, node: Node, withtext?: boolean): Action {\n      const agg =  this.getAggregationLabel(type.aggregation);\n      const title = this.context.intlService.formatMessage(\"msg#network.actions.expandNodeWith\", {agg});\n      return new Action({\n            icon: \"fas fa-plus-circle fa-fw\",\n            title: title,\n            text: withtext? title : undefined,\n            action: () => {\n                if(this.skips[type.aggregation+node.id] === undefined) {\n                    // We need to skip the already connected nodes\n                    const connectedNodes = this.dataset.getConnectedNodes(node.id)\n                        .filter(node => node.type === type.nodeTypes[1]);\n                    this.skips[type.aggregation+node.id] = connectedNodes.length;\n                }\n                this.fetchAggregations([type], node);\n            },\n        })\n    }\n\n    protected getAggregationLabel(aggregation: string) {\n      const cc = this.context.appService.getCCAggregation(aggregation);\n      return cc?.column.split('/')\n        .map(col => this.context.appService.getPluralLabel(col))\n        .map(col => this.context.intlService.formatMessage(col))\n        .join('/') || aggregation;\n    }\n\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/AggregationProvider.html":{"url":"classes/AggregationProvider.html","title":"class - AggregationProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AggregationProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            network/providers/aggregation-provider.ts\n        \n\n\n            \n                Description\n            \n            \n                The Aggregation Provider generates nodes and edges from aggregations\nfetched from the server.\n\n            \n\n            \n                Extends\n            \n            \n                        BaseProvider\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    \n                                name\n                            \n                            \n                                    Readonly\n                                skips\n                            \n                            \n                                    Public\n                                    Readonly\n                                activateAction\n                            \n                            \n                                    Public\n                                active\n                            \n                            \n                                    Public\n                                context\n                            \n                            \n                                    Public\n                                dataset\n                            \n                            \n                                    Public\n                                    Readonly\n                                EDGESEPARATOR\n                            \n                            \n                                    Public\n                                    Readonly\n                                resetAction\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                addAggregationNodes\n                            \n                            \n                                    \n                                getData\n                            \n                            \n                                    \n                                getNodeActions\n                            \n                            \n                                    \n                                getProviderActions\n                            \n                            \n                                    \n                                onNodeClicked\n                            \n                            \n                                getEdgeActions\n                            \n                            \n                                getProvider\n                            \n                            \n                                onDatasetsMerged\n                            \n                            \n                                onDestroy\n                            \n                            \n                                onEdgeClicked\n                            \n                            \n                                onNodesInserted\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(name: string, edgeTypes: AggregationEdgeType[], query?: Query)\n                    \n                \n                        \n                            \n                                Defined in network/providers/aggregation-provider.ts:65\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        name\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        edgeTypes\n                                                  \n                                                        \n                                                                    AggregationEdgeType[]\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        query\n                                                  \n                                                        \n                                                                        Query\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                        \n                            \n                                Inherited from         BaseProvider\n\n                            \n                        \n                    \n                        \n                                Defined in         BaseProvider:68\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        skips\n                        \n                    \n                \n            \n                \n                    \n                        Type :     literal type\n\n                    \n                \n                \n                    \n                        Default value : {}\n                    \n                \n                    \n                        \n                                Defined in network/providers/aggregation-provider.ts:65\n                        \n                    \n\n            \n                \n                    Stores how many aggregation items have been fetched from the server for a given aggregation\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        activateAction\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Action\n\n                    \n                \n                        \n                            \n                                Inherited from         BaseProvider\n\n                            \n                        \n                    \n                        \n                                Defined in         BaseProvider:21\n\n                        \n                    \n\n            \n                \n                    Action to turn the provider on or off\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        active\n                        \n                    \n                \n            \n                \n                    \n                        Default value : true\n                    \n                \n                        \n                            \n                                Inherited from         BaseProvider\n\n                            \n                        \n                    \n                        \n                                Defined in         BaseProvider:16\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        context\n                        \n                    \n                \n            \n                \n                    \n                        Type :         NetworkContext\n\n                    \n                \n                        \n                            \n                                Inherited from         BaseProvider\n\n                            \n                        \n                    \n                        \n                                Defined in         BaseProvider:25\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        dataset\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new NetworkDataset()\n                    \n                \n                        \n                            \n                                Inherited from         BaseProvider\n\n                            \n                        \n                    \n                        \n                                Defined in         BaseProvider:15\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        EDGESEPARATOR\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : \"~~~EDGE~~~\"\n                    \n                \n                        \n                            \n                                Inherited from         BaseProvider\n\n                            \n                        \n                    \n                        \n                                Defined in         BaseProvider:18\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        resetAction\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Action\n\n                    \n                \n                        \n                            \n                                Inherited from         BaseProvider\n\n                            \n                        \n                    \n                        \n                                Defined in         BaseProvider:23\n\n                        \n                    \n\n            \n                \n                    Action to reset the provider\n\n                \n            \n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        addAggregationNodes\n                        \n                    \n                \n            \n            \n                \naddAggregationNodes(item: AggregationItem, aggregation: Aggregation, type: AggregationEdgeType, sourceNode?: Node)\n                \n            \n\n\n            \n                \n                    Defined in network/providers/aggregation-provider.ts:141\n                \n            \n\n\n            \n                \n                    Create nodes and edges for the given aggregation item and adds them\nto the dataset. By default (if the edge does not have a parse() function\nand there is no sourceNode), the aggregation is assumed to be a cross-\ndistribution, with items formatted as \"Bill Gates/Microsoft\".\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    item\n                                    \n                                            AggregationItem\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the aggregation item to process\n\n                                    \n                                \n                                \n                                    aggregation\n                                    \n                                            Aggregation\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the aggregation from which the item comes from\n\n                                    \n                                \n                                \n                                    type\n                                    \n                                                AggregationEdgeType\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the type of the edge corresponding to that aggregation\n\n                                    \n                                \n                                \n                                    sourceNode\n                                    \n                                                Node\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        if provided, will assume the distribution is 1-dimensional and attach each new node to that source node\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        getData\n                        \n                    \n                \n            \n            \n                \n                    \n                    getData(context: NetworkContext)\n                \n            \n\n\n            \n                \n                    Inherited from         BaseProvider\n\n                \n            \n            \n                \n                        Defined in         BaseProvider:195\n\n                \n            \n\n\n            \n                \n                    Retrieves the aggregation data synchronously or asynchronously, and updates the dataset with it.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                                NetworkContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        getNodeActions\n                        \n                    \n                \n            \n            \n                \n                    \n                    getNodeActions(node: Node)\n                \n            \n\n\n            \n                \n                    Inherited from         BaseProvider\n\n                \n            \n            \n                \n                        Defined in         BaseProvider:279\n\n                \n            \n\n\n            \n                \n                    Called to generate the list of actions displayed for a specific node\nwhen it is clicked on.\nWe display \"expand\" actions for the edges with a \"manual\" trigger.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    node\n                                    \n                                                Node\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The clicked node\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Action[]\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        getProviderActions\n                        \n                    \n                \n            \n            \n                \n                    \n                    getProviderActions()\n                \n            \n\n\n            \n                \n                    Inherited from         BaseProvider\n\n                \n            \n            \n                \n                        Defined in         BaseProvider:241\n\n                \n            \n\n\n            \n                \n                    Called to generate the list of actions specific to this provider.\nWe display actions allowing to add additional data for \"source\" edges\n(either all the source edges at once, or each individually).\n\n\n                    \n                        Returns :     Action[]\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        onNodeClicked\n                        \n                    \n                \n            \n            \n                \n                    \n                    onNodeClicked(node?: Node)\n                \n            \n\n\n            \n                \n                    Inherited from         BaseProvider\n\n                \n            \n            \n                \n                        Defined in         BaseProvider:219\n\n                \n            \n\n\n            \n                \n                    Called when a node in the network is clicked.\nIf one edge has an \"onclick\" trigger we potentially expand that\nclicked node.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    node\n                                    \n                                                Node\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        the clicked node\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getEdgeActions\n                        \n                    \n                \n            \n            \n                \ngetEdgeActions(edge: Edge)\n                \n            \n\n\n            \n                \n                    Inherited from         BaseProvider\n\n                \n            \n            \n                \n                        Defined in         BaseProvider:211\n\n                \n            \n\n\n            \n                \n                    By default the base provider includes an action to filter the search if a clicked\nedge has a \"type.field\" property and a \"fieldValue\" (alternatively, an action\nis created if the 2 adjacent nodes can be filtered, ie they both have a \"field\"\nproperty)\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    edge\n                                    \n                                                Edge\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The clicked edge\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Action[]\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getProvider\n                        \n                    \n                \n            \n            \n                \ngetProvider()\n                \n            \n\n\n            \n                \n                    Inherited from         BaseProvider\n\n                \n            \n            \n                \n                        Defined in         BaseProvider:151\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         Subject\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onDatasetsMerged\n                        \n                    \n                \n            \n            \n                \nonDatasetsMerged(dataset: NetworkDataset)\n                \n            \n\n\n            \n                \n                    Inherited from         BaseProvider\n\n                \n            \n            \n                \n                        Defined in         BaseProvider:159\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dataset\n                                    \n                                                NetworkDataset\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onDestroy\n                        \n                    \n                \n            \n            \n                \nonDestroy()\n                \n            \n\n\n            \n                \n                    Inherited from         BaseProvider\n\n                \n            \n            \n                \n                        Defined in         BaseProvider:245\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onEdgeClicked\n                        \n                    \n                \n            \n            \n                \nonEdgeClicked(edge: Edge | undefined)\n                \n            \n\n\n            \n                \n                    Inherited from         BaseProvider\n\n                \n            \n            \n                \n                        Defined in         BaseProvider:171\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    edge\n                                    \n                                                Edge | undefined\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onNodesInserted\n                        \n                    \n                \n            \n            \n                \nonNodesInserted(nodes: Node[])\n                \n            \n\n\n            \n                \n                    Inherited from         BaseProvider\n\n                \n            \n            \n                \n                        Defined in         BaseProvider:163\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    nodes\n                                    \n                                                Node[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Aggregation, AggregationItem } from '@sinequa/core/web-services';\nimport { Node, Edge, EdgeType, NetworkDataset, NetworkContext } from '../network-models';\nimport { Action } from '@sinequa/components/action';\nimport { Query, Expr } from '@sinequa/core/app-utils';\nimport { Utils } from '@sinequa/core/base';\nimport { BaseProvider } from './base-provider';\n\n/**\n * Extension of the Edge interface, to store the aggregation and\n * aggregation items from which the edge is constructed\n */\nexport interface AggregationEdge extends Edge {\n    aggregationItem: AggregationItem;\n    aggregation: Aggregation;\n}\n\n/**\n * Convenience structure for managing custom metadata types (like\n * cooccurrence entities). AggregationData is returned by the custom\n * parse() function of an AggregationEdgeType.\n */\nexport interface AggregationData {\n    values: string[]; // eg. LARRY PAGE, GOOGLE\n    displays: string[]; // eg. Larry Page, Google\n    relations?: string[]; // eg. Works At\n    directed?: boolean[]; // eg. true\n    fieldValue?: string; // A value on which to filter the data\n}\n\n/** Mode \"source\" means node are fetched and added systematically on getData() / other modes allow expanding an existing node*/\nexport type AggregationTriggerType = \"source\" | \"onclick\" | \"manual\";\n// TODO: Add support for \"oninsert\" (which might required additional complexity)\n\n/**\n * Extension of the EdgeType interface, specifying which aggregation is used\n * to generate the Edges, and additional options.\n */\nexport interface AggregationEdgeType extends EdgeType {\n    /** Name of the aggregation in the Web Service configuration */\n    aggregation: string;\n    /** If parse is provided, it is used to get the new nodes and edges. If not, the value is automatically converted into nodes, using nodeTypes[1] */\n    parse?: (item: AggregationItem, type: AggregationEdgeType) => AggregationData | undefined; // A cooccurrence aggregation might return 3 nodes and 2 edges\n    /** A parameter to define when the aggregation is fetched and nodes are added */\n    trigger: AggregationTriggerType;\n    /** Default number of items to fetch */\n    count?: number;\n    // TODO: add visibility modes ? (eg. existingNodes)\n}\n\n/**\n * Tests whether an EdgeType is an AggregationEdgeType\n * @param et an edge type\n */\nexport function isAggregationEdgeType(et: EdgeType): et is AggregationEdgeType {\n    return !!(et as AggregationEdgeType).aggregation;\n}\n\n/**\n * The Aggregation Provider generates nodes and edges from aggregations\n * fetched from the server.\n */\nexport class AggregationProvider extends BaseProvider {\n\n    /** Stores how many aggregation items have been fetched from the server for a given aggregation */\n    readonly skips: {[aggregation: string]: number} = {};\n\n    constructor(\n        public override name: string,\n        protected edgeTypes: AggregationEdgeType[],\n        protected query?: Query\n    ) {\n        super(name);\n    }\n\n\n    /**\n     * Fetches the list of aggregations and updates the dataset\n     * @param types list of aggregation edge types\n     * @param sourceNode if provided, will compute the aggregation with a select to compute the aggregation for documents referencing that node\n     */\n    protected fetchAggregations(types: AggregationEdgeType[], sourceNode?: Node) {\n\n        const query = Utils.copy(this.query || this.context.searchService.query);\n        query.action = \"aggregate\";\n        query.aggregations = {};\n        types.forEach(type => query.aggregations[type.aggregation] = {\n            skip: this.skips[type.aggregation+(sourceNode?.id || \"\")],\n            count: type.count || 10\n        });\n\n        if(sourceNode && sourceNode.type.field) {\n            query.addSelect(this.context.exprBuilder.makeExpr(sourceNode.type.field, this.getNodeValue(sourceNode)));\n        }\n\n        Object.keys(query.aggregations).forEach(aggregation => {\n            if(!this.context.appService.getCCAggregation(aggregation)) {\n                // This may not be a mistake if the aggregation belong to a different web service configuration\n                console.warn(`Aggregation '${aggregation}' does not exist in the Query web service configuration`);\n            }\n        });\n\n        this.context.searchService.getResults(query, undefined, {searchInactive: true}).subscribe(\n            results => {\n                this.updateDataset(results.aggregations, types, sourceNode);\n            }\n        );\n\n    }\n\n    /**\n     * Fills the dataset with nodes and edges corresponding to\n     * the given aggregations data, and emits this new dataset.\n     * @param aggregations the list of aggregations to process\n     * @param types the corresponding edge types for each aggregation\n     */\n    protected updateDataset(aggregations: Aggregation[], types: AggregationEdgeType[], sourceNode?: Node) {\n\n        aggregations.forEach(aggregation => {\n            if(aggregation && aggregation.items) {\n                const type = types.find(type => Utils.eqNC(type.aggregation, aggregation.name));\n                if(type) {\n                    this.skips[type.aggregation+(sourceNode?.id || \"\")] += aggregation.items.length;\n                    aggregation.items.forEach(item => this.addAggregationNodes(item, aggregation, type, sourceNode));\n                }\n            }\n        });\n\n        this.provider.next(this.dataset);\n    }\n\n    /**\n     * Create nodes and edges for the given aggregation item and adds them\n     * to the dataset. By default (if the edge does not have a parse() function\n     * and there is no sourceNode), the aggregation is assumed to be a cross-\n     * distribution, with items formatted as \"Bill Gates/Microsoft\".\n     * @param item the aggregation item to process\n     * @param aggregation the aggregation from which the item comes from\n     * @param type the type of the edge corresponding to that aggregation\n     * @param sourceNode if provided, will assume the distribution is 1-dimensional and attach each new node to that source node\n     */\n    addAggregationNodes(item: AggregationItem, aggregation: Aggregation, type: AggregationEdgeType, sourceNode?: Node) {\n\n        let rawData: AggregationData | undefined;\n\n        if(type.parse) {\n            rawData = type.parse(item, type);\n        }\n        else {\n            // Source distributions are at least two-dimensional\n            if(!sourceNode) {\n                if(!item.display){\n                    throw new Error(`Aggregation Item '${item.value}' has no display value`);\n                }\n                // Default parsing, assuming cross-distribution format (\"Apple/Steve Jobs\")\n                const displays = item.display.split(\"/\");\n                const expr = this.context.appService.parseExpr(item.value.toString()) as Expr;\n                const values = expr.operands.map(e => e.value!);\n                if(values.length  0){\n                    const relation = rawData.relations? rawData.relations[i-1] : undefined;\n                    const directed = rawData.directed? rawData.directed[i-1] : false;\n                    data.addEdges(this.createEdge(type, lastNode!, node, rawData.fieldValue, true, {aggregation, aggregationItem: item}, item.count, directed, relation));\n                }\n                lastNode = node;\n            }\n            this.dataset.merge(data);\n        }\n    }\n\n\n    // NetworkProvider interface\n\n    /**\n     * Retrieves the aggregation data synchronously or asynchronously, and updates the dataset with it.\n     */\n    override getData(context: NetworkContext) {\n        this.context = context;\n        this.dataset.clear();\n\n        // Initialize the counts\n        this.edgeTypes.forEach(type => this.skips[type.aggregation] = 0);\n\n        // Fetch the \"source\" aggregation edges\n        const types = this.edgeTypes.filter(type => type.trigger === \"source\");\n\n        if(this.active && types.length > 0) {\n            this.fetchAggregations(types);\n        }\n        else {\n            this.provider.next(this.dataset); // avoid undefined dataset when edge trigger !== source\n        }\n    }\n\n    /**\n     * Called when a node in the network is clicked.\n     * If one edge has an \"onclick\" trigger we potentially expand that\n     * clicked node.\n     * @param node the clicked node\n     */\n    override onNodeClicked(node?: Node) {\n        if(this.active && node) {\n            const types = this.edgeTypes.filter(type => type.trigger === \"onclick\" && type.nodeTypes[0] === node.type);\n            if(types.length > 0) {\n                types.forEach(type => {\n                    if(this.skips[type.aggregation+node.id] === undefined) {\n                        // We need to skip the already connected nodes\n                        const connectedNodes = this.dataset.getConnectedNodes(node.id)\n                            .filter(node => node.type === type.nodeTypes[1]);\n                        this.skips[type.aggregation+node.id] = connectedNodes.length;\n                    }\n                });\n                this.fetchAggregations(types, node);\n            }\n        }\n    }\n\n    /**\n     * Called to generate the list of actions specific to this provider.\n     * We display actions allowing to add additional data for \"source\" edges\n     * (either all the source edges at once, or each individually).\n     */\n    override getProviderActions(): Action[] {\n        const actions = super.getProviderActions();\n        const types = this.edgeTypes.filter(type => type.trigger === \"source\");\n        if(types.length > 0) {\n            actions.push(new Action({\n                icon: \"fas fa-plus-circle fa-fw\",\n                title: \"msg#network.actions.fetchMoreAll\",\n                text: \"msg#network.actions.fetchMoreAllText\",\n                action: () => {\n                    this.fetchAggregations(types);\n                },\n                disabled: !this.active\n            }));\n            actions.push(new Action({\n                separator: true\n            }));\n            types.forEach(type => {\n                const agg =  this.getAggregationLabel(type.aggregation);\n                actions.push(new Action({\n                    icon: \"fas fa-plus-circle fa-fw\",\n                    title: this.context.intlService.formatMessage(\"msg#network.actions.fetchMoreAgg\", {agg}),\n                    text: agg,\n                    action: () => {\n                        this.fetchAggregations([type]);\n                    },\n                    disabled: !this.active\n                }))\n            });\n        }\n        return actions;\n    }\n\n    /**\n     * Called to generate the list of actions displayed for a specific node\n     * when it is clicked on.\n     * We display \"expand\" actions for the edges with a \"manual\" trigger.\n     * @param node The clicked node\n     */\n    override getNodeActions(node: Node): Action[] {\n        const actions = super.getNodeActions(node);\n        if(this.active) {\n            const types = this.edgeTypes.filter(type => type.trigger === \"manual\" && type.nodeTypes[0] === node.type);\n            if(types.length === 1){\n                actions.push(this.createExpandAction(types[0], node));\n            }\n            else if(types.length > 1) {\n                actions.push(new Action({\n                    icon: \"fas fa-plus-circle\",\n                    title: this.context.intlService.formatMessage(\"msg#network.actions.expandNode\", {label: node.label}),\n                    children: types.map(type => this.createExpandAction(type, node, true))\n                }));\n            }\n        }\n        return actions;\n    }\n\n    /**\n     * Convenience method to generate an expand action for a given node\n     * and given edge type.\n     * @param type The edge type for expanding the node\n     * @param node The node we wish to expand\n     * @param withtext Whether or not the action should have text (or just an icon)\n     */\n    protected createExpandAction(type: AggregationEdgeType, node: Node, withtext?: boolean): Action {\n      const agg =  this.getAggregationLabel(type.aggregation);\n      const title = this.context.intlService.formatMessage(\"msg#network.actions.expandNodeWith\", {agg});\n      return new Action({\n            icon: \"fas fa-plus-circle fa-fw\",\n            title: title,\n            text: withtext? title : undefined,\n            action: () => {\n                if(this.skips[type.aggregation+node.id] === undefined) {\n                    // We need to skip the already connected nodes\n                    const connectedNodes = this.dataset.getConnectedNodes(node.id)\n                        .filter(node => node.type === type.nodeTypes[1]);\n                    this.skips[type.aggregation+node.id] = connectedNodes.length;\n                }\n                this.fetchAggregations([type], node);\n            },\n        })\n    }\n\n    protected getAggregationLabel(aggregation: string) {\n      const cc = this.context.appService.getCCAggregation(aggregation);\n      return cc?.column.split('/')\n        .map(col => this.context.appService.getPluralLabel(col))\n        .map(col => this.context.intlService.formatMessage(col))\n        .join('/') || aggregation;\n    }\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/AsyncRecordsProvider.html":{"url":"classes/AsyncRecordsProvider.html","title":"class - AsyncRecordsProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AsyncRecordsProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            network/providers/async-records-provider.ts\n        \n\n\n            \n                Description\n            \n            \n                An extension of RecordsProviders where the records are not provided\ndirectly, but instead fetched from the server via a given Query object.\n\n            \n\n            \n                Extends\n            \n            \n                        RecordsProvider\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    \n                                name\n                            \n                            \n                                    Public\n                                    Readonly\n                                activateAction\n                            \n                            \n                                    Public\n                                active\n                            \n                            \n                                    Public\n                                context\n                            \n                            \n                                    Public\n                                dataset\n                            \n                            \n                                    Public\n                                    Readonly\n                                EDGESEPARATOR\n                            \n                            \n                                    Public\n                                    Readonly\n                                resetAction\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                getData\n                            \n                            \n                                    Public\n                                setQuery\n                            \n                            \n                                    \n                                getNodeActions\n                            \n                            \n                                    \n                                getProviderActions\n                            \n                            \n                                    \n                                onDatasetsMerged\n                            \n                            \n                                    \n                                onNodeClicked\n                            \n                            \n                                getEdgeActions\n                            \n                            \n                                getProvider\n                            \n                            \n                                onDestroy\n                            \n                            \n                                onEdgeClicked\n                            \n                            \n                                onNodesInserted\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(name: string, nodeType: NodeType, edgeTypes: StructuralEdgeType[], query: Query, hideRecordNode)\n                    \n                \n                        \n                            \n                                Defined in network/providers/async-records-provider.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        name\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        nodeType\n                                                  \n                                                        \n                                                                        NodeType\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        edgeTypes\n                                                  \n                                                        \n                                                                    StructuralEdgeType[]\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        query\n                                                  \n                                                        \n                                                                        Query\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        hideRecordNode\n                                                  \n                                                        \n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                        \n                            \n                                Inherited from         BaseProvider\n\n                            \n                        \n                    \n                        \n                                Defined in         BaseProvider:13\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        activateAction\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Action\n\n                    \n                \n                        \n                            \n                                Inherited from         BaseProvider\n\n                            \n                        \n                    \n                        \n                                Defined in         BaseProvider:21\n\n                        \n                    \n\n            \n                \n                    Action to turn the provider on or off\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        active\n                        \n                    \n                \n            \n                \n                    \n                        Default value : true\n                    \n                \n                        \n                            \n                                Inherited from         BaseProvider\n\n                            \n                        \n                    \n                        \n                                Defined in         BaseProvider:16\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        context\n                        \n                    \n                \n            \n                \n                    \n                        Type :         NetworkContext\n\n                    \n                \n                        \n                            \n                                Inherited from         BaseProvider\n\n                            \n                        \n                    \n                        \n                                Defined in         BaseProvider:25\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        dataset\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new NetworkDataset()\n                    \n                \n                        \n                            \n                                Inherited from         BaseProvider\n\n                            \n                        \n                    \n                        \n                                Defined in         BaseProvider:15\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        EDGESEPARATOR\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : \"~~~EDGE~~~\"\n                    \n                \n                        \n                            \n                                Inherited from         BaseProvider\n\n                            \n                        \n                    \n                        \n                                Defined in         BaseProvider:18\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        resetAction\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Action\n\n                    \n                \n                        \n                            \n                                Inherited from         BaseProvider\n\n                            \n                        \n                    \n                        \n                                Defined in         BaseProvider:23\n\n                        \n                    \n\n            \n                \n                    Action to reset the provider\n\n                \n            \n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        getData\n                        \n                    \n                \n            \n            \n                \n                    \n                    getData(context: NetworkContext)\n                \n            \n\n\n            \n                \n                    Inherited from         BaseProvider\n\n                \n            \n            \n                \n                        Defined in         BaseProvider:38\n\n                \n            \n\n\n            \n                \n                    Updates the dataset after an asynchronous call to retrieve the records.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                                NetworkContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        setQuery\n                        \n                    \n                \n            \n            \n                \n                    \n                    setQuery(query: Query)\n                \n            \n\n\n            \n                \n                    Defined in network/providers/async-records-provider.ts:28\n                \n            \n\n\n            \n                \n                    Sets a new query to asynchronous records providers.\nIt will be used on the next call to getData()\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    query\n                                    \n                                                Query\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The query object we want to use to fetch records\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        getNodeActions\n                        \n                    \n                \n            \n            \n                \n                    \n                    getNodeActions(node: Node)\n                \n            \n\n\n            \n                \n                    Inherited from         BaseProvider\n\n                \n            \n            \n                \n                        Defined in         BaseProvider:340\n\n                \n            \n\n\n            \n                \n                    Creates actions for expanding and/or collapsing a record node that was clicked.\nexpanding and collapsing will act on the visibility of the structural edges\nattached to this node.\nBoth actions might be displayed at the same time, if the node is in an intermediate\nstate.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    node\n                                    \n                                                Node\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Action[]\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        getProviderActions\n                        \n                    \n                \n            \n            \n                \n                    \n                    getProviderActions()\n                \n            \n\n\n            \n                \n                    Inherited from         BaseProvider\n\n                \n            \n            \n                \n                        Defined in         BaseProvider:328\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     Action[]\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        onDatasetsMerged\n                        \n                    \n                \n            \n            \n                \n                    \n                    onDatasetsMerged(dataset: NetworkDataset)\n                \n            \n\n\n            \n                \n                    Inherited from         BaseProvider\n\n                \n            \n            \n                \n                        Defined in         BaseProvider:278\n\n                \n            \n\n\n            \n                \n                    This function adjusts the visibility of nodes for the visibility\ntype \"existingnode\", so that nodes with only one neighbor (post-merge)\nare collapsed.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    dataset\n                                    \n                                                NetworkDataset\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The dataset resulting of the merge of all the datasets\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        onNodeClicked\n                        \n                    \n                \n            \n            \n                \n                    \n                    onNodeClicked(node?: Node)\n                \n            \n\n\n            \n                \n                    Inherited from         BaseProvider\n\n                \n            \n            \n                \n                        Defined in         BaseProvider:305\n\n                \n            \n\n\n            \n                \n                    Adjust visibility of nodes and edges, for structural edges with\ntype.trigger = onclick. These nodes will only be shown once their\nrecord node is clicked on.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    node\n                                    \n                                                Node\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        A node that was clicked\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getEdgeActions\n                        \n                    \n                \n            \n            \n                \ngetEdgeActions(edge: Edge)\n                \n            \n\n\n            \n                \n                    Inherited from         BaseProvider\n\n                \n            \n            \n                \n                        Defined in         BaseProvider:211\n\n                \n            \n\n\n            \n                \n                    By default the base provider includes an action to filter the search if a clicked\nedge has a \"type.field\" property and a \"fieldValue\" (alternatively, an action\nis created if the 2 adjacent nodes can be filtered, ie they both have a \"field\"\nproperty)\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    edge\n                                    \n                                                Edge\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The clicked edge\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Action[]\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getProvider\n                        \n                    \n                \n            \n            \n                \ngetProvider()\n                \n            \n\n\n            \n                \n                    Inherited from         BaseProvider\n\n                \n            \n            \n                \n                        Defined in         BaseProvider:151\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         Subject\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onDestroy\n                        \n                    \n                \n            \n            \n                \nonDestroy()\n                \n            \n\n\n            \n                \n                    Inherited from         BaseProvider\n\n                \n            \n            \n                \n                        Defined in         BaseProvider:245\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onEdgeClicked\n                        \n                    \n                \n            \n            \n                \nonEdgeClicked(edge: Edge | undefined)\n                \n            \n\n\n            \n                \n                    Inherited from         BaseProvider\n\n                \n            \n            \n                \n                        Defined in         BaseProvider:171\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    edge\n                                    \n                                                Edge | undefined\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onNodesInserted\n                        \n                    \n                \n            \n            \n                \nonNodesInserted(nodes: Node[])\n                \n            \n\n\n            \n                \n                    Inherited from         BaseProvider\n\n                \n            \n            \n                \n                        Defined in         BaseProvider:163\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    nodes\n                                    \n                                                Node[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Query } from '@sinequa/core/app-utils';\nimport { NodeType, NetworkContext } from '../network-models';\nimport { RecordsProvider, StructuralEdgeType } from './records-provider';\n\n\n/**\n * An extension of RecordsProviders where the records are not provided\n * directly, but instead fetched from the server via a given Query object.\n */\nexport class AsyncRecordsProvider extends RecordsProvider {\n\n    constructor(\n        public override name: string,\n        protected override nodeType: NodeType,\n        protected override edgeTypes: StructuralEdgeType[],\n        protected query: Query,\n        protected override hideRecordNode = false\n    ){\n        super(name, nodeType, edgeTypes, [], hideRecordNode);\n    }\n\n\n    /**\n     * Sets a new query to asynchronous records providers.\n     * It will be used on the next call to getData()\n     * @param query The query object we want to use to fetch records\n     */\n    public setQuery(query: Query) {\n        this.query = query;\n    }\n\n\n    // NetworkProvider interface\n\n    /**\n     * Updates the dataset after an asynchronous call to retrieve the records.\n     */\n    override getData(context: NetworkContext) {\n        this.context = context;\n        // Query mode\n        this.context.searchService.getResults(this.query, undefined, {searchInactive: true})\n            .subscribe(results => {\n                this.updateDataset(results.records);\n                this.provider.next(this.dataset);\n            });\n    }\n\n}\n    \n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/BaseProvider.html":{"url":"classes/BaseProvider.html","title":"class - BaseProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  BaseProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            network/providers/base-provider.ts\n        \n\n\n            \n                Description\n            \n            \n                Base implementation of the NetworkProvider interface with convenience\nmethods to create nodes and edges, and default features which should apply\nto all providers.\n\n            \n\n\n            \n                Implements\n            \n            \n                            NetworkProvider\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Readonly\n                                activateAction\n                            \n                            \n                                    Public\n                                active\n                            \n                            \n                                    Public\n                                context\n                            \n                            \n                                    Public\n                                dataset\n                            \n                            \n                                    Public\n                                    Readonly\n                                EDGESEPARATOR\n                            \n                            \n                                    Public\n                                name\n                            \n                            \n                                    Public\n                                    Readonly\n                                resetAction\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getData\n                            \n                            \n                                getEdgeActions\n                            \n                            \n                                getNodeActions\n                            \n                            \n                                getProvider\n                            \n                            \n                                getProviderActions\n                            \n                            \n                                onDatasetsMerged\n                            \n                            \n                                onDestroy\n                            \n                            \n                                onEdgeClicked\n                            \n                            \n                                onNodeClicked\n                            \n                            \n                                onNodesInserted\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(name: string)\n                    \n                \n                        \n                            \n                                Defined in network/providers/base-provider.ts:25\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        name\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        activateAction\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Action\n\n                    \n                \n                    \n                        \n                                Defined in network/providers/base-provider.ts:21\n                        \n                    \n\n            \n                \n                    Action to turn the provider on or off\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        active\n                        \n                    \n                \n            \n                \n                    \n                        Default value : true\n                    \n                \n                    \n                        \n                                Defined in network/providers/base-provider.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        context\n                        \n                    \n                \n            \n                \n                    \n                        Type :         NetworkContext\n\n                    \n                \n                    \n                        \n                                Defined in network/providers/base-provider.ts:25\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        dataset\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new NetworkDataset()\n                    \n                \n                    \n                        \n                                Defined in network/providers/base-provider.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        EDGESEPARATOR\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : \"~~~EDGE~~~\"\n                    \n                \n                    \n                        \n                                Defined in network/providers/base-provider.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in network/providers/base-provider.ts:28\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        resetAction\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Action\n\n                    \n                \n                    \n                        \n                                Defined in network/providers/base-provider.ts:23\n                        \n                    \n\n            \n                \n                    Action to reset the provider\n\n                \n            \n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getData\n                        \n                    \n                \n            \n            \n                \ngetData(context: NetworkContext)\n                \n            \n\n\n            \n                \n                    Defined in network/providers/base-provider.ts:155\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                                NetworkContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getEdgeActions\n                        \n                    \n                \n            \n            \n                \ngetEdgeActions(edge: Edge)\n                \n            \n\n\n            \n                \n                    Defined in network/providers/base-provider.ts:211\n                \n            \n\n\n            \n                \n                    By default the base provider includes an action to filter the search if a clicked\nedge has a \"type.field\" property and a \"fieldValue\" (alternatively, an action\nis created if the 2 adjacent nodes can be filtered, ie they both have a \"field\"\nproperty)\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    edge\n                                    \n                                                Edge\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The clicked edge\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Action[]\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getNodeActions\n                        \n                    \n                \n            \n            \n                \ngetNodeActions(node: Node)\n                \n            \n\n\n            \n                \n                    Defined in network/providers/base-provider.ts:188\n                \n            \n\n\n            \n                \n                    By default the base provider includes an action to filter the search if a clicked\nnode has a \"field\" property\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    node\n                                    \n                                                Node\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The clicked node\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Action[]\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getProvider\n                        \n                    \n                \n            \n            \n                \ngetProvider()\n                \n            \n\n\n            \n                \n                    Defined in network/providers/base-provider.ts:151\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         Subject\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getProviderActions\n                        \n                    \n                \n            \n            \n                \ngetProviderActions()\n                \n            \n\n\n            \n                \n                    Defined in network/providers/base-provider.ts:179\n                \n            \n\n\n            \n                \n                    By default, the base provider includes an action to turn the provider\non or off, and an action to reset the data from this provider\n\n\n                    \n                        Returns :     Action[]\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onDatasetsMerged\n                        \n                    \n                \n            \n            \n                \nonDatasetsMerged(dataset: NetworkDataset)\n                \n            \n\n\n            \n                \n                    Defined in network/providers/base-provider.ts:159\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dataset\n                                    \n                                                NetworkDataset\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onDestroy\n                        \n                    \n                \n            \n            \n                \nonDestroy()\n                \n            \n\n\n            \n                \n                    Defined in network/providers/base-provider.ts:245\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onEdgeClicked\n                        \n                    \n                \n            \n            \n                \nonEdgeClicked(edge: Edge | undefined)\n                \n            \n\n\n            \n                \n                    Defined in network/providers/base-provider.ts:171\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    edge\n                                    \n                                                Edge | undefined\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onNodeClicked\n                        \n                    \n                \n            \n            \n                \nonNodeClicked(node: Node | undefined)\n                \n            \n\n\n            \n                \n                    Defined in network/providers/base-provider.ts:167\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    node\n                                    \n                                                Node | undefined\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onNodesInserted\n                        \n                    \n                \n            \n            \n                \nonNodesInserted(nodes: Node[])\n                \n            \n\n\n            \n                \n                    Defined in network/providers/base-provider.ts:163\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    nodes\n                                    \n                                                Node[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Utils } from '@sinequa/core/base';\nimport { Node, Edge, NodeType, EdgeType, NetworkProvider, NetworkDataset, NetworkContext} from '../network-models';\nimport { Subject } from 'rxjs';\nimport { Action } from '@sinequa/components/action';\n\n\n/**\n * Base implementation of the NetworkProvider interface with convenience\n * methods to create nodes and edges, and default features which should apply\n * to all providers.\n */\nexport class BaseProvider implements NetworkProvider {\n\n    protected readonly provider = new Subject();\n    public dataset = new NetworkDataset();\n    public active = true;\n\n    public readonly EDGESEPARATOR = \"~~~EDGE~~~\";\n\n    /** Action to turn the provider on or off */\n    public readonly activateAction: Action;\n    /** Action to reset the provider */\n    public readonly resetAction: Action;\n\n    public context: NetworkContext;\n\n    constructor(\n        public name: string\n    ) {\n        this.activateAction = new Action({\n            icon: this.active? \"fas fa-toggle-on fa-fw\" : \"fas fa-toggle-off fa-fw\",\n            text: this.active? \"msg#network.actions.active\" : \"msg#network.actions.inactive\",\n            title: \"msg#network.actions.toggle\",\n            action: (action: Action) => {\n                this.active = !this.active\n                action.icon = this.active? \"fas fa-toggle-on fa-fw\" : \"fas fa-toggle-off fa-fw\";\n                action.text = this.active? \"msg#network.actions.active\" : \"msg#network.actions.inactive\";\n                this.getData(this.context);\n            }\n        });\n        this.resetAction = new Action({\n            icon: \"fas fa-trash-alt fa-fw\",\n            text: \"msg#network.actions.reset\",\n            title: \"msg#network.actions.resetTitle\",\n            action: () => {\n                this.dataset.clear();\n                this.getData(this.context);\n            }\n        });\n    }\n\n    /** Returns a standard ID for an edge between two given nodes */\n    protected getEdgeId(node1: Node, node2: Node): string {\n        return node1.id + this.EDGESEPARATOR + node2.id;\n    }\n    \n    /** Returns a standard ID for a node with a given type and \"value\" */\n    protected getNodeId(type: NodeType, value: string): string {\n        return `${type.name}:${value}`;\n    }\n\n    /** Retrieves the \"value\" of the node from its ID */\n    protected getNodeValue(node: Node): string {\n        return node.id.substr(node.type.name.length+1);\n    }\n\n    /**\n     * Creates a new Node object\n     * @param type The NodeType of the node\n     * @param value The \"value\" of the node (eg. \"BILL GATES\")\n     * @param label (default: display = value) The \"display value\" of the node (eg. \"Bill Gates\")\n     * @param visible (default: true) Whether the node should be visible or not\n     * @param customProps (default: {}) Custom properties to add to the node object\n     * @param count (default: 1) A \"count\" property that can reflect the \"size\" or \"importance\" of the node in the network (note that the count property accumulates when nodes are merged)\n     */\n    protected createNode(type: NodeType, value: string, label?: string, visible = true, customProps = {}, count = 1): Node {\n        // Apply formatter if any\n        if(type.field) {\n            const col = this.context.appService.getColumn(type.field);\n            if(col?.formatter) {\n                label = this.context.appService.formatService.formatFieldValue({value, display: label}, col);\n            }\n        }\n        // Create node\n        const node: Node = {\n            id: this.getNodeId(type, value),\n            label: label || value,\n            type,\n            provider: this,\n            visible,\n            count,\n            context: this.context\n        }\n        Utils.extend(node, customProps);\n        let options;\n        if(typeof type.nodeOptions === \"function\") {\n            options = type.nodeOptions(node, type);\n        }\n        else {\n            options = type.nodeOptions;\n        }\n        return Utils.extend(node, options);\n    }\n    \n    /**\n     * Creates a new Edge object\n     * @param type The EdgeType of that Edge\n     * @param fromNode The \"from\" Node object to which this edge is attached\n     * @param toNode The \"to\" Node object to which this edge is attached\n     * @param fieldValue (default: undefined) An optional value, which, if provided, allows to filter the search with a select (\"type.field = fieldValue\")\n     * @param visible (default: true) Whether the edge should be visible or not\n     * @param customProps (default: {}) Custom properties to add to this edge\n     * @param count (default: 1) A \"count\" property that can reflect the \"size\" or \"importance\" of the edge in the network (note that the count property accumulates when edges are merged)\n     * @param directed (default: false) Whether the edge is directed or undirected. If true, an arrow is drawn on the edge.\n     * @param relation (default: undefined) If provided, the \"relation\" is a label displayed in the middle of the edge\n     */\n    protected createEdge(type: EdgeType, fromNode: Node, toNode: Node, fieldValue: string | undefined = undefined, visible = true, customProps = {}, count = 1, directed = false, relation?: string): Edge {\n        const edge: Edge = {\n            id: this.getEdgeId(fromNode, toNode),\n            from: fromNode.id,\n            to: toNode.id,\n            fieldValue,\n            type,\n            visible,\n            count,\n            provider: this,\n            context: this.context\n        }\n        Utils.extend(edge, customProps);\n        if(directed) {\n            edge[\"arrows\"] = {middle: {scaleFactor: 0.3, enabled: true}};\n        }\n        if(relation) {\n            edge[\"label\"] = relation;\n            edge[\"labels\"] = [relation];\n            edge[\"font\"] = {size: 5, color: \"#808080\"};            \n        }\n        let options: {[key: string]: any};\n        if(typeof type.edgeOptions === \"function\") {\n            options = type.edgeOptions([fromNode, toNode], edge, type);\n        }\n        else {\n            options = type.edgeOptions;\n        }\n        return Utils.extend(edge, options);\n    }\n    \n\n    // Implementation of the NetworkProvider interface\n\n    getProvider(): Subject {\n        return this.provider;\n    }\n\n    getData(context: NetworkContext) {\n        this.context = context;\n    }\n\n    onDatasetsMerged(dataset: NetworkDataset) {\n        \n    }\n\n    onNodesInserted(nodes: Node[]) {\n        \n    }\n    \n    onNodeClicked(node: Node | undefined) {\n        \n    }\n\n    onEdgeClicked(edge: Edge | undefined) {\n        \n    }\n\n    /**\n     * By default, the base provider includes an action to turn the provider\n     * on or off, and an action to reset the data from this provider\n     */\n    getProviderActions(): Action[] {\n        return [this.activateAction, this.resetAction];\n    }\n\n    /**\n     * By default the base provider includes an action to filter the search if a clicked\n     * node has a \"field\" property\n     * @param node The clicked node\n     */\n    getNodeActions(node: Node): Action[] {\n        const actions: Action[] = []\n        if(this.active && node.provider === this && node.type.field) {\n            actions.push(new Action({\n                icon: \"fas fa-filter\",\n                title: this.context.intlService.formatMessage(\"msg#network.actions.filterSearch\", {label: node.label}),\n                action: () => {\n                    const expr = this.context.exprBuilder.makeExpr(node.type.field!, this.getNodeValue(node), node.label);\n                    node.context.searchService.query.addSelect(expr, node.context.name);\n                    node.context.searchService.search();\n                }\n            }));\n        }\n        return actions;\n    }\n\n    /**\n     * By default the base provider includes an action to filter the search if a clicked\n     * edge has a \"type.field\" property and a \"fieldValue\" (alternatively, an action\n     * is created if the 2 adjacent nodes can be filtered, ie they both have a \"field\"\n     * property)\n     * @param edge The clicked edge\n     */\n    getEdgeActions(edge: Edge): Action[] {\n        const actions: Action[] = [];\n        const nodeFrom = edge.context.nodes.get(edge.from);\n        const nodeTo = edge.context.nodes.get(edge.to);\n        if(this.active && edge.provider === this) {\n            if(edge.type.field && edge.fieldValue) {\n                actions.push(new Action({\n                    icon: \"fas fa-filter\",\n                    title: this.context.intlService.formatMessage(\"msg#network.actions.filterSearch\", {label: edge.fieldValue}),\n                    action: () => {\n                        const expr = this.context.exprBuilder.makeExpr(edge.type.field!, edge.fieldValue!);\n                        edge.context.searchService.query.addSelect(expr, edge.context.name);\n                        edge.context.searchService.search();\n                    }\n                }));\n            }\n            else if(nodeFrom && nodeTo && nodeFrom.type.field && nodeTo.type.field) {\n                actions.push(new Action({\n                    icon: \"fas fa-filter\",\n                    title: this.context.intlService.formatMessage(\"msg#network.actions.filterSearch2\", {label1: nodeFrom.label, label2: nodeTo.label}),\n                    action: () => {\n                        const exprFrom = this.context.exprBuilder.makeExpr(nodeFrom.type.field!, this.getNodeValue(nodeFrom), nodeFrom.label);\n                        const exprTo = this.context.exprBuilder.makeExpr(nodeTo.type.field!, this.getNodeValue(nodeTo), nodeTo.label);\n                        const expr = this.context.exprBuilder.concatAndExpr([exprFrom, exprTo]);\n                        edge.context.searchService.query.addSelect(expr, edge.context.name);\n                        edge.context.searchService.search();\n                    }\n                }));\n            }\n            \n        }\n        return actions;\n    }\n\n    onDestroy() {\n        \n    }\n\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/BsEdgeInfoCard.html":{"url":"components/BsEdgeInfoCard.html","title":"component - BsEdgeInfoCard","body":"\n                   \n\n\n\n\n\n  Components\n  \n  BsEdgeInfoCard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    network/edge-info-card.component.ts\n\n\n\n\n\n    \n        Implements\n    \n    \n                    OnChanges\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                sq-edge-info-card\n            \n\n\n            \n                styles\n                \n.card {\n    top: 5px;\n    left: 0;\n    right: 0;\n    width: 80%;\n}\n.circular-image {\n    width: 1.5em;\n    height: 1.5em;\n    border-radius: 50%;\n    object-fit: cover;\n}\n    \n            \n\n\n            \n                templateUrl\n                edge-info-card.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                closed\n                            \n                            \n                                expanded\n                            \n                            \n                                fromNode\n                            \n                            \n                                toNode\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                focusNode\n                            \n                            \n                                ngOnChanges\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                edge\n                            \n                        \n                    \n                \n\n\n\n\n        \n    \n\n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        edge\n                    \n                \n                \n                    \n                        Type :         Edge\n\n                    \n                \n                        \n                            \n                                    Defined in network/edge-info-card.component.ts:24\n                            \n                        \n            \n        \n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        focusNode\n                        \n                    \n                \n            \n            \n                \nfocusNode(node: Node)\n                \n            \n\n\n            \n                \n                    Defined in network/edge-info-card.component.ts:40\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    node\n                                    \n                                                Node\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnChanges\n                        \n                    \n                \n            \n            \n                \nngOnChanges()\n                \n            \n\n\n            \n                \n                    Defined in network/edge-info-card.component.ts:32\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        closed\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in network/edge-info-card.component.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        expanded\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in network/edge-info-card.component.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        fromNode\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Node\n\n                    \n                \n                    \n                        \n                                Defined in network/edge-info-card.component.ts:29\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        toNode\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Node\n\n                    \n                \n                    \n                        \n                                Defined in network/edge-info-card.component.ts:30\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n    \n        import { Component, Input, OnChanges } from \"@angular/core\";\nimport { Node, Edge } from './network-models';\n\n\n@Component({\n    selector: \"sq-edge-info-card\",\n    templateUrl: \"edge-info-card.component.html\",\n    styles: [`\n.card {\n    top: 5px;\n    left: 0;\n    right: 0;\n    width: 80%;\n}\n.circular-image {\n    width: 1.5em;\n    height: 1.5em;\n    border-radius: 50%;\n    object-fit: cover;\n}\n    `]\n})\nexport class BsEdgeInfoCard implements OnChanges {\n    @Input() edge: Edge;\n\n    closed: boolean;\n    expanded: boolean;\n\n    fromNode: Node;\n    toNode: Node;\n\n    ngOnChanges() {\n        this.closed = false;\n        this.expanded = false;\n\n        this.fromNode = this.edge.context.nodes.get(this.edge.from) as Node;\n        this.toNode = this.edge.context.nodes.get(this.edge.to) as Node;\n    }\n\n    focusNode(node: Node) {\n        // Hack to gain access to the network instance (networkService does not have the focus() method)\n        const networkInstance = node.context.networkService['networks'][node.context.name];\n        networkInstance.focus(node.id, {animation: true}); // Move the view to this node with animation\n        networkInstance.selectNodes([node.id], true); // Warning: does not trigger events...\n        node.context.select(node, undefined); // Select the node to update info cards, actions\n        return false;\n    }\n}\n    \n\n    \n        \n    \n        \n            \n            -\n            \n\n            \n                \n            \n            \n                \n            \n        \n        \n            \n                {{ 'msg#network.infocards.count' | sqMessage }}:  {{edge.count}}\n                {{ 'msg#network.infocards.aggregation' | sqMessage }}:  {{edge['aggregation'].name}}\n                {{ 'msg#network.infocards.record' | sqMessage }}:  {{edge['record']['title']}}\n            \n        \n    \n\n\n\n    \n    {{node['icon']['code']}}\n    {{node.label}}\n     0\" class=\"me-2 text-muted\" title=\"{{ 'msg#network.infocards.count' | sqMessage }}\">({{node.count}})\n\n    \n\n    \n            \n.card {\n    top: 5px;\n    left: 0;\n    right: 0;\n    width: 80%;\n}\n.circular-image {\n    width: 1.5em;\n    height: 1.5em;\n    border-radius: 50%;\n    object-fit: cover;\n}\n    \n\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '                                    -                                                                                                                                        {{ \\'msg#network.infocards.count\\' | sqMessage }}:  {{edge.count}}                {{ \\'msg#network.infocards.aggregation\\' | sqMessage }}:  {{edge[\\'aggregation\\'].name}}                {{ \\'msg#network.infocards.record\\' | sqMessage }}:  {{edge[\\'record\\'][\\'title\\']}}                                {{node[\\'icon\\'][\\'code\\']}}    {{node.label}}     0\" class=\"me-2 text-muted\" title=\"{{ \\'msg#network.infocards.count\\' | sqMessage }}\">({{node.count}})'\n    var COMPONENTS = [{'name': 'AgGridViewComponent', 'selector': 'sq-ag-grid-view'},{'name': 'BsEdgeInfoCard', 'selector': 'sq-edge-info-card'},{'name': 'BsFacetDate', 'selector': 'sq-facet-date'},{'name': 'BsFacetHeatmapComponent', 'selector': 'sq-facet-heatmap'},{'name': 'BsFacetTimelineComponent', 'selector': 'sq-facet-timeline'},{'name': 'BsHeatmapComponent', 'selector': 'sq-heatmap'},{'name': 'BsNodeInfoCard', 'selector': 'sq-node-info-card'},{'name': 'BsResultsHeatmapView', 'selector': 'sq-results-heatmap-view'},{'name': 'BsTimelineComponent', 'selector': 'sq-timeline'},{'name': 'BsTooltipComponent', 'selector': 'sq-tooltip'},{'name': 'DataModalComponent', 'selector': 'sq-data-modal'},{'name': 'FacetNgxChart', 'selector': 'sq-facet-ngx-chart'},{'name': 'FacetWrapperComponent', 'selector': 'facet-wrapper'},{'name': 'FusionChart', 'selector': 'sq-fusion-chart'},{'name': 'MapComponent', 'selector': 'sq-googlemaps'},{'name': 'MoneyCloudComponent', 'selector': 'sq-money-cloud'},{'name': 'MoneyTimelineComponent', 'selector': 'sq-money-timeline'},{'name': 'NetworkComponent', 'selector': 'sq-network'},{'name': 'NgxChart', 'selector': 'sq-ngx-chart'},{'name': 'ResultTimeline', 'selector': 'sq-result-timeline'},{'name': 'TimelineLegendComponent', 'selector': 'sq-timeline-legend'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'BsEdgeInfoCard'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/BsFacetDate.html":{"url":"components/BsFacetDate.html","title":"component - BsFacetDate","body":"\n                   \n\n\n\n\n\n  Components\n  \n  BsFacetDate\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    timeline/bootstrap/facet-date.ts\n\n\n\n\n    \n        Extends\n    \n    \n            AbstractFacet\n    \n\n    \n        Implements\n    \n    \n                    FacetDateParams\n                    OnInit\n                    OnChanges\n                    OnDestroy\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                sq-facet-date\n            \n\n            \n                styleUrls\n                ./facet-date.scss\n            \n\n\n\n            \n                templateUrl\n                ./facet-date.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                cdRef\n                            \n                            \n                                clearFiltersAction\n                            \n                            \n                                dateRangeControl\n                            \n                            \n                                form\n                            \n                            \n                                items\n                            \n                            \n                                selection\n                            \n                            \n                                timeSeries\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                filterItem\n                            \n                            \n                                    Public\n                                isFiltered\n                            \n                            \n                                ngOnChanges\n                            \n                            \n                                ngOnDestroy\n                            \n                            \n                                ngOnInit\n                            \n                            \n                                toggleCustomRange\n                            \n                            \n                                    Public\n                                updateRange\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                aggregation\n                            \n                            \n                                allowCustomRange\n                            \n                            \n                                allowPredefinedRange\n                            \n                            \n                                displayEmptyDistributionIntervals\n                            \n                            \n                                field\n                            \n                            \n                                name\n                            \n                            \n                                replaceCurrent\n                            \n                            \n                                results\n                            \n                            \n                                showCount\n                            \n                            \n                                showCustomRange\n                            \n                            \n                                timelineAggregation\n                            \n                        \n                    \n                \n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    field\n                                \n                                \n                                    actions\n                                \n                            \n                        \n                    \n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(facetService: FacetService, formBuilder: FormBuilder, exprBuilder: ExprBuilder, searchService: SearchService, advancedService: AdvancedService, appService: AppService, cdRef: ChangeDetectorRef)\n                    \n                \n                        \n                            \n                                Defined in timeline/bootstrap/facet-date.ts:79\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        facetService\n                                                  \n                                                        \n                                                                    FacetService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        formBuilder\n                                                  \n                                                        \n                                                                        FormBuilder\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        exprBuilder\n                                                  \n                                                        \n                                                                    ExprBuilder\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        searchService\n                                                  \n                                                        \n                                                                    SearchService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        advancedService\n                                                  \n                                                        \n                                                                    AdvancedService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        appService\n                                                  \n                                                        \n                                                                    AppService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        cdRef\n                                                  \n                                                        \n                                                                        ChangeDetectorRef\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        aggregation\n                    \n                \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : \"Modified\"\n                    \n                \n                        \n                            \n                                    Defined in timeline/bootstrap/facet-date.ts:57\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        allowCustomRange\n                    \n                \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : true\n                    \n                \n                        \n                            \n                                    Defined in timeline/bootstrap/facet-date.ts:63\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        allowPredefinedRange\n                    \n                \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : true\n                    \n                \n                        \n                            \n                                    Defined in timeline/bootstrap/facet-date.ts:62\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        displayEmptyDistributionIntervals\n                    \n                \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : true\n                    \n                \n                        \n                            \n                                    Defined in timeline/bootstrap/facet-date.ts:61\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        field\n                    \n                \n                \n                    \n                        Type :         string\n\n                    \n                \n                        \n                            \n                                    Defined in timeline/bootstrap/facet-date.ts:59\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        name\n                    \n                \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : \"Date\"\n                    \n                \n                        \n                            \n                                    Defined in timeline/bootstrap/facet-date.ts:55\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        replaceCurrent\n                    \n                \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : true\n                    \n                \n                        \n                            \n                                    Defined in timeline/bootstrap/facet-date.ts:65\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        results\n                    \n                \n                \n                    \n                        Type :     Results\n\n                    \n                \n                        \n                            \n                                    Defined in timeline/bootstrap/facet-date.ts:56\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        showCount\n                    \n                \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : true\n                    \n                \n                        \n                            \n                                    Defined in timeline/bootstrap/facet-date.ts:60\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        showCustomRange\n                    \n                \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                        \n                            \n                                    Defined in timeline/bootstrap/facet-date.ts:64\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        timelineAggregation\n                    \n                \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : \"Timeline\"\n                    \n                \n                        \n                            \n                                    Defined in timeline/bootstrap/facet-date.ts:58\n                            \n                        \n            \n        \n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        filterItem\n                        \n                    \n                \n            \n            \n                \nfilterItem(item: AggregationItem, event)\n                \n            \n\n\n            \n                \n                    Defined in timeline/bootstrap/facet-date.ts:162\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    item\n                                    \n                                            AggregationItem\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    event\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        isFiltered\n                        \n                    \n                \n            \n            \n                \n                    \n                    isFiltered(item: AggregationItem)\n                \n            \n\n\n            \n                \n                    Defined in timeline/bootstrap/facet-date.ts:297\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    item\n                                    \n                                            AggregationItem\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnChanges\n                        \n                    \n                \n            \n            \n                \nngOnChanges(changes: SimpleChanges)\n                \n            \n\n\n            \n                \n                    Defined in timeline/bootstrap/facet-date.ts:139\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    changes\n                                    \n                                                SimpleChanges\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnDestroy\n                        \n                    \n                \n            \n            \n                \nngOnDestroy()\n                \n            \n\n\n            \n                \n                    Defined in timeline/bootstrap/facet-date.ts:150\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnInit\n                        \n                    \n                \n            \n            \n                \nngOnInit()\n                \n            \n\n\n            \n                \n                    Defined in timeline/bootstrap/facet-date.ts:101\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        toggleCustomRange\n                        \n                    \n                \n            \n            \n                \ntoggleCustomRange(event)\n                \n            \n\n\n            \n                \n                    Defined in timeline/bootstrap/facet-date.ts:173\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    event\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        updateRange\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateRange(range: Date[])\n                \n            \n\n\n            \n                \n                    Defined in timeline/bootstrap/facet-date.ts:291\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    range\n                                    \n                                            Date[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        cdRef\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ChangeDetectorRef\n\n                    \n                \n                    \n                        \n                                Defined in timeline/bootstrap/facet-date.ts:88\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        clearFiltersAction\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Action\n\n                    \n                \n                    \n                        \n                                Defined in timeline/bootstrap/facet-date.ts:67\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        dateRangeControl\n                        \n                    \n                \n            \n                \n                    \n                        Type :         FormControl\n\n                    \n                \n                    \n                        \n                                Defined in timeline/bootstrap/facet-date.ts:71\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        form\n                        \n                    \n                \n            \n                \n                    \n                        Type :         FormGroup\n\n                    \n                \n                    \n                        \n                                Defined in timeline/bootstrap/facet-date.ts:70\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        items\n                        \n                    \n                \n            \n                \n                    \n                        Type :     AggregationItem[]\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                    \n                        \n                                Defined in timeline/bootstrap/facet-date.ts:68\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        selection\n                        \n                    \n                \n            \n                \n                    \n                        Type :     (Date | undefined)[]\n\n                    \n                \n                    \n                        \n                                Defined in timeline/bootstrap/facet-date.ts:74\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        timeSeries\n                        \n                    \n                \n            \n                \n                    \n                        Type :         TimelineSeries[]\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                    \n                        \n                                Defined in timeline/bootstrap/facet-date.ts:73\n                        \n                    \n\n\n        \n    \n\n\n    \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        field\n                    \n                \n\n                \n                    \n                        getfield()\n                    \n                \n                            \n                                \n                                    Defined in timeline/bootstrap/facet-date.ts:79\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        actions\n                    \n                \n\n                \n                    \n                        getactions()\n                    \n                \n                            \n                                \n                                    Defined in timeline/bootstrap/facet-date.ts:154\n                                \n                            \n\n            \n        \n\n\n\n\n    \n        import {\n    Component,\n    OnInit,\n    OnDestroy,\n    Input,\n    OnChanges,\n    SimpleChanges,\n    ChangeDetectorRef,\n} from \"@angular/core\";\nimport { FormBuilder, FormControl, FormGroup } from \"@angular/forms\";\nimport { Action } from \"@sinequa/components/action\";\nimport { AdvancedService } from \"@sinequa/components/advanced\";\nimport { AbstractFacet, FacetConfig, FacetService } from \"@sinequa/components/facet\";\nimport { SearchService } from \"@sinequa/components/search\";\nimport {\n    AppService,\n    Expr,\n    ExprBuilder,\n    ExprOperator,\n} from \"@sinequa/core/app-utils\";\nimport { Utils } from \"@sinequa/core/base\";\nimport {\n    Aggregation,\n    AggregationItem,\n    Results,\n} from \"@sinequa/core/web-services\";\nimport { Subscription } from \"rxjs\";\nimport { debounceTime, filter, map } from \"rxjs/operators\";\nimport { BsFacetTimelineComponent, TimelineSeries } from \".\";\n\nexport interface FacetDateParams {\n    aggregation: string\n    showCount?: boolean;\n    timelineAggregation?: string;\n    displayEmptyDistributionIntervals?: boolean;\n    allowPredefinedRange?: boolean;\n    allowCustomRange?: boolean;\n    showCustomRange?: boolean;\n    replaceCurrent?: boolean;\n}\n\nexport interface FacetDateConfig extends FacetConfig {\n    type: 'date';\n}\n\n@Component({\n    selector: \"sq-facet-date\",\n    templateUrl: \"./facet-date.html\",\n    styleUrls: [\"./facet-date.scss\"],\n})\nexport class BsFacetDate\n    extends AbstractFacet\n    implements FacetDateParams, OnInit, OnChanges, OnDestroy\n{\n    @Input() name: string = \"Date\";\n    @Input() results: Results;\n    @Input() aggregation: string = \"Modified\";\n    @Input() timelineAggregation: string = \"Timeline\";\n    @Input(\"field\") _field?: string;\n    @Input() showCount: boolean = true; // Show the number of occurrences\n    @Input() displayEmptyDistributionIntervals: boolean = true; // Display items with count === 0\n    @Input() allowPredefinedRange = true; // will allow or not the use of datepickers and timeline for custom range selection\n    @Input() allowCustomRange = true; // will allow or not the use of datepickers and timeline for custom range selection\n    @Input() showCustomRange = false; // will show/hide datepickers and timeline, once allowed\n    @Input() replaceCurrent = true; // if true, the previous \"select\" is removed first\n\n    clearFiltersAction: Action;\n    items: AggregationItem[] = [];\n\n    form: FormGroup;\n    dateRangeControl: FormControl;\n\n    timeSeries: TimelineSeries[] = [];\n    selection: (Date | undefined)[];\n\n    protected subscriptions: Subscription[] = [];\n    protected data: Aggregation | undefined;\n\n    get field(): string {return this._field || this.data?.column || ''}\n\n    constructor(\n        protected facetService: FacetService,\n        protected formBuilder: FormBuilder,\n        protected exprBuilder: ExprBuilder,\n        protected searchService: SearchService,\n        protected advancedService: AdvancedService,\n        protected appService: AppService,\n        public cdRef: ChangeDetectorRef\n    ) {\n        super();\n\n        this.clearFiltersAction = new Action({\n            icon: \"far fa-minus-square\",\n            title: \"msg#facet.filters.clear\",\n            action: () => {\n                this.facetService.clearFiltersSearch(this.name, true);\n            },\n        });\n    }\n\n    ngOnInit() {\n        if (this.allowCustomRange) {\n            this.dateRangeControl = new FormControl(\n                [undefined, undefined],\n                [\n                    this.advancedService.validators.range(this.field),\n                    this.advancedService.validators.date(this.field),\n                ]\n            );\n\n            this.form = this.formBuilder.group({\n                dateRange: this.dateRangeControl,\n            });\n\n            // Listen to query changes\n            this.subscriptions.push(\n                this.searchService.queryStream.subscribe(() => {\n                    const value = this.getRangeValue();\n                    this.dateRangeControl.setValue(value, { emitEvent: false });\n                    this.selection = !value[0] && !value[1] ? undefined : value;\n                })\n            );\n\n            // Listen to form changes\n            this.subscriptions.push(\n                this.dateRangeControl.valueChanges\n                    .pipe(\n                        debounceTime(500),\n                        filter(() => this.form.valid)\n                    )\n                    .subscribe((value: (undefined | Date)[]) => {\n                        this.facetService.clearFiltersSearch(this.name, true);\n                        this.setCustomDateSelect(value);\n                    })\n            );\n        }\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n        if (this.allowCustomRange) {\n            this.updateTimeSeries(this.timelineAggregation);\n        }\n\n        if (changes.results) {\n            this.data = this.getAggregation(this.aggregation);\n            this.updateItems();\n        }\n    }\n\n    ngOnDestroy() {\n        this.subscriptions.map((item) => item.unsubscribe());\n    }\n\n    override get actions(): Action[] {\n        const actions: Action[] = [];\n        if (this.facetService.hasFiltered(this.name) && actions.length === 0) {\n            actions.push(this.clearFiltersAction);\n        }\n        return actions;\n    }\n\n    filterItem(item: AggregationItem, event) {\n        if (!this.isFiltered(item)) {\n            this.facetService.addFilterSearch(this.name, this.data!, item, {\n                replaceCurrent: this.replaceCurrent,\n            });\n        } else {\n            this.facetService.removeFilterSearch(this.name, this.data!, item);\n        }\n        event.preventDefault();\n    }\n\n    toggleCustomRange(event) {\n        this.showCustomRange = !this.showCustomRange;\n        event.stopPropagation();\n    }\n\n    private updateItems() {\n        this.items = this.displayEmptyDistributionIntervals\n            ? this.data?.items || []\n            : this.data?.items?.filter((item) => item.count > 0) || [];\n    }\n\n    private updateTimeSeries(aggregationName: string) {\n        this.timeSeries = [];\n        const ccaggregation = this.appService.getCCAggregation(aggregationName);\n        const aggregation = this.getAggregation(aggregationName);\n        if (aggregation && ccaggregation)\n            this.timeSeries.push(\n                BsFacetTimelineComponent.createTimeseries(\n                    { aggregation: aggregationName, primary: true },\n                    aggregation,\n                    ccaggregation\n                )\n            );\n    }\n\n    private getAggregation(aggregationName: string): Aggregation | undefined {\n        let aggregation = this.facetService.getAggregation(\n            aggregationName,\n            this.results\n        );\n\n        if (!aggregation) {\n            const query = Utils.copy(this.searchService.query);\n            query.action = \"aggregate\";\n            query.aggregations = [aggregationName];\n\n            this.searchService\n                .getResults(query, undefined, { searchInactive: true })\n                .pipe(\n                    map((results) => {\n                        aggregation = results.aggregations[0];\n                    })\n                );\n        }\n\n        return aggregation;\n    }\n\n    private setCustomDateSelect(range: (undefined | Date)[] | undefined) {\n        let expr: string | undefined;\n        if (range) {\n            const from = range[0];\n            const to = range[1];\n            if (from && to) {\n                expr = this.exprBuilder.makeRangeExpr(this.field, from, to);\n            } else if (from) {\n                expr = this.exprBuilder.makeNumericalExpr(\n                    this.field,\n                    \">=\",\n                    from\n                );\n            } else if (to) {\n                expr = this.exprBuilder.makeNumericalExpr(this.field, \" 1) {\n            return expr.values;\n        } else {\n            return expr.value!;\n        }\n    }\n\n    public updateRange(range: Date[]) {\n        if (!!range) {\n            this.setCustomDateSelect(range);\n        }\n    }\n\n    public isFiltered(item: AggregationItem): boolean {\n        const filtered = this.facetService.getAggregationItemsFiltered(\n            this.name\n        );\n        return (\n            this.facetService.filteredIndex(this.data, filtered, item) !== -1\n        );\n    }\n}\n\n    \n\n    \n        \n\n    \n        \n\n            {{item | sqValue:item.$column}}\n\n            \n              {{item.count}}\n            \n        \n    \n\n    \n        \n            \n            {{'msg#facet.date.custom' | sqMessage}} :\n        \n    \n\n\n    \n      \n        \n            \n                \n                \n            \n        \n\n        \n        \n\n      \n    \n\n\n\n    \n\n    \n                \n                    ./facet-date.scss\n                \n                .date-item:hover {\n    background-color: #f8f9fa;\n    color: black;\n}\n\n.active {\n    color: #0f5132;\n    background-color: #d1e7dd;\n\n    &:hover {\n        background-color: #d1e7dd;\n        opacity: 0.8;\n    }\n}\n\n.counter {\n    padding-left: 4px;\n    padding-right: 6px;\n    font-size: .7rem;\n}\n\n\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '                        {{item | sqValue:item.$column}}                          {{item.count}}                                                            {{\\'msg#facet.date.custom\\' | sqMessage}} :                                                                                                                        '\n    var COMPONENTS = [{'name': 'AgGridViewComponent', 'selector': 'sq-ag-grid-view'},{'name': 'BsEdgeInfoCard', 'selector': 'sq-edge-info-card'},{'name': 'BsFacetDate', 'selector': 'sq-facet-date'},{'name': 'BsFacetHeatmapComponent', 'selector': 'sq-facet-heatmap'},{'name': 'BsFacetTimelineComponent', 'selector': 'sq-facet-timeline'},{'name': 'BsHeatmapComponent', 'selector': 'sq-heatmap'},{'name': 'BsNodeInfoCard', 'selector': 'sq-node-info-card'},{'name': 'BsResultsHeatmapView', 'selector': 'sq-results-heatmap-view'},{'name': 'BsTimelineComponent', 'selector': 'sq-timeline'},{'name': 'BsTooltipComponent', 'selector': 'sq-tooltip'},{'name': 'DataModalComponent', 'selector': 'sq-data-modal'},{'name': 'FacetNgxChart', 'selector': 'sq-facet-ngx-chart'},{'name': 'FacetWrapperComponent', 'selector': 'facet-wrapper'},{'name': 'FusionChart', 'selector': 'sq-fusion-chart'},{'name': 'MapComponent', 'selector': 'sq-googlemaps'},{'name': 'MoneyCloudComponent', 'selector': 'sq-money-cloud'},{'name': 'MoneyTimelineComponent', 'selector': 'sq-money-timeline'},{'name': 'NetworkComponent', 'selector': 'sq-network'},{'name': 'NgxChart', 'selector': 'sq-ngx-chart'},{'name': 'ResultTimeline', 'selector': 'sq-result-timeline'},{'name': 'TimelineLegendComponent', 'selector': 'sq-timeline-legend'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'BsFacetDate'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/BsHeatmapComponent.html":{"url":"components/BsHeatmapComponent.html","title":"component - BsHeatmapComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  BsHeatmapComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    heatmap/bootstrap/heatmap.component.ts\n\n\n\n\n\n    \n        Implements\n    \n    \n                    OnChanges\n                    AfterViewInit\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                sq-heatmap\n            \n\n            \n                styleUrls\n                ./heatmap.component.scss\n            \n\n\n\n            \n                templateUrl\n                ./heatmap.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                color\n                            \n                            \n                                dataFiltered\n                            \n                            \n                                gx\n                            \n                            \n                                gy\n                            \n                            \n                                originalCount\n                            \n                            \n                                    Optional\n                                tooltipItem\n                            \n                            \n                                tooltipLeft\n                            \n                            \n                                tooltipOrientation\n                            \n                            \n                                tooltipRight\n                            \n                            \n                                tooltipTop\n                            \n                            \n                                viewInit\n                            \n                            \n                                wrap\n                            \n                            \n                                x\n                            \n                            \n                                xAxis\n                            \n                            \n                                y\n                            \n                            \n                                yAxis\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                buildChart\n                            \n                            \n                                getLegend\n                            \n                            \n                                ngAfterViewInit\n                            \n                            \n                                ngOnChanges\n                            \n                            \n                                onAxisClicked\n                            \n                            \n                                onItemClicked\n                            \n                            \n                                onMouseOver\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                axisClickable\n                            \n                            \n                                buckets\n                            \n                            \n                                colorScheme\n                            \n                            \n                                data\n                            \n                            \n                                height\n                            \n                            \n                                itemsClickable\n                            \n                            \n                                margin\n                            \n                            \n                                maxX\n                            \n                            \n                                maxY\n                            \n                            \n                                theme\n                            \n                            \n                                transition\n                            \n                            \n                                width\n                            \n                        \n                    \n                \n\n                \n                    \n                        Outputs\n                    \n                \n                \n                    \n                        \n                            \n                                axisClicked\n                            \n                            \n                                itemClicked\n                            \n                        \n                    \n                \n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(el: ElementRef)\n                    \n                \n                        \n                            \n                                Defined in heatmap/bootstrap/heatmap.component.ts:69\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        el\n                                                  \n                                                        \n                                                                        ElementRef\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        axisClickable\n                    \n                \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : true\n                    \n                \n                        \n                            \n                                    Defined in heatmap/bootstrap/heatmap.component.ts:33\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        buckets\n                    \n                \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 9\n                    \n                \n                        \n                            \n                                    Defined in heatmap/bootstrap/heatmap.component.ts:36\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        colorScheme\n                    \n                \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : \"schemeBlues\"\n                    \n                \n                        \n                            \n                                    Defined in heatmap/bootstrap/heatmap.component.ts:37\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        data\n                    \n                \n                \n                    \n                        Type :         HeatmapItem[]\n\n                    \n                \n                        \n                            \n                                    Defined in heatmap/bootstrap/heatmap.component.ts:23\n                            \n                        \n                \n                    \n                        Raw data to display (will be filtered in function of maxX and maxY parameters)\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        height\n                    \n                \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 600\n                    \n                \n                        \n                            \n                                    Defined in heatmap/bootstrap/heatmap.component.ts:26\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        itemsClickable\n                    \n                \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : true\n                    \n                \n                        \n                            \n                                    Defined in heatmap/bootstrap/heatmap.component.ts:32\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        margin\n                    \n                \n                \n                    \n                        Type :     { top: number; bottom: number; left: number; right: number; }\n\n                    \n                \n                \n                    \n                        Default value : {top: 100, bottom: 20, left: 100, right: 40}\n                    \n                \n                        \n                            \n                                    Defined in heatmap/bootstrap/heatmap.component.ts:28\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        maxX\n                    \n                \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 20\n                    \n                \n                        \n                            \n                                    Defined in heatmap/bootstrap/heatmap.component.ts:38\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        maxY\n                    \n                \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 20\n                    \n                \n                        \n                            \n                                    Defined in heatmap/bootstrap/heatmap.component.ts:39\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        theme\n                    \n                \n                \n                    \n                        Type :     \"light\" | \"dark\"\n\n                    \n                \n                \n                    \n                        Default value : \"light\"\n                    \n                \n                        \n                            \n                                    Defined in heatmap/bootstrap/heatmap.component.ts:40\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        transition\n                    \n                \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 1000\n                    \n                \n                        \n                            \n                                    Defined in heatmap/bootstrap/heatmap.component.ts:29\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        width\n                    \n                \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 600\n                    \n                \n                        \n                            \n                                    Defined in heatmap/bootstrap/heatmap.component.ts:27\n                            \n                        \n            \n        \n\n    \n    Outputs\n        \n            \n                \n                    \n                        \n                        axisClicked\n                    \n                \n                \n                    \n                        Type :         EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in heatmap/bootstrap/heatmap.component.ts:44\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        itemClicked\n                    \n                \n                \n                    \n                        Type :         EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in heatmap/bootstrap/heatmap.component.ts:43\n                            \n                        \n            \n        \n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        buildChart\n                        \n                    \n                \n            \n            \n                \nbuildChart(update?: boolean)\n                \n            \n\n\n            \n                \n                    Defined in heatmap/bootstrap/heatmap.component.ts:123\n                \n            \n\n\n            \n                \n                    buildChart() actually only builds the axes of the chart, since the\nrest is build automatically with Angular syntax in the template.\nWe build axis programmatically (with D3 selects) to benefit from the\nD3 abstractions and transitions.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    update\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getLegend\n                        \n                    \n                \n            \n            \n                \ngetLegend()\n                \n            \n\n\n            \n                \n                    Defined in heatmap/bootstrap/heatmap.component.ts:209\n                \n            \n\n\n            \n                \n                    Builds the list of legend items\n\n\n                    \n                        Returns :     {}\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngAfterViewInit\n                        \n                    \n                \n            \n            \n                \nngAfterViewInit()\n                \n            \n\n\n            \n                \n                    Defined in heatmap/bootstrap/heatmap.component.ts:108\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnChanges\n                        \n                    \n                \n            \n            \n                \nngOnChanges()\n                \n            \n\n\n            \n                \n                    Defined in heatmap/bootstrap/heatmap.component.ts:78\n                \n            \n\n\n            \n                \n                    ngOnChanges is used to respond to changes in the data (or chart parameter)\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onAxisClicked\n                        \n                    \n                \n            \n            \n                \nonAxisClicked(value: string, axis: \"x\" | \"y\")\n                \n            \n\n\n            \n                \n                    Defined in heatmap/bootstrap/heatmap.component.ts:200\n                \n            \n\n\n            \n                \n                    Called when the user clicks on an axis item\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    axis\n                                    \n                                            \"x\" | \"y\"\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onItemClicked\n                        \n                    \n                \n            \n            \n                \nonItemClicked(item: HeatmapItem)\n                \n            \n\n\n            \n                \n                    Defined in heatmap/bootstrap/heatmap.component.ts:189\n                \n            \n\n\n            \n                \n                    Called when the user clicks on a heatmap tile\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    item\n                                    \n                                                HeatmapItem\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onMouseOver\n                        \n                    \n                \n            \n            \n                \nonMouseOver(item: HeatmapItem, event: MouseEvent)\n                \n            \n\n\n            \n                \n                    Defined in heatmap/bootstrap/heatmap.component.ts:160\n                \n            \n\n\n            \n                \n                    Called when the user hovers the mouse over a heatmap tile\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    item\n                                    \n                                                HeatmapItem\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    event\n                                    \n                                            MouseEvent\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        color\n                        \n                    \n                \n            \n                \n                    \n                        Type :     d3.ScaleQuantile\n\n                    \n                \n                    \n                        \n                                Defined in heatmap/bootstrap/heatmap.component.ts:49\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        dataFiltered\n                        \n                    \n                \n            \n                \n                    \n                        Type :         HeatmapItem[]\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                    \n                        \n                                Defined in heatmap/bootstrap/heatmap.component.ts:58\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        gx\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ElementRef\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ViewChild('xAxis')\n                        \n                    \n                \n                    \n                        \n                                Defined in heatmap/bootstrap/heatmap.component.ts:52\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        gy\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ElementRef\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ViewChild('yAxis')\n                        \n                    \n                \n                    \n                        \n                                Defined in heatmap/bootstrap/heatmap.component.ts:53\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        originalCount\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in heatmap/bootstrap/heatmap.component.ts:69\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        tooltipItem\n                        \n                    \n                \n            \n                \n                    \n                        Type :         HeatmapItem\n\n                    \n                \n                    \n                        \n                                Defined in heatmap/bootstrap/heatmap.component.ts:61\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        tooltipLeft\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in heatmap/bootstrap/heatmap.component.ts:65\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        tooltipOrientation\n                        \n                    \n                \n            \n                \n                    \n                        Type :     \"left\" | \"right\"\n\n                    \n                \n                    \n                        \n                                Defined in heatmap/bootstrap/heatmap.component.ts:62\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        tooltipRight\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in heatmap/bootstrap/heatmap.component.ts:64\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        tooltipTop\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in heatmap/bootstrap/heatmap.component.ts:63\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        viewInit\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in heatmap/bootstrap/heatmap.component.ts:68\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        wrap\n                        \n                    \n                \n            \n                \n                    \n                        Default value : () => {...}\n                    \n                \n                    \n                        \n                                Defined in heatmap/bootstrap/heatmap.component.ts:230\n                        \n                    \n\n            \n                \n                    Truncates the axis strings to fit inside 90px width\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        x\n                        \n                    \n                \n            \n                \n                    \n                        Type :     d3.ScaleBand\n\n                    \n                \n                    \n                        \n                                Defined in heatmap/bootstrap/heatmap.component.ts:47\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        xAxis\n                        \n                    \n                \n            \n                \n                    \n                        Type :     d3.Selection\n\n                    \n                \n                    \n                        \n                                Defined in heatmap/bootstrap/heatmap.component.ts:54\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        y\n                        \n                    \n                \n            \n                \n                    \n                        Type :     d3.ScaleBand\n\n                    \n                \n                    \n                        \n                                Defined in heatmap/bootstrap/heatmap.component.ts:48\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        yAxis\n                        \n                    \n                \n            \n                \n                    \n                        Type :     d3.Selection\n\n                    \n                \n                    \n                        \n                                Defined in heatmap/bootstrap/heatmap.component.ts:55\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n    \n        import { Component, ElementRef, Output, EventEmitter, Input, ViewChild, OnChanges, AfterViewInit } from '@angular/core';\n\nimport * as d3 from 'd3';\n\nexport interface HeatmapItem {\n    x: string;\n    y: string;\n    count: number;\n    value: string;\n    display: string;\n    selected?: boolean;\n}\n\n@Component({\n    selector: \"sq-heatmap\",\n    templateUrl: \"./heatmap.component.html\",\n    styleUrls: ['./heatmap.component.scss']\n})\nexport class BsHeatmapComponent implements OnChanges, AfterViewInit {\n    /**\n     * Raw data to display (will be filtered in function of maxX and maxY parameters)\n     */\n    @Input() data: HeatmapItem[];\n\n    // Graphical parameters\n    @Input() height = 600;\n    @Input() width = 600;\n    @Input() margin = {top: 100, bottom: 20, left: 100, right: 40};\n    @Input() transition = 1000; // Transition time in ms (0 to avoid transitions)\n\n    // Interaction parameters\n    @Input() itemsClickable = true;\n    @Input() axisClickable = true;\n\n    // Axis/Scales parameters\n    @Input() buckets = 9; // Color buckets\n    @Input() colorScheme = \"schemeBlues\"; // Color scheme from D3\n    @Input() maxX = 20; // Max items on X\n    @Input() maxY = 20; // Max items on Y\n    @Input() theme: \"light\" | \"dark\" = \"light\";\n    \n    // Events from user interactions\n    @Output() itemClicked = new EventEmitter();\n    @Output() axisClicked = new EventEmitter();\n\n    // D3 Scales\n    x: d3.ScaleBand;\n    y: d3.ScaleBand;\n    color: d3.ScaleQuantile;\n\n    // Axes\n    @ViewChild(\"xAxis\") gx: ElementRef;\n    @ViewChild(\"yAxis\") gy: ElementRef;\n    xAxis: d3.Selection;\n    yAxis: d3.Selection;\n    \n    // Data actually displayed\n    dataFiltered: HeatmapItem[] = [];\n\n    // Tooltip    \n    tooltipItem?: HeatmapItem;\n    tooltipOrientation: \"left\" | \"right\";\n    tooltipTop: number;\n    tooltipRight: number;\n    tooltipLeft: number;\n\n    // Misc\n    viewInit: boolean;\n    originalCount: number;\n\n    constructor(\n        private el: ElementRef\n    ){}\n\n    /**\n     * ngOnChanges is used to respond to changes in the data (or chart parameter)\n     */\n    ngOnChanges() {\n\n        this.data = this.data || [];\n\n        // Pre-process data\n        const xLabels = Array.from(new Set(this.data.map(value => value.x))).slice(0, this.maxX);\n        const yLabels = Array.from(new Set(this.data.map(value => value.y))).slice(0, this.maxY);\n        this.dataFiltered = this.data.filter(value => xLabels.includes(value.x) && yLabels.includes(value.y));\n\n        // Create scales\n        this.x = d3.scaleBand()\n            .domain(xLabels)\n            .range([0, this.width-this.margin.left-this.margin.right]);\n\n        this.y = d3.scaleBand()\n            .domain(yLabels)\n            .range([0, this.height-this.margin.top-this.margin.bottom]);\n\n        this.color = d3.scaleQuantile()\n            .domain(this.dataFiltered.map(item => item.count))\n            .range(d3[this.colorScheme][this.buckets]);\n\n        // Note: ngOnChanges is always called once, before ngAfterViewInit\n        if(this.viewInit) {\n            this.buildChart(!!this.transition);\n        }\n    }\n\n    // Note: In onAfterViewInit we can access gx and gy, obtained with @ViewChild.\n    // At this point we can call buildChart()\n    ngAfterViewInit(){\n        this.xAxis = d3.select(this.gx.nativeElement);\n        this.yAxis = d3.select(this.gy.nativeElement);\n        this.viewInit = true;\n\n        this.buildChart();\n    }\n    \n    /**\n     * buildChart() actually only builds the axes of the chart, since the\n     * rest is build automatically with Angular syntax in the template.\n     * We build axis programmatically (with D3 selects) to benefit from the\n     * D3 abstractions and transitions.\n     * @param update \n     */\n    buildChart(update?: boolean){\n                    \n        if(update){\n            const t = d3.transition().duration(this.transition) as d3.Transition;\n    \n            this.xAxis.transition(t)\n                .call(d3.axisTop(this.x).tickSize(0))\n                .on(\"end\", () => this.xAxis.selectAll('text').each(this.wrap));\n\n            this.yAxis.transition(t)\n                .call(d3.axisLeft(this.y).tickSize(0))\n                .on(\"end\", () => this.yAxis.selectAll('text').each(this.wrap));\n            \n        }\n        else {\n            this.xAxis.call(d3.axisTop(this.x).tickSize(0));\n            this.yAxis.call(d3.axisLeft(this.y).tickSize(0));\n        }\n\n        this.xAxis.selectAll(\".domain\").remove(); // Remove the axis line\n        this.xAxis.selectAll(\"text\")  // Tilt the text\n            .attr(\"transform\", \"rotate(-35)\")\n            .style(\"text-anchor\", \"start\")\n            .each(this.wrap)\n            .on(\"click\", d => this.onAxisClicked(d, 'x'));\n\n        this.yAxis.selectAll(\".domain\").remove(); // Remove the axis line\n        this.yAxis.selectAll(\"text\")\n            .each(this.wrap)\n            .on(\"click\", d => this.onAxisClicked(d, 'y'));\n    }\n\n    /**\n     * Called when the user hovers the mouse over a heatmap tile\n     * @param item \n     * @param event \n     */\n    onMouseOver(item: HeatmapItem, event: MouseEvent){\n        this.tooltipItem = item;\n\n        const x = this.x(item.x) as number;\n        const y = this.y(item.y) as number;\n\n        // Since we use viewBox to auto-adjust the SVG to the container size, we have to\n        // convert from the SVG coordinate system to the HTML coordinate system\n        const actualWidth = (this.el.nativeElement as HTMLElement).offsetWidth;\n        const scale = actualWidth / this.width;\n        const relativeX = x / this.width;\n\n        // Tooltip to the right\n        if(relativeX ) => {\n        const self = d3.select(nodes[i]);\n        let textLength = nodes[i].getComputedTextLength();\n        let text = self.text();\n        const fullText = self.text();\n        while (textLength > 90 && text.length > 0) {\n          text = text.slice(0, -1)\n          self.text(text + '...');\n          textLength = nodes[i].getComputedTextLength();\n        }\n        self.append('svg:title').text(fullText);\n    };\n}\n\n    \n\n    \n        \n\n    \n    \n        \n            \n            \n            {{ item.start | number : '1.0-0'}}\n        \n    \n\n    \n        \n        \n\n        \n        \n\n        \n        \n        \n        \n    \n    \n    \n        {{'msg#heatmap.showing' | sqMessage:{values: {shown: dataFiltered.length, total: data.length} } }}\n    \n\n\n\n\n\n    {{tooltipItem.display || tooltipItem.value}}\n    {{'msg#heatmap.tooltip' | sqMessage:{values: {count: tooltipItem.count} } }}\n\n\n    \n\n    \n                \n                    ./heatmap.component.scss\n                \n                // This is required to position the tooltip absolutely\n:host {\n    display: block;\n    position: relative;\n}\n\n// Note: ::ng-deep is deprecated, but currently no better alternative\n.axis.clickable ::ng-deep text:hover {\n    text-decoration: underline;\n    cursor: pointer;\n}\n\n.tile {\n    opacity: 0.9;\n}\n\n.tile.clickable:hover {\n    cursor: pointer;\n    opacity: 1;\n    transition: opacity 0.2s ease-in 0s;\n}\n\n.tile.selected {\n    opacity: 0.5;\n}\n\n.legend {\n    font-size: 10px;\n    fill: darkgrey;\n\n    rect {\n        opacity: 0.9;\n    }\n}\n\n.bottom-legend {\n    fill: darkgrey;\n    font-size: 10px;\n    text-anchor: end;\n}\n\nsq-tooltip ::ng-deep {\n    .sq-tooltip {\n        pointer-events: none;\n        opacity: 0.8;\n    }\n}\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '                                                    {{ item.start | number : \\'1.0-0\\'}}                                                                                                    {{\\'msg#heatmap.showing\\' | sqMessage:{values: {shown: dataFiltered.length, total: data.length} } }}        {{tooltipItem.display || tooltipItem.value}}    {{\\'msg#heatmap.tooltip\\' | sqMessage:{values: {count: tooltipItem.count} } }}'\n    var COMPONENTS = [{'name': 'AgGridViewComponent', 'selector': 'sq-ag-grid-view'},{'name': 'BsEdgeInfoCard', 'selector': 'sq-edge-info-card'},{'name': 'BsFacetDate', 'selector': 'sq-facet-date'},{'name': 'BsFacetHeatmapComponent', 'selector': 'sq-facet-heatmap'},{'name': 'BsFacetTimelineComponent', 'selector': 'sq-facet-timeline'},{'name': 'BsHeatmapComponent', 'selector': 'sq-heatmap'},{'name': 'BsNodeInfoCard', 'selector': 'sq-node-info-card'},{'name': 'BsResultsHeatmapView', 'selector': 'sq-results-heatmap-view'},{'name': 'BsTimelineComponent', 'selector': 'sq-timeline'},{'name': 'BsTooltipComponent', 'selector': 'sq-tooltip'},{'name': 'DataModalComponent', 'selector': 'sq-data-modal'},{'name': 'FacetNgxChart', 'selector': 'sq-facet-ngx-chart'},{'name': 'FacetWrapperComponent', 'selector': 'facet-wrapper'},{'name': 'FusionChart', 'selector': 'sq-fusion-chart'},{'name': 'MapComponent', 'selector': 'sq-googlemaps'},{'name': 'MoneyCloudComponent', 'selector': 'sq-money-cloud'},{'name': 'MoneyTimelineComponent', 'selector': 'sq-money-timeline'},{'name': 'NetworkComponent', 'selector': 'sq-network'},{'name': 'NgxChart', 'selector': 'sq-ngx-chart'},{'name': 'ResultTimeline', 'selector': 'sq-result-timeline'},{'name': 'TimelineLegendComponent', 'selector': 'sq-timeline-legend'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'BsHeatmapComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/BsHeatmapModule.html":{"url":"modules/BsHeatmapModule.html","title":"module - BsHeatmapModule","body":"\n                   \n\n\n\n\n    Modules\n    BsHeatmapModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_BsHeatmapModule\n\n\n\ncluster_BsHeatmapModule_exports\n\n\n\ncluster_BsHeatmapModule_declarations\n\n\n\n\nBsFacetHeatmapComponent\n\nBsFacetHeatmapComponent\n\n\n\nBsHeatmapModule\n\nBsHeatmapModule\n\nBsHeatmapModule -->\n\nBsFacetHeatmapComponent->BsHeatmapModule\n\n\n\n\n\nBsHeatmapComponent\n\nBsHeatmapComponent\n\nBsHeatmapModule -->\n\nBsHeatmapComponent->BsHeatmapModule\n\n\n\n\n\nBsResultsHeatmapView\n\nBsResultsHeatmapView\n\nBsHeatmapModule -->\n\nBsResultsHeatmapView->BsHeatmapModule\n\n\n\n\n\nBsTooltipComponent\n\nBsTooltipComponent\n\nBsHeatmapModule -->\n\nBsTooltipComponent->BsHeatmapModule\n\n\n\n\n\nBsFacetHeatmapComponent \n\nBsFacetHeatmapComponent \n\nBsFacetHeatmapComponent  -->\n\nBsHeatmapModule->BsFacetHeatmapComponent \n\n\n\n\n\nBsHeatmapComponent \n\nBsHeatmapComponent \n\nBsHeatmapComponent  -->\n\nBsHeatmapModule->BsHeatmapComponent \n\n\n\n\n\nBsResultsHeatmapView \n\nBsResultsHeatmapView \n\nBsResultsHeatmapView  -->\n\nBsHeatmapModule->BsResultsHeatmapView \n\n\n\n\n\nBsTooltipComponent \n\nBsTooltipComponent \n\nBsTooltipComponent  -->\n\nBsHeatmapModule->BsTooltipComponent \n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            heatmap/bootstrap/heatmap.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Declarations\n                    \n                        \n                            BsFacetHeatmapComponent\n                        \n                        \n                            BsHeatmapComponent\n                        \n                        \n                            BsResultsHeatmapView\n                        \n                        \n                            BsTooltipComponent\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            BsFacetHeatmapComponent\n                        \n                        \n                            BsHeatmapComponent\n                        \n                        \n                            BsResultsHeatmapView\n                        \n                        \n                            BsTooltipComponent\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import {NgModule} from \"@angular/core\";\nimport {CommonModule} from \"@angular/common\";\nimport {FormsModule, ReactiveFormsModule} from \"@angular/forms\";\n\nimport {IntlModule} from \"@sinequa/core/intl\";\n\nimport {BsSelectionModule} from \"@sinequa/components/selection\";\nimport {BsActionModule} from \"@sinequa/components/action\";\n\nimport {BsTooltipComponent} from \"./tooltip.component\";\nimport {BsHeatmapComponent} from \"./heatmap.component\";\nimport {BsFacetHeatmapComponent} from \"./facet-heatmap.component\";\nimport {BsResultsHeatmapView} from \"./results-heatmap-view\";\n\n@NgModule({\n    imports: [\n        FormsModule, ReactiveFormsModule,\n        CommonModule,\n        IntlModule,\n\n        BsSelectionModule,\n        BsActionModule\n    ],\n    declarations: [\n        BsResultsHeatmapView,\n        BsTooltipComponent,\n        BsHeatmapComponent,\n        BsFacetHeatmapComponent\n    ],\n    exports: [\n        BsResultsHeatmapView,\n        BsTooltipComponent,\n        BsHeatmapComponent,\n        BsFacetHeatmapComponent\n    ]\n})\nexport class BsHeatmapModule {\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/BsNodeInfoCard.html":{"url":"components/BsNodeInfoCard.html","title":"component - BsNodeInfoCard","body":"\n                   \n\n\n\n\n\n  Components\n  \n  BsNodeInfoCard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    network/node-info-card.component.ts\n\n\n\n\n\n    \n        Implements\n    \n    \n                    OnChanges\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                sq-node-info-card\n            \n\n\n            \n                styles\n                \n.card {\n    top: 5px;\n    left: 0;\n    right: 0;\n    width: 80%;\n}\n.circular-image {\n    width: 1.5em;\n    height: 1.5em;\n    border-radius: 50%;\n    object-fit: cover;\n}\n    \n            \n\n\n            \n                templateUrl\n                node-info-card.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                closed\n                            \n                            \n                                expanded\n                            \n                            \n                                neighbors\n                            \n                            \n                                nodeData\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                focusNode\n                            \n                            \n                                ngOnChanges\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                node\n                            \n                        \n                    \n                \n\n\n\n\n        \n    \n\n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        node\n                    \n                \n                \n                    \n                        Type :         Node\n\n                    \n                \n                        \n                            \n                                    Defined in network/node-info-card.component.ts:29\n                            \n                        \n            \n        \n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        focusNode\n                        \n                    \n                \n            \n            \n                \nfocusNode(node: Node)\n                \n            \n\n\n            \n                \n                    Defined in network/node-info-card.component.ts:70\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    node\n                                    \n                                                Node\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnChanges\n                        \n                    \n                \n            \n            \n                \nngOnChanges()\n                \n            \n\n\n            \n                \n                    Defined in network/node-info-card.component.ts:38\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        closed\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in network/node-info-card.component.ts:31\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        expanded\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in network/node-info-card.component.ts:32\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        neighbors\n                        \n                    \n                \n            \n                \n                    \n                        Type :     literal type\n\n                    \n                \n                    \n                        \n                                Defined in network/node-info-card.component.ts:36\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        nodeData\n                        \n                    \n                \n            \n                \n                    \n                        Type :         NodeData\n\n                    \n                \n                    \n                        \n                                Defined in network/node-info-card.component.ts:34\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n    \n        import { Component, Input, OnChanges } from \"@angular/core\";\nimport { Node } from './network-models';\n\n\nexport interface NodeData {\n    node: Node;\n    count?: number; // The count displayed may be different from the node count (for edges)\n}\n\n@Component({\n    selector: \"sq-node-info-card\",\n    templateUrl: \"node-info-card.component.html\",\n    styles: [`\n.card {\n    top: 5px;\n    left: 0;\n    right: 0;\n    width: 80%;\n}\n.circular-image {\n    width: 1.5em;\n    height: 1.5em;\n    border-radius: 50%;\n    object-fit: cover;\n}\n    `]\n})\nexport class BsNodeInfoCard implements OnChanges {\n    @Input() node: Node;\n\n    closed: boolean;\n    expanded: boolean;\n\n    nodeData: NodeData;\n\n    neighbors: {[type: string]: NodeData[]};\n\n    ngOnChanges() {\n        this.closed = false;\n        this.expanded = false;\n        this.nodeData = { node: this.node, count: this.node.count };\n\n        this.neighbors = {};\n        this.node.context.edges\n            .stream()\n            .filter(e => e.from === this.node.id || e.to === this.node.id) // Filter edges\n            .map(e => {\n                const id = e.from === this.node.id ? e.to : e.from\n                const node = this.node.context.nodes.get(id);\n                return {node, count: e.count};\n            }) // get node and edge count\n            .forEach(item => {\n                if(item.node) {\n                    const type = item.node.type.field ?\n                        item.node.context.appService.getPluralLabel(item.node.type.field) : // Try to get the \"pretty label\"\n                        item.node.type.name; // Or just use the node type's name\n                    if(!this.neighbors[type]) {\n                        this.neighbors[type] = []; // Initialize the neighbor array\n                    }\n                    // Create the node data\n                    this.neighbors[type].push({ node: item.node, count: item.count } as NodeData);\n                }\n                return true;\n            });\n        // Sort the neighbors by decreasing count number\n        Object.values(this.neighbors)\n            .forEach(list => list.sort((a,b) => (b.count || 0) - (a.count || 0)));\n    }\n\n    focusNode(node: Node) {\n        // Hack to gain access to the network instance (networkService does not have the focus() method)\n        const networkInstance = node.context.networkService['networks'][node.context.name];\n        networkInstance.focus(node.id, {animation: true}); // Move the view to this node with animation\n        networkInstance.selectNodes([node.id], true); // Warning: does not trigger events...\n        node.context.select(node, undefined); // Select the node to update info cards, actions\n        return false;\n    }\n}\n    \n\n    \n        \n    \n        \n            \n            \n                \n            \n            \n                \n            \n        \n        \n            \n                \n                    {{neighbor.key | sqMessage}}\n                    \n                        \n                            \n                                \n                            \n                        \n                    \n                \n            \n        \n    \n\n\n\n    \n    {{nodeData.node['icon']['code']}}\n    {{nodeData.node.label}}\n     0\" class=\"me-2 text-muted\" title=\"{{ 'msg#network.infocards.count' | sqMessage }}\">({{nodeData.count}})\n\n    \n\n    \n            \n.card {\n    top: 5px;\n    left: 0;\n    right: 0;\n    width: 80%;\n}\n.circular-image {\n    width: 1.5em;\n    height: 1.5em;\n    border-radius: 50%;\n    object-fit: cover;\n}\n    \n\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '                                                                                                                                                                        {{neighbor.key | sqMessage}}                                                                                                                                                                                                                                {{nodeData.node[\\'icon\\'][\\'code\\']}}    {{nodeData.node.label}}     0\" class=\"me-2 text-muted\" title=\"{{ \\'msg#network.infocards.count\\' | sqMessage }}\">({{nodeData.count}})'\n    var COMPONENTS = [{'name': 'AgGridViewComponent', 'selector': 'sq-ag-grid-view'},{'name': 'BsEdgeInfoCard', 'selector': 'sq-edge-info-card'},{'name': 'BsFacetDate', 'selector': 'sq-facet-date'},{'name': 'BsFacetHeatmapComponent', 'selector': 'sq-facet-heatmap'},{'name': 'BsFacetTimelineComponent', 'selector': 'sq-facet-timeline'},{'name': 'BsHeatmapComponent', 'selector': 'sq-heatmap'},{'name': 'BsNodeInfoCard', 'selector': 'sq-node-info-card'},{'name': 'BsResultsHeatmapView', 'selector': 'sq-results-heatmap-view'},{'name': 'BsTimelineComponent', 'selector': 'sq-timeline'},{'name': 'BsTooltipComponent', 'selector': 'sq-tooltip'},{'name': 'DataModalComponent', 'selector': 'sq-data-modal'},{'name': 'FacetNgxChart', 'selector': 'sq-facet-ngx-chart'},{'name': 'FacetWrapperComponent', 'selector': 'facet-wrapper'},{'name': 'FusionChart', 'selector': 'sq-fusion-chart'},{'name': 'MapComponent', 'selector': 'sq-googlemaps'},{'name': 'MoneyCloudComponent', 'selector': 'sq-money-cloud'},{'name': 'MoneyTimelineComponent', 'selector': 'sq-money-timeline'},{'name': 'NetworkComponent', 'selector': 'sq-network'},{'name': 'NgxChart', 'selector': 'sq-ngx-chart'},{'name': 'ResultTimeline', 'selector': 'sq-result-timeline'},{'name': 'TimelineLegendComponent', 'selector': 'sq-timeline-legend'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'BsNodeInfoCard'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/BsTimelineModule.html":{"url":"modules/BsTimelineModule.html","title":"module - BsTimelineModule","body":"\n                   \n\n\n\n\n    Modules\n    BsTimelineModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_BsTimelineModule\n\n\n\ncluster_BsTimelineModule_exports\n\n\n\ncluster_BsTimelineModule_imports\n\n\n\ncluster_BsTimelineModule_declarations\n\n\n\n\nBsFacetDate\n\nBsFacetDate\n\n\n\nBsTimelineModule\n\nBsTimelineModule\n\nBsTimelineModule -->\n\nBsFacetDate->BsTimelineModule\n\n\n\n\n\nBsFacetTimelineComponent\n\nBsFacetTimelineComponent\n\nBsTimelineModule -->\n\nBsFacetTimelineComponent->BsTimelineModule\n\n\n\n\n\nBsTimelineComponent\n\nBsTimelineComponent\n\nBsTimelineModule -->\n\nBsTimelineComponent->BsTimelineModule\n\n\n\n\n\nTimelineLegendComponent\n\nTimelineLegendComponent\n\nBsTimelineModule -->\n\nTimelineLegendComponent->BsTimelineModule\n\n\n\n\n\nBsFacetDate \n\nBsFacetDate \n\nBsFacetDate  -->\n\nBsTimelineModule->BsFacetDate \n\n\n\n\n\nBsFacetTimelineComponent \n\nBsFacetTimelineComponent \n\nBsFacetTimelineComponent  -->\n\nBsTimelineModule->BsFacetTimelineComponent \n\n\n\n\n\nBsTimelineComponent \n\nBsTimelineComponent \n\nBsTimelineComponent  -->\n\nBsTimelineModule->BsTimelineComponent \n\n\n\n\n\nTimelineLegendComponent \n\nTimelineLegendComponent \n\nTimelineLegendComponent  -->\n\nBsTimelineModule->TimelineLegendComponent \n\n\n\n\n\nBsHeatmapModule\n\nBsHeatmapModule\n\nBsTimelineModule -->\n\nBsHeatmapModule->BsTimelineModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            timeline/bootstrap/timeline.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Declarations\n                    \n                        \n                            BsFacetDate\n                        \n                        \n                            BsFacetTimelineComponent\n                        \n                        \n                            BsTimelineComponent\n                        \n                        \n                            TimelineLegendComponent\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            BsHeatmapModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            BsFacetDate\n                        \n                        \n                            BsFacetTimelineComponent\n                        \n                        \n                            BsTimelineComponent\n                        \n                        \n                            TimelineLegendComponent\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import {NgModule} from \"@angular/core\";\nimport {CommonModule} from \"@angular/common\";\nimport {FormsModule, ReactiveFormsModule} from \"@angular/forms\";\n\nimport {IntlModule} from \"@sinequa/core/intl\";\n\nimport {UtilsModule} from \"@sinequa/components/utils\";\nimport {BsSelectionModule} from \"@sinequa/components/selection\";\nimport {BsActionModule} from \"@sinequa/components/action\";\nimport {BsHeatmapModule} from \"@sinequa/analytics/heatmap\";\n\nimport {BsTimelineComponent} from \"./timeline.component\";\nimport {BsFacetTimelineComponent} from \"./facet-timeline.component\";\nimport { TimelineLegendComponent } from \"./timeline-legend.component\";\nimport { BsFacetDate } from \"./facet-date\";\nimport { BsAdvancedModule } from \"@sinequa/components/advanced\";\nimport { BsFacetModule } from \"@sinequa/components/facet\";\nimport { CollapseModule } from \"@sinequa/components/collapse\";\n\n@NgModule({\n    imports: [\n        FormsModule, ReactiveFormsModule,\n        CommonModule,\n        IntlModule,\n\n        UtilsModule,\n        BsSelectionModule,\n        BsActionModule,\n        BsHeatmapModule, // We need the heatmap module for the tooltip component\n        BsAdvancedModule,\n        BsFacetModule,\n        CollapseModule,\n    ],\n    declarations: [\n        BsTimelineComponent,\n        BsFacetTimelineComponent,\n        TimelineLegendComponent,\n        BsFacetDate\n    ],\n    exports: [\n        BsTimelineComponent,\n        BsFacetTimelineComponent,\n        TimelineLegendComponent,\n        BsFacetDate\n    ]\n})\nexport class BsTimelineModule {\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/BsTooltipComponent.html":{"url":"components/BsTooltipComponent.html","title":"component - BsTooltipComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  BsTooltipComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    heatmap/bootstrap/tooltip.component.ts\n\n\n\n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                sq-tooltip\n            \n\n\n            \n                styles\n                \n.sq-tooltip {\n    z-index: 10;\n}\n\n.sq-tooltip::after {\n    content: \" \";\n    position: absolute;\n    top: 12px;\n    border-width: 8px;\n    border-style: solid;\n}\n\n.sq-tooltip.right::after {\n    left: -17px;\n    border-color: transparent rgb(0,0,0,0.125) transparent transparent;\n}\n\n.sq-tooltip.left::after {\n    right: -17px;\n    border-color: transparent transparent transparent rgb(0,0,0,0.125);\n}\n    \n            \n\n            \n                template\n                \n    \n        \n    \n\n\n            \n\n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n\n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                left\n                            \n                            \n                                orientation\n                            \n                            \n                                right\n                            \n                            \n                                theme\n                            \n                            \n                                top\n                            \n                        \n                    \n                \n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    style\n                                \n                            \n                        \n                    \n        \n    \n\n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        left\n                    \n                \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 0\n                    \n                \n                        \n                            \n                                    Defined in heatmap/bootstrap/tooltip.component.ts:38\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        orientation\n                    \n                \n                \n                    \n                        Type :     \"left\" | \"right\"\n\n                    \n                \n                \n                    \n                        Default value : \"right\"\n                    \n                \n                        \n                            \n                                    Defined in heatmap/bootstrap/tooltip.component.ts:37\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        right\n                    \n                \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 0\n                    \n                \n                        \n                            \n                                    Defined in heatmap/bootstrap/tooltip.component.ts:39\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        theme\n                    \n                \n                \n                    \n                        Type :     \"light\" | \"dark\"\n\n                    \n                \n                \n                    \n                        Default value : \"light\"\n                    \n                \n                        \n                            \n                                    Defined in heatmap/bootstrap/tooltip.component.ts:41\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        top\n                    \n                \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 0\n                    \n                \n                        \n                            \n                                    Defined in heatmap/bootstrap/tooltip.component.ts:40\n                            \n                        \n            \n        \n\n\n\n\n\n\n    \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        style\n                    \n                \n\n                \n                    \n                        getstyle()\n                    \n                \n                            \n                                \n                                    Defined in heatmap/bootstrap/tooltip.component.ts:43\n                                \n                            \n\n            \n        \n\n\n\n\n    \n        import {Component, Input} from '@angular/core';\n\n@Component({\n    selector: \"sq-tooltip\",\n    template: `\n\n    \n        \n    \n\n`,\n    styles: [`\n.sq-tooltip {\n    z-index: 10;\n}\n\n.sq-tooltip::after {\n    content: \" \";\n    position: absolute;\n    top: 12px;\n    border-width: 8px;\n    border-style: solid;\n}\n\n.sq-tooltip.right::after {\n    left: -17px;\n    border-color: transparent rgb(0,0,0,0.125) transparent transparent;\n}\n\n.sq-tooltip.left::after {\n    right: -17px;\n    border-color: transparent transparent transparent rgb(0,0,0,0.125);\n}\n    `]\n})\nexport class BsTooltipComponent {\n    @Input() orientation: \"left\" | \"right\" = \"right\";\n    @Input() left = 0;\n    @Input() right = 0;\n    @Input() top = 0;\n    @Input() theme: \"light\" | \"dark\" = \"light\";\n\n    get style() {\n        if(this.orientation === \"right\") {\n            return {\n                'left.px': this.left + 7,\n                'top.px': this.top - 21, // Align tooltip arrow\n            }\n        }\n        else {\n            return {\n                'right.px': this.right + 7,\n                'top.px': this.top - 21, // Align tooltip arrow\n            }\n        }\n    }\n}\n    \n\n\n    \n            \n.sq-tooltip {\n    z-index: 10;\n}\n\n.sq-tooltip::after {\n    content: \" \";\n    position: absolute;\n    top: 12px;\n    border-width: 8px;\n    border-style: solid;\n}\n\n.sq-tooltip.right::after {\n    left: -17px;\n    border-color: transparent rgb(0,0,0,0.125) transparent transparent;\n}\n\n.sq-tooltip.left::after {\n    right: -17px;\n    border-color: transparent transparent transparent rgb(0,0,0,0.125);\n}\n    \n\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '                '\n    var COMPONENTS = [{'name': 'AgGridViewComponent', 'selector': 'sq-ag-grid-view'},{'name': 'BsEdgeInfoCard', 'selector': 'sq-edge-info-card'},{'name': 'BsFacetDate', 'selector': 'sq-facet-date'},{'name': 'BsFacetHeatmapComponent', 'selector': 'sq-facet-heatmap'},{'name': 'BsFacetTimelineComponent', 'selector': 'sq-facet-timeline'},{'name': 'BsHeatmapComponent', 'selector': 'sq-heatmap'},{'name': 'BsNodeInfoCard', 'selector': 'sq-node-info-card'},{'name': 'BsResultsHeatmapView', 'selector': 'sq-results-heatmap-view'},{'name': 'BsTimelineComponent', 'selector': 'sq-timeline'},{'name': 'BsTooltipComponent', 'selector': 'sq-tooltip'},{'name': 'DataModalComponent', 'selector': 'sq-data-modal'},{'name': 'FacetNgxChart', 'selector': 'sq-facet-ngx-chart'},{'name': 'FacetWrapperComponent', 'selector': 'facet-wrapper'},{'name': 'FusionChart', 'selector': 'sq-fusion-chart'},{'name': 'MapComponent', 'selector': 'sq-googlemaps'},{'name': 'MoneyCloudComponent', 'selector': 'sq-money-cloud'},{'name': 'MoneyTimelineComponent', 'selector': 'sq-money-timeline'},{'name': 'NetworkComponent', 'selector': 'sq-network'},{'name': 'NgxChart', 'selector': 'sq-ngx-chart'},{'name': 'ResultTimeline', 'selector': 'sq-result-timeline'},{'name': 'TimelineLegendComponent', 'selector': 'sq-timeline-legend'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'BsTooltipComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ChartDataPoint.html":{"url":"interfaces/ChartDataPoint.html","title":"interface - ChartDataPoint","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ChartDataPoint\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            ngx-charts/chart/chart.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            name\n                                        \n                                \n                                \n                                        \n                                            value\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        name\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        name:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        value\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        value:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import {Component, Input, Output, EventEmitter, OnInit, OnDestroy, OnChanges, DoCheck, SimpleChanges, ViewChild, ElementRef, Type} from \"@angular/core\";\nimport {Subscription} from \"rxjs\";\nimport {Utils} from \"@sinequa/core/base\";\nimport {IntlService} from \"@sinequa/core/intl\";\nimport {BaseChartComponent, BarVerticalComponent, BarHorizontalComponent} from \"@swimlane/ngx-charts\";\nimport {UIService} from \"@sinequa/components/utils\";\n\n\nexport interface ChartOptions {\n    type: string;\n    colorScheme?: string;\n    getItemColor?: (value: string) => string;\n    tickFormatter?: (value: any) => string;\n}\n\nexport interface ChartDataPoint {\n    name: string;\n    value: number;\n}\n\n@Component({\n    selector: \"sq-ngx-chart\",\n    templateUrl: \"./chart.html\",\n    styleUrls: [\"./chart.scss\"]\n})\nexport class NgxChart implements OnInit, OnDestroy, OnChanges, DoCheck {\n    @Input() options: ChartOptions;\n    @Input() data: ChartDataPoint[];\n    @Output(\"item-click\") itemClickEvent: EventEmitter;\n    @ViewChild(\"wrapper\", {static: true}) wrapper: ElementRef;\n    @ViewChild(\"tooltipTemplate\", {static: false}) tooltipTemplate;\n    @ViewChild(\"chart\", {static: false}) chart: BaseChartComponent;\n    localeChange: Subscription;\n    attached: boolean;\n\n    constructor(\n        protected intlService: IntlService,\n        private uiService: UIService) {\n        this.itemClickEvent = new EventEmitter();\n    }\n\n    updateChart() {\n        if (!!this.chart) this.chart.update();\n    }\n\n    private onResize = () => this.updateChart();\n\n    ngOnInit() {\n        this.uiService.addElementResizeListener(this.wrapper.nativeElement, this.onResize);\n        this.localeChange = Utils.subscribe(this.intlService.events,\n            (value) => {\n                this.updateChart();\n            });\n    }\n\n    ngOnDestroy() {\n        this.uiService.removeElementResizeListener(this.wrapper.nativeElement, this.onResize);\n        this.localeChange.unsubscribe();\n    }\n\n    get chartType(): string {\n        return Utils.toLowerCase(this.options.type);\n    }\n\n    chartComponent(type:string) : Type {\n        switch(type){\n            case \"horizontalbar\": return BarHorizontalComponent;\n            case \"verticaltalbar\": return BarVerticalComponent;\n            default: return BarVerticalComponent;\n        }\n    }\n\n    // so we don't end up with no color scheme if the color scheme is not set\n    get colorScheme(): string {\n        return this.options.colorScheme || \"cool\";\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n    }\n\n    // This is a clunky way of avoiding (briefly) seeing ngx-charts rendering with the default 600x400 dimensions\n    ngDoCheck() {\n        if (!this.attached && !!this.wrapper) {\n            if (document.body.contains(this.wrapper.nativeElement)) {\n                this.updateChart();\n                this.attached = true;\n            }\n        }\n    }\n\n    select = (dataPoint: ChartDataPoint): void => {\n        this.itemClickEvent.emit(dataPoint);\n    }\n}\n    \n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ChartOptions.html":{"url":"interfaces/ChartOptions.html","title":"interface - ChartOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ChartOptions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            ngx-charts/chart/chart.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            colorScheme\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            getItemColor\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            tickFormatter\n                                        \n                                \n                                \n                                        \n                                            type\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        colorScheme\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        colorScheme:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        getItemColor\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        getItemColor:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        tickFormatter\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        tickFormatter:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        type\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        type:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import {Component, Input, Output, EventEmitter, OnInit, OnDestroy, OnChanges, DoCheck, SimpleChanges, ViewChild, ElementRef, Type} from \"@angular/core\";\nimport {Subscription} from \"rxjs\";\nimport {Utils} from \"@sinequa/core/base\";\nimport {IntlService} from \"@sinequa/core/intl\";\nimport {BaseChartComponent, BarVerticalComponent, BarHorizontalComponent} from \"@swimlane/ngx-charts\";\nimport {UIService} from \"@sinequa/components/utils\";\n\n\nexport interface ChartOptions {\n    type: string;\n    colorScheme?: string;\n    getItemColor?: (value: string) => string;\n    tickFormatter?: (value: any) => string;\n}\n\nexport interface ChartDataPoint {\n    name: string;\n    value: number;\n}\n\n@Component({\n    selector: \"sq-ngx-chart\",\n    templateUrl: \"./chart.html\",\n    styleUrls: [\"./chart.scss\"]\n})\nexport class NgxChart implements OnInit, OnDestroy, OnChanges, DoCheck {\n    @Input() options: ChartOptions;\n    @Input() data: ChartDataPoint[];\n    @Output(\"item-click\") itemClickEvent: EventEmitter;\n    @ViewChild(\"wrapper\", {static: true}) wrapper: ElementRef;\n    @ViewChild(\"tooltipTemplate\", {static: false}) tooltipTemplate;\n    @ViewChild(\"chart\", {static: false}) chart: BaseChartComponent;\n    localeChange: Subscription;\n    attached: boolean;\n\n    constructor(\n        protected intlService: IntlService,\n        private uiService: UIService) {\n        this.itemClickEvent = new EventEmitter();\n    }\n\n    updateChart() {\n        if (!!this.chart) this.chart.update();\n    }\n\n    private onResize = () => this.updateChart();\n\n    ngOnInit() {\n        this.uiService.addElementResizeListener(this.wrapper.nativeElement, this.onResize);\n        this.localeChange = Utils.subscribe(this.intlService.events,\n            (value) => {\n                this.updateChart();\n            });\n    }\n\n    ngOnDestroy() {\n        this.uiService.removeElementResizeListener(this.wrapper.nativeElement, this.onResize);\n        this.localeChange.unsubscribe();\n    }\n\n    get chartType(): string {\n        return Utils.toLowerCase(this.options.type);\n    }\n\n    chartComponent(type:string) : Type {\n        switch(type){\n            case \"horizontalbar\": return BarHorizontalComponent;\n            case \"verticaltalbar\": return BarVerticalComponent;\n            default: return BarVerticalComponent;\n        }\n    }\n\n    // so we don't end up with no color scheme if the color scheme is not set\n    get colorScheme(): string {\n        return this.options.colorScheme || \"cool\";\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n    }\n\n    // This is a clunky way of avoiding (briefly) seeing ngx-charts rendering with the default 600x400 dimensions\n    ngDoCheck() {\n        if (!this.attached && !!this.wrapper) {\n            if (document.body.contains(this.wrapper.nativeElement)) {\n                this.updateChart();\n                this.attached = true;\n            }\n        }\n    }\n\n    select = (dataPoint: ChartDataPoint): void => {\n        this.itemClickEvent.emit(dataPoint);\n    }\n}\n    \n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Column.html":{"url":"interfaces/Column.html","title":"interface - Column","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  Column\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            ag-grid/ag-grid-view.component.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                    ColDef\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            $column\n                                        \n                                \n                                \n                                        \n                                            field\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        $column\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        $column:         CCColumn\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         CCColumn\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        field\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        field:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Component, Input, OnChanges, OnDestroy, OnInit, SimpleChanges } from \"@angular/core\";\nimport { Action } from \"@sinequa/components/action\";\nimport { FacetService } from \"@sinequa/components/facet\";\nimport { SearchService } from \"@sinequa/components/search\";\nimport { SelectionEventType, SelectionService } from \"@sinequa/components/selection\";\nimport { UserPreferences } from \"@sinequa/components/user-settings\";\nimport { UIService } from \"@sinequa/components/utils\";\nimport { AppService, FormatService, Query } from \"@sinequa/core/app-utils\";\nimport { Utils } from \"@sinequa/core/base\";\nimport { IntlService } from \"@sinequa/core/intl\";\nimport { ModalService } from \"@sinequa/core/modal\";\nimport { Results, Record, CCColumn, EngineType } from \"@sinequa/core/web-services\";\nimport { ICellRendererFunc, ITooltipParams, ColDef, GridApi, ColumnApi, GridReadyEvent, RowDataChangedEvent, CellDoubleClickedEvent, SelectionChangedEvent, IDatasource, CsvExportParams, ProcessCellForExportParams, SortChangedEvent, FilterChangedEvent, FilterModifiedEvent, ModelUpdatedEvent } from 'ag-grid-community';\nimport { ApplyColumnStateParams } from \"ag-grid-community/dist/lib/columnController/columnApi\";\nimport { Subscription } from \"rxjs\";\nimport { DataModalComponent } from \"./data-modal.component\";\nimport { SqDatasource } from \"./datasource\";\nimport { FacetWrapperComponent } from \"./facet-wrapper.component\";\n\n\nexport interface Column extends ColDef {\n    field: string;\n    $column?: CCColumn;\n}\n\n\n@Component({\n    selector: 'sq-ag-grid-view',\n    templateUrl: './ag-grid-view.component.html',\n    styleUrls: ['./ag-grid-view.component.scss']\n})\nexport class AgGridViewComponent implements OnInit, OnChanges, OnDestroy {\n\n    /** Results containing the record objects displayed in this grid */\n    @Input() results?: Results;\n    /** List of column definitions for each column displayed in the grid */\n    @Input() columns: Column[];\n    /** Optional query to fetch more data from the server (defaults to searchService.query) */\n    @Input() query?: Query;\n\n    /** Width of the grid */\n    @Input() width = \"100%\";\n    /** Height of the grid */\n    @Input() height = \"600px\";\n    /** Which actions to show above the grid, if any */\n    @Input() toolbarActions: (string | Action)[] = [\"columnVisibility\", \"gridReset\", \"autosize\", \"copySelection\", \"downloadSelection\", \"formatContent\"];\n    /** Whether or not to show the results counter in the toolbar */\n    @Input() showCounter = true;\n    /** Whether or not to format the data in the grid, using the FormatService */\n    @Input() formatContent = true;\n    /** Row selection mode (forwarded to ag-grid) */\n    @Input() rowSelection: 'single' | 'multiple' | undefined = 'multiple';\n    /** Whether or not to display checkboxes in the first column of the grid to select rows */\n    @Input() displayCheckbox = false;\n    /** Choice of ag-grid theme (balham is denser) */\n    @Input() theme: \"ag-theme-balham\" | \"ag-theme-alpine\" | \"ag-theme-balham-dark\" | \"ag-theme-alpine-dark\" = \"ag-theme-alpine\";\n    /** Default column grid (possibly overriden by column definitions) */\n    @Input() defaultColumnWidth = 200;\n    /** Configure scrolling functionality */\n    @Input() rowModelType: string = 'infinite';\n\n    /** Default column definition */\n    @Input()\n    defaultColDef: ColDef = {\n        resizable: true\n    }\n    \n    /** Actual column definitions (derived from this.columns) */\n    colDefs: ColDef[] = [];\n    \n    /** ag-grid API for the grid and the column model */\n    gridApi: GridApi | null | undefined;\n    gridColumnApi: ColumnApi | null | undefined;\n\n    /** Datasource implementation for infinite scrolling row model */\n    datasource?: IDatasource;\n\n    // Flags to manage the state of filters and sorts\n    _filterInput = false;\n    \n    /** Custom components */\n    frameworkComponents = {\n        facet: FacetWrapperComponent\n    };\n    \n    /** List of action buttons displayed in the toolbar */\n    gridActions: Action[];\n    /** Action button allowing to toggle each column's visibility */\n    columnsAction: Action;\n\n    /** If rowModelType is 'clientSide', set rowData directly */\n    rowData: Record[] = [];\n\n    /** List of subscriptions to clean up on destroy */\n    subscriptions: Subscription[] = [];\n\n    constructor(\n        public appService: AppService,\n        public searchService: SearchService,\n        public facetService: FacetService,\n        public intlService: IntlService,\n        public formatService: FormatService,\n        public selectionService: SelectionService,\n        public uiService: UIService,\n        public modalService: ModalService,\n        public prefs: UserPreferences\n    ) {\n        this.columnsAction = new Action({\n            icon: \"fas fa-columns fa-fw\",\n            text: \"msg#grid.columns\",\n            scrollable: true,\n            children: []\n        });\n    }\n\n    ngOnInit() {\n        // Subscribe to the selection service to reflect external row selection into the grid\n        this.subscriptions.push(this.selectionService.events.subscribe(event => {\n            if(event.source !== \"ag-grid\" && (event.type === SelectionEventType.SELECT || event.type === SelectionEventType.UNSELECT)) {\n                this.gridApi?.forEachNode(node => {\n                    if(event.records.find(r => r.id === node.data.id)) {\n                        node.setSelected(event.type === SelectionEventType.SELECT, undefined, true);\n                    }\n                });\n            }\n        }));\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n        if(changes.columns) {\n            this.createColumns();\n        }\n        if(changes.results) {\n            this.createRows();\n        }\n        if(!this.gridActions || changes.toolbarActions) {\n            // Override the \"formatContent\" property if it exists in the user preferences\n            const formatContent = this.prefs.get(\"ag-grid-format-content\");\n            if(formatContent !== undefined) {\n                this.formatContent = formatContent;\n            }\n            this.createActions();\n        }\n    }\n\n    ngOnDestroy() {\n        // Unsubscribe from any subscription\n        this.subscriptions.forEach(s => s.unsubscribe());\n    }\n\n    /**\n     * Create the list of column definitions by deriving the input\n     * `columns` list. Since record objects do not necessarily contain\n     * clean string data, we add a custom cellRenderer and tooltipValueGetter.\n     * Sinequa provides header names and tells us if a column can be sorted on,\n     * or filtered.\n     */\n    createColumns() {\n        this.colDefs = this.columns?.map((col,i) => {\n\n            col = Utils.extend({}, col);\n            col.$column = this.appService.getColumn(col.field);\n\n            col.tooltipValueGetter = col.tooltipValueGetter || this.tooltipValueGetter;\n            col.headerName = col.headerName || (col.$column?.label? this.intlService.formatMessage(col.$column?.label) : col.field);\n            col.headerTooltip = col.headerTooltip || col.headerName;\n            col.cellRenderer = col.cellRendererFramework ? undefined : col.cellRenderer || this.renderCell;\n            col.sortable = col.sortable || this.appService.isSortable(col.field);\n            const hidePref = this.prefs.get(\"ag-grid-hide-\"+col.field);\n            col.hide = hidePref === undefined? col.hide : hidePref;\n            col.width = col.width || this.defaultColumnWidth;\n\n            // How to filter the column\n            if(col.filter === undefined) {\n                switch(col.$column?.eType) {\n                    case EngineType.double:\n                    case EngineType.float:\n                    case EngineType.integer:\n                        col.filter = 'agNumberColumnFilter'; break;\n                    case EngineType.date:\n                    case EngineType.dates:\n                    case EngineType.dateTime:\n                    case EngineType.dateTimes:\n                        col.filter = 'agDateColumnFilter'; break;\n                    case EngineType.string:\n                    case EngineType.csv:\n                        col.filter = true; break;\n                }\n            }\n\n            if(i === 0 && this.displayCheckbox) {\n                // Note that header selection checkbox doesn't work with the infinite row model\n                col.checkboxSelection = true;\n            }\n\n            return col;\n        }) || [];\n\n        // Populate the columnsAction: for each column we toggle the \"hide\" property and persist that preference\n        this.columnsAction.children = this.colDefs.map(col => new Action({\n            name: col.field,\n            text: col.headerName,\n            selected: !col.hide,\n            action: (action, event) => {\n                action.selected = !action.selected;\n                this.gridColumnApi?.setColumnVisible(col.field!, action.selected);\n                if(action.selected) {\n                    this.prefs.delete(\"ag-grid-hide-\"+col.field);\n                }\n                else {\n                    this.prefs.set(\"ag-grid-hide-\"+col.field, true);\n                }\n                event.stopPropagation();\n            }\n        }));\n    }\n\n    /**\n     * Create the rows' datasource\n     */\n    createRows() {\n        if(this.gridApi && this.gridColumnApi && this.rowModelType === 'infinite') {\n            // Create a new datasource\n            this.datasource = this.makeDatasource();\n            // Apply to the grid\n            this.gridApi.setDatasource(this.datasource);\n            // The query that yielded this data may have active filters & sort: we want the grid to reflect this\n            this.updateFilterState(this.query || this.searchService.query);\n            this.updateSortState(this.query || this.searchService.query);\n        } else if (this.rowModelType === 'clientSide') {\n            this.rowData = this.results?.records || [];\n        }\n    }\n\n    /**\n     * For each column of the grid, look for an active filter in the query\n     * and create a filter model that the grid can understand.\n     * Finally, set the filter model via the grid API.\n     * @param query \n     */\n    updateFilterState(query: Query) {\n        let model = {};\n        for(let col of this.colDefs) {\n            const select = query.findSelect(\"grid-filter-\"+col.field);\n            if(col.field && select) {\n                if(col.filter === \"facet\") { // Sinequa facets\n                    model[col.field] = {facetActive: true}; // Lets us tell ag-grid that a custom filter is active this column\n                }\n                else { // AG Grid filters\n                    const filterType = col.filter ===\"agNumberColumnFilter\"? \"number\" : col.filter ===\"agDateColumnFilter\"? \"date\" : \"text\";\n                    model[col.field] = SqDatasource.exprToModel(filterType, col.field, select.expression);\n                }\n            }\n        }\n        this.gridApi?.setFilterModel(model);\n    }\n\n    /**\n     * If the query has a custom orderby clause, create\n     * a sort model that the grid can understand and apply\n     * that model via the grid column API.\n     * @param query \n     */\n    updateSortState(query: Query) {\n        const model: ApplyColumnStateParams = {};\n        if(query.orderBy) {\n            let [colId, sort] = query.orderBy.split(\" \");\n            colId = this.appService.getColumnAlias(this.appService.getColumn(colId));\n            model.state = [{colId, sort}];\n        }\n        else {\n            model.defaultState = {sort: null};\n        }\n        this.gridColumnApi?.applyColumnState(model);\n    }\n\n    /**\n     * Create the actions displayed in the toolbar\n     */\n    createActions() {\n        // Initialization of button actions\n        this.gridActions = [];\n        for(let action of this.toolbarActions) {\n            if(!Utils.isString(action)) {\n                this.gridActions.push(action);\n            }\n            else if(action === \"columnVisibility\") {\n                this.gridActions.push(this.columnsAction);\n            }\n            else if(action === \"gridReset\") {\n                this.gridActions.push(new Action({\n                    icon: \"fas fa-sync-alt fa-fw\",\n                    text: \"msg#grid.reset\",\n                    title: \"msg#grid.resetTitle\",\n                    action: () => this.resetState()\n                }));\n            }\n            else if(action === \"autosize\") {\n                this.gridActions.push(new Action({\n                    icon: \"fas fa-arrows-alt-h fa-fw\",\n                    text: \"msg#grid.autosize\",\n                    title: \"msg#grid.autosizeTitle\",\n                    action: () => this.autoResize()\n                }));\n            }\n            else if(action === \"copySelection\") {\n                this.gridActions.push(new Action({\n                    icon: \"fas fa-copy fa-fw\",\n                    text: \"msg#grid.copy\",\n                    title: \"msg#grid.copyTitle\",\n                    action: () => this.copyToClipboard()\n                }));\n            }\n            else if(action === \"downloadSelection\") {\n                this.gridActions.push(new Action({\n                    icon: \"fas fa-download fa-fw\",\n                    text: \"msg#grid.download\",\n                    title: \"msg#grid.downloadTitle\",\n                    action: () => this.downloadCsv()\n                }));\n            }\n            else if(action === \"formatContent\") {\n                this.gridActions.push(new Action({\n                    icon: this.formatContent? \"far fa-fw fa-check-square\" : \"far fa-fw fa-square\",\n                    text: \"msg#grid.formatData\",\n                    title: \"msg#grid.formatDataTitle\",\n                    action: action => this.toggleFormatContent(action)\n                }));\n            }\n        }\n    }\n\n    // Custom rendering functions\n\n    /**\n     * A function that returns a HTML string for each cell.\n     * The value in the cell is params.value and the column definition\n     * is params.colDef.\n     */\n    @Input()\n    renderCell: ICellRendererFunc = (params: any): HTMLElement |string => {\n        if(this.formatContent) {\n            return this.formatService.formatValue(params.value, params.colDef.$column);\n        }\n        else {\n            return this.formatService.formatRaw(params.value);\n        }\n    }\n\n    /**\n     * A function that returns a tooltip string for each cell's value\n     */\n    @Input()\n    tooltipValueGetter = (params: ITooltipParams) => {\n        return this.formatService.formatRaw(params.value);\n    }\n\n    /**\n     * A function that returns a string formatted for export for each cell's value\n     */\n    @Input()\n    exportValueGetter = (params: ProcessCellForExportParams) => {\n        return this.formatService.formatRaw(params.value);\n    }\n\n\n    /**\n     * Create a datasource object from the given results and query\n     */\n    makeDatasource() : IDatasource {\n        if(this.results) {\n            return new SqDatasource(this.results, this.query, this.colDefs, this.searchService, this.appService, this.facetService, this.selectionService);\n        }\n        return {getRows: () => []};\n    }\n\n\n    // User actions\n\n    /**\n     * Reset filtering, sorting, column width and order\n     */\n    resetState() {\n        if(!this.query) {\n            // In global search mode, the new query & results will update the filter model\n            this.datasource?.destroy?.();\n            delete this.searchService.query.orderBy;\n            if(this.searchService.query.select?.length) {\n                for(let i=this.searchService.query.select.length; i--; i>=0) {\n                    if(this.searchService.query.select[i].facet.startsWith(\"grid-filter-\")) {\n                        this.searchService.query.removeSelect(i);\n                    }\n                }\n            }\n            this.searchService.search();\n        }\n        else {\n            // clear filters\n            this.gridApi?.setFilterModel({});\n            // clear sort\n            this.gridColumnApi?.applyColumnState({\n                defaultState:{\n                    sort: null\n                }\n            })\n        }\n        // clear width, visiblity, order\n        this.gridColumnApi?.applyColumnState({\n            defaultState:{\n                width: this.defaultColumnWidth\n            },\n            state: this.columns.map(c => {\n                // Delete the visibility preference\n                this.prefs.delete(\"ag-grid-hide-\"+c.field, true);\n                // Update the visibility action\n                const visibilityAction = this.columnsAction.children?.find(a => a.name === c.field);\n                if(visibilityAction) {\n                    visibilityAction.selected = !c.hide;\n                }\n                return {\n                    colId: c.field, // Resets the ordering\n                    hide: !!c.hide // Resets the visibility\n                };\n            }),\n            applyOrder: true\n        });\n        // Sync to apply the new visibility preference\n        this.prefs.sync();\n    }\n\n    /**\n     * Returns a configuration for exporting the data as CSV.\n     */\n    getExportParams(): CsvExportParams {\n        const params: CsvExportParams = {\n            allColumns: true,\n            processCellCallback: this.exportValueGetter\n        };\n        if(this.gridApi?.getSelectedRows().length) {\n            params.onlySelected = true;\n        }\n        return params;\n    }\n\n    /**\n     * Copy the data to the clipboard\n     */\n    copyToClipboard() {\n        const data = this.gridApi?.getDataAsCsv(this.getExportParams());\n        if(data) {\n            this.uiService.copyToClipboard(data);\n        }\n    }\n    \n    /** Download the data as a CSV file */\n    downloadCsv() {\n        this.gridApi?.exportDataAsCsv(this.getExportParams());\n    }\n\n    /**\n     * Auto-resize the columns\n     */\n    autoResize() {\n        this.gridColumnApi?.autoSizeAllColumns();\n    }\n    \n    /**\n     * Called when the user toggles the \"format content\" checkbox\n     */\n    toggleFormatContent(action: Action) {\n        this.formatContent = !this.formatContent;\n        action.icon = this.formatContent? \"far fa-fw fa-check-square\" : \"far fa-fw fa-square\";\n        this.prefs.set(\"ag-grid-format-content\", this.formatContent);\n        this.gridApi?.refreshCells({force: true})\n    }\n\n    // AG-GRID events\n\n    /**\n     * Callback function called when the grid is initialized\n     */\n    onGridReady(event: GridReadyEvent) {\n        this.gridApi = event.api;\n        this.gridColumnApi = event.columnApi;\n        // Create the rows in case there are already results available\n        this.createRows();\n    }\n\n    /**\n     * Callback function called when data in the grid changes\n     */\n    onRowDataChanged(event: RowDataChangedEvent) {\n        \n    }\n\n    /**\n     * Callback function called when users double click on a cell\n     */\n    onCellDoubleClicked(event: CellDoubleClickedEvent) {\n        this.modalService.open(DataModalComponent, {\n            model: {\n                row: event.data,\n                column: event.colDef.headerName || event.colDef.field,\n                cell: event.value,\n                cccolumn: (event.colDef as Column).$column,\n                formatContent: this.formatContent\n            }\n        })\n    }\n\n    /**\n     * Callback function called when users select data in the grid\n     */\n    onSelectionChanged(event: SelectionChangedEvent) {\n        const newRows = this.gridApi?.getSelectedRows() as Record[] | undefined;\n        const oldRows = this.selectionService.getSelectedIds();\n        oldRows.forEach(id => {\n            const foundRow = newRows?.find(row => row.id === id);\n            if(!foundRow) {\n                this.selectionService.toggleSelectedRecords({id} as Record, \"ag-grid\");\n            }\n        });\n        newRows?.forEach(row => {\n            const foundId = oldRows.find(id => row.id === id);\n            if(!foundId) {\n                this.selectionService.toggleSelectedRecords(row, \"ag-grid\");\n            }\n        });\n    }\n\n    /**\n     * Callback triggered on every user key input. It is useful to capture\n     * the fact that onFilterChanged is about to be called after some\n     * user input.\n     * @param event \n     */\n     onFilterModified(event: FilterModifiedEvent) {\n        if(!this._filterInput) {\n            // Check that the model has actually changed, as the method can be called event it hasn't changed!\n            const oldModel = event.filterInstance.getModel();\n            const newModel = (event.filterInstance as any).getModelFromUi?.();\n            this._filterInput = !Utils.equals(oldModel, newModel);\n        }\n    }\n\n    /**\n     * Notify the datasource that filter have changed\n     * @param event \n     */\n    onFilterChanged(event: FilterChangedEvent) {\n        // The _filterInput flag allows us to only respond to actual user input and ignore programmatic changes\n        if(this._filterInput) {\n            this._filterInput = false;\n            (this.datasource as SqDatasource)?.filterChanged?.();\n        }\n    }\n\n    /**\n     * Notify the datasource that sort has changed\n     * @param event\n     */\n    onSortChanged(event: SortChangedEvent) {\n        (this.datasource as SqDatasource)?.sortChanged?.();\n    }\n\n    /**\n     * Update selection when new rows are inserted in the table\n     * @param event \n     */\n    onModelUpdated(event: ModelUpdatedEvent) {\n        this.gridApi?.forEachNode(node => {\n            if(node.data?.$selected && !node.isSelected()) {\n                node.setSelected(true, undefined, true);\n            }\n        });\n    }\n\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/CustomData.html":{"url":"interfaces/CustomData.html","title":"interface - CustomData","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  CustomData\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            network/providers/records-provider.ts\n        \n\n\n            \n                Description\n            \n            \n                Data structure returned by the optional parse() function of a structural edge\ntype. Contains the parsed values of a property that can be turned into one or\nmultiple nodes and edges.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            directed\n                                        \n                                \n                                \n                                        \n                                            displays\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            fieldValue\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            relations\n                                        \n                                \n                                \n                                        \n                                            values\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        directed\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        directed:     boolean[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     boolean[]\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        displays\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        displays:     string[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        fieldValue\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        fieldValue:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        relations\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        relations:     string[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string[]\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        values\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        values:     string[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Utils } from '@sinequa/core/base';\nimport { Record } from '@sinequa/core/web-services';\nimport { Action } from '@sinequa/components/action';\nimport { Node, NetworkDataset, NodeType, EdgeType, NetworkContext } from '../network-models';\nimport { BaseProvider } from './base-provider';\n\n/**\n * Extension of the Node interface, to include the Record object\n * from which the node is generated\n */\nexport interface RecordNode extends Node {\n    record: Record;\n}\n\n\n/**\n * An extension of the EdgeType interface to include properties specific to\n * structural edges (edge between a record and its metadata).\n * \n * About trigger/display: At the moment, the Record provider always adds ALL nodes and edges\n * to the dataset, but potentially with a visibility set to false. Some of the settings are\n * not compatible with each other, and some take precedence over the others:\n * - display=existingnodes takes precedence over other settings, as it is implemented as\n * a post-processing of the dataset (in onDatasetsMerged)\n * - trigger=onclick or manual take precedence over the other settings, as they set the\n * visibility to false by false, until the user performs an action\n * - trigger=oninsert is compatible with the other display settings\n */\nexport interface StructuralEdgeType extends EdgeType {\n    /** Name of the field in the record */\n    field: string;\n    /** count limits the number of values displayed and allows for pagination. Use 0 for unlimited values */\n    count?: number;\n    /** Defines when the edge should be displayed */\n    trigger: StructuralTriggerType;\n    /** showall: display all values from the field / paginate: display all value with pagination / existingnodes: only link to existing nodes / manual: only show if manual action (activated programmatically) */\n    display: StructuralDisplayType;\n    /** A function to parse metadata from a record node in a custom way */\n    parse?: (value: any, record: Record, type: StructuralEdgeType) => CustomData;\n}\n\nexport type StructuralTriggerType = \"oninsert\" | \"onclick\" | \"manual\";\nexport type StructuralDisplayType = \"all\" | \"paginate\" | \"existingnodes\" | ((node: Node, recordNode: RecordNode, index: number) => boolean);\n\n/**\n * Data structure returned by the optional parse() function of a structural edge\n * type. Contains the parsed values of a property that can be turned into one or\n * multiple nodes and edges.\n */\nexport interface CustomData {\n    values: string[]; // eg. LARRY PAGE, GOOGLE\n    displays: string[]; // eg. Larry Page, Google\n    relations?: string[]; // eg. Works At\n    directed?: boolean[]; // eg. true\n    fieldValue?: string; // A value on which to filter the data\n}\n\n/**\n * Tests whether the given edge type is a structural edge type\n * @param et an edge type\n */\nexport function isStructuralEdgeType(et: EdgeType): et is StructuralEdgeType {\n    return !!(et as StructuralEdgeType).field;\n}\n\n\n/**\n * A network provider generating nodes from records.\n * Additionally, the provider can generate the \"structural edges\" of that\n * node. Structural edges are edges between a record and the fields of\n * that record (eg. the wikipedia page of Microsoft is a record that probably\n * contains the fields \"Microsoft\" and \"Bill Gates\").\n */\nexport class RecordsProvider extends BaseProvider {\n\n    constructor(\n        public override name = \"Documents\",\n        protected nodeType: NodeType,\n        protected edgeTypes: StructuralEdgeType[],\n        protected records: Record[],\n        protected hideRecordNode = false\n    ){\n        super(name);\n    }\n\n    /**\n     * Clears the dataset and generates new record nodes\n     * @param records the list of records of this provider\n     */\n    protected updateDataset(records?: Record[]) {\n        this.dataset.clear();\n        if(!this.active || !records || records.length === 0) {\n            return; \n        }\n        this.addRecordNodes(records);\n    }\n    \n    // Record nodes\n\n    /**\n     * Generates the nodes for a list of records, including their structural\n     * edges, and adds them to the dataset.\n     * Returns the list of record nodes.\n     * @param records \n     */\n    protected addRecordNodes(records: Record[]): RecordNode[] {\n        return records.map(record => {\n            let node = this.dataset.getNode(this.getNodeId(this.nodeType, record.id));\n            if(!node) {\n                node = this.createNode(this.nodeType, record.id, record.title, !this.hideRecordNode, {record});\n                this.dataset.addNodes(node);\n                this.edgeTypes.forEach(type => {\n                    this.addStructuralEdges(node as RecordNode, type);\n                });\n            }\n            return node as RecordNode;\n        });\n    }\n\n    \n    // Structural edges\n\n    /**\n     * Generates the metadata nodes and structural edges from the given node,\n     * and merge them into the dataset.\n     * This function will automatically parse the metadata contained in the record,\n     * but it is possible to manage custom types of metadata by providing a\n     * custom parse() function via the structural edge type.\n     * @param node The record node\n     * @param type The edge type for which we want to create edges\n     */\n    protected addStructuralEdges(node: RecordNode, type: StructuralEdgeType) {\n\n        if(type.nodeTypes[0] !== this.nodeType){\n            throw new Error(`Inconsistent node type: '${type.nodeTypes[0].name}' instead of '${this.nodeType.name}'`);\n        }\n        \n        const recorddata = node.record[type.field];\n\n        if(recorddata === undefined){\n            return;\n        }\n\n        // Custom parse for mono or multi valued data\n        if(type.parse) {\n            if(Utils.isArray(recorddata)) {\n                recorddata.forEach((value,i) => { \n                    this.addCustomEdge(node, type, type.parse!(value, node.record, type));\n                });\n            }\n            else {\n                this.addCustomEdge(node, type, type.parse!(recorddata, node.record, type));\n            }\n        }\n        // Default handling for standard Sinequa Metadata\n        else {\n            const data = new NetworkDataset();\n            data.addNodes(node);\n    \n            // sourcestr\n            if(Utils.isString(recorddata)) {\n                this.addStructuralEdge(data, node, type, recorddata, recorddata, 0);\n            }\n            else if(Utils.isArray(recorddata)) {\n                recorddata.forEach((value,i) => {\n                    // sourcecsv\n                    if(Utils.isString(value)) {\n                        this.addStructuralEdge(data, node, type, value, value, i);\n                    }\n                    // entity\n                    else if(value[\"value\"]) {\n                        this.addStructuralEdge(data, node, type, value[\"value\"], value[\"display\"] || value[\"value\"], i);\n                    }\n                });\n            }\n    \n            this.dataset.merge(data);\n        }\n    }\n\n    /**\n     * Add a structural edge to a record node and adds that edge\n     * (and corresponding metadata node) to the given dataset.\n     * @param dataset The target dataset\n     * @param recordNode The record node\n     * @param type The edge type of the structural edge\n     * @param value The \"value\" property of the metadata node\n     * @param display The \"display\" property of the metadata node\n     * @param index The index of the metadata within the record, which may influence its visibility when using display=paginate\n     */\n    protected addStructuralEdge(dataset: NetworkDataset, recordNode: RecordNode, type: StructuralEdgeType, value: string, display: string, index: number) {\n        // Create the metadata node\n        const node = this.createNode(type.nodeTypes[1], value, display, true);\n        // Sets its visibility\n        node.visible = type.trigger === \"oninsert\" && this.isEdgeVisible(type, node, recordNode, index);\n        if(recordNode.id !== node.id){ // Special case of hybrid nodes, where the recordNode might contain itself...!\n            if(!dataset.hasNode(node.id)) { // Duplicate nodes/edges are possible when the same node type is present in multiple fields of a record (eg. \"email\" in msgfrom and msgto)\n                dataset.addNodes(node);\n            }\n            const edge = this.createEdge(type, recordNode, node, value, node.visible, {record: recordNode.record});\n            if(!dataset.hasEdge(edge.id)) {\n                dataset.addEdges(edge);\n            }\n        }\n    }\n\n    /**\n     * Add a custom structural edge to a record node and merges that edge\n     * (and corresponding metadata node) into the global dataset.\n     * @param recordNode The record node\n     * @param type The edge type of the structural edge\n     * @param data A CustomData object containing the properties of the metadata nodes we want to created\n     */\n    protected addCustomEdge(recordNode: RecordNode, type: StructuralEdgeType, data: CustomData) {\n        if(type.nodeTypes.length !== data.values.length + 1) {\n            throw new Error(`Wrong number of values for this custom edge ${type.nodeTypes.length}, ${data.values.length}`);\n        }\n        // Create a dataset only for this data, to avoid duplicate conflicts\n        const dataset = new NetworkDataset();\n        dataset.addNodes(recordNode);\n        // For each value contained in \"data\", create a node, and edges in between them (in addition to the edges between the record and each metadata node)\n        let lastNode: Node;\n        for(let i=0; i 0){\n                const relation = data.relations? data.relations[i-1] : undefined;\n                const directed = data.directed? data.directed[i-1] : false;\n                dataset.addEdges(this.createEdge(type, lastNode!, node, data.fieldValue, true, {}, 1, directed, relation));\n            }\n            lastNode = node;\n        }\n        this.dataset.merge(dataset);\n    }\n\n    /**\n     * Returns the visibility of a structural edge, depending on the type.display property\n     * @param type The structural edge type\n     * @param node The metadata node of this edge\n     * @param recordNode The record node of this edge\n     * @param index The index of the metadata in the list of metadata of the record\n     */\n    protected isEdgeVisible(type: StructuralEdgeType, node: Node, recordNode: RecordNode, index: number): boolean {\n        if(type.display === \"all\") {\n            return true;\n        }\n        else if(type.display === \"existingnodes\") {\n            return false;\n        }\n        else if(type.display === \"paginate\") {\n            return index  node.type === this.nodeType)\n            .forEach(node => {\n                dataset.getAdjacentEdges(node.id)\n                    .filter(edge => (edge.type as StructuralEdgeType).display === 'existingnodes')\n                    .forEach(edge => {\n                        const neighbor = dataset.getNode(node.id === edge.to ? edge.from : edge.to);\n                        if(!neighbor) {\n                            throw new Error(`Missing node from edge ${edge.id}`);\n                        }\n                        const neighborsneighbors = dataset.getAdjacentEdges(neighbor.id);\n                        if(neighborsneighbors.length > 1) {\n                            neighbor.visible = true;\n                            edge.visible = true;\n                        }\n                    });\n            });\n    }\n\n    /**\n     * Adjust visibility of nodes and edges, for structural edges with\n     * type.trigger = onclick. These nodes will only be shown once their\n     * record node is clicked on.\n     * @param node A node that was clicked\n     */\n    override onNodeClicked(node?: Node) {\n        if(this.active && node && node.type === this.nodeType) { // Note: we cannot test the provider property, since this node might have been merged with one from a different provider. However the node type should be a unique instance\n            let update = false;\n            this.dataset.getAdjacentEdges(node.id)\n                .filter(edge => edge.type['trigger'] === 'onclick')\n                .forEach(edge => {\n                    const neighbor = this.dataset.getNode(node.id === edge.to ? edge.from : edge.to);\n                    if(!neighbor) {\n                        throw new Error(`Missing node from edge ${edge.id}`);\n                    }\n                    if(!neighbor.visible || !edge.visible) {\n                        edge.visible = true;\n                        neighbor.visible = true;\n                        update = true;\n                    }\n                    // TODO \"propagate\" visibility (ie. if 2 nodes are visible but an edge in between is invisible, make it visible)\n                });\n            if(update) {\n                this.provider.next(this.dataset);\n            }\n        }\n    }\n\n    override getProviderActions(): Action[] {\n        return super.getProviderActions();\n    }\n\n    /**\n     * Creates actions for expanding and/or collapsing a record node that was clicked.\n     * expanding and collapsing will act on the visibility of the structural edges\n     * attached to this node.\n     * Both actions might be displayed at the same time, if the node is in an intermediate\n     * state.\n     * @param node \n     */\n    override getNodeActions(node: Node): Action[] {\n        const actions = super.getNodeActions(node);\n        \n        // Actions for exanding / collapsing a record node\n        if(this.active && node.type === this.nodeType && this.edgeTypes.length > 0) {\n            let hasExpandedEdge = false;\n            let hasCollapsedEdge = false;\n            this.dataset.getAdjacentEdges(node.id).forEach(e => {\n                hasCollapsedEdge = hasCollapsedEdge || !e.visible;\n                hasExpandedEdge = hasExpandedEdge || e.visible;\n            });\n\n            if(hasCollapsedEdge) {\n                actions.push(new Action({\n                    icon: \"fas fa-expand-arrows-alt\",\n                    title: \"msg#network.actions.expandMeta\",\n                    action: () => {\n                        let update = false;\n                        this.dataset.getAdjacentEdges(node.id)\n                            .forEach(edge => {\n                                const neighbor = this.dataset.getNode(node.id === edge.to ? edge.from : edge.to);\n                                if(!neighbor) {\n                                    throw new Error(`Missing node from edge ${edge.id}`);\n                                }\n                                if(!neighbor.visible || !edge.visible) {\n                                    edge.visible = true;\n                                    neighbor.visible = true;\n                                    update = true;\n                                }\n                                // TODO \"propagate\" visibility (ie. if 2 nodes are visible but an edge in between is invisible, make it visible)\n                            });\n                        if(update) {\n                            this.provider.next(this.dataset);\n                        }\n                    }\n                }));\n            }\n            \n            if(hasExpandedEdge) {\n                actions.push(new Action({\n                    icon: \"fas fa-compress-arrows-alt\",\n                    title: \"msg#network.actions.collapseMeta\",\n                    action: () => {\n                        let update = false;\n                        this.dataset.getAdjacentEdges(node.id)\n                            .forEach(edge => {\n                                const neighbor = this.dataset.getNode(node.id === edge.to ? edge.from : edge.to);\n                                if(!neighbor) {\n                                    throw new Error(`Missing node from edge ${edge.id}`);\n                                }\n                                if((neighbor.visible || edge.visible) && !(neighbor as RecordNode).record) { // Prevent collapsing links between 2 record nodes (alternatively, we could count the number of neighbors of the neighbors, and close only the isoltated ones)\n                                    edge.visible = false;\n                                    neighbor.visible = false;\n                                    update = true;\n                                }\n                            });\n                        if(update) {\n                            this.provider.next(this.dataset);\n                        }\n                    }\n                }));\n            }\n        }\n        return actions;\n    }\n\n}\n    \n    \n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/DataModalComponent.html":{"url":"components/DataModalComponent.html","title":"component - DataModalComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  DataModalComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    ag-grid/data-modal.component.ts\n\n\n\n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                sq-data-modal\n            \n\n\n            \n                styles\n                \npre {\n    overflow: auto;\n    font-size: 12px;\n    max-height: 50vh;\n}\n    \n            \n\n\n            \n                templateUrl\n                ./data-modal.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                copyAction\n                            \n                            \n                                data\n                            \n                            \n                                formatContent\n                            \n                            \n                                    Public\n                                formatService\n                            \n                            \n                                    Public\n                                model\n                            \n                            \n                                    Public\n                                uiService\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                ngOnInit\n                            \n                            \n                                updateData\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(model: DataModel, uiService: UIService, formatService: FormatService)\n                    \n                \n                        \n                            \n                                Defined in ag-grid/data-modal.component.ts:32\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        model\n                                                  \n                                                        \n                                                                        DataModel\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        uiService\n                                                  \n                                                        \n                                                                    UIService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        formatService\n                                                  \n                                                        \n                                                                    FormatService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnInit\n                        \n                    \n                \n            \n            \n                \nngOnInit()\n                \n            \n\n\n            \n                \n                    Defined in ag-grid/data-modal.component.ts:42\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        updateData\n                        \n                    \n                \n            \n            \n                \nupdateData()\n                \n            \n\n\n            \n                \n                    Defined in ag-grid/data-modal.component.ts:53\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        copyAction\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Action\n\n                    \n                \n                    \n                        \n                                Defined in ag-grid/data-modal.component.ts:30\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        data\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in ag-grid/data-modal.component.ts:32\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        formatContent\n                        \n                    \n                \n            \n                \n                    \n                        Default value : true\n                    \n                \n                    \n                        \n                                Defined in ag-grid/data-modal.component.ts:31\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        formatService\n                        \n                    \n                \n            \n                \n                    \n                        Type :     FormatService\n\n                    \n                \n                    \n                        \n                                Defined in ag-grid/data-modal.component.ts:37\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        model\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DataModel\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Inject(MODAL_MODEL)\n                        \n                    \n                \n                    \n                        \n                                Defined in ag-grid/data-modal.component.ts:35\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        uiService\n                        \n                    \n                \n            \n                \n                    \n                        Type :     UIService\n\n                    \n                \n                    \n                        \n                                Defined in ag-grid/data-modal.component.ts:36\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n    \n        import { Component, Inject } from \"@angular/core\";\nimport { Action } from \"@sinequa/components/action\";\nimport { UIService } from \"@sinequa/components/utils\";\nimport { FormatService, ValueItem } from \"@sinequa/core/app-utils\";\nimport { FieldValue } from \"@sinequa/core/base\";\nimport { MODAL_MODEL } from \"@sinequa/core/modal\";\nimport { CCColumn } from \"@sinequa/core/web-services\";\n\ndeclare type DataModel = {\n    cell: ValueItem | FieldValue,\n    row: any,\n    column: string,\n    cccolumn: CCColumn,\n    formatContent: boolean\n};\n\n@Component({\n    selector: 'sq-data-modal',\n    templateUrl: './data-modal.component.html',\n    styles: [`\npre {\n    overflow: auto;\n    font-size: 12px;\n    max-height: 50vh;\n}\n    `]\n})\nexport class DataModalComponent {\n\n    copyAction: Action;\n    formatContent = true;\n    data: string;\n\n    constructor(\n        @Inject(MODAL_MODEL) public model: DataModel,\n        public uiService: UIService,\n        public formatService: FormatService\n    ){\n        this.formatContent = model.formatContent;\n    }\n\n    ngOnInit() {\n\n        this.copyAction = new Action({\n            icon: \"far fa-copy\",\n            title: \"Copy to Clipboard\",\n            action: () => this.uiService.copyToClipboard(this.data)\n        });\n\n        this.updateData();\n    }\n\n    updateData() {\n        if(this.formatContent) {\n            this.data = this.formatService.formatValue(this.model.cell, this.model.cccolumn);\n        }\n        else {\n            this.data = this.formatService.formatRaw(this.model.cell);\n        }\n    }\n}\n    \n\n    \n        \n    \n        \n        {{'msg#grid.formatData' | sqMessage}}\n    \n\n    {{data}}\n\n    \n    \n\n\n    \n\n    \n            \npre {\n    overflow: auto;\n    font-size: 12px;\n    max-height: 50vh;\n}\n    \n\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '                    {{\\'msg#grid.formatData\\' | sqMessage}}        {{data}}        '\n    var COMPONENTS = [{'name': 'AgGridViewComponent', 'selector': 'sq-ag-grid-view'},{'name': 'BsEdgeInfoCard', 'selector': 'sq-edge-info-card'},{'name': 'BsFacetDate', 'selector': 'sq-facet-date'},{'name': 'BsFacetHeatmapComponent', 'selector': 'sq-facet-heatmap'},{'name': 'BsFacetTimelineComponent', 'selector': 'sq-facet-timeline'},{'name': 'BsHeatmapComponent', 'selector': 'sq-heatmap'},{'name': 'BsNodeInfoCard', 'selector': 'sq-node-info-card'},{'name': 'BsResultsHeatmapView', 'selector': 'sq-results-heatmap-view'},{'name': 'BsTimelineComponent', 'selector': 'sq-timeline'},{'name': 'BsTooltipComponent', 'selector': 'sq-tooltip'},{'name': 'DataModalComponent', 'selector': 'sq-data-modal'},{'name': 'FacetNgxChart', 'selector': 'sq-facet-ngx-chart'},{'name': 'FacetWrapperComponent', 'selector': 'facet-wrapper'},{'name': 'FusionChart', 'selector': 'sq-fusion-chart'},{'name': 'MapComponent', 'selector': 'sq-googlemaps'},{'name': 'MoneyCloudComponent', 'selector': 'sq-money-cloud'},{'name': 'MoneyTimelineComponent', 'selector': 'sq-money-timeline'},{'name': 'NetworkComponent', 'selector': 'sq-network'},{'name': 'NgxChart', 'selector': 'sq-ngx-chart'},{'name': 'ResultTimeline', 'selector': 'sq-result-timeline'},{'name': 'TimelineLegendComponent', 'selector': 'sq-timeline-legend'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'DataModalComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/DynamicEdge.html":{"url":"interfaces/DynamicEdge.html","title":"interface - DynamicEdge","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  DynamicEdge\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            network/providers/dynamic-edge-provider.ts\n        \n\n\n            \n                Description\n            \n            \n                Extension of the Edge interface, to include the record property\nfrom which this edge is generated\n\n            \n\n            \n                Extends\n            \n            \n                        Edge\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            record\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        record\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        record:     Record\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Record\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Query } from '@sinequa/core/app-utils';\nimport { Results, Record } from '@sinequa/core/web-services';\nimport { EdgeType, Node, Edge, NetworkProvider, NetworkDataset } from '../network-models';\nimport { RecordsProvider, StructuralEdgeType, RecordNode } from './records-provider';\nimport { combineLatest } from 'rxjs';\nimport { Action } from '@sinequa/components/action';\n\n/**\n * Extension of the Edge interface, to include the record property\n * from which this edge is generated\n */\nexport interface DynamicEdge extends Edge {\n    record: Record;\n}\n\n/**\n * Extension of the EdgeType interface, to include properties specific\n * to dynamic edges, in particular a function that returns a Query object\n * for a given source node.\n */\nexport interface DynamicEdgeType extends EdgeType {\n    /** Returns a query object to execute to obtain dynamic edges from a node */\n    getQuery: (node: Node, type: DynamicEdgeType) => Query | undefined;\n    /** count limits the number of records returned by the query service and allows for pagination */\n    count?: number;\n    /** Defines when the dynamic edge should be executed. Warning: oninsert may generate multiple simultaneous queries */\n    trigger: \"oninsert\" | \"onclick\" | \"manual\";\n}\n\n/**\n * Tests whether a given edge type is a DynamicEdgeType\n * @param et an edge type\n */\nexport function isDynamicEdgeType(et: EdgeType): et is DynamicEdgeType {\n    return !!(et as DynamicEdgeType).getQuery;\n}\n\n\n/**\n * A extension of the RecordsProvider, where records are not directly\n * provided, but are instead fetched from the server via a Query specific\n * to a source node.\n * Concretely, the dynamic edge provider will attach one (or more) record nodes\n * (and their structural edges) to one (or more) source nodes, whose type is\n * specified in the DynamicEdgeType.\n * Dynamic edges can be attached right when the source nodes are inserted (oninsert),\n * or when a user clicks on a source node (onclick) or when a user clicks on an\n * action button displayed when a source node is clicked.\n * Note that the \"source node\" have to come from different providers, so it is\n * necessary to listen to these providers and update the data generated by this\n * provider accordingly.\n */\nexport class DynamicEdgeProvider extends RecordsProvider {\n\n    /** List of the source nodes that have been already processed via clicks or actions */\n    protected processedNodes: string[] = [];\n    /** to avoid fetching the same data multiple times, we store the record objects fetched from the server in this cache */\n    protected nodeCache = new Map();\n\n    constructor(\n        public override name: string,\n        protected edgeType: DynamicEdgeType,\n        protected secondaryEdgeTypes: StructuralEdgeType[],\n        protected permanent: boolean,\n        protected sourceProviders: NetworkProvider[]\n    ){\n        super(name, edgeType.nodeTypes[1], secondaryEdgeTypes, [], false);\n\n        combineLatest(sourceProviders.map(p => p.getProvider())).subscribe(dataset => {\n            if(this.active) {\n                // Merge the nodes from all datasets into a map\n                const map = new Map();\n                dataset.forEach(dataset => {\n                    dataset.getNodes().forEach(node => {\n                        if(node.visible && node.type === this.edgeType.nodeTypes[0]) {\n                            map.set(node.id, node);\n                        }\n                    });\n                });\n                // Update the dataset of dynamic edges\n                this.updateDynamicDataset(Array.from(map.values()));\n            }\n        });\n    }\n    \n    /**\n     * Rebuilds the dataset of this provider, given a list of source nodes to process.\n     * @param sourceNodes A list of source node to process\n     */\n    protected updateDynamicDataset(sourceNodes: Node[]) {\n\n        // We rebuild the dataset from scratch, in case some source nodes were removed\n        this.dataset = new NetworkDataset();\n\n        // If oninsert, we want to process all the source nodes. If not, we want to process the nodes in the processedNodes list\n        if(this.edgeType.trigger !== \"oninsert\") {\n            this.processedNodes = this.processedNodes.filter(id => !!sourceNodes.find(node => node.id === id)); // We want to \"forget\" the nodes that are not in the source anymore\n            sourceNodes = sourceNodes.filter(node => this.processedNodes.indexOf(node.id) !== -1); // We want to process only the nodes currently in the processed list\n        }\n\n        // For each source, we get its query\n        const queries = sourceNodes.map(node => this.nodeCache.has(node.id)? undefined : this.edgeType.getQuery(node, this.edgeType));\n        const _queries = queries.filter(q => !!q) as Query[];\n        // If there are queries, we process them asynchronously\n        if(_queries.length > 0) {\n            this.context.searchService.getMultipleResults(_queries, undefined).subscribe(res => {\n                this.addDynamicEdges(sourceNodes, res.results, queries);\n            });\n        }\n        // If not, we process them synchronously\n        else {\n            this.addDynamicEdges(sourceNodes, [], queries);\n        }\n    \n    }\n\n    /**\n     * Add dynamic edges to a list of source nodes, given a results set\n     * for each of these nodes (either directly provided or stored in the cache).\n     * @param sourceNodes The source nodes\n     * @param res The list of results sets\n     * @param queries The list of queries from which we obtained the results\n     */\n    protected addDynamicEdges(sourceNodes: Node[], res: Results[], queries: (Query|undefined)[]){\n        let j = 0;\n        // For each source node\n        for(let i = 0; i this.createEdge(this.edgeType, node, rNode, undefined, node.visible, {record: rNode.record}) as DynamicEdge);\n    }\n\n    /**\n     * Attach dynamic edges to a given node, either synchronously, if the results set\n     * is available in the cache, or asynchronously, by fetching the data from the server.\n     * @param node The node to process\n     */\n    protected processNode(node: Node) {\n        const query = this.edgeType.getQuery(node, this.edgeType); // Get the search query for this node\n        if(query){\n            if(this.nodeCache.has(node.id)) {\n                if(!this.permanent) {\n                    this.dataset.clear(); // Remove data from previously clicked node\n                    this.processedNodes.splice(0); // Remove the processed nodes\n                }\n                this.processedNodes.push(node.id);\n                this.addDynamicEdges([node], [], [query]); // Insert dynamic nodes and edges for this clicked node\n            }\n            else {\n                this.context.searchService.getResults(query, undefined, {searchInactive: true})\n                    .subscribe(results => {\n                        if(!this.permanent) {\n                            this.dataset.clear(); // Remove data from previously clicked node\n                            this.processedNodes.splice(0); // Remove the processed nodes\n                        }\n                        this.processedNodes.push(node.id);\n                        this.addDynamicEdges([node], [results], [query]); // Insert dynamic nodes and edges for this clicked node\n                    });\n            }\n        }\n    }\n\n\n    // Network provider interface\n\n    /**\n     * Process a clicked source node, if the trigger of the edge type is \"onclick\"\n     * @param node The clicked node\n     */\n    override onNodeClicked(node?: Node) {\n        super.onNodeClicked(node);\n        if(this.active && this.edgeType.trigger === \"onclick\" && node && node.type === this.edgeType.nodeTypes[0] && !this.dataset.hasNode(node.id)) {\n            this.processNode(node);\n        }\n    }\n    \n    /**\n     * Returns an Action allowing to process a node, if the trigger of the edge type\n     * is \"manual\".\n     * @param node The clicked node\n     */\n    override getNodeActions(node: Node): Action[] {\n        const actions = super.getNodeActions(node);\n        if(this.active && this.edgeType.trigger === \"manual\" && node && node.type === this.edgeType.nodeTypes[0] && !this.dataset.hasNode(node.id)) {            \n            actions.push(new Action({\n                icon: \"fas fa-expand-arrows-alt\",\n                title: this.context.intlService.formatMessage(\"msg#network.actions.expandNode\", {label: node.label}),\n                action: () => {\n                    this.processNode(node);\n                }\n            }));            \n        }\n        return actions;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/DynamicEdgeProvider.html":{"url":"classes/DynamicEdgeProvider.html","title":"class - DynamicEdgeProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  DynamicEdgeProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            network/providers/dynamic-edge-provider.ts\n        \n\n\n            \n                Description\n            \n            \n                A extension of the RecordsProvider, where records are not directly\nprovided, but are instead fetched from the server via a Query specific\nto a source node.\nConcretely, the dynamic edge provider will attach one (or more) record nodes\n(and their structural edges) to one (or more) source nodes, whose type is\nspecified in the DynamicEdgeType.\nDynamic edges can be attached right when the source nodes are inserted (oninsert),\nor when a user clicks on a source node (onclick) or when a user clicks on an\naction button displayed when a source node is clicked.\nNote that the \"source node\" have to come from different providers, so it is\nnecessary to listen to these providers and update the data generated by this\nprovider accordingly.\n\n            \n\n            \n                Extends\n            \n            \n                        RecordsProvider\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    \n                                name\n                            \n                            \n                                    Public\n                                    Readonly\n                                activateAction\n                            \n                            \n                                    Public\n                                active\n                            \n                            \n                                    Public\n                                context\n                            \n                            \n                                    Public\n                                dataset\n                            \n                            \n                                    Public\n                                    Readonly\n                                EDGESEPARATOR\n                            \n                            \n                                    Public\n                                    Readonly\n                                resetAction\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                getNodeActions\n                            \n                            \n                                    \n                                onNodeClicked\n                            \n                            \n                                    \n                                getData\n                            \n                            \n                                    \n                                getProviderActions\n                            \n                            \n                                    \n                                onDatasetsMerged\n                            \n                            \n                                getEdgeActions\n                            \n                            \n                                getProvider\n                            \n                            \n                                onDestroy\n                            \n                            \n                                onEdgeClicked\n                            \n                            \n                                onNodesInserted\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(name: string, edgeType: DynamicEdgeType, secondaryEdgeTypes: StructuralEdgeType[], permanent: boolean, sourceProviders: NetworkProvider[])\n                    \n                \n                        \n                            \n                                Defined in network/providers/dynamic-edge-provider.ts:58\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        name\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        edgeType\n                                                  \n                                                        \n                                                                        DynamicEdgeType\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        secondaryEdgeTypes\n                                                  \n                                                        \n                                                                    StructuralEdgeType[]\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        permanent\n                                                  \n                                                        \n                                                                        boolean\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        sourceProviders\n                                                  \n                                                        \n                                                                        NetworkProvider[]\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                        \n                            \n                                Inherited from         BaseProvider\n\n                            \n                        \n                    \n                        \n                                Defined in         BaseProvider:61\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        activateAction\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Action\n\n                    \n                \n                        \n                            \n                                Inherited from         BaseProvider\n\n                            \n                        \n                    \n                        \n                                Defined in         BaseProvider:21\n\n                        \n                    \n\n            \n                \n                    Action to turn the provider on or off\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        active\n                        \n                    \n                \n            \n                \n                    \n                        Default value : true\n                    \n                \n                        \n                            \n                                Inherited from         BaseProvider\n\n                            \n                        \n                    \n                        \n                                Defined in         BaseProvider:16\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        context\n                        \n                    \n                \n            \n                \n                    \n                        Type :         NetworkContext\n\n                    \n                \n                        \n                            \n                                Inherited from         BaseProvider\n\n                            \n                        \n                    \n                        \n                                Defined in         BaseProvider:25\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        dataset\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new NetworkDataset()\n                    \n                \n                        \n                            \n                                Inherited from         BaseProvider\n\n                            \n                        \n                    \n                        \n                                Defined in         BaseProvider:15\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        EDGESEPARATOR\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : \"~~~EDGE~~~\"\n                    \n                \n                        \n                            \n                                Inherited from         BaseProvider\n\n                            \n                        \n                    \n                        \n                                Defined in         BaseProvider:18\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        resetAction\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Action\n\n                    \n                \n                        \n                            \n                                Inherited from         BaseProvider\n\n                            \n                        \n                    \n                        \n                                Defined in         BaseProvider:23\n\n                        \n                    \n\n            \n                \n                    Action to reset the provider\n\n                \n            \n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        getNodeActions\n                        \n                    \n                \n            \n            \n                \n                    \n                    getNodeActions(node: Node)\n                \n            \n\n\n            \n                \n                    Inherited from         BaseProvider\n\n                \n            \n            \n                \n                        Defined in         BaseProvider:202\n\n                \n            \n\n\n            \n                \n                    Returns an Action allowing to process a node, if the trigger of the edge type\nis \"manual\".\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    node\n                                    \n                                                Node\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The clicked node\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Action[]\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        onNodeClicked\n                        \n                    \n                \n            \n            \n                \n                    \n                    onNodeClicked(node?: Node)\n                \n            \n\n\n            \n                \n                    Inherited from         BaseProvider\n\n                \n            \n            \n                \n                        Defined in         BaseProvider:190\n\n                \n            \n\n\n            \n                \n                    Process a clicked source node, if the trigger of the edge type is \"onclick\"\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    node\n                                    \n                                                Node\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        The clicked node\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        getData\n                        \n                    \n                \n            \n            \n                \n                    \n                    getData(context: NetworkContext)\n                \n            \n\n\n            \n                \n                    Inherited from         BaseProvider\n\n                \n            \n            \n                \n                        Defined in         BaseProvider:265\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                                NetworkContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        getProviderActions\n                        \n                    \n                \n            \n            \n                \n                    \n                    getProviderActions()\n                \n            \n\n\n            \n                \n                    Inherited from         BaseProvider\n\n                \n            \n            \n                \n                        Defined in         BaseProvider:328\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     Action[]\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        onDatasetsMerged\n                        \n                    \n                \n            \n            \n                \n                    \n                    onDatasetsMerged(dataset: NetworkDataset)\n                \n            \n\n\n            \n                \n                    Inherited from         BaseProvider\n\n                \n            \n            \n                \n                        Defined in         BaseProvider:278\n\n                \n            \n\n\n            \n                \n                    This function adjusts the visibility of nodes for the visibility\ntype \"existingnode\", so that nodes with only one neighbor (post-merge)\nare collapsed.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    dataset\n                                    \n                                                NetworkDataset\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The dataset resulting of the merge of all the datasets\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getEdgeActions\n                        \n                    \n                \n            \n            \n                \ngetEdgeActions(edge: Edge)\n                \n            \n\n\n            \n                \n                    Inherited from         BaseProvider\n\n                \n            \n            \n                \n                        Defined in         BaseProvider:211\n\n                \n            \n\n\n            \n                \n                    By default the base provider includes an action to filter the search if a clicked\nedge has a \"type.field\" property and a \"fieldValue\" (alternatively, an action\nis created if the 2 adjacent nodes can be filtered, ie they both have a \"field\"\nproperty)\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    edge\n                                    \n                                                Edge\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The clicked edge\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Action[]\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getProvider\n                        \n                    \n                \n            \n            \n                \ngetProvider()\n                \n            \n\n\n            \n                \n                    Inherited from         BaseProvider\n\n                \n            \n            \n                \n                        Defined in         BaseProvider:151\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         Subject\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onDestroy\n                        \n                    \n                \n            \n            \n                \nonDestroy()\n                \n            \n\n\n            \n                \n                    Inherited from         BaseProvider\n\n                \n            \n            \n                \n                        Defined in         BaseProvider:245\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onEdgeClicked\n                        \n                    \n                \n            \n            \n                \nonEdgeClicked(edge: Edge | undefined)\n                \n            \n\n\n            \n                \n                    Inherited from         BaseProvider\n\n                \n            \n            \n                \n                        Defined in         BaseProvider:171\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    edge\n                                    \n                                                Edge | undefined\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onNodesInserted\n                        \n                    \n                \n            \n            \n                \nonNodesInserted(nodes: Node[])\n                \n            \n\n\n            \n                \n                    Inherited from         BaseProvider\n\n                \n            \n            \n                \n                        Defined in         BaseProvider:163\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    nodes\n                                    \n                                                Node[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Query } from '@sinequa/core/app-utils';\nimport { Results, Record } from '@sinequa/core/web-services';\nimport { EdgeType, Node, Edge, NetworkProvider, NetworkDataset } from '../network-models';\nimport { RecordsProvider, StructuralEdgeType, RecordNode } from './records-provider';\nimport { combineLatest } from 'rxjs';\nimport { Action } from '@sinequa/components/action';\n\n/**\n * Extension of the Edge interface, to include the record property\n * from which this edge is generated\n */\nexport interface DynamicEdge extends Edge {\n    record: Record;\n}\n\n/**\n * Extension of the EdgeType interface, to include properties specific\n * to dynamic edges, in particular a function that returns a Query object\n * for a given source node.\n */\nexport interface DynamicEdgeType extends EdgeType {\n    /** Returns a query object to execute to obtain dynamic edges from a node */\n    getQuery: (node: Node, type: DynamicEdgeType) => Query | undefined;\n    /** count limits the number of records returned by the query service and allows for pagination */\n    count?: number;\n    /** Defines when the dynamic edge should be executed. Warning: oninsert may generate multiple simultaneous queries */\n    trigger: \"oninsert\" | \"onclick\" | \"manual\";\n}\n\n/**\n * Tests whether a given edge type is a DynamicEdgeType\n * @param et an edge type\n */\nexport function isDynamicEdgeType(et: EdgeType): et is DynamicEdgeType {\n    return !!(et as DynamicEdgeType).getQuery;\n}\n\n\n/**\n * A extension of the RecordsProvider, where records are not directly\n * provided, but are instead fetched from the server via a Query specific\n * to a source node.\n * Concretely, the dynamic edge provider will attach one (or more) record nodes\n * (and their structural edges) to one (or more) source nodes, whose type is\n * specified in the DynamicEdgeType.\n * Dynamic edges can be attached right when the source nodes are inserted (oninsert),\n * or when a user clicks on a source node (onclick) or when a user clicks on an\n * action button displayed when a source node is clicked.\n * Note that the \"source node\" have to come from different providers, so it is\n * necessary to listen to these providers and update the data generated by this\n * provider accordingly.\n */\nexport class DynamicEdgeProvider extends RecordsProvider {\n\n    /** List of the source nodes that have been already processed via clicks or actions */\n    protected processedNodes: string[] = [];\n    /** to avoid fetching the same data multiple times, we store the record objects fetched from the server in this cache */\n    protected nodeCache = new Map();\n\n    constructor(\n        public override name: string,\n        protected edgeType: DynamicEdgeType,\n        protected secondaryEdgeTypes: StructuralEdgeType[],\n        protected permanent: boolean,\n        protected sourceProviders: NetworkProvider[]\n    ){\n        super(name, edgeType.nodeTypes[1], secondaryEdgeTypes, [], false);\n\n        combineLatest(sourceProviders.map(p => p.getProvider())).subscribe(dataset => {\n            if(this.active) {\n                // Merge the nodes from all datasets into a map\n                const map = new Map();\n                dataset.forEach(dataset => {\n                    dataset.getNodes().forEach(node => {\n                        if(node.visible && node.type === this.edgeType.nodeTypes[0]) {\n                            map.set(node.id, node);\n                        }\n                    });\n                });\n                // Update the dataset of dynamic edges\n                this.updateDynamicDataset(Array.from(map.values()));\n            }\n        });\n    }\n    \n    /**\n     * Rebuilds the dataset of this provider, given a list of source nodes to process.\n     * @param sourceNodes A list of source node to process\n     */\n    protected updateDynamicDataset(sourceNodes: Node[]) {\n\n        // We rebuild the dataset from scratch, in case some source nodes were removed\n        this.dataset = new NetworkDataset();\n\n        // If oninsert, we want to process all the source nodes. If not, we want to process the nodes in the processedNodes list\n        if(this.edgeType.trigger !== \"oninsert\") {\n            this.processedNodes = this.processedNodes.filter(id => !!sourceNodes.find(node => node.id === id)); // We want to \"forget\" the nodes that are not in the source anymore\n            sourceNodes = sourceNodes.filter(node => this.processedNodes.indexOf(node.id) !== -1); // We want to process only the nodes currently in the processed list\n        }\n\n        // For each source, we get its query\n        const queries = sourceNodes.map(node => this.nodeCache.has(node.id)? undefined : this.edgeType.getQuery(node, this.edgeType));\n        const _queries = queries.filter(q => !!q) as Query[];\n        // If there are queries, we process them asynchronously\n        if(_queries.length > 0) {\n            this.context.searchService.getMultipleResults(_queries, undefined).subscribe(res => {\n                this.addDynamicEdges(sourceNodes, res.results, queries);\n            });\n        }\n        // If not, we process them synchronously\n        else {\n            this.addDynamicEdges(sourceNodes, [], queries);\n        }\n    \n    }\n\n    /**\n     * Add dynamic edges to a list of source nodes, given a results set\n     * for each of these nodes (either directly provided or stored in the cache).\n     * @param sourceNodes The source nodes\n     * @param res The list of results sets\n     * @param queries The list of queries from which we obtained the results\n     */\n    protected addDynamicEdges(sourceNodes: Node[], res: Results[], queries: (Query|undefined)[]){\n        let j = 0;\n        // For each source node\n        for(let i = 0; i this.createEdge(this.edgeType, node, rNode, undefined, node.visible, {record: rNode.record}) as DynamicEdge);\n    }\n\n    /**\n     * Attach dynamic edges to a given node, either synchronously, if the results set\n     * is available in the cache, or asynchronously, by fetching the data from the server.\n     * @param node The node to process\n     */\n    protected processNode(node: Node) {\n        const query = this.edgeType.getQuery(node, this.edgeType); // Get the search query for this node\n        if(query){\n            if(this.nodeCache.has(node.id)) {\n                if(!this.permanent) {\n                    this.dataset.clear(); // Remove data from previously clicked node\n                    this.processedNodes.splice(0); // Remove the processed nodes\n                }\n                this.processedNodes.push(node.id);\n                this.addDynamicEdges([node], [], [query]); // Insert dynamic nodes and edges for this clicked node\n            }\n            else {\n                this.context.searchService.getResults(query, undefined, {searchInactive: true})\n                    .subscribe(results => {\n                        if(!this.permanent) {\n                            this.dataset.clear(); // Remove data from previously clicked node\n                            this.processedNodes.splice(0); // Remove the processed nodes\n                        }\n                        this.processedNodes.push(node.id);\n                        this.addDynamicEdges([node], [results], [query]); // Insert dynamic nodes and edges for this clicked node\n                    });\n            }\n        }\n    }\n\n\n    // Network provider interface\n\n    /**\n     * Process a clicked source node, if the trigger of the edge type is \"onclick\"\n     * @param node The clicked node\n     */\n    override onNodeClicked(node?: Node) {\n        super.onNodeClicked(node);\n        if(this.active && this.edgeType.trigger === \"onclick\" && node && node.type === this.edgeType.nodeTypes[0] && !this.dataset.hasNode(node.id)) {\n            this.processNode(node);\n        }\n    }\n    \n    /**\n     * Returns an Action allowing to process a node, if the trigger of the edge type\n     * is \"manual\".\n     * @param node The clicked node\n     */\n    override getNodeActions(node: Node): Action[] {\n        const actions = super.getNodeActions(node);\n        if(this.active && this.edgeType.trigger === \"manual\" && node && node.type === this.edgeType.nodeTypes[0] && !this.dataset.hasNode(node.id)) {            \n            actions.push(new Action({\n                icon: \"fas fa-expand-arrows-alt\",\n                title: this.context.intlService.formatMessage(\"msg#network.actions.expandNode\", {label: node.label}),\n                action: () => {\n                    this.processNode(node);\n                }\n            }));            \n        }\n        return actions;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/DynamicEdgeType.html":{"url":"interfaces/DynamicEdgeType.html","title":"interface - DynamicEdgeType","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  DynamicEdgeType\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            network/providers/dynamic-edge-provider.ts\n        \n\n\n            \n                Description\n            \n            \n                Extension of the EdgeType interface, to include properties specific\nto dynamic edges, in particular a function that returns a Query object\nfor a given source node.\n\n            \n\n            \n                Extends\n            \n            \n                        EdgeType\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            count\n                                        \n                                \n                                \n                                        \n                                            getQuery\n                                        \n                                \n                                \n                                        \n                                            trigger\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        count\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        count:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    count limits the number of records returned by the query service and allows for pagination\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        getQuery\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        getQuery:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Returns a query object to execute to obtain dynamic edges from a node\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        trigger\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        trigger:     \"oninsert\" | \"onclick\" | \"manual\"\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     \"oninsert\" | \"onclick\" | \"manual\"\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Defines when the dynamic edge should be executed. Warning: oninsert may generate multiple simultaneous queries\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { Query } from '@sinequa/core/app-utils';\nimport { Results, Record } from '@sinequa/core/web-services';\nimport { EdgeType, Node, Edge, NetworkProvider, NetworkDataset } from '../network-models';\nimport { RecordsProvider, StructuralEdgeType, RecordNode } from './records-provider';\nimport { combineLatest } from 'rxjs';\nimport { Action } from '@sinequa/components/action';\n\n/**\n * Extension of the Edge interface, to include the record property\n * from which this edge is generated\n */\nexport interface DynamicEdge extends Edge {\n    record: Record;\n}\n\n/**\n * Extension of the EdgeType interface, to include properties specific\n * to dynamic edges, in particular a function that returns a Query object\n * for a given source node.\n */\nexport interface DynamicEdgeType extends EdgeType {\n    /** Returns a query object to execute to obtain dynamic edges from a node */\n    getQuery: (node: Node, type: DynamicEdgeType) => Query | undefined;\n    /** count limits the number of records returned by the query service and allows for pagination */\n    count?: number;\n    /** Defines when the dynamic edge should be executed. Warning: oninsert may generate multiple simultaneous queries */\n    trigger: \"oninsert\" | \"onclick\" | \"manual\";\n}\n\n/**\n * Tests whether a given edge type is a DynamicEdgeType\n * @param et an edge type\n */\nexport function isDynamicEdgeType(et: EdgeType): et is DynamicEdgeType {\n    return !!(et as DynamicEdgeType).getQuery;\n}\n\n\n/**\n * A extension of the RecordsProvider, where records are not directly\n * provided, but are instead fetched from the server via a Query specific\n * to a source node.\n * Concretely, the dynamic edge provider will attach one (or more) record nodes\n * (and their structural edges) to one (or more) source nodes, whose type is\n * specified in the DynamicEdgeType.\n * Dynamic edges can be attached right when the source nodes are inserted (oninsert),\n * or when a user clicks on a source node (onclick) or when a user clicks on an\n * action button displayed when a source node is clicked.\n * Note that the \"source node\" have to come from different providers, so it is\n * necessary to listen to these providers and update the data generated by this\n * provider accordingly.\n */\nexport class DynamicEdgeProvider extends RecordsProvider {\n\n    /** List of the source nodes that have been already processed via clicks or actions */\n    protected processedNodes: string[] = [];\n    /** to avoid fetching the same data multiple times, we store the record objects fetched from the server in this cache */\n    protected nodeCache = new Map();\n\n    constructor(\n        public override name: string,\n        protected edgeType: DynamicEdgeType,\n        protected secondaryEdgeTypes: StructuralEdgeType[],\n        protected permanent: boolean,\n        protected sourceProviders: NetworkProvider[]\n    ){\n        super(name, edgeType.nodeTypes[1], secondaryEdgeTypes, [], false);\n\n        combineLatest(sourceProviders.map(p => p.getProvider())).subscribe(dataset => {\n            if(this.active) {\n                // Merge the nodes from all datasets into a map\n                const map = new Map();\n                dataset.forEach(dataset => {\n                    dataset.getNodes().forEach(node => {\n                        if(node.visible && node.type === this.edgeType.nodeTypes[0]) {\n                            map.set(node.id, node);\n                        }\n                    });\n                });\n                // Update the dataset of dynamic edges\n                this.updateDynamicDataset(Array.from(map.values()));\n            }\n        });\n    }\n    \n    /**\n     * Rebuilds the dataset of this provider, given a list of source nodes to process.\n     * @param sourceNodes A list of source node to process\n     */\n    protected updateDynamicDataset(sourceNodes: Node[]) {\n\n        // We rebuild the dataset from scratch, in case some source nodes were removed\n        this.dataset = new NetworkDataset();\n\n        // If oninsert, we want to process all the source nodes. If not, we want to process the nodes in the processedNodes list\n        if(this.edgeType.trigger !== \"oninsert\") {\n            this.processedNodes = this.processedNodes.filter(id => !!sourceNodes.find(node => node.id === id)); // We want to \"forget\" the nodes that are not in the source anymore\n            sourceNodes = sourceNodes.filter(node => this.processedNodes.indexOf(node.id) !== -1); // We want to process only the nodes currently in the processed list\n        }\n\n        // For each source, we get its query\n        const queries = sourceNodes.map(node => this.nodeCache.has(node.id)? undefined : this.edgeType.getQuery(node, this.edgeType));\n        const _queries = queries.filter(q => !!q) as Query[];\n        // If there are queries, we process them asynchronously\n        if(_queries.length > 0) {\n            this.context.searchService.getMultipleResults(_queries, undefined).subscribe(res => {\n                this.addDynamicEdges(sourceNodes, res.results, queries);\n            });\n        }\n        // If not, we process them synchronously\n        else {\n            this.addDynamicEdges(sourceNodes, [], queries);\n        }\n    \n    }\n\n    /**\n     * Add dynamic edges to a list of source nodes, given a results set\n     * for each of these nodes (either directly provided or stored in the cache).\n     * @param sourceNodes The source nodes\n     * @param res The list of results sets\n     * @param queries The list of queries from which we obtained the results\n     */\n    protected addDynamicEdges(sourceNodes: Node[], res: Results[], queries: (Query|undefined)[]){\n        let j = 0;\n        // For each source node\n        for(let i = 0; i this.createEdge(this.edgeType, node, rNode, undefined, node.visible, {record: rNode.record}) as DynamicEdge);\n    }\n\n    /**\n     * Attach dynamic edges to a given node, either synchronously, if the results set\n     * is available in the cache, or asynchronously, by fetching the data from the server.\n     * @param node The node to process\n     */\n    protected processNode(node: Node) {\n        const query = this.edgeType.getQuery(node, this.edgeType); // Get the search query for this node\n        if(query){\n            if(this.nodeCache.has(node.id)) {\n                if(!this.permanent) {\n                    this.dataset.clear(); // Remove data from previously clicked node\n                    this.processedNodes.splice(0); // Remove the processed nodes\n                }\n                this.processedNodes.push(node.id);\n                this.addDynamicEdges([node], [], [query]); // Insert dynamic nodes and edges for this clicked node\n            }\n            else {\n                this.context.searchService.getResults(query, undefined, {searchInactive: true})\n                    .subscribe(results => {\n                        if(!this.permanent) {\n                            this.dataset.clear(); // Remove data from previously clicked node\n                            this.processedNodes.splice(0); // Remove the processed nodes\n                        }\n                        this.processedNodes.push(node.id);\n                        this.addDynamicEdges([node], [results], [query]); // Insert dynamic nodes and edges for this clicked node\n                    });\n            }\n        }\n    }\n\n\n    // Network provider interface\n\n    /**\n     * Process a clicked source node, if the trigger of the edge type is \"onclick\"\n     * @param node The clicked node\n     */\n    override onNodeClicked(node?: Node) {\n        super.onNodeClicked(node);\n        if(this.active && this.edgeType.trigger === \"onclick\" && node && node.type === this.edgeType.nodeTypes[0] && !this.dataset.hasNode(node.id)) {\n            this.processNode(node);\n        }\n    }\n    \n    /**\n     * Returns an Action allowing to process a node, if the trigger of the edge type\n     * is \"manual\".\n     * @param node The clicked node\n     */\n    override getNodeActions(node: Node): Action[] {\n        const actions = super.getNodeActions(node);\n        if(this.active && this.edgeType.trigger === \"manual\" && node && node.type === this.edgeType.nodeTypes[0] && !this.dataset.hasNode(node.id)) {            \n            actions.push(new Action({\n                icon: \"fas fa-expand-arrows-alt\",\n                title: this.context.intlService.formatMessage(\"msg#network.actions.expandNode\", {label: node.label}),\n                action: () => {\n                    this.processNode(node);\n                }\n            }));            \n        }\n        return actions;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/DynamicNodeProvider.html":{"url":"classes/DynamicNodeProvider.html","title":"class - DynamicNodeProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  DynamicNodeProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            network/providers/dynamic-node-provider.ts\n        \n\n\n            \n                Description\n            \n            \n                An extension of the RecordsProvider which manages dynamic node types.\nDynamic nodes are nodes that are transformed into record nodes via a\nquery. The records are fetched from the server dynamic to enrich the\noriginal node.\nFor example, a simple metadata node with the value \"Bill Gates\" can be\nenriched with the wikipedia page of Bill Gate, which can provide a lot\nof structured information about Bill Gates (which can be used, for\nexample, to attach structural edges to the original Bill Gates node).\nNote that the \"source node\" have to come from different providers, so it is\nnecessary to listen to these providers and update the data generated by this\nprovider accordingly.\n\n            \n\n            \n                Extends\n            \n            \n                        RecordsProvider\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    \n                                name\n                            \n                            \n                                    Public\n                                    Readonly\n                                activateAction\n                            \n                            \n                                    Public\n                                active\n                            \n                            \n                                    Public\n                                context\n                            \n                            \n                                    Public\n                                dataset\n                            \n                            \n                                    Public\n                                    Readonly\n                                EDGESEPARATOR\n                            \n                            \n                                    Public\n                                    Readonly\n                                resetAction\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                getNodeActions\n                            \n                            \n                                    \n                                onNodeClicked\n                            \n                            \n                                    \n                                getData\n                            \n                            \n                                    \n                                getProviderActions\n                            \n                            \n                                    \n                                onDatasetsMerged\n                            \n                            \n                                getEdgeActions\n                            \n                            \n                                getProvider\n                            \n                            \n                                onDestroy\n                            \n                            \n                                onEdgeClicked\n                            \n                            \n                                onNodesInserted\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(name: string, nodeType: DynamicNodeType, edgeTypes: StructuralEdgeType[], permanent: boolean, sourceProviders: NetworkProvider[])\n                    \n                \n                        \n                            \n                                Defined in network/providers/dynamic-node-provider.ts:39\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        name\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        nodeType\n                                                  \n                                                        \n                                                                        DynamicNodeType\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        edgeTypes\n                                                  \n                                                        \n                                                                    StructuralEdgeType[]\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        permanent\n                                                  \n                                                        \n                                                                        boolean\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        sourceProviders\n                                                  \n                                                        \n                                                                        NetworkProvider[]\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                        \n                            \n                                Inherited from         BaseProvider\n\n                            \n                        \n                    \n                        \n                                Defined in         BaseProvider:42\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        activateAction\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Action\n\n                    \n                \n                        \n                            \n                                Inherited from         BaseProvider\n\n                            \n                        \n                    \n                        \n                                Defined in         BaseProvider:21\n\n                        \n                    \n\n            \n                \n                    Action to turn the provider on or off\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        active\n                        \n                    \n                \n            \n                \n                    \n                        Default value : true\n                    \n                \n                        \n                            \n                                Inherited from         BaseProvider\n\n                            \n                        \n                    \n                        \n                                Defined in         BaseProvider:16\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        context\n                        \n                    \n                \n            \n                \n                    \n                        Type :         NetworkContext\n\n                    \n                \n                        \n                            \n                                Inherited from         BaseProvider\n\n                            \n                        \n                    \n                        \n                                Defined in         BaseProvider:25\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        dataset\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new NetworkDataset()\n                    \n                \n                        \n                            \n                                Inherited from         BaseProvider\n\n                            \n                        \n                    \n                        \n                                Defined in         BaseProvider:15\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        EDGESEPARATOR\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : \"~~~EDGE~~~\"\n                    \n                \n                        \n                            \n                                Inherited from         BaseProvider\n\n                            \n                        \n                    \n                        \n                                Defined in         BaseProvider:18\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        resetAction\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Action\n\n                    \n                \n                        \n                            \n                                Inherited from         BaseProvider\n\n                            \n                        \n                    \n                        \n                                Defined in         BaseProvider:23\n\n                        \n                    \n\n            \n                \n                    Action to reset the provider\n\n                \n            \n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        getNodeActions\n                        \n                    \n                \n            \n            \n                \n                    \n                    getNodeActions(node: RecordNode)\n                \n            \n\n\n            \n                \n                    Inherited from         BaseProvider\n\n                \n            \n            \n                \n                        Defined in         BaseProvider:211\n\n                \n            \n\n\n            \n                \n                    Creates an action to process a clicked node, for dynamic node types\nwith a \"manual\" trigger.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    node\n                                    \n                                                RecordNode\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The clicked node\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Action[]\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        onNodeClicked\n                        \n                    \n                \n            \n            \n                \n                    \n                    onNodeClicked(node?: RecordNode)\n                \n            \n\n\n            \n                \n                    Inherited from         BaseProvider\n\n                \n            \n            \n                \n                        Defined in         BaseProvider:199\n\n                \n            \n\n\n            \n                \n                    Process a clicked node, for dynamic node types with an \"onclick\" trigger\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    node\n                                    \n                                                RecordNode\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        The clicked node\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        getData\n                        \n                    \n                \n            \n            \n                \n                    \n                    getData(context: NetworkContext)\n                \n            \n\n\n            \n                \n                    Inherited from         BaseProvider\n\n                \n            \n            \n                \n                        Defined in         BaseProvider:265\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                                NetworkContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        getProviderActions\n                        \n                    \n                \n            \n            \n                \n                    \n                    getProviderActions()\n                \n            \n\n\n            \n                \n                    Inherited from         BaseProvider\n\n                \n            \n            \n                \n                        Defined in         BaseProvider:328\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     Action[]\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        onDatasetsMerged\n                        \n                    \n                \n            \n            \n                \n                    \n                    onDatasetsMerged(dataset: NetworkDataset)\n                \n            \n\n\n            \n                \n                    Inherited from         BaseProvider\n\n                \n            \n            \n                \n                        Defined in         BaseProvider:278\n\n                \n            \n\n\n            \n                \n                    This function adjusts the visibility of nodes for the visibility\ntype \"existingnode\", so that nodes with only one neighbor (post-merge)\nare collapsed.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    dataset\n                                    \n                                                NetworkDataset\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The dataset resulting of the merge of all the datasets\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getEdgeActions\n                        \n                    \n                \n            \n            \n                \ngetEdgeActions(edge: Edge)\n                \n            \n\n\n            \n                \n                    Inherited from         BaseProvider\n\n                \n            \n            \n                \n                        Defined in         BaseProvider:211\n\n                \n            \n\n\n            \n                \n                    By default the base provider includes an action to filter the search if a clicked\nedge has a \"type.field\" property and a \"fieldValue\" (alternatively, an action\nis created if the 2 adjacent nodes can be filtered, ie they both have a \"field\"\nproperty)\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    edge\n                                    \n                                                Edge\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The clicked edge\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Action[]\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getProvider\n                        \n                    \n                \n            \n            \n                \ngetProvider()\n                \n            \n\n\n            \n                \n                    Inherited from         BaseProvider\n\n                \n            \n            \n                \n                        Defined in         BaseProvider:151\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         Subject\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onDestroy\n                        \n                    \n                \n            \n            \n                \nonDestroy()\n                \n            \n\n\n            \n                \n                    Inherited from         BaseProvider\n\n                \n            \n            \n                \n                        Defined in         BaseProvider:245\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onEdgeClicked\n                        \n                    \n                \n            \n            \n                \nonEdgeClicked(edge: Edge | undefined)\n                \n            \n\n\n            \n                \n                    Inherited from         BaseProvider\n\n                \n            \n            \n                \n                        Defined in         BaseProvider:171\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    edge\n                                    \n                                                Edge | undefined\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onNodesInserted\n                        \n                    \n                \n            \n            \n                \nonNodesInserted(nodes: Node[])\n                \n            \n\n\n            \n                \n                    Inherited from         BaseProvider\n\n                \n            \n            \n                \n                        Defined in         BaseProvider:163\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    nodes\n                                    \n                                                Node[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Query } from '@sinequa/core/app-utils';\nimport { Record } from '@sinequa/core/web-services';\nimport { NodeType, Node, NetworkProvider, NetworkDataset } from '../network-models';\nimport { RecordsProvider, StructuralEdgeType, RecordNode } from './records-provider';\nimport { Utils } from '@sinequa/core/base';\nimport { combineLatest } from 'rxjs';\nimport { Action } from '@sinequa/components/action';\n\n/**\n * Extension of the NodeType interface with additional properties specific\n * to dynamic nodes, in particular the getQuery() function that returns a\n * query given a node\n */\nexport interface DynamicNodeType extends NodeType {\n    /** Returns a query object to execute to obtain a record for this node */\n    getQuery: (node: Node) => Query|undefined;\n    /** Defines when the query should be executed. Warning: oninsert may generate multiple simultaneous queries */\n    trigger: \"oninsert\" | \"onclick\" | \"manual\";\n}\n\n/**\n * An extension of the RecordsProvider which manages dynamic node types.\n * Dynamic nodes are nodes that are transformed into record nodes via a\n * query. The records are fetched from the server dynamic to enrich the\n * original node.\n * For example, a simple metadata node with the value \"Bill Gates\" can be\n * enriched with the wikipedia page of Bill Gate, which can provide a lot\n * of structured information about Bill Gates (which can be used, for\n * example, to attach structural edges to the original Bill Gates node).\n * Note that the \"source node\" have to come from different providers, so it is\n * necessary to listen to these providers and update the data generated by this\n * provider accordingly.\n */\nexport class DynamicNodeProvider extends RecordsProvider {\n\n    /** List of the source nodes that have been already processed via clicks or actions */\n    protected processedNodes: string[] = [];\n    /** to avoid fetching the same data multiple times, we store the record objects fetched from the server in this cache */\n    protected nodeCache = new Map();\n\n    constructor(\n        public override name: string,\n        protected override nodeType: DynamicNodeType,\n        protected override edgeTypes: StructuralEdgeType[],\n        protected permanent: boolean,\n        protected sourceProviders: NetworkProvider[]\n    ){\n        super(name, nodeType, edgeTypes, [], false);\n        \n        combineLatest(sourceProviders.map(p => p.getProvider())).subscribe(dataset => {\n            if(this.active){\n                // \"Merge\" the nodes from all datasets into a map\n                const map = new Map();\n                dataset.forEach(dataset => {\n                    dataset.getNodes().forEach(node => {\n                        if(node.visible && node.type === this.nodeType) {\n                            map.set(node.id, node);\n                        }\n                    });\n                });\n                // Update the dataset of dynamic edges\n                this.updateDynamicDataset(Array.from(map.values()));\n            }\n        });\n    }\n\n    /**\n     * Rebuild the dataset of this provider given a list of source nodes to process\n     * @param sourceNodes A list of source nodes to process\n     */\n    protected updateDynamicDataset(sourceNodes: Node[]) {\n        \n        // We rebuild the dataset from scratch, in case some source nodes were removed\n        this.dataset = new NetworkDataset();\n\n        // If oninsert, we want to process all the source nodes. If not, we want to process the nodes in the processedNodes list\n        if(this.nodeType.trigger !== \"oninsert\") {\n            this.processedNodes = this.processedNodes.filter(id => !!sourceNodes.find(node => node.id === id)); // We want to \"forget\" the nodes that are not in the source anymore\n            sourceNodes = sourceNodes.filter(node => this.processedNodes.indexOf(node.id) !== -1); // We want to process only the nodes currently in the processed list\n        }\n        \n        // For each source, we get its query\n        const queries = sourceNodes.map(node => (this.nodeCache.has(node.id) || (node as RecordNode).record)? undefined : this.nodeType.getQuery(node));\n        const _queries = queries.filter(q => !!q) as Query[];\n        // If there are queries, we process them asynchronously\n        if(_queries.length > 0) {\n            this.context.searchService.getMultipleResults(_queries, undefined).subscribe(res => {\n                this.mutateNodes(sourceNodes as RecordNode[], res.results.map(r => r.records.length > 0? r.records[0] : undefined), queries);\n            });\n        }\n        else {\n            this.mutateNodes(sourceNodes as RecordNode[], [], queries);\n        }\n    }\n\n    /**\n     * Processes a given node: If the record for this node is available\n     * in the node cache, we take this record and mutate the node. If not,\n     * we get the query via the dynamic node type's getQuery() function,\n     * and mutate the node upon results.\n     * @param node A source node to process\n     */\n    protected processNode(node: RecordNode) {\n        if(!this.permanent) {\n            this.dataset.clear(); // Remove data from previously clicked node\n            this.processedNodes.splice(0); // Remove the processed nodes\n        }\n\n        this.processedNodes.push(node.id);\n        if(this.nodeCache.has(node.id)) {\n            this.mutateNode(node, this.nodeCache[node.id]);\n            this.provider.next(this.dataset);\n        }\n        else {\n            const query = this.nodeType.getQuery(node);\n            if(query) {\n                this.context.searchService.getResults(query, undefined, {searchInactive: true}).subscribe(results => {\n                    if(results.records.length > 0) {\n                        this.mutateNode(node, results.records[0]);\n                    }\n                    this.provider.next(this.dataset);\n                });\n            }\n        }       \n    }\n\n    /**\n     * Mutates a list of nodes, given a corresponding list of records\n     * and of queries. Manages to get the record objects either from\n     * these inputs or from the cache.\n     * @param nodes The list of node to mutate\n     * @param records The list of records for each node\n     * @param queries The list of queries for each node\n     */\n    protected mutateNodes(nodes: RecordNode[], records: (Record|undefined)[], queries: (Query|undefined)[]) {\n        let j = 0;\n        for(let i = 0; i {\n            this.addStructuralEdges(node, type);\n        });\n    }\n\n    /**\n     * (Re-)computes the node options of a node (after mutation)\n     * @param node a node\n     */\n    protected refreshNodeOptions(node: Node) {\n        let options;\n        if(typeof this.nodeType.nodeOptions === \"function\") {\n            options = this.nodeType.nodeOptions(node, this.nodeType);\n        }\n        else {\n            options = this.nodeType.nodeOptions;\n        }\n        return Utils.extend(node, options);\n    }\n    \n    // Network provider interface\n\n    /**\n     * Process a clicked node, for dynamic node types with an \"onclick\" trigger\n     * @param node The clicked node\n     */\n    override onNodeClicked(node?: RecordNode) {\n        super.onNodeClicked(node);\n        if(this.active && this.nodeType.trigger === \"onclick\" && node && node.type === this.nodeType && this.processedNodes.indexOf(node.id) === -1) {\n            this.processNode(node);\n        }\n    }\n\n    /**\n     * Creates an action to process a clicked node, for dynamic node types\n     * with a \"manual\" trigger.\n     * @param node The clicked node\n     */\n    override getNodeActions(node: RecordNode): Action[] {\n        const actions = super.getNodeActions(node);\n        if(this.active && this.nodeType.trigger === \"manual\" && node && node.type === this.nodeType && this.processedNodes.indexOf(node.id) === -1) {\n            actions.unshift(new Action({\n                icon: \"fas fa-star-of-life\",\n                title: this.context.intlService.formatMessage(\"msg#network.actions.expandNode\", {label: node.label}),\n                action: () => {\n                    this.processNode(node);\n                }\n            }));\n        }\n        return actions;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/DynamicNodeType.html":{"url":"interfaces/DynamicNodeType.html","title":"interface - DynamicNodeType","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  DynamicNodeType\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            network/providers/dynamic-node-provider.ts\n        \n\n\n            \n                Description\n            \n            \n                Extension of the NodeType interface with additional properties specific\nto dynamic nodes, in particular the getQuery() function that returns a\nquery given a node\n\n            \n\n            \n                Extends\n            \n            \n                        NodeType\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            getQuery\n                                        \n                                \n                                \n                                        \n                                            trigger\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        getQuery\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        getQuery:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Returns a query object to execute to obtain a record for this node\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        trigger\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        trigger:     \"oninsert\" | \"onclick\" | \"manual\"\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     \"oninsert\" | \"onclick\" | \"manual\"\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Defines when the query should be executed. Warning: oninsert may generate multiple simultaneous queries\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { Query } from '@sinequa/core/app-utils';\nimport { Record } from '@sinequa/core/web-services';\nimport { NodeType, Node, NetworkProvider, NetworkDataset } from '../network-models';\nimport { RecordsProvider, StructuralEdgeType, RecordNode } from './records-provider';\nimport { Utils } from '@sinequa/core/base';\nimport { combineLatest } from 'rxjs';\nimport { Action } from '@sinequa/components/action';\n\n/**\n * Extension of the NodeType interface with additional properties specific\n * to dynamic nodes, in particular the getQuery() function that returns a\n * query given a node\n */\nexport interface DynamicNodeType extends NodeType {\n    /** Returns a query object to execute to obtain a record for this node */\n    getQuery: (node: Node) => Query|undefined;\n    /** Defines when the query should be executed. Warning: oninsert may generate multiple simultaneous queries */\n    trigger: \"oninsert\" | \"onclick\" | \"manual\";\n}\n\n/**\n * An extension of the RecordsProvider which manages dynamic node types.\n * Dynamic nodes are nodes that are transformed into record nodes via a\n * query. The records are fetched from the server dynamic to enrich the\n * original node.\n * For example, a simple metadata node with the value \"Bill Gates\" can be\n * enriched with the wikipedia page of Bill Gate, which can provide a lot\n * of structured information about Bill Gates (which can be used, for\n * example, to attach structural edges to the original Bill Gates node).\n * Note that the \"source node\" have to come from different providers, so it is\n * necessary to listen to these providers and update the data generated by this\n * provider accordingly.\n */\nexport class DynamicNodeProvider extends RecordsProvider {\n\n    /** List of the source nodes that have been already processed via clicks or actions */\n    protected processedNodes: string[] = [];\n    /** to avoid fetching the same data multiple times, we store the record objects fetched from the server in this cache */\n    protected nodeCache = new Map();\n\n    constructor(\n        public override name: string,\n        protected override nodeType: DynamicNodeType,\n        protected override edgeTypes: StructuralEdgeType[],\n        protected permanent: boolean,\n        protected sourceProviders: NetworkProvider[]\n    ){\n        super(name, nodeType, edgeTypes, [], false);\n        \n        combineLatest(sourceProviders.map(p => p.getProvider())).subscribe(dataset => {\n            if(this.active){\n                // \"Merge\" the nodes from all datasets into a map\n                const map = new Map();\n                dataset.forEach(dataset => {\n                    dataset.getNodes().forEach(node => {\n                        if(node.visible && node.type === this.nodeType) {\n                            map.set(node.id, node);\n                        }\n                    });\n                });\n                // Update the dataset of dynamic edges\n                this.updateDynamicDataset(Array.from(map.values()));\n            }\n        });\n    }\n\n    /**\n     * Rebuild the dataset of this provider given a list of source nodes to process\n     * @param sourceNodes A list of source nodes to process\n     */\n    protected updateDynamicDataset(sourceNodes: Node[]) {\n        \n        // We rebuild the dataset from scratch, in case some source nodes were removed\n        this.dataset = new NetworkDataset();\n\n        // If oninsert, we want to process all the source nodes. If not, we want to process the nodes in the processedNodes list\n        if(this.nodeType.trigger !== \"oninsert\") {\n            this.processedNodes = this.processedNodes.filter(id => !!sourceNodes.find(node => node.id === id)); // We want to \"forget\" the nodes that are not in the source anymore\n            sourceNodes = sourceNodes.filter(node => this.processedNodes.indexOf(node.id) !== -1); // We want to process only the nodes currently in the processed list\n        }\n        \n        // For each source, we get its query\n        const queries = sourceNodes.map(node => (this.nodeCache.has(node.id) || (node as RecordNode).record)? undefined : this.nodeType.getQuery(node));\n        const _queries = queries.filter(q => !!q) as Query[];\n        // If there are queries, we process them asynchronously\n        if(_queries.length > 0) {\n            this.context.searchService.getMultipleResults(_queries, undefined).subscribe(res => {\n                this.mutateNodes(sourceNodes as RecordNode[], res.results.map(r => r.records.length > 0? r.records[0] : undefined), queries);\n            });\n        }\n        else {\n            this.mutateNodes(sourceNodes as RecordNode[], [], queries);\n        }\n    }\n\n    /**\n     * Processes a given node: If the record for this node is available\n     * in the node cache, we take this record and mutate the node. If not,\n     * we get the query via the dynamic node type's getQuery() function,\n     * and mutate the node upon results.\n     * @param node A source node to process\n     */\n    protected processNode(node: RecordNode) {\n        if(!this.permanent) {\n            this.dataset.clear(); // Remove data from previously clicked node\n            this.processedNodes.splice(0); // Remove the processed nodes\n        }\n\n        this.processedNodes.push(node.id);\n        if(this.nodeCache.has(node.id)) {\n            this.mutateNode(node, this.nodeCache[node.id]);\n            this.provider.next(this.dataset);\n        }\n        else {\n            const query = this.nodeType.getQuery(node);\n            if(query) {\n                this.context.searchService.getResults(query, undefined, {searchInactive: true}).subscribe(results => {\n                    if(results.records.length > 0) {\n                        this.mutateNode(node, results.records[0]);\n                    }\n                    this.provider.next(this.dataset);\n                });\n            }\n        }       \n    }\n\n    /**\n     * Mutates a list of nodes, given a corresponding list of records\n     * and of queries. Manages to get the record objects either from\n     * these inputs or from the cache.\n     * @param nodes The list of node to mutate\n     * @param records The list of records for each node\n     * @param queries The list of queries for each node\n     */\n    protected mutateNodes(nodes: RecordNode[], records: (Record|undefined)[], queries: (Query|undefined)[]) {\n        let j = 0;\n        for(let i = 0; i {\n            this.addStructuralEdges(node, type);\n        });\n    }\n\n    /**\n     * (Re-)computes the node options of a node (after mutation)\n     * @param node a node\n     */\n    protected refreshNodeOptions(node: Node) {\n        let options;\n        if(typeof this.nodeType.nodeOptions === \"function\") {\n            options = this.nodeType.nodeOptions(node, this.nodeType);\n        }\n        else {\n            options = this.nodeType.nodeOptions;\n        }\n        return Utils.extend(node, options);\n    }\n    \n    // Network provider interface\n\n    /**\n     * Process a clicked node, for dynamic node types with an \"onclick\" trigger\n     * @param node The clicked node\n     */\n    override onNodeClicked(node?: RecordNode) {\n        super.onNodeClicked(node);\n        if(this.active && this.nodeType.trigger === \"onclick\" && node && node.type === this.nodeType && this.processedNodes.indexOf(node.id) === -1) {\n            this.processNode(node);\n        }\n    }\n\n    /**\n     * Creates an action to process a clicked node, for dynamic node types\n     * with a \"manual\" trigger.\n     * @param node The clicked node\n     */\n    override getNodeActions(node: RecordNode): Action[] {\n        const actions = super.getNodeActions(node);\n        if(this.active && this.nodeType.trigger === \"manual\" && node && node.type === this.nodeType && this.processedNodes.indexOf(node.id) === -1) {\n            actions.unshift(new Action({\n                icon: \"fas fa-star-of-life\",\n                title: this.context.intlService.formatMessage(\"msg#network.actions.expandNode\", {label: node.label}),\n                action: () => {\n                    this.processNode(node);\n                }\n            }));\n        }\n        return actions;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Edge.html":{"url":"interfaces/Edge.html","title":"interface - Edge","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  Edge\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            network/network-models.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            context\n                                        \n                                \n                                \n                                        \n                                            count\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            fieldValue\n                                        \n                                \n                                \n                                        \n                                            from\n                                        \n                                \n                                \n                                        \n                                            id\n                                        \n                                \n                                \n                                        \n                                            provider\n                                        \n                                \n                                \n                                        \n                                            to\n                                        \n                                \n                                \n                                        \n                                            type\n                                        \n                                \n                                \n                                        \n                                            visible\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        context\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        context:         NetworkContext\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         NetworkContext\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        count\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        count:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    count is a property representing the strength of an edge, which scales the count of adjacent nodes\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        fieldValue\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        fieldValue:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    A field value may be provided to filter search based on the edge field type\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        from\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        from:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        id:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        provider\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        provider:         NetworkProvider\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         NetworkProvider\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        to\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        to:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        type\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        type:         EdgeType\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         EdgeType\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        visible\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        visible:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Subject } from 'rxjs';\nimport { Action } from '@sinequa/components/action';\nimport { Utils } from '@sinequa/core/base';\nimport { DataSet } from \"vis-data/peer/esm/vis-data\";\nimport { SearchService } from '@sinequa/components/search';\nimport { VisNetworkService } from 'ngx-vis';\nimport { AppService, ExprBuilder } from '@sinequa/core/app-utils';\nimport { IntlService } from '@sinequa/core/intl';\n\n// TYPES (configuration)\n\nexport interface NodeType {\n    name: string;\n    /** Vis Node options (merged in the Node objects). See https://visjs.github.io/vis-network/docs/network/nodes.html */\n    nodeOptions: {[key: string]: any} | ((node: Node, type: NodeType) => {[key: string]: any} );\n    /** If a field is provided, it can be used to filter the node value (and access the label, formatter, etc.) */\n    field?: string;\n}\n\nexport interface EdgeType {\n    /** Node types attached to this edge type. Should typically be 2 items, but cooccurrence aggregation might return more */\n    nodeTypes: NodeType[];\n    /** Vis Edge options (merged in the Edge objects). See https://visjs.github.io/vis-network/docs/network/edges.html */\n    edgeOptions: {[key: string]: any} | ((nodes: Node[], edge: Edge, type: EdgeType) => {[key: string]: any} );\n    /** If a field is provided, it can be used to filter the node value (and access the label, formatter, etc.) */\n    field?: string;\n}\n\n\n// DATA\n\n// Nodes (based on Vis Node interface)\n\nexport interface Node {\n    id: string;\n    label: string;\n\n    // Custom properties\n    type: NodeType;\n    provider: NetworkProvider;\n    visible: boolean;\n    /** count is a mutable property used to scale the node size in function of the size of adjacent edges*/\n    count: number;\n    /** the precedence of a node determines which node object is kept when merging two dataset (the highest precedence node is kept) */\n    precedence?: number;\n    // Context\n    context: NetworkContext;\n}\n\n// Edge (based on Vis Edge interface)\n\nexport interface Edge {\n    id: string;\n    from: string;\n    to: string;\n\n    // Custom properties\n    type: EdgeType;\n    provider: NetworkProvider;\n    visible: boolean;    \n    /** count is a property representing the strength of an edge, which scales the count of adjacent nodes*/\n    count: number;\n    /** A field value may be provided to filter search based on the edge field type */\n    fieldValue?: string;\n    // Context\n    context: NetworkContext;\n}\n\n\nexport interface NetworkProvider {\n    /** Whether or not the provider is active (if inactive, it will not provide empty datasets of nodes and edges) */\n    active: boolean;\n\n    /** Readable name of this provider */\n    name: string;\n\n    /** Dataset of this provider */\n    dataset: NetworkDataset;\n\n    /** Context (wrapper for general data about the network and services) */\n    context: NetworkContext;\n\n    /** Returns the Subject of this provider */\n    getProvider(): Subject;\n\n    /** Asynchronously provide data via it's provider Subject */\n    getData(context: NetworkContext); // skip/count handled internally\n\n    /** Called after the datasets provided by all providers have been merged into a single dataset */\n    onDatasetsMerged(dataset: NetworkDataset);\n\n    /** Called after the dataset is filtered and passed to Vis for rendering */\n    onNodesInserted(nodes: Node[]);\n\n    /** Called when ANY node is clicked in the rendered view of the network */\n    onNodeClicked(node: Node | undefined);\n\n    /** Called when ANY edge is clicked in the rendered view of the network */\n    onEdgeClicked(edge: Edge | undefined);\n\n    /** Retrieve the list of action for this provider. */\n    getProviderActions(): Action[];\n\n    /** Retrieve the list of action for a given node, and this provider. */\n    getNodeActions(node: Node): Action[];\n    \n    /** Retrieve the list of action for a given edge, and this provider. */\n    getEdgeActions(edge: Edge): Action[];\n\n    /** Called when the providers are discarded. Can be use to cancel subscriptions */\n    onDestroy();\n}\n\nexport interface NetworkContext {\n    /** Name of this network, for use in selections */\n    name: string;\n    /** Vis.js data structures */\n    nodes: DataSet;\n    edges: DataSet;\n    /** Useful services */\n    searchService: SearchService;\n    networkService: VisNetworkService;\n    appService: AppService;\n    intlService: IntlService;\n    exprBuilder: ExprBuilder;\n    /** Interactions */\n    select(node?: Node, edge?: Edge): void;\n}\n\n\nexport class NetworkDataset {\n\n    // Node index\n    private readonly nodeIdx: Map = new Map();\n\n    // Edge index\n    private readonly edgeIdx: Map = new Map();\n\n\n    /** Returns whether this node exists */\n    public hasNode(id: string): boolean {\n        return this.nodeIdx.has(id);\n    }\n    \n    /** Returns whether this edge exists */\n    public hasEdge(id: string): boolean {\n        return this.edgeIdx.has(id);\n    }\n\n    /** Returns the node with given id */\n    public getNode(id: string): Node | undefined {\n        return this.nodeIdx.get(id);\n    }\n\n    /** Returns the edge with given id */\n    public getEdge(id: string): Edge | undefined {\n        return this.edgeIdx.get(id);\n    }\n\n    /** Get the list of nodes */\n    public getNodes(): Node[] {\n        return Array.from(this.nodeIdx.values());\n    }\n\n    /** Get the list of edges */\n    public getEdges(): Edge[] {\n        return Array.from(this.edgeIdx.values());\n    }    \n\n    /** Get the list of visible nodes */\n    public getVisibleNodes(): Node[] {\n        return this.getNodes().filter(n => n.visible);\n    }\n\n    /** Get the list of visible edges */\n    public getVisibleEdges(): Edge[] {\n        return this.getEdges().filter(e => e.visible);\n    }\n\n    /** Get the list of node ids */\n    public getNodeIds(): string[] {\n        return Array.from(this.nodeIdx.keys());\n    }\n\n    /** Get the list of edge ids */\n    public getEdgeIds(): string[] {\n        return Array.from(this.edgeIdx.keys());\n    }\n    \n    /** Clears this dataset */\n    public clear() {\n        this.nodeIdx.clear();\n        this.edgeIdx.clear();\n    }\n\n    /** Add one or multiple nodes */\n    public addNodes(nodes: Node | Node[]) {\n        Array.isArray(nodes)? nodes.forEach(node => this.addNode(node)) : this.addNode(nodes);\n    }\n\n    /** Add one or multiple edges. */\n    public addEdges(edges: Edge | Edge[]) {\n        Array.isArray(edges)? edges.forEach(edge => this.addEdge(edge)) : this.addEdge(edges);\n    }\n\n    /** Remove one or multiple nodes. /!\\ Connected edges MUST be removed as well (use cleanRemoveNode() to do so) */\n    private removeNodes(ids: string | string[]) {\n        Array.isArray(ids)? ids.forEach(id => this.removeNode(id)) : this.removeNode(ids);\n    }\n\n    /** Remove one or multiple edges. */\n    public removeEdges(ids: string | string[]) {\n        Array.isArray(ids)? ids.forEach(id => this.removeEdge(id)) : this.removeEdge(ids);\n    }\n\n    /** Remove a node and its adjacent edges. keepDanglingNodes = false (default) removes the remaining nodes with no neighbor */\n    public cleanRemoveNode(nodeId: string, keepDanglingNodes?: boolean) {\n        this.getAdjacentEdges(nodeId).forEach(edge => {\n            const neighbor = this.getNode(edge.from === nodeId ? edge.to : edge.from) as Node;\n            this.removeEdges(edge.id);\n            neighbor.count -= edge.count;\n            if(!keepDanglingNodes && this.getAdjacentEdges(neighbor.id).length === 0) {\n                this.removeNodes(neighbor.id);\n            }\n        });\n    }\n\n    /** Get the edges adjacent to a node (O(n) method) */\n    public getAdjacentEdges(nodeId: string): Edge[] {\n        return this.getEdges().filter(e => e.from === nodeId || e.to === nodeId);\n    }\n\n    /** Get the nodes connected to a node via a single node (0(n) method) */\n    public getConnectedNodes(nodeId: string): Node[] {\n        return this.getAdjacentEdges(nodeId)\n                    .map(e => this.getNode(e.from === nodeId ? e.to : e.from) as Node);\n    }\n\n    /**\n     * Merge this dataset with another one. \n     * \n     * When duplicates nodes or edges are found:\n     * - The existing item is kept and updated\n     * - Their 'count' properties are added\n     * - Their 'visible' properties are ORed\n     * - Their nodeOptions and edgeOptions are updated\n     * \n     * @param dataset \n     */\n    public merge(dataset: NetworkDataset): NetworkDataset {\n\n        dataset.getNodes().forEach(node => {\n            node = Object.assign({}, node); // Avoid modifying the original datasets\n            if(!this.hasNode(node.id)) {\n                this.addNode(node);\n            }\n            else {\n                // Merge the new node with the existing one (which takes precedence by default)\n                let existingNode = this.getNode(node.id) as Node;\n                if((node.precedence || 0) > (existingNode.precedence || 0)) {\n                    // Set the new node in the node index\n                    this.nodeIdx.set(node.id, node);\n                    // swap existingNode and node for the merging of count, visible and node options\n                    const temp = node;\n                    node = existingNode;\n                    existingNode = temp;\n                }\n                existingNode.count += node.count;\n                existingNode.visible = existingNode.visible || node.visible;\n                let options: {[key: string]: any};\n                if(typeof existingNode.type.nodeOptions === \"function\") {\n                    options = existingNode.type.nodeOptions(existingNode, existingNode.type);\n                }\n                else {\n                    options = existingNode.type.nodeOptions;\n                }\n                Utils.extend(existingNode, options);\n            }\n        });\n\n        dataset.getEdges().forEach(edge => {\n            edge = Object.assign({}, edge); // Avoid modifying the original datasets\n            if(!this.hasEdge(edge.id)) {\n                this.addEdge(edge);\n            }\n            else {\n                // Merge the new edge with the existing one (which takes precedence)\n                // eg. statistical and semantic edges\n                const existingEdge = this.getEdge(edge.id) as Edge;\n                existingEdge.count += edge.count;\n                existingEdge.visible = existingEdge.visible || edge.visible;\n                // Merge edge labels (taking duplicates into account)\n                if(!!existingEdge[\"label\"] && !!edge[\"label\"]){\n                    edge[\"labels\"].forEach(label => {\n                        if(existingEdge[\"labels\"].indexOf(label) === -1) {\n                            existingEdge[\"label\"] += \", \"+label;\n                            existingEdge[\"labels\"].push(label);\n                        }\n                    });\n                }\n                let options: {[key: string]: any};\n                if(typeof existingEdge.type.edgeOptions === \"function\") {\n                    const nodes = [existingEdge.from, existingEdge.to].map(id => this.nodeIdx[id]);\n                    options = existingEdge.type.edgeOptions(nodes, existingEdge, existingEdge.type);\n                }\n                else {\n                    options = existingEdge.type.edgeOptions;\n                }\n                Utils.extend(existingEdge, options);\n            }\n        });\n\n        return this;\n    }\n\n    /** Transfer nodes and edges to the Vis nodes and edges DataSets */\n    updateDatasets(nodes: DataSet, edges: DataSet) {\n        nodes.remove(nodes.get().filter(n => !this.getNode(n.id)?.visible));\n        edges.remove(edges.get().filter(e => !this.getEdge(e.id)?.visible));\n        nodes.update(this.getVisibleNodes());\n        edges.update(this.getVisibleEdges());\n    }\n\n    \n    private addNode(node: Node) {\n        if(this.hasNode(node.id)) {\n            throw new Error(`Node '${node.id}' already in dataset`);\n        }\n        this.nodeIdx.set(node.id, node);\n    }\n    \n    private addEdge(edge: Edge) {\n        if(this.hasEdge(edge.id)) {\n            throw new Error(`Edge '${edge.id}' already in dataset`);\n        }\n        if(!this.hasNode(edge.from) || !this.hasNode(edge.to)) {\n            throw new Error(`Edge '${edge.id}' cannot be added as one of the nodes is missing from the dataset`)\n        }\n        this.edgeIdx.set(edge.id, edge);\n    }\n\n    private removeNode(id: string) {\n        this.nodeIdx.delete(id);\n    }\n\n    private removeEdge(id: string) {\n        this.edgeIdx.delete(id);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/EdgeType.html":{"url":"interfaces/EdgeType.html","title":"interface - EdgeType","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  EdgeType\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            network/network-models.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            edgeOptions\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            field\n                                        \n                                \n                                \n                                        \n                                            nodeTypes\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        edgeOptions\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        edgeOptions:     literal type | \n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type | \n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Vis Edge options (merged in the Edge objects). See https://visjs.github.io/vis-network/docs/network/edges.html\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        field\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        field:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    If a field is provided, it can be used to filter the node value (and access the label, formatter, etc.)\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        nodeTypes\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        nodeTypes:     NodeType[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     NodeType[]\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Node types attached to this edge type. Should typically be 2 items, but cooccurrence aggregation might return more\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { Subject } from 'rxjs';\nimport { Action } from '@sinequa/components/action';\nimport { Utils } from '@sinequa/core/base';\nimport { DataSet } from \"vis-data/peer/esm/vis-data\";\nimport { SearchService } from '@sinequa/components/search';\nimport { VisNetworkService } from 'ngx-vis';\nimport { AppService, ExprBuilder } from '@sinequa/core/app-utils';\nimport { IntlService } from '@sinequa/core/intl';\n\n// TYPES (configuration)\n\nexport interface NodeType {\n    name: string;\n    /** Vis Node options (merged in the Node objects). See https://visjs.github.io/vis-network/docs/network/nodes.html */\n    nodeOptions: {[key: string]: any} | ((node: Node, type: NodeType) => {[key: string]: any} );\n    /** If a field is provided, it can be used to filter the node value (and access the label, formatter, etc.) */\n    field?: string;\n}\n\nexport interface EdgeType {\n    /** Node types attached to this edge type. Should typically be 2 items, but cooccurrence aggregation might return more */\n    nodeTypes: NodeType[];\n    /** Vis Edge options (merged in the Edge objects). See https://visjs.github.io/vis-network/docs/network/edges.html */\n    edgeOptions: {[key: string]: any} | ((nodes: Node[], edge: Edge, type: EdgeType) => {[key: string]: any} );\n    /** If a field is provided, it can be used to filter the node value (and access the label, formatter, etc.) */\n    field?: string;\n}\n\n\n// DATA\n\n// Nodes (based on Vis Node interface)\n\nexport interface Node {\n    id: string;\n    label: string;\n\n    // Custom properties\n    type: NodeType;\n    provider: NetworkProvider;\n    visible: boolean;\n    /** count is a mutable property used to scale the node size in function of the size of adjacent edges*/\n    count: number;\n    /** the precedence of a node determines which node object is kept when merging two dataset (the highest precedence node is kept) */\n    precedence?: number;\n    // Context\n    context: NetworkContext;\n}\n\n// Edge (based on Vis Edge interface)\n\nexport interface Edge {\n    id: string;\n    from: string;\n    to: string;\n\n    // Custom properties\n    type: EdgeType;\n    provider: NetworkProvider;\n    visible: boolean;    \n    /** count is a property representing the strength of an edge, which scales the count of adjacent nodes*/\n    count: number;\n    /** A field value may be provided to filter search based on the edge field type */\n    fieldValue?: string;\n    // Context\n    context: NetworkContext;\n}\n\n\nexport interface NetworkProvider {\n    /** Whether or not the provider is active (if inactive, it will not provide empty datasets of nodes and edges) */\n    active: boolean;\n\n    /** Readable name of this provider */\n    name: string;\n\n    /** Dataset of this provider */\n    dataset: NetworkDataset;\n\n    /** Context (wrapper for general data about the network and services) */\n    context: NetworkContext;\n\n    /** Returns the Subject of this provider */\n    getProvider(): Subject;\n\n    /** Asynchronously provide data via it's provider Subject */\n    getData(context: NetworkContext); // skip/count handled internally\n\n    /** Called after the datasets provided by all providers have been merged into a single dataset */\n    onDatasetsMerged(dataset: NetworkDataset);\n\n    /** Called after the dataset is filtered and passed to Vis for rendering */\n    onNodesInserted(nodes: Node[]);\n\n    /** Called when ANY node is clicked in the rendered view of the network */\n    onNodeClicked(node: Node | undefined);\n\n    /** Called when ANY edge is clicked in the rendered view of the network */\n    onEdgeClicked(edge: Edge | undefined);\n\n    /** Retrieve the list of action for this provider. */\n    getProviderActions(): Action[];\n\n    /** Retrieve the list of action for a given node, and this provider. */\n    getNodeActions(node: Node): Action[];\n    \n    /** Retrieve the list of action for a given edge, and this provider. */\n    getEdgeActions(edge: Edge): Action[];\n\n    /** Called when the providers are discarded. Can be use to cancel subscriptions */\n    onDestroy();\n}\n\nexport interface NetworkContext {\n    /** Name of this network, for use in selections */\n    name: string;\n    /** Vis.js data structures */\n    nodes: DataSet;\n    edges: DataSet;\n    /** Useful services */\n    searchService: SearchService;\n    networkService: VisNetworkService;\n    appService: AppService;\n    intlService: IntlService;\n    exprBuilder: ExprBuilder;\n    /** Interactions */\n    select(node?: Node, edge?: Edge): void;\n}\n\n\nexport class NetworkDataset {\n\n    // Node index\n    private readonly nodeIdx: Map = new Map();\n\n    // Edge index\n    private readonly edgeIdx: Map = new Map();\n\n\n    /** Returns whether this node exists */\n    public hasNode(id: string): boolean {\n        return this.nodeIdx.has(id);\n    }\n    \n    /** Returns whether this edge exists */\n    public hasEdge(id: string): boolean {\n        return this.edgeIdx.has(id);\n    }\n\n    /** Returns the node with given id */\n    public getNode(id: string): Node | undefined {\n        return this.nodeIdx.get(id);\n    }\n\n    /** Returns the edge with given id */\n    public getEdge(id: string): Edge | undefined {\n        return this.edgeIdx.get(id);\n    }\n\n    /** Get the list of nodes */\n    public getNodes(): Node[] {\n        return Array.from(this.nodeIdx.values());\n    }\n\n    /** Get the list of edges */\n    public getEdges(): Edge[] {\n        return Array.from(this.edgeIdx.values());\n    }    \n\n    /** Get the list of visible nodes */\n    public getVisibleNodes(): Node[] {\n        return this.getNodes().filter(n => n.visible);\n    }\n\n    /** Get the list of visible edges */\n    public getVisibleEdges(): Edge[] {\n        return this.getEdges().filter(e => e.visible);\n    }\n\n    /** Get the list of node ids */\n    public getNodeIds(): string[] {\n        return Array.from(this.nodeIdx.keys());\n    }\n\n    /** Get the list of edge ids */\n    public getEdgeIds(): string[] {\n        return Array.from(this.edgeIdx.keys());\n    }\n    \n    /** Clears this dataset */\n    public clear() {\n        this.nodeIdx.clear();\n        this.edgeIdx.clear();\n    }\n\n    /** Add one or multiple nodes */\n    public addNodes(nodes: Node | Node[]) {\n        Array.isArray(nodes)? nodes.forEach(node => this.addNode(node)) : this.addNode(nodes);\n    }\n\n    /** Add one or multiple edges. */\n    public addEdges(edges: Edge | Edge[]) {\n        Array.isArray(edges)? edges.forEach(edge => this.addEdge(edge)) : this.addEdge(edges);\n    }\n\n    /** Remove one or multiple nodes. /!\\ Connected edges MUST be removed as well (use cleanRemoveNode() to do so) */\n    private removeNodes(ids: string | string[]) {\n        Array.isArray(ids)? ids.forEach(id => this.removeNode(id)) : this.removeNode(ids);\n    }\n\n    /** Remove one or multiple edges. */\n    public removeEdges(ids: string | string[]) {\n        Array.isArray(ids)? ids.forEach(id => this.removeEdge(id)) : this.removeEdge(ids);\n    }\n\n    /** Remove a node and its adjacent edges. keepDanglingNodes = false (default) removes the remaining nodes with no neighbor */\n    public cleanRemoveNode(nodeId: string, keepDanglingNodes?: boolean) {\n        this.getAdjacentEdges(nodeId).forEach(edge => {\n            const neighbor = this.getNode(edge.from === nodeId ? edge.to : edge.from) as Node;\n            this.removeEdges(edge.id);\n            neighbor.count -= edge.count;\n            if(!keepDanglingNodes && this.getAdjacentEdges(neighbor.id).length === 0) {\n                this.removeNodes(neighbor.id);\n            }\n        });\n    }\n\n    /** Get the edges adjacent to a node (O(n) method) */\n    public getAdjacentEdges(nodeId: string): Edge[] {\n        return this.getEdges().filter(e => e.from === nodeId || e.to === nodeId);\n    }\n\n    /** Get the nodes connected to a node via a single node (0(n) method) */\n    public getConnectedNodes(nodeId: string): Node[] {\n        return this.getAdjacentEdges(nodeId)\n                    .map(e => this.getNode(e.from === nodeId ? e.to : e.from) as Node);\n    }\n\n    /**\n     * Merge this dataset with another one. \n     * \n     * When duplicates nodes or edges are found:\n     * - The existing item is kept and updated\n     * - Their 'count' properties are added\n     * - Their 'visible' properties are ORed\n     * - Their nodeOptions and edgeOptions are updated\n     * \n     * @param dataset \n     */\n    public merge(dataset: NetworkDataset): NetworkDataset {\n\n        dataset.getNodes().forEach(node => {\n            node = Object.assign({}, node); // Avoid modifying the original datasets\n            if(!this.hasNode(node.id)) {\n                this.addNode(node);\n            }\n            else {\n                // Merge the new node with the existing one (which takes precedence by default)\n                let existingNode = this.getNode(node.id) as Node;\n                if((node.precedence || 0) > (existingNode.precedence || 0)) {\n                    // Set the new node in the node index\n                    this.nodeIdx.set(node.id, node);\n                    // swap existingNode and node for the merging of count, visible and node options\n                    const temp = node;\n                    node = existingNode;\n                    existingNode = temp;\n                }\n                existingNode.count += node.count;\n                existingNode.visible = existingNode.visible || node.visible;\n                let options: {[key: string]: any};\n                if(typeof existingNode.type.nodeOptions === \"function\") {\n                    options = existingNode.type.nodeOptions(existingNode, existingNode.type);\n                }\n                else {\n                    options = existingNode.type.nodeOptions;\n                }\n                Utils.extend(existingNode, options);\n            }\n        });\n\n        dataset.getEdges().forEach(edge => {\n            edge = Object.assign({}, edge); // Avoid modifying the original datasets\n            if(!this.hasEdge(edge.id)) {\n                this.addEdge(edge);\n            }\n            else {\n                // Merge the new edge with the existing one (which takes precedence)\n                // eg. statistical and semantic edges\n                const existingEdge = this.getEdge(edge.id) as Edge;\n                existingEdge.count += edge.count;\n                existingEdge.visible = existingEdge.visible || edge.visible;\n                // Merge edge labels (taking duplicates into account)\n                if(!!existingEdge[\"label\"] && !!edge[\"label\"]){\n                    edge[\"labels\"].forEach(label => {\n                        if(existingEdge[\"labels\"].indexOf(label) === -1) {\n                            existingEdge[\"label\"] += \", \"+label;\n                            existingEdge[\"labels\"].push(label);\n                        }\n                    });\n                }\n                let options: {[key: string]: any};\n                if(typeof existingEdge.type.edgeOptions === \"function\") {\n                    const nodes = [existingEdge.from, existingEdge.to].map(id => this.nodeIdx[id]);\n                    options = existingEdge.type.edgeOptions(nodes, existingEdge, existingEdge.type);\n                }\n                else {\n                    options = existingEdge.type.edgeOptions;\n                }\n                Utils.extend(existingEdge, options);\n            }\n        });\n\n        return this;\n    }\n\n    /** Transfer nodes and edges to the Vis nodes and edges DataSets */\n    updateDatasets(nodes: DataSet, edges: DataSet) {\n        nodes.remove(nodes.get().filter(n => !this.getNode(n.id)?.visible));\n        edges.remove(edges.get().filter(e => !this.getEdge(e.id)?.visible));\n        nodes.update(this.getVisibleNodes());\n        edges.update(this.getVisibleEdges());\n    }\n\n    \n    private addNode(node: Node) {\n        if(this.hasNode(node.id)) {\n            throw new Error(`Node '${node.id}' already in dataset`);\n        }\n        this.nodeIdx.set(node.id, node);\n    }\n    \n    private addEdge(edge: Edge) {\n        if(this.hasEdge(edge.id)) {\n            throw new Error(`Edge '${edge.id}' already in dataset`);\n        }\n        if(!this.hasNode(edge.from) || !this.hasNode(edge.to)) {\n            throw new Error(`Edge '${edge.id}' cannot be added as one of the nodes is missing from the dataset`)\n        }\n        this.edgeIdx.set(edge.id, edge);\n    }\n\n    private removeNode(id: string) {\n        this.nodeIdx.delete(id);\n    }\n\n    private removeEdge(id: string) {\n        this.edgeIdx.delete(id);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/FacetChartDataPoint.html":{"url":"interfaces/FacetChartDataPoint.html","title":"interface - FacetChartDataPoint","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  FacetChartDataPoint\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            ngx-charts/facet-chart/facet-chart.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        ChartDataPoint\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            $item\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        $item\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        $item:     AggregationItem\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     AggregationItem\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import {Component, Input, OnInit, OnDestroy, OnChanges, SimpleChanges} from \"@angular/core\";\nimport {Results, Aggregation, AggregationItem} from \"@sinequa/core/web-services\";\nimport {Utils} from \"@sinequa/core/base\";\nimport {IntlService} from \"@sinequa/core/intl\";\nimport {AppService} from \"@sinequa/core/app-utils\";\nimport {SelectionService} from '@sinequa/components/selection';\nimport {Subscription} from \"rxjs\";\nimport {ChartOptions, ChartDataPoint} from \"../chart/chart\";\nimport {FacetService, AbstractFacet} from \"@sinequa/components/facet\";\nimport {Action} from \"@sinequa/components/action\";\n\nexport interface FacetChartDataPoint extends ChartDataPoint {\n    $item: AggregationItem;\n}\n\n@Component({\n    selector: \"sq-facet-ngx-chart\",\n    templateUrl: \"./facet-chart.html\"\n})\nexport class FacetNgxChart extends AbstractFacet implements OnInit, OnChanges, OnDestroy {\n    @Input() results: Results;\n    @Input() aggregation: string;\n    @Input() aggregations: string[];\n    @Input() chartType: string;\n    @Input() colorScheme: string;\n    @Input() colors: string[] = [\"#7aa3e5\"];    // Single color (default is bar chart)\n    @Input() filteredColor: string = \"#C3E6CB\";\n    @Input() selectedColor: string = \"#7acce5\";\n\n    // Aggregation from the Results object\n    data: Aggregation | undefined;\n\n    // sq-charts inputs\n    dataPoints: FacetChartDataPoint[];\n    options: ChartOptions;\n\n    private readonly selectedValues = new Set();\n\n    // Actions (displayed in facet menu)\n    // All actions are built in the constructor\n    private readonly clearFilters: Action;\n    private readonly selectField: Action;\n\n    // Subscriptions\n    private localeChange: Subscription;\n    private selectionChange: Subscription;\n\n    constructor(\n        private facetService: FacetService,\n        private intlService: IntlService,\n        private selectionService: SelectionService,\n        private appService: AppService\n    ){\n        super();\n\n        // Clear the current filters\n        this.clearFilters = new Action({\n            icon: \"far fa-minus-square\",\n            title: \"msg#facet.clearSelects\",\n            action: () => {\n                this.facetService.clearFiltersSearch(this.getName(), true);\n            }\n        });\n\n        this.selectField = new Action({\n            title: \"Select field\",\n            updater: (action) => {\n                if(this.aggregations) {                 \n                    action.text = this.facetService.getAggregationLabel(this.aggregation);\n                    action.children = this.aggregations\n                        .filter(v => v!==this.aggregation)\n                        .map(agg => {\n                            return new Action({\n                                text: this.facetService.getAggregationLabel(agg),\n                                action : () => {\n                                    this.aggregation = agg;\n                                    this.ngOnChanges(  {results: true});\n                                }\n                            });\n                        });\n                }\n            }\n        });\n\n    }\n\n    /**\n     * Name of the facet, used to create and retrieve selections\n     * through the facet service.\n     */\n    getName() : string {\n        return this.aggregation;\n    }\n\n    /**\n     * Returns all the actions that are relevant in the current context\n     */\n    override get actions(): Action[] {\n        const actions: Action[] = [];\n        if(this.hasFiltered()) {\n            actions.push(this.clearFilters);\n        }\n        if(!!this.selectField.text) {\n            actions.push(this.selectField);\n        }\n        return actions;\n    }\n\n    /**\n     * Returns true if there is an active selection (or exclusion) from this facet\n     */\n    hasFiltered(): boolean {\n        return this.facetService.hasFiltered(this.getName());\n    }\n\n    /**\n     * Generates the sq-chart input data, including formatting\n     */\n    private makeData() {\n        this.dataPoints = [];\n        if(this.data && this.data.items){\n            for (const item of this.data.items) {\n                this.dataPoints.push({\n                    name: this.facetService.formatValue(item),\n                    value: item.count,\n                    $item: item\n                });\n            }\n        }\n    }\n\n    /**\n     * Update selected values (the value in the aggregation that belong to a selected document)\n     */\n    private updateSelectedValues(){\n        this.selectedValues.clear();\n        this.results.records\n            .filter(record => record.$selected)\n            .forEach(record => {\n                if(this.data){\n                    const val = record[this.appService.getColumnAlias(this.appService.getColumn(this.data.column))];\n                    if(val){\n                        if(Utils.isString(val)){    // Sourcestr\n                            this.selectedValues.add(val.toLowerCase());\n                        }\n                        if(Utils.isArray(val)){\n                            val.forEach(v => {\n                                if(Utils.isString(v))\n                                    this.selectedValues.add(v.toLowerCase()); // Sourcecsv\n                                else\n                                    this.selectedValues.add(v.value.toLowerCase()); // Entity\n                            });\n                        }\n                    }\n                }\n            });\n    }\n\n    /**\n     * Create the chart options\n     */\n    private createChartOptions(){\n        this.options = {\n            type: this.chartType,\n            tickFormatter: this.tickFormatter,\n            colorScheme: this.colorScheme\n        };\n\n        if (this.colors && this.colors.length > 0) {\n            this.options.getItemColor = (value: string): string => {\n                const index = this.dataPoints.findIndex(dataPoint => dataPoint.name === value);\n                if (index === -1) {\n                    return \"black\";\n                }\n                const item = this.getItem(this.dataPoints[index]);\n                if (item) {\n                    if (this.isFiltered(item)) {\n                        return this.filteredColor;\n                    }\n                    if(this.selectedValues.has(Utils.toSqlValue(item.value).toLowerCase())){\n                        return this.selectedColor;\n                    }\n                }\n                return this.colors[index % this.colors.length]; // Rolling colors scheme\n            };\n        }\n    }\n\n    tickFormatter = (value: any): string => {\n        if (Utils.isNumber(value)) {\n            // No fractional counts\n            if (value % 1 !== 0) {\n                return \"\";\n            }\n            return this.intlService.formatNumber(value);\n        }\n        return value;\n    }\n\n    /**\n     * Subscribe to language changes, in order to reformat the data points.\n     * Subscribe to selection changes, in order to highlight selected documents.\n     */\n    ngOnInit() {\n        this.localeChange = Utils.subscribe(this.intlService.events,\n            (value) => {\n                this.makeData();\n            });\n        this.selectionChange = this.selectionService.events.subscribe(event => {\n            this.ngOnChanges(  {results: true});\n        });\n    }\n\n\n    ngOnChanges(changes: SimpleChanges) {\n        this.selectField.update();\n\n        if (changes.results) {\n            // may be null if no data\n            this.data = this.facetService.getAggregation(this.aggregation, this.results, {facetName: this.getName()});\n\n            this.updateSelectedValues();\n\n            this.createChartOptions();\n\n            this.makeData();\n        }\n    }\n\n    ngOnDestroy() {\n        this.localeChange.unsubscribe();\n        this.selectionChange.unsubscribe();\n    }\n\n    click(dataPoint: ChartDataPoint) {\n        if (this.data) {\n            const item = this.getItem(dataPoint);\n            if (!!item) {\n                if(!this.isFiltered(item))\n                    this.facetService.addFilterSearch(this.getName(), this.data, item);\n                else\n                    this.facetService.removeFilterSearch(this.getName(), this.data, item);\n            }\n        }\n    }\n\n    /**\n     * Returns true if the given AggregationItem is filtered\n     * @param item\n     */\n    isFiltered(item: AggregationItem) : boolean {\n        return !!this.data && this.facetService.itemFiltered(this.getName(), this.data, item);\n    }\n\n    getItem(dataPoint: ChartDataPoint): AggregationItem | undefined {\n        const _dataPoint = this.dataPoints.find(_dataPoint => _dataPoint.name === dataPoint.name && _dataPoint.value === dataPoint.value);\n        if (!!_dataPoint && !!_dataPoint.$item) {\n            return _dataPoint.$item;\n        }\n        return undefined;\n    }\n\n    /* AbstractFacet abstract methods */\n    override isHidden(): boolean {\n        // Always display if multivalued\n        return !this.aggregations && (!this.data || !this.dataPoints);\n    }\n\n}\n    \n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/FacetDateConfig.html":{"url":"interfaces/FacetDateConfig.html","title":"interface - FacetDateConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  FacetDateConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            timeline/bootstrap/facet-date.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                    FacetConfig\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            type\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        type\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        type:     \n\n                                    \n                                \n\n\n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import {\n    Component,\n    OnInit,\n    OnDestroy,\n    Input,\n    OnChanges,\n    SimpleChanges,\n    ChangeDetectorRef,\n} from \"@angular/core\";\nimport { FormBuilder, FormControl, FormGroup } from \"@angular/forms\";\nimport { Action } from \"@sinequa/components/action\";\nimport { AdvancedService } from \"@sinequa/components/advanced\";\nimport { AbstractFacet, FacetConfig, FacetService } from \"@sinequa/components/facet\";\nimport { SearchService } from \"@sinequa/components/search\";\nimport {\n    AppService,\n    Expr,\n    ExprBuilder,\n    ExprOperator,\n} from \"@sinequa/core/app-utils\";\nimport { Utils } from \"@sinequa/core/base\";\nimport {\n    Aggregation,\n    AggregationItem,\n    Results,\n} from \"@sinequa/core/web-services\";\nimport { Subscription } from \"rxjs\";\nimport { debounceTime, filter, map } from \"rxjs/operators\";\nimport { BsFacetTimelineComponent, TimelineSeries } from \".\";\n\nexport interface FacetDateParams {\n    aggregation: string\n    showCount?: boolean;\n    timelineAggregation?: string;\n    displayEmptyDistributionIntervals?: boolean;\n    allowPredefinedRange?: boolean;\n    allowCustomRange?: boolean;\n    showCustomRange?: boolean;\n    replaceCurrent?: boolean;\n}\n\nexport interface FacetDateConfig extends FacetConfig {\n    type: 'date';\n}\n\n@Component({\n    selector: \"sq-facet-date\",\n    templateUrl: \"./facet-date.html\",\n    styleUrls: [\"./facet-date.scss\"],\n})\nexport class BsFacetDate\n    extends AbstractFacet\n    implements FacetDateParams, OnInit, OnChanges, OnDestroy\n{\n    @Input() name: string = \"Date\";\n    @Input() results: Results;\n    @Input() aggregation: string = \"Modified\";\n    @Input() timelineAggregation: string = \"Timeline\";\n    @Input(\"field\") _field?: string;\n    @Input() showCount: boolean = true; // Show the number of occurrences\n    @Input() displayEmptyDistributionIntervals: boolean = true; // Display items with count === 0\n    @Input() allowPredefinedRange = true; // will allow or not the use of datepickers and timeline for custom range selection\n    @Input() allowCustomRange = true; // will allow or not the use of datepickers and timeline for custom range selection\n    @Input() showCustomRange = false; // will show/hide datepickers and timeline, once allowed\n    @Input() replaceCurrent = true; // if true, the previous \"select\" is removed first\n\n    clearFiltersAction: Action;\n    items: AggregationItem[] = [];\n\n    form: FormGroup;\n    dateRangeControl: FormControl;\n\n    timeSeries: TimelineSeries[] = [];\n    selection: (Date | undefined)[];\n\n    protected subscriptions: Subscription[] = [];\n    protected data: Aggregation | undefined;\n\n    get field(): string {return this._field || this.data?.column || ''}\n\n    constructor(\n        protected facetService: FacetService,\n        protected formBuilder: FormBuilder,\n        protected exprBuilder: ExprBuilder,\n        protected searchService: SearchService,\n        protected advancedService: AdvancedService,\n        protected appService: AppService,\n        public cdRef: ChangeDetectorRef\n    ) {\n        super();\n\n        this.clearFiltersAction = new Action({\n            icon: \"far fa-minus-square\",\n            title: \"msg#facet.filters.clear\",\n            action: () => {\n                this.facetService.clearFiltersSearch(this.name, true);\n            },\n        });\n    }\n\n    ngOnInit() {\n        if (this.allowCustomRange) {\n            this.dateRangeControl = new FormControl(\n                [undefined, undefined],\n                [\n                    this.advancedService.validators.range(this.field),\n                    this.advancedService.validators.date(this.field),\n                ]\n            );\n\n            this.form = this.formBuilder.group({\n                dateRange: this.dateRangeControl,\n            });\n\n            // Listen to query changes\n            this.subscriptions.push(\n                this.searchService.queryStream.subscribe(() => {\n                    const value = this.getRangeValue();\n                    this.dateRangeControl.setValue(value, { emitEvent: false });\n                    this.selection = !value[0] && !value[1] ? undefined : value;\n                })\n            );\n\n            // Listen to form changes\n            this.subscriptions.push(\n                this.dateRangeControl.valueChanges\n                    .pipe(\n                        debounceTime(500),\n                        filter(() => this.form.valid)\n                    )\n                    .subscribe((value: (undefined | Date)[]) => {\n                        this.facetService.clearFiltersSearch(this.name, true);\n                        this.setCustomDateSelect(value);\n                    })\n            );\n        }\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n        if (this.allowCustomRange) {\n            this.updateTimeSeries(this.timelineAggregation);\n        }\n\n        if (changes.results) {\n            this.data = this.getAggregation(this.aggregation);\n            this.updateItems();\n        }\n    }\n\n    ngOnDestroy() {\n        this.subscriptions.map((item) => item.unsubscribe());\n    }\n\n    override get actions(): Action[] {\n        const actions: Action[] = [];\n        if (this.facetService.hasFiltered(this.name) && actions.length === 0) {\n            actions.push(this.clearFiltersAction);\n        }\n        return actions;\n    }\n\n    filterItem(item: AggregationItem, event) {\n        if (!this.isFiltered(item)) {\n            this.facetService.addFilterSearch(this.name, this.data!, item, {\n                replaceCurrent: this.replaceCurrent,\n            });\n        } else {\n            this.facetService.removeFilterSearch(this.name, this.data!, item);\n        }\n        event.preventDefault();\n    }\n\n    toggleCustomRange(event) {\n        this.showCustomRange = !this.showCustomRange;\n        event.stopPropagation();\n    }\n\n    private updateItems() {\n        this.items = this.displayEmptyDistributionIntervals\n            ? this.data?.items || []\n            : this.data?.items?.filter((item) => item.count > 0) || [];\n    }\n\n    private updateTimeSeries(aggregationName: string) {\n        this.timeSeries = [];\n        const ccaggregation = this.appService.getCCAggregation(aggregationName);\n        const aggregation = this.getAggregation(aggregationName);\n        if (aggregation && ccaggregation)\n            this.timeSeries.push(\n                BsFacetTimelineComponent.createTimeseries(\n                    { aggregation: aggregationName, primary: true },\n                    aggregation,\n                    ccaggregation\n                )\n            );\n    }\n\n    private getAggregation(aggregationName: string): Aggregation | undefined {\n        let aggregation = this.facetService.getAggregation(\n            aggregationName,\n            this.results\n        );\n\n        if (!aggregation) {\n            const query = Utils.copy(this.searchService.query);\n            query.action = \"aggregate\";\n            query.aggregations = [aggregationName];\n\n            this.searchService\n                .getResults(query, undefined, { searchInactive: true })\n                .pipe(\n                    map((results) => {\n                        aggregation = results.aggregations[0];\n                    })\n                );\n        }\n\n        return aggregation;\n    }\n\n    private setCustomDateSelect(range: (undefined | Date)[] | undefined) {\n        let expr: string | undefined;\n        if (range) {\n            const from = range[0];\n            const to = range[1];\n            if (from && to) {\n                expr = this.exprBuilder.makeRangeExpr(this.field, from, to);\n            } else if (from) {\n                expr = this.exprBuilder.makeNumericalExpr(\n                    this.field,\n                    \">=\",\n                    from\n                );\n            } else if (to) {\n                expr = this.exprBuilder.makeNumericalExpr(this.field, \" 1) {\n            return expr.values;\n        } else {\n            return expr.value!;\n        }\n    }\n\n    public updateRange(range: Date[]) {\n        if (!!range) {\n            this.setCustomDateSelect(range);\n        }\n    }\n\n    public isFiltered(item: AggregationItem): boolean {\n        const filtered = this.facetService.getAggregationItemsFiltered(\n            this.name\n        );\n        return (\n            this.facetService.filteredIndex(this.data, filtered, item) !== -1\n        );\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/FacetDateParams.html":{"url":"interfaces/FacetDateParams.html","title":"interface - FacetDateParams","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  FacetDateParams\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            timeline/bootstrap/facet-date.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            aggregation\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            allowCustomRange\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            allowPredefinedRange\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            displayEmptyDistributionIntervals\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            replaceCurrent\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            showCount\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            showCustomRange\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            timelineAggregation\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        aggregation\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        aggregation:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        allowCustomRange\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        allowCustomRange:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        allowPredefinedRange\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        allowPredefinedRange:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        displayEmptyDistributionIntervals\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        displayEmptyDistributionIntervals:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        replaceCurrent\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        replaceCurrent:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        showCount\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        showCount:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        showCustomRange\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        showCustomRange:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        timelineAggregation\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        timelineAggregation:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import {\n    Component,\n    OnInit,\n    OnDestroy,\n    Input,\n    OnChanges,\n    SimpleChanges,\n    ChangeDetectorRef,\n} from \"@angular/core\";\nimport { FormBuilder, FormControl, FormGroup } from \"@angular/forms\";\nimport { Action } from \"@sinequa/components/action\";\nimport { AdvancedService } from \"@sinequa/components/advanced\";\nimport { AbstractFacet, FacetConfig, FacetService } from \"@sinequa/components/facet\";\nimport { SearchService } from \"@sinequa/components/search\";\nimport {\n    AppService,\n    Expr,\n    ExprBuilder,\n    ExprOperator,\n} from \"@sinequa/core/app-utils\";\nimport { Utils } from \"@sinequa/core/base\";\nimport {\n    Aggregation,\n    AggregationItem,\n    Results,\n} from \"@sinequa/core/web-services\";\nimport { Subscription } from \"rxjs\";\nimport { debounceTime, filter, map } from \"rxjs/operators\";\nimport { BsFacetTimelineComponent, TimelineSeries } from \".\";\n\nexport interface FacetDateParams {\n    aggregation: string\n    showCount?: boolean;\n    timelineAggregation?: string;\n    displayEmptyDistributionIntervals?: boolean;\n    allowPredefinedRange?: boolean;\n    allowCustomRange?: boolean;\n    showCustomRange?: boolean;\n    replaceCurrent?: boolean;\n}\n\nexport interface FacetDateConfig extends FacetConfig {\n    type: 'date';\n}\n\n@Component({\n    selector: \"sq-facet-date\",\n    templateUrl: \"./facet-date.html\",\n    styleUrls: [\"./facet-date.scss\"],\n})\nexport class BsFacetDate\n    extends AbstractFacet\n    implements FacetDateParams, OnInit, OnChanges, OnDestroy\n{\n    @Input() name: string = \"Date\";\n    @Input() results: Results;\n    @Input() aggregation: string = \"Modified\";\n    @Input() timelineAggregation: string = \"Timeline\";\n    @Input(\"field\") _field?: string;\n    @Input() showCount: boolean = true; // Show the number of occurrences\n    @Input() displayEmptyDistributionIntervals: boolean = true; // Display items with count === 0\n    @Input() allowPredefinedRange = true; // will allow or not the use of datepickers and timeline for custom range selection\n    @Input() allowCustomRange = true; // will allow or not the use of datepickers and timeline for custom range selection\n    @Input() showCustomRange = false; // will show/hide datepickers and timeline, once allowed\n    @Input() replaceCurrent = true; // if true, the previous \"select\" is removed first\n\n    clearFiltersAction: Action;\n    items: AggregationItem[] = [];\n\n    form: FormGroup;\n    dateRangeControl: FormControl;\n\n    timeSeries: TimelineSeries[] = [];\n    selection: (Date | undefined)[];\n\n    protected subscriptions: Subscription[] = [];\n    protected data: Aggregation | undefined;\n\n    get field(): string {return this._field || this.data?.column || ''}\n\n    constructor(\n        protected facetService: FacetService,\n        protected formBuilder: FormBuilder,\n        protected exprBuilder: ExprBuilder,\n        protected searchService: SearchService,\n        protected advancedService: AdvancedService,\n        protected appService: AppService,\n        public cdRef: ChangeDetectorRef\n    ) {\n        super();\n\n        this.clearFiltersAction = new Action({\n            icon: \"far fa-minus-square\",\n            title: \"msg#facet.filters.clear\",\n            action: () => {\n                this.facetService.clearFiltersSearch(this.name, true);\n            },\n        });\n    }\n\n    ngOnInit() {\n        if (this.allowCustomRange) {\n            this.dateRangeControl = new FormControl(\n                [undefined, undefined],\n                [\n                    this.advancedService.validators.range(this.field),\n                    this.advancedService.validators.date(this.field),\n                ]\n            );\n\n            this.form = this.formBuilder.group({\n                dateRange: this.dateRangeControl,\n            });\n\n            // Listen to query changes\n            this.subscriptions.push(\n                this.searchService.queryStream.subscribe(() => {\n                    const value = this.getRangeValue();\n                    this.dateRangeControl.setValue(value, { emitEvent: false });\n                    this.selection = !value[0] && !value[1] ? undefined : value;\n                })\n            );\n\n            // Listen to form changes\n            this.subscriptions.push(\n                this.dateRangeControl.valueChanges\n                    .pipe(\n                        debounceTime(500),\n                        filter(() => this.form.valid)\n                    )\n                    .subscribe((value: (undefined | Date)[]) => {\n                        this.facetService.clearFiltersSearch(this.name, true);\n                        this.setCustomDateSelect(value);\n                    })\n            );\n        }\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n        if (this.allowCustomRange) {\n            this.updateTimeSeries(this.timelineAggregation);\n        }\n\n        if (changes.results) {\n            this.data = this.getAggregation(this.aggregation);\n            this.updateItems();\n        }\n    }\n\n    ngOnDestroy() {\n        this.subscriptions.map((item) => item.unsubscribe());\n    }\n\n    override get actions(): Action[] {\n        const actions: Action[] = [];\n        if (this.facetService.hasFiltered(this.name) && actions.length === 0) {\n            actions.push(this.clearFiltersAction);\n        }\n        return actions;\n    }\n\n    filterItem(item: AggregationItem, event) {\n        if (!this.isFiltered(item)) {\n            this.facetService.addFilterSearch(this.name, this.data!, item, {\n                replaceCurrent: this.replaceCurrent,\n            });\n        } else {\n            this.facetService.removeFilterSearch(this.name, this.data!, item);\n        }\n        event.preventDefault();\n    }\n\n    toggleCustomRange(event) {\n        this.showCustomRange = !this.showCustomRange;\n        event.stopPropagation();\n    }\n\n    private updateItems() {\n        this.items = this.displayEmptyDistributionIntervals\n            ? this.data?.items || []\n            : this.data?.items?.filter((item) => item.count > 0) || [];\n    }\n\n    private updateTimeSeries(aggregationName: string) {\n        this.timeSeries = [];\n        const ccaggregation = this.appService.getCCAggregation(aggregationName);\n        const aggregation = this.getAggregation(aggregationName);\n        if (aggregation && ccaggregation)\n            this.timeSeries.push(\n                BsFacetTimelineComponent.createTimeseries(\n                    { aggregation: aggregationName, primary: true },\n                    aggregation,\n                    ccaggregation\n                )\n            );\n    }\n\n    private getAggregation(aggregationName: string): Aggregation | undefined {\n        let aggregation = this.facetService.getAggregation(\n            aggregationName,\n            this.results\n        );\n\n        if (!aggregation) {\n            const query = Utils.copy(this.searchService.query);\n            query.action = \"aggregate\";\n            query.aggregations = [aggregationName];\n\n            this.searchService\n                .getResults(query, undefined, { searchInactive: true })\n                .pipe(\n                    map((results) => {\n                        aggregation = results.aggregations[0];\n                    })\n                );\n        }\n\n        return aggregation;\n    }\n\n    private setCustomDateSelect(range: (undefined | Date)[] | undefined) {\n        let expr: string | undefined;\n        if (range) {\n            const from = range[0];\n            const to = range[1];\n            if (from && to) {\n                expr = this.exprBuilder.makeRangeExpr(this.field, from, to);\n            } else if (from) {\n                expr = this.exprBuilder.makeNumericalExpr(\n                    this.field,\n                    \">=\",\n                    from\n                );\n            } else if (to) {\n                expr = this.exprBuilder.makeNumericalExpr(this.field, \" 1) {\n            return expr.values;\n        } else {\n            return expr.value!;\n        }\n    }\n\n    public updateRange(range: Date[]) {\n        if (!!range) {\n            this.setCustomDateSelect(range);\n        }\n    }\n\n    public isFiltered(item: AggregationItem): boolean {\n        const filtered = this.facetService.getAggregationItemsFiltered(\n            this.name\n        );\n        return (\n            this.facetService.filteredIndex(this.data, filtered, item) !== -1\n        );\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/FacetNgxChart.html":{"url":"components/FacetNgxChart.html","title":"component - FacetNgxChart","body":"\n                   \n\n\n\n\n\n  Components\n  \n  FacetNgxChart\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    ngx-charts/facet-chart/facet-chart.ts\n\n\n\n\n    \n        Extends\n    \n    \n            AbstractFacet\n    \n\n    \n        Implements\n    \n    \n                    OnInit\n                    OnChanges\n                    OnDestroy\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                sq-facet-ngx-chart\n            \n\n\n\n\n            \n                templateUrl\n                ./facet-chart.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                data\n                            \n                            \n                                dataPoints\n                            \n                            \n                                options\n                            \n                            \n                                tickFormatter\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                click\n                            \n                            \n                                getItem\n                            \n                            \n                                getName\n                            \n                            \n                                hasFiltered\n                            \n                            \n                                isFiltered\n                            \n                            \n                                    \n                                isHidden\n                            \n                            \n                                ngOnChanges\n                            \n                            \n                                ngOnDestroy\n                            \n                            \n                                ngOnInit\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                aggregation\n                            \n                            \n                                aggregations\n                            \n                            \n                                chartType\n                            \n                            \n                                colors\n                            \n                            \n                                colorScheme\n                            \n                            \n                                filteredColor\n                            \n                            \n                                results\n                            \n                            \n                                selectedColor\n                            \n                        \n                    \n                \n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    actions\n                                \n                            \n                        \n                    \n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(facetService: FacetService, intlService: IntlService, selectionService: SelectionService, appService: AppService)\n                    \n                \n                        \n                            \n                                Defined in ngx-charts/facet-chart/facet-chart.ts:46\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        facetService\n                                                  \n                                                        \n                                                                    FacetService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        intlService\n                                                  \n                                                        \n                                                                    IntlService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        selectionService\n                                                  \n                                                        \n                                                                    SelectionService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        appService\n                                                  \n                                                        \n                                                                    AppService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        aggregation\n                    \n                \n                \n                    \n                        Type :         string\n\n                    \n                \n                        \n                            \n                                    Defined in ngx-charts/facet-chart/facet-chart.ts:22\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        aggregations\n                    \n                \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                        \n                            \n                                    Defined in ngx-charts/facet-chart/facet-chart.ts:23\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        chartType\n                    \n                \n                \n                    \n                        Type :         string\n\n                    \n                \n                        \n                            \n                                    Defined in ngx-charts/facet-chart/facet-chart.ts:24\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        colors\n                    \n                \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Default value : [\"#7aa3e5\"]\n                    \n                \n                        \n                            \n                                    Defined in ngx-charts/facet-chart/facet-chart.ts:26\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        colorScheme\n                    \n                \n                \n                    \n                        Type :         string\n\n                    \n                \n                        \n                            \n                                    Defined in ngx-charts/facet-chart/facet-chart.ts:25\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        filteredColor\n                    \n                \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : \"#C3E6CB\"\n                    \n                \n                        \n                            \n                                    Defined in ngx-charts/facet-chart/facet-chart.ts:27\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        results\n                    \n                \n                \n                    \n                        Type :     Results\n\n                    \n                \n                        \n                            \n                                    Defined in ngx-charts/facet-chart/facet-chart.ts:21\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        selectedColor\n                    \n                \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : \"#7acce5\"\n                    \n                \n                        \n                            \n                                    Defined in ngx-charts/facet-chart/facet-chart.ts:28\n                            \n                        \n            \n        \n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        click\n                        \n                    \n                \n            \n            \n                \nclick(dataPoint: ChartDataPoint)\n                \n            \n\n\n            \n                \n                    Defined in ngx-charts/facet-chart/facet-chart.ts:235\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dataPoint\n                                    \n                                                ChartDataPoint\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getItem\n                        \n                    \n                \n            \n            \n                \ngetItem(dataPoint: ChartDataPoint)\n                \n            \n\n\n            \n                \n                    Defined in ngx-charts/facet-chart/facet-chart.ts:255\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dataPoint\n                                    \n                                                ChartDataPoint\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     AggregationItem | undefined\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getName\n                        \n                    \n                \n            \n            \n                \ngetName()\n                \n            \n\n\n            \n                \n                    Defined in ngx-charts/facet-chart/facet-chart.ts:91\n                \n            \n\n\n            \n                \n                    Name of the facet, used to create and retrieve selections\nthrough the facet service.\n\n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        hasFiltered\n                        \n                    \n                \n            \n            \n                \nhasFiltered()\n                \n            \n\n\n            \n                \n                    Defined in ngx-charts/facet-chart/facet-chart.ts:112\n                \n            \n\n\n            \n                \n                    Returns true if there is an active selection (or exclusion) from this facet\n\n\n                    \n                        Returns :         boolean\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isFiltered\n                        \n                    \n                \n            \n            \n                \nisFiltered(item: AggregationItem)\n                \n            \n\n\n            \n                \n                    Defined in ngx-charts/facet-chart/facet-chart.ts:251\n                \n            \n\n\n            \n                \n                    Returns true if the given AggregationItem is filtered\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    item\n                                    \n                                            AggregationItem\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        isHidden\n                        \n                    \n                \n            \n            \n                \n                    \n                    isHidden()\n                \n            \n\n\n            \n                \n                    Defined in ngx-charts/facet-chart/facet-chart.ts:264\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         boolean\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnChanges\n                        \n                    \n                \n            \n            \n                \nngOnChanges(changes: SimpleChanges)\n                \n            \n\n\n            \n                \n                    Defined in ngx-charts/facet-chart/facet-chart.ts:215\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    changes\n                                    \n                                                SimpleChanges\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnDestroy\n                        \n                    \n                \n            \n            \n                \nngOnDestroy()\n                \n            \n\n\n            \n                \n                    Defined in ngx-charts/facet-chart/facet-chart.ts:230\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnInit\n                        \n                    \n                \n            \n            \n                \nngOnInit()\n                \n            \n\n\n            \n                \n                    Defined in ngx-charts/facet-chart/facet-chart.ts:204\n                \n            \n\n\n            \n                \n                    Subscribe to language changes, in order to reformat the data points.\nSubscribe to selection changes, in order to highlight selected documents.\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        data\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Aggregation | undefined\n\n                    \n                \n                    \n                        \n                                Defined in ngx-charts/facet-chart/facet-chart.ts:31\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        dataPoints\n                        \n                    \n                \n            \n                \n                    \n                        Type :     FacetChartDataPoint[]\n\n                    \n                \n                    \n                        \n                                Defined in ngx-charts/facet-chart/facet-chart.ts:34\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        options\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ChartOptions\n\n                    \n                \n                    \n                        \n                                Defined in ngx-charts/facet-chart/facet-chart.ts:35\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        tickFormatter\n                        \n                    \n                \n            \n                \n                    \n                        Default value : () => {...}\n                    \n                \n                    \n                        \n                                Defined in ngx-charts/facet-chart/facet-chart.ts:189\n                        \n                    \n\n\n        \n    \n\n\n    \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        actions\n                    \n                \n\n                \n                    \n                        getactions()\n                    \n                \n                            \n                                \n                                    Defined in ngx-charts/facet-chart/facet-chart.ts:98\n                                \n                            \n                    \n                        \n                                Returns all the actions that are relevant in the current context\n\n\n                                \n                                    Returns :     Action[]\n\n                                \n                        \n                    \n\n            \n        \n\n\n\n\n    \n        import {Component, Input, OnInit, OnDestroy, OnChanges, SimpleChanges} from \"@angular/core\";\nimport {Results, Aggregation, AggregationItem} from \"@sinequa/core/web-services\";\nimport {Utils} from \"@sinequa/core/base\";\nimport {IntlService} from \"@sinequa/core/intl\";\nimport {AppService} from \"@sinequa/core/app-utils\";\nimport {SelectionService} from '@sinequa/components/selection';\nimport {Subscription} from \"rxjs\";\nimport {ChartOptions, ChartDataPoint} from \"../chart/chart\";\nimport {FacetService, AbstractFacet} from \"@sinequa/components/facet\";\nimport {Action} from \"@sinequa/components/action\";\n\nexport interface FacetChartDataPoint extends ChartDataPoint {\n    $item: AggregationItem;\n}\n\n@Component({\n    selector: \"sq-facet-ngx-chart\",\n    templateUrl: \"./facet-chart.html\"\n})\nexport class FacetNgxChart extends AbstractFacet implements OnInit, OnChanges, OnDestroy {\n    @Input() results: Results;\n    @Input() aggregation: string;\n    @Input() aggregations: string[];\n    @Input() chartType: string;\n    @Input() colorScheme: string;\n    @Input() colors: string[] = [\"#7aa3e5\"];    // Single color (default is bar chart)\n    @Input() filteredColor: string = \"#C3E6CB\";\n    @Input() selectedColor: string = \"#7acce5\";\n\n    // Aggregation from the Results object\n    data: Aggregation | undefined;\n\n    // sq-charts inputs\n    dataPoints: FacetChartDataPoint[];\n    options: ChartOptions;\n\n    private readonly selectedValues = new Set();\n\n    // Actions (displayed in facet menu)\n    // All actions are built in the constructor\n    private readonly clearFilters: Action;\n    private readonly selectField: Action;\n\n    // Subscriptions\n    private localeChange: Subscription;\n    private selectionChange: Subscription;\n\n    constructor(\n        private facetService: FacetService,\n        private intlService: IntlService,\n        private selectionService: SelectionService,\n        private appService: AppService\n    ){\n        super();\n\n        // Clear the current filters\n        this.clearFilters = new Action({\n            icon: \"far fa-minus-square\",\n            title: \"msg#facet.clearSelects\",\n            action: () => {\n                this.facetService.clearFiltersSearch(this.getName(), true);\n            }\n        });\n\n        this.selectField = new Action({\n            title: \"Select field\",\n            updater: (action) => {\n                if(this.aggregations) {                 \n                    action.text = this.facetService.getAggregationLabel(this.aggregation);\n                    action.children = this.aggregations\n                        .filter(v => v!==this.aggregation)\n                        .map(agg => {\n                            return new Action({\n                                text: this.facetService.getAggregationLabel(agg),\n                                action : () => {\n                                    this.aggregation = agg;\n                                    this.ngOnChanges(  {results: true});\n                                }\n                            });\n                        });\n                }\n            }\n        });\n\n    }\n\n    /**\n     * Name of the facet, used to create and retrieve selections\n     * through the facet service.\n     */\n    getName() : string {\n        return this.aggregation;\n    }\n\n    /**\n     * Returns all the actions that are relevant in the current context\n     */\n    override get actions(): Action[] {\n        const actions: Action[] = [];\n        if(this.hasFiltered()) {\n            actions.push(this.clearFilters);\n        }\n        if(!!this.selectField.text) {\n            actions.push(this.selectField);\n        }\n        return actions;\n    }\n\n    /**\n     * Returns true if there is an active selection (or exclusion) from this facet\n     */\n    hasFiltered(): boolean {\n        return this.facetService.hasFiltered(this.getName());\n    }\n\n    /**\n     * Generates the sq-chart input data, including formatting\n     */\n    private makeData() {\n        this.dataPoints = [];\n        if(this.data && this.data.items){\n            for (const item of this.data.items) {\n                this.dataPoints.push({\n                    name: this.facetService.formatValue(item),\n                    value: item.count,\n                    $item: item\n                });\n            }\n        }\n    }\n\n    /**\n     * Update selected values (the value in the aggregation that belong to a selected document)\n     */\n    private updateSelectedValues(){\n        this.selectedValues.clear();\n        this.results.records\n            .filter(record => record.$selected)\n            .forEach(record => {\n                if(this.data){\n                    const val = record[this.appService.getColumnAlias(this.appService.getColumn(this.data.column))];\n                    if(val){\n                        if(Utils.isString(val)){    // Sourcestr\n                            this.selectedValues.add(val.toLowerCase());\n                        }\n                        if(Utils.isArray(val)){\n                            val.forEach(v => {\n                                if(Utils.isString(v))\n                                    this.selectedValues.add(v.toLowerCase()); // Sourcecsv\n                                else\n                                    this.selectedValues.add(v.value.toLowerCase()); // Entity\n                            });\n                        }\n                    }\n                }\n            });\n    }\n\n    /**\n     * Create the chart options\n     */\n    private createChartOptions(){\n        this.options = {\n            type: this.chartType,\n            tickFormatter: this.tickFormatter,\n            colorScheme: this.colorScheme\n        };\n\n        if (this.colors && this.colors.length > 0) {\n            this.options.getItemColor = (value: string): string => {\n                const index = this.dataPoints.findIndex(dataPoint => dataPoint.name === value);\n                if (index === -1) {\n                    return \"black\";\n                }\n                const item = this.getItem(this.dataPoints[index]);\n                if (item) {\n                    if (this.isFiltered(item)) {\n                        return this.filteredColor;\n                    }\n                    if(this.selectedValues.has(Utils.toSqlValue(item.value).toLowerCase())){\n                        return this.selectedColor;\n                    }\n                }\n                return this.colors[index % this.colors.length]; // Rolling colors scheme\n            };\n        }\n    }\n\n    tickFormatter = (value: any): string => {\n        if (Utils.isNumber(value)) {\n            // No fractional counts\n            if (value % 1 !== 0) {\n                return \"\";\n            }\n            return this.intlService.formatNumber(value);\n        }\n        return value;\n    }\n\n    /**\n     * Subscribe to language changes, in order to reformat the data points.\n     * Subscribe to selection changes, in order to highlight selected documents.\n     */\n    ngOnInit() {\n        this.localeChange = Utils.subscribe(this.intlService.events,\n            (value) => {\n                this.makeData();\n            });\n        this.selectionChange = this.selectionService.events.subscribe(event => {\n            this.ngOnChanges(  {results: true});\n        });\n    }\n\n\n    ngOnChanges(changes: SimpleChanges) {\n        this.selectField.update();\n\n        if (changes.results) {\n            // may be null if no data\n            this.data = this.facetService.getAggregation(this.aggregation, this.results, {facetName: this.getName()});\n\n            this.updateSelectedValues();\n\n            this.createChartOptions();\n\n            this.makeData();\n        }\n    }\n\n    ngOnDestroy() {\n        this.localeChange.unsubscribe();\n        this.selectionChange.unsubscribe();\n    }\n\n    click(dataPoint: ChartDataPoint) {\n        if (this.data) {\n            const item = this.getItem(dataPoint);\n            if (!!item) {\n                if(!this.isFiltered(item))\n                    this.facetService.addFilterSearch(this.getName(), this.data, item);\n                else\n                    this.facetService.removeFilterSearch(this.getName(), this.data, item);\n            }\n        }\n    }\n\n    /**\n     * Returns true if the given AggregationItem is filtered\n     * @param item\n     */\n    isFiltered(item: AggregationItem) : boolean {\n        return !!this.data && this.facetService.itemFiltered(this.getName(), this.data, item);\n    }\n\n    getItem(dataPoint: ChartDataPoint): AggregationItem | undefined {\n        const _dataPoint = this.dataPoints.find(_dataPoint => _dataPoint.name === dataPoint.name && _dataPoint.value === dataPoint.value);\n        if (!!_dataPoint && !!_dataPoint.$item) {\n            return _dataPoint.$item;\n        }\n        return undefined;\n    }\n\n    /* AbstractFacet abstract methods */\n    override isHidden(): boolean {\n        // Always display if multivalued\n        return !this.aggregations && (!this.data || !this.dataPoints);\n    }\n\n}\n    \n\n    \n        \n    \n\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '    '\n    var COMPONENTS = [{'name': 'AgGridViewComponent', 'selector': 'sq-ag-grid-view'},{'name': 'BsEdgeInfoCard', 'selector': 'sq-edge-info-card'},{'name': 'BsFacetDate', 'selector': 'sq-facet-date'},{'name': 'BsFacetHeatmapComponent', 'selector': 'sq-facet-heatmap'},{'name': 'BsFacetTimelineComponent', 'selector': 'sq-facet-timeline'},{'name': 'BsHeatmapComponent', 'selector': 'sq-heatmap'},{'name': 'BsNodeInfoCard', 'selector': 'sq-node-info-card'},{'name': 'BsResultsHeatmapView', 'selector': 'sq-results-heatmap-view'},{'name': 'BsTimelineComponent', 'selector': 'sq-timeline'},{'name': 'BsTooltipComponent', 'selector': 'sq-tooltip'},{'name': 'DataModalComponent', 'selector': 'sq-data-modal'},{'name': 'FacetNgxChart', 'selector': 'sq-facet-ngx-chart'},{'name': 'FacetWrapperComponent', 'selector': 'facet-wrapper'},{'name': 'FusionChart', 'selector': 'sq-fusion-chart'},{'name': 'MapComponent', 'selector': 'sq-googlemaps'},{'name': 'MoneyCloudComponent', 'selector': 'sq-money-cloud'},{'name': 'MoneyTimelineComponent', 'selector': 'sq-money-timeline'},{'name': 'NetworkComponent', 'selector': 'sq-network'},{'name': 'NgxChart', 'selector': 'sq-ngx-chart'},{'name': 'ResultTimeline', 'selector': 'sq-result-timeline'},{'name': 'TimelineLegendComponent', 'selector': 'sq-timeline-legend'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'FacetNgxChart'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/FacetWrapperComponent.html":{"url":"components/FacetWrapperComponent.html","title":"component - FacetWrapperComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  FacetWrapperComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    ag-grid/facet-wrapper.component.ts\n\n\n\n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                facet-wrapper\n            \n\n\n            \n                styles\n                \nsq-facet-list, sq-facet-tree {\n    display: block;\n    width: 200px;\n}\n\n:is(sq-facet-list, sq-facet-tree) ::ng-deep .list-group > div.pb-2 {\n    padding-bottom: 0.25rem!important;\n    padding-top: 0.25rem!important;\n}\n   \n            \n\n            \n                template\n                \n\n\n            \n\n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                aggregationName\n                            \n                            \n                                field\n                            \n                            \n                                isTree\n                            \n                            \n                                name\n                            \n                            \n                                params\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                agInit\n                            \n                            \n                                doesFilterPass\n                            \n                            \n                                getModel\n                            \n                            \n                                isFilterActive\n                            \n                            \n                                setModel\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    datasource\n                                \n                                \n                                    results\n                                \n                                \n                                    aggregation\n                                \n                                \n                                    appService\n                                \n                                \n                                    facetService\n                                \n                            \n                        \n                    \n        \n    \n\n\n\n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        agInit\n                        \n                    \n                \n            \n            \n                \nagInit(params: IFilterParams)\n                \n            \n\n\n            \n                \n                    Defined in ag-grid/facet-wrapper.component.ts:59\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    params\n                                    \n                                                IFilterParams\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        doesFilterPass\n                        \n                    \n                \n            \n            \n                \ndoesFilterPass(params: IDoesFilterPassParams)\n                \n            \n\n\n            \n                \n                    Defined in ag-grid/facet-wrapper.component.ts:78\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    params\n                                    \n                                                IDoesFilterPassParams\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getModel\n                        \n                    \n                \n            \n            \n                \ngetModel()\n                \n            \n\n\n            \n                \n                    Defined in ag-grid/facet-wrapper.component.ts:82\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     { facetActive: boolean; }\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isFilterActive\n                        \n                    \n                \n            \n            \n                \nisFilterActive()\n                \n            \n\n\n            \n                \n                    Defined in ag-grid/facet-wrapper.component.ts:73\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         boolean\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        setModel\n                        \n                    \n                \n            \n            \n                \nsetModel(model: any)\n                \n            \n\n\n            \n                \n                    Defined in ag-grid/facet-wrapper.component.ts:86\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    model\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        aggregationName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in ag-grid/facet-wrapper.component.ts:32\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        field\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in ag-grid/facet-wrapper.component.ts:30\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isTree\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in ag-grid/facet-wrapper.component.ts:31\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in ag-grid/facet-wrapper.component.ts:33\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        params\n                        \n                    \n                \n            \n                \n                    \n                        Type :         IFilterParams\n\n                    \n                \n                    \n                        \n                                Defined in ag-grid/facet-wrapper.component.ts:28\n                        \n                    \n\n\n        \n    \n\n\n    \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        datasource\n                    \n                \n\n                \n                    \n                        getdatasource()\n                    \n                \n                            \n                                \n                                    Defined in ag-grid/facet-wrapper.component.ts:35\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        results\n                    \n                \n\n                \n                    \n                        getresults()\n                    \n                \n                            \n                                \n                                    Defined in ag-grid/facet-wrapper.component.ts:39\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        aggregation\n                    \n                \n\n                \n                    \n                        getaggregation()\n                    \n                \n                            \n                                \n                                    Defined in ag-grid/facet-wrapper.component.ts:43\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        appService\n                    \n                \n\n                \n                    \n                        getappService()\n                    \n                \n                            \n                                \n                                    Defined in ag-grid/facet-wrapper.component.ts:51\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        facetService\n                    \n                \n\n                \n                    \n                        getfacetService()\n                    \n                \n                            \n                                \n                                    Defined in ag-grid/facet-wrapper.component.ts:55\n                                \n                            \n\n            \n        \n\n\n\n\n    \n        import { IDoesFilterPassParams, IFilterParams } from \"ag-grid-community\";\nimport { Component } from \"@angular/core\";\nimport { SqDatasource } from \"./datasource\";\nimport { Aggregation, Results } from \"@sinequa/core/web-services\";\nimport { AppService } from \"@sinequa/core/app-utils\";\nimport { Utils } from \"@sinequa/core/base\";\nimport { FacetService } from \"@sinequa/components/facet\";\n\n@Component({\n   selector: 'facet-wrapper',\n   template: `\n\n\n   `,\n   styles: [`\nsq-facet-list, sq-facet-tree {\n    display: block;\n    width: 200px;\n}\n\n:is(sq-facet-list, sq-facet-tree) ::ng-deep .list-group > div.pb-2 {\n    padding-bottom: 0.25rem!important;\n    padding-top: 0.25rem!important;\n}\n   `]\n})\nexport class FacetWrapperComponent {\n    params: IFilterParams;\n\n    field: string;\n    isTree: boolean;\n    aggregationName: string;\n    name: string;\n\n    get datasource(): SqDatasource {\n        return this.params.rowModel['datasource'];\n    }\n\n    get results(): Results {\n        return this.datasource.latestResults;\n    }\n\n    get aggregation(): Aggregation | undefined {\n        return this.results.aggregations.find(a => {\n            const col = this.appService.getColumn(a.column);\n            const alias = this.appService.getColumnAlias(col);\n            return Utils.eqNC(alias, this.field);\n        });\n    }\n\n    get appService(): AppService {\n        return this.datasource.appService;\n    }\n\n    get facetService(): FacetService {\n        return this.datasource.facetService;\n    }\n    \n    agInit(params: IFilterParams): void {\n        this.params = params;\n        if(!this.params.colDef.field)\n            throw Error(\"Column definitions need at least a field\");\n        this.field = this.params.colDef.field; // Field is the alias\n        this.isTree = this.appService.isTree(this.field);\n        const agg = this.aggregation?.name;\n        if(!agg)\n            throw Error(`An aggregation needs to be defined for '${this.field}' to display a facet`);\n        this.aggregationName = agg;\n        this.name = \"grid-filter-\"+this.field;\n        console.log(\"agInit called \", this.name);\n    }\n\n    isFilterActive(): boolean {\n        return this.facetService.hasFiltered(this.name);\n    }\n\n    // Not called in infinite row model setup\n    doesFilterPass(params: IDoesFilterPassParams): boolean {\n        return true;\n    }\n\n    getModel() {\n        return this.isFilterActive()? {facetActive: true} : undefined;\n    }\n\n    setModel(model: any) {\n    }\n\n}\n\n    \n\n\n    \n            \nsq-facet-list, sq-facet-tree {\n    display: block;\n    width: 200px;\n}\n\n:is(sq-facet-list, sq-facet-tree) ::ng-deep .list-group > div.pb-2 {\n    padding-bottom: 0.25rem!important;\n    padding-top: 0.25rem!important;\n}\n   \n\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = ''\n    var COMPONENTS = [{'name': 'AgGridViewComponent', 'selector': 'sq-ag-grid-view'},{'name': 'BsEdgeInfoCard', 'selector': 'sq-edge-info-card'},{'name': 'BsFacetDate', 'selector': 'sq-facet-date'},{'name': 'BsFacetHeatmapComponent', 'selector': 'sq-facet-heatmap'},{'name': 'BsFacetTimelineComponent', 'selector': 'sq-facet-timeline'},{'name': 'BsHeatmapComponent', 'selector': 'sq-heatmap'},{'name': 'BsNodeInfoCard', 'selector': 'sq-node-info-card'},{'name': 'BsResultsHeatmapView', 'selector': 'sq-results-heatmap-view'},{'name': 'BsTimelineComponent', 'selector': 'sq-timeline'},{'name': 'BsTooltipComponent', 'selector': 'sq-tooltip'},{'name': 'DataModalComponent', 'selector': 'sq-data-modal'},{'name': 'FacetNgxChart', 'selector': 'sq-facet-ngx-chart'},{'name': 'FacetWrapperComponent', 'selector': 'facet-wrapper'},{'name': 'FusionChart', 'selector': 'sq-fusion-chart'},{'name': 'MapComponent', 'selector': 'sq-googlemaps'},{'name': 'MoneyCloudComponent', 'selector': 'sq-money-cloud'},{'name': 'MoneyTimelineComponent', 'selector': 'sq-money-timeline'},{'name': 'NetworkComponent', 'selector': 'sq-network'},{'name': 'NgxChart', 'selector': 'sq-ngx-chart'},{'name': 'ResultTimeline', 'selector': 'sq-result-timeline'},{'name': 'TimelineLegendComponent', 'selector': 'sq-timeline-legend'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'FacetWrapperComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/FinanceModule.html":{"url":"modules/FinanceModule.html","title":"module - FinanceModule","body":"\n                   \n\n\n\n\n    Modules\n    FinanceModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_FinanceModule\n\n\n\ncluster_FinanceModule_exports\n\n\n\ncluster_FinanceModule_imports\n\n\n\ncluster_FinanceModule_declarations\n\n\n\n\nMoneyCloudComponent\n\nMoneyCloudComponent\n\n\n\nFinanceModule\n\nFinanceModule\n\nFinanceModule -->\n\nMoneyCloudComponent->FinanceModule\n\n\n\n\n\nMoneyTimelineComponent\n\nMoneyTimelineComponent\n\nFinanceModule -->\n\nMoneyTimelineComponent->FinanceModule\n\n\n\n\n\nMoneyCloudComponent \n\nMoneyCloudComponent \n\nMoneyCloudComponent  -->\n\nFinanceModule->MoneyCloudComponent \n\n\n\n\n\nMoneyTimelineComponent \n\nMoneyTimelineComponent \n\nMoneyTimelineComponent  -->\n\nFinanceModule->MoneyTimelineComponent \n\n\n\n\n\nBsHeatmapModule\n\nBsHeatmapModule\n\nFinanceModule -->\n\nBsHeatmapModule->FinanceModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            finance/finance.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Declarations\n                    \n                        \n                            MoneyCloudComponent\n                        \n                        \n                            MoneyTimelineComponent\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            BsHeatmapModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            MoneyCloudComponent\n                        \n                        \n                            MoneyTimelineComponent\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { NgModule } from \"@angular/core\";\nimport { CommonModule } from \"@angular/common\";\n\nimport { IntlModule } from '@sinequa/core/intl';\nimport { UtilsModule } from \"@sinequa/components/utils\";\nimport { MoneyTimelineComponent } from \"./money-timeline/money-timeline.component\";\nimport { BsHeatmapModule } from \"@sinequa/analytics/heatmap\";\nimport { BsActionModule } from \"@sinequa/components/action\";\nimport { MoneyCloudComponent } from \"./money-cloud/money-cloud.component\";\n\n\n@NgModule({\n\n    imports: [\n        CommonModule,\n        IntlModule,\n        UtilsModule,\n        BsHeatmapModule,\n        BsActionModule\n    ],\n    declarations: [\n        MoneyTimelineComponent,\n        MoneyCloudComponent\n    ],\n    exports: [\n        MoneyTimelineComponent,\n        MoneyCloudComponent\n    ],\n})\nexport class FinanceModule {}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/FusionChartsModule.html":{"url":"modules/FusionChartsModule.html","title":"module - FusionChartsModule","body":"\n                   \n\n\n\n\n    Modules\n    FusionChartsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_FusionChartsModule\n\n\n\ncluster_FusionChartsModule_declarations\n\n\n\ncluster_FusionChartsModule_exports\n\n\n\n\nFusionChart\n\nFusionChart\n\n\n\nFusionChartsModule\n\nFusionChartsModule\n\nFusionChartsModule -->\n\nFusionChart->FusionChartsModule\n\n\n\n\n\nFusionChart \n\nFusionChart \n\nFusionChart  -->\n\nFusionChartsModule->FusionChart \n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            fusioncharts/fusioncharts.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Declarations\n                    \n                        \n                            FusionChart\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            FusionChart\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { NgModule } from \"@angular/core\";\nimport { CommonModule } from \"@angular/common\";\n\nimport { FusionChartsModule as FCModule } from \"angular-fusioncharts\";\n\n// Import FusionCharts library and chart modules\nimport * as FusionCharts from \"fusioncharts\";\nimport * as charts from \"fusioncharts/fusioncharts.charts\";\nimport * as FusionTheme from \"fusioncharts/themes/fusioncharts.theme.fusion\";\nimport * as CandyTheme from \"fusioncharts/themes/fusioncharts.theme.candy\";\n\nimport { IntlModule } from '@sinequa/core/intl';\nimport { BsSelectionModule } from '@sinequa/components/selection';\nimport { UtilsModule } from \"@sinequa/components/utils\";\n\nimport { FusionChart } from \"./chart/chart\";\n\nFusionCharts.options.creditLabel = false;\n// Fusion is a light theme, Candy is a dark theme\nFCModule.fcRoot(FusionCharts, charts, FusionTheme, CandyTheme);\n\n@NgModule({\n\n    imports: [\n        CommonModule,\n        IntlModule,\n        UtilsModule,\n        BsSelectionModule,\n        FCModule\n    ],\n    declarations: [\n        FusionChart\n    ],\n    exports: [\n        FusionChart\n    ],\n})\nexport class FusionChartsModule {}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/GoogleMapsModule.html":{"url":"modules/GoogleMapsModule.html","title":"module - GoogleMapsModule","body":"\n                   \n\n\n\n\n    Modules\n    GoogleMapsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_GoogleMapsModule\n\n\n\ncluster_GoogleMapsModule_declarations\n\n\n\ncluster_GoogleMapsModule_exports\n\n\n\n\nMapComponent\n\nMapComponent\n\n\n\nGoogleMapsModule\n\nGoogleMapsModule\n\nGoogleMapsModule -->\n\nMapComponent->GoogleMapsModule\n\n\n\n\n\nMapComponent \n\nMapComponent \n\nMapComponent  -->\n\nGoogleMapsModule->MapComponent \n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            googlemaps/googlemaps.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Declarations\n                    \n                        \n                            MapComponent\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            MapComponent\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { NgModule } from \"@angular/core\";\nimport { CommonModule } from \"@angular/common\";\n\nimport { IntlModule } from '@sinequa/core/intl';\nimport { BsActionModule } from \"@sinequa/components/action\";\nimport { BsFacetModule } from \"@sinequa/components/facet\";\nimport { BsSelectionModule } from '@sinequa/components/selection';\n\nimport { AgmCoreModule } from '@agm/core';\nimport { MapComponent } from './map.component';\n\n@NgModule({\n\n    imports: [\n        CommonModule,\n        IntlModule,\n        BsActionModule,\n        BsFacetModule,\n        BsSelectionModule,\n        \n        AgmCoreModule,\n    ],\n    declarations: [\n        MapComponent\n    ],\n    exports: [\n        MapComponent\n    ],\n})\nexport class GoogleMapsModule {}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/HeatmapItem.html":{"url":"interfaces/HeatmapItem.html","title":"interface - HeatmapItem","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  HeatmapItem\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            heatmap/bootstrap/heatmap.component.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            count\n                                        \n                                \n                                \n                                        \n                                            display\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            selected\n                                        \n                                \n                                \n                                        \n                                            value\n                                        \n                                \n                                \n                                        \n                                            x\n                                        \n                                \n                                \n                                        \n                                            y\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        count\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        count:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        display\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        display:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        selected\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        selected:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        value\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        value:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        x\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        x:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        y\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        y:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Component, ElementRef, Output, EventEmitter, Input, ViewChild, OnChanges, AfterViewInit } from '@angular/core';\n\nimport * as d3 from 'd3';\n\nexport interface HeatmapItem {\n    x: string;\n    y: string;\n    count: number;\n    value: string;\n    display: string;\n    selected?: boolean;\n}\n\n@Component({\n    selector: \"sq-heatmap\",\n    templateUrl: \"./heatmap.component.html\",\n    styleUrls: ['./heatmap.component.scss']\n})\nexport class BsHeatmapComponent implements OnChanges, AfterViewInit {\n    /**\n     * Raw data to display (will be filtered in function of maxX and maxY parameters)\n     */\n    @Input() data: HeatmapItem[];\n\n    // Graphical parameters\n    @Input() height = 600;\n    @Input() width = 600;\n    @Input() margin = {top: 100, bottom: 20, left: 100, right: 40};\n    @Input() transition = 1000; // Transition time in ms (0 to avoid transitions)\n\n    // Interaction parameters\n    @Input() itemsClickable = true;\n    @Input() axisClickable = true;\n\n    // Axis/Scales parameters\n    @Input() buckets = 9; // Color buckets\n    @Input() colorScheme = \"schemeBlues\"; // Color scheme from D3\n    @Input() maxX = 20; // Max items on X\n    @Input() maxY = 20; // Max items on Y\n    @Input() theme: \"light\" | \"dark\" = \"light\";\n    \n    // Events from user interactions\n    @Output() itemClicked = new EventEmitter();\n    @Output() axisClicked = new EventEmitter();\n\n    // D3 Scales\n    x: d3.ScaleBand;\n    y: d3.ScaleBand;\n    color: d3.ScaleQuantile;\n\n    // Axes\n    @ViewChild(\"xAxis\") gx: ElementRef;\n    @ViewChild(\"yAxis\") gy: ElementRef;\n    xAxis: d3.Selection;\n    yAxis: d3.Selection;\n    \n    // Data actually displayed\n    dataFiltered: HeatmapItem[] = [];\n\n    // Tooltip    \n    tooltipItem?: HeatmapItem;\n    tooltipOrientation: \"left\" | \"right\";\n    tooltipTop: number;\n    tooltipRight: number;\n    tooltipLeft: number;\n\n    // Misc\n    viewInit: boolean;\n    originalCount: number;\n\n    constructor(\n        private el: ElementRef\n    ){}\n\n    /**\n     * ngOnChanges is used to respond to changes in the data (or chart parameter)\n     */\n    ngOnChanges() {\n\n        this.data = this.data || [];\n\n        // Pre-process data\n        const xLabels = Array.from(new Set(this.data.map(value => value.x))).slice(0, this.maxX);\n        const yLabels = Array.from(new Set(this.data.map(value => value.y))).slice(0, this.maxY);\n        this.dataFiltered = this.data.filter(value => xLabels.includes(value.x) && yLabels.includes(value.y));\n\n        // Create scales\n        this.x = d3.scaleBand()\n            .domain(xLabels)\n            .range([0, this.width-this.margin.left-this.margin.right]);\n\n        this.y = d3.scaleBand()\n            .domain(yLabels)\n            .range([0, this.height-this.margin.top-this.margin.bottom]);\n\n        this.color = d3.scaleQuantile()\n            .domain(this.dataFiltered.map(item => item.count))\n            .range(d3[this.colorScheme][this.buckets]);\n\n        // Note: ngOnChanges is always called once, before ngAfterViewInit\n        if(this.viewInit) {\n            this.buildChart(!!this.transition);\n        }\n    }\n\n    // Note: In onAfterViewInit we can access gx and gy, obtained with @ViewChild.\n    // At this point we can call buildChart()\n    ngAfterViewInit(){\n        this.xAxis = d3.select(this.gx.nativeElement);\n        this.yAxis = d3.select(this.gy.nativeElement);\n        this.viewInit = true;\n\n        this.buildChart();\n    }\n    \n    /**\n     * buildChart() actually only builds the axes of the chart, since the\n     * rest is build automatically with Angular syntax in the template.\n     * We build axis programmatically (with D3 selects) to benefit from the\n     * D3 abstractions and transitions.\n     * @param update \n     */\n    buildChart(update?: boolean){\n                    \n        if(update){\n            const t = d3.transition().duration(this.transition) as d3.Transition;\n    \n            this.xAxis.transition(t)\n                .call(d3.axisTop(this.x).tickSize(0))\n                .on(\"end\", () => this.xAxis.selectAll('text').each(this.wrap));\n\n            this.yAxis.transition(t)\n                .call(d3.axisLeft(this.y).tickSize(0))\n                .on(\"end\", () => this.yAxis.selectAll('text').each(this.wrap));\n            \n        }\n        else {\n            this.xAxis.call(d3.axisTop(this.x).tickSize(0));\n            this.yAxis.call(d3.axisLeft(this.y).tickSize(0));\n        }\n\n        this.xAxis.selectAll(\".domain\").remove(); // Remove the axis line\n        this.xAxis.selectAll(\"text\")  // Tilt the text\n            .attr(\"transform\", \"rotate(-35)\")\n            .style(\"text-anchor\", \"start\")\n            .each(this.wrap)\n            .on(\"click\", d => this.onAxisClicked(d, 'x'));\n\n        this.yAxis.selectAll(\".domain\").remove(); // Remove the axis line\n        this.yAxis.selectAll(\"text\")\n            .each(this.wrap)\n            .on(\"click\", d => this.onAxisClicked(d, 'y'));\n    }\n\n    /**\n     * Called when the user hovers the mouse over a heatmap tile\n     * @param item \n     * @param event \n     */\n    onMouseOver(item: HeatmapItem, event: MouseEvent){\n        this.tooltipItem = item;\n\n        const x = this.x(item.x) as number;\n        const y = this.y(item.y) as number;\n\n        // Since we use viewBox to auto-adjust the SVG to the container size, we have to\n        // convert from the SVG coordinate system to the HTML coordinate system\n        const actualWidth = (this.el.nativeElement as HTMLElement).offsetWidth;\n        const scale = actualWidth / this.width;\n        const relativeX = x / this.width;\n\n        // Tooltip to the right\n        if(relativeX ) => {\n        const self = d3.select(nodes[i]);\n        let textLength = nodes[i].getComputedTextLength();\n        let text = self.text();\n        const fullText = self.text();\n        while (textLength > 90 && text.length > 0) {\n          text = text.slice(0, -1)\n          self.text(text + '...');\n          textLength = nodes[i].getComputedTextLength();\n        }\n        self.append('svg:title').text(fullText);\n    };\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/MapComponent.html":{"url":"components/MapComponent.html","title":"component - MapComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  MapComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    googlemaps/map.component.ts\n\n\n\n\n    \n        Extends\n    \n    \n            AbstractFacet\n    \n\n    \n        Implements\n    \n    \n                    OnChanges\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                sq-googlemaps\n            \n\n\n\n\n            \n                templateUrl\n                ./map.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                bounds\n                            \n                            \n                                clearFilters\n                            \n                            \n                                    Public\n                                exprBuilder\n                            \n                            \n                                    Public\n                                facetService\n                            \n                            \n                                filterArea\n                            \n                            \n                                fitBounds\n                            \n                            \n                                geoRecords\n                            \n                            \n                                mapStyles\n                            \n                            \n                                    Optional\n                                openedWindow\n                            \n                            \n                                    Public\n                                searchService\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                closeWindow\n                            \n                            \n                                ngOnChanges\n                            \n                            \n                                onBoundsChange\n                            \n                            \n                                onMapClick\n                            \n                            \n                                onMarkerClick\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                height\n                            \n                            \n                                latitudeField\n                            \n                            \n                                longitudeField\n                            \n                            \n                                name\n                            \n                            \n                                results\n                            \n                            \n                                style\n                            \n                        \n                    \n                \n\n                \n                    \n                        Outputs\n                    \n                \n                \n                    \n                        \n                            \n                                recordClicked\n                            \n                        \n                    \n                \n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    actions\n                                \n                            \n                        \n                    \n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(searchService: SearchService, facetService: FacetService, exprBuilder: ExprBuilder)\n                    \n                \n                        \n                            \n                                Defined in googlemaps/map.component.ts:48\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        searchService\n                                                  \n                                                        \n                                                                    SearchService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        facetService\n                                                  \n                                                        \n                                                                    FacetService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        exprBuilder\n                                                  \n                                                        \n                                                                    ExprBuilder\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        height\n                    \n                \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 300\n                    \n                \n                        \n                            \n                                    Defined in googlemaps/map.component.ts:23\n                            \n                        \n                \n                    \n                        Desired height of the map\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        latitudeField\n                    \n                \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : \"latitude\"\n                    \n                \n                        \n                            \n                                    Defined in googlemaps/map.component.ts:25\n                            \n                        \n                \n                    \n                        Name of the field storing the latitude as a decimal number\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        longitudeField\n                    \n                \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : \"longitude\"\n                    \n                \n                        \n                            \n                                    Defined in googlemaps/map.component.ts:27\n                            \n                        \n                \n                    \n                        Name of the field storing the longitude as a decimal number\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        name\n                    \n                \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : \"map\"\n                    \n                \n                        \n                            \n                                    Defined in googlemaps/map.component.ts:19\n                            \n                        \n                \n                    \n                        Name of the map used as an identifier for the facet, to associate its selects\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        results\n                    \n                \n                \n                    \n                        Type :     Results\n\n                    \n                \n                        \n                            \n                                    Defined in googlemaps/map.component.ts:21\n                            \n                        \n                \n                    \n                        Results list displayed on the map when possible\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        style\n                    \n                \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : \"light\"\n                    \n                \n                        \n                            \n                                    Defined in googlemaps/map.component.ts:29\n                            \n                        \n                \n                    \n                        Map style (light or dark are supported)\n\n                    \n                \n            \n        \n\n    \n    Outputs\n        \n            \n                \n                    \n                        \n                        recordClicked\n                    \n                \n                \n                    \n                        Type :         EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in googlemaps/map.component.ts:31\n                            \n                        \n                \n                    \n                        Event emitter that emits a Record object when the marker of that record is clicked by the user\n\n                    \n                \n            \n        \n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        closeWindow\n                        \n                    \n                \n            \n            \n                \ncloseWindow()\n                \n            \n\n\n            \n                \n                    Defined in googlemaps/map.component.ts:134\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnChanges\n                        \n                    \n                \n            \n            \n                \nngOnChanges(changes: SimpleChanges)\n                \n            \n\n\n            \n                \n                    Defined in googlemaps/map.component.ts:102\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    changes\n                                    \n                                                SimpleChanges\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onBoundsChange\n                        \n                    \n                \n            \n            \n                \nonBoundsChange(bounds: google.maps.LatLngBounds)\n                \n            \n\n\n            \n                \n                    Defined in googlemaps/map.component.ts:154\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    bounds\n                                    \n                                            google.maps.LatLngBounds\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onMapClick\n                        \n                    \n                \n            \n            \n                \nonMapClick(event: Event)\n                \n            \n\n\n            \n                \n                    Defined in googlemaps/map.component.ts:144\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    event\n                                    \n                                                Event\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onMarkerClick\n                        \n                    \n                \n            \n            \n                \nonMarkerClick(event: Event, record: Record, infoWindow?: AgmInfoWindow)\n                \n            \n\n\n            \n                \n                    Defined in googlemaps/map.component.ts:148\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    event\n                                    \n                                                Event\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    record\n                                    \n                                            Record\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    infoWindow\n                                    \n                                            AgmInfoWindow\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        bounds\n                        \n                    \n                \n            \n                \n                    \n                        Type :     google.maps.LatLngBounds\n\n                    \n                \n                    \n                        \n                                Defined in googlemaps/map.component.ts:43\n                        \n                    \n\n            \n                \n                    Bounds of the map updated on initialization and user interaction\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        clearFilters\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Action\n\n                    \n                \n                    \n                        \n                                Defined in googlemaps/map.component.ts:40\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        exprBuilder\n                        \n                    \n                \n            \n                \n                    \n                        Type :     ExprBuilder\n\n                    \n                \n                    \n                        \n                                Defined in googlemaps/map.component.ts:53\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        facetService\n                        \n                    \n                \n            \n                \n                    \n                        Type :     FacetService\n\n                    \n                \n                    \n                        \n                                Defined in googlemaps/map.component.ts:52\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        filterArea\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Action\n\n                    \n                \n                    \n                        \n                                Defined in googlemaps/map.component.ts:39\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        fitBounds\n                        \n                    \n                \n            \n                \n                    \n                        Type :     google.maps.LatLngBoundsLiteral | boolean\n\n                    \n                \n                    \n                        \n                                Defined in googlemaps/map.component.ts:36\n                        \n                    \n\n            \n                \n                    Mode for fitting the map to its contained markers\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        geoRecords\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Record[]\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                    \n                        \n                                Defined in googlemaps/map.component.ts:34\n                        \n                    \n\n            \n                \n                    Filtered list of records, keeping only the geolocated records\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        mapStyles\n                        \n                    \n                \n            \n                \n                    \n                        Type :         any\n\n                    \n                \n                    \n                        \n                                Defined in googlemaps/map.component.ts:48\n                        \n                    \n\n            \n                \n                    Styles of the map if any\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        openedWindow\n                        \n                    \n                \n            \n                \n                    \n                        Type :     AgmInfoWindow\n\n                    \n                \n                    \n                        \n                                Defined in googlemaps/map.component.ts:45\n                        \n                    \n\n            \n                \n                    Currently opened info window, which can be closed when another window is closed\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        searchService\n                        \n                    \n                \n            \n                \n                    \n                        Type :     SearchService\n\n                    \n                \n                    \n                        \n                                Defined in googlemaps/map.component.ts:51\n                        \n                    \n\n\n        \n    \n\n\n    \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        actions\n                    \n                \n\n                \n                    \n                        getactions()\n                    \n                \n                            \n                                \n                                    Defined in googlemaps/map.component.ts:91\n                                \n                            \n\n            \n        \n\n\n\n\n    \n        import { Component, Input, Output, EventEmitter, OnChanges, SimpleChanges } from '@angular/core';\nimport { AgmInfoWindow } from '@agm/core'\n;\nimport { AbstractFacet, FacetService } from '@sinequa/components/facet';\nimport { Action } from '@sinequa/components/action';\nimport { SearchService } from '@sinequa/components/search';\n\nimport { ExprBuilder } from '@sinequa/core/app-utils';\nimport { Results, Record } from '@sinequa/core/web-services';\n\nimport { darkStyle } from \"./dark-style\";\n\n@Component({\n    selector: \"sq-googlemaps\",\n    templateUrl: \"./map.component.html\"\n})\nexport class MapComponent extends AbstractFacet implements OnChanges {\n    /** Name of the map used as an identifier for the facet, to associate its selects */\n    @Input() name = \"map\";\n    /** Results list displayed on the map when possible */\n    @Input() results: Results;\n    /** Desired height of the map */\n    @Input() height = 300;\n    /** Name of the field storing the latitude as a decimal number */\n    @Input() latitudeField = \"latitude\";\n    /** Name of the field storing the longitude as a decimal number */\n    @Input() longitudeField = \"longitude\";\n    /** Map style (light or dark are supported) */\n    @Input() style = \"light\";\n    /** Event emitter that emits a Record object when the marker of that record is clicked by the user */\n    @Output() recordClicked = new EventEmitter();\n\n    /** Filtered list of records, keeping only the geolocated records */\n    geoRecords: Record[] = [];\n    /** Mode for fitting the map to its contained markers */\n    fitBounds: google.maps.LatLngBoundsLiteral | boolean;\n\n    // Actions for selecting an area on the map, and clearing that selection\n    filterArea: Action;\n    clearFilters: Action;\n\n    /** Bounds of the map updated on initialization and user interaction */\n    bounds: google.maps.LatLngBounds;\n    /** Currently opened info window, which can be closed when another window is closed */\n    openedWindow?: AgmInfoWindow;\n\n    /** Styles of the map if any */\n    mapStyles: any;\n\n    constructor(\n        public searchService: SearchService,\n        public facetService: FacetService,\n        public exprBuilder: ExprBuilder\n    ){\n        super();\n        \n        // Clear the current filters\n        this.clearFilters = new Action({\n            icon: \"far fa-minus-square\",\n            title: \"msg#facet.clearSelects\",\n            action: () => {\n                this.searchService.query.removeSelect(this.name);\n                this.searchService.search();\n            }\n        });\n\n        // Filter the currently selected area\n        this.filterArea = new Action({\n            icon: \"fas fa-search\",\n            title: \"msg#googlemaps.filterArea\",\n            action: () => {\n                if(this.facetService.hasFiltered(this.name)) {\n                    this.searchService.query.removeSelect(this.name);\n                }\n                const minLat = this.bounds.getSouthWest().lat();\n                const maxLat = this.bounds.getNorthEast().lat();\n                const minLng = this.bounds.getSouthWest().lng();\n                const maxLng = this.bounds.getNorthEast().lng();\n                const expr = this.exprBuilder.concatAndExpr([\n                    this.exprBuilder.makeNumericalExpr(this.latitudeField, '>=', minLat),\n                    this.exprBuilder.makeNumericalExpr(this.latitudeField, '=', minLng),\n                    this.exprBuilder.makeNumericalExpr(this.longitudeField, ' !!r[this.latitudeField]);\n            }\n            this.closeWindow();\n        }\n\n        if(changes['style']) {\n            this.mapStyles = this.style === \"dark\"? darkStyle : undefined;\n        }\n\n        // If no document, the view shows a default latitude / longitude\n        if(this.geoRecords.length === 0) {\n            this.fitBounds = false;\n        }\n        // If multiple documents, the view is centered around them, at the right scale\n        else if(this.geoRecords.length > 1) {\n            this.fitBounds = true;\n        }\n        else {\n            // Custom bounds centered around the single geo record in the results\n            this.fitBounds = {\n                east: this.geoRecords[0][this.longitudeField] + 0.02,\n                north: this.geoRecords[0][this.latitudeField] + 0.02,\n                south: this.geoRecords[0][this.latitudeField] - 0.02,\n                west: this.geoRecords[0][this.longitudeField] - 0.02\n            };\n        }\n    }\n\n    closeWindow() {\n        if(this.openedWindow) {\n            this.openedWindow.close();\n            this.openedWindow = undefined;\n        }\n    }\n\n\n    // Manage map interactions (avoid multiple opened info windows)\n\n    onMapClick(event: Event) {\n        this.closeWindow();\n    }\n\n    onMarkerClick(event: Event, record: Record, infoWindow?: AgmInfoWindow) {\n        this.closeWindow();\n        this.openedWindow = infoWindow;\n        this.recordClicked.next(record);\n    }\n\n    onBoundsChange(bounds: google.maps.LatLngBounds) {\n        this.bounds = bounds;\n    }\n}\n    \n\n    \n        \n\n    \n\n        \n            {{record['title']}}\n        \n\n    \n\n\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '                        {{record[\\'title\\']}}            '\n    var COMPONENTS = [{'name': 'AgGridViewComponent', 'selector': 'sq-ag-grid-view'},{'name': 'BsEdgeInfoCard', 'selector': 'sq-edge-info-card'},{'name': 'BsFacetDate', 'selector': 'sq-facet-date'},{'name': 'BsFacetHeatmapComponent', 'selector': 'sq-facet-heatmap'},{'name': 'BsFacetTimelineComponent', 'selector': 'sq-facet-timeline'},{'name': 'BsHeatmapComponent', 'selector': 'sq-heatmap'},{'name': 'BsNodeInfoCard', 'selector': 'sq-node-info-card'},{'name': 'BsResultsHeatmapView', 'selector': 'sq-results-heatmap-view'},{'name': 'BsTimelineComponent', 'selector': 'sq-timeline'},{'name': 'BsTooltipComponent', 'selector': 'sq-tooltip'},{'name': 'DataModalComponent', 'selector': 'sq-data-modal'},{'name': 'FacetNgxChart', 'selector': 'sq-facet-ngx-chart'},{'name': 'FacetWrapperComponent', 'selector': 'facet-wrapper'},{'name': 'FusionChart', 'selector': 'sq-fusion-chart'},{'name': 'MapComponent', 'selector': 'sq-googlemaps'},{'name': 'MoneyCloudComponent', 'selector': 'sq-money-cloud'},{'name': 'MoneyTimelineComponent', 'selector': 'sq-money-timeline'},{'name': 'NetworkComponent', 'selector': 'sq-network'},{'name': 'NgxChart', 'selector': 'sq-ngx-chart'},{'name': 'ResultTimeline', 'selector': 'sq-result-timeline'},{'name': 'TimelineLegendComponent', 'selector': 'sq-timeline-legend'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'MapComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/MoneyCloudDatum.html":{"url":"interfaces/MoneyCloudDatum.html","title":"interface - MoneyCloudDatum","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  MoneyCloudDatum\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            finance/money-cloud/money-cloud.component.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            category\n                                        \n                                \n                                \n                                        \n                                            count\n                                        \n                                \n                                \n                                        \n                                            currency\n                                        \n                                \n                                \n                                        \n                                            i\n                                        \n                                \n                                \n                                        \n                                            rawvalue\n                                        \n                                \n                                \n                                        \n                                            value\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        category\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        category:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        count\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        count:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        currency\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        currency:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        i\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        i:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        rawvalue\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        rawvalue:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        value\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        value:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { AfterViewInit, ChangeDetectorRef, Component, ElementRef, Input, OnChanges, SimpleChanges, ViewChild } from \"@angular/core\";\nimport { Action } from \"@sinequa/components/action\";\nimport { AbstractFacet } from \"@sinequa/components/facet\";\nimport { SearchService } from \"@sinequa/components/search\";\nimport { SelectionService } from \"@sinequa/components/selection\";\nimport { ExprBuilder, FormatService, ValueItem } from \"@sinequa/core/app-utils\";\nimport { Utils } from \"@sinequa/core/base\";\nimport { AggregationItem, Results } from \"@sinequa/core/web-services\";\n\nimport * as d3 from 'd3';\n\n\nexport interface MoneyCloudDatum {\n    value: number;\n    currency: string;\n    count: number;\n    category: string;\n    i: number;\n    rawvalue: string;\n}\n\n@Component({\n    selector: 'sq-money-cloud',\n    templateUrl: './money-cloud.component.html',\n    styleUrls: ['./money-cloud.component.scss']\n})\nexport class MoneyCloudComponent extends AbstractFacet implements OnChanges,AfterViewInit {\n    @Input() name = \"money-cloud\"\n\n    @Input() results: Results;\n    /** The \"money-value\" column stores an entity in the form \"(KEYWORD)#( )\", for example \"(DEAL)#(USD 69420)\" */\n    @Input() moneyValueColumn = \"value_amount\";\n    /** The \"Money-Value\" aggregation must be computed over the money-value column */\n    @Input() moneyAggregation = \"ValueAmounts\";\n\n    @Input() width = 600;\n    @Input() height = 200;\n    @Input() margin = {top: 15, bottom: 30, left: 40, right: 15};\n\n    @Input() showTooltip = true;\n    @Input() theme: \"light\" | \"dark\" = \"light\";\n\n    data: MoneyCloudDatum[];\n    categories: string[];\n\n    selectedItems: Set;\n\n    // Scales\n    x: d3.ScaleBand; // Read/Write\n    x_inner: d3.ScaleLinear; // Read/Write\n    y: d3.ScaleLogarithmic; // Read-only / domain updated\n    r: d3.ScaleLogarithmic; // Radius (function of counts)\n    c: d3.ScaleOrdinal; // Color\n\n    // Elements\n    @ViewChild(\"overlay\") overlay: ElementRef;\n    @ViewChild(\"xAxis\") gx: ElementRef;\n    @ViewChild(\"yAxis\") gy: ElementRef;\n\n    // Selections\n    xAxis$: d3.Selection;\n    yAxis$: d3.Selection;\n    \n    // Tooltips\n    tooltipItem: MoneyCloudDatum | undefined;\n    tooltipOrientation: \"left\" | \"right\";\n    tooltipTop: number;\n    tooltipRight: number;\n    tooltipLeft: number;\n\n    viewInit: boolean;\n    \n    clearFilters: Action;\n\n    constructor(\n        private el: ElementRef,\n        protected cdRef: ChangeDetectorRef,\n        public searchService: SearchService,\n        public exprBuilder: ExprBuilder,\n        public selectionService: SelectionService,\n        public formatService: FormatService\n    ){\n        super();\n\n        // Clear the current filters\n        this.clearFilters = new Action({\n            icon: \"far fa-minus-square\",\n            title: \"msg#facet.clearSelects\",\n            action: () => {\n                this.searchService.query.removeSelect(this.name, true);\n                this.searchService.search();\n            }\n        });\n\n        this.selectionService.events.subscribe(e => this.updateSelectedItems());\n    }\n\n    override get actions(): Action[] {\n        const actions: Action[] = [];\n        if(this.searchService.query.findSelect(this.name)){\n            actions.push(this.clearFilters);\n        }\n        return actions;\n    }\n\n    get innerWidth(): number {\n        return this.width - this.margin.left - this.margin.right;\n    }\n\n    get innerHeight(): number {\n        return this.height - this.margin.top - this.margin.bottom;\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n\n        if(!this.x) {\n            \n            // Scales\n            this.x = d3.scaleBand()\n                .range([0, this.innerWidth]);\n                \n            this.x_inner = d3.scaleLinear();\n\n            this.y = d3.scaleLog()\n                .range([this.innerHeight, 0]);\n\n            this.r = d3.scaleLog()\n                .range([4, 10]);\n\n            this.c = d3.scaleOrdinal()\n                .range(d3.schemeCategory10);\n                \n        }\n        \n        // Resize handling\n\n        if(changes[\"height\"]) {\n            this.y.range([this.innerHeight, 0]);\n            if(this.viewInit) {\n                this.drawYAxis();\n            }\n        }\n\n        if(changes[\"width\"]) {\n            this.x.range([0, this.innerWidth]);\n            if(this.viewInit) {\n                this.drawXAxis();\n            }\n        }\n\n        if(this.viewInit && changes[\"results\"] && this.results){\n            this.updateChart();\n        }\n    }\n\n    ngAfterViewInit() {\n        \n        // Get native elements\n        this.xAxis$ = d3.select(this.gx.nativeElement);\n        this.yAxis$ = d3.select(this.gy.nativeElement);\n\n        d3.select(this.overlay.nativeElement)        \n            .on(\"mousemove\", () => this.onMousemove());\n        \n        this.viewInit = true;\n\n        this.updateChart();\n        \n        // This is necessary to prevent \"Expression has changed after check\" errors\n        // caused by calling updateChart inside ngAfterViewInit().\n        // Unfortunately this is necessary because we need the DOM to be rendered in order fill the DOM\n        // (for example gAxis needs to exist so we can draw the axis)\n        this.cdRef.detectChanges();\n    }\n\n    updateChart() {\n\n        this.turnoffTooltip();\n\n        if(this.results) {\n            \n            this.updateData();\n\n            // Update scales\n            this.updateScales();\n\n            // Update Axes\n            this.updateAxes();\n\n        }\n    }\n\n    updateData() {\n\n        this.updateSelectedItems();\n        \n        const counts = new Map();\n\n        this.data = [];\n        // Extract number of occurrences from the aggregation\n        this.results.aggregations\n            ?.find(a => a.name === this.moneyAggregation)\n            ?.items\n            ?.forEach(item => {\n                const datum = this.parseEntity(item, counts);\n                if(datum) {\n                    this.data.push(datum);\n                }\n            });\n\n        this.data.forEach(d => d.i = (d.i-0.5) / counts.get(d.category)!); // Normalize i between 0 and 1\n\n    }\n\n    /**\n     * Parse the entity stored in the \"money-value\" column and returns a datum (incl. numerical value and currency)\n     */\n    @Input()\n    parseEntity = (item: AggregationItem, counts: Map): MoneyCloudDatum | undefined => {\n        const rawvalue = item.value as string;\n        const [category, amount] = item.display!.substr(1, item.display!.length-2).split(\")#(\");\n        const [currency, valuestr] = amount.split(\" \");\n        const value = parseFloat(valuestr);\n        // Check the data is valid\n        if(isNaN(value) || value (this.data, d => d.value);\n            const rExtent = d3.extent(this.data, d => d.count);\n\n            if(!yExtent[0] || !yExtent[1] || !rExtent[0] || !rExtent[1]) {\n                return;\n            }\n\n            this.x.domain(this.data.map(d => d.category));\n            this.x_inner\n                .domain([0, 1])\n                .range([0, this.x.bandwidth()]);\n            this.y.domain(yExtent);\n            this.r.domain(rExtent);\n            this.c.domain(this.data.map(d => d.currency));\n\n            this.categories = this.x.domain();\n\n        }\n\n    }\n\n    public updateSelectedItems() {\n        this.selectedItems = new Set();\n        this.selectionService.getSelectedItems().forEach(r => {\n            r[this.moneyValueColumn]?.forEach((item: ValueItem) => {\n                this.selectedItems.add(item.value as string);\n            });\n        });\n    }\n    \n    /**\n     * Update the x and y axes\n     */\n    protected updateAxes(){\n        this.drawXAxis();\n        this.drawYAxis();\n    }\n\n    /**\n     * Draws the X axis\n     */\n     protected drawXAxis() {\n        const xAxis = d3.axisBottom(this.x);\n        this.xAxis$.call(xAxis);\n        //this.xAxis$.selectAll(\".domain\").remove(); // Remove the axis line\n    }\n\n    /**\n     * Draws the Y axis\n     */\n    protected drawYAxis() {\n        const yAxisTicks = this.y.ticks(5)\n            .filter(tick => Number.isInteger(tick)); // Keep only integer ticks https://stackoverflow.com/questions/13576906/d3-tick-marks-on-integers-only/56821215\n\n        const yAxis = d3.axisLeft(this.y)\n            .tickSizeInner(-this.innerWidth)\n            .tickValues(yAxisTicks)\n            .tickFormat(this.formatService.moneyFormatter); //https://github.com/d3/d3-format\n        this.yAxis$.call(yAxis);\n        //this.yAxis$.selectAll(\".domain\").remove(); // Remove the axis line\n    }\n\n    \n    /**\n     * Redraw the simple tooltip (vertical line)\n     */\n    onMousemove() {\n        this.tooltipItem = undefined;\n    }\n\n    filterDatum(datum: MoneyCloudDatum) {\n        const expr = this.exprBuilder.makeExpr(this.moneyValueColumn, datum.rawvalue)\n        this.searchService.query.addSelect(expr, this.name);\n        this.searchService.search();\n    }\n\n    onMouseEnterDatum(datum: MoneyCloudDatum) {\n\n        let x = this.x(datum.category);\n        const x_inner = this.x_inner(datum.i);\n        const y = this.y(datum.value);\n        const r = this.r(datum.count);\n\n        if(Utils.isUndefined(x) || Utils.isUndefined(x_inner) || Utils.isUndefined(r) || Utils.isUndefined(y)) return;\n\n        this.tooltipItem = datum;\n\n        x += x_inner;\n\n        // Since we use viewBox to auto-adjust the SVG to the container size, we have to\n        // convert from the SVG coordinate system to the HTML coordinate system\n        const actualWidth = (this.el.nativeElement as HTMLElement).offsetWidth;\n        const scale = actualWidth / this.width;\n        const relativeX = x / this.width;\n\n        // Tooltip to the right\n        if(relativeX  {\n        if(this.tooltipItem) {\n            this.tooltipItem = undefined;\n        }\n    }\n}\n    \n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/MoneyDatum.html":{"url":"interfaces/MoneyDatum.html","title":"interface - MoneyDatum","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  MoneyDatum\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            finance/money-timeline/money-timeline.component.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            count\n                                        \n                                \n                                \n                                        \n                                            currency\n                                        \n                                \n                                \n                                        \n                                            date\n                                        \n                                \n                                \n                                        \n                                            rawvalue\n                                        \n                                \n                                \n                                        \n                                            record\n                                        \n                                \n                                \n                                        \n                                            value\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        count\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        count:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        currency\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        currency:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        date\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        date:         Date\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Date\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        rawvalue\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        rawvalue:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        record\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        record:     Record\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Record\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        value\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        value:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { AfterViewInit, ChangeDetectorRef, Component, ElementRef, EventEmitter, Input, OnChanges, Output, SimpleChanges, ViewChild } from \"@angular/core\";\nimport { Action } from \"@sinequa/components/action\";\nimport { AbstractFacet } from \"@sinequa/components/facet\";\nimport { SearchService } from \"@sinequa/components/search\";\nimport { ExprBuilder } from \"@sinequa/core/app-utils\";\nimport { Utils } from \"@sinequa/core/base\";\nimport { Results, Record } from \"@sinequa/core/web-services\";\nimport { FormatService } from \"@sinequa/core/app-utils\";\n\nimport * as d3 from 'd3';\n\nexport interface MoneyDatum {\n    value: number;\n    currency: string;\n    count: number;\n    date: Date;\n    rawvalue: string;\n    record: Record;\n}\n\n@Component({\n    selector: 'sq-money-timeline',\n    templateUrl: './money-timeline.component.html',\n    styleUrls: ['./money-timeline.component.scss']\n})\nexport class MoneyTimelineComponent extends AbstractFacet implements OnChanges,AfterViewInit {\n    @Input() name = \"money-timeline\"\n\n    @Input() results: Results;\n    /** The \"money\" column stores an entity in the form \" \", for example \"USD 69420\" */\n    @Input() moneyColumn = \"money\";\n    /** The \"Money\" aggregation must be computed over the money column */\n    @Input() moneyAggregation = \"Money\";\n\n    @Input() width = 600;\n    @Input() height = 200;\n    @Input() margin = {top: 15, bottom: 30, left: 40, right: 15};\n\n    /** Displays a tooltip showing the current date */\n    @Input() showTooltip = true;\n    @Input() theme: \"light\" | \"dark\" = \"light\";\n\n    @Output() recordClicked = new EventEmitter();\n\n    data: MoneyDatum[];\n\n    // Scales\n    x: d3.ScaleTime; // Read/Write\n    y: d3.ScaleLogarithmic; // Read-only / domain updated\n    r: d3.ScaleLogarithmic;\n    c: d3.ScaleOrdinal;\n\n    // Elements\n    @ViewChild(\"overlay\") overlay: ElementRef;\n    @ViewChild(\"xAxis\") gx: ElementRef;\n    @ViewChild(\"yAxis\") gy: ElementRef;\n\n    // Selections\n    xAxis$: d3.Selection;\n    yAxis$: d3.Selection;\n    \n    // Tooltips\n    tooltipX: number | undefined;\n    tooltipItem: MoneyDatum | undefined;\n    tooltipOrientation: \"left\" | \"right\";\n    tooltipTop: number;\n    tooltipRight: number;\n    tooltipLeft: number;\n\n    viewInit: boolean;\n    \n    clearFilters: Action;\n\n    constructor(\n        private el: ElementRef,\n        protected cdRef: ChangeDetectorRef,\n        public searchService: SearchService,\n        public exprBuilder: ExprBuilder,\n        public formatService: FormatService\n    ){\n        super();\n\n        // Clear the current filters\n        this.clearFilters = new Action({\n            icon: \"far fa-minus-square\",\n            title: \"msg#facet.clearSelects\",\n            action: () => {\n                this.searchService.query.removeSelect(this.name, true);\n                this.searchService.search();\n            }\n        });\n    }\n\n    override get actions(): Action[] {\n        const actions: Action[] = [];\n        if(this.searchService.query.findSelect(this.name)){\n            actions.push(this.clearFilters);\n        }\n        return actions;\n    }\n\n    get innerWidth(): number {\n        return this.width - this.margin.left - this.margin.right;\n    }\n\n    get innerHeight(): number {\n        return this.height - this.margin.top - this.margin.bottom;\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n\n        if(!this.x) {\n            \n            // Scales\n            this.x = d3.scaleUtc()\n                .range([0, this.innerWidth]);\n\n            this.y = d3.scaleLog()\n                .range([this.innerHeight, 0]);\n\n            this.r = d3.scaleLog()\n                .range([4, 10]);\n\n            this.c = d3.scaleOrdinal()\n                .range(d3.schemeCategory10);\n                \n        }\n        \n        // Resize handling\n\n        if(changes[\"height\"]) {\n            this.y.range([this.innerHeight, 0]);\n            if(this.viewInit) {\n                this.drawYAxis();\n            }\n        }\n\n        if(changes[\"width\"]) {\n            this.x.range([0, this.innerWidth]);\n            if(this.viewInit) {\n                this.drawXAxis();\n            }\n        }\n\n        if(this.viewInit && changes[\"results\"] && this.results){\n            this.updateChart();\n        }\n    }\n\n    ngAfterViewInit() {\n        \n        // Get native elements\n        this.xAxis$ = d3.select(this.gx.nativeElement);\n        this.yAxis$ = d3.select(this.gy.nativeElement);\n\n        d3.select(this.overlay.nativeElement)        \n            .on(\"mousemove\", () => this.onMousemove())\n            .on(\"mouseout\", () => this.onMouseout());\n        \n        this.viewInit = true;\n\n        this.updateChart();\n        \n        // This is necessary to prevent \"Expression has changed after check\" errors\n        // caused by calling updateChart inside ngAfterViewInit().\n        // Unfortunately this is necessary because we need the DOM to be rendered in order fill the DOM\n        // (for example gAxis needs to exist so we can draw the axis)\n        this.cdRef.detectChanges();\n    }\n\n    /**\n     * Recomputes the data to display and update the chart's primitives\n     */\n    updateChart() {\n\n        this.turnoffTooltip();\n\n        if(this.results) {\n            \n            this.updateData();\n\n            // Update scales\n            this.updateScales();\n\n            // Update Axes\n            this.updateAxes();\n\n        }\n    }\n\n    /**\n     * Computes the data displayed in the chart in function of the raw data provided as input\n     */\n    updateData() {\n        \n        // Extract number of occurrences from the aggregation\n        const counts = new Map();\n        this.results.aggregations\n            ?.find(a => Utils.eqNC(a.name, this.moneyAggregation))\n            ?.items\n            ?.forEach(item => counts.set(item.value.toString(), item.count));\n\n        this.data = [];\n        this.results.records?.forEach(record =>\n            record?.[this.moneyColumn]?.forEach(money => {\n                const datum = this.parseEntity(money.value, record, counts.get(money.value) || 1);\n                if(datum) {\n                    this.data.push(datum);\n                }\n            })\n        );\n\n    }\n\n    /**\n     * Parse the entity stored in the \"money\" column and returns a datum (incl. numerical value and currency)\n     */\n    @Input()\n    parseEntity = (rawvalue: string, record: Record, count): MoneyDatum | undefined => {\n        const val = rawvalue.split(\" \"); // Split \"USD 1000\"\n        // Check the data is valid\n        if(!record.modified || isNaN(val[1] as any) || parseFloat(val[1]) (this.data, d => d.date);\n            const yExtent = d3.extent(this.data, d => d.value);\n            const rExtent = d3.extent(this.data, d => d.count);\n\n            if(!xExtent[0] || !xExtent[1] || !yExtent[0] || !yExtent[1] || !rExtent[0] || !rExtent[1]) {\n                return;\n            }\n\n            this.x.domain(xExtent);\n            this.y.domain(yExtent);\n            this.r.domain(rExtent);\n            this.c.domain(this.data.map(d => d.record.id));\n        }\n\n    }\n    \n    /**\n     * Update the x and y axes\n     */\n    protected updateAxes(){\n        this.drawXAxis();\n        this.drawYAxis();\n    }\n\n    /**\n     * Draws the X axis\n     */\n     protected drawXAxis() {\n        const xAxis = d3.axisBottom(this.x)\n            .ticks(5);\n        this.xAxis$.call(xAxis);\n        //this.xAxis$.selectAll(\".domain\").remove(); // Remove the axis line\n    }\n\n    /**\n     * Draws the Y axis\n     */\n    protected drawYAxis() {\n        const yAxisTicks = this.y.ticks(5)\n            .filter(tick => Number.isInteger(tick)); // Keep only integer ticks https://stackoverflow.com/questions/13576906/d3-tick-marks-on-integers-only/56821215\n\n        const yAxis = d3.axisLeft(this.y)\n            .tickValues(yAxisTicks)\n            .tickFormat(this.formatService.moneyFormatter); //https://github.com/d3/d3-format\n        this.yAxis$.call(yAxis);\n        //this.yAxis$.selectAll(\".domain\").remove(); // Remove the axis line\n    }\n\n    \n    /**\n     * Redraw the simple tooltip (vertical line)\n     */\n    onMousemove() {\n        if(!this.tooltipItem && this.showTooltip) {\n            this.tooltipX = d3.mouse(this.overlay.nativeElement)[0];\n        }\n        this.tooltipItem = undefined;\n    }\n\n    /**\n     * Notify parent component that a record was clicked\n     * @param datum\n     */\n    onRecordClicked(datum: MoneyDatum) {\n        this.recordClicked.next(datum.record);\n    }\n\n    /**\n     * Filter the search results with the clicked amount of money\n     * @param datum \n     */\n    filterDatum(datum: MoneyDatum) {\n        const expr = this.exprBuilder.makeExpr(this.moneyColumn, datum.rawvalue, `${datum.currency} ${this.formatService.moneyFormatter(datum.value)}`)\n        this.searchService.query.addSelect(expr, this.name);\n        this.searchService.search();\n    }\n\n    /**\n     * Remove the simple tooltip (vertical line)\n     */\n    onMouseout() {\n        if(!this.tooltipItem) {\n            this.tooltipX = undefined;\n        }\n    }\n\n    /**\n     * Compute the tooltip position when an amount of money is hovered\n     * @param datum \n     */\n    onMouseEnterDatum(datum: MoneyDatum) {\n\n        const x = this.x(datum.date);\n        const y = this.y(datum.value);\n        const r = this.r(datum.count);\n\n        if(!this.showTooltip || Utils.isUndefined(x) || Utils.isUndefined(r) || Utils.isUndefined(y)) return;\n\n        this.tooltipItem = datum;\n\n        // Since we use viewBox to auto-adjust the SVG to the container size, we have to\n        // convert from the SVG coordinate system to the HTML coordinate system\n        const actualWidth = (this.el.nativeElement as HTMLElement).offsetWidth;\n        const scale = actualWidth / this.width;\n        const relativeX = x / this.width;\n\n        // Tooltip to the right\n        if(relativeX  {\n        if(this.tooltipItem) {\n            this.tooltipItem = undefined;\n            this.tooltipX = undefined;\n        }\n    }\n}\n    \n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/NetworkContext.html":{"url":"interfaces/NetworkContext.html","title":"interface - NetworkContext","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  NetworkContext\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            network/network-models.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            appService\n                                        \n                                \n                                \n                                        \n                                            edges\n                                        \n                                \n                                \n                                        \n                                            exprBuilder\n                                        \n                                \n                                \n                                        \n                                            intlService\n                                        \n                                \n                                \n                                        \n                                            name\n                                        \n                                \n                                \n                                        \n                                            networkService\n                                        \n                                \n                                \n                                        \n                                            nodes\n                                        \n                                \n                                \n                                        \n                                            searchService\n                                        \n                                \n                            \n                        \n                    \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    \n                                        select\n                                    \n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        select\n                        \n                    \n                \n            \n            \n                \nselect(node?: Node, edge?: Edge)\n                \n            \n\n\n            \n                \n                    Defined in network/network-models.ts:128\n                \n            \n\n\n            \n                \n                    Interactions\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    node\n                                    \n                                                Node\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    edge\n                                    \n                                                Edge\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        appService\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        appService:     AppService\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     AppService\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        edges\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        edges:         DataSet\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         DataSet\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        exprBuilder\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        exprBuilder:     ExprBuilder\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     ExprBuilder\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        intlService\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        intlService:     IntlService\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     IntlService\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        name\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        name:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Name of this network, for use in selections\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        networkService\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        networkService:     VisNetworkService\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     VisNetworkService\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        nodes\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        nodes:         DataSet\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         DataSet\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Vis.js data structures\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        searchService\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        searchService:     SearchService\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     SearchService\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Useful services\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { Subject } from 'rxjs';\nimport { Action } from '@sinequa/components/action';\nimport { Utils } from '@sinequa/core/base';\nimport { DataSet } from \"vis-data/peer/esm/vis-data\";\nimport { SearchService } from '@sinequa/components/search';\nimport { VisNetworkService } from 'ngx-vis';\nimport { AppService, ExprBuilder } from '@sinequa/core/app-utils';\nimport { IntlService } from '@sinequa/core/intl';\n\n// TYPES (configuration)\n\nexport interface NodeType {\n    name: string;\n    /** Vis Node options (merged in the Node objects). See https://visjs.github.io/vis-network/docs/network/nodes.html */\n    nodeOptions: {[key: string]: any} | ((node: Node, type: NodeType) => {[key: string]: any} );\n    /** If a field is provided, it can be used to filter the node value (and access the label, formatter, etc.) */\n    field?: string;\n}\n\nexport interface EdgeType {\n    /** Node types attached to this edge type. Should typically be 2 items, but cooccurrence aggregation might return more */\n    nodeTypes: NodeType[];\n    /** Vis Edge options (merged in the Edge objects). See https://visjs.github.io/vis-network/docs/network/edges.html */\n    edgeOptions: {[key: string]: any} | ((nodes: Node[], edge: Edge, type: EdgeType) => {[key: string]: any} );\n    /** If a field is provided, it can be used to filter the node value (and access the label, formatter, etc.) */\n    field?: string;\n}\n\n\n// DATA\n\n// Nodes (based on Vis Node interface)\n\nexport interface Node {\n    id: string;\n    label: string;\n\n    // Custom properties\n    type: NodeType;\n    provider: NetworkProvider;\n    visible: boolean;\n    /** count is a mutable property used to scale the node size in function of the size of adjacent edges*/\n    count: number;\n    /** the precedence of a node determines which node object is kept when merging two dataset (the highest precedence node is kept) */\n    precedence?: number;\n    // Context\n    context: NetworkContext;\n}\n\n// Edge (based on Vis Edge interface)\n\nexport interface Edge {\n    id: string;\n    from: string;\n    to: string;\n\n    // Custom properties\n    type: EdgeType;\n    provider: NetworkProvider;\n    visible: boolean;    \n    /** count is a property representing the strength of an edge, which scales the count of adjacent nodes*/\n    count: number;\n    /** A field value may be provided to filter search based on the edge field type */\n    fieldValue?: string;\n    // Context\n    context: NetworkContext;\n}\n\n\nexport interface NetworkProvider {\n    /** Whether or not the provider is active (if inactive, it will not provide empty datasets of nodes and edges) */\n    active: boolean;\n\n    /** Readable name of this provider */\n    name: string;\n\n    /** Dataset of this provider */\n    dataset: NetworkDataset;\n\n    /** Context (wrapper for general data about the network and services) */\n    context: NetworkContext;\n\n    /** Returns the Subject of this provider */\n    getProvider(): Subject;\n\n    /** Asynchronously provide data via it's provider Subject */\n    getData(context: NetworkContext); // skip/count handled internally\n\n    /** Called after the datasets provided by all providers have been merged into a single dataset */\n    onDatasetsMerged(dataset: NetworkDataset);\n\n    /** Called after the dataset is filtered and passed to Vis for rendering */\n    onNodesInserted(nodes: Node[]);\n\n    /** Called when ANY node is clicked in the rendered view of the network */\n    onNodeClicked(node: Node | undefined);\n\n    /** Called when ANY edge is clicked in the rendered view of the network */\n    onEdgeClicked(edge: Edge | undefined);\n\n    /** Retrieve the list of action for this provider. */\n    getProviderActions(): Action[];\n\n    /** Retrieve the list of action for a given node, and this provider. */\n    getNodeActions(node: Node): Action[];\n    \n    /** Retrieve the list of action for a given edge, and this provider. */\n    getEdgeActions(edge: Edge): Action[];\n\n    /** Called when the providers are discarded. Can be use to cancel subscriptions */\n    onDestroy();\n}\n\nexport interface NetworkContext {\n    /** Name of this network, for use in selections */\n    name: string;\n    /** Vis.js data structures */\n    nodes: DataSet;\n    edges: DataSet;\n    /** Useful services */\n    searchService: SearchService;\n    networkService: VisNetworkService;\n    appService: AppService;\n    intlService: IntlService;\n    exprBuilder: ExprBuilder;\n    /** Interactions */\n    select(node?: Node, edge?: Edge): void;\n}\n\n\nexport class NetworkDataset {\n\n    // Node index\n    private readonly nodeIdx: Map = new Map();\n\n    // Edge index\n    private readonly edgeIdx: Map = new Map();\n\n\n    /** Returns whether this node exists */\n    public hasNode(id: string): boolean {\n        return this.nodeIdx.has(id);\n    }\n    \n    /** Returns whether this edge exists */\n    public hasEdge(id: string): boolean {\n        return this.edgeIdx.has(id);\n    }\n\n    /** Returns the node with given id */\n    public getNode(id: string): Node | undefined {\n        return this.nodeIdx.get(id);\n    }\n\n    /** Returns the edge with given id */\n    public getEdge(id: string): Edge | undefined {\n        return this.edgeIdx.get(id);\n    }\n\n    /** Get the list of nodes */\n    public getNodes(): Node[] {\n        return Array.from(this.nodeIdx.values());\n    }\n\n    /** Get the list of edges */\n    public getEdges(): Edge[] {\n        return Array.from(this.edgeIdx.values());\n    }    \n\n    /** Get the list of visible nodes */\n    public getVisibleNodes(): Node[] {\n        return this.getNodes().filter(n => n.visible);\n    }\n\n    /** Get the list of visible edges */\n    public getVisibleEdges(): Edge[] {\n        return this.getEdges().filter(e => e.visible);\n    }\n\n    /** Get the list of node ids */\n    public getNodeIds(): string[] {\n        return Array.from(this.nodeIdx.keys());\n    }\n\n    /** Get the list of edge ids */\n    public getEdgeIds(): string[] {\n        return Array.from(this.edgeIdx.keys());\n    }\n    \n    /** Clears this dataset */\n    public clear() {\n        this.nodeIdx.clear();\n        this.edgeIdx.clear();\n    }\n\n    /** Add one or multiple nodes */\n    public addNodes(nodes: Node | Node[]) {\n        Array.isArray(nodes)? nodes.forEach(node => this.addNode(node)) : this.addNode(nodes);\n    }\n\n    /** Add one or multiple edges. */\n    public addEdges(edges: Edge | Edge[]) {\n        Array.isArray(edges)? edges.forEach(edge => this.addEdge(edge)) : this.addEdge(edges);\n    }\n\n    /** Remove one or multiple nodes. /!\\ Connected edges MUST be removed as well (use cleanRemoveNode() to do so) */\n    private removeNodes(ids: string | string[]) {\n        Array.isArray(ids)? ids.forEach(id => this.removeNode(id)) : this.removeNode(ids);\n    }\n\n    /** Remove one or multiple edges. */\n    public removeEdges(ids: string | string[]) {\n        Array.isArray(ids)? ids.forEach(id => this.removeEdge(id)) : this.removeEdge(ids);\n    }\n\n    /** Remove a node and its adjacent edges. keepDanglingNodes = false (default) removes the remaining nodes with no neighbor */\n    public cleanRemoveNode(nodeId: string, keepDanglingNodes?: boolean) {\n        this.getAdjacentEdges(nodeId).forEach(edge => {\n            const neighbor = this.getNode(edge.from === nodeId ? edge.to : edge.from) as Node;\n            this.removeEdges(edge.id);\n            neighbor.count -= edge.count;\n            if(!keepDanglingNodes && this.getAdjacentEdges(neighbor.id).length === 0) {\n                this.removeNodes(neighbor.id);\n            }\n        });\n    }\n\n    /** Get the edges adjacent to a node (O(n) method) */\n    public getAdjacentEdges(nodeId: string): Edge[] {\n        return this.getEdges().filter(e => e.from === nodeId || e.to === nodeId);\n    }\n\n    /** Get the nodes connected to a node via a single node (0(n) method) */\n    public getConnectedNodes(nodeId: string): Node[] {\n        return this.getAdjacentEdges(nodeId)\n                    .map(e => this.getNode(e.from === nodeId ? e.to : e.from) as Node);\n    }\n\n    /**\n     * Merge this dataset with another one. \n     * \n     * When duplicates nodes or edges are found:\n     * - The existing item is kept and updated\n     * - Their 'count' properties are added\n     * - Their 'visible' properties are ORed\n     * - Their nodeOptions and edgeOptions are updated\n     * \n     * @param dataset \n     */\n    public merge(dataset: NetworkDataset): NetworkDataset {\n\n        dataset.getNodes().forEach(node => {\n            node = Object.assign({}, node); // Avoid modifying the original datasets\n            if(!this.hasNode(node.id)) {\n                this.addNode(node);\n            }\n            else {\n                // Merge the new node with the existing one (which takes precedence by default)\n                let existingNode = this.getNode(node.id) as Node;\n                if((node.precedence || 0) > (existingNode.precedence || 0)) {\n                    // Set the new node in the node index\n                    this.nodeIdx.set(node.id, node);\n                    // swap existingNode and node for the merging of count, visible and node options\n                    const temp = node;\n                    node = existingNode;\n                    existingNode = temp;\n                }\n                existingNode.count += node.count;\n                existingNode.visible = existingNode.visible || node.visible;\n                let options: {[key: string]: any};\n                if(typeof existingNode.type.nodeOptions === \"function\") {\n                    options = existingNode.type.nodeOptions(existingNode, existingNode.type);\n                }\n                else {\n                    options = existingNode.type.nodeOptions;\n                }\n                Utils.extend(existingNode, options);\n            }\n        });\n\n        dataset.getEdges().forEach(edge => {\n            edge = Object.assign({}, edge); // Avoid modifying the original datasets\n            if(!this.hasEdge(edge.id)) {\n                this.addEdge(edge);\n            }\n            else {\n                // Merge the new edge with the existing one (which takes precedence)\n                // eg. statistical and semantic edges\n                const existingEdge = this.getEdge(edge.id) as Edge;\n                existingEdge.count += edge.count;\n                existingEdge.visible = existingEdge.visible || edge.visible;\n                // Merge edge labels (taking duplicates into account)\n                if(!!existingEdge[\"label\"] && !!edge[\"label\"]){\n                    edge[\"labels\"].forEach(label => {\n                        if(existingEdge[\"labels\"].indexOf(label) === -1) {\n                            existingEdge[\"label\"] += \", \"+label;\n                            existingEdge[\"labels\"].push(label);\n                        }\n                    });\n                }\n                let options: {[key: string]: any};\n                if(typeof existingEdge.type.edgeOptions === \"function\") {\n                    const nodes = [existingEdge.from, existingEdge.to].map(id => this.nodeIdx[id]);\n                    options = existingEdge.type.edgeOptions(nodes, existingEdge, existingEdge.type);\n                }\n                else {\n                    options = existingEdge.type.edgeOptions;\n                }\n                Utils.extend(existingEdge, options);\n            }\n        });\n\n        return this;\n    }\n\n    /** Transfer nodes and edges to the Vis nodes and edges DataSets */\n    updateDatasets(nodes: DataSet, edges: DataSet) {\n        nodes.remove(nodes.get().filter(n => !this.getNode(n.id)?.visible));\n        edges.remove(edges.get().filter(e => !this.getEdge(e.id)?.visible));\n        nodes.update(this.getVisibleNodes());\n        edges.update(this.getVisibleEdges());\n    }\n\n    \n    private addNode(node: Node) {\n        if(this.hasNode(node.id)) {\n            throw new Error(`Node '${node.id}' already in dataset`);\n        }\n        this.nodeIdx.set(node.id, node);\n    }\n    \n    private addEdge(edge: Edge) {\n        if(this.hasEdge(edge.id)) {\n            throw new Error(`Edge '${edge.id}' already in dataset`);\n        }\n        if(!this.hasNode(edge.from) || !this.hasNode(edge.to)) {\n            throw new Error(`Edge '${edge.id}' cannot be added as one of the nodes is missing from the dataset`)\n        }\n        this.edgeIdx.set(edge.id, edge);\n    }\n\n    private removeNode(id: string) {\n        this.nodeIdx.delete(id);\n    }\n\n    private removeEdge(id: string) {\n        this.edgeIdx.delete(id);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/NetworkDataset.html":{"url":"classes/NetworkDataset.html","title":"class - NetworkDataset","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  NetworkDataset\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            network/network-models.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                addEdges\n                            \n                            \n                                    Public\n                                addNodes\n                            \n                            \n                                    Public\n                                cleanRemoveNode\n                            \n                            \n                                    Public\n                                clear\n                            \n                            \n                                    Public\n                                getAdjacentEdges\n                            \n                            \n                                    Public\n                                getConnectedNodes\n                            \n                            \n                                    Public\n                                getEdge\n                            \n                            \n                                    Public\n                                getEdgeIds\n                            \n                            \n                                    Public\n                                getEdges\n                            \n                            \n                                    Public\n                                getNode\n                            \n                            \n                                    Public\n                                getNodeIds\n                            \n                            \n                                    Public\n                                getNodes\n                            \n                            \n                                    Public\n                                getVisibleEdges\n                            \n                            \n                                    Public\n                                getVisibleNodes\n                            \n                            \n                                    Public\n                                hasEdge\n                            \n                            \n                                    Public\n                                hasNode\n                            \n                            \n                                    Public\n                                merge\n                            \n                            \n                                    Public\n                                removeEdges\n                            \n                            \n                                updateDatasets\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        addEdges\n                        \n                    \n                \n            \n            \n                \n                    \n                    addEdges(edges: Edge | Edge[])\n                \n            \n\n\n            \n                \n                    Defined in network/network-models.ts:203\n                \n            \n\n\n            \n                \n                    Add one or multiple edges.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    edges\n                                    \n                                                Edge | Edge[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        addNodes\n                        \n                    \n                \n            \n            \n                \n                    \n                    addNodes(nodes: Node | Node[])\n                \n            \n\n\n            \n                \n                    Defined in network/network-models.ts:198\n                \n            \n\n\n            \n                \n                    Add one or multiple nodes\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    nodes\n                                    \n                                                Node | Node[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        cleanRemoveNode\n                        \n                    \n                \n            \n            \n                \n                    \n                    cleanRemoveNode(nodeId: string, keepDanglingNodes?: boolean)\n                \n            \n\n\n            \n                \n                    Defined in network/network-models.ts:218\n                \n            \n\n\n            \n                \n                    Remove a node and its adjacent edges. keepDanglingNodes = false (default) removes the remaining nodes with no neighbor\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    nodeId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    keepDanglingNodes\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        clear\n                        \n                    \n                \n            \n            \n                \n                    \n                    clear()\n                \n            \n\n\n            \n                \n                    Defined in network/network-models.ts:192\n                \n            \n\n\n            \n                \n                    Clears this dataset\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        getAdjacentEdges\n                        \n                    \n                \n            \n            \n                \n                    \n                    getAdjacentEdges(nodeId: string)\n                \n            \n\n\n            \n                \n                    Defined in network/network-models.ts:230\n                \n            \n\n\n            \n                \n                    Get the edges adjacent to a node (O(n) method)\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    nodeId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Edge[]\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        getConnectedNodes\n                        \n                    \n                \n            \n            \n                \n                    \n                    getConnectedNodes(nodeId: string)\n                \n            \n\n\n            \n                \n                    Defined in network/network-models.ts:235\n                \n            \n\n\n            \n                \n                    Get the nodes connected to a node via a single node (0(n) method)\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    nodeId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Node[]\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        getEdge\n                        \n                    \n                \n            \n            \n                \n                    \n                    getEdge(id: string)\n                \n            \n\n\n            \n                \n                    Defined in network/network-models.ts:157\n                \n            \n\n\n            \n                \n                    Returns the edge with given id\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Edge | undefined\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        getEdgeIds\n                        \n                    \n                \n            \n            \n                \n                    \n                    getEdgeIds()\n                \n            \n\n\n            \n                \n                    Defined in network/network-models.ts:187\n                \n            \n\n\n            \n                \n                    Get the list of edge ids\n\n\n                    \n                        Returns :     string[]\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        getEdges\n                        \n                    \n                \n            \n            \n                \n                    \n                    getEdges()\n                \n            \n\n\n            \n                \n                    Defined in network/network-models.ts:167\n                \n            \n\n\n            \n                \n                    Get the list of edges\n\n\n                    \n                        Returns :         Edge[]\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        getNode\n                        \n                    \n                \n            \n            \n                \n                    \n                    getNode(id: string)\n                \n            \n\n\n            \n                \n                    Defined in network/network-models.ts:152\n                \n            \n\n\n            \n                \n                    Returns the node with given id\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Node | undefined\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        getNodeIds\n                        \n                    \n                \n            \n            \n                \n                    \n                    getNodeIds()\n                \n            \n\n\n            \n                \n                    Defined in network/network-models.ts:182\n                \n            \n\n\n            \n                \n                    Get the list of node ids\n\n\n                    \n                        Returns :     string[]\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        getNodes\n                        \n                    \n                \n            \n            \n                \n                    \n                    getNodes()\n                \n            \n\n\n            \n                \n                    Defined in network/network-models.ts:162\n                \n            \n\n\n            \n                \n                    Get the list of nodes\n\n\n                    \n                        Returns :         Node[]\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        getVisibleEdges\n                        \n                    \n                \n            \n            \n                \n                    \n                    getVisibleEdges()\n                \n            \n\n\n            \n                \n                    Defined in network/network-models.ts:177\n                \n            \n\n\n            \n                \n                    Get the list of visible edges\n\n\n                    \n                        Returns :         Edge[]\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        getVisibleNodes\n                        \n                    \n                \n            \n            \n                \n                    \n                    getVisibleNodes()\n                \n            \n\n\n            \n                \n                    Defined in network/network-models.ts:172\n                \n            \n\n\n            \n                \n                    Get the list of visible nodes\n\n\n                    \n                        Returns :         Node[]\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        hasEdge\n                        \n                    \n                \n            \n            \n                \n                    \n                    hasEdge(id: string)\n                \n            \n\n\n            \n                \n                    Defined in network/network-models.ts:147\n                \n            \n\n\n            \n                \n                    Returns whether this edge exists\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        hasNode\n                        \n                    \n                \n            \n            \n                \n                    \n                    hasNode(id: string)\n                \n            \n\n\n            \n                \n                    Defined in network/network-models.ts:142\n                \n            \n\n\n            \n                \n                    Returns whether this node exists\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        merge\n                        \n                    \n                \n            \n            \n                \n                    \n                    merge(dataset: NetworkDataset)\n                \n            \n\n\n            \n                \n                    Defined in network/network-models.ts:251\n                \n            \n\n\n            \n                \n                    Merge this dataset with another one.\nWhen duplicates nodes or edges are found:\n\nThe existing item is kept and updated\nTheir 'count' properties are added\nTheir 'visible' properties are ORed\nTheir nodeOptions and edgeOptions are updated\n\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dataset\n                                    \n                                                NetworkDataset\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         NetworkDataset\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        removeEdges\n                        \n                    \n                \n            \n            \n                \n                    \n                    removeEdges(ids: string | string[])\n                \n            \n\n\n            \n                \n                    Defined in network/network-models.ts:213\n                \n            \n\n\n            \n                \n                    Remove one or multiple edges.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    ids\n                                    \n                                            string | string[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        updateDatasets\n                        \n                    \n                \n            \n            \n                \nupdateDatasets(nodes: DataSet, edges: DataSet)\n                \n            \n\n\n            \n                \n                    Defined in network/network-models.ts:318\n                \n            \n\n\n            \n                \n                    Transfer nodes and edges to the Vis nodes and edges DataSets\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    nodes\n                                    \n                                                DataSet\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    edges\n                                    \n                                                DataSet\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Subject } from 'rxjs';\nimport { Action } from '@sinequa/components/action';\nimport { Utils } from '@sinequa/core/base';\nimport { DataSet } from \"vis-data/peer/esm/vis-data\";\nimport { SearchService } from '@sinequa/components/search';\nimport { VisNetworkService } from 'ngx-vis';\nimport { AppService, ExprBuilder } from '@sinequa/core/app-utils';\nimport { IntlService } from '@sinequa/core/intl';\n\n// TYPES (configuration)\n\nexport interface NodeType {\n    name: string;\n    /** Vis Node options (merged in the Node objects). See https://visjs.github.io/vis-network/docs/network/nodes.html */\n    nodeOptions: {[key: string]: any} | ((node: Node, type: NodeType) => {[key: string]: any} );\n    /** If a field is provided, it can be used to filter the node value (and access the label, formatter, etc.) */\n    field?: string;\n}\n\nexport interface EdgeType {\n    /** Node types attached to this edge type. Should typically be 2 items, but cooccurrence aggregation might return more */\n    nodeTypes: NodeType[];\n    /** Vis Edge options (merged in the Edge objects). See https://visjs.github.io/vis-network/docs/network/edges.html */\n    edgeOptions: {[key: string]: any} | ((nodes: Node[], edge: Edge, type: EdgeType) => {[key: string]: any} );\n    /** If a field is provided, it can be used to filter the node value (and access the label, formatter, etc.) */\n    field?: string;\n}\n\n\n// DATA\n\n// Nodes (based on Vis Node interface)\n\nexport interface Node {\n    id: string;\n    label: string;\n\n    // Custom properties\n    type: NodeType;\n    provider: NetworkProvider;\n    visible: boolean;\n    /** count is a mutable property used to scale the node size in function of the size of adjacent edges*/\n    count: number;\n    /** the precedence of a node determines which node object is kept when merging two dataset (the highest precedence node is kept) */\n    precedence?: number;\n    // Context\n    context: NetworkContext;\n}\n\n// Edge (based on Vis Edge interface)\n\nexport interface Edge {\n    id: string;\n    from: string;\n    to: string;\n\n    // Custom properties\n    type: EdgeType;\n    provider: NetworkProvider;\n    visible: boolean;    \n    /** count is a property representing the strength of an edge, which scales the count of adjacent nodes*/\n    count: number;\n    /** A field value may be provided to filter search based on the edge field type */\n    fieldValue?: string;\n    // Context\n    context: NetworkContext;\n}\n\n\nexport interface NetworkProvider {\n    /** Whether or not the provider is active (if inactive, it will not provide empty datasets of nodes and edges) */\n    active: boolean;\n\n    /** Readable name of this provider */\n    name: string;\n\n    /** Dataset of this provider */\n    dataset: NetworkDataset;\n\n    /** Context (wrapper for general data about the network and services) */\n    context: NetworkContext;\n\n    /** Returns the Subject of this provider */\n    getProvider(): Subject;\n\n    /** Asynchronously provide data via it's provider Subject */\n    getData(context: NetworkContext); // skip/count handled internally\n\n    /** Called after the datasets provided by all providers have been merged into a single dataset */\n    onDatasetsMerged(dataset: NetworkDataset);\n\n    /** Called after the dataset is filtered and passed to Vis for rendering */\n    onNodesInserted(nodes: Node[]);\n\n    /** Called when ANY node is clicked in the rendered view of the network */\n    onNodeClicked(node: Node | undefined);\n\n    /** Called when ANY edge is clicked in the rendered view of the network */\n    onEdgeClicked(edge: Edge | undefined);\n\n    /** Retrieve the list of action for this provider. */\n    getProviderActions(): Action[];\n\n    /** Retrieve the list of action for a given node, and this provider. */\n    getNodeActions(node: Node): Action[];\n    \n    /** Retrieve the list of action for a given edge, and this provider. */\n    getEdgeActions(edge: Edge): Action[];\n\n    /** Called when the providers are discarded. Can be use to cancel subscriptions */\n    onDestroy();\n}\n\nexport interface NetworkContext {\n    /** Name of this network, for use in selections */\n    name: string;\n    /** Vis.js data structures */\n    nodes: DataSet;\n    edges: DataSet;\n    /** Useful services */\n    searchService: SearchService;\n    networkService: VisNetworkService;\n    appService: AppService;\n    intlService: IntlService;\n    exprBuilder: ExprBuilder;\n    /** Interactions */\n    select(node?: Node, edge?: Edge): void;\n}\n\n\nexport class NetworkDataset {\n\n    // Node index\n    private readonly nodeIdx: Map = new Map();\n\n    // Edge index\n    private readonly edgeIdx: Map = new Map();\n\n\n    /** Returns whether this node exists */\n    public hasNode(id: string): boolean {\n        return this.nodeIdx.has(id);\n    }\n    \n    /** Returns whether this edge exists */\n    public hasEdge(id: string): boolean {\n        return this.edgeIdx.has(id);\n    }\n\n    /** Returns the node with given id */\n    public getNode(id: string): Node | undefined {\n        return this.nodeIdx.get(id);\n    }\n\n    /** Returns the edge with given id */\n    public getEdge(id: string): Edge | undefined {\n        return this.edgeIdx.get(id);\n    }\n\n    /** Get the list of nodes */\n    public getNodes(): Node[] {\n        return Array.from(this.nodeIdx.values());\n    }\n\n    /** Get the list of edges */\n    public getEdges(): Edge[] {\n        return Array.from(this.edgeIdx.values());\n    }    \n\n    /** Get the list of visible nodes */\n    public getVisibleNodes(): Node[] {\n        return this.getNodes().filter(n => n.visible);\n    }\n\n    /** Get the list of visible edges */\n    public getVisibleEdges(): Edge[] {\n        return this.getEdges().filter(e => e.visible);\n    }\n\n    /** Get the list of node ids */\n    public getNodeIds(): string[] {\n        return Array.from(this.nodeIdx.keys());\n    }\n\n    /** Get the list of edge ids */\n    public getEdgeIds(): string[] {\n        return Array.from(this.edgeIdx.keys());\n    }\n    \n    /** Clears this dataset */\n    public clear() {\n        this.nodeIdx.clear();\n        this.edgeIdx.clear();\n    }\n\n    /** Add one or multiple nodes */\n    public addNodes(nodes: Node | Node[]) {\n        Array.isArray(nodes)? nodes.forEach(node => this.addNode(node)) : this.addNode(nodes);\n    }\n\n    /** Add one or multiple edges. */\n    public addEdges(edges: Edge | Edge[]) {\n        Array.isArray(edges)? edges.forEach(edge => this.addEdge(edge)) : this.addEdge(edges);\n    }\n\n    /** Remove one or multiple nodes. /!\\ Connected edges MUST be removed as well (use cleanRemoveNode() to do so) */\n    private removeNodes(ids: string | string[]) {\n        Array.isArray(ids)? ids.forEach(id => this.removeNode(id)) : this.removeNode(ids);\n    }\n\n    /** Remove one or multiple edges. */\n    public removeEdges(ids: string | string[]) {\n        Array.isArray(ids)? ids.forEach(id => this.removeEdge(id)) : this.removeEdge(ids);\n    }\n\n    /** Remove a node and its adjacent edges. keepDanglingNodes = false (default) removes the remaining nodes with no neighbor */\n    public cleanRemoveNode(nodeId: string, keepDanglingNodes?: boolean) {\n        this.getAdjacentEdges(nodeId).forEach(edge => {\n            const neighbor = this.getNode(edge.from === nodeId ? edge.to : edge.from) as Node;\n            this.removeEdges(edge.id);\n            neighbor.count -= edge.count;\n            if(!keepDanglingNodes && this.getAdjacentEdges(neighbor.id).length === 0) {\n                this.removeNodes(neighbor.id);\n            }\n        });\n    }\n\n    /** Get the edges adjacent to a node (O(n) method) */\n    public getAdjacentEdges(nodeId: string): Edge[] {\n        return this.getEdges().filter(e => e.from === nodeId || e.to === nodeId);\n    }\n\n    /** Get the nodes connected to a node via a single node (0(n) method) */\n    public getConnectedNodes(nodeId: string): Node[] {\n        return this.getAdjacentEdges(nodeId)\n                    .map(e => this.getNode(e.from === nodeId ? e.to : e.from) as Node);\n    }\n\n    /**\n     * Merge this dataset with another one. \n     * \n     * When duplicates nodes or edges are found:\n     * - The existing item is kept and updated\n     * - Their 'count' properties are added\n     * - Their 'visible' properties are ORed\n     * - Their nodeOptions and edgeOptions are updated\n     * \n     * @param dataset \n     */\n    public merge(dataset: NetworkDataset): NetworkDataset {\n\n        dataset.getNodes().forEach(node => {\n            node = Object.assign({}, node); // Avoid modifying the original datasets\n            if(!this.hasNode(node.id)) {\n                this.addNode(node);\n            }\n            else {\n                // Merge the new node with the existing one (which takes precedence by default)\n                let existingNode = this.getNode(node.id) as Node;\n                if((node.precedence || 0) > (existingNode.precedence || 0)) {\n                    // Set the new node in the node index\n                    this.nodeIdx.set(node.id, node);\n                    // swap existingNode and node for the merging of count, visible and node options\n                    const temp = node;\n                    node = existingNode;\n                    existingNode = temp;\n                }\n                existingNode.count += node.count;\n                existingNode.visible = existingNode.visible || node.visible;\n                let options: {[key: string]: any};\n                if(typeof existingNode.type.nodeOptions === \"function\") {\n                    options = existingNode.type.nodeOptions(existingNode, existingNode.type);\n                }\n                else {\n                    options = existingNode.type.nodeOptions;\n                }\n                Utils.extend(existingNode, options);\n            }\n        });\n\n        dataset.getEdges().forEach(edge => {\n            edge = Object.assign({}, edge); // Avoid modifying the original datasets\n            if(!this.hasEdge(edge.id)) {\n                this.addEdge(edge);\n            }\n            else {\n                // Merge the new edge with the existing one (which takes precedence)\n                // eg. statistical and semantic edges\n                const existingEdge = this.getEdge(edge.id) as Edge;\n                existingEdge.count += edge.count;\n                existingEdge.visible = existingEdge.visible || edge.visible;\n                // Merge edge labels (taking duplicates into account)\n                if(!!existingEdge[\"label\"] && !!edge[\"label\"]){\n                    edge[\"labels\"].forEach(label => {\n                        if(existingEdge[\"labels\"].indexOf(label) === -1) {\n                            existingEdge[\"label\"] += \", \"+label;\n                            existingEdge[\"labels\"].push(label);\n                        }\n                    });\n                }\n                let options: {[key: string]: any};\n                if(typeof existingEdge.type.edgeOptions === \"function\") {\n                    const nodes = [existingEdge.from, existingEdge.to].map(id => this.nodeIdx[id]);\n                    options = existingEdge.type.edgeOptions(nodes, existingEdge, existingEdge.type);\n                }\n                else {\n                    options = existingEdge.type.edgeOptions;\n                }\n                Utils.extend(existingEdge, options);\n            }\n        });\n\n        return this;\n    }\n\n    /** Transfer nodes and edges to the Vis nodes and edges DataSets */\n    updateDatasets(nodes: DataSet, edges: DataSet) {\n        nodes.remove(nodes.get().filter(n => !this.getNode(n.id)?.visible));\n        edges.remove(edges.get().filter(e => !this.getEdge(e.id)?.visible));\n        nodes.update(this.getVisibleNodes());\n        edges.update(this.getVisibleEdges());\n    }\n\n    \n    private addNode(node: Node) {\n        if(this.hasNode(node.id)) {\n            throw new Error(`Node '${node.id}' already in dataset`);\n        }\n        this.nodeIdx.set(node.id, node);\n    }\n    \n    private addEdge(edge: Edge) {\n        if(this.hasEdge(edge.id)) {\n            throw new Error(`Edge '${edge.id}' already in dataset`);\n        }\n        if(!this.hasNode(edge.from) || !this.hasNode(edge.to)) {\n            throw new Error(`Edge '${edge.id}' cannot be added as one of the nodes is missing from the dataset`)\n        }\n        this.edgeIdx.set(edge.id, edge);\n    }\n\n    private removeNode(id: string) {\n        this.nodeIdx.delete(id);\n    }\n\n    private removeEdge(id: string) {\n        this.edgeIdx.delete(id);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/NetworkModule.html":{"url":"modules/NetworkModule.html","title":"module - NetworkModule","body":"\n                   \n\n\n\n\n    Modules\n    NetworkModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_NetworkModule\n\n\n\ncluster_NetworkModule_declarations\n\n\n\ncluster_NetworkModule_exports\n\n\n\n\nBsEdgeInfoCard\n\nBsEdgeInfoCard\n\n\n\nNetworkModule\n\nNetworkModule\n\nNetworkModule -->\n\nBsEdgeInfoCard->NetworkModule\n\n\n\n\n\nBsNodeInfoCard\n\nBsNodeInfoCard\n\nNetworkModule -->\n\nBsNodeInfoCard->NetworkModule\n\n\n\n\n\nNetworkComponent\n\nNetworkComponent\n\nNetworkModule -->\n\nNetworkComponent->NetworkModule\n\n\n\n\n\nBsEdgeInfoCard \n\nBsEdgeInfoCard \n\nBsEdgeInfoCard  -->\n\nNetworkModule->BsEdgeInfoCard \n\n\n\n\n\nBsNodeInfoCard \n\nBsNodeInfoCard \n\nBsNodeInfoCard  -->\n\nNetworkModule->BsNodeInfoCard \n\n\n\n\n\nNetworkComponent \n\nNetworkComponent \n\nNetworkComponent  -->\n\nNetworkModule->NetworkComponent \n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            network/network.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Declarations\n                    \n                        \n                            BsEdgeInfoCard\n                        \n                        \n                            BsNodeInfoCard\n                        \n                        \n                            NetworkComponent\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            BsEdgeInfoCard\n                        \n                        \n                            BsNodeInfoCard\n                        \n                        \n                            NetworkComponent\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { NgModule } from \"@angular/core\";\nimport { CommonModule } from \"@angular/common\";\nimport { FormsModule, ReactiveFormsModule } from \"@angular/forms\";\n\n\nimport { IntlModule } from \"@sinequa/core/intl\";\nimport { UtilsModule } from \"@sinequa/components/utils\";\nimport { CollapseModule } from \"@sinequa/components/collapse\";\nimport { BsActionModule } from \"@sinequa/components/action\";\nimport { BsFacetModule } from \"@sinequa/components/facet\";\n\nimport { VisModule } from 'ngx-vis';\nimport { NetworkComponent } from \"./network.component\";\nimport { BsNodeInfoCard } from \"./node-info-card.component\";\nimport { BsEdgeInfoCard } from \"./edge-info-card.component\";\n\n@NgModule({\n    imports: [\n        CommonModule,\n        FormsModule, ReactiveFormsModule, \n\n        IntlModule,\n        UtilsModule,\n        CollapseModule,\n        BsActionModule,\n        BsFacetModule,\n        \n        VisModule\n    ],\n    declarations: [\n        NetworkComponent,\n        BsNodeInfoCard,\n        BsEdgeInfoCard\n    ],\n    exports: [\n        NetworkComponent,\n        BsNodeInfoCard,\n        BsEdgeInfoCard\n    ],\n})\nexport class NetworkModule {\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/NetworkProvider.html":{"url":"interfaces/NetworkProvider.html","title":"interface - NetworkProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  NetworkProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            network/network-models.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            active\n                                        \n                                \n                                \n                                        \n                                            context\n                                        \n                                \n                                \n                                        \n                                            dataset\n                                        \n                                \n                                \n                                        \n                                            name\n                                        \n                                \n                            \n                        \n                    \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    \n                                        getData\n                                    \n                                \n                                \n                                    \n                                        getEdgeActions\n                                    \n                                \n                                \n                                    \n                                        getNodeActions\n                                    \n                                \n                                \n                                    \n                                        getProvider\n                                    \n                                \n                                \n                                    \n                                        getProviderActions\n                                    \n                                \n                                \n                                    \n                                        onDatasetsMerged\n                                    \n                                \n                                \n                                    \n                                        onDestroy\n                                    \n                                \n                                \n                                    \n                                        onEdgeClicked\n                                    \n                                \n                                \n                                    \n                                        onNodeClicked\n                                    \n                                \n                                \n                                    \n                                        onNodesInserted\n                                    \n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getData\n                        \n                    \n                \n            \n            \n                \ngetData(context: NetworkContext)\n                \n            \n\n\n            \n                \n                    Defined in network/network-models.ts:88\n                \n            \n\n\n            \n                \n                    Asynchronously provide data via it's provider Subject\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                                NetworkContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getEdgeActions\n                        \n                    \n                \n            \n            \n                \ngetEdgeActions(edge: Edge)\n                \n            \n\n\n            \n                \n                    Defined in network/network-models.ts:109\n                \n            \n\n\n            \n                \n                    Retrieve the list of action for a given edge, and this provider.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    edge\n                                    \n                                                Edge\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Action[]\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getNodeActions\n                        \n                    \n                \n            \n            \n                \ngetNodeActions(node: Node)\n                \n            \n\n\n            \n                \n                    Defined in network/network-models.ts:106\n                \n            \n\n\n            \n                \n                    Retrieve the list of action for a given node, and this provider.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    node\n                                    \n                                                Node\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Action[]\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getProvider\n                        \n                    \n                \n            \n            \n                \ngetProvider()\n                \n            \n\n\n            \n                \n                    Defined in network/network-models.ts:85\n                \n            \n\n\n            \n                \n                    Returns the Subject of this provider\n\n\n                    \n                        Returns :         Subject\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getProviderActions\n                        \n                    \n                \n            \n            \n                \ngetProviderActions()\n                \n            \n\n\n            \n                \n                    Defined in network/network-models.ts:103\n                \n            \n\n\n            \n                \n                    Retrieve the list of action for this provider.\n\n\n                    \n                        Returns :     Action[]\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onDatasetsMerged\n                        \n                    \n                \n            \n            \n                \nonDatasetsMerged(dataset: NetworkDataset)\n                \n            \n\n\n            \n                \n                    Defined in network/network-models.ts:91\n                \n            \n\n\n            \n                \n                    Called after the datasets provided by all providers have been merged into a single dataset\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dataset\n                                    \n                                                NetworkDataset\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onDestroy\n                        \n                    \n                \n            \n            \n                \nonDestroy()\n                \n            \n\n\n            \n                \n                    Defined in network/network-models.ts:112\n                \n            \n\n\n            \n                \n                    Called when the providers are discarded. Can be use to cancel subscriptions\n\n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onEdgeClicked\n                        \n                    \n                \n            \n            \n                \nonEdgeClicked(edge: Edge | undefined)\n                \n            \n\n\n            \n                \n                    Defined in network/network-models.ts:100\n                \n            \n\n\n            \n                \n                    Called when ANY edge is clicked in the rendered view of the network\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    edge\n                                    \n                                                Edge | undefined\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onNodeClicked\n                        \n                    \n                \n            \n            \n                \nonNodeClicked(node: Node | undefined)\n                \n            \n\n\n            \n                \n                    Defined in network/network-models.ts:97\n                \n            \n\n\n            \n                \n                    Called when ANY node is clicked in the rendered view of the network\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    node\n                                    \n                                                Node | undefined\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onNodesInserted\n                        \n                    \n                \n            \n            \n                \nonNodesInserted(nodes: Node[])\n                \n            \n\n\n            \n                \n                    Defined in network/network-models.ts:94\n                \n            \n\n\n            \n                \n                    Called after the dataset is filtered and passed to Vis for rendering\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    nodes\n                                    \n                                                Node[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        active\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        active:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Whether or not the provider is active (if inactive, it will not provide empty datasets of nodes and edges)\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        context\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        context:         NetworkContext\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         NetworkContext\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Context (wrapper for general data about the network and services)\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        dataset\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        dataset:         NetworkDataset\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         NetworkDataset\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Dataset of this provider\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        name\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        name:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Readable name of this provider\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { Subject } from 'rxjs';\nimport { Action } from '@sinequa/components/action';\nimport { Utils } from '@sinequa/core/base';\nimport { DataSet } from \"vis-data/peer/esm/vis-data\";\nimport { SearchService } from '@sinequa/components/search';\nimport { VisNetworkService } from 'ngx-vis';\nimport { AppService, ExprBuilder } from '@sinequa/core/app-utils';\nimport { IntlService } from '@sinequa/core/intl';\n\n// TYPES (configuration)\n\nexport interface NodeType {\n    name: string;\n    /** Vis Node options (merged in the Node objects). See https://visjs.github.io/vis-network/docs/network/nodes.html */\n    nodeOptions: {[key: string]: any} | ((node: Node, type: NodeType) => {[key: string]: any} );\n    /** If a field is provided, it can be used to filter the node value (and access the label, formatter, etc.) */\n    field?: string;\n}\n\nexport interface EdgeType {\n    /** Node types attached to this edge type. Should typically be 2 items, but cooccurrence aggregation might return more */\n    nodeTypes: NodeType[];\n    /** Vis Edge options (merged in the Edge objects). See https://visjs.github.io/vis-network/docs/network/edges.html */\n    edgeOptions: {[key: string]: any} | ((nodes: Node[], edge: Edge, type: EdgeType) => {[key: string]: any} );\n    /** If a field is provided, it can be used to filter the node value (and access the label, formatter, etc.) */\n    field?: string;\n}\n\n\n// DATA\n\n// Nodes (based on Vis Node interface)\n\nexport interface Node {\n    id: string;\n    label: string;\n\n    // Custom properties\n    type: NodeType;\n    provider: NetworkProvider;\n    visible: boolean;\n    /** count is a mutable property used to scale the node size in function of the size of adjacent edges*/\n    count: number;\n    /** the precedence of a node determines which node object is kept when merging two dataset (the highest precedence node is kept) */\n    precedence?: number;\n    // Context\n    context: NetworkContext;\n}\n\n// Edge (based on Vis Edge interface)\n\nexport interface Edge {\n    id: string;\n    from: string;\n    to: string;\n\n    // Custom properties\n    type: EdgeType;\n    provider: NetworkProvider;\n    visible: boolean;    \n    /** count is a property representing the strength of an edge, which scales the count of adjacent nodes*/\n    count: number;\n    /** A field value may be provided to filter search based on the edge field type */\n    fieldValue?: string;\n    // Context\n    context: NetworkContext;\n}\n\n\nexport interface NetworkProvider {\n    /** Whether or not the provider is active (if inactive, it will not provide empty datasets of nodes and edges) */\n    active: boolean;\n\n    /** Readable name of this provider */\n    name: string;\n\n    /** Dataset of this provider */\n    dataset: NetworkDataset;\n\n    /** Context (wrapper for general data about the network and services) */\n    context: NetworkContext;\n\n    /** Returns the Subject of this provider */\n    getProvider(): Subject;\n\n    /** Asynchronously provide data via it's provider Subject */\n    getData(context: NetworkContext); // skip/count handled internally\n\n    /** Called after the datasets provided by all providers have been merged into a single dataset */\n    onDatasetsMerged(dataset: NetworkDataset);\n\n    /** Called after the dataset is filtered and passed to Vis for rendering */\n    onNodesInserted(nodes: Node[]);\n\n    /** Called when ANY node is clicked in the rendered view of the network */\n    onNodeClicked(node: Node | undefined);\n\n    /** Called when ANY edge is clicked in the rendered view of the network */\n    onEdgeClicked(edge: Edge | undefined);\n\n    /** Retrieve the list of action for this provider. */\n    getProviderActions(): Action[];\n\n    /** Retrieve the list of action for a given node, and this provider. */\n    getNodeActions(node: Node): Action[];\n    \n    /** Retrieve the list of action for a given edge, and this provider. */\n    getEdgeActions(edge: Edge): Action[];\n\n    /** Called when the providers are discarded. Can be use to cancel subscriptions */\n    onDestroy();\n}\n\nexport interface NetworkContext {\n    /** Name of this network, for use in selections */\n    name: string;\n    /** Vis.js data structures */\n    nodes: DataSet;\n    edges: DataSet;\n    /** Useful services */\n    searchService: SearchService;\n    networkService: VisNetworkService;\n    appService: AppService;\n    intlService: IntlService;\n    exprBuilder: ExprBuilder;\n    /** Interactions */\n    select(node?: Node, edge?: Edge): void;\n}\n\n\nexport class NetworkDataset {\n\n    // Node index\n    private readonly nodeIdx: Map = new Map();\n\n    // Edge index\n    private readonly edgeIdx: Map = new Map();\n\n\n    /** Returns whether this node exists */\n    public hasNode(id: string): boolean {\n        return this.nodeIdx.has(id);\n    }\n    \n    /** Returns whether this edge exists */\n    public hasEdge(id: string): boolean {\n        return this.edgeIdx.has(id);\n    }\n\n    /** Returns the node with given id */\n    public getNode(id: string): Node | undefined {\n        return this.nodeIdx.get(id);\n    }\n\n    /** Returns the edge with given id */\n    public getEdge(id: string): Edge | undefined {\n        return this.edgeIdx.get(id);\n    }\n\n    /** Get the list of nodes */\n    public getNodes(): Node[] {\n        return Array.from(this.nodeIdx.values());\n    }\n\n    /** Get the list of edges */\n    public getEdges(): Edge[] {\n        return Array.from(this.edgeIdx.values());\n    }    \n\n    /** Get the list of visible nodes */\n    public getVisibleNodes(): Node[] {\n        return this.getNodes().filter(n => n.visible);\n    }\n\n    /** Get the list of visible edges */\n    public getVisibleEdges(): Edge[] {\n        return this.getEdges().filter(e => e.visible);\n    }\n\n    /** Get the list of node ids */\n    public getNodeIds(): string[] {\n        return Array.from(this.nodeIdx.keys());\n    }\n\n    /** Get the list of edge ids */\n    public getEdgeIds(): string[] {\n        return Array.from(this.edgeIdx.keys());\n    }\n    \n    /** Clears this dataset */\n    public clear() {\n        this.nodeIdx.clear();\n        this.edgeIdx.clear();\n    }\n\n    /** Add one or multiple nodes */\n    public addNodes(nodes: Node | Node[]) {\n        Array.isArray(nodes)? nodes.forEach(node => this.addNode(node)) : this.addNode(nodes);\n    }\n\n    /** Add one or multiple edges. */\n    public addEdges(edges: Edge | Edge[]) {\n        Array.isArray(edges)? edges.forEach(edge => this.addEdge(edge)) : this.addEdge(edges);\n    }\n\n    /** Remove one or multiple nodes. /!\\ Connected edges MUST be removed as well (use cleanRemoveNode() to do so) */\n    private removeNodes(ids: string | string[]) {\n        Array.isArray(ids)? ids.forEach(id => this.removeNode(id)) : this.removeNode(ids);\n    }\n\n    /** Remove one or multiple edges. */\n    public removeEdges(ids: string | string[]) {\n        Array.isArray(ids)? ids.forEach(id => this.removeEdge(id)) : this.removeEdge(ids);\n    }\n\n    /** Remove a node and its adjacent edges. keepDanglingNodes = false (default) removes the remaining nodes with no neighbor */\n    public cleanRemoveNode(nodeId: string, keepDanglingNodes?: boolean) {\n        this.getAdjacentEdges(nodeId).forEach(edge => {\n            const neighbor = this.getNode(edge.from === nodeId ? edge.to : edge.from) as Node;\n            this.removeEdges(edge.id);\n            neighbor.count -= edge.count;\n            if(!keepDanglingNodes && this.getAdjacentEdges(neighbor.id).length === 0) {\n                this.removeNodes(neighbor.id);\n            }\n        });\n    }\n\n    /** Get the edges adjacent to a node (O(n) method) */\n    public getAdjacentEdges(nodeId: string): Edge[] {\n        return this.getEdges().filter(e => e.from === nodeId || e.to === nodeId);\n    }\n\n    /** Get the nodes connected to a node via a single node (0(n) method) */\n    public getConnectedNodes(nodeId: string): Node[] {\n        return this.getAdjacentEdges(nodeId)\n                    .map(e => this.getNode(e.from === nodeId ? e.to : e.from) as Node);\n    }\n\n    /**\n     * Merge this dataset with another one. \n     * \n     * When duplicates nodes or edges are found:\n     * - The existing item is kept and updated\n     * - Their 'count' properties are added\n     * - Their 'visible' properties are ORed\n     * - Their nodeOptions and edgeOptions are updated\n     * \n     * @param dataset \n     */\n    public merge(dataset: NetworkDataset): NetworkDataset {\n\n        dataset.getNodes().forEach(node => {\n            node = Object.assign({}, node); // Avoid modifying the original datasets\n            if(!this.hasNode(node.id)) {\n                this.addNode(node);\n            }\n            else {\n                // Merge the new node with the existing one (which takes precedence by default)\n                let existingNode = this.getNode(node.id) as Node;\n                if((node.precedence || 0) > (existingNode.precedence || 0)) {\n                    // Set the new node in the node index\n                    this.nodeIdx.set(node.id, node);\n                    // swap existingNode and node for the merging of count, visible and node options\n                    const temp = node;\n                    node = existingNode;\n                    existingNode = temp;\n                }\n                existingNode.count += node.count;\n                existingNode.visible = existingNode.visible || node.visible;\n                let options: {[key: string]: any};\n                if(typeof existingNode.type.nodeOptions === \"function\") {\n                    options = existingNode.type.nodeOptions(existingNode, existingNode.type);\n                }\n                else {\n                    options = existingNode.type.nodeOptions;\n                }\n                Utils.extend(existingNode, options);\n            }\n        });\n\n        dataset.getEdges().forEach(edge => {\n            edge = Object.assign({}, edge); // Avoid modifying the original datasets\n            if(!this.hasEdge(edge.id)) {\n                this.addEdge(edge);\n            }\n            else {\n                // Merge the new edge with the existing one (which takes precedence)\n                // eg. statistical and semantic edges\n                const existingEdge = this.getEdge(edge.id) as Edge;\n                existingEdge.count += edge.count;\n                existingEdge.visible = existingEdge.visible || edge.visible;\n                // Merge edge labels (taking duplicates into account)\n                if(!!existingEdge[\"label\"] && !!edge[\"label\"]){\n                    edge[\"labels\"].forEach(label => {\n                        if(existingEdge[\"labels\"].indexOf(label) === -1) {\n                            existingEdge[\"label\"] += \", \"+label;\n                            existingEdge[\"labels\"].push(label);\n                        }\n                    });\n                }\n                let options: {[key: string]: any};\n                if(typeof existingEdge.type.edgeOptions === \"function\") {\n                    const nodes = [existingEdge.from, existingEdge.to].map(id => this.nodeIdx[id]);\n                    options = existingEdge.type.edgeOptions(nodes, existingEdge, existingEdge.type);\n                }\n                else {\n                    options = existingEdge.type.edgeOptions;\n                }\n                Utils.extend(existingEdge, options);\n            }\n        });\n\n        return this;\n    }\n\n    /** Transfer nodes and edges to the Vis nodes and edges DataSets */\n    updateDatasets(nodes: DataSet, edges: DataSet) {\n        nodes.remove(nodes.get().filter(n => !this.getNode(n.id)?.visible));\n        edges.remove(edges.get().filter(e => !this.getEdge(e.id)?.visible));\n        nodes.update(this.getVisibleNodes());\n        edges.update(this.getVisibleEdges());\n    }\n\n    \n    private addNode(node: Node) {\n        if(this.hasNode(node.id)) {\n            throw new Error(`Node '${node.id}' already in dataset`);\n        }\n        this.nodeIdx.set(node.id, node);\n    }\n    \n    private addEdge(edge: Edge) {\n        if(this.hasEdge(edge.id)) {\n            throw new Error(`Edge '${edge.id}' already in dataset`);\n        }\n        if(!this.hasNode(edge.from) || !this.hasNode(edge.to)) {\n            throw new Error(`Edge '${edge.id}' cannot be added as one of the nodes is missing from the dataset`)\n        }\n        this.edgeIdx.set(edge.id, edge);\n    }\n\n    private removeNode(id: string) {\n        this.nodeIdx.delete(id);\n    }\n\n    private removeEdge(id: string) {\n        this.edgeIdx.delete(id);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/NgxChart.html":{"url":"components/NgxChart.html","title":"component - NgxChart","body":"\n                   \n\n\n\n\n\n  Components\n  \n  NgxChart\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    ngx-charts/chart/chart.ts\n\n\n\n\n\n    \n        Implements\n    \n    \n                    OnInit\n                    OnDestroy\n                    OnChanges\n                    DoCheck\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                sq-ngx-chart\n            \n\n            \n                styleUrls\n                ./chart.scss\n            \n\n\n\n            \n                templateUrl\n                ./chart.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                attached\n                            \n                            \n                                chart\n                            \n                            \n                                localeChange\n                            \n                            \n                                select\n                            \n                            \n                                tooltipTemplate\n                            \n                            \n                                wrapper\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                chartComponent\n                            \n                            \n                                ngDoCheck\n                            \n                            \n                                ngOnChanges\n                            \n                            \n                                ngOnDestroy\n                            \n                            \n                                ngOnInit\n                            \n                            \n                                updateChart\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                data\n                            \n                            \n                                options\n                            \n                        \n                    \n                \n\n                \n                    \n                        Outputs\n                    \n                \n                \n                    \n                        \n                            \n                                item-click\n                            \n                        \n                    \n                \n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    chartType\n                                \n                                \n                                    colorScheme\n                                \n                            \n                        \n                    \n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(intlService: IntlService, uiService: UIService)\n                    \n                \n                        \n                            \n                                Defined in ngx-charts/chart/chart.ts:35\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        intlService\n                                                  \n                                                        \n                                                                    IntlService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        uiService\n                                                  \n                                                        \n                                                                    UIService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        data\n                    \n                \n                \n                    \n                        Type :         ChartDataPoint[]\n\n                    \n                \n                        \n                            \n                                    Defined in ngx-charts/chart/chart.ts:29\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        options\n                    \n                \n                \n                    \n                        Type :         ChartOptions\n\n                    \n                \n                        \n                            \n                                    Defined in ngx-charts/chart/chart.ts:28\n                            \n                        \n            \n        \n\n    \n    Outputs\n        \n            \n                \n                    \n                        \n                        item-click\n                    \n                \n                \n                    \n                        Type :         EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in ngx-charts/chart/chart.ts:30\n                            \n                        \n            \n        \n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        chartComponent\n                        \n                    \n                \n            \n            \n                \nchartComponent(type: string)\n                \n            \n\n\n            \n                \n                    Defined in ngx-charts/chart/chart.ts:66\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    type\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Type\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngDoCheck\n                        \n                    \n                \n            \n            \n                \nngDoCheck()\n                \n            \n\n\n            \n                \n                    Defined in ngx-charts/chart/chart.ts:83\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnChanges\n                        \n                    \n                \n            \n            \n                \nngOnChanges(changes: SimpleChanges)\n                \n            \n\n\n            \n                \n                    Defined in ngx-charts/chart/chart.ts:79\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    changes\n                                    \n                                                SimpleChanges\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnDestroy\n                        \n                    \n                \n            \n            \n                \nngOnDestroy()\n                \n            \n\n\n            \n                \n                    Defined in ngx-charts/chart/chart.ts:57\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnInit\n                        \n                    \n                \n            \n            \n                \nngOnInit()\n                \n            \n\n\n            \n                \n                    Defined in ngx-charts/chart/chart.ts:49\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        updateChart\n                        \n                    \n                \n            \n            \n                \nupdateChart()\n                \n            \n\n\n            \n                \n                    Defined in ngx-charts/chart/chart.ts:43\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        attached\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in ngx-charts/chart/chart.ts:35\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        chart\n                        \n                    \n                \n            \n                \n                    \n                        Type :     BaseChartComponent\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ViewChild('chart', {static: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in ngx-charts/chart/chart.ts:33\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        localeChange\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Subscription\n\n                    \n                \n                    \n                        \n                                Defined in ngx-charts/chart/chart.ts:34\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        select\n                        \n                    \n                \n            \n                \n                    \n                        Default value : () => {...}\n                    \n                \n                    \n                        \n                                Defined in ngx-charts/chart/chart.ts:92\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        tooltipTemplate\n                        \n                    \n                \n            \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ViewChild('tooltipTemplate', {static: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in ngx-charts/chart/chart.ts:32\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        wrapper\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ElementRef\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ViewChild('wrapper', {static: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in ngx-charts/chart/chart.ts:31\n                        \n                    \n\n\n        \n    \n\n\n    \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        chartType\n                    \n                \n\n                \n                    \n                        getchartType()\n                    \n                \n                            \n                                \n                                    Defined in ngx-charts/chart/chart.ts:62\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        colorScheme\n                    \n                \n\n                \n                    \n                        getcolorScheme()\n                    \n                \n                            \n                                \n                                    Defined in ngx-charts/chart/chart.ts:75\n                                \n                            \n\n            \n        \n\n\n\n\n    \n        import {Component, Input, Output, EventEmitter, OnInit, OnDestroy, OnChanges, DoCheck, SimpleChanges, ViewChild, ElementRef, Type} from \"@angular/core\";\nimport {Subscription} from \"rxjs\";\nimport {Utils} from \"@sinequa/core/base\";\nimport {IntlService} from \"@sinequa/core/intl\";\nimport {BaseChartComponent, BarVerticalComponent, BarHorizontalComponent} from \"@swimlane/ngx-charts\";\nimport {UIService} from \"@sinequa/components/utils\";\n\n\nexport interface ChartOptions {\n    type: string;\n    colorScheme?: string;\n    getItemColor?: (value: string) => string;\n    tickFormatter?: (value: any) => string;\n}\n\nexport interface ChartDataPoint {\n    name: string;\n    value: number;\n}\n\n@Component({\n    selector: \"sq-ngx-chart\",\n    templateUrl: \"./chart.html\",\n    styleUrls: [\"./chart.scss\"]\n})\nexport class NgxChart implements OnInit, OnDestroy, OnChanges, DoCheck {\n    @Input() options: ChartOptions;\n    @Input() data: ChartDataPoint[];\n    @Output(\"item-click\") itemClickEvent: EventEmitter;\n    @ViewChild(\"wrapper\", {static: true}) wrapper: ElementRef;\n    @ViewChild(\"tooltipTemplate\", {static: false}) tooltipTemplate;\n    @ViewChild(\"chart\", {static: false}) chart: BaseChartComponent;\n    localeChange: Subscription;\n    attached: boolean;\n\n    constructor(\n        protected intlService: IntlService,\n        private uiService: UIService) {\n        this.itemClickEvent = new EventEmitter();\n    }\n\n    updateChart() {\n        if (!!this.chart) this.chart.update();\n    }\n\n    private onResize = () => this.updateChart();\n\n    ngOnInit() {\n        this.uiService.addElementResizeListener(this.wrapper.nativeElement, this.onResize);\n        this.localeChange = Utils.subscribe(this.intlService.events,\n            (value) => {\n                this.updateChart();\n            });\n    }\n\n    ngOnDestroy() {\n        this.uiService.removeElementResizeListener(this.wrapper.nativeElement, this.onResize);\n        this.localeChange.unsubscribe();\n    }\n\n    get chartType(): string {\n        return Utils.toLowerCase(this.options.type);\n    }\n\n    chartComponent(type:string) : Type {\n        switch(type){\n            case \"horizontalbar\": return BarHorizontalComponent;\n            case \"verticaltalbar\": return BarVerticalComponent;\n            default: return BarVerticalComponent;\n        }\n    }\n\n    // so we don't end up with no color scheme if the color scheme is not set\n    get colorScheme(): string {\n        return this.options.colorScheme || \"cool\";\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n    }\n\n    // This is a clunky way of avoiding (briefly) seeing ngx-charts rendering with the default 600x400 dimensions\n    ngDoCheck() {\n        if (!this.attached && !!this.wrapper) {\n            if (document.body.contains(this.wrapper.nativeElement)) {\n                this.updateChart();\n                this.attached = true;\n            }\n        }\n    }\n\n    select = (dataPoint: ChartDataPoint): void => {\n        this.itemClickEvent.emit(dataPoint);\n    }\n}\n    \n\n    \n        \n    \n        \n            \n                \n            \n        \n        \n            \n                \n            \n        \n        \n            \n                \n            \n        \n        \n            \n                \n            \n        \n        \n            \n                \n            \n        \n        \n            \n                \n            \n        \n        \n            \n                \n            \n        \n        \n            \n                \n            \n        \n    \n    \n        {{model.name}}\n        {{model.value | sqValue}}\n    \n\n    \n\n    \n                \n                    ./chart.scss\n                \n                .sq-chart-wrapper {\n    visibility: hidden;\n    width: 100%;\n    height: 16rem;\n    overflow: hidden;\n    &.sq-attached {\n        visibility: visible;\n    }\n}\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    {{model.name}}        {{model.value | sqValue}}    '\n    var COMPONENTS = [{'name': 'AgGridViewComponent', 'selector': 'sq-ag-grid-view'},{'name': 'BsEdgeInfoCard', 'selector': 'sq-edge-info-card'},{'name': 'BsFacetDate', 'selector': 'sq-facet-date'},{'name': 'BsFacetHeatmapComponent', 'selector': 'sq-facet-heatmap'},{'name': 'BsFacetTimelineComponent', 'selector': 'sq-facet-timeline'},{'name': 'BsHeatmapComponent', 'selector': 'sq-heatmap'},{'name': 'BsNodeInfoCard', 'selector': 'sq-node-info-card'},{'name': 'BsResultsHeatmapView', 'selector': 'sq-results-heatmap-view'},{'name': 'BsTimelineComponent', 'selector': 'sq-timeline'},{'name': 'BsTooltipComponent', 'selector': 'sq-tooltip'},{'name': 'DataModalComponent', 'selector': 'sq-data-modal'},{'name': 'FacetNgxChart', 'selector': 'sq-facet-ngx-chart'},{'name': 'FacetWrapperComponent', 'selector': 'facet-wrapper'},{'name': 'FusionChart', 'selector': 'sq-fusion-chart'},{'name': 'MapComponent', 'selector': 'sq-googlemaps'},{'name': 'MoneyCloudComponent', 'selector': 'sq-money-cloud'},{'name': 'MoneyTimelineComponent', 'selector': 'sq-money-timeline'},{'name': 'NetworkComponent', 'selector': 'sq-network'},{'name': 'NgxChart', 'selector': 'sq-ngx-chart'},{'name': 'ResultTimeline', 'selector': 'sq-result-timeline'},{'name': 'TimelineLegendComponent', 'selector': 'sq-timeline-legend'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'NgxChart'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/NgxChartsModule.html":{"url":"modules/NgxChartsModule.html","title":"module - NgxChartsModule","body":"\n                   \n\n\n\n\n    Modules\n    NgxChartsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_NgxChartsModule\n\n\n\ncluster_NgxChartsModule_exports\n\n\n\ncluster_NgxChartsModule_declarations\n\n\n\n\nFacetNgxChart\n\nFacetNgxChart\n\n\n\nNgxChartsModule\n\nNgxChartsModule\n\nNgxChartsModule -->\n\nFacetNgxChart->NgxChartsModule\n\n\n\n\n\nNgxChart\n\nNgxChart\n\nNgxChartsModule -->\n\nNgxChart->NgxChartsModule\n\n\n\n\n\nFacetNgxChart \n\nFacetNgxChart \n\nFacetNgxChart  -->\n\nNgxChartsModule->FacetNgxChart \n\n\n\n\n\nNgxChart \n\nNgxChart \n\nNgxChart  -->\n\nNgxChartsModule->NgxChart \n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            ngx-charts/ngx-charts.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Declarations\n                    \n                        \n                            FacetNgxChart\n                        \n                        \n                            NgxChart\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            FacetNgxChart\n                        \n                        \n                            NgxChart\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { NgModule } from \"@angular/core\";\nimport { CommonModule } from \"@angular/common\";\nimport {\n    AreaChartModule,\n    BarChartModule,\n    PieChartModule,\n    TreeMapModule,\n    NumberCardModule,\n    GaugeModule } from \"@swimlane/ngx-charts\";\n\nimport { IntlModule } from '@sinequa/core/intl';\nimport { UtilsModule } from \"@sinequa/components/utils\";\nimport { BsSelectionModule } from \"@sinequa/components/selection\";\n\nimport { NgxChart } from \"./chart/chart\";\nimport { FacetNgxChart } from \"./facet-chart/facet-chart\";\n\n@NgModule({\n\n    imports: [\n        CommonModule,\n        IntlModule,\n        UtilsModule,\n        BsSelectionModule,\n        \n        // ngx-charts modules\n        AreaChartModule,\n        BarChartModule,\n        PieChartModule,\n        TreeMapModule,\n        NumberCardModule,\n        GaugeModule\n    ],\n    declarations: [\n        NgxChart, FacetNgxChart\n    ],\n    exports: [\n        NgxChart, FacetNgxChart\n    ],\n})\nexport class NgxChartsModule {}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Node.html":{"url":"interfaces/Node.html","title":"interface - Node","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  Node\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            network/network-models.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            context\n                                        \n                                \n                                \n                                        \n                                            count\n                                        \n                                \n                                \n                                        \n                                            id\n                                        \n                                \n                                \n                                        \n                                            label\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            precedence\n                                        \n                                \n                                \n                                        \n                                            provider\n                                        \n                                \n                                \n                                        \n                                            type\n                                        \n                                \n                                \n                                        \n                                            visible\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        context\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        context:         NetworkContext\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         NetworkContext\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        count\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        count:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    count is a mutable property used to scale the node size in function of the size of adjacent edges\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        id:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        label\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        label:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        precedence\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        precedence:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    the precedence of a node determines which node object is kept when merging two dataset (the highest precedence node is kept)\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        provider\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        provider:         NetworkProvider\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         NetworkProvider\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        type\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        type:         NodeType\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         NodeType\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        visible\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        visible:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Subject } from 'rxjs';\nimport { Action } from '@sinequa/components/action';\nimport { Utils } from '@sinequa/core/base';\nimport { DataSet } from \"vis-data/peer/esm/vis-data\";\nimport { SearchService } from '@sinequa/components/search';\nimport { VisNetworkService } from 'ngx-vis';\nimport { AppService, ExprBuilder } from '@sinequa/core/app-utils';\nimport { IntlService } from '@sinequa/core/intl';\n\n// TYPES (configuration)\n\nexport interface NodeType {\n    name: string;\n    /** Vis Node options (merged in the Node objects). See https://visjs.github.io/vis-network/docs/network/nodes.html */\n    nodeOptions: {[key: string]: any} | ((node: Node, type: NodeType) => {[key: string]: any} );\n    /** If a field is provided, it can be used to filter the node value (and access the label, formatter, etc.) */\n    field?: string;\n}\n\nexport interface EdgeType {\n    /** Node types attached to this edge type. Should typically be 2 items, but cooccurrence aggregation might return more */\n    nodeTypes: NodeType[];\n    /** Vis Edge options (merged in the Edge objects). See https://visjs.github.io/vis-network/docs/network/edges.html */\n    edgeOptions: {[key: string]: any} | ((nodes: Node[], edge: Edge, type: EdgeType) => {[key: string]: any} );\n    /** If a field is provided, it can be used to filter the node value (and access the label, formatter, etc.) */\n    field?: string;\n}\n\n\n// DATA\n\n// Nodes (based on Vis Node interface)\n\nexport interface Node {\n    id: string;\n    label: string;\n\n    // Custom properties\n    type: NodeType;\n    provider: NetworkProvider;\n    visible: boolean;\n    /** count is a mutable property used to scale the node size in function of the size of adjacent edges*/\n    count: number;\n    /** the precedence of a node determines which node object is kept when merging two dataset (the highest precedence node is kept) */\n    precedence?: number;\n    // Context\n    context: NetworkContext;\n}\n\n// Edge (based on Vis Edge interface)\n\nexport interface Edge {\n    id: string;\n    from: string;\n    to: string;\n\n    // Custom properties\n    type: EdgeType;\n    provider: NetworkProvider;\n    visible: boolean;    \n    /** count is a property representing the strength of an edge, which scales the count of adjacent nodes*/\n    count: number;\n    /** A field value may be provided to filter search based on the edge field type */\n    fieldValue?: string;\n    // Context\n    context: NetworkContext;\n}\n\n\nexport interface NetworkProvider {\n    /** Whether or not the provider is active (if inactive, it will not provide empty datasets of nodes and edges) */\n    active: boolean;\n\n    /** Readable name of this provider */\n    name: string;\n\n    /** Dataset of this provider */\n    dataset: NetworkDataset;\n\n    /** Context (wrapper for general data about the network and services) */\n    context: NetworkContext;\n\n    /** Returns the Subject of this provider */\n    getProvider(): Subject;\n\n    /** Asynchronously provide data via it's provider Subject */\n    getData(context: NetworkContext); // skip/count handled internally\n\n    /** Called after the datasets provided by all providers have been merged into a single dataset */\n    onDatasetsMerged(dataset: NetworkDataset);\n\n    /** Called after the dataset is filtered and passed to Vis for rendering */\n    onNodesInserted(nodes: Node[]);\n\n    /** Called when ANY node is clicked in the rendered view of the network */\n    onNodeClicked(node: Node | undefined);\n\n    /** Called when ANY edge is clicked in the rendered view of the network */\n    onEdgeClicked(edge: Edge | undefined);\n\n    /** Retrieve the list of action for this provider. */\n    getProviderActions(): Action[];\n\n    /** Retrieve the list of action for a given node, and this provider. */\n    getNodeActions(node: Node): Action[];\n    \n    /** Retrieve the list of action for a given edge, and this provider. */\n    getEdgeActions(edge: Edge): Action[];\n\n    /** Called when the providers are discarded. Can be use to cancel subscriptions */\n    onDestroy();\n}\n\nexport interface NetworkContext {\n    /** Name of this network, for use in selections */\n    name: string;\n    /** Vis.js data structures */\n    nodes: DataSet;\n    edges: DataSet;\n    /** Useful services */\n    searchService: SearchService;\n    networkService: VisNetworkService;\n    appService: AppService;\n    intlService: IntlService;\n    exprBuilder: ExprBuilder;\n    /** Interactions */\n    select(node?: Node, edge?: Edge): void;\n}\n\n\nexport class NetworkDataset {\n\n    // Node index\n    private readonly nodeIdx: Map = new Map();\n\n    // Edge index\n    private readonly edgeIdx: Map = new Map();\n\n\n    /** Returns whether this node exists */\n    public hasNode(id: string): boolean {\n        return this.nodeIdx.has(id);\n    }\n    \n    /** Returns whether this edge exists */\n    public hasEdge(id: string): boolean {\n        return this.edgeIdx.has(id);\n    }\n\n    /** Returns the node with given id */\n    public getNode(id: string): Node | undefined {\n        return this.nodeIdx.get(id);\n    }\n\n    /** Returns the edge with given id */\n    public getEdge(id: string): Edge | undefined {\n        return this.edgeIdx.get(id);\n    }\n\n    /** Get the list of nodes */\n    public getNodes(): Node[] {\n        return Array.from(this.nodeIdx.values());\n    }\n\n    /** Get the list of edges */\n    public getEdges(): Edge[] {\n        return Array.from(this.edgeIdx.values());\n    }    \n\n    /** Get the list of visible nodes */\n    public getVisibleNodes(): Node[] {\n        return this.getNodes().filter(n => n.visible);\n    }\n\n    /** Get the list of visible edges */\n    public getVisibleEdges(): Edge[] {\n        return this.getEdges().filter(e => e.visible);\n    }\n\n    /** Get the list of node ids */\n    public getNodeIds(): string[] {\n        return Array.from(this.nodeIdx.keys());\n    }\n\n    /** Get the list of edge ids */\n    public getEdgeIds(): string[] {\n        return Array.from(this.edgeIdx.keys());\n    }\n    \n    /** Clears this dataset */\n    public clear() {\n        this.nodeIdx.clear();\n        this.edgeIdx.clear();\n    }\n\n    /** Add one or multiple nodes */\n    public addNodes(nodes: Node | Node[]) {\n        Array.isArray(nodes)? nodes.forEach(node => this.addNode(node)) : this.addNode(nodes);\n    }\n\n    /** Add one or multiple edges. */\n    public addEdges(edges: Edge | Edge[]) {\n        Array.isArray(edges)? edges.forEach(edge => this.addEdge(edge)) : this.addEdge(edges);\n    }\n\n    /** Remove one or multiple nodes. /!\\ Connected edges MUST be removed as well (use cleanRemoveNode() to do so) */\n    private removeNodes(ids: string | string[]) {\n        Array.isArray(ids)? ids.forEach(id => this.removeNode(id)) : this.removeNode(ids);\n    }\n\n    /** Remove one or multiple edges. */\n    public removeEdges(ids: string | string[]) {\n        Array.isArray(ids)? ids.forEach(id => this.removeEdge(id)) : this.removeEdge(ids);\n    }\n\n    /** Remove a node and its adjacent edges. keepDanglingNodes = false (default) removes the remaining nodes with no neighbor */\n    public cleanRemoveNode(nodeId: string, keepDanglingNodes?: boolean) {\n        this.getAdjacentEdges(nodeId).forEach(edge => {\n            const neighbor = this.getNode(edge.from === nodeId ? edge.to : edge.from) as Node;\n            this.removeEdges(edge.id);\n            neighbor.count -= edge.count;\n            if(!keepDanglingNodes && this.getAdjacentEdges(neighbor.id).length === 0) {\n                this.removeNodes(neighbor.id);\n            }\n        });\n    }\n\n    /** Get the edges adjacent to a node (O(n) method) */\n    public getAdjacentEdges(nodeId: string): Edge[] {\n        return this.getEdges().filter(e => e.from === nodeId || e.to === nodeId);\n    }\n\n    /** Get the nodes connected to a node via a single node (0(n) method) */\n    public getConnectedNodes(nodeId: string): Node[] {\n        return this.getAdjacentEdges(nodeId)\n                    .map(e => this.getNode(e.from === nodeId ? e.to : e.from) as Node);\n    }\n\n    /**\n     * Merge this dataset with another one. \n     * \n     * When duplicates nodes or edges are found:\n     * - The existing item is kept and updated\n     * - Their 'count' properties are added\n     * - Their 'visible' properties are ORed\n     * - Their nodeOptions and edgeOptions are updated\n     * \n     * @param dataset \n     */\n    public merge(dataset: NetworkDataset): NetworkDataset {\n\n        dataset.getNodes().forEach(node => {\n            node = Object.assign({}, node); // Avoid modifying the original datasets\n            if(!this.hasNode(node.id)) {\n                this.addNode(node);\n            }\n            else {\n                // Merge the new node with the existing one (which takes precedence by default)\n                let existingNode = this.getNode(node.id) as Node;\n                if((node.precedence || 0) > (existingNode.precedence || 0)) {\n                    // Set the new node in the node index\n                    this.nodeIdx.set(node.id, node);\n                    // swap existingNode and node for the merging of count, visible and node options\n                    const temp = node;\n                    node = existingNode;\n                    existingNode = temp;\n                }\n                existingNode.count += node.count;\n                existingNode.visible = existingNode.visible || node.visible;\n                let options: {[key: string]: any};\n                if(typeof existingNode.type.nodeOptions === \"function\") {\n                    options = existingNode.type.nodeOptions(existingNode, existingNode.type);\n                }\n                else {\n                    options = existingNode.type.nodeOptions;\n                }\n                Utils.extend(existingNode, options);\n            }\n        });\n\n        dataset.getEdges().forEach(edge => {\n            edge = Object.assign({}, edge); // Avoid modifying the original datasets\n            if(!this.hasEdge(edge.id)) {\n                this.addEdge(edge);\n            }\n            else {\n                // Merge the new edge with the existing one (which takes precedence)\n                // eg. statistical and semantic edges\n                const existingEdge = this.getEdge(edge.id) as Edge;\n                existingEdge.count += edge.count;\n                existingEdge.visible = existingEdge.visible || edge.visible;\n                // Merge edge labels (taking duplicates into account)\n                if(!!existingEdge[\"label\"] && !!edge[\"label\"]){\n                    edge[\"labels\"].forEach(label => {\n                        if(existingEdge[\"labels\"].indexOf(label) === -1) {\n                            existingEdge[\"label\"] += \", \"+label;\n                            existingEdge[\"labels\"].push(label);\n                        }\n                    });\n                }\n                let options: {[key: string]: any};\n                if(typeof existingEdge.type.edgeOptions === \"function\") {\n                    const nodes = [existingEdge.from, existingEdge.to].map(id => this.nodeIdx[id]);\n                    options = existingEdge.type.edgeOptions(nodes, existingEdge, existingEdge.type);\n                }\n                else {\n                    options = existingEdge.type.edgeOptions;\n                }\n                Utils.extend(existingEdge, options);\n            }\n        });\n\n        return this;\n    }\n\n    /** Transfer nodes and edges to the Vis nodes and edges DataSets */\n    updateDatasets(nodes: DataSet, edges: DataSet) {\n        nodes.remove(nodes.get().filter(n => !this.getNode(n.id)?.visible));\n        edges.remove(edges.get().filter(e => !this.getEdge(e.id)?.visible));\n        nodes.update(this.getVisibleNodes());\n        edges.update(this.getVisibleEdges());\n    }\n\n    \n    private addNode(node: Node) {\n        if(this.hasNode(node.id)) {\n            throw new Error(`Node '${node.id}' already in dataset`);\n        }\n        this.nodeIdx.set(node.id, node);\n    }\n    \n    private addEdge(edge: Edge) {\n        if(this.hasEdge(edge.id)) {\n            throw new Error(`Edge '${edge.id}' already in dataset`);\n        }\n        if(!this.hasNode(edge.from) || !this.hasNode(edge.to)) {\n            throw new Error(`Edge '${edge.id}' cannot be added as one of the nodes is missing from the dataset`)\n        }\n        this.edgeIdx.set(edge.id, edge);\n    }\n\n    private removeNode(id: string) {\n        this.nodeIdx.delete(id);\n    }\n\n    private removeEdge(id: string) {\n        this.edgeIdx.delete(id);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/NodeData.html":{"url":"interfaces/NodeData.html","title":"interface - NodeData","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  NodeData\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            network/node-info-card.component.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            count\n                                        \n                                \n                                \n                                        \n                                            node\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        count\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        count:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        node\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        node:         Node\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Node\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Component, Input, OnChanges } from \"@angular/core\";\nimport { Node } from './network-models';\n\n\nexport interface NodeData {\n    node: Node;\n    count?: number; // The count displayed may be different from the node count (for edges)\n}\n\n@Component({\n    selector: \"sq-node-info-card\",\n    templateUrl: \"node-info-card.component.html\",\n    styles: [`\n.card {\n    top: 5px;\n    left: 0;\n    right: 0;\n    width: 80%;\n}\n.circular-image {\n    width: 1.5em;\n    height: 1.5em;\n    border-radius: 50%;\n    object-fit: cover;\n}\n    `]\n})\nexport class BsNodeInfoCard implements OnChanges {\n    @Input() node: Node;\n\n    closed: boolean;\n    expanded: boolean;\n\n    nodeData: NodeData;\n\n    neighbors: {[type: string]: NodeData[]};\n\n    ngOnChanges() {\n        this.closed = false;\n        this.expanded = false;\n        this.nodeData = { node: this.node, count: this.node.count };\n\n        this.neighbors = {};\n        this.node.context.edges\n            .stream()\n            .filter(e => e.from === this.node.id || e.to === this.node.id) // Filter edges\n            .map(e => {\n                const id = e.from === this.node.id ? e.to : e.from\n                const node = this.node.context.nodes.get(id);\n                return {node, count: e.count};\n            }) // get node and edge count\n            .forEach(item => {\n                if(item.node) {\n                    const type = item.node.type.field ?\n                        item.node.context.appService.getPluralLabel(item.node.type.field) : // Try to get the \"pretty label\"\n                        item.node.type.name; // Or just use the node type's name\n                    if(!this.neighbors[type]) {\n                        this.neighbors[type] = []; // Initialize the neighbor array\n                    }\n                    // Create the node data\n                    this.neighbors[type].push({ node: item.node, count: item.count } as NodeData);\n                }\n                return true;\n            });\n        // Sort the neighbors by decreasing count number\n        Object.values(this.neighbors)\n            .forEach(list => list.sort((a,b) => (b.count || 0) - (a.count || 0)));\n    }\n\n    focusNode(node: Node) {\n        // Hack to gain access to the network instance (networkService does not have the focus() method)\n        const networkInstance = node.context.networkService['networks'][node.context.name];\n        networkInstance.focus(node.id, {animation: true}); // Move the view to this node with animation\n        networkInstance.selectNodes([node.id], true); // Warning: does not trigger events...\n        node.context.select(node, undefined); // Select the node to update info cards, actions\n        return false;\n    }\n}\n    \n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/NodeType.html":{"url":"interfaces/NodeType.html","title":"interface - NodeType","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  NodeType\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            network/network-models.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            field\n                                        \n                                \n                                \n                                        \n                                            name\n                                        \n                                \n                                \n                                        \n                                            nodeOptions\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        field\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        field:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    If a field is provided, it can be used to filter the node value (and access the label, formatter, etc.)\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        name\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        name:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        nodeOptions\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        nodeOptions:     literal type | \n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type | \n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Vis Node options (merged in the Node objects). See https://visjs.github.io/vis-network/docs/network/nodes.html\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { Subject } from 'rxjs';\nimport { Action } from '@sinequa/components/action';\nimport { Utils } from '@sinequa/core/base';\nimport { DataSet } from \"vis-data/peer/esm/vis-data\";\nimport { SearchService } from '@sinequa/components/search';\nimport { VisNetworkService } from 'ngx-vis';\nimport { AppService, ExprBuilder } from '@sinequa/core/app-utils';\nimport { IntlService } from '@sinequa/core/intl';\n\n// TYPES (configuration)\n\nexport interface NodeType {\n    name: string;\n    /** Vis Node options (merged in the Node objects). See https://visjs.github.io/vis-network/docs/network/nodes.html */\n    nodeOptions: {[key: string]: any} | ((node: Node, type: NodeType) => {[key: string]: any} );\n    /** If a field is provided, it can be used to filter the node value (and access the label, formatter, etc.) */\n    field?: string;\n}\n\nexport interface EdgeType {\n    /** Node types attached to this edge type. Should typically be 2 items, but cooccurrence aggregation might return more */\n    nodeTypes: NodeType[];\n    /** Vis Edge options (merged in the Edge objects). See https://visjs.github.io/vis-network/docs/network/edges.html */\n    edgeOptions: {[key: string]: any} | ((nodes: Node[], edge: Edge, type: EdgeType) => {[key: string]: any} );\n    /** If a field is provided, it can be used to filter the node value (and access the label, formatter, etc.) */\n    field?: string;\n}\n\n\n// DATA\n\n// Nodes (based on Vis Node interface)\n\nexport interface Node {\n    id: string;\n    label: string;\n\n    // Custom properties\n    type: NodeType;\n    provider: NetworkProvider;\n    visible: boolean;\n    /** count is a mutable property used to scale the node size in function of the size of adjacent edges*/\n    count: number;\n    /** the precedence of a node determines which node object is kept when merging two dataset (the highest precedence node is kept) */\n    precedence?: number;\n    // Context\n    context: NetworkContext;\n}\n\n// Edge (based on Vis Edge interface)\n\nexport interface Edge {\n    id: string;\n    from: string;\n    to: string;\n\n    // Custom properties\n    type: EdgeType;\n    provider: NetworkProvider;\n    visible: boolean;    \n    /** count is a property representing the strength of an edge, which scales the count of adjacent nodes*/\n    count: number;\n    /** A field value may be provided to filter search based on the edge field type */\n    fieldValue?: string;\n    // Context\n    context: NetworkContext;\n}\n\n\nexport interface NetworkProvider {\n    /** Whether or not the provider is active (if inactive, it will not provide empty datasets of nodes and edges) */\n    active: boolean;\n\n    /** Readable name of this provider */\n    name: string;\n\n    /** Dataset of this provider */\n    dataset: NetworkDataset;\n\n    /** Context (wrapper for general data about the network and services) */\n    context: NetworkContext;\n\n    /** Returns the Subject of this provider */\n    getProvider(): Subject;\n\n    /** Asynchronously provide data via it's provider Subject */\n    getData(context: NetworkContext); // skip/count handled internally\n\n    /** Called after the datasets provided by all providers have been merged into a single dataset */\n    onDatasetsMerged(dataset: NetworkDataset);\n\n    /** Called after the dataset is filtered and passed to Vis for rendering */\n    onNodesInserted(nodes: Node[]);\n\n    /** Called when ANY node is clicked in the rendered view of the network */\n    onNodeClicked(node: Node | undefined);\n\n    /** Called when ANY edge is clicked in the rendered view of the network */\n    onEdgeClicked(edge: Edge | undefined);\n\n    /** Retrieve the list of action for this provider. */\n    getProviderActions(): Action[];\n\n    /** Retrieve the list of action for a given node, and this provider. */\n    getNodeActions(node: Node): Action[];\n    \n    /** Retrieve the list of action for a given edge, and this provider. */\n    getEdgeActions(edge: Edge): Action[];\n\n    /** Called when the providers are discarded. Can be use to cancel subscriptions */\n    onDestroy();\n}\n\nexport interface NetworkContext {\n    /** Name of this network, for use in selections */\n    name: string;\n    /** Vis.js data structures */\n    nodes: DataSet;\n    edges: DataSet;\n    /** Useful services */\n    searchService: SearchService;\n    networkService: VisNetworkService;\n    appService: AppService;\n    intlService: IntlService;\n    exprBuilder: ExprBuilder;\n    /** Interactions */\n    select(node?: Node, edge?: Edge): void;\n}\n\n\nexport class NetworkDataset {\n\n    // Node index\n    private readonly nodeIdx: Map = new Map();\n\n    // Edge index\n    private readonly edgeIdx: Map = new Map();\n\n\n    /** Returns whether this node exists */\n    public hasNode(id: string): boolean {\n        return this.nodeIdx.has(id);\n    }\n    \n    /** Returns whether this edge exists */\n    public hasEdge(id: string): boolean {\n        return this.edgeIdx.has(id);\n    }\n\n    /** Returns the node with given id */\n    public getNode(id: string): Node | undefined {\n        return this.nodeIdx.get(id);\n    }\n\n    /** Returns the edge with given id */\n    public getEdge(id: string): Edge | undefined {\n        return this.edgeIdx.get(id);\n    }\n\n    /** Get the list of nodes */\n    public getNodes(): Node[] {\n        return Array.from(this.nodeIdx.values());\n    }\n\n    /** Get the list of edges */\n    public getEdges(): Edge[] {\n        return Array.from(this.edgeIdx.values());\n    }    \n\n    /** Get the list of visible nodes */\n    public getVisibleNodes(): Node[] {\n        return this.getNodes().filter(n => n.visible);\n    }\n\n    /** Get the list of visible edges */\n    public getVisibleEdges(): Edge[] {\n        return this.getEdges().filter(e => e.visible);\n    }\n\n    /** Get the list of node ids */\n    public getNodeIds(): string[] {\n        return Array.from(this.nodeIdx.keys());\n    }\n\n    /** Get the list of edge ids */\n    public getEdgeIds(): string[] {\n        return Array.from(this.edgeIdx.keys());\n    }\n    \n    /** Clears this dataset */\n    public clear() {\n        this.nodeIdx.clear();\n        this.edgeIdx.clear();\n    }\n\n    /** Add one or multiple nodes */\n    public addNodes(nodes: Node | Node[]) {\n        Array.isArray(nodes)? nodes.forEach(node => this.addNode(node)) : this.addNode(nodes);\n    }\n\n    /** Add one or multiple edges. */\n    public addEdges(edges: Edge | Edge[]) {\n        Array.isArray(edges)? edges.forEach(edge => this.addEdge(edge)) : this.addEdge(edges);\n    }\n\n    /** Remove one or multiple nodes. /!\\ Connected edges MUST be removed as well (use cleanRemoveNode() to do so) */\n    private removeNodes(ids: string | string[]) {\n        Array.isArray(ids)? ids.forEach(id => this.removeNode(id)) : this.removeNode(ids);\n    }\n\n    /** Remove one or multiple edges. */\n    public removeEdges(ids: string | string[]) {\n        Array.isArray(ids)? ids.forEach(id => this.removeEdge(id)) : this.removeEdge(ids);\n    }\n\n    /** Remove a node and its adjacent edges. keepDanglingNodes = false (default) removes the remaining nodes with no neighbor */\n    public cleanRemoveNode(nodeId: string, keepDanglingNodes?: boolean) {\n        this.getAdjacentEdges(nodeId).forEach(edge => {\n            const neighbor = this.getNode(edge.from === nodeId ? edge.to : edge.from) as Node;\n            this.removeEdges(edge.id);\n            neighbor.count -= edge.count;\n            if(!keepDanglingNodes && this.getAdjacentEdges(neighbor.id).length === 0) {\n                this.removeNodes(neighbor.id);\n            }\n        });\n    }\n\n    /** Get the edges adjacent to a node (O(n) method) */\n    public getAdjacentEdges(nodeId: string): Edge[] {\n        return this.getEdges().filter(e => e.from === nodeId || e.to === nodeId);\n    }\n\n    /** Get the nodes connected to a node via a single node (0(n) method) */\n    public getConnectedNodes(nodeId: string): Node[] {\n        return this.getAdjacentEdges(nodeId)\n                    .map(e => this.getNode(e.from === nodeId ? e.to : e.from) as Node);\n    }\n\n    /**\n     * Merge this dataset with another one. \n     * \n     * When duplicates nodes or edges are found:\n     * - The existing item is kept and updated\n     * - Their 'count' properties are added\n     * - Their 'visible' properties are ORed\n     * - Their nodeOptions and edgeOptions are updated\n     * \n     * @param dataset \n     */\n    public merge(dataset: NetworkDataset): NetworkDataset {\n\n        dataset.getNodes().forEach(node => {\n            node = Object.assign({}, node); // Avoid modifying the original datasets\n            if(!this.hasNode(node.id)) {\n                this.addNode(node);\n            }\n            else {\n                // Merge the new node with the existing one (which takes precedence by default)\n                let existingNode = this.getNode(node.id) as Node;\n                if((node.precedence || 0) > (existingNode.precedence || 0)) {\n                    // Set the new node in the node index\n                    this.nodeIdx.set(node.id, node);\n                    // swap existingNode and node for the merging of count, visible and node options\n                    const temp = node;\n                    node = existingNode;\n                    existingNode = temp;\n                }\n                existingNode.count += node.count;\n                existingNode.visible = existingNode.visible || node.visible;\n                let options: {[key: string]: any};\n                if(typeof existingNode.type.nodeOptions === \"function\") {\n                    options = existingNode.type.nodeOptions(existingNode, existingNode.type);\n                }\n                else {\n                    options = existingNode.type.nodeOptions;\n                }\n                Utils.extend(existingNode, options);\n            }\n        });\n\n        dataset.getEdges().forEach(edge => {\n            edge = Object.assign({}, edge); // Avoid modifying the original datasets\n            if(!this.hasEdge(edge.id)) {\n                this.addEdge(edge);\n            }\n            else {\n                // Merge the new edge with the existing one (which takes precedence)\n                // eg. statistical and semantic edges\n                const existingEdge = this.getEdge(edge.id) as Edge;\n                existingEdge.count += edge.count;\n                existingEdge.visible = existingEdge.visible || edge.visible;\n                // Merge edge labels (taking duplicates into account)\n                if(!!existingEdge[\"label\"] && !!edge[\"label\"]){\n                    edge[\"labels\"].forEach(label => {\n                        if(existingEdge[\"labels\"].indexOf(label) === -1) {\n                            existingEdge[\"label\"] += \", \"+label;\n                            existingEdge[\"labels\"].push(label);\n                        }\n                    });\n                }\n                let options: {[key: string]: any};\n                if(typeof existingEdge.type.edgeOptions === \"function\") {\n                    const nodes = [existingEdge.from, existingEdge.to].map(id => this.nodeIdx[id]);\n                    options = existingEdge.type.edgeOptions(nodes, existingEdge, existingEdge.type);\n                }\n                else {\n                    options = existingEdge.type.edgeOptions;\n                }\n                Utils.extend(existingEdge, options);\n            }\n        });\n\n        return this;\n    }\n\n    /** Transfer nodes and edges to the Vis nodes and edges DataSets */\n    updateDatasets(nodes: DataSet, edges: DataSet) {\n        nodes.remove(nodes.get().filter(n => !this.getNode(n.id)?.visible));\n        edges.remove(edges.get().filter(e => !this.getEdge(e.id)?.visible));\n        nodes.update(this.getVisibleNodes());\n        edges.update(this.getVisibleEdges());\n    }\n\n    \n    private addNode(node: Node) {\n        if(this.hasNode(node.id)) {\n            throw new Error(`Node '${node.id}' already in dataset`);\n        }\n        this.nodeIdx.set(node.id, node);\n    }\n    \n    private addEdge(edge: Edge) {\n        if(this.hasEdge(edge.id)) {\n            throw new Error(`Edge '${edge.id}' already in dataset`);\n        }\n        if(!this.hasNode(edge.from) || !this.hasNode(edge.to)) {\n            throw new Error(`Edge '${edge.id}' cannot be added as one of the nodes is missing from the dataset`)\n        }\n        this.edgeIdx.set(edge.id, edge);\n    }\n\n    private removeNode(id: string) {\n        this.nodeIdx.delete(id);\n    }\n\n    private removeEdge(id: string) {\n        this.edgeIdx.delete(id);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/RecordNode.html":{"url":"interfaces/RecordNode.html","title":"interface - RecordNode","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  RecordNode\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            network/providers/records-provider.ts\n        \n\n\n            \n                Description\n            \n            \n                Extension of the Node interface, to include the Record object\nfrom which the node is generated\n\n            \n\n            \n                Extends\n            \n            \n                        Node\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            record\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        record\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        record:     Record\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Record\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Utils } from '@sinequa/core/base';\nimport { Record } from '@sinequa/core/web-services';\nimport { Action } from '@sinequa/components/action';\nimport { Node, NetworkDataset, NodeType, EdgeType, NetworkContext } from '../network-models';\nimport { BaseProvider } from './base-provider';\n\n/**\n * Extension of the Node interface, to include the Record object\n * from which the node is generated\n */\nexport interface RecordNode extends Node {\n    record: Record;\n}\n\n\n/**\n * An extension of the EdgeType interface to include properties specific to\n * structural edges (edge between a record and its metadata).\n * \n * About trigger/display: At the moment, the Record provider always adds ALL nodes and edges\n * to the dataset, but potentially with a visibility set to false. Some of the settings are\n * not compatible with each other, and some take precedence over the others:\n * - display=existingnodes takes precedence over other settings, as it is implemented as\n * a post-processing of the dataset (in onDatasetsMerged)\n * - trigger=onclick or manual take precedence over the other settings, as they set the\n * visibility to false by false, until the user performs an action\n * - trigger=oninsert is compatible with the other display settings\n */\nexport interface StructuralEdgeType extends EdgeType {\n    /** Name of the field in the record */\n    field: string;\n    /** count limits the number of values displayed and allows for pagination. Use 0 for unlimited values */\n    count?: number;\n    /** Defines when the edge should be displayed */\n    trigger: StructuralTriggerType;\n    /** showall: display all values from the field / paginate: display all value with pagination / existingnodes: only link to existing nodes / manual: only show if manual action (activated programmatically) */\n    display: StructuralDisplayType;\n    /** A function to parse metadata from a record node in a custom way */\n    parse?: (value: any, record: Record, type: StructuralEdgeType) => CustomData;\n}\n\nexport type StructuralTriggerType = \"oninsert\" | \"onclick\" | \"manual\";\nexport type StructuralDisplayType = \"all\" | \"paginate\" | \"existingnodes\" | ((node: Node, recordNode: RecordNode, index: number) => boolean);\n\n/**\n * Data structure returned by the optional parse() function of a structural edge\n * type. Contains the parsed values of a property that can be turned into one or\n * multiple nodes and edges.\n */\nexport interface CustomData {\n    values: string[]; // eg. LARRY PAGE, GOOGLE\n    displays: string[]; // eg. Larry Page, Google\n    relations?: string[]; // eg. Works At\n    directed?: boolean[]; // eg. true\n    fieldValue?: string; // A value on which to filter the data\n}\n\n/**\n * Tests whether the given edge type is a structural edge type\n * @param et an edge type\n */\nexport function isStructuralEdgeType(et: EdgeType): et is StructuralEdgeType {\n    return !!(et as StructuralEdgeType).field;\n}\n\n\n/**\n * A network provider generating nodes from records.\n * Additionally, the provider can generate the \"structural edges\" of that\n * node. Structural edges are edges between a record and the fields of\n * that record (eg. the wikipedia page of Microsoft is a record that probably\n * contains the fields \"Microsoft\" and \"Bill Gates\").\n */\nexport class RecordsProvider extends BaseProvider {\n\n    constructor(\n        public override name = \"Documents\",\n        protected nodeType: NodeType,\n        protected edgeTypes: StructuralEdgeType[],\n        protected records: Record[],\n        protected hideRecordNode = false\n    ){\n        super(name);\n    }\n\n    /**\n     * Clears the dataset and generates new record nodes\n     * @param records the list of records of this provider\n     */\n    protected updateDataset(records?: Record[]) {\n        this.dataset.clear();\n        if(!this.active || !records || records.length === 0) {\n            return; \n        }\n        this.addRecordNodes(records);\n    }\n    \n    // Record nodes\n\n    /**\n     * Generates the nodes for a list of records, including their structural\n     * edges, and adds them to the dataset.\n     * Returns the list of record nodes.\n     * @param records \n     */\n    protected addRecordNodes(records: Record[]): RecordNode[] {\n        return records.map(record => {\n            let node = this.dataset.getNode(this.getNodeId(this.nodeType, record.id));\n            if(!node) {\n                node = this.createNode(this.nodeType, record.id, record.title, !this.hideRecordNode, {record});\n                this.dataset.addNodes(node);\n                this.edgeTypes.forEach(type => {\n                    this.addStructuralEdges(node as RecordNode, type);\n                });\n            }\n            return node as RecordNode;\n        });\n    }\n\n    \n    // Structural edges\n\n    /**\n     * Generates the metadata nodes and structural edges from the given node,\n     * and merge them into the dataset.\n     * This function will automatically parse the metadata contained in the record,\n     * but it is possible to manage custom types of metadata by providing a\n     * custom parse() function via the structural edge type.\n     * @param node The record node\n     * @param type The edge type for which we want to create edges\n     */\n    protected addStructuralEdges(node: RecordNode, type: StructuralEdgeType) {\n\n        if(type.nodeTypes[0] !== this.nodeType){\n            throw new Error(`Inconsistent node type: '${type.nodeTypes[0].name}' instead of '${this.nodeType.name}'`);\n        }\n        \n        const recorddata = node.record[type.field];\n\n        if(recorddata === undefined){\n            return;\n        }\n\n        // Custom parse for mono or multi valued data\n        if(type.parse) {\n            if(Utils.isArray(recorddata)) {\n                recorddata.forEach((value,i) => { \n                    this.addCustomEdge(node, type, type.parse!(value, node.record, type));\n                });\n            }\n            else {\n                this.addCustomEdge(node, type, type.parse!(recorddata, node.record, type));\n            }\n        }\n        // Default handling for standard Sinequa Metadata\n        else {\n            const data = new NetworkDataset();\n            data.addNodes(node);\n    \n            // sourcestr\n            if(Utils.isString(recorddata)) {\n                this.addStructuralEdge(data, node, type, recorddata, recorddata, 0);\n            }\n            else if(Utils.isArray(recorddata)) {\n                recorddata.forEach((value,i) => {\n                    // sourcecsv\n                    if(Utils.isString(value)) {\n                        this.addStructuralEdge(data, node, type, value, value, i);\n                    }\n                    // entity\n                    else if(value[\"value\"]) {\n                        this.addStructuralEdge(data, node, type, value[\"value\"], value[\"display\"] || value[\"value\"], i);\n                    }\n                });\n            }\n    \n            this.dataset.merge(data);\n        }\n    }\n\n    /**\n     * Add a structural edge to a record node and adds that edge\n     * (and corresponding metadata node) to the given dataset.\n     * @param dataset The target dataset\n     * @param recordNode The record node\n     * @param type The edge type of the structural edge\n     * @param value The \"value\" property of the metadata node\n     * @param display The \"display\" property of the metadata node\n     * @param index The index of the metadata within the record, which may influence its visibility when using display=paginate\n     */\n    protected addStructuralEdge(dataset: NetworkDataset, recordNode: RecordNode, type: StructuralEdgeType, value: string, display: string, index: number) {\n        // Create the metadata node\n        const node = this.createNode(type.nodeTypes[1], value, display, true);\n        // Sets its visibility\n        node.visible = type.trigger === \"oninsert\" && this.isEdgeVisible(type, node, recordNode, index);\n        if(recordNode.id !== node.id){ // Special case of hybrid nodes, where the recordNode might contain itself...!\n            if(!dataset.hasNode(node.id)) { // Duplicate nodes/edges are possible when the same node type is present in multiple fields of a record (eg. \"email\" in msgfrom and msgto)\n                dataset.addNodes(node);\n            }\n            const edge = this.createEdge(type, recordNode, node, value, node.visible, {record: recordNode.record});\n            if(!dataset.hasEdge(edge.id)) {\n                dataset.addEdges(edge);\n            }\n        }\n    }\n\n    /**\n     * Add a custom structural edge to a record node and merges that edge\n     * (and corresponding metadata node) into the global dataset.\n     * @param recordNode The record node\n     * @param type The edge type of the structural edge\n     * @param data A CustomData object containing the properties of the metadata nodes we want to created\n     */\n    protected addCustomEdge(recordNode: RecordNode, type: StructuralEdgeType, data: CustomData) {\n        if(type.nodeTypes.length !== data.values.length + 1) {\n            throw new Error(`Wrong number of values for this custom edge ${type.nodeTypes.length}, ${data.values.length}`);\n        }\n        // Create a dataset only for this data, to avoid duplicate conflicts\n        const dataset = new NetworkDataset();\n        dataset.addNodes(recordNode);\n        // For each value contained in \"data\", create a node, and edges in between them (in addition to the edges between the record and each metadata node)\n        let lastNode: Node;\n        for(let i=0; i 0){\n                const relation = data.relations? data.relations[i-1] : undefined;\n                const directed = data.directed? data.directed[i-1] : false;\n                dataset.addEdges(this.createEdge(type, lastNode!, node, data.fieldValue, true, {}, 1, directed, relation));\n            }\n            lastNode = node;\n        }\n        this.dataset.merge(dataset);\n    }\n\n    /**\n     * Returns the visibility of a structural edge, depending on the type.display property\n     * @param type The structural edge type\n     * @param node The metadata node of this edge\n     * @param recordNode The record node of this edge\n     * @param index The index of the metadata in the list of metadata of the record\n     */\n    protected isEdgeVisible(type: StructuralEdgeType, node: Node, recordNode: RecordNode, index: number): boolean {\n        if(type.display === \"all\") {\n            return true;\n        }\n        else if(type.display === \"existingnodes\") {\n            return false;\n        }\n        else if(type.display === \"paginate\") {\n            return index  node.type === this.nodeType)\n            .forEach(node => {\n                dataset.getAdjacentEdges(node.id)\n                    .filter(edge => (edge.type as StructuralEdgeType).display === 'existingnodes')\n                    .forEach(edge => {\n                        const neighbor = dataset.getNode(node.id === edge.to ? edge.from : edge.to);\n                        if(!neighbor) {\n                            throw new Error(`Missing node from edge ${edge.id}`);\n                        }\n                        const neighborsneighbors = dataset.getAdjacentEdges(neighbor.id);\n                        if(neighborsneighbors.length > 1) {\n                            neighbor.visible = true;\n                            edge.visible = true;\n                        }\n                    });\n            });\n    }\n\n    /**\n     * Adjust visibility of nodes and edges, for structural edges with\n     * type.trigger = onclick. These nodes will only be shown once their\n     * record node is clicked on.\n     * @param node A node that was clicked\n     */\n    override onNodeClicked(node?: Node) {\n        if(this.active && node && node.type === this.nodeType) { // Note: we cannot test the provider property, since this node might have been merged with one from a different provider. However the node type should be a unique instance\n            let update = false;\n            this.dataset.getAdjacentEdges(node.id)\n                .filter(edge => edge.type['trigger'] === 'onclick')\n                .forEach(edge => {\n                    const neighbor = this.dataset.getNode(node.id === edge.to ? edge.from : edge.to);\n                    if(!neighbor) {\n                        throw new Error(`Missing node from edge ${edge.id}`);\n                    }\n                    if(!neighbor.visible || !edge.visible) {\n                        edge.visible = true;\n                        neighbor.visible = true;\n                        update = true;\n                    }\n                    // TODO \"propagate\" visibility (ie. if 2 nodes are visible but an edge in between is invisible, make it visible)\n                });\n            if(update) {\n                this.provider.next(this.dataset);\n            }\n        }\n    }\n\n    override getProviderActions(): Action[] {\n        return super.getProviderActions();\n    }\n\n    /**\n     * Creates actions for expanding and/or collapsing a record node that was clicked.\n     * expanding and collapsing will act on the visibility of the structural edges\n     * attached to this node.\n     * Both actions might be displayed at the same time, if the node is in an intermediate\n     * state.\n     * @param node \n     */\n    override getNodeActions(node: Node): Action[] {\n        const actions = super.getNodeActions(node);\n        \n        // Actions for exanding / collapsing a record node\n        if(this.active && node.type === this.nodeType && this.edgeTypes.length > 0) {\n            let hasExpandedEdge = false;\n            let hasCollapsedEdge = false;\n            this.dataset.getAdjacentEdges(node.id).forEach(e => {\n                hasCollapsedEdge = hasCollapsedEdge || !e.visible;\n                hasExpandedEdge = hasExpandedEdge || e.visible;\n            });\n\n            if(hasCollapsedEdge) {\n                actions.push(new Action({\n                    icon: \"fas fa-expand-arrows-alt\",\n                    title: \"msg#network.actions.expandMeta\",\n                    action: () => {\n                        let update = false;\n                        this.dataset.getAdjacentEdges(node.id)\n                            .forEach(edge => {\n                                const neighbor = this.dataset.getNode(node.id === edge.to ? edge.from : edge.to);\n                                if(!neighbor) {\n                                    throw new Error(`Missing node from edge ${edge.id}`);\n                                }\n                                if(!neighbor.visible || !edge.visible) {\n                                    edge.visible = true;\n                                    neighbor.visible = true;\n                                    update = true;\n                                }\n                                // TODO \"propagate\" visibility (ie. if 2 nodes are visible but an edge in between is invisible, make it visible)\n                            });\n                        if(update) {\n                            this.provider.next(this.dataset);\n                        }\n                    }\n                }));\n            }\n            \n            if(hasExpandedEdge) {\n                actions.push(new Action({\n                    icon: \"fas fa-compress-arrows-alt\",\n                    title: \"msg#network.actions.collapseMeta\",\n                    action: () => {\n                        let update = false;\n                        this.dataset.getAdjacentEdges(node.id)\n                            .forEach(edge => {\n                                const neighbor = this.dataset.getNode(node.id === edge.to ? edge.from : edge.to);\n                                if(!neighbor) {\n                                    throw new Error(`Missing node from edge ${edge.id}`);\n                                }\n                                if((neighbor.visible || edge.visible) && !(neighbor as RecordNode).record) { // Prevent collapsing links between 2 record nodes (alternatively, we could count the number of neighbors of the neighbors, and close only the isoltated ones)\n                                    edge.visible = false;\n                                    neighbor.visible = false;\n                                    update = true;\n                                }\n                            });\n                        if(update) {\n                            this.provider.next(this.dataset);\n                        }\n                    }\n                }));\n            }\n        }\n        return actions;\n    }\n\n}\n    \n    \n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RecordsProvider.html":{"url":"classes/RecordsProvider.html","title":"class - RecordsProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RecordsProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            network/providers/records-provider.ts\n        \n\n\n            \n                Description\n            \n            \n                A network provider generating nodes from records.\nAdditionally, the provider can generate the \"structural edges\" of that\nnode. Structural edges are edges between a record and the fields of\nthat record (eg. the wikipedia page of Microsoft is a record that probably\ncontains the fields \"Microsoft\" and \"Bill Gates\").\n\n            \n\n            \n                Extends\n            \n            \n                        BaseProvider\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    \n                                name\n                            \n                            \n                                    Public\n                                    Readonly\n                                activateAction\n                            \n                            \n                                    Public\n                                active\n                            \n                            \n                                    Public\n                                context\n                            \n                            \n                                    Public\n                                dataset\n                            \n                            \n                                    Public\n                                    Readonly\n                                EDGESEPARATOR\n                            \n                            \n                                    Public\n                                    Readonly\n                                resetAction\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                getData\n                            \n                            \n                                    \n                                getNodeActions\n                            \n                            \n                                    \n                                getProviderActions\n                            \n                            \n                                    \n                                onDatasetsMerged\n                            \n                            \n                                    \n                                onNodeClicked\n                            \n                            \n                                getEdgeActions\n                            \n                            \n                                getProvider\n                            \n                            \n                                onDestroy\n                            \n                            \n                                onEdgeClicked\n                            \n                            \n                                onNodesInserted\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(name: string, nodeType: NodeType, edgeTypes: StructuralEdgeType[], records: Record[], hideRecordNode)\n                    \n                \n                        \n                            \n                                Defined in network/providers/records-provider.ts:74\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        name\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        nodeType\n                                                  \n                                                        \n                                                                        NodeType\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        edgeTypes\n                                                  \n                                                        \n                                                                    StructuralEdgeType[]\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        records\n                                                  \n                                                        \n                                                                    Record[]\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        hideRecordNode\n                                                  \n                                                        \n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : \"Documents\"\n                    \n                \n                        \n                            \n                                Inherited from         BaseProvider\n\n                            \n                        \n                    \n                        \n                                Defined in         BaseProvider:77\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        activateAction\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Action\n\n                    \n                \n                        \n                            \n                                Inherited from         BaseProvider\n\n                            \n                        \n                    \n                        \n                                Defined in         BaseProvider:21\n\n                        \n                    \n\n            \n                \n                    Action to turn the provider on or off\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        active\n                        \n                    \n                \n            \n                \n                    \n                        Default value : true\n                    \n                \n                        \n                            \n                                Inherited from         BaseProvider\n\n                            \n                        \n                    \n                        \n                                Defined in         BaseProvider:16\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        context\n                        \n                    \n                \n            \n                \n                    \n                        Type :         NetworkContext\n\n                    \n                \n                        \n                            \n                                Inherited from         BaseProvider\n\n                            \n                        \n                    \n                        \n                                Defined in         BaseProvider:25\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        dataset\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new NetworkDataset()\n                    \n                \n                        \n                            \n                                Inherited from         BaseProvider\n\n                            \n                        \n                    \n                        \n                                Defined in         BaseProvider:15\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        EDGESEPARATOR\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : \"~~~EDGE~~~\"\n                    \n                \n                        \n                            \n                                Inherited from         BaseProvider\n\n                            \n                        \n                    \n                        \n                                Defined in         BaseProvider:18\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        resetAction\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Action\n\n                    \n                \n                        \n                            \n                                Inherited from         BaseProvider\n\n                            \n                        \n                    \n                        \n                                Defined in         BaseProvider:23\n\n                        \n                    \n\n            \n                \n                    Action to reset the provider\n\n                \n            \n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        getData\n                        \n                    \n                \n            \n            \n                \n                    \n                    getData(context: NetworkContext)\n                \n            \n\n\n            \n                \n                    Inherited from         BaseProvider\n\n                \n            \n            \n                \n                        Defined in         BaseProvider:265\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                                NetworkContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        getNodeActions\n                        \n                    \n                \n            \n            \n                \n                    \n                    getNodeActions(node: Node)\n                \n            \n\n\n            \n                \n                    Inherited from         BaseProvider\n\n                \n            \n            \n                \n                        Defined in         BaseProvider:340\n\n                \n            \n\n\n            \n                \n                    Creates actions for expanding and/or collapsing a record node that was clicked.\nexpanding and collapsing will act on the visibility of the structural edges\nattached to this node.\nBoth actions might be displayed at the same time, if the node is in an intermediate\nstate.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    node\n                                    \n                                                Node\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Action[]\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        getProviderActions\n                        \n                    \n                \n            \n            \n                \n                    \n                    getProviderActions()\n                \n            \n\n\n            \n                \n                    Inherited from         BaseProvider\n\n                \n            \n            \n                \n                        Defined in         BaseProvider:328\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     Action[]\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        onDatasetsMerged\n                        \n                    \n                \n            \n            \n                \n                    \n                    onDatasetsMerged(dataset: NetworkDataset)\n                \n            \n\n\n            \n                \n                    Inherited from         BaseProvider\n\n                \n            \n            \n                \n                        Defined in         BaseProvider:278\n\n                \n            \n\n\n            \n                \n                    This function adjusts the visibility of nodes for the visibility\ntype \"existingnode\", so that nodes with only one neighbor (post-merge)\nare collapsed.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    dataset\n                                    \n                                                NetworkDataset\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The dataset resulting of the merge of all the datasets\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        onNodeClicked\n                        \n                    \n                \n            \n            \n                \n                    \n                    onNodeClicked(node?: Node)\n                \n            \n\n\n            \n                \n                    Inherited from         BaseProvider\n\n                \n            \n            \n                \n                        Defined in         BaseProvider:305\n\n                \n            \n\n\n            \n                \n                    Adjust visibility of nodes and edges, for structural edges with\ntype.trigger = onclick. These nodes will only be shown once their\nrecord node is clicked on.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    node\n                                    \n                                                Node\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        A node that was clicked\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getEdgeActions\n                        \n                    \n                \n            \n            \n                \ngetEdgeActions(edge: Edge)\n                \n            \n\n\n            \n                \n                    Inherited from         BaseProvider\n\n                \n            \n            \n                \n                        Defined in         BaseProvider:211\n\n                \n            \n\n\n            \n                \n                    By default the base provider includes an action to filter the search if a clicked\nedge has a \"type.field\" property and a \"fieldValue\" (alternatively, an action\nis created if the 2 adjacent nodes can be filtered, ie they both have a \"field\"\nproperty)\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    edge\n                                    \n                                                Edge\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The clicked edge\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Action[]\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getProvider\n                        \n                    \n                \n            \n            \n                \ngetProvider()\n                \n            \n\n\n            \n                \n                    Inherited from         BaseProvider\n\n                \n            \n            \n                \n                        Defined in         BaseProvider:151\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         Subject\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onDestroy\n                        \n                    \n                \n            \n            \n                \nonDestroy()\n                \n            \n\n\n            \n                \n                    Inherited from         BaseProvider\n\n                \n            \n            \n                \n                        Defined in         BaseProvider:245\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onEdgeClicked\n                        \n                    \n                \n            \n            \n                \nonEdgeClicked(edge: Edge | undefined)\n                \n            \n\n\n            \n                \n                    Inherited from         BaseProvider\n\n                \n            \n            \n                \n                        Defined in         BaseProvider:171\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    edge\n                                    \n                                                Edge | undefined\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onNodesInserted\n                        \n                    \n                \n            \n            \n                \nonNodesInserted(nodes: Node[])\n                \n            \n\n\n            \n                \n                    Inherited from         BaseProvider\n\n                \n            \n            \n                \n                        Defined in         BaseProvider:163\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    nodes\n                                    \n                                                Node[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Utils } from '@sinequa/core/base';\nimport { Record } from '@sinequa/core/web-services';\nimport { Action } from '@sinequa/components/action';\nimport { Node, NetworkDataset, NodeType, EdgeType, NetworkContext } from '../network-models';\nimport { BaseProvider } from './base-provider';\n\n/**\n * Extension of the Node interface, to include the Record object\n * from which the node is generated\n */\nexport interface RecordNode extends Node {\n    record: Record;\n}\n\n\n/**\n * An extension of the EdgeType interface to include properties specific to\n * structural edges (edge between a record and its metadata).\n * \n * About trigger/display: At the moment, the Record provider always adds ALL nodes and edges\n * to the dataset, but potentially with a visibility set to false. Some of the settings are\n * not compatible with each other, and some take precedence over the others:\n * - display=existingnodes takes precedence over other settings, as it is implemented as\n * a post-processing of the dataset (in onDatasetsMerged)\n * - trigger=onclick or manual take precedence over the other settings, as they set the\n * visibility to false by false, until the user performs an action\n * - trigger=oninsert is compatible with the other display settings\n */\nexport interface StructuralEdgeType extends EdgeType {\n    /** Name of the field in the record */\n    field: string;\n    /** count limits the number of values displayed and allows for pagination. Use 0 for unlimited values */\n    count?: number;\n    /** Defines when the edge should be displayed */\n    trigger: StructuralTriggerType;\n    /** showall: display all values from the field / paginate: display all value with pagination / existingnodes: only link to existing nodes / manual: only show if manual action (activated programmatically) */\n    display: StructuralDisplayType;\n    /** A function to parse metadata from a record node in a custom way */\n    parse?: (value: any, record: Record, type: StructuralEdgeType) => CustomData;\n}\n\nexport type StructuralTriggerType = \"oninsert\" | \"onclick\" | \"manual\";\nexport type StructuralDisplayType = \"all\" | \"paginate\" | \"existingnodes\" | ((node: Node, recordNode: RecordNode, index: number) => boolean);\n\n/**\n * Data structure returned by the optional parse() function of a structural edge\n * type. Contains the parsed values of a property that can be turned into one or\n * multiple nodes and edges.\n */\nexport interface CustomData {\n    values: string[]; // eg. LARRY PAGE, GOOGLE\n    displays: string[]; // eg. Larry Page, Google\n    relations?: string[]; // eg. Works At\n    directed?: boolean[]; // eg. true\n    fieldValue?: string; // A value on which to filter the data\n}\n\n/**\n * Tests whether the given edge type is a structural edge type\n * @param et an edge type\n */\nexport function isStructuralEdgeType(et: EdgeType): et is StructuralEdgeType {\n    return !!(et as StructuralEdgeType).field;\n}\n\n\n/**\n * A network provider generating nodes from records.\n * Additionally, the provider can generate the \"structural edges\" of that\n * node. Structural edges are edges between a record and the fields of\n * that record (eg. the wikipedia page of Microsoft is a record that probably\n * contains the fields \"Microsoft\" and \"Bill Gates\").\n */\nexport class RecordsProvider extends BaseProvider {\n\n    constructor(\n        public override name = \"Documents\",\n        protected nodeType: NodeType,\n        protected edgeTypes: StructuralEdgeType[],\n        protected records: Record[],\n        protected hideRecordNode = false\n    ){\n        super(name);\n    }\n\n    /**\n     * Clears the dataset and generates new record nodes\n     * @param records the list of records of this provider\n     */\n    protected updateDataset(records?: Record[]) {\n        this.dataset.clear();\n        if(!this.active || !records || records.length === 0) {\n            return; \n        }\n        this.addRecordNodes(records);\n    }\n    \n    // Record nodes\n\n    /**\n     * Generates the nodes for a list of records, including their structural\n     * edges, and adds them to the dataset.\n     * Returns the list of record nodes.\n     * @param records \n     */\n    protected addRecordNodes(records: Record[]): RecordNode[] {\n        return records.map(record => {\n            let node = this.dataset.getNode(this.getNodeId(this.nodeType, record.id));\n            if(!node) {\n                node = this.createNode(this.nodeType, record.id, record.title, !this.hideRecordNode, {record});\n                this.dataset.addNodes(node);\n                this.edgeTypes.forEach(type => {\n                    this.addStructuralEdges(node as RecordNode, type);\n                });\n            }\n            return node as RecordNode;\n        });\n    }\n\n    \n    // Structural edges\n\n    /**\n     * Generates the metadata nodes and structural edges from the given node,\n     * and merge them into the dataset.\n     * This function will automatically parse the metadata contained in the record,\n     * but it is possible to manage custom types of metadata by providing a\n     * custom parse() function via the structural edge type.\n     * @param node The record node\n     * @param type The edge type for which we want to create edges\n     */\n    protected addStructuralEdges(node: RecordNode, type: StructuralEdgeType) {\n\n        if(type.nodeTypes[0] !== this.nodeType){\n            throw new Error(`Inconsistent node type: '${type.nodeTypes[0].name}' instead of '${this.nodeType.name}'`);\n        }\n        \n        const recorddata = node.record[type.field];\n\n        if(recorddata === undefined){\n            return;\n        }\n\n        // Custom parse for mono or multi valued data\n        if(type.parse) {\n            if(Utils.isArray(recorddata)) {\n                recorddata.forEach((value,i) => { \n                    this.addCustomEdge(node, type, type.parse!(value, node.record, type));\n                });\n            }\n            else {\n                this.addCustomEdge(node, type, type.parse!(recorddata, node.record, type));\n            }\n        }\n        // Default handling for standard Sinequa Metadata\n        else {\n            const data = new NetworkDataset();\n            data.addNodes(node);\n    \n            // sourcestr\n            if(Utils.isString(recorddata)) {\n                this.addStructuralEdge(data, node, type, recorddata, recorddata, 0);\n            }\n            else if(Utils.isArray(recorddata)) {\n                recorddata.forEach((value,i) => {\n                    // sourcecsv\n                    if(Utils.isString(value)) {\n                        this.addStructuralEdge(data, node, type, value, value, i);\n                    }\n                    // entity\n                    else if(value[\"value\"]) {\n                        this.addStructuralEdge(data, node, type, value[\"value\"], value[\"display\"] || value[\"value\"], i);\n                    }\n                });\n            }\n    \n            this.dataset.merge(data);\n        }\n    }\n\n    /**\n     * Add a structural edge to a record node and adds that edge\n     * (and corresponding metadata node) to the given dataset.\n     * @param dataset The target dataset\n     * @param recordNode The record node\n     * @param type The edge type of the structural edge\n     * @param value The \"value\" property of the metadata node\n     * @param display The \"display\" property of the metadata node\n     * @param index The index of the metadata within the record, which may influence its visibility when using display=paginate\n     */\n    protected addStructuralEdge(dataset: NetworkDataset, recordNode: RecordNode, type: StructuralEdgeType, value: string, display: string, index: number) {\n        // Create the metadata node\n        const node = this.createNode(type.nodeTypes[1], value, display, true);\n        // Sets its visibility\n        node.visible = type.trigger === \"oninsert\" && this.isEdgeVisible(type, node, recordNode, index);\n        if(recordNode.id !== node.id){ // Special case of hybrid nodes, where the recordNode might contain itself...!\n            if(!dataset.hasNode(node.id)) { // Duplicate nodes/edges are possible when the same node type is present in multiple fields of a record (eg. \"email\" in msgfrom and msgto)\n                dataset.addNodes(node);\n            }\n            const edge = this.createEdge(type, recordNode, node, value, node.visible, {record: recordNode.record});\n            if(!dataset.hasEdge(edge.id)) {\n                dataset.addEdges(edge);\n            }\n        }\n    }\n\n    /**\n     * Add a custom structural edge to a record node and merges that edge\n     * (and corresponding metadata node) into the global dataset.\n     * @param recordNode The record node\n     * @param type The edge type of the structural edge\n     * @param data A CustomData object containing the properties of the metadata nodes we want to created\n     */\n    protected addCustomEdge(recordNode: RecordNode, type: StructuralEdgeType, data: CustomData) {\n        if(type.nodeTypes.length !== data.values.length + 1) {\n            throw new Error(`Wrong number of values for this custom edge ${type.nodeTypes.length}, ${data.values.length}`);\n        }\n        // Create a dataset only for this data, to avoid duplicate conflicts\n        const dataset = new NetworkDataset();\n        dataset.addNodes(recordNode);\n        // For each value contained in \"data\", create a node, and edges in between them (in addition to the edges between the record and each metadata node)\n        let lastNode: Node;\n        for(let i=0; i 0){\n                const relation = data.relations? data.relations[i-1] : undefined;\n                const directed = data.directed? data.directed[i-1] : false;\n                dataset.addEdges(this.createEdge(type, lastNode!, node, data.fieldValue, true, {}, 1, directed, relation));\n            }\n            lastNode = node;\n        }\n        this.dataset.merge(dataset);\n    }\n\n    /**\n     * Returns the visibility of a structural edge, depending on the type.display property\n     * @param type The structural edge type\n     * @param node The metadata node of this edge\n     * @param recordNode The record node of this edge\n     * @param index The index of the metadata in the list of metadata of the record\n     */\n    protected isEdgeVisible(type: StructuralEdgeType, node: Node, recordNode: RecordNode, index: number): boolean {\n        if(type.display === \"all\") {\n            return true;\n        }\n        else if(type.display === \"existingnodes\") {\n            return false;\n        }\n        else if(type.display === \"paginate\") {\n            return index  node.type === this.nodeType)\n            .forEach(node => {\n                dataset.getAdjacentEdges(node.id)\n                    .filter(edge => (edge.type as StructuralEdgeType).display === 'existingnodes')\n                    .forEach(edge => {\n                        const neighbor = dataset.getNode(node.id === edge.to ? edge.from : edge.to);\n                        if(!neighbor) {\n                            throw new Error(`Missing node from edge ${edge.id}`);\n                        }\n                        const neighborsneighbors = dataset.getAdjacentEdges(neighbor.id);\n                        if(neighborsneighbors.length > 1) {\n                            neighbor.visible = true;\n                            edge.visible = true;\n                        }\n                    });\n            });\n    }\n\n    /**\n     * Adjust visibility of nodes and edges, for structural edges with\n     * type.trigger = onclick. These nodes will only be shown once their\n     * record node is clicked on.\n     * @param node A node that was clicked\n     */\n    override onNodeClicked(node?: Node) {\n        if(this.active && node && node.type === this.nodeType) { // Note: we cannot test the provider property, since this node might have been merged with one from a different provider. However the node type should be a unique instance\n            let update = false;\n            this.dataset.getAdjacentEdges(node.id)\n                .filter(edge => edge.type['trigger'] === 'onclick')\n                .forEach(edge => {\n                    const neighbor = this.dataset.getNode(node.id === edge.to ? edge.from : edge.to);\n                    if(!neighbor) {\n                        throw new Error(`Missing node from edge ${edge.id}`);\n                    }\n                    if(!neighbor.visible || !edge.visible) {\n                        edge.visible = true;\n                        neighbor.visible = true;\n                        update = true;\n                    }\n                    // TODO \"propagate\" visibility (ie. if 2 nodes are visible but an edge in between is invisible, make it visible)\n                });\n            if(update) {\n                this.provider.next(this.dataset);\n            }\n        }\n    }\n\n    override getProviderActions(): Action[] {\n        return super.getProviderActions();\n    }\n\n    /**\n     * Creates actions for expanding and/or collapsing a record node that was clicked.\n     * expanding and collapsing will act on the visibility of the structural edges\n     * attached to this node.\n     * Both actions might be displayed at the same time, if the node is in an intermediate\n     * state.\n     * @param node \n     */\n    override getNodeActions(node: Node): Action[] {\n        const actions = super.getNodeActions(node);\n        \n        // Actions for exanding / collapsing a record node\n        if(this.active && node.type === this.nodeType && this.edgeTypes.length > 0) {\n            let hasExpandedEdge = false;\n            let hasCollapsedEdge = false;\n            this.dataset.getAdjacentEdges(node.id).forEach(e => {\n                hasCollapsedEdge = hasCollapsedEdge || !e.visible;\n                hasExpandedEdge = hasExpandedEdge || e.visible;\n            });\n\n            if(hasCollapsedEdge) {\n                actions.push(new Action({\n                    icon: \"fas fa-expand-arrows-alt\",\n                    title: \"msg#network.actions.expandMeta\",\n                    action: () => {\n                        let update = false;\n                        this.dataset.getAdjacentEdges(node.id)\n                            .forEach(edge => {\n                                const neighbor = this.dataset.getNode(node.id === edge.to ? edge.from : edge.to);\n                                if(!neighbor) {\n                                    throw new Error(`Missing node from edge ${edge.id}`);\n                                }\n                                if(!neighbor.visible || !edge.visible) {\n                                    edge.visible = true;\n                                    neighbor.visible = true;\n                                    update = true;\n                                }\n                                // TODO \"propagate\" visibility (ie. if 2 nodes are visible but an edge in between is invisible, make it visible)\n                            });\n                        if(update) {\n                            this.provider.next(this.dataset);\n                        }\n                    }\n                }));\n            }\n            \n            if(hasExpandedEdge) {\n                actions.push(new Action({\n                    icon: \"fas fa-compress-arrows-alt\",\n                    title: \"msg#network.actions.collapseMeta\",\n                    action: () => {\n                        let update = false;\n                        this.dataset.getAdjacentEdges(node.id)\n                            .forEach(edge => {\n                                const neighbor = this.dataset.getNode(node.id === edge.to ? edge.from : edge.to);\n                                if(!neighbor) {\n                                    throw new Error(`Missing node from edge ${edge.id}`);\n                                }\n                                if((neighbor.visible || edge.visible) && !(neighbor as RecordNode).record) { // Prevent collapsing links between 2 record nodes (alternatively, we could count the number of neighbors of the neighbors, and close only the isoltated ones)\n                                    edge.visible = false;\n                                    neighbor.visible = false;\n                                    update = true;\n                                }\n                            });\n                        if(update) {\n                            this.provider.next(this.dataset);\n                        }\n                    }\n                }));\n            }\n        }\n        return actions;\n    }\n\n}\n    \n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/ResultTimeline.html":{"url":"components/ResultTimeline.html","title":"component - ResultTimeline","body":"\n                   \n\n\n\n\n\n  Components\n  \n  ResultTimeline\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    vis-timeline/result-timeline/result-timeline.ts\n\n\n\n\n\n    \n        Implements\n    \n    \n                    OnChanges\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                sq-result-timeline\n            \n\n\n\n\n            \n                templateUrl\n                ./result-timeline.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                initDone\n                            \n                            \n                                items\n                            \n                            \n                                    Public\n                                visTimelineService\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                ngOnChanges\n                            \n                            \n                                timelineInitialized\n                            \n                            \n                                updateTimeline\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                dates\n                            \n                            \n                                events\n                            \n                            \n                                max_dates\n                            \n                            \n                                max_year\n                            \n                            \n                                min_dates\n                            \n                            \n                                min_year\n                            \n                            \n                                name\n                            \n                            \n                                options\n                            \n                            \n                                record\n                            \n                        \n                    \n                \n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(visTimelineService: VisTimelineService)\n                    \n                \n                        \n                            \n                                Defined in vis-timeline/result-timeline/result-timeline.ts:32\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        visTimelineService\n                                                  \n                                                        \n                                                                    VisTimelineService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        dates\n                    \n                \n                \n                    \n                        Type :     EntityItem[]\n\n                    \n                \n                        \n                            \n                                    Defined in vis-timeline/result-timeline/result-timeline.ts:23\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        events\n                    \n                \n                \n                    \n                        Type :     EntityItem[]\n\n                    \n                \n                        \n                            \n                                    Defined in vis-timeline/result-timeline/result-timeline.ts:24\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        max_dates\n                    \n                \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 100\n                    \n                \n                        \n                            \n                                    Defined in vis-timeline/result-timeline/result-timeline.ts:28\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        max_year\n                    \n                \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 10000\n                    \n                \n                        \n                            \n                                    Defined in vis-timeline/result-timeline/result-timeline.ts:26\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        min_dates\n                    \n                \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 1\n                    \n                \n                        \n                            \n                                    Defined in vis-timeline/result-timeline/result-timeline.ts:27\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        min_year\n                    \n                \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 0\n                    \n                \n                        \n                            \n                                    Defined in vis-timeline/result-timeline/result-timeline.ts:25\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        name\n                    \n                \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : \"vis-timeline\"\n                    \n                \n                        \n                            \n                                    Defined in vis-timeline/result-timeline/result-timeline.ts:21\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        options\n                    \n                \n                \n                    \n                        Type :     TimelineOptions\n\n                    \n                \n                \n                    \n                        Default value : defaultOptions\n                    \n                \n                        \n                            \n                                    Defined in vis-timeline/result-timeline/result-timeline.ts:29\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        record\n                    \n                \n                \n                    \n                        Type :     Record\n\n                    \n                \n                        \n                            \n                                    Defined in vis-timeline/result-timeline/result-timeline.ts:22\n                            \n                        \n            \n        \n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnChanges\n                        \n                    \n                \n            \n            \n                \nngOnChanges(changes: SimpleChanges)\n                \n            \n\n\n            \n                \n                    Defined in vis-timeline/result-timeline/result-timeline.ts:37\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    changes\n                                    \n                                                SimpleChanges\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        timelineInitialized\n                        \n                    \n                \n            \n            \n                \ntimelineInitialized()\n                \n            \n\n\n            \n                \n                    Defined in vis-timeline/result-timeline/result-timeline.ts:122\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        updateTimeline\n                        \n                    \n                \n            \n            \n                \nupdateTimeline()\n                \n            \n\n\n            \n                \n                    Defined in vis-timeline/result-timeline/result-timeline.ts:43\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        initDone\n                        \n                    \n                \n            \n                \n                    \n                        Default value : false\n                    \n                \n                    \n                        \n                                Defined in vis-timeline/result-timeline/result-timeline.ts:31\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        items\n                        \n                    \n                \n            \n                \n                    \n                        Type :     DataItem[]\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                    \n                        \n                                Defined in vis-timeline/result-timeline/result-timeline.ts:32\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        visTimelineService\n                        \n                    \n                \n            \n                \n                    \n                        Type :     VisTimelineService\n\n                    \n                \n                    \n                        \n                                Defined in vis-timeline/result-timeline/result-timeline.ts:34\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n    \n        import {Component, Input, OnChanges, SimpleChanges} from \"@angular/core\";\nimport {Record, EntityItem} from \"@sinequa/core/web-services\";\nimport {TimelineOptions, DataItem, VisTimelineService} from \"ngx-vis\";\n\nimport moment from \"moment\";\n\nexport const defaultOptions : TimelineOptions = {\n    minHeight : '150px',\n    maxHeight : '350px',\n    margin: {\n        axis: 5,\n        item: 5\n    }\n};\n\n@Component({\n    selector: \"sq-result-timeline\",\n    templateUrl: \"./result-timeline.html\"\n})\nexport class ResultTimeline implements OnChanges {\n    @Input() name = \"vis-timeline\";\n    @Input() record: Record;\n    @Input() dates: EntityItem[];\n    @Input() events: EntityItem[];\n    @Input() min_year: number = 0;\n    @Input() max_year: number = 10000;\n    @Input() min_dates: number = 1;\n    @Input() max_dates: number = 100;\n    @Input() options: TimelineOptions = defaultOptions;\n\n    initDone = false;\n    items : DataItem[] = [];\n\n    constructor(public visTimelineService: VisTimelineService){\n    }\n\n    ngOnChanges(changes:SimpleChanges) {\n        if(!!changes['record'] || !!changes['dates'] || !!changes['events']){\n            this.updateTimeline();\n        }\n    }\n\n    updateTimeline(){\n\n        this.items.splice(0);\n\n        const dates = this.dates || [];\n        const events = this.events || [];\n\n        const all_ids: string[] = [];\n        const all_dates: string[] = [];\n\n        events.forEach(event => {\n            const data_date = event.display;\n            const cooc = data_date.substring(1,data_date.length-1).split(\")#(\");\n            const date = new Date(cooc[1]);\n            //console.log(\"cooc1:\",data_date[i+2]);\n            //const pos = event.locations.split(\",\")[0];\n            //console.log(cooc);\n            const year = date.getFullYear();\n            //console.log(year);\n            //console.log(regdate.test(date) );\n            //console.log( year  1950);\n            const id = this.record.id + \"#\" + data_date;\n            if(year  this.min_year && all_ids.indexOf(id)===-1){\n                this.items.push({id: id, content: cooc[0], start: date});\n                all_dates.push(cooc[1]);\n                all_ids.push(id);\n            }\n        });\n\n        dates.forEach(dateobj => {\n            const date: Date = moment(dateobj.display).toDate();\n            //console.log(\"date:\",data_date[i+1]);\n            //const pos = dateobj.locations.split(\",\")[0];\n            const year = date.getFullYear();\n            const id = this.record.id + \"#\" + dateobj.display;\n            if(year  this.min_year && all_dates.indexOf(dateobj.display)===-1 && all_ids.indexOf(id)===-1){\n                this.items.push({id: id, content: moment(date).format('ll'), start: date});\n                all_ids.push(id);\n            }\n        });\n\n        if(this.items.length >= this.min_dates){\n\n            if(this.items.length> this.max_dates )\n                this.items.splice(0, this.max_dates);\n\n            //console.log(data);\n\n            //try{\n            //    this.timeline.removeCustomTime(\"date-modified\");\n            //}catch{\n                // No date-modified\n            //}\n\n            //if(Utils.isString(this.record.modified) && this.record.modified.length>=10){\n            //    this.timeline.addCustomTime(this.record.modified.substring(0,10), \"date-modified\");\n            //}\n\n            /*this.timeline.on('select', properties => {\n                //console.log('selected items: ' + properties.items);\n                //console.log('event: ', properties.event);\n                //console.log(properties);\n                if(properties.items.length>0){\n                    //var id = properties.items[0].split(\"#\");\n                    console.log(this.items.get(properties.items[0]));\n                    //var date = items._data[properties.items[0]].start;\n                    //var url = \"search?action=select&resultid=\"+RESULTID+\"&item=%22Tag%3B\"+settings.date_column+\"%3B\"+date+\"%3B\"+date+\"%22\"\n                    //popup_extract(id[0], parseInt(id[1]), properties.event.target,url);\n                }\n            });*/\n\n        }else{\n            console.log(\"no timeline for this doc...\");\n        }\n        if(this.initDone) {\n            this.visTimelineService.setItems(this.name, this.items);\n        }\n    }\n\n    timelineInitialized() {\n        this.initDone = true;\n    }\n}\n\n    \n\n    \n        \n\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = ''\n    var COMPONENTS = [{'name': 'AgGridViewComponent', 'selector': 'sq-ag-grid-view'},{'name': 'BsEdgeInfoCard', 'selector': 'sq-edge-info-card'},{'name': 'BsFacetDate', 'selector': 'sq-facet-date'},{'name': 'BsFacetHeatmapComponent', 'selector': 'sq-facet-heatmap'},{'name': 'BsFacetTimelineComponent', 'selector': 'sq-facet-timeline'},{'name': 'BsHeatmapComponent', 'selector': 'sq-heatmap'},{'name': 'BsNodeInfoCard', 'selector': 'sq-node-info-card'},{'name': 'BsResultsHeatmapView', 'selector': 'sq-results-heatmap-view'},{'name': 'BsTimelineComponent', 'selector': 'sq-timeline'},{'name': 'BsTooltipComponent', 'selector': 'sq-tooltip'},{'name': 'DataModalComponent', 'selector': 'sq-data-modal'},{'name': 'FacetNgxChart', 'selector': 'sq-facet-ngx-chart'},{'name': 'FacetWrapperComponent', 'selector': 'facet-wrapper'},{'name': 'FusionChart', 'selector': 'sq-fusion-chart'},{'name': 'MapComponent', 'selector': 'sq-googlemaps'},{'name': 'MoneyCloudComponent', 'selector': 'sq-money-cloud'},{'name': 'MoneyTimelineComponent', 'selector': 'sq-money-timeline'},{'name': 'NetworkComponent', 'selector': 'sq-network'},{'name': 'NgxChart', 'selector': 'sq-ngx-chart'},{'name': 'ResultTimeline', 'selector': 'sq-result-timeline'},{'name': 'TimelineLegendComponent', 'selector': 'sq-timeline-legend'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'ResultTimeline'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SelectedRecordsProvider.html":{"url":"classes/SelectedRecordsProvider.html","title":"class - SelectedRecordsProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SelectedRecordsProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            network/providers/selected-records-provider.ts\n        \n\n\n            \n                Description\n            \n            \n                An extension of the RecordsProvider, where records are not provided\ndirectly, but instead are taken from the SelectionService and refreshed\nevery time a node is selected or unselected.\n⚠️ Note that the SelectionService must be configured to store records instead\nof just records ids!\nSee http://localhost:4000/sba-angular/modules/components/selection.html#selection-service\n\n            \n\n            \n                Extends\n            \n            \n                        RecordsProvider\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    \n                                name\n                            \n                            \n                                selectionSubscription\n                            \n                            \n                                    Public\n                                    Readonly\n                                activateAction\n                            \n                            \n                                    Public\n                                active\n                            \n                            \n                                    Public\n                                context\n                            \n                            \n                                    Public\n                                dataset\n                            \n                            \n                                    Public\n                                    Readonly\n                                EDGESEPARATOR\n                            \n                            \n                                    Public\n                                    Readonly\n                                resetAction\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                getData\n                            \n                            \n                                    \n                                onDestroy\n                            \n                            \n                                    \n                                getNodeActions\n                            \n                            \n                                    \n                                getProviderActions\n                            \n                            \n                                    \n                                onDatasetsMerged\n                            \n                            \n                                    \n                                onNodeClicked\n                            \n                            \n                                getEdgeActions\n                            \n                            \n                                getProvider\n                            \n                            \n                                onEdgeClicked\n                            \n                            \n                                onNodesInserted\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(name: string, nodeType: NodeType, edgeTypes: StructuralEdgeType[], selectionService: SelectionService, hideRecordNode)\n                    \n                \n                        \n                            \n                                Defined in network/providers/selected-records-provider.ts:19\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        name\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        nodeType\n                                                  \n                                                        \n                                                                        NodeType\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        edgeTypes\n                                                  \n                                                        \n                                                                    StructuralEdgeType[]\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        selectionService\n                                                  \n                                                        \n                                                                    SelectionService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        hideRecordNode\n                                                  \n                                                        \n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : \"Selected documents\"\n                    \n                \n                        \n                            \n                                Inherited from         BaseProvider\n\n                            \n                        \n                    \n                        \n                                Defined in         BaseProvider:22\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        selectionSubscription\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Subscription\n\n                    \n                \n                    \n                        \n                                Defined in network/providers/selected-records-provider.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        activateAction\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Action\n\n                    \n                \n                        \n                            \n                                Inherited from         BaseProvider\n\n                            \n                        \n                    \n                        \n                                Defined in         BaseProvider:21\n\n                        \n                    \n\n            \n                \n                    Action to turn the provider on or off\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        active\n                        \n                    \n                \n            \n                \n                    \n                        Default value : true\n                    \n                \n                        \n                            \n                                Inherited from         BaseProvider\n\n                            \n                        \n                    \n                        \n                                Defined in         BaseProvider:16\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        context\n                        \n                    \n                \n            \n                \n                    \n                        Type :         NetworkContext\n\n                    \n                \n                        \n                            \n                                Inherited from         BaseProvider\n\n                            \n                        \n                    \n                        \n                                Defined in         BaseProvider:25\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        dataset\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new NetworkDataset()\n                    \n                \n                        \n                            \n                                Inherited from         BaseProvider\n\n                            \n                        \n                    \n                        \n                                Defined in         BaseProvider:15\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        EDGESEPARATOR\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : \"~~~EDGE~~~\"\n                    \n                \n                        \n                            \n                                Inherited from         BaseProvider\n\n                            \n                        \n                    \n                        \n                                Defined in         BaseProvider:18\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        resetAction\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Action\n\n                    \n                \n                        \n                            \n                                Inherited from         BaseProvider\n\n                            \n                        \n                    \n                        \n                                Defined in         BaseProvider:23\n\n                        \n                    \n\n            \n                \n                    Action to reset the provider\n\n                \n            \n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        getData\n                        \n                    \n                \n            \n            \n                \n                    \n                    getData(context: NetworkContext)\n                \n            \n\n\n            \n                \n                    Inherited from         BaseProvider\n\n                \n            \n            \n                \n                        Defined in         BaseProvider:42\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                                NetworkContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        onDestroy\n                        \n                    \n                \n            \n            \n                \n                    \n                    onDestroy()\n                \n            \n\n\n            \n                \n                    Inherited from         BaseProvider\n\n                \n            \n            \n                \n                        Defined in         BaseProvider:48\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        getNodeActions\n                        \n                    \n                \n            \n            \n                \n                    \n                    getNodeActions(node: Node)\n                \n            \n\n\n            \n                \n                    Inherited from         BaseProvider\n\n                \n            \n            \n                \n                        Defined in         BaseProvider:340\n\n                \n            \n\n\n            \n                \n                    Creates actions for expanding and/or collapsing a record node that was clicked.\nexpanding and collapsing will act on the visibility of the structural edges\nattached to this node.\nBoth actions might be displayed at the same time, if the node is in an intermediate\nstate.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    node\n                                    \n                                                Node\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Action[]\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        getProviderActions\n                        \n                    \n                \n            \n            \n                \n                    \n                    getProviderActions()\n                \n            \n\n\n            \n                \n                    Inherited from         BaseProvider\n\n                \n            \n            \n                \n                        Defined in         BaseProvider:328\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     Action[]\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        onDatasetsMerged\n                        \n                    \n                \n            \n            \n                \n                    \n                    onDatasetsMerged(dataset: NetworkDataset)\n                \n            \n\n\n            \n                \n                    Inherited from         BaseProvider\n\n                \n            \n            \n                \n                        Defined in         BaseProvider:278\n\n                \n            \n\n\n            \n                \n                    This function adjusts the visibility of nodes for the visibility\ntype \"existingnode\", so that nodes with only one neighbor (post-merge)\nare collapsed.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    dataset\n                                    \n                                                NetworkDataset\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The dataset resulting of the merge of all the datasets\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        onNodeClicked\n                        \n                    \n                \n            \n            \n                \n                    \n                    onNodeClicked(node?: Node)\n                \n            \n\n\n            \n                \n                    Inherited from         BaseProvider\n\n                \n            \n            \n                \n                        Defined in         BaseProvider:305\n\n                \n            \n\n\n            \n                \n                    Adjust visibility of nodes and edges, for structural edges with\ntype.trigger = onclick. These nodes will only be shown once their\nrecord node is clicked on.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    node\n                                    \n                                                Node\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        A node that was clicked\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getEdgeActions\n                        \n                    \n                \n            \n            \n                \ngetEdgeActions(edge: Edge)\n                \n            \n\n\n            \n                \n                    Inherited from         BaseProvider\n\n                \n            \n            \n                \n                        Defined in         BaseProvider:211\n\n                \n            \n\n\n            \n                \n                    By default the base provider includes an action to filter the search if a clicked\nedge has a \"type.field\" property and a \"fieldValue\" (alternatively, an action\nis created if the 2 adjacent nodes can be filtered, ie they both have a \"field\"\nproperty)\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    edge\n                                    \n                                                Edge\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The clicked edge\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Action[]\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getProvider\n                        \n                    \n                \n            \n            \n                \ngetProvider()\n                \n            \n\n\n            \n                \n                    Inherited from         BaseProvider\n\n                \n            \n            \n                \n                        Defined in         BaseProvider:151\n\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         Subject\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onEdgeClicked\n                        \n                    \n                \n            \n            \n                \nonEdgeClicked(edge: Edge | undefined)\n                \n            \n\n\n            \n                \n                    Inherited from         BaseProvider\n\n                \n            \n            \n                \n                        Defined in         BaseProvider:171\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    edge\n                                    \n                                                Edge | undefined\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onNodesInserted\n                        \n                    \n                \n            \n            \n                \nonNodesInserted(nodes: Node[])\n                \n            \n\n\n            \n                \n                    Inherited from         BaseProvider\n\n                \n            \n            \n                \n                        Defined in         BaseProvider:163\n\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    nodes\n                                    \n                                                Node[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Subscription } from 'rxjs';\nimport { Record } from '@sinequa/core/web-services';\nimport { SelectionService, SelectionEventType } from '@sinequa/components/selection';\nimport { NodeType, NetworkContext } from '../network-models';\nimport { RecordsProvider, StructuralEdgeType } from './records-provider';\n\n\n/**\n * An extension of the RecordsProvider, where records are not provided\n * directly, but instead are taken from the SelectionService and refreshed\n * every time a node is selected or unselected.\n * ⚠️ Note that the SelectionService must be configured to store records instead\n * of just records ids!\n * See http://localhost:4000/sba-angular/modules/components/selection.html#selection-service\n */\nexport class SelectedRecordsProvider extends RecordsProvider {\n\n    // Subscription to the SelectionService, allowing to refresh the list of records\n    selectionSubscription: Subscription;\n\n    constructor(\n        public override name = \"Selected documents\",\n        protected override nodeType: NodeType,\n        protected override edgeTypes: StructuralEdgeType[],\n        protected selectionService: SelectionService,\n        protected override hideRecordNode = false\n    ){\n        super(name, nodeType, edgeTypes, selectionService.getSelectedItems() as Record[], hideRecordNode);\n\n        this.selectionSubscription = selectionService.events.subscribe(event => {\n            if(event.type === SelectionEventType.SELECT || SelectionEventType.UNSELECT) {\n                const records = selectionService.getSelectedItems() as Record[];\n                this.updateDataset(records);\n                this.provider.next(this.dataset);\n            }\n        });\n    }\n\n\n    // NetworkProvider interface\n\n    override getData(context: NetworkContext) {\n        this.context = context;\n        this.updateDataset(this.selectionService.getSelectedItems() as Record[]);\n        this.provider.next(this.dataset);\n    }\n    \n    override onDestroy() {\n        this.selectionSubscription?.unsubscribe();\n    }\n\n}\n    \n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/StructuralEdgeType.html":{"url":"interfaces/StructuralEdgeType.html","title":"interface - StructuralEdgeType","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  StructuralEdgeType\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            network/providers/records-provider.ts\n        \n\n\n            \n                Description\n            \n            \n                An extension of the EdgeType interface to include properties specific to\nstructural edges (edge between a record and its metadata).\nAbout trigger/display: At the moment, the Record provider always adds ALL nodes and edges\nto the dataset, but potentially with a visibility set to false. Some of the settings are\nnot compatible with each other, and some take precedence over the others:\n\ndisplay=existingnodes takes precedence over other settings, as it is implemented as\na post-processing of the dataset (in onDatasetsMerged)\ntrigger=onclick or manual take precedence over the other settings, as they set the\nvisibility to false by false, until the user performs an action\ntrigger=oninsert is compatible with the other display settings\n\n\n            \n\n            \n                Extends\n            \n            \n                        EdgeType\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            count\n                                        \n                                \n                                \n                                        \n                                            display\n                                        \n                                \n                                \n                                        \n                                            field\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            parse\n                                        \n                                \n                                \n                                        \n                                            trigger\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        count\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        count:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    count limits the number of values displayed and allows for pagination. Use 0 for unlimited values\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        display\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        display:         StructuralDisplayType\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         StructuralDisplayType\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    showall: display all values from the field / paginate: display all value with pagination / existingnodes: only link to existing nodes / manual: only show if manual action (activated programmatically)\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        field\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        field:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Name of the field in the record\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        parse\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        parse:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    A function to parse metadata from a record node in a custom way\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        trigger\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        trigger:         StructuralTriggerType\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         StructuralTriggerType\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Defines when the edge should be displayed\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { Utils } from '@sinequa/core/base';\nimport { Record } from '@sinequa/core/web-services';\nimport { Action } from '@sinequa/components/action';\nimport { Node, NetworkDataset, NodeType, EdgeType, NetworkContext } from '../network-models';\nimport { BaseProvider } from './base-provider';\n\n/**\n * Extension of the Node interface, to include the Record object\n * from which the node is generated\n */\nexport interface RecordNode extends Node {\n    record: Record;\n}\n\n\n/**\n * An extension of the EdgeType interface to include properties specific to\n * structural edges (edge between a record and its metadata).\n * \n * About trigger/display: At the moment, the Record provider always adds ALL nodes and edges\n * to the dataset, but potentially with a visibility set to false. Some of the settings are\n * not compatible with each other, and some take precedence over the others:\n * - display=existingnodes takes precedence over other settings, as it is implemented as\n * a post-processing of the dataset (in onDatasetsMerged)\n * - trigger=onclick or manual take precedence over the other settings, as they set the\n * visibility to false by false, until the user performs an action\n * - trigger=oninsert is compatible with the other display settings\n */\nexport interface StructuralEdgeType extends EdgeType {\n    /** Name of the field in the record */\n    field: string;\n    /** count limits the number of values displayed and allows for pagination. Use 0 for unlimited values */\n    count?: number;\n    /** Defines when the edge should be displayed */\n    trigger: StructuralTriggerType;\n    /** showall: display all values from the field / paginate: display all value with pagination / existingnodes: only link to existing nodes / manual: only show if manual action (activated programmatically) */\n    display: StructuralDisplayType;\n    /** A function to parse metadata from a record node in a custom way */\n    parse?: (value: any, record: Record, type: StructuralEdgeType) => CustomData;\n}\n\nexport type StructuralTriggerType = \"oninsert\" | \"onclick\" | \"manual\";\nexport type StructuralDisplayType = \"all\" | \"paginate\" | \"existingnodes\" | ((node: Node, recordNode: RecordNode, index: number) => boolean);\n\n/**\n * Data structure returned by the optional parse() function of a structural edge\n * type. Contains the parsed values of a property that can be turned into one or\n * multiple nodes and edges.\n */\nexport interface CustomData {\n    values: string[]; // eg. LARRY PAGE, GOOGLE\n    displays: string[]; // eg. Larry Page, Google\n    relations?: string[]; // eg. Works At\n    directed?: boolean[]; // eg. true\n    fieldValue?: string; // A value on which to filter the data\n}\n\n/**\n * Tests whether the given edge type is a structural edge type\n * @param et an edge type\n */\nexport function isStructuralEdgeType(et: EdgeType): et is StructuralEdgeType {\n    return !!(et as StructuralEdgeType).field;\n}\n\n\n/**\n * A network provider generating nodes from records.\n * Additionally, the provider can generate the \"structural edges\" of that\n * node. Structural edges are edges between a record and the fields of\n * that record (eg. the wikipedia page of Microsoft is a record that probably\n * contains the fields \"Microsoft\" and \"Bill Gates\").\n */\nexport class RecordsProvider extends BaseProvider {\n\n    constructor(\n        public override name = \"Documents\",\n        protected nodeType: NodeType,\n        protected edgeTypes: StructuralEdgeType[],\n        protected records: Record[],\n        protected hideRecordNode = false\n    ){\n        super(name);\n    }\n\n    /**\n     * Clears the dataset and generates new record nodes\n     * @param records the list of records of this provider\n     */\n    protected updateDataset(records?: Record[]) {\n        this.dataset.clear();\n        if(!this.active || !records || records.length === 0) {\n            return; \n        }\n        this.addRecordNodes(records);\n    }\n    \n    // Record nodes\n\n    /**\n     * Generates the nodes for a list of records, including their structural\n     * edges, and adds them to the dataset.\n     * Returns the list of record nodes.\n     * @param records \n     */\n    protected addRecordNodes(records: Record[]): RecordNode[] {\n        return records.map(record => {\n            let node = this.dataset.getNode(this.getNodeId(this.nodeType, record.id));\n            if(!node) {\n                node = this.createNode(this.nodeType, record.id, record.title, !this.hideRecordNode, {record});\n                this.dataset.addNodes(node);\n                this.edgeTypes.forEach(type => {\n                    this.addStructuralEdges(node as RecordNode, type);\n                });\n            }\n            return node as RecordNode;\n        });\n    }\n\n    \n    // Structural edges\n\n    /**\n     * Generates the metadata nodes and structural edges from the given node,\n     * and merge them into the dataset.\n     * This function will automatically parse the metadata contained in the record,\n     * but it is possible to manage custom types of metadata by providing a\n     * custom parse() function via the structural edge type.\n     * @param node The record node\n     * @param type The edge type for which we want to create edges\n     */\n    protected addStructuralEdges(node: RecordNode, type: StructuralEdgeType) {\n\n        if(type.nodeTypes[0] !== this.nodeType){\n            throw new Error(`Inconsistent node type: '${type.nodeTypes[0].name}' instead of '${this.nodeType.name}'`);\n        }\n        \n        const recorddata = node.record[type.field];\n\n        if(recorddata === undefined){\n            return;\n        }\n\n        // Custom parse for mono or multi valued data\n        if(type.parse) {\n            if(Utils.isArray(recorddata)) {\n                recorddata.forEach((value,i) => { \n                    this.addCustomEdge(node, type, type.parse!(value, node.record, type));\n                });\n            }\n            else {\n                this.addCustomEdge(node, type, type.parse!(recorddata, node.record, type));\n            }\n        }\n        // Default handling for standard Sinequa Metadata\n        else {\n            const data = new NetworkDataset();\n            data.addNodes(node);\n    \n            // sourcestr\n            if(Utils.isString(recorddata)) {\n                this.addStructuralEdge(data, node, type, recorddata, recorddata, 0);\n            }\n            else if(Utils.isArray(recorddata)) {\n                recorddata.forEach((value,i) => {\n                    // sourcecsv\n                    if(Utils.isString(value)) {\n                        this.addStructuralEdge(data, node, type, value, value, i);\n                    }\n                    // entity\n                    else if(value[\"value\"]) {\n                        this.addStructuralEdge(data, node, type, value[\"value\"], value[\"display\"] || value[\"value\"], i);\n                    }\n                });\n            }\n    \n            this.dataset.merge(data);\n        }\n    }\n\n    /**\n     * Add a structural edge to a record node and adds that edge\n     * (and corresponding metadata node) to the given dataset.\n     * @param dataset The target dataset\n     * @param recordNode The record node\n     * @param type The edge type of the structural edge\n     * @param value The \"value\" property of the metadata node\n     * @param display The \"display\" property of the metadata node\n     * @param index The index of the metadata within the record, which may influence its visibility when using display=paginate\n     */\n    protected addStructuralEdge(dataset: NetworkDataset, recordNode: RecordNode, type: StructuralEdgeType, value: string, display: string, index: number) {\n        // Create the metadata node\n        const node = this.createNode(type.nodeTypes[1], value, display, true);\n        // Sets its visibility\n        node.visible = type.trigger === \"oninsert\" && this.isEdgeVisible(type, node, recordNode, index);\n        if(recordNode.id !== node.id){ // Special case of hybrid nodes, where the recordNode might contain itself...!\n            if(!dataset.hasNode(node.id)) { // Duplicate nodes/edges are possible when the same node type is present in multiple fields of a record (eg. \"email\" in msgfrom and msgto)\n                dataset.addNodes(node);\n            }\n            const edge = this.createEdge(type, recordNode, node, value, node.visible, {record: recordNode.record});\n            if(!dataset.hasEdge(edge.id)) {\n                dataset.addEdges(edge);\n            }\n        }\n    }\n\n    /**\n     * Add a custom structural edge to a record node and merges that edge\n     * (and corresponding metadata node) into the global dataset.\n     * @param recordNode The record node\n     * @param type The edge type of the structural edge\n     * @param data A CustomData object containing the properties of the metadata nodes we want to created\n     */\n    protected addCustomEdge(recordNode: RecordNode, type: StructuralEdgeType, data: CustomData) {\n        if(type.nodeTypes.length !== data.values.length + 1) {\n            throw new Error(`Wrong number of values for this custom edge ${type.nodeTypes.length}, ${data.values.length}`);\n        }\n        // Create a dataset only for this data, to avoid duplicate conflicts\n        const dataset = new NetworkDataset();\n        dataset.addNodes(recordNode);\n        // For each value contained in \"data\", create a node, and edges in between them (in addition to the edges between the record and each metadata node)\n        let lastNode: Node;\n        for(let i=0; i 0){\n                const relation = data.relations? data.relations[i-1] : undefined;\n                const directed = data.directed? data.directed[i-1] : false;\n                dataset.addEdges(this.createEdge(type, lastNode!, node, data.fieldValue, true, {}, 1, directed, relation));\n            }\n            lastNode = node;\n        }\n        this.dataset.merge(dataset);\n    }\n\n    /**\n     * Returns the visibility of a structural edge, depending on the type.display property\n     * @param type The structural edge type\n     * @param node The metadata node of this edge\n     * @param recordNode The record node of this edge\n     * @param index The index of the metadata in the list of metadata of the record\n     */\n    protected isEdgeVisible(type: StructuralEdgeType, node: Node, recordNode: RecordNode, index: number): boolean {\n        if(type.display === \"all\") {\n            return true;\n        }\n        else if(type.display === \"existingnodes\") {\n            return false;\n        }\n        else if(type.display === \"paginate\") {\n            return index  node.type === this.nodeType)\n            .forEach(node => {\n                dataset.getAdjacentEdges(node.id)\n                    .filter(edge => (edge.type as StructuralEdgeType).display === 'existingnodes')\n                    .forEach(edge => {\n                        const neighbor = dataset.getNode(node.id === edge.to ? edge.from : edge.to);\n                        if(!neighbor) {\n                            throw new Error(`Missing node from edge ${edge.id}`);\n                        }\n                        const neighborsneighbors = dataset.getAdjacentEdges(neighbor.id);\n                        if(neighborsneighbors.length > 1) {\n                            neighbor.visible = true;\n                            edge.visible = true;\n                        }\n                    });\n            });\n    }\n\n    /**\n     * Adjust visibility of nodes and edges, for structural edges with\n     * type.trigger = onclick. These nodes will only be shown once their\n     * record node is clicked on.\n     * @param node A node that was clicked\n     */\n    override onNodeClicked(node?: Node) {\n        if(this.active && node && node.type === this.nodeType) { // Note: we cannot test the provider property, since this node might have been merged with one from a different provider. However the node type should be a unique instance\n            let update = false;\n            this.dataset.getAdjacentEdges(node.id)\n                .filter(edge => edge.type['trigger'] === 'onclick')\n                .forEach(edge => {\n                    const neighbor = this.dataset.getNode(node.id === edge.to ? edge.from : edge.to);\n                    if(!neighbor) {\n                        throw new Error(`Missing node from edge ${edge.id}`);\n                    }\n                    if(!neighbor.visible || !edge.visible) {\n                        edge.visible = true;\n                        neighbor.visible = true;\n                        update = true;\n                    }\n                    // TODO \"propagate\" visibility (ie. if 2 nodes are visible but an edge in between is invisible, make it visible)\n                });\n            if(update) {\n                this.provider.next(this.dataset);\n            }\n        }\n    }\n\n    override getProviderActions(): Action[] {\n        return super.getProviderActions();\n    }\n\n    /**\n     * Creates actions for expanding and/or collapsing a record node that was clicked.\n     * expanding and collapsing will act on the visibility of the structural edges\n     * attached to this node.\n     * Both actions might be displayed at the same time, if the node is in an intermediate\n     * state.\n     * @param node \n     */\n    override getNodeActions(node: Node): Action[] {\n        const actions = super.getNodeActions(node);\n        \n        // Actions for exanding / collapsing a record node\n        if(this.active && node.type === this.nodeType && this.edgeTypes.length > 0) {\n            let hasExpandedEdge = false;\n            let hasCollapsedEdge = false;\n            this.dataset.getAdjacentEdges(node.id).forEach(e => {\n                hasCollapsedEdge = hasCollapsedEdge || !e.visible;\n                hasExpandedEdge = hasExpandedEdge || e.visible;\n            });\n\n            if(hasCollapsedEdge) {\n                actions.push(new Action({\n                    icon: \"fas fa-expand-arrows-alt\",\n                    title: \"msg#network.actions.expandMeta\",\n                    action: () => {\n                        let update = false;\n                        this.dataset.getAdjacentEdges(node.id)\n                            .forEach(edge => {\n                                const neighbor = this.dataset.getNode(node.id === edge.to ? edge.from : edge.to);\n                                if(!neighbor) {\n                                    throw new Error(`Missing node from edge ${edge.id}`);\n                                }\n                                if(!neighbor.visible || !edge.visible) {\n                                    edge.visible = true;\n                                    neighbor.visible = true;\n                                    update = true;\n                                }\n                                // TODO \"propagate\" visibility (ie. if 2 nodes are visible but an edge in between is invisible, make it visible)\n                            });\n                        if(update) {\n                            this.provider.next(this.dataset);\n                        }\n                    }\n                }));\n            }\n            \n            if(hasExpandedEdge) {\n                actions.push(new Action({\n                    icon: \"fas fa-compress-arrows-alt\",\n                    title: \"msg#network.actions.collapseMeta\",\n                    action: () => {\n                        let update = false;\n                        this.dataset.getAdjacentEdges(node.id)\n                            .forEach(edge => {\n                                const neighbor = this.dataset.getNode(node.id === edge.to ? edge.from : edge.to);\n                                if(!neighbor) {\n                                    throw new Error(`Missing node from edge ${edge.id}`);\n                                }\n                                if((neighbor.visible || edge.visible) && !(neighbor as RecordNode).record) { // Prevent collapsing links between 2 record nodes (alternatively, we could count the number of neighbors of the neighbors, and close only the isoltated ones)\n                                    edge.visible = false;\n                                    neighbor.visible = false;\n                                    update = true;\n                                }\n                            });\n                        if(update) {\n                            this.provider.next(this.dataset);\n                        }\n                    }\n                }));\n            }\n        }\n        return actions;\n    }\n\n}\n    \n    \n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/TimelineAggregation.html":{"url":"interfaces/TimelineAggregation.html","title":"interface - TimelineAggregation","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  TimelineAggregation\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            timeline/bootstrap/facet-timeline.component.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            aggregation\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            areaStyles\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            lineStyles\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            name\n                                        \n                                \n                                \n                                        \n                                            primary\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            showDatapoints\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        aggregation\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        aggregation:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        areaStyles\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        areaStyles:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        lineStyles\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        lineStyles:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        name\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        name:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        primary\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        primary:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        showDatapoints\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        showDatapoints:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Component, Input, OnChanges, ChangeDetectorRef, SimpleChanges, Output, EventEmitter } from '@angular/core';\nimport { Observable, of, combineLatest, ReplaySubject } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { Results, AggregationItem, Aggregation, CCAggregation, Record, AuditWebService, AuditEventType } from '@sinequa/core/web-services';\nimport { AppService, Expr, ExprBuilder } from '@sinequa/core/app-utils';\nimport { Utils } from '@sinequa/core/base';\nimport { AbstractFacet, FacetService } from '@sinequa/components/facet';\nimport { SearchService } from '@sinequa/components/search';\nimport { SelectionService } from '@sinequa/components/selection';\nimport { Action } from '@sinequa/components/action';\nimport { TimelineSeries, TimelineDate, TimelineEvent } from './timeline.component';\nimport moment from 'moment';\nimport * as d3 from 'd3';\nimport { TimelineEventType } from './timeline-legend.component';\n\nexport interface TimelineAggregation {\n    name?: string;\n    aggregation: string;\n    primary: boolean;\n    areaStyles?: {[key: string]: any};\n    lineStyles?: {[key: string]: any};\n    showDatapoints?: boolean;\n}\n\nexport interface TimelineCombinedAggregations {\n    aggregations: TimelineAggregation[];\n    maxNMonths: number[]; // Maximum number of months for which to use this aggregation\n    default: TimelineAggregation; // Aggregation to use by default \n    current?: TimelineAggregation; // (this field is overriden by the component when switching aggregation)\n}\n\nexport interface TimelineRecords {\n    field: string;\n    size?: number | ((record: Record, selected: boolean) => number);\n    styles?: {[key: string]: any} | ((record: Record, selected: boolean) => {[key: string]: any});\n    display?: (record: Record) => string;\n}\n\nexport interface TimelineEventAggregation {\n    aggregation: string;\n    getDate: ((item: AggregationItem) => Date);\n    getDisplay: ((item: AggregationItem) => string);\n    size?: number | ((item: AggregationItem) => number);\n    styles?: {[key: string]: any} | ((item: AggregationItem) => {[key: string]: any});\n}\n\nexport type TimelineData = TimelineSeries | TimelineAggregation | TimelineCombinedAggregations;\n\nexport type TimelineEventData = TimelineEvent[] | TimelineRecords | TimelineEventAggregation;\n\n@Component({\n    selector: 'sq-facet-timeline',\n    templateUrl: './facet-timeline.component.html',\n    styleUrls: ['./facet-timeline.component.scss']\n})\nexport class BsFacetTimelineComponent extends AbstractFacet implements OnChanges {\n    @Input() name = 'Timeline';\n    @Input() results: Results;\n    \n    // By default, we show the standard Timeline aggregation and the list of current records\n    @Input() timeseries: TimelineData[] = [{aggregation: 'Timeline', primary: true}];\n    @Input() events: TimelineEventData[] = [{field: 'modified'}];\n\n    // Initial scale (prior to any zoom)\n    @Input() minDate?: Date;\n    @Input() maxDate?: Date;\n    // Date range to filter aggregations (ignored when combined aggregations are recomputed based on zoomed range)\n    @Input() minAggregationDate?: Date;\n    @Input() maxAggregationDate?: Date;\n    \n    @Input() zoomable = true;\n    @Input() minZoomDays = 1; // Max 1 day scale\n    @Input() maxZoomDays = 365 * 100; // Max 100 years scale\n\n    @Input() width = 600;\n    @Input() height = 200;\n    @Input() margin = {top: 15, bottom: 20, left: 40, right: 15};\n\n    @Input() curveType = \"curveMonotoneX\";\n\n    @Input() showTooltip = true;\n    @Input() theme: \"light\" | \"dark\" = \"light\";\n\n    @Input() showLegend = false;\n    @Input() legendStyles?: {[key:string]: any} = {'justify-content' : 'center'};\n    @Input() legendEvents?: TimelineEventType[];\n    @Input() legendOrientation?: \"row\"|\"column\" = \"row\";\n    @Input() legendYOffset?: number = 3;\n\n    @Output() eventClicked = new EventEmitter();\n\n    // List of observables (one per timeseries / event type)\n    timeseries$: ReplaySubject[];\n    events$: ReplaySubject[];\n\n    // Combination (combineLastest) of the timeline observables\n    mergedTimeseries$: Observable;\n    mergedEvents$: Observable;\n\n    // Current timeline selection\n    selection?: [Date, Date];\n\n    // Current range (undefined if no zoom / auto-scaling)\n    currentRange?: [Date, Date];\n\n    // Formating method for search queries\n    formatDayRequest = d3.timeFormat(\"%Y-%m-%d\");\n\n    // Actions\n    clearFilters: Action;\n\n    constructor(\n        public facetService: FacetService,\n        public searchService: SearchService,\n        public appService: AppService,\n        public selectionService: SelectionService,\n        public exprBuilder: ExprBuilder,\n        public cdRef: ChangeDetectorRef,\n        public audit: AuditWebService\n    ){\n        super();\n\n        // Update the events when the selection of records changes\n        this.selectionService.events.subscribe(event => {\n            const i = this.events.findIndex(e => (e as TimelineRecords).field);\n            if(i !== -1) {\n                this.events$[i].next(this.getRecordsAsEvents(this.events[i] as TimelineRecords));\n            }\n        });\n        \n        // Clear the current filters\n        this.clearFilters = new Action({\n            icon: \"far fa-minus-square\",\n            title: \"msg#facet.clearSelects\",\n            action: () => {\n                this.selection = undefined;\n                this.searchService.query.removeSelect(this.name);\n                this.searchService.search();\n            }\n        });\n\n    }\n\n    getMinDate(): Date | undefined {\n        return this.currentRange? this.currentRange[0] : this.minDate;\n    }\n\n    getMaxDate(): Date | undefined {\n        return this.currentRange? this.currentRange[1] : this.maxDate;\n    }\n\n    override get actions(): Action[] {\n        const actions: Action[] = [];\n        if(this.facetService.hasFiltered(this.name)){\n            actions.push(this.clearFilters);\n        }\n        return actions;\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n\n        // Skip simple changes (width, height, etc.) that don't require modifying the timeline data\n        if(!changes.timeseries && !changes.events && !changes.results) {\n            return;\n        }\n\n        // Retrieve the current active selection for this timeline (if any)\n        const select = this.searchService.query.findSelect(this.name);\n\n        // Update the selection if it is not already set (which is the case on a page refresh)\n        if(select && !this.selection) {\n            let parsedexpr = this.appService.parseExpr(select.expression) as Expr;\n            if(!Utils.isString(parsedexpr)){\n                while(!parsedexpr.isLeaf){ // The select might over multiple fields (modified between [...] AND created between [...])\n                    parsedexpr = parsedexpr.operands[0];\n                }\n                if(parsedexpr.values){\n                    this.selection = [new Date(parsedexpr.values[0]), new Date(parsedexpr.values[1])];\n                    // Guess a current range based on the selection\n                    if(!this.currentRange) {\n                        const interval = this.selection[1].getTime() - this.selection[0].getTime();\n                        this.currentRange = [ // Selected Interval +10% on each side\n                            new Date(this.selection[0].getTime()-interval*0.1),\n                            new Date(this.selection[1].getTime()+interval*0.1)\n                        ];\n                    }\n                }\n            }\n        }\n        // If no active selection we remove the selection from the timeline, along with the current zoomed range\n        else if(!select) {\n            this.selection = undefined; // If no select, it was possibly removed by the user, we need to update our selection\n            this.currentRange = undefined; // current range is set by zoom events, we want to reset it only if there are no select (ie. no user interaction)\n        }\n\n        // Initialize timeseries\n        if(!this.timeseries$ || changes[\"timeseries\"]) {\n            // Create one observable per timeline\n            this.timeseries$ = this.timeseries.map(_ => new ReplaySubject(1));\n            this.mergedTimeseries$ = combineLatest(this.timeseries$);\n        }\n\n        this.updateTimeseries();\n\n        // Initialize events\n        if(!this.events$ || changes[\"events\"]) {\n            this.events$ = this.events.map(_ => new ReplaySubject(1));\n            this.mergedEvents$ = combineLatest(this.events$).pipe(\n                map(events => ([] as TimelineEvent[]).concat(...events))\n            );\n        }\n\n        this.updateEvents();\n        \n    }\n\n    /**\n     * For each timeseries configuration given as an input,\n     * update the data via the list of observables (timelines$)\n     */\n    updateTimeseries() {\n        this.timeseries.forEach((config, i) => {\n\n            const subject = this.timeseries$[i];\n\n            if((config as TimelineSeries).dates !== undefined) {\n                subject.next(config as TimelineSeries);\n            }\n\n            else {\n                let agg = config as TimelineAggregation;\n                if(agg.aggregation === undefined){\n                    \n                    config = config as TimelineCombinedAggregations;\n                    // We want to set the default scale if it hasn't been set before\n                    // or if no zoom/selection has been made (so current scale may not be adapted to the new results)\n                    if(!this.currentRange || !config.current){\n                        config.current = config.default;\n                    }\n\n                    agg = config.current;\n                }\n                \n                const range: [Date, Date] | undefined = !!this.minAggregationDate && !!this.maxAggregationDate ?\n                    [this.minAggregationDate, this.maxAggregationDate] : undefined;\n\n                this.getTimeseries(agg, range).subscribe({\n                    next: d => subject.next(d),\n                    error: err => subject.error(err)\n                });\n            }\n\n        });\n    }\n\n    /**\n     * For each event configuration given as an input, \n     * update the data via the list of observables (events$)\n     */\n    updateEvents() {\n        this.events.forEach((config, i) => {\n            const subject = this.events$[i];\n\n            if((config as TimelineRecords).field) {\n                subject.next(this.getRecordsAsEvents(config as TimelineRecords));\n            }\n            else if((config as TimelineEventAggregation).aggregation){\n                this.getEventAggregation(config as TimelineEventAggregation).subscribe({\n                    next: t => subject.next(t),\n                    error: err => subject.error(err)\n                });\n            }\n            else if(Array.isArray(config)){\n                subject.next(config as TimelineEvent[]);\n            }\n        });\n    }\n\n    /**\n     * Get a timeseries aggregation via the getAggregation method.\n     * @param config \n     * @param subject \n     * @param range \n     */\n    getTimeseries(config: TimelineAggregation, range?: [Date, Date]): Observable {\n        return this.getAggregation(config.aggregation, range).pipe(\n            map(d => BsFacetTimelineComponent.createTimeseries(config, d.aggregation, d.ccaggregation, range))\n        );\n    }\n\n    /**\n     * Get an aggregation of events via the getAggregation method\n     * @param config \n     * @param subject \n     */\n    getEventAggregation(config: TimelineEventAggregation): Observable {\n        return this.getAggregation(config.aggregation).pipe(\n            map(d => BsFacetTimelineComponent.createAggregationEvents(config, d.aggregation, d.ccaggregation))\n        );\n    }\n\n    /**\n     * Returns the list of records from the results as a list of TimelineEvent when they have a\n     * modified date. The size and styles of the events are determined from the given configuration (TimelineRecords)\n     * @param config \n     */\n    getRecordsAsEvents(config: TimelineRecords): TimelineEvent[] {\n        if(this.results) {\n            return this.results.records\n                .filter(r => !!Utils.toDate(r[config.field]))\n                .map(r => {\n                    return {\n                        id: r.id,\n                        date: Utils.toDate(r[config.field])!,\n                        size: !config.size? 6 : typeof config.size === 'function'? config.size(r, r.$selected) : config.size,\n                        styles: !config.styles? BsFacetTimelineComponent.defaultRecordStyle(r.$selected) :\n                                typeof config.styles === 'function'? config.styles(r, r.$selected) : \n                                config.styles,\n                        display: config.display? config.display(r) : r.title,\n                        // Custom property for click action\n                        record: r\n                    }\n                });\n        }\n        return [];\n    }\n\n\n    /**\n     * returns an aggregation and its configuration either directly from the facet service of\n     * by fetching it from the server.\n     * @param aggregationName \n     * @param range \n     */\n    getAggregation(aggregationName: string, range?: [Date, Date]): Observable {\n        \n        const ccaggregation = this.appService.getCCAggregation(aggregationName);\n        const aggregation = this.facetService.getAggregation(aggregationName, this.results);\n        \n        if(aggregation && ccaggregation) {\n            return of({aggregation: aggregation, ccaggregation: ccaggregation});\n        }\n\n        else if(ccaggregation) {\n            return this.fetchAggregation(aggregationName, ccaggregation, range).pipe(\n                map(agg => {return {aggregation: agg, ccaggregation: ccaggregation} })\n            );\n        }\n\n        else {\n            throw new Error(`Aggregation ${aggregationName} does not exist in the Query web service`);\n        }\n    }\n\n    /**\n     * Get an aggregation from the server, filtering by range if provided\n     * @param aggregation \n     * @param ccaggregation \n     * @param range \n     */\n    fetchAggregation(aggregation: string, ccaggregation: CCAggregation, range?: [Date, Date]): Observable {\n        const query = Utils.copy(this.searchService.query);\n        query.action = \"aggregate\";\n        query.aggregations = [aggregation];\n\n        if(range){\n            query.addSelect(`${ccaggregation.column}:[${this.formatDayRequest(range[0])}..${this.formatDayRequest(range[1])}]`);\n        }\n\n        return this.searchService.getResults(query, undefined, {searchInactive: true}).pipe(\n            map(results => results.aggregations[0])\n        );\n    }\n\n    /**\n     * Given a combined aggregation configuration and a range, this method searches for the most \n     * adapted aggregation scale (years, months, weeks or days) and updates the data if necessary.\n     * @param config \n     * @param range \n     * @param iTimeseries \n     */\n    updateCombinedAggregation(config: TimelineCombinedAggregations, range: [Date, Date], timeseries$: ReplaySubject) {\n        const nmonths = d3.timeMonth.count(range[0], range[1]);\n\n        if(!config.maxNMonths || config.maxNMonths.length !== config.aggregations.length) {\n            console.error(config);\n            throw new Error(\"maxNMonths and aggregations must have the same number of items\");\n        }\n\n        // Find the aggregation with min maxNMonths with maxNMonths >= nmonths\n        let jMin;\n        config.maxNMonths.forEach((maxNMonths, j) => {\n            if(maxNMonths >= nmonths && (jMin === undefined || maxNMonths  this.currentRange[1])) {\n\n            config.current = bestAggregation;\n            this.getTimeseries(bestAggregation, range).subscribe({\n                next: d => timeseries$.next(d),\n                error: err => timeseries$.error(err)\n            });\n        }\n\n    }\n\n\n    // Interaction callbacks\n\n    /**\n     * On selection is triggered when the user selects a range of dates on the timeline.\n     * This has the effect of updating the query.select (either remove it or add/replace it)\n     * and it updates the search.\n     * @param selection \n     */\n    onSelectionChange(selection: [Date, Date] | undefined) {\n        this.selection = selection;\n        if(selection) {\n            const from = this.formatDayRequest(selection[0]);\n            const to = this.formatDayRequest(selection[1]);\n\n            const exprs: string[] = [];\n            this.searchService.query.removeSelect(this.name);\n\n            this.timeseries.forEach((config) => {\n                    \n                if((config as TimelineAggregation).aggregation !== undefined \n                || (config as TimelineCombinedAggregations).default !== undefined) {\n\n                    const aggregation = (config as TimelineAggregation).aggregation || (config as TimelineCombinedAggregations).default.aggregation;\n                    const ccaggregation = this.appService.getCCAggregation(aggregation);\n                    if(ccaggregation) {\n                        exprs.push(this.exprBuilder.makeRangeExpr(ccaggregation.column, from, to));\n                    }\n                }\n\n            });\n\n            if(exprs.length > 0) {\n                const expr = this.exprBuilder.concatOrExpr(exprs);\n                this.searchService.query.addSelect(expr, this.name);\n                this.searchService.search(undefined, {type:AuditEventType.Search_Timeline_Usage, detail: { from, to }});\n            }            \n        }\n\n        else if(this.searchService.query.findSelect(this.name)) {\n            this.searchService.query.removeSelect(this.name);\n            this.searchService.search();\n        }\n    }\n\n    /**\n     * On range is triggered when the user zooms in our out on the timeline,\n     * which triggers a dynamic update of the combined aggregation timelines.\n     * @param range \n     */\n    onRangeChange(range: [Date, Date]) {\n\n        this.timeseries.forEach((config, i) => {\n            if((config as TimelineCombinedAggregations).aggregations !== undefined) {\n                this.updateCombinedAggregation(config as TimelineCombinedAggregations, range, this.timeseries$[i]);\n            }\n        });\n\n        // Note: updateCombinedAggregation() compares currentRange and range\n        // So this update must be kept after the forEach\n        this.currentRange = range;\n    }\n\n    /**\n     * When an event is clicked, the event is propagated to the parent, and the tooltip is closed\n     * @param event \n     * @param closeTooltip \n     */\n    onEventClicked(event: TimelineEvent, closeTooltip: () => void) {\n        this.eventClicked.next(event);\n        closeTooltip();\n        return false;\n    }\n\n\n    // Static utility methods\n    \n    \n    /**\n     * Create a time series object from its config, data (aggregation) and configuration (ccaggregation)\n     * @param config \n     * @param aggregation \n     * @param ccaggregation \n     */\n    static createTimeseries(config: TimelineAggregation, aggregation: Aggregation, ccaggregation: CCAggregation, range?: [Date, Date]): TimelineSeries {\n        return {\n            ...config,\n            name: config.name || aggregation.name,\n            dates: this.createDatapoints(aggregation.items, ccaggregation?.mask, range),\n        }\n    }\n\n    /**\n     * Create a list of events from its config, data (aggregation) and configuration (ccaggregation)\n     * @param config \n     * @param aggregation \n     * @param ccaggregation \n     */\n    static createAggregationEvents(config: TimelineEventAggregation, aggregation: Aggregation, ccaggregation: CCAggregation): TimelineEvent[] {\n        return !aggregation.items? [] : aggregation.items.map(item => {\n            return {\n                id: config.getDate(item).toUTCString()+\"|\"+config.getDisplay(item),\n                date: config.getDate(item),\n                size: !config.size? 6 : typeof config.size === 'function'? config.size(item) : config.size,\n                styles: !config.styles? undefined :\n                        typeof config.styles === 'function'? config.styles(item) : \n                        config.styles,                \n                display: config.getDisplay(item),\n\n                // Custom params for click action\n                item: item,\n                aggregation: aggregation,\n                ccaggregation: ccaggregation\n            }\n        });\n    }\n\n    /**\n     * This methods transforms a raw list of aggregation items into\n     * a time series completed with zeros, following the below scheme:\n     * Aggregation:  [    # #         # # #   #     # #       # # #    ]\n     * Series:       [  0 # # 0     0 # # # 0 # 0 0 # # 0   0 # # # 0  ]\n     * @param items \n     * @param resolution \n     */\n    static createDatapoints(items: AggregationItem[] | undefined, resolution: string, range?: [Date, Date]): TimelineDate[] {\n\n        if(!items) {\n            return [];\n        }\n\n        const timeInterval = this.getD3TimeInterval(resolution);\n        \n        const series: TimelineDate[] = [];\n\n        const _items = items\n            .map(item => {\n                if(!!item.value && !(item.value instanceof Date)){\n                    const val = item.value.toString();\n                    item.value = moment(val.length  undefined; // So it gets filtered out\n                    }\n                }\n                return item;\n            })\n            .filter(item => !!item.value && (!range || ((item.value as Date) >= range[0] && (item.value as Date)  {\n            const date = item.value as Date;\n            \n            if(i === 0 || timeInterval.offset(series[series.length-1].date, 1)  item.date = this.shiftDate(item.date, resolution));\n\n        return series;\n    }\n\n    \n    /**\n     * Shift the date to the middle of their time bracket (2020 = middle of the year, April = middle of the month, etc.)\n     * @param date \n     * @param resolution \n     */\n    static shiftDate(date: Date, resolution: string): Date {\n        switch(resolution){\n            case \"YYYY-MM-DD\": return d3.timeHour.offset(date, 12);\n            case \"YYYY-WW\": return d3.timeHour.offset(date, 84); // 3*24 + 12\n            case \"YYYY-MM\": return d3.timeDay.offset(date, 15);\n            case \"YYYY\": return d3.timeMonth.offset(date, 6);\n        }\n        return date;\n    }\n\n\n    static getD3TimeInterval(resolution: string): d3.CountableTimeInterval {\n        switch(resolution){\n            case \"YYYY-MM-DD\": return d3.timeDay;\n            case \"YYYY-WW\": return d3.timeWeek;\n            case \"YYYY-MM\": return d3.timeMonth;\n            case \"YYYY\": return d3.timeYear;\n        }\n        return d3.timeDay;\n    }\n\n    static defaultRecordStyle(selected: boolean): {[key: string]: any} {\n        return {\n            'fill': selected? 'red' : 'green',\n            'stroke': selected? 'red' : undefined,\n            'stroke-width': selected? '2px' : undefined\n        };\n    }\n}\n    \n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/TimelineCombinedAggregations.html":{"url":"interfaces/TimelineCombinedAggregations.html","title":"interface - TimelineCombinedAggregations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  TimelineCombinedAggregations\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            timeline/bootstrap/facet-timeline.component.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            aggregations\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            current\n                                        \n                                \n                                \n                                        \n                                            default\n                                        \n                                \n                                \n                                        \n                                            maxNMonths\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        aggregations\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        aggregations:         TimelineAggregation[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         TimelineAggregation[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        current\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        current:         TimelineAggregation\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         TimelineAggregation\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        default\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        default:         TimelineAggregation\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         TimelineAggregation\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        maxNMonths\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        maxNMonths:     number[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     number[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Component, Input, OnChanges, ChangeDetectorRef, SimpleChanges, Output, EventEmitter } from '@angular/core';\nimport { Observable, of, combineLatest, ReplaySubject } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { Results, AggregationItem, Aggregation, CCAggregation, Record, AuditWebService, AuditEventType } from '@sinequa/core/web-services';\nimport { AppService, Expr, ExprBuilder } from '@sinequa/core/app-utils';\nimport { Utils } from '@sinequa/core/base';\nimport { AbstractFacet, FacetService } from '@sinequa/components/facet';\nimport { SearchService } from '@sinequa/components/search';\nimport { SelectionService } from '@sinequa/components/selection';\nimport { Action } from '@sinequa/components/action';\nimport { TimelineSeries, TimelineDate, TimelineEvent } from './timeline.component';\nimport moment from 'moment';\nimport * as d3 from 'd3';\nimport { TimelineEventType } from './timeline-legend.component';\n\nexport interface TimelineAggregation {\n    name?: string;\n    aggregation: string;\n    primary: boolean;\n    areaStyles?: {[key: string]: any};\n    lineStyles?: {[key: string]: any};\n    showDatapoints?: boolean;\n}\n\nexport interface TimelineCombinedAggregations {\n    aggregations: TimelineAggregation[];\n    maxNMonths: number[]; // Maximum number of months for which to use this aggregation\n    default: TimelineAggregation; // Aggregation to use by default \n    current?: TimelineAggregation; // (this field is overriden by the component when switching aggregation)\n}\n\nexport interface TimelineRecords {\n    field: string;\n    size?: number | ((record: Record, selected: boolean) => number);\n    styles?: {[key: string]: any} | ((record: Record, selected: boolean) => {[key: string]: any});\n    display?: (record: Record) => string;\n}\n\nexport interface TimelineEventAggregation {\n    aggregation: string;\n    getDate: ((item: AggregationItem) => Date);\n    getDisplay: ((item: AggregationItem) => string);\n    size?: number | ((item: AggregationItem) => number);\n    styles?: {[key: string]: any} | ((item: AggregationItem) => {[key: string]: any});\n}\n\nexport type TimelineData = TimelineSeries | TimelineAggregation | TimelineCombinedAggregations;\n\nexport type TimelineEventData = TimelineEvent[] | TimelineRecords | TimelineEventAggregation;\n\n@Component({\n    selector: 'sq-facet-timeline',\n    templateUrl: './facet-timeline.component.html',\n    styleUrls: ['./facet-timeline.component.scss']\n})\nexport class BsFacetTimelineComponent extends AbstractFacet implements OnChanges {\n    @Input() name = 'Timeline';\n    @Input() results: Results;\n    \n    // By default, we show the standard Timeline aggregation and the list of current records\n    @Input() timeseries: TimelineData[] = [{aggregation: 'Timeline', primary: true}];\n    @Input() events: TimelineEventData[] = [{field: 'modified'}];\n\n    // Initial scale (prior to any zoom)\n    @Input() minDate?: Date;\n    @Input() maxDate?: Date;\n    // Date range to filter aggregations (ignored when combined aggregations are recomputed based on zoomed range)\n    @Input() minAggregationDate?: Date;\n    @Input() maxAggregationDate?: Date;\n    \n    @Input() zoomable = true;\n    @Input() minZoomDays = 1; // Max 1 day scale\n    @Input() maxZoomDays = 365 * 100; // Max 100 years scale\n\n    @Input() width = 600;\n    @Input() height = 200;\n    @Input() margin = {top: 15, bottom: 20, left: 40, right: 15};\n\n    @Input() curveType = \"curveMonotoneX\";\n\n    @Input() showTooltip = true;\n    @Input() theme: \"light\" | \"dark\" = \"light\";\n\n    @Input() showLegend = false;\n    @Input() legendStyles?: {[key:string]: any} = {'justify-content' : 'center'};\n    @Input() legendEvents?: TimelineEventType[];\n    @Input() legendOrientation?: \"row\"|\"column\" = \"row\";\n    @Input() legendYOffset?: number = 3;\n\n    @Output() eventClicked = new EventEmitter();\n\n    // List of observables (one per timeseries / event type)\n    timeseries$: ReplaySubject[];\n    events$: ReplaySubject[];\n\n    // Combination (combineLastest) of the timeline observables\n    mergedTimeseries$: Observable;\n    mergedEvents$: Observable;\n\n    // Current timeline selection\n    selection?: [Date, Date];\n\n    // Current range (undefined if no zoom / auto-scaling)\n    currentRange?: [Date, Date];\n\n    // Formating method for search queries\n    formatDayRequest = d3.timeFormat(\"%Y-%m-%d\");\n\n    // Actions\n    clearFilters: Action;\n\n    constructor(\n        public facetService: FacetService,\n        public searchService: SearchService,\n        public appService: AppService,\n        public selectionService: SelectionService,\n        public exprBuilder: ExprBuilder,\n        public cdRef: ChangeDetectorRef,\n        public audit: AuditWebService\n    ){\n        super();\n\n        // Update the events when the selection of records changes\n        this.selectionService.events.subscribe(event => {\n            const i = this.events.findIndex(e => (e as TimelineRecords).field);\n            if(i !== -1) {\n                this.events$[i].next(this.getRecordsAsEvents(this.events[i] as TimelineRecords));\n            }\n        });\n        \n        // Clear the current filters\n        this.clearFilters = new Action({\n            icon: \"far fa-minus-square\",\n            title: \"msg#facet.clearSelects\",\n            action: () => {\n                this.selection = undefined;\n                this.searchService.query.removeSelect(this.name);\n                this.searchService.search();\n            }\n        });\n\n    }\n\n    getMinDate(): Date | undefined {\n        return this.currentRange? this.currentRange[0] : this.minDate;\n    }\n\n    getMaxDate(): Date | undefined {\n        return this.currentRange? this.currentRange[1] : this.maxDate;\n    }\n\n    override get actions(): Action[] {\n        const actions: Action[] = [];\n        if(this.facetService.hasFiltered(this.name)){\n            actions.push(this.clearFilters);\n        }\n        return actions;\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n\n        // Skip simple changes (width, height, etc.) that don't require modifying the timeline data\n        if(!changes.timeseries && !changes.events && !changes.results) {\n            return;\n        }\n\n        // Retrieve the current active selection for this timeline (if any)\n        const select = this.searchService.query.findSelect(this.name);\n\n        // Update the selection if it is not already set (which is the case on a page refresh)\n        if(select && !this.selection) {\n            let parsedexpr = this.appService.parseExpr(select.expression) as Expr;\n            if(!Utils.isString(parsedexpr)){\n                while(!parsedexpr.isLeaf){ // The select might over multiple fields (modified between [...] AND created between [...])\n                    parsedexpr = parsedexpr.operands[0];\n                }\n                if(parsedexpr.values){\n                    this.selection = [new Date(parsedexpr.values[0]), new Date(parsedexpr.values[1])];\n                    // Guess a current range based on the selection\n                    if(!this.currentRange) {\n                        const interval = this.selection[1].getTime() - this.selection[0].getTime();\n                        this.currentRange = [ // Selected Interval +10% on each side\n                            new Date(this.selection[0].getTime()-interval*0.1),\n                            new Date(this.selection[1].getTime()+interval*0.1)\n                        ];\n                    }\n                }\n            }\n        }\n        // If no active selection we remove the selection from the timeline, along with the current zoomed range\n        else if(!select) {\n            this.selection = undefined; // If no select, it was possibly removed by the user, we need to update our selection\n            this.currentRange = undefined; // current range is set by zoom events, we want to reset it only if there are no select (ie. no user interaction)\n        }\n\n        // Initialize timeseries\n        if(!this.timeseries$ || changes[\"timeseries\"]) {\n            // Create one observable per timeline\n            this.timeseries$ = this.timeseries.map(_ => new ReplaySubject(1));\n            this.mergedTimeseries$ = combineLatest(this.timeseries$);\n        }\n\n        this.updateTimeseries();\n\n        // Initialize events\n        if(!this.events$ || changes[\"events\"]) {\n            this.events$ = this.events.map(_ => new ReplaySubject(1));\n            this.mergedEvents$ = combineLatest(this.events$).pipe(\n                map(events => ([] as TimelineEvent[]).concat(...events))\n            );\n        }\n\n        this.updateEvents();\n        \n    }\n\n    /**\n     * For each timeseries configuration given as an input,\n     * update the data via the list of observables (timelines$)\n     */\n    updateTimeseries() {\n        this.timeseries.forEach((config, i) => {\n\n            const subject = this.timeseries$[i];\n\n            if((config as TimelineSeries).dates !== undefined) {\n                subject.next(config as TimelineSeries);\n            }\n\n            else {\n                let agg = config as TimelineAggregation;\n                if(agg.aggregation === undefined){\n                    \n                    config = config as TimelineCombinedAggregations;\n                    // We want to set the default scale if it hasn't been set before\n                    // or if no zoom/selection has been made (so current scale may not be adapted to the new results)\n                    if(!this.currentRange || !config.current){\n                        config.current = config.default;\n                    }\n\n                    agg = config.current;\n                }\n                \n                const range: [Date, Date] | undefined = !!this.minAggregationDate && !!this.maxAggregationDate ?\n                    [this.minAggregationDate, this.maxAggregationDate] : undefined;\n\n                this.getTimeseries(agg, range).subscribe({\n                    next: d => subject.next(d),\n                    error: err => subject.error(err)\n                });\n            }\n\n        });\n    }\n\n    /**\n     * For each event configuration given as an input, \n     * update the data via the list of observables (events$)\n     */\n    updateEvents() {\n        this.events.forEach((config, i) => {\n            const subject = this.events$[i];\n\n            if((config as TimelineRecords).field) {\n                subject.next(this.getRecordsAsEvents(config as TimelineRecords));\n            }\n            else if((config as TimelineEventAggregation).aggregation){\n                this.getEventAggregation(config as TimelineEventAggregation).subscribe({\n                    next: t => subject.next(t),\n                    error: err => subject.error(err)\n                });\n            }\n            else if(Array.isArray(config)){\n                subject.next(config as TimelineEvent[]);\n            }\n        });\n    }\n\n    /**\n     * Get a timeseries aggregation via the getAggregation method.\n     * @param config \n     * @param subject \n     * @param range \n     */\n    getTimeseries(config: TimelineAggregation, range?: [Date, Date]): Observable {\n        return this.getAggregation(config.aggregation, range).pipe(\n            map(d => BsFacetTimelineComponent.createTimeseries(config, d.aggregation, d.ccaggregation, range))\n        );\n    }\n\n    /**\n     * Get an aggregation of events via the getAggregation method\n     * @param config \n     * @param subject \n     */\n    getEventAggregation(config: TimelineEventAggregation): Observable {\n        return this.getAggregation(config.aggregation).pipe(\n            map(d => BsFacetTimelineComponent.createAggregationEvents(config, d.aggregation, d.ccaggregation))\n        );\n    }\n\n    /**\n     * Returns the list of records from the results as a list of TimelineEvent when they have a\n     * modified date. The size and styles of the events are determined from the given configuration (TimelineRecords)\n     * @param config \n     */\n    getRecordsAsEvents(config: TimelineRecords): TimelineEvent[] {\n        if(this.results) {\n            return this.results.records\n                .filter(r => !!Utils.toDate(r[config.field]))\n                .map(r => {\n                    return {\n                        id: r.id,\n                        date: Utils.toDate(r[config.field])!,\n                        size: !config.size? 6 : typeof config.size === 'function'? config.size(r, r.$selected) : config.size,\n                        styles: !config.styles? BsFacetTimelineComponent.defaultRecordStyle(r.$selected) :\n                                typeof config.styles === 'function'? config.styles(r, r.$selected) : \n                                config.styles,\n                        display: config.display? config.display(r) : r.title,\n                        // Custom property for click action\n                        record: r\n                    }\n                });\n        }\n        return [];\n    }\n\n\n    /**\n     * returns an aggregation and its configuration either directly from the facet service of\n     * by fetching it from the server.\n     * @param aggregationName \n     * @param range \n     */\n    getAggregation(aggregationName: string, range?: [Date, Date]): Observable {\n        \n        const ccaggregation = this.appService.getCCAggregation(aggregationName);\n        const aggregation = this.facetService.getAggregation(aggregationName, this.results);\n        \n        if(aggregation && ccaggregation) {\n            return of({aggregation: aggregation, ccaggregation: ccaggregation});\n        }\n\n        else if(ccaggregation) {\n            return this.fetchAggregation(aggregationName, ccaggregation, range).pipe(\n                map(agg => {return {aggregation: agg, ccaggregation: ccaggregation} })\n            );\n        }\n\n        else {\n            throw new Error(`Aggregation ${aggregationName} does not exist in the Query web service`);\n        }\n    }\n\n    /**\n     * Get an aggregation from the server, filtering by range if provided\n     * @param aggregation \n     * @param ccaggregation \n     * @param range \n     */\n    fetchAggregation(aggregation: string, ccaggregation: CCAggregation, range?: [Date, Date]): Observable {\n        const query = Utils.copy(this.searchService.query);\n        query.action = \"aggregate\";\n        query.aggregations = [aggregation];\n\n        if(range){\n            query.addSelect(`${ccaggregation.column}:[${this.formatDayRequest(range[0])}..${this.formatDayRequest(range[1])}]`);\n        }\n\n        return this.searchService.getResults(query, undefined, {searchInactive: true}).pipe(\n            map(results => results.aggregations[0])\n        );\n    }\n\n    /**\n     * Given a combined aggregation configuration and a range, this method searches for the most \n     * adapted aggregation scale (years, months, weeks or days) and updates the data if necessary.\n     * @param config \n     * @param range \n     * @param iTimeseries \n     */\n    updateCombinedAggregation(config: TimelineCombinedAggregations, range: [Date, Date], timeseries$: ReplaySubject) {\n        const nmonths = d3.timeMonth.count(range[0], range[1]);\n\n        if(!config.maxNMonths || config.maxNMonths.length !== config.aggregations.length) {\n            console.error(config);\n            throw new Error(\"maxNMonths and aggregations must have the same number of items\");\n        }\n\n        // Find the aggregation with min maxNMonths with maxNMonths >= nmonths\n        let jMin;\n        config.maxNMonths.forEach((maxNMonths, j) => {\n            if(maxNMonths >= nmonths && (jMin === undefined || maxNMonths  this.currentRange[1])) {\n\n            config.current = bestAggregation;\n            this.getTimeseries(bestAggregation, range).subscribe({\n                next: d => timeseries$.next(d),\n                error: err => timeseries$.error(err)\n            });\n        }\n\n    }\n\n\n    // Interaction callbacks\n\n    /**\n     * On selection is triggered when the user selects a range of dates on the timeline.\n     * This has the effect of updating the query.select (either remove it or add/replace it)\n     * and it updates the search.\n     * @param selection \n     */\n    onSelectionChange(selection: [Date, Date] | undefined) {\n        this.selection = selection;\n        if(selection) {\n            const from = this.formatDayRequest(selection[0]);\n            const to = this.formatDayRequest(selection[1]);\n\n            const exprs: string[] = [];\n            this.searchService.query.removeSelect(this.name);\n\n            this.timeseries.forEach((config) => {\n                    \n                if((config as TimelineAggregation).aggregation !== undefined \n                || (config as TimelineCombinedAggregations).default !== undefined) {\n\n                    const aggregation = (config as TimelineAggregation).aggregation || (config as TimelineCombinedAggregations).default.aggregation;\n                    const ccaggregation = this.appService.getCCAggregation(aggregation);\n                    if(ccaggregation) {\n                        exprs.push(this.exprBuilder.makeRangeExpr(ccaggregation.column, from, to));\n                    }\n                }\n\n            });\n\n            if(exprs.length > 0) {\n                const expr = this.exprBuilder.concatOrExpr(exprs);\n                this.searchService.query.addSelect(expr, this.name);\n                this.searchService.search(undefined, {type:AuditEventType.Search_Timeline_Usage, detail: { from, to }});\n            }            \n        }\n\n        else if(this.searchService.query.findSelect(this.name)) {\n            this.searchService.query.removeSelect(this.name);\n            this.searchService.search();\n        }\n    }\n\n    /**\n     * On range is triggered when the user zooms in our out on the timeline,\n     * which triggers a dynamic update of the combined aggregation timelines.\n     * @param range \n     */\n    onRangeChange(range: [Date, Date]) {\n\n        this.timeseries.forEach((config, i) => {\n            if((config as TimelineCombinedAggregations).aggregations !== undefined) {\n                this.updateCombinedAggregation(config as TimelineCombinedAggregations, range, this.timeseries$[i]);\n            }\n        });\n\n        // Note: updateCombinedAggregation() compares currentRange and range\n        // So this update must be kept after the forEach\n        this.currentRange = range;\n    }\n\n    /**\n     * When an event is clicked, the event is propagated to the parent, and the tooltip is closed\n     * @param event \n     * @param closeTooltip \n     */\n    onEventClicked(event: TimelineEvent, closeTooltip: () => void) {\n        this.eventClicked.next(event);\n        closeTooltip();\n        return false;\n    }\n\n\n    // Static utility methods\n    \n    \n    /**\n     * Create a time series object from its config, data (aggregation) and configuration (ccaggregation)\n     * @param config \n     * @param aggregation \n     * @param ccaggregation \n     */\n    static createTimeseries(config: TimelineAggregation, aggregation: Aggregation, ccaggregation: CCAggregation, range?: [Date, Date]): TimelineSeries {\n        return {\n            ...config,\n            name: config.name || aggregation.name,\n            dates: this.createDatapoints(aggregation.items, ccaggregation?.mask, range),\n        }\n    }\n\n    /**\n     * Create a list of events from its config, data (aggregation) and configuration (ccaggregation)\n     * @param config \n     * @param aggregation \n     * @param ccaggregation \n     */\n    static createAggregationEvents(config: TimelineEventAggregation, aggregation: Aggregation, ccaggregation: CCAggregation): TimelineEvent[] {\n        return !aggregation.items? [] : aggregation.items.map(item => {\n            return {\n                id: config.getDate(item).toUTCString()+\"|\"+config.getDisplay(item),\n                date: config.getDate(item),\n                size: !config.size? 6 : typeof config.size === 'function'? config.size(item) : config.size,\n                styles: !config.styles? undefined :\n                        typeof config.styles === 'function'? config.styles(item) : \n                        config.styles,                \n                display: config.getDisplay(item),\n\n                // Custom params for click action\n                item: item,\n                aggregation: aggregation,\n                ccaggregation: ccaggregation\n            }\n        });\n    }\n\n    /**\n     * This methods transforms a raw list of aggregation items into\n     * a time series completed with zeros, following the below scheme:\n     * Aggregation:  [    # #         # # #   #     # #       # # #    ]\n     * Series:       [  0 # # 0     0 # # # 0 # 0 0 # # 0   0 # # # 0  ]\n     * @param items \n     * @param resolution \n     */\n    static createDatapoints(items: AggregationItem[] | undefined, resolution: string, range?: [Date, Date]): TimelineDate[] {\n\n        if(!items) {\n            return [];\n        }\n\n        const timeInterval = this.getD3TimeInterval(resolution);\n        \n        const series: TimelineDate[] = [];\n\n        const _items = items\n            .map(item => {\n                if(!!item.value && !(item.value instanceof Date)){\n                    const val = item.value.toString();\n                    item.value = moment(val.length  undefined; // So it gets filtered out\n                    }\n                }\n                return item;\n            })\n            .filter(item => !!item.value && (!range || ((item.value as Date) >= range[0] && (item.value as Date)  {\n            const date = item.value as Date;\n            \n            if(i === 0 || timeInterval.offset(series[series.length-1].date, 1)  item.date = this.shiftDate(item.date, resolution));\n\n        return series;\n    }\n\n    \n    /**\n     * Shift the date to the middle of their time bracket (2020 = middle of the year, April = middle of the month, etc.)\n     * @param date \n     * @param resolution \n     */\n    static shiftDate(date: Date, resolution: string): Date {\n        switch(resolution){\n            case \"YYYY-MM-DD\": return d3.timeHour.offset(date, 12);\n            case \"YYYY-WW\": return d3.timeHour.offset(date, 84); // 3*24 + 12\n            case \"YYYY-MM\": return d3.timeDay.offset(date, 15);\n            case \"YYYY\": return d3.timeMonth.offset(date, 6);\n        }\n        return date;\n    }\n\n\n    static getD3TimeInterval(resolution: string): d3.CountableTimeInterval {\n        switch(resolution){\n            case \"YYYY-MM-DD\": return d3.timeDay;\n            case \"YYYY-WW\": return d3.timeWeek;\n            case \"YYYY-MM\": return d3.timeMonth;\n            case \"YYYY\": return d3.timeYear;\n        }\n        return d3.timeDay;\n    }\n\n    static defaultRecordStyle(selected: boolean): {[key: string]: any} {\n        return {\n            'fill': selected? 'red' : 'green',\n            'stroke': selected? 'red' : undefined,\n            'stroke-width': selected? '2px' : undefined\n        };\n    }\n}\n    \n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/TimelineDate.html":{"url":"interfaces/TimelineDate.html","title":"interface - TimelineDate","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  TimelineDate\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            timeline/bootstrap/timeline.component.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            date\n                                        \n                                \n                                \n                                        \n                                            value\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        date\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        date:         Date\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Date\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        value\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        value:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Component, Input, Output, ElementRef, ViewChild, OnChanges, AfterViewInit, EventEmitter, SimpleChanges, OnDestroy, SimpleChange, ContentChild, TemplateRef, ChangeDetectorRef } from '@angular/core';\nimport { Subscription } from 'rxjs';\nimport * as d3 from 'd3';\n\nimport { IntlService } from '@sinequa/core/intl';\nimport {Record} from '@sinequa/core/web-services';\n\n\nexport interface TimelineDate {\n    date: Date;\n    value: number;\n}\n\nexport interface TimelineSeries {\n    name: string;\n    dates: TimelineDate[];\n    primary: boolean;\n    lineStyles?: {[key:string]: any};\n    areaStyles?:  {[key:string]: any};\n    showDatapoints?: boolean;\n}\n\nexport interface TimelineEvent {\n    date: Date;\n    id: string;\n    display: string;\n    size?: number;\n    sizeOpened?: number;\n    styles?: {[key:string]: any};\n    record?: Record;\n}\n\n@Component({\n    selector: 'sq-timeline',\n    templateUrl: './timeline.component.html',\n    styleUrls: ['./timeline.component.scss']\n})\nexport class BsTimelineComponent implements OnChanges, AfterViewInit, OnDestroy {\n\n    @Input() data?: TimelineSeries[];\n    @Input() events?: TimelineEvent[];\n\n    @Input() selection?: [Date|undefined, Date|undefined];\n\n    // Initial scale (prior to any zoom)\n    @Input() minDate?: Date;\n    @Input() maxDate?: Date;\n\n    @Input() zoomable = true;\n    @Input() minZoomDays = 1; // Max 1 day scale\n    @Input() maxZoomDays = 365 * 100; // Max 100 years scale\n\n    @Input() width = 600;\n    @Input() height = 200;\n    @Input() margin = {top: 15, bottom: 20, left: 40, right: 15};\n\n    @Input() curveType = \"curveMonotoneX\";\n\n    @Input() showTooltip = true;\n    @Input() theme: \"light\" | \"dark\" = \"light\";\n\n    @Output() selectionChange = new EventEmitter();\n    @Output() rangeInit = new EventEmitter();\n    @Output() rangeChange = new EventEmitter();\n\n    @ContentChild(\"tooltipTpl\", {static: false}) tooltipTpl: TemplateRef;\n\n    // Data\n    groupedEvents: TimelineEvent[][] = [];\n\n    // Scales\n    x: d3.ScaleTime; // Read/Write\n    xt: d3.ScaleTime; // Transformed X axis due to Zoom\n    y: d3.ScaleLinear; // Read-only / domain updated\n\n    // Shapes\n    area: d3.Area; // Read only\n    line: d3.Line; // Read only\n\n    // Behaviors\n    brushBehavior: d3.BrushBehavior; // Read only\n    zoomBehavior: d3.ZoomBehavior; // Read/Write\n    brushSelection: [number, number] | null;\n    currentSelection?: (Date|undefined)[]; // Read/Write\n\n    // Elements\n    @ViewChild(\"xAxis\") gx: ElementRef;\n    @ViewChild(\"yAxis\") gy: ElementRef;\n    @ViewChild(\"brush\") gbrush: ElementRef;\n\n    // Selections\n    xAxis$: d3.Selection;\n    yAxis$: d3.Selection;\n    brush$: d3.Selection;\n    grips$: d3.Selection;\n\n    // Tooltip\n    tooltipItem: TimelineEvent[] | undefined;\n    tooltipX: number | undefined;\n    tooltipDatapoints?: (TimelineDate|undefined)[];\n    tooltipOrientation: \"left\" | \"right\";\n    tooltipTop: number;\n    tooltipRight: number;\n    tooltipLeft: number;\n    bisectDate = d3.bisector(d => { return d.date; }).left;\n\n    // Misc\n    viewInit: boolean;\n    intlSubscription: Subscription;\n    static counter = 0;\n    instance: number;\n\n    zooming: boolean;\n    brushing: boolean;\n\n    constructor(\n        protected el: ElementRef,\n        protected intlService: IntlService,\n        protected cdRef: ChangeDetectorRef\n    ){\n        // When the locale changes, we rebuild the X scale and axis\n        this.intlSubscription = this.intlService.events.subscribe(e => this.updateXAxis());\n\n        this.instance = BsTimelineComponent.counter++;\n\n    }\n\n    get innerWidth(): number {\n        return this.width - this.margin.left - this.margin.right;\n    }\n\n    get innerHeight(): number {\n        return this.height - this.margin.top - this.margin.bottom;\n    }\n\n    // Note: ngOnChanges is always called once before ngAfterViewInit\n    ngOnChanges(changes: SimpleChanges) {\n\n        if(!this.x) {\n\n            // Scales\n            this.x = d3.scaleUtc()\n                .range([0, this.innerWidth]);\n            this.xt = this.x;\n\n            this.y = d3.scaleLinear()\n                .range([this.innerHeight, 0]);\n\n            // Shapes\n            this.area = d3.area()\n                .curve(d3[this.curveType])\n                .x(d => this.xt(d.date)!)\n                .y0(this.y(0)!)\n                .y1(d => this.y(d.value)!);\n\n            this.line = d3.line()\n                .curve(d3[this.curveType])\n                .x(d => this.xt(d.date)!)\n                .y(d => this.y(d.value)!);\n\n            // Behaviors\n            this.brushBehavior = d3.brushX()\n                .extent([[0, 0], [this.innerWidth, this.innerHeight]])\n                .on(\"start\", () => this.brushing = true)\n                .on('brush', () => this.onBrush())\n                .on('end', () => this.onBrushEnd());\n        }\n\n        // Resize handling\n\n        if(changes[\"height\"]) {\n            this.y.range([this.innerHeight, 0]);\n            this.area.y0(this.y(0)!);\n            this.brushBehavior.extent([[0, 0], [this.innerWidth, this.innerHeight]]);\n            if(this.viewInit) {\n                this.drawYAxis();\n                this.brush$.call(this.brushBehavior);\n                this.grips$.selectAll(\"path\").attr(\"d\", this.drawGrips);\n            }\n        }\n\n        if(changes[\"width\"]) {\n            this.x.range([0, this.innerWidth]);\n            this.brushBehavior.extent([[0, 0], [this.innerWidth, this.innerHeight]]);\n            if(this.viewInit) {\n                this.drawXAxis();\n                if(!changes[\"height\"]) {\n                    this.brush$.call(this.brushBehavior);\n                    this.grips$.selectAll(\"path\").attr(\"d\", this.drawGrips);\n                }\n            }\n        }\n\n        // If the parent changes the selection, we want to update it\n        // If not, we keep the current selection as is\n        // (Important to keep this statement outside of the if bellow since\n        // the change of selection can be combined with a change of data)\n        const selectionChanged = changes[\"selection\"] && this.updateSelection();\n\n        // Only changes in data result in redrawing the chart\n        // (other input, except selection, are expected to be static)\n        if(this.viewInit && changes[\"data\"] && this.checkDataChanges(changes[\"data\"])){\n            this.updateChart();\n        }\n\n        // If the parent changes the selection (even though the data hasn't changed),\n        // we want to update the brush.\n        // If not, we keep the current selection as is.\n        // We can update the brush only if the view is initialized (viewInit).\n        else if(this.viewInit && ((changes[\"selection\"] && selectionChanged) || changes[\"width\"])) {\n            this.updateBrush();\n        }\n\n        if(changes[\"events\"]) {\n            this.updateEvents();\n        }\n\n    }\n\n    // Note: In onAfterViewInit we can access gx, gy, etc., obtained with @ViewChild.\n    // At this point we can initialize all the primitives and call updateChart()\n    ngAfterViewInit() {\n\n        // Get native elements\n        this.xAxis$ = d3.select(this.gx.nativeElement);\n        this.yAxis$ = d3.select(this.gy.nativeElement);\n        this.brush$ = d3.select(this.gbrush.nativeElement);\n\n        this.brush$\n            .call(this.brushBehavior)\n            .on(\"mousemove\", () => this.onMousemove())\n            .on(\"mouseout\", () => this.onMouseout());\n\n        // Add 2 \"grips\" to the brush goup, on each side of the rectangle\n        // Grips are inserted programmatically to appear on top the brush selection\n        this.grips$ = this.brush$.selectAll(\".grip\")\n            .data([{type: \"w\"}, {type: \"e\"}])\n            .enter()\n            .append(\"g\")\n            .attr(\"class\", \"grip\")\n            .attr(\"display\", \"none\");\n\n        this.grips$.append(\"path\")\n            .attr(\"d\", this.drawGrips);\n\n        this.grips$.append(\"text\")\n            .attr(\"class\", \"grip-text\")\n            .attr(\"text-anchor\", d => d.type === \"w\"? 'end' : 'start')\n            .attr(\"x\", d => d.type === \"w\"? -5 : 5)\n            .attr(\"y\", 10);\n\n        this.viewInit = true;\n\n        this.updateChart();\n\n        // This is necessary to prevent \"Expression has changed after check\" errors\n        // caused by calling updateChart inside ngAfterViewInit().\n        // Unfortunately this is necessary because we need the DOM to be rendered in order fill the DOM\n        // (for example gAxis needs to exist so we can draw the axis)\n        this.cdRef.detectChanges();\n    }\n\n    /**\n     * Redraw the graph (needs to be called after ngAfterViewInit so that the DOM elements\n     * are accessible)\n     */\n    updateChart() {\n\n        this.turnoffTooltip();\n\n        if(this.data && this.data.length) {\n\n            // Update scales\n            // Note: does not stop the update process even if the data is invalid/empty\n            this.updateScales(this.data);\n\n            // Update Axes\n            this.updateAxes();\n\n            // Update Zoom\n            this.updateZoom();\n\n            // Update brush\n            this.updateBrush();\n\n        }\n\n    }\n\n\n    /**\n     * Update the x & y scales, based on the input data\n     * @param data\n     */\n    protected updateScales(data: TimelineSeries[]) {\n\n        // Set x and y scales with the primary series (or first one)\n        const primarySeries = data.filter(s => s.primary) || [data[0]];\n        const allPrimaryDates = ([] as TimelineDate[]).concat(...primarySeries.map(s => s.dates));\n\n        const xExtent = d3.extent(allPrimaryDates, d => d.date);\n        const yMax = d3.max(data,\n            s => d3.max(s.dates, d => d.value));\n\n        // Check validity of data\n        if(!xExtent[0] || !xExtent[1] || !yMax) {\n            if (allPrimaryDates.length !== 0) {\n                console.error('Invalid timeseries', primarySeries);\n            }\n            this.x.domain(this.xt.domain());\n            this.xt = this.x;\n            return;\n        }\n\n        // Enforce minimum date\n        if(this.minDate) {\n            xExtent[0] = this.minDate;\n        }\n\n        // Enforce maximum date\n        if(this.maxDate) {\n            xExtent[1] = this.maxDate;\n        }\n\n        // Enforce minimum scale (especially when the timeseries contains a single datapoint)\n        const diff = xExtent[1].getTime() - xExtent[0].getTime();\n        const minDiff = this.minZoomDays * 24 * 60 * 60 * 1000;\n        if(diff  this.rangeInit.next(this.xt.domain()));\n    }\n\n    /**\n     * Update the x and y axes\n     */\n    protected updateAxes(){\n        this.drawXAxis();\n        this.drawYAxis();\n    }\n\n    /**\n     * The events are drawn in the template directly. This method simply\n     * updates the grouping of events (when they are close to each other)\n     */\n    protected updateEvents() {\n        this.groupedEvents = this.groupEvents(5);\n    }\n\n    /**\n     * Update/reset the zoom behavior when new data comes in (and new scales, axes...)\n     */\n    protected updateZoom() {\n\n        if(!this.zoomable) {\n            return;\n        }\n\n        // Reset the previous zoom !\n        if(this.zoomBehavior){\n            this.zoomBehavior.on(\"zoom\", null);\n            this.zoomBehavior.on(\"end\", null);\n            this.zoomBehavior.transform(this.brush$, d3.zoomIdentity);\n        }\n\n        // Compute the minimum and maximum zoom\n        const xDomain = this.x.domain();\n        const scaleExtent = (xDomain[1].getTime() - xDomain[0].getTime()) / 86400000; // current number of days on the scale\n\n        // Create the behavior\n        this.zoomBehavior = d3.zoom()\n            .extent([[0, 0], [this.innerWidth, this.innerHeight]])\n            .scaleExtent([scaleExtent/this.maxZoomDays, scaleExtent/this.minZoomDays])\n            .on(\"zoom\", () => this.onZoom())\n            .on(\"end\", () => this.onZoomEnd());\n\n        // Apply on to the brush element\n        this.brush$\n            .call(this.zoomBehavior)\n            .on(\"mousedown.zoom\", null) // Deactivate mouse event (taken by brush)\n            .on(\"touchstart.zoom\", null)\n            .on(\"touchmove.zoom\", null)\n            .on(\"touchend.zoom\", null);\n\n    }\n\n    /**\n     * Updates the brush (or hides it if no currentSelection),\n     * following a change of x scale.\n     * Number.MIN_VALUE and Number.MAX_VALUE are used to support semi-open intervals\n     */\n    protected updateBrush() {\n        if(this.currentSelection) {\n            const x0 = this.currentSelection[0] ? this.xt(this.currentSelection[0])! : Number.MIN_VALUE;\n            const x1 = this.currentSelection[1] ? this.xt(this.currentSelection[1])! : Number.MAX_VALUE;\n            const selection: [number, number] = [x0,x1];\n            this.brush$.call(this.brushBehavior.move, selection);\n        }\n        else {\n            this.brush$.call(this.brushBehavior.move, null);\n        }\n    }\n\n    /**\n     * This method tests whether the input selection is different from the currentSelection\n     * and updates it. It returns true if there is actually a change.\n     */\n    protected updateSelection(): boolean {\n        const change = this.checkSelectionChange(this.selection, this.currentSelection);\n        this.currentSelection = this.selection;\n        return change;\n    }\n\n    /**\n     * Recreate the x scale and axes (in the event of a language change)\n     */\n    protected updateXAxis(){\n        this.x = d3.scaleUtc()\n            .domain(this.x.domain())\n            .range(this.x.range());\n\n        this.xt = d3.scaleUtc()\n            .domain(this.xt.domain())\n            .range(this.xt.range());\n\n        this.drawXAxis();\n    }\n\n    /**\n     * Draws the X axis\n     */\n    protected drawXAxis() {\n        const nTicks = Math.round(this.width / 100);\n        this.xAxis$.call(d3.axisBottom(this.xt).ticks(nTicks));\n        this.xAxis$.selectAll(\".domain\").remove(); // Remove the axis line\n    }\n\n    /**\n     * Draws the Y axis\n     */\n    protected drawYAxis() {\n        const nTicks = Math.round(this.height / 40);\n\n        const yAxisTicks = this.y.ticks(nTicks)\n            .filter(tick => Number.isInteger(tick)); // Keep only integer ticks https://stackoverflow.com/questions/13576906/d3-tick-marks-on-integers-only/56821215\n\n        const yAxis = d3.axisLeft(this.y)\n            .tickValues(yAxisTicks)\n            .tickFormat(d3.format(\"~s\")); //https://github.com/d3/d3-format\n        this.yAxis$.call(yAxis);\n        this.yAxis$.selectAll(\".domain\").remove(); // Remove the axis line\n    }\n\n    /**\n     * Updates the display of the brush's grips when the brush has moved\n     * When the selection is a semi-open interval, we don't display the infinite border\n     * @param selection\n     */\n    protected updateGrips(selection: [number, number] | null) {\n        if (!selection) {\n            this.grips$.attr(\"display\", \"none\");\n        }\n        else {\n            this.grips$\n                .attr(\"display\", (d, i) => (selection[i] === Number.MAX_VALUE || selection[i] === Number.MIN_VALUE) ? \"none\" : null)\n                .attr(\"transform\", (d, i) => (selection[i] === Number.MAX_VALUE || selection[i] === Number.MIN_VALUE) ? null : \"translate(\" + selection[i] + \")\");\n            this.grips$.selectAll('.grip-text')\n                .text(\n                    (d) => {\n                        const index = d.type === 'w'? 0 : 1;\n                        return (selection[index] === Number.MAX_VALUE || selection[index] === Number.MIN_VALUE) ? null : this.intlService.formatDate(this.xt.invert(selection[index]))\n                    }\n                );\n        }\n    }\n\n\n    // Interaction callbacks\n\n    onBrush() {\n        this.turnoffTooltip();\n        this.brushSelection = d3.brushSelection(this.gbrush.nativeElement) as [number, number] | null;\n        this.updateGrips(this.brushSelection);\n    }\n\n    onBrushEnd(){\n        this.brushing = false;\n        this.onBrush();\n        const newSelection = this.brushSelection\n            ?.sort((a,b)=>a-b)\n            .map(x => (x === Number.MAX_VALUE || x === Number.MIN_VALUE) ? undefined : this.xt.invert(x));\n        if(this.checkSelectionChange(this.currentSelection, newSelection)) {\n            this.currentSelection = newSelection;\n            this.selectionChange.next(this.currentSelection);\n        }\n    }\n\n    onZoom(){\n\n        this.turnoffTooltip();\n\n        this.zooming = true;\n\n        // Create a transformed scale without modifying the original (to enforce the limit of scaleExtent)\n        const transform = d3.zoomTransform(this.brush$.node() as Element);\n        this.xt = transform.rescaleX(this.x);\n\n        // Redraw the axis\n        this.drawXAxis();\n\n        // Update the brush position\n        if(this.currentSelection){\n            const x0 = this.currentSelection[0] ? this.xt(this.currentSelection[0])! : Number.MIN_VALUE;\n            const x1 = this.currentSelection[1] ? this.xt(this.currentSelection[1])! : Number.MAX_VALUE;\n            const selection: [number, number] = [x0,x1];\n            this.brushBehavior.move(this.brush$, selection);\n        }\n\n    }\n\n    onZoomEnd(){\n        this.zooming = false;\n\n        // At the end of a zoom, we need to reorganize the grouping of events\n        this.updateEvents();\n\n        // Fire an event\n        this.rangeChange.next(this.xt.domain());\n    }\n\n    /**\n     * Redraw the simple tooltip (vertical line)\n     */\n    onMousemove() {\n        if(!this.tooltipItem && this.showTooltip) {\n            this.tooltipX = d3.mouse(this.gbrush.nativeElement)[0];\n            const date = this.xt.invert(this.tooltipX);\n            this.tooltipDatapoints = this.data?.map(series => {\n              if(!series.showDatapoints) return;\n              const i = this.bisectDate(series.dates, date);\n              const d0 = series.dates[i - 1];\n              const d1 = series.dates[i];\n              if(!d0 || !d1) return;\n              return date.getTime() - d0.date.getTime() > d1.date.getTime() - date.getTime() ? d1 : d0;\n            });\n        }\n    }\n\n    /**\n     * Remove the simple tooltip (vertical line)\n     */\n    onMouseout() {\n        if(!this.tooltipItem) {\n            this.tooltipX = undefined\n        }\n    }\n\n    /**\n     * Responds to a click on an event (triangle) by essentially turning tooltip on/off\n     * @param event\n     */\n    onEventClick(event: TimelineEvent[]) {\n\n        if(this.tooltipItem === event) {\n            this.turnoffTooltip();\n        }\n\n        else {\n\n            if(this.tooltipItem) {\n                this.turnoffTooltip();\n            }\n\n            this.tooltipItem = event;\n            this.tooltipX = this.xt(event[0].date);\n\n            // Since we use viewBox to auto-adjust the SVG to the container size, we have to\n            // convert from the SVG coordinate system to the HTML coordinate system\n            const x = this.margin.left + this.tooltipX!;\n            const actualWidth = (this.el.nativeElement as HTMLElement).offsetWidth;\n            const scale = actualWidth / this.width;\n            const relativeX = x / this.width;\n\n            // Tooltip to the right\n            if(relativeX  {\n        if(this.tooltipItem) {\n            this.tooltipItem = undefined;\n            this.tooltipX = undefined;\n        }\n    }\n\n    ngOnDestroy(){\n        this.intlSubscription.unsubscribe();\n    }\n\n    // Utilities\n\n    /**\n     * Transforms the input list of events into a list of list, by grouping events within a bin\n     * when their dates are close together. This closeness is measured in \"pixel per event\".\n     * Note: this currently uses a histogram-like algorithm, which could probably be improved (clustering?)\n     * @param pixPerEvent\n     */\n    protected groupEvents(pixPerEvent: number): TimelineEvent[][] {\n        const events: TimelineEvent[][] = [];\n\n        if(this.events) {\n            const nbins = Math.floor(this.innerWidth / pixPerEvent);\n            const domain = this.xt.domain();\n            const timeinterval = (domain[1].getTime() - domain[0].getTime()) / nbins;\n            this.events.concat()\n                .sort((a,b) => a.date.getTime() - b.date.getTime())\n                .forEach(event => {\n                    if(events.length === 0) {\n                        events.push([event]);\n                    }\n                    else {\n                        const last = events[events.length-1];\n                        const lastbin = Math.floor(last[0].date.getTime() / timeinterval);\n                        const bin = Math.floor(event.date.getTime() / timeinterval);\n                        if(bin === lastbin) {\n                            last.push(event);\n                        }\n                        else {\n                            events.push([event]);\n                        }\n                    }\n                });\n        }\n\n        return events;\n    }\n\n    /**\n     * Return true if there are actual changes in the data\n     * (in particular will ignore data refresh which change nothing)\n     * @param change\n     */\n    protected checkDataChanges(change: SimpleChange): boolean {\n        const previousValue = change.previousValue as TimelineSeries[] | undefined;\n        const currentValue = change.currentValue as TimelineSeries[] | undefined;\n\n        // Ignore null/undefined difference cause by | async\n        // See: https://github.com/angular/angular/issues/16982\n        if(currentValue === null && previousValue === undefined || currentValue === undefined && previousValue === null)\n            return false;\n\n        // Else, if one of them is null/undefined (or difference in length), there's clearly a change\n        if(!previousValue || !currentValue || previousValue.length !== currentValue.length)\n            return true;\n\n        // If both defined and same size, we need to compare the data piece by piece\n        for(let i=0; i {\n        const gripHeight = Math.min(10, Math.max((this.innerHeight) / 8, 4));\n        const gripWidth = gripHeight;\n\n        const x = -gripWidth / 2;\n        const y = this.innerHeight / 2 - gripHeight / 2;\n\n        const path =\n            'M ' + x + ' ' + y +\n            ' l ' + -gripWidth + ' ' + gripHeight / 2 +\n            ' l ' + gripWidth + ' ' + gripHeight / 2 + ' z ' +\n            'M ' + -x + ' ' + y +\n            ' l ' + gripWidth + ' ' + gripHeight / 2 +\n            ' l ' + -gripWidth + ' ' + gripHeight / 2 + ' z ' +\n            'M 0 ' + 0 + ' l 0 ' + this.innerHeight + ' z ';\n        return path;\n    }\n\n    /**\n     * Returns the size of the triangle drawn for one event (or a group of events)\n     * @param events\n     */\n    eventSize(events: TimelineEvent[]): number {\n        if(events!==this.tooltipItem) {\n            return events[0].size || 6;\n        }\n        else {\n            return events[0].sizeOpened || (events[0].size || 6)*2;\n        }\n    }\n\n    /**\n     * Return a string containing the path coordinates of a triangle for a given event (or group of events)\n     * @param events\n     * @param size\n     */\n    drawEvents(events: TimelineEvent[], size: number): string {\n        const x = this.xt(events[0].date);\n        return 'M ' + x + ' ' + (this.innerHeight - 3*size/2) +\n            ' l ' + -size + ' ' + (3*size/2) +\n            ' l ' + (2*size) + ' ' + 0 + ' z ';\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/TimelineEvent.html":{"url":"interfaces/TimelineEvent.html","title":"interface - TimelineEvent","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  TimelineEvent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            timeline/bootstrap/timeline.component.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            date\n                                        \n                                \n                                \n                                        \n                                            display\n                                        \n                                \n                                \n                                        \n                                            id\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            record\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            size\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            sizeOpened\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            styles\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        date\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        date:         Date\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Date\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        display\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        display:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        id:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        record\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        record:     Record\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Record\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        size\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        size:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        sizeOpened\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        sizeOpened:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        styles\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        styles:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Component, Input, Output, ElementRef, ViewChild, OnChanges, AfterViewInit, EventEmitter, SimpleChanges, OnDestroy, SimpleChange, ContentChild, TemplateRef, ChangeDetectorRef } from '@angular/core';\nimport { Subscription } from 'rxjs';\nimport * as d3 from 'd3';\n\nimport { IntlService } from '@sinequa/core/intl';\nimport {Record} from '@sinequa/core/web-services';\n\n\nexport interface TimelineDate {\n    date: Date;\n    value: number;\n}\n\nexport interface TimelineSeries {\n    name: string;\n    dates: TimelineDate[];\n    primary: boolean;\n    lineStyles?: {[key:string]: any};\n    areaStyles?:  {[key:string]: any};\n    showDatapoints?: boolean;\n}\n\nexport interface TimelineEvent {\n    date: Date;\n    id: string;\n    display: string;\n    size?: number;\n    sizeOpened?: number;\n    styles?: {[key:string]: any};\n    record?: Record;\n}\n\n@Component({\n    selector: 'sq-timeline',\n    templateUrl: './timeline.component.html',\n    styleUrls: ['./timeline.component.scss']\n})\nexport class BsTimelineComponent implements OnChanges, AfterViewInit, OnDestroy {\n\n    @Input() data?: TimelineSeries[];\n    @Input() events?: TimelineEvent[];\n\n    @Input() selection?: [Date|undefined, Date|undefined];\n\n    // Initial scale (prior to any zoom)\n    @Input() minDate?: Date;\n    @Input() maxDate?: Date;\n\n    @Input() zoomable = true;\n    @Input() minZoomDays = 1; // Max 1 day scale\n    @Input() maxZoomDays = 365 * 100; // Max 100 years scale\n\n    @Input() width = 600;\n    @Input() height = 200;\n    @Input() margin = {top: 15, bottom: 20, left: 40, right: 15};\n\n    @Input() curveType = \"curveMonotoneX\";\n\n    @Input() showTooltip = true;\n    @Input() theme: \"light\" | \"dark\" = \"light\";\n\n    @Output() selectionChange = new EventEmitter();\n    @Output() rangeInit = new EventEmitter();\n    @Output() rangeChange = new EventEmitter();\n\n    @ContentChild(\"tooltipTpl\", {static: false}) tooltipTpl: TemplateRef;\n\n    // Data\n    groupedEvents: TimelineEvent[][] = [];\n\n    // Scales\n    x: d3.ScaleTime; // Read/Write\n    xt: d3.ScaleTime; // Transformed X axis due to Zoom\n    y: d3.ScaleLinear; // Read-only / domain updated\n\n    // Shapes\n    area: d3.Area; // Read only\n    line: d3.Line; // Read only\n\n    // Behaviors\n    brushBehavior: d3.BrushBehavior; // Read only\n    zoomBehavior: d3.ZoomBehavior; // Read/Write\n    brushSelection: [number, number] | null;\n    currentSelection?: (Date|undefined)[]; // Read/Write\n\n    // Elements\n    @ViewChild(\"xAxis\") gx: ElementRef;\n    @ViewChild(\"yAxis\") gy: ElementRef;\n    @ViewChild(\"brush\") gbrush: ElementRef;\n\n    // Selections\n    xAxis$: d3.Selection;\n    yAxis$: d3.Selection;\n    brush$: d3.Selection;\n    grips$: d3.Selection;\n\n    // Tooltip\n    tooltipItem: TimelineEvent[] | undefined;\n    tooltipX: number | undefined;\n    tooltipDatapoints?: (TimelineDate|undefined)[];\n    tooltipOrientation: \"left\" | \"right\";\n    tooltipTop: number;\n    tooltipRight: number;\n    tooltipLeft: number;\n    bisectDate = d3.bisector(d => { return d.date; }).left;\n\n    // Misc\n    viewInit: boolean;\n    intlSubscription: Subscription;\n    static counter = 0;\n    instance: number;\n\n    zooming: boolean;\n    brushing: boolean;\n\n    constructor(\n        protected el: ElementRef,\n        protected intlService: IntlService,\n        protected cdRef: ChangeDetectorRef\n    ){\n        // When the locale changes, we rebuild the X scale and axis\n        this.intlSubscription = this.intlService.events.subscribe(e => this.updateXAxis());\n\n        this.instance = BsTimelineComponent.counter++;\n\n    }\n\n    get innerWidth(): number {\n        return this.width - this.margin.left - this.margin.right;\n    }\n\n    get innerHeight(): number {\n        return this.height - this.margin.top - this.margin.bottom;\n    }\n\n    // Note: ngOnChanges is always called once before ngAfterViewInit\n    ngOnChanges(changes: SimpleChanges) {\n\n        if(!this.x) {\n\n            // Scales\n            this.x = d3.scaleUtc()\n                .range([0, this.innerWidth]);\n            this.xt = this.x;\n\n            this.y = d3.scaleLinear()\n                .range([this.innerHeight, 0]);\n\n            // Shapes\n            this.area = d3.area()\n                .curve(d3[this.curveType])\n                .x(d => this.xt(d.date)!)\n                .y0(this.y(0)!)\n                .y1(d => this.y(d.value)!);\n\n            this.line = d3.line()\n                .curve(d3[this.curveType])\n                .x(d => this.xt(d.date)!)\n                .y(d => this.y(d.value)!);\n\n            // Behaviors\n            this.brushBehavior = d3.brushX()\n                .extent([[0, 0], [this.innerWidth, this.innerHeight]])\n                .on(\"start\", () => this.brushing = true)\n                .on('brush', () => this.onBrush())\n                .on('end', () => this.onBrushEnd());\n        }\n\n        // Resize handling\n\n        if(changes[\"height\"]) {\n            this.y.range([this.innerHeight, 0]);\n            this.area.y0(this.y(0)!);\n            this.brushBehavior.extent([[0, 0], [this.innerWidth, this.innerHeight]]);\n            if(this.viewInit) {\n                this.drawYAxis();\n                this.brush$.call(this.brushBehavior);\n                this.grips$.selectAll(\"path\").attr(\"d\", this.drawGrips);\n            }\n        }\n\n        if(changes[\"width\"]) {\n            this.x.range([0, this.innerWidth]);\n            this.brushBehavior.extent([[0, 0], [this.innerWidth, this.innerHeight]]);\n            if(this.viewInit) {\n                this.drawXAxis();\n                if(!changes[\"height\"]) {\n                    this.brush$.call(this.brushBehavior);\n                    this.grips$.selectAll(\"path\").attr(\"d\", this.drawGrips);\n                }\n            }\n        }\n\n        // If the parent changes the selection, we want to update it\n        // If not, we keep the current selection as is\n        // (Important to keep this statement outside of the if bellow since\n        // the change of selection can be combined with a change of data)\n        const selectionChanged = changes[\"selection\"] && this.updateSelection();\n\n        // Only changes in data result in redrawing the chart\n        // (other input, except selection, are expected to be static)\n        if(this.viewInit && changes[\"data\"] && this.checkDataChanges(changes[\"data\"])){\n            this.updateChart();\n        }\n\n        // If the parent changes the selection (even though the data hasn't changed),\n        // we want to update the brush.\n        // If not, we keep the current selection as is.\n        // We can update the brush only if the view is initialized (viewInit).\n        else if(this.viewInit && ((changes[\"selection\"] && selectionChanged) || changes[\"width\"])) {\n            this.updateBrush();\n        }\n\n        if(changes[\"events\"]) {\n            this.updateEvents();\n        }\n\n    }\n\n    // Note: In onAfterViewInit we can access gx, gy, etc., obtained with @ViewChild.\n    // At this point we can initialize all the primitives and call updateChart()\n    ngAfterViewInit() {\n\n        // Get native elements\n        this.xAxis$ = d3.select(this.gx.nativeElement);\n        this.yAxis$ = d3.select(this.gy.nativeElement);\n        this.brush$ = d3.select(this.gbrush.nativeElement);\n\n        this.brush$\n            .call(this.brushBehavior)\n            .on(\"mousemove\", () => this.onMousemove())\n            .on(\"mouseout\", () => this.onMouseout());\n\n        // Add 2 \"grips\" to the brush goup, on each side of the rectangle\n        // Grips are inserted programmatically to appear on top the brush selection\n        this.grips$ = this.brush$.selectAll(\".grip\")\n            .data([{type: \"w\"}, {type: \"e\"}])\n            .enter()\n            .append(\"g\")\n            .attr(\"class\", \"grip\")\n            .attr(\"display\", \"none\");\n\n        this.grips$.append(\"path\")\n            .attr(\"d\", this.drawGrips);\n\n        this.grips$.append(\"text\")\n            .attr(\"class\", \"grip-text\")\n            .attr(\"text-anchor\", d => d.type === \"w\"? 'end' : 'start')\n            .attr(\"x\", d => d.type === \"w\"? -5 : 5)\n            .attr(\"y\", 10);\n\n        this.viewInit = true;\n\n        this.updateChart();\n\n        // This is necessary to prevent \"Expression has changed after check\" errors\n        // caused by calling updateChart inside ngAfterViewInit().\n        // Unfortunately this is necessary because we need the DOM to be rendered in order fill the DOM\n        // (for example gAxis needs to exist so we can draw the axis)\n        this.cdRef.detectChanges();\n    }\n\n    /**\n     * Redraw the graph (needs to be called after ngAfterViewInit so that the DOM elements\n     * are accessible)\n     */\n    updateChart() {\n\n        this.turnoffTooltip();\n\n        if(this.data && this.data.length) {\n\n            // Update scales\n            // Note: does not stop the update process even if the data is invalid/empty\n            this.updateScales(this.data);\n\n            // Update Axes\n            this.updateAxes();\n\n            // Update Zoom\n            this.updateZoom();\n\n            // Update brush\n            this.updateBrush();\n\n        }\n\n    }\n\n\n    /**\n     * Update the x & y scales, based on the input data\n     * @param data\n     */\n    protected updateScales(data: TimelineSeries[]) {\n\n        // Set x and y scales with the primary series (or first one)\n        const primarySeries = data.filter(s => s.primary) || [data[0]];\n        const allPrimaryDates = ([] as TimelineDate[]).concat(...primarySeries.map(s => s.dates));\n\n        const xExtent = d3.extent(allPrimaryDates, d => d.date);\n        const yMax = d3.max(data,\n            s => d3.max(s.dates, d => d.value));\n\n        // Check validity of data\n        if(!xExtent[0] || !xExtent[1] || !yMax) {\n            if (allPrimaryDates.length !== 0) {\n                console.error('Invalid timeseries', primarySeries);\n            }\n            this.x.domain(this.xt.domain());\n            this.xt = this.x;\n            return;\n        }\n\n        // Enforce minimum date\n        if(this.minDate) {\n            xExtent[0] = this.minDate;\n        }\n\n        // Enforce maximum date\n        if(this.maxDate) {\n            xExtent[1] = this.maxDate;\n        }\n\n        // Enforce minimum scale (especially when the timeseries contains a single datapoint)\n        const diff = xExtent[1].getTime() - xExtent[0].getTime();\n        const minDiff = this.minZoomDays * 24 * 60 * 60 * 1000;\n        if(diff  this.rangeInit.next(this.xt.domain()));\n    }\n\n    /**\n     * Update the x and y axes\n     */\n    protected updateAxes(){\n        this.drawXAxis();\n        this.drawYAxis();\n    }\n\n    /**\n     * The events are drawn in the template directly. This method simply\n     * updates the grouping of events (when they are close to each other)\n     */\n    protected updateEvents() {\n        this.groupedEvents = this.groupEvents(5);\n    }\n\n    /**\n     * Update/reset the zoom behavior when new data comes in (and new scales, axes...)\n     */\n    protected updateZoom() {\n\n        if(!this.zoomable) {\n            return;\n        }\n\n        // Reset the previous zoom !\n        if(this.zoomBehavior){\n            this.zoomBehavior.on(\"zoom\", null);\n            this.zoomBehavior.on(\"end\", null);\n            this.zoomBehavior.transform(this.brush$, d3.zoomIdentity);\n        }\n\n        // Compute the minimum and maximum zoom\n        const xDomain = this.x.domain();\n        const scaleExtent = (xDomain[1].getTime() - xDomain[0].getTime()) / 86400000; // current number of days on the scale\n\n        // Create the behavior\n        this.zoomBehavior = d3.zoom()\n            .extent([[0, 0], [this.innerWidth, this.innerHeight]])\n            .scaleExtent([scaleExtent/this.maxZoomDays, scaleExtent/this.minZoomDays])\n            .on(\"zoom\", () => this.onZoom())\n            .on(\"end\", () => this.onZoomEnd());\n\n        // Apply on to the brush element\n        this.brush$\n            .call(this.zoomBehavior)\n            .on(\"mousedown.zoom\", null) // Deactivate mouse event (taken by brush)\n            .on(\"touchstart.zoom\", null)\n            .on(\"touchmove.zoom\", null)\n            .on(\"touchend.zoom\", null);\n\n    }\n\n    /**\n     * Updates the brush (or hides it if no currentSelection),\n     * following a change of x scale.\n     * Number.MIN_VALUE and Number.MAX_VALUE are used to support semi-open intervals\n     */\n    protected updateBrush() {\n        if(this.currentSelection) {\n            const x0 = this.currentSelection[0] ? this.xt(this.currentSelection[0])! : Number.MIN_VALUE;\n            const x1 = this.currentSelection[1] ? this.xt(this.currentSelection[1])! : Number.MAX_VALUE;\n            const selection: [number, number] = [x0,x1];\n            this.brush$.call(this.brushBehavior.move, selection);\n        }\n        else {\n            this.brush$.call(this.brushBehavior.move, null);\n        }\n    }\n\n    /**\n     * This method tests whether the input selection is different from the currentSelection\n     * and updates it. It returns true if there is actually a change.\n     */\n    protected updateSelection(): boolean {\n        const change = this.checkSelectionChange(this.selection, this.currentSelection);\n        this.currentSelection = this.selection;\n        return change;\n    }\n\n    /**\n     * Recreate the x scale and axes (in the event of a language change)\n     */\n    protected updateXAxis(){\n        this.x = d3.scaleUtc()\n            .domain(this.x.domain())\n            .range(this.x.range());\n\n        this.xt = d3.scaleUtc()\n            .domain(this.xt.domain())\n            .range(this.xt.range());\n\n        this.drawXAxis();\n    }\n\n    /**\n     * Draws the X axis\n     */\n    protected drawXAxis() {\n        const nTicks = Math.round(this.width / 100);\n        this.xAxis$.call(d3.axisBottom(this.xt).ticks(nTicks));\n        this.xAxis$.selectAll(\".domain\").remove(); // Remove the axis line\n    }\n\n    /**\n     * Draws the Y axis\n     */\n    protected drawYAxis() {\n        const nTicks = Math.round(this.height / 40);\n\n        const yAxisTicks = this.y.ticks(nTicks)\n            .filter(tick => Number.isInteger(tick)); // Keep only integer ticks https://stackoverflow.com/questions/13576906/d3-tick-marks-on-integers-only/56821215\n\n        const yAxis = d3.axisLeft(this.y)\n            .tickValues(yAxisTicks)\n            .tickFormat(d3.format(\"~s\")); //https://github.com/d3/d3-format\n        this.yAxis$.call(yAxis);\n        this.yAxis$.selectAll(\".domain\").remove(); // Remove the axis line\n    }\n\n    /**\n     * Updates the display of the brush's grips when the brush has moved\n     * When the selection is a semi-open interval, we don't display the infinite border\n     * @param selection\n     */\n    protected updateGrips(selection: [number, number] | null) {\n        if (!selection) {\n            this.grips$.attr(\"display\", \"none\");\n        }\n        else {\n            this.grips$\n                .attr(\"display\", (d, i) => (selection[i] === Number.MAX_VALUE || selection[i] === Number.MIN_VALUE) ? \"none\" : null)\n                .attr(\"transform\", (d, i) => (selection[i] === Number.MAX_VALUE || selection[i] === Number.MIN_VALUE) ? null : \"translate(\" + selection[i] + \")\");\n            this.grips$.selectAll('.grip-text')\n                .text(\n                    (d) => {\n                        const index = d.type === 'w'? 0 : 1;\n                        return (selection[index] === Number.MAX_VALUE || selection[index] === Number.MIN_VALUE) ? null : this.intlService.formatDate(this.xt.invert(selection[index]))\n                    }\n                );\n        }\n    }\n\n\n    // Interaction callbacks\n\n    onBrush() {\n        this.turnoffTooltip();\n        this.brushSelection = d3.brushSelection(this.gbrush.nativeElement) as [number, number] | null;\n        this.updateGrips(this.brushSelection);\n    }\n\n    onBrushEnd(){\n        this.brushing = false;\n        this.onBrush();\n        const newSelection = this.brushSelection\n            ?.sort((a,b)=>a-b)\n            .map(x => (x === Number.MAX_VALUE || x === Number.MIN_VALUE) ? undefined : this.xt.invert(x));\n        if(this.checkSelectionChange(this.currentSelection, newSelection)) {\n            this.currentSelection = newSelection;\n            this.selectionChange.next(this.currentSelection);\n        }\n    }\n\n    onZoom(){\n\n        this.turnoffTooltip();\n\n        this.zooming = true;\n\n        // Create a transformed scale without modifying the original (to enforce the limit of scaleExtent)\n        const transform = d3.zoomTransform(this.brush$.node() as Element);\n        this.xt = transform.rescaleX(this.x);\n\n        // Redraw the axis\n        this.drawXAxis();\n\n        // Update the brush position\n        if(this.currentSelection){\n            const x0 = this.currentSelection[0] ? this.xt(this.currentSelection[0])! : Number.MIN_VALUE;\n            const x1 = this.currentSelection[1] ? this.xt(this.currentSelection[1])! : Number.MAX_VALUE;\n            const selection: [number, number] = [x0,x1];\n            this.brushBehavior.move(this.brush$, selection);\n        }\n\n    }\n\n    onZoomEnd(){\n        this.zooming = false;\n\n        // At the end of a zoom, we need to reorganize the grouping of events\n        this.updateEvents();\n\n        // Fire an event\n        this.rangeChange.next(this.xt.domain());\n    }\n\n    /**\n     * Redraw the simple tooltip (vertical line)\n     */\n    onMousemove() {\n        if(!this.tooltipItem && this.showTooltip) {\n            this.tooltipX = d3.mouse(this.gbrush.nativeElement)[0];\n            const date = this.xt.invert(this.tooltipX);\n            this.tooltipDatapoints = this.data?.map(series => {\n              if(!series.showDatapoints) return;\n              const i = this.bisectDate(series.dates, date);\n              const d0 = series.dates[i - 1];\n              const d1 = series.dates[i];\n              if(!d0 || !d1) return;\n              return date.getTime() - d0.date.getTime() > d1.date.getTime() - date.getTime() ? d1 : d0;\n            });\n        }\n    }\n\n    /**\n     * Remove the simple tooltip (vertical line)\n     */\n    onMouseout() {\n        if(!this.tooltipItem) {\n            this.tooltipX = undefined\n        }\n    }\n\n    /**\n     * Responds to a click on an event (triangle) by essentially turning tooltip on/off\n     * @param event\n     */\n    onEventClick(event: TimelineEvent[]) {\n\n        if(this.tooltipItem === event) {\n            this.turnoffTooltip();\n        }\n\n        else {\n\n            if(this.tooltipItem) {\n                this.turnoffTooltip();\n            }\n\n            this.tooltipItem = event;\n            this.tooltipX = this.xt(event[0].date);\n\n            // Since we use viewBox to auto-adjust the SVG to the container size, we have to\n            // convert from the SVG coordinate system to the HTML coordinate system\n            const x = this.margin.left + this.tooltipX!;\n            const actualWidth = (this.el.nativeElement as HTMLElement).offsetWidth;\n            const scale = actualWidth / this.width;\n            const relativeX = x / this.width;\n\n            // Tooltip to the right\n            if(relativeX  {\n        if(this.tooltipItem) {\n            this.tooltipItem = undefined;\n            this.tooltipX = undefined;\n        }\n    }\n\n    ngOnDestroy(){\n        this.intlSubscription.unsubscribe();\n    }\n\n    // Utilities\n\n    /**\n     * Transforms the input list of events into a list of list, by grouping events within a bin\n     * when their dates are close together. This closeness is measured in \"pixel per event\".\n     * Note: this currently uses a histogram-like algorithm, which could probably be improved (clustering?)\n     * @param pixPerEvent\n     */\n    protected groupEvents(pixPerEvent: number): TimelineEvent[][] {\n        const events: TimelineEvent[][] = [];\n\n        if(this.events) {\n            const nbins = Math.floor(this.innerWidth / pixPerEvent);\n            const domain = this.xt.domain();\n            const timeinterval = (domain[1].getTime() - domain[0].getTime()) / nbins;\n            this.events.concat()\n                .sort((a,b) => a.date.getTime() - b.date.getTime())\n                .forEach(event => {\n                    if(events.length === 0) {\n                        events.push([event]);\n                    }\n                    else {\n                        const last = events[events.length-1];\n                        const lastbin = Math.floor(last[0].date.getTime() / timeinterval);\n                        const bin = Math.floor(event.date.getTime() / timeinterval);\n                        if(bin === lastbin) {\n                            last.push(event);\n                        }\n                        else {\n                            events.push([event]);\n                        }\n                    }\n                });\n        }\n\n        return events;\n    }\n\n    /**\n     * Return true if there are actual changes in the data\n     * (in particular will ignore data refresh which change nothing)\n     * @param change\n     */\n    protected checkDataChanges(change: SimpleChange): boolean {\n        const previousValue = change.previousValue as TimelineSeries[] | undefined;\n        const currentValue = change.currentValue as TimelineSeries[] | undefined;\n\n        // Ignore null/undefined difference cause by | async\n        // See: https://github.com/angular/angular/issues/16982\n        if(currentValue === null && previousValue === undefined || currentValue === undefined && previousValue === null)\n            return false;\n\n        // Else, if one of them is null/undefined (or difference in length), there's clearly a change\n        if(!previousValue || !currentValue || previousValue.length !== currentValue.length)\n            return true;\n\n        // If both defined and same size, we need to compare the data piece by piece\n        for(let i=0; i {\n        const gripHeight = Math.min(10, Math.max((this.innerHeight) / 8, 4));\n        const gripWidth = gripHeight;\n\n        const x = -gripWidth / 2;\n        const y = this.innerHeight / 2 - gripHeight / 2;\n\n        const path =\n            'M ' + x + ' ' + y +\n            ' l ' + -gripWidth + ' ' + gripHeight / 2 +\n            ' l ' + gripWidth + ' ' + gripHeight / 2 + ' z ' +\n            'M ' + -x + ' ' + y +\n            ' l ' + gripWidth + ' ' + gripHeight / 2 +\n            ' l ' + -gripWidth + ' ' + gripHeight / 2 + ' z ' +\n            'M 0 ' + 0 + ' l 0 ' + this.innerHeight + ' z ';\n        return path;\n    }\n\n    /**\n     * Returns the size of the triangle drawn for one event (or a group of events)\n     * @param events\n     */\n    eventSize(events: TimelineEvent[]): number {\n        if(events!==this.tooltipItem) {\n            return events[0].size || 6;\n        }\n        else {\n            return events[0].sizeOpened || (events[0].size || 6)*2;\n        }\n    }\n\n    /**\n     * Return a string containing the path coordinates of a triangle for a given event (or group of events)\n     * @param events\n     * @param size\n     */\n    drawEvents(events: TimelineEvent[], size: number): string {\n        const x = this.xt(events[0].date);\n        return 'M ' + x + ' ' + (this.innerHeight - 3*size/2) +\n            ' l ' + -size + ' ' + (3*size/2) +\n            ' l ' + (2*size) + ' ' + 0 + ' z ';\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/TimelineEventAggregation.html":{"url":"interfaces/TimelineEventAggregation.html","title":"interface - TimelineEventAggregation","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  TimelineEventAggregation\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            timeline/bootstrap/facet-timeline.component.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            aggregation\n                                        \n                                \n                                \n                                        \n                                            getDate\n                                        \n                                \n                                \n                                        \n                                            getDisplay\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            size\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            styles\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        aggregation\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        aggregation:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        getDate\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        getDate:     \n\n                                    \n                                \n\n\n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        getDisplay\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        getDisplay:     \n\n                                    \n                                \n\n\n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        size\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        size:     number | \n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     number | \n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        styles\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        styles:     literal type | \n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type | \n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Component, Input, OnChanges, ChangeDetectorRef, SimpleChanges, Output, EventEmitter } from '@angular/core';\nimport { Observable, of, combineLatest, ReplaySubject } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { Results, AggregationItem, Aggregation, CCAggregation, Record, AuditWebService, AuditEventType } from '@sinequa/core/web-services';\nimport { AppService, Expr, ExprBuilder } from '@sinequa/core/app-utils';\nimport { Utils } from '@sinequa/core/base';\nimport { AbstractFacet, FacetService } from '@sinequa/components/facet';\nimport { SearchService } from '@sinequa/components/search';\nimport { SelectionService } from '@sinequa/components/selection';\nimport { Action } from '@sinequa/components/action';\nimport { TimelineSeries, TimelineDate, TimelineEvent } from './timeline.component';\nimport moment from 'moment';\nimport * as d3 from 'd3';\nimport { TimelineEventType } from './timeline-legend.component';\n\nexport interface TimelineAggregation {\n    name?: string;\n    aggregation: string;\n    primary: boolean;\n    areaStyles?: {[key: string]: any};\n    lineStyles?: {[key: string]: any};\n    showDatapoints?: boolean;\n}\n\nexport interface TimelineCombinedAggregations {\n    aggregations: TimelineAggregation[];\n    maxNMonths: number[]; // Maximum number of months for which to use this aggregation\n    default: TimelineAggregation; // Aggregation to use by default \n    current?: TimelineAggregation; // (this field is overriden by the component when switching aggregation)\n}\n\nexport interface TimelineRecords {\n    field: string;\n    size?: number | ((record: Record, selected: boolean) => number);\n    styles?: {[key: string]: any} | ((record: Record, selected: boolean) => {[key: string]: any});\n    display?: (record: Record) => string;\n}\n\nexport interface TimelineEventAggregation {\n    aggregation: string;\n    getDate: ((item: AggregationItem) => Date);\n    getDisplay: ((item: AggregationItem) => string);\n    size?: number | ((item: AggregationItem) => number);\n    styles?: {[key: string]: any} | ((item: AggregationItem) => {[key: string]: any});\n}\n\nexport type TimelineData = TimelineSeries | TimelineAggregation | TimelineCombinedAggregations;\n\nexport type TimelineEventData = TimelineEvent[] | TimelineRecords | TimelineEventAggregation;\n\n@Component({\n    selector: 'sq-facet-timeline',\n    templateUrl: './facet-timeline.component.html',\n    styleUrls: ['./facet-timeline.component.scss']\n})\nexport class BsFacetTimelineComponent extends AbstractFacet implements OnChanges {\n    @Input() name = 'Timeline';\n    @Input() results: Results;\n    \n    // By default, we show the standard Timeline aggregation and the list of current records\n    @Input() timeseries: TimelineData[] = [{aggregation: 'Timeline', primary: true}];\n    @Input() events: TimelineEventData[] = [{field: 'modified'}];\n\n    // Initial scale (prior to any zoom)\n    @Input() minDate?: Date;\n    @Input() maxDate?: Date;\n    // Date range to filter aggregations (ignored when combined aggregations are recomputed based on zoomed range)\n    @Input() minAggregationDate?: Date;\n    @Input() maxAggregationDate?: Date;\n    \n    @Input() zoomable = true;\n    @Input() minZoomDays = 1; // Max 1 day scale\n    @Input() maxZoomDays = 365 * 100; // Max 100 years scale\n\n    @Input() width = 600;\n    @Input() height = 200;\n    @Input() margin = {top: 15, bottom: 20, left: 40, right: 15};\n\n    @Input() curveType = \"curveMonotoneX\";\n\n    @Input() showTooltip = true;\n    @Input() theme: \"light\" | \"dark\" = \"light\";\n\n    @Input() showLegend = false;\n    @Input() legendStyles?: {[key:string]: any} = {'justify-content' : 'center'};\n    @Input() legendEvents?: TimelineEventType[];\n    @Input() legendOrientation?: \"row\"|\"column\" = \"row\";\n    @Input() legendYOffset?: number = 3;\n\n    @Output() eventClicked = new EventEmitter();\n\n    // List of observables (one per timeseries / event type)\n    timeseries$: ReplaySubject[];\n    events$: ReplaySubject[];\n\n    // Combination (combineLastest) of the timeline observables\n    mergedTimeseries$: Observable;\n    mergedEvents$: Observable;\n\n    // Current timeline selection\n    selection?: [Date, Date];\n\n    // Current range (undefined if no zoom / auto-scaling)\n    currentRange?: [Date, Date];\n\n    // Formating method for search queries\n    formatDayRequest = d3.timeFormat(\"%Y-%m-%d\");\n\n    // Actions\n    clearFilters: Action;\n\n    constructor(\n        public facetService: FacetService,\n        public searchService: SearchService,\n        public appService: AppService,\n        public selectionService: SelectionService,\n        public exprBuilder: ExprBuilder,\n        public cdRef: ChangeDetectorRef,\n        public audit: AuditWebService\n    ){\n        super();\n\n        // Update the events when the selection of records changes\n        this.selectionService.events.subscribe(event => {\n            const i = this.events.findIndex(e => (e as TimelineRecords).field);\n            if(i !== -1) {\n                this.events$[i].next(this.getRecordsAsEvents(this.events[i] as TimelineRecords));\n            }\n        });\n        \n        // Clear the current filters\n        this.clearFilters = new Action({\n            icon: \"far fa-minus-square\",\n            title: \"msg#facet.clearSelects\",\n            action: () => {\n                this.selection = undefined;\n                this.searchService.query.removeSelect(this.name);\n                this.searchService.search();\n            }\n        });\n\n    }\n\n    getMinDate(): Date | undefined {\n        return this.currentRange? this.currentRange[0] : this.minDate;\n    }\n\n    getMaxDate(): Date | undefined {\n        return this.currentRange? this.currentRange[1] : this.maxDate;\n    }\n\n    override get actions(): Action[] {\n        const actions: Action[] = [];\n        if(this.facetService.hasFiltered(this.name)){\n            actions.push(this.clearFilters);\n        }\n        return actions;\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n\n        // Skip simple changes (width, height, etc.) that don't require modifying the timeline data\n        if(!changes.timeseries && !changes.events && !changes.results) {\n            return;\n        }\n\n        // Retrieve the current active selection for this timeline (if any)\n        const select = this.searchService.query.findSelect(this.name);\n\n        // Update the selection if it is not already set (which is the case on a page refresh)\n        if(select && !this.selection) {\n            let parsedexpr = this.appService.parseExpr(select.expression) as Expr;\n            if(!Utils.isString(parsedexpr)){\n                while(!parsedexpr.isLeaf){ // The select might over multiple fields (modified between [...] AND created between [...])\n                    parsedexpr = parsedexpr.operands[0];\n                }\n                if(parsedexpr.values){\n                    this.selection = [new Date(parsedexpr.values[0]), new Date(parsedexpr.values[1])];\n                    // Guess a current range based on the selection\n                    if(!this.currentRange) {\n                        const interval = this.selection[1].getTime() - this.selection[0].getTime();\n                        this.currentRange = [ // Selected Interval +10% on each side\n                            new Date(this.selection[0].getTime()-interval*0.1),\n                            new Date(this.selection[1].getTime()+interval*0.1)\n                        ];\n                    }\n                }\n            }\n        }\n        // If no active selection we remove the selection from the timeline, along with the current zoomed range\n        else if(!select) {\n            this.selection = undefined; // If no select, it was possibly removed by the user, we need to update our selection\n            this.currentRange = undefined; // current range is set by zoom events, we want to reset it only if there are no select (ie. no user interaction)\n        }\n\n        // Initialize timeseries\n        if(!this.timeseries$ || changes[\"timeseries\"]) {\n            // Create one observable per timeline\n            this.timeseries$ = this.timeseries.map(_ => new ReplaySubject(1));\n            this.mergedTimeseries$ = combineLatest(this.timeseries$);\n        }\n\n        this.updateTimeseries();\n\n        // Initialize events\n        if(!this.events$ || changes[\"events\"]) {\n            this.events$ = this.events.map(_ => new ReplaySubject(1));\n            this.mergedEvents$ = combineLatest(this.events$).pipe(\n                map(events => ([] as TimelineEvent[]).concat(...events))\n            );\n        }\n\n        this.updateEvents();\n        \n    }\n\n    /**\n     * For each timeseries configuration given as an input,\n     * update the data via the list of observables (timelines$)\n     */\n    updateTimeseries() {\n        this.timeseries.forEach((config, i) => {\n\n            const subject = this.timeseries$[i];\n\n            if((config as TimelineSeries).dates !== undefined) {\n                subject.next(config as TimelineSeries);\n            }\n\n            else {\n                let agg = config as TimelineAggregation;\n                if(agg.aggregation === undefined){\n                    \n                    config = config as TimelineCombinedAggregations;\n                    // We want to set the default scale if it hasn't been set before\n                    // or if no zoom/selection has been made (so current scale may not be adapted to the new results)\n                    if(!this.currentRange || !config.current){\n                        config.current = config.default;\n                    }\n\n                    agg = config.current;\n                }\n                \n                const range: [Date, Date] | undefined = !!this.minAggregationDate && !!this.maxAggregationDate ?\n                    [this.minAggregationDate, this.maxAggregationDate] : undefined;\n\n                this.getTimeseries(agg, range).subscribe({\n                    next: d => subject.next(d),\n                    error: err => subject.error(err)\n                });\n            }\n\n        });\n    }\n\n    /**\n     * For each event configuration given as an input, \n     * update the data via the list of observables (events$)\n     */\n    updateEvents() {\n        this.events.forEach((config, i) => {\n            const subject = this.events$[i];\n\n            if((config as TimelineRecords).field) {\n                subject.next(this.getRecordsAsEvents(config as TimelineRecords));\n            }\n            else if((config as TimelineEventAggregation).aggregation){\n                this.getEventAggregation(config as TimelineEventAggregation).subscribe({\n                    next: t => subject.next(t),\n                    error: err => subject.error(err)\n                });\n            }\n            else if(Array.isArray(config)){\n                subject.next(config as TimelineEvent[]);\n            }\n        });\n    }\n\n    /**\n     * Get a timeseries aggregation via the getAggregation method.\n     * @param config \n     * @param subject \n     * @param range \n     */\n    getTimeseries(config: TimelineAggregation, range?: [Date, Date]): Observable {\n        return this.getAggregation(config.aggregation, range).pipe(\n            map(d => BsFacetTimelineComponent.createTimeseries(config, d.aggregation, d.ccaggregation, range))\n        );\n    }\n\n    /**\n     * Get an aggregation of events via the getAggregation method\n     * @param config \n     * @param subject \n     */\n    getEventAggregation(config: TimelineEventAggregation): Observable {\n        return this.getAggregation(config.aggregation).pipe(\n            map(d => BsFacetTimelineComponent.createAggregationEvents(config, d.aggregation, d.ccaggregation))\n        );\n    }\n\n    /**\n     * Returns the list of records from the results as a list of TimelineEvent when they have a\n     * modified date. The size and styles of the events are determined from the given configuration (TimelineRecords)\n     * @param config \n     */\n    getRecordsAsEvents(config: TimelineRecords): TimelineEvent[] {\n        if(this.results) {\n            return this.results.records\n                .filter(r => !!Utils.toDate(r[config.field]))\n                .map(r => {\n                    return {\n                        id: r.id,\n                        date: Utils.toDate(r[config.field])!,\n                        size: !config.size? 6 : typeof config.size === 'function'? config.size(r, r.$selected) : config.size,\n                        styles: !config.styles? BsFacetTimelineComponent.defaultRecordStyle(r.$selected) :\n                                typeof config.styles === 'function'? config.styles(r, r.$selected) : \n                                config.styles,\n                        display: config.display? config.display(r) : r.title,\n                        // Custom property for click action\n                        record: r\n                    }\n                });\n        }\n        return [];\n    }\n\n\n    /**\n     * returns an aggregation and its configuration either directly from the facet service of\n     * by fetching it from the server.\n     * @param aggregationName \n     * @param range \n     */\n    getAggregation(aggregationName: string, range?: [Date, Date]): Observable {\n        \n        const ccaggregation = this.appService.getCCAggregation(aggregationName);\n        const aggregation = this.facetService.getAggregation(aggregationName, this.results);\n        \n        if(aggregation && ccaggregation) {\n            return of({aggregation: aggregation, ccaggregation: ccaggregation});\n        }\n\n        else if(ccaggregation) {\n            return this.fetchAggregation(aggregationName, ccaggregation, range).pipe(\n                map(agg => {return {aggregation: agg, ccaggregation: ccaggregation} })\n            );\n        }\n\n        else {\n            throw new Error(`Aggregation ${aggregationName} does not exist in the Query web service`);\n        }\n    }\n\n    /**\n     * Get an aggregation from the server, filtering by range if provided\n     * @param aggregation \n     * @param ccaggregation \n     * @param range \n     */\n    fetchAggregation(aggregation: string, ccaggregation: CCAggregation, range?: [Date, Date]): Observable {\n        const query = Utils.copy(this.searchService.query);\n        query.action = \"aggregate\";\n        query.aggregations = [aggregation];\n\n        if(range){\n            query.addSelect(`${ccaggregation.column}:[${this.formatDayRequest(range[0])}..${this.formatDayRequest(range[1])}]`);\n        }\n\n        return this.searchService.getResults(query, undefined, {searchInactive: true}).pipe(\n            map(results => results.aggregations[0])\n        );\n    }\n\n    /**\n     * Given a combined aggregation configuration and a range, this method searches for the most \n     * adapted aggregation scale (years, months, weeks or days) and updates the data if necessary.\n     * @param config \n     * @param range \n     * @param iTimeseries \n     */\n    updateCombinedAggregation(config: TimelineCombinedAggregations, range: [Date, Date], timeseries$: ReplaySubject) {\n        const nmonths = d3.timeMonth.count(range[0], range[1]);\n\n        if(!config.maxNMonths || config.maxNMonths.length !== config.aggregations.length) {\n            console.error(config);\n            throw new Error(\"maxNMonths and aggregations must have the same number of items\");\n        }\n\n        // Find the aggregation with min maxNMonths with maxNMonths >= nmonths\n        let jMin;\n        config.maxNMonths.forEach((maxNMonths, j) => {\n            if(maxNMonths >= nmonths && (jMin === undefined || maxNMonths  this.currentRange[1])) {\n\n            config.current = bestAggregation;\n            this.getTimeseries(bestAggregation, range).subscribe({\n                next: d => timeseries$.next(d),\n                error: err => timeseries$.error(err)\n            });\n        }\n\n    }\n\n\n    // Interaction callbacks\n\n    /**\n     * On selection is triggered when the user selects a range of dates on the timeline.\n     * This has the effect of updating the query.select (either remove it or add/replace it)\n     * and it updates the search.\n     * @param selection \n     */\n    onSelectionChange(selection: [Date, Date] | undefined) {\n        this.selection = selection;\n        if(selection) {\n            const from = this.formatDayRequest(selection[0]);\n            const to = this.formatDayRequest(selection[1]);\n\n            const exprs: string[] = [];\n            this.searchService.query.removeSelect(this.name);\n\n            this.timeseries.forEach((config) => {\n                    \n                if((config as TimelineAggregation).aggregation !== undefined \n                || (config as TimelineCombinedAggregations).default !== undefined) {\n\n                    const aggregation = (config as TimelineAggregation).aggregation || (config as TimelineCombinedAggregations).default.aggregation;\n                    const ccaggregation = this.appService.getCCAggregation(aggregation);\n                    if(ccaggregation) {\n                        exprs.push(this.exprBuilder.makeRangeExpr(ccaggregation.column, from, to));\n                    }\n                }\n\n            });\n\n            if(exprs.length > 0) {\n                const expr = this.exprBuilder.concatOrExpr(exprs);\n                this.searchService.query.addSelect(expr, this.name);\n                this.searchService.search(undefined, {type:AuditEventType.Search_Timeline_Usage, detail: { from, to }});\n            }            \n        }\n\n        else if(this.searchService.query.findSelect(this.name)) {\n            this.searchService.query.removeSelect(this.name);\n            this.searchService.search();\n        }\n    }\n\n    /**\n     * On range is triggered when the user zooms in our out on the timeline,\n     * which triggers a dynamic update of the combined aggregation timelines.\n     * @param range \n     */\n    onRangeChange(range: [Date, Date]) {\n\n        this.timeseries.forEach((config, i) => {\n            if((config as TimelineCombinedAggregations).aggregations !== undefined) {\n                this.updateCombinedAggregation(config as TimelineCombinedAggregations, range, this.timeseries$[i]);\n            }\n        });\n\n        // Note: updateCombinedAggregation() compares currentRange and range\n        // So this update must be kept after the forEach\n        this.currentRange = range;\n    }\n\n    /**\n     * When an event is clicked, the event is propagated to the parent, and the tooltip is closed\n     * @param event \n     * @param closeTooltip \n     */\n    onEventClicked(event: TimelineEvent, closeTooltip: () => void) {\n        this.eventClicked.next(event);\n        closeTooltip();\n        return false;\n    }\n\n\n    // Static utility methods\n    \n    \n    /**\n     * Create a time series object from its config, data (aggregation) and configuration (ccaggregation)\n     * @param config \n     * @param aggregation \n     * @param ccaggregation \n     */\n    static createTimeseries(config: TimelineAggregation, aggregation: Aggregation, ccaggregation: CCAggregation, range?: [Date, Date]): TimelineSeries {\n        return {\n            ...config,\n            name: config.name || aggregation.name,\n            dates: this.createDatapoints(aggregation.items, ccaggregation?.mask, range),\n        }\n    }\n\n    /**\n     * Create a list of events from its config, data (aggregation) and configuration (ccaggregation)\n     * @param config \n     * @param aggregation \n     * @param ccaggregation \n     */\n    static createAggregationEvents(config: TimelineEventAggregation, aggregation: Aggregation, ccaggregation: CCAggregation): TimelineEvent[] {\n        return !aggregation.items? [] : aggregation.items.map(item => {\n            return {\n                id: config.getDate(item).toUTCString()+\"|\"+config.getDisplay(item),\n                date: config.getDate(item),\n                size: !config.size? 6 : typeof config.size === 'function'? config.size(item) : config.size,\n                styles: !config.styles? undefined :\n                        typeof config.styles === 'function'? config.styles(item) : \n                        config.styles,                \n                display: config.getDisplay(item),\n\n                // Custom params for click action\n                item: item,\n                aggregation: aggregation,\n                ccaggregation: ccaggregation\n            }\n        });\n    }\n\n    /**\n     * This methods transforms a raw list of aggregation items into\n     * a time series completed with zeros, following the below scheme:\n     * Aggregation:  [    # #         # # #   #     # #       # # #    ]\n     * Series:       [  0 # # 0     0 # # # 0 # 0 0 # # 0   0 # # # 0  ]\n     * @param items \n     * @param resolution \n     */\n    static createDatapoints(items: AggregationItem[] | undefined, resolution: string, range?: [Date, Date]): TimelineDate[] {\n\n        if(!items) {\n            return [];\n        }\n\n        const timeInterval = this.getD3TimeInterval(resolution);\n        \n        const series: TimelineDate[] = [];\n\n        const _items = items\n            .map(item => {\n                if(!!item.value && !(item.value instanceof Date)){\n                    const val = item.value.toString();\n                    item.value = moment(val.length  undefined; // So it gets filtered out\n                    }\n                }\n                return item;\n            })\n            .filter(item => !!item.value && (!range || ((item.value as Date) >= range[0] && (item.value as Date)  {\n            const date = item.value as Date;\n            \n            if(i === 0 || timeInterval.offset(series[series.length-1].date, 1)  item.date = this.shiftDate(item.date, resolution));\n\n        return series;\n    }\n\n    \n    /**\n     * Shift the date to the middle of their time bracket (2020 = middle of the year, April = middle of the month, etc.)\n     * @param date \n     * @param resolution \n     */\n    static shiftDate(date: Date, resolution: string): Date {\n        switch(resolution){\n            case \"YYYY-MM-DD\": return d3.timeHour.offset(date, 12);\n            case \"YYYY-WW\": return d3.timeHour.offset(date, 84); // 3*24 + 12\n            case \"YYYY-MM\": return d3.timeDay.offset(date, 15);\n            case \"YYYY\": return d3.timeMonth.offset(date, 6);\n        }\n        return date;\n    }\n\n\n    static getD3TimeInterval(resolution: string): d3.CountableTimeInterval {\n        switch(resolution){\n            case \"YYYY-MM-DD\": return d3.timeDay;\n            case \"YYYY-WW\": return d3.timeWeek;\n            case \"YYYY-MM\": return d3.timeMonth;\n            case \"YYYY\": return d3.timeYear;\n        }\n        return d3.timeDay;\n    }\n\n    static defaultRecordStyle(selected: boolean): {[key: string]: any} {\n        return {\n            'fill': selected? 'red' : 'green',\n            'stroke': selected? 'red' : undefined,\n            'stroke-width': selected? '2px' : undefined\n        };\n    }\n}\n    \n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/TimelineEventType.html":{"url":"interfaces/TimelineEventType.html","title":"interface - TimelineEventType","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  TimelineEventType\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            timeline/bootstrap/timeline-legend.component.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            name\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            styles\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        name\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        name:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        styles\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        styles:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Component, Input } from \"@angular/core\";\nimport { TimelineSeries } from \"./timeline.component\";\n\nexport interface TimelineEventType {\n    name: string;\n    styles?: {[key:string]: any};\n}\n\n@Component({\n    selector: 'sq-timeline-legend',\n    template: `\n\n\n    \n        \n            \n            \n        \n        {{ timeline.name }}\n    \n\n    \n        \n            \n        \n        {{ event.name }}\n    \n\n\n    `,\n    styles: [`\n.series .area {\n    fill: lightblue;\n    opacity: 0.5;\n}\n\n.series .line {\n    stroke: rgb(132, 187, 206);\n    stroke-width: 2;\n    fill: none;\n}\n\n.event {\n    fill: #7c7c7c;\n}\n\n.name {\n    font-size: 12px;\n    color: darkgrey;\n}\n    `]\n})\nexport class TimelineLegendComponent {\n    @Input() data?: TimelineSeries[];\n    @Input() events?: TimelineEventType[];\n    @Input() orientation: \"row\"|\"column\" = \"row\";\n    @Input() yOffset: number = 3;\n    @Input() legendStyles?: {[key:string]: any};\n\n}\n    \n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/TimelineLegendComponent.html":{"url":"components/TimelineLegendComponent.html","title":"component - TimelineLegendComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  TimelineLegendComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    timeline/bootstrap/timeline-legend.component.ts\n\n\n\n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                sq-timeline-legend\n            \n\n\n            \n                styles\n                \n.series .area {\n    fill: lightblue;\n    opacity: 0.5;\n}\n\n.series .line {\n    stroke: rgb(132, 187, 206);\n    stroke-width: 2;\n    fill: none;\n}\n\n.event {\n    fill: #7c7c7c;\n}\n\n.name {\n    font-size: 12px;\n    color: darkgrey;\n}\n    \n            \n\n            \n                template\n                \n\n    \n        \n            \n            \n        \n        {{ timeline.name }}\n    \n\n    \n        \n            \n        \n        {{ event.name }}\n    \n\n\n\n            \n\n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n\n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                data\n                            \n                            \n                                events\n                            \n                            \n                                legendStyles\n                            \n                            \n                                orientation\n                            \n                            \n                                yOffset\n                            \n                        \n                    \n                \n\n\n\n\n        \n    \n\n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        data\n                    \n                \n                \n                    \n                        Type :         TimelineSeries[]\n\n                    \n                \n                        \n                            \n                                    Defined in timeline/bootstrap/timeline-legend.component.ts:54\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        events\n                    \n                \n                \n                    \n                        Type :     TimelineEventType[]\n\n                    \n                \n                        \n                            \n                                    Defined in timeline/bootstrap/timeline-legend.component.ts:55\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        legendStyles\n                    \n                \n                \n                    \n                        Type :     literal type\n\n                    \n                \n                        \n                            \n                                    Defined in timeline/bootstrap/timeline-legend.component.ts:58\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        orientation\n                    \n                \n                \n                    \n                        Type :     \"row\" | \"column\"\n\n                    \n                \n                \n                    \n                        Default value : \"row\"\n                    \n                \n                        \n                            \n                                    Defined in timeline/bootstrap/timeline-legend.component.ts:56\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        yOffset\n                    \n                \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 3\n                    \n                \n                        \n                            \n                                    Defined in timeline/bootstrap/timeline-legend.component.ts:57\n                            \n                        \n            \n        \n\n\n\n\n\n\n\n\n\n    \n        import { Component, Input } from \"@angular/core\";\nimport { TimelineSeries } from \"./timeline.component\";\n\nexport interface TimelineEventType {\n    name: string;\n    styles?: {[key:string]: any};\n}\n\n@Component({\n    selector: 'sq-timeline-legend',\n    template: `\n\n\n    \n        \n            \n            \n        \n        {{ timeline.name }}\n    \n\n    \n        \n            \n        \n        {{ event.name }}\n    \n\n\n    `,\n    styles: [`\n.series .area {\n    fill: lightblue;\n    opacity: 0.5;\n}\n\n.series .line {\n    stroke: rgb(132, 187, 206);\n    stroke-width: 2;\n    fill: none;\n}\n\n.event {\n    fill: #7c7c7c;\n}\n\n.name {\n    font-size: 12px;\n    color: darkgrey;\n}\n    `]\n})\nexport class TimelineLegendComponent {\n    @Input() data?: TimelineSeries[];\n    @Input() events?: TimelineEventType[];\n    @Input() orientation: \"row\"|\"column\" = \"row\";\n    @Input() yOffset: number = 3;\n    @Input() legendStyles?: {[key:string]: any};\n\n}\n    \n\n\n    \n            \n.series .area {\n    fill: lightblue;\n    opacity: 0.5;\n}\n\n.series .line {\n    stroke: rgb(132, 187, 206);\n    stroke-width: 2;\n    fill: none;\n}\n\n.event {\n    fill: #7c7c7c;\n}\n\n.name {\n    font-size: 12px;\n    color: darkgrey;\n}\n    \n\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '                                                    {{ timeline.name }}                                            {{ event.name }}    '\n    var COMPONENTS = [{'name': 'AgGridViewComponent', 'selector': 'sq-ag-grid-view'},{'name': 'BsEdgeInfoCard', 'selector': 'sq-edge-info-card'},{'name': 'BsFacetDate', 'selector': 'sq-facet-date'},{'name': 'BsFacetHeatmapComponent', 'selector': 'sq-facet-heatmap'},{'name': 'BsFacetTimelineComponent', 'selector': 'sq-facet-timeline'},{'name': 'BsHeatmapComponent', 'selector': 'sq-heatmap'},{'name': 'BsNodeInfoCard', 'selector': 'sq-node-info-card'},{'name': 'BsResultsHeatmapView', 'selector': 'sq-results-heatmap-view'},{'name': 'BsTimelineComponent', 'selector': 'sq-timeline'},{'name': 'BsTooltipComponent', 'selector': 'sq-tooltip'},{'name': 'DataModalComponent', 'selector': 'sq-data-modal'},{'name': 'FacetNgxChart', 'selector': 'sq-facet-ngx-chart'},{'name': 'FacetWrapperComponent', 'selector': 'facet-wrapper'},{'name': 'FusionChart', 'selector': 'sq-fusion-chart'},{'name': 'MapComponent', 'selector': 'sq-googlemaps'},{'name': 'MoneyCloudComponent', 'selector': 'sq-money-cloud'},{'name': 'MoneyTimelineComponent', 'selector': 'sq-money-timeline'},{'name': 'NetworkComponent', 'selector': 'sq-network'},{'name': 'NgxChart', 'selector': 'sq-ngx-chart'},{'name': 'ResultTimeline', 'selector': 'sq-result-timeline'},{'name': 'TimelineLegendComponent', 'selector': 'sq-timeline-legend'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'TimelineLegendComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/TimelineRecords.html":{"url":"interfaces/TimelineRecords.html","title":"interface - TimelineRecords","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  TimelineRecords\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            timeline/bootstrap/facet-timeline.component.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            display\n                                        \n                                \n                                \n                                        \n                                            field\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            size\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            styles\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        display\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        display:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        field\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        field:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        size\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        size:     number | \n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     number | \n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        styles\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        styles:     literal type | \n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type | \n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Component, Input, OnChanges, ChangeDetectorRef, SimpleChanges, Output, EventEmitter } from '@angular/core';\nimport { Observable, of, combineLatest, ReplaySubject } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { Results, AggregationItem, Aggregation, CCAggregation, Record, AuditWebService, AuditEventType } from '@sinequa/core/web-services';\nimport { AppService, Expr, ExprBuilder } from '@sinequa/core/app-utils';\nimport { Utils } from '@sinequa/core/base';\nimport { AbstractFacet, FacetService } from '@sinequa/components/facet';\nimport { SearchService } from '@sinequa/components/search';\nimport { SelectionService } from '@sinequa/components/selection';\nimport { Action } from '@sinequa/components/action';\nimport { TimelineSeries, TimelineDate, TimelineEvent } from './timeline.component';\nimport moment from 'moment';\nimport * as d3 from 'd3';\nimport { TimelineEventType } from './timeline-legend.component';\n\nexport interface TimelineAggregation {\n    name?: string;\n    aggregation: string;\n    primary: boolean;\n    areaStyles?: {[key: string]: any};\n    lineStyles?: {[key: string]: any};\n    showDatapoints?: boolean;\n}\n\nexport interface TimelineCombinedAggregations {\n    aggregations: TimelineAggregation[];\n    maxNMonths: number[]; // Maximum number of months for which to use this aggregation\n    default: TimelineAggregation; // Aggregation to use by default \n    current?: TimelineAggregation; // (this field is overriden by the component when switching aggregation)\n}\n\nexport interface TimelineRecords {\n    field: string;\n    size?: number | ((record: Record, selected: boolean) => number);\n    styles?: {[key: string]: any} | ((record: Record, selected: boolean) => {[key: string]: any});\n    display?: (record: Record) => string;\n}\n\nexport interface TimelineEventAggregation {\n    aggregation: string;\n    getDate: ((item: AggregationItem) => Date);\n    getDisplay: ((item: AggregationItem) => string);\n    size?: number | ((item: AggregationItem) => number);\n    styles?: {[key: string]: any} | ((item: AggregationItem) => {[key: string]: any});\n}\n\nexport type TimelineData = TimelineSeries | TimelineAggregation | TimelineCombinedAggregations;\n\nexport type TimelineEventData = TimelineEvent[] | TimelineRecords | TimelineEventAggregation;\n\n@Component({\n    selector: 'sq-facet-timeline',\n    templateUrl: './facet-timeline.component.html',\n    styleUrls: ['./facet-timeline.component.scss']\n})\nexport class BsFacetTimelineComponent extends AbstractFacet implements OnChanges {\n    @Input() name = 'Timeline';\n    @Input() results: Results;\n    \n    // By default, we show the standard Timeline aggregation and the list of current records\n    @Input() timeseries: TimelineData[] = [{aggregation: 'Timeline', primary: true}];\n    @Input() events: TimelineEventData[] = [{field: 'modified'}];\n\n    // Initial scale (prior to any zoom)\n    @Input() minDate?: Date;\n    @Input() maxDate?: Date;\n    // Date range to filter aggregations (ignored when combined aggregations are recomputed based on zoomed range)\n    @Input() minAggregationDate?: Date;\n    @Input() maxAggregationDate?: Date;\n    \n    @Input() zoomable = true;\n    @Input() minZoomDays = 1; // Max 1 day scale\n    @Input() maxZoomDays = 365 * 100; // Max 100 years scale\n\n    @Input() width = 600;\n    @Input() height = 200;\n    @Input() margin = {top: 15, bottom: 20, left: 40, right: 15};\n\n    @Input() curveType = \"curveMonotoneX\";\n\n    @Input() showTooltip = true;\n    @Input() theme: \"light\" | \"dark\" = \"light\";\n\n    @Input() showLegend = false;\n    @Input() legendStyles?: {[key:string]: any} = {'justify-content' : 'center'};\n    @Input() legendEvents?: TimelineEventType[];\n    @Input() legendOrientation?: \"row\"|\"column\" = \"row\";\n    @Input() legendYOffset?: number = 3;\n\n    @Output() eventClicked = new EventEmitter();\n\n    // List of observables (one per timeseries / event type)\n    timeseries$: ReplaySubject[];\n    events$: ReplaySubject[];\n\n    // Combination (combineLastest) of the timeline observables\n    mergedTimeseries$: Observable;\n    mergedEvents$: Observable;\n\n    // Current timeline selection\n    selection?: [Date, Date];\n\n    // Current range (undefined if no zoom / auto-scaling)\n    currentRange?: [Date, Date];\n\n    // Formating method for search queries\n    formatDayRequest = d3.timeFormat(\"%Y-%m-%d\");\n\n    // Actions\n    clearFilters: Action;\n\n    constructor(\n        public facetService: FacetService,\n        public searchService: SearchService,\n        public appService: AppService,\n        public selectionService: SelectionService,\n        public exprBuilder: ExprBuilder,\n        public cdRef: ChangeDetectorRef,\n        public audit: AuditWebService\n    ){\n        super();\n\n        // Update the events when the selection of records changes\n        this.selectionService.events.subscribe(event => {\n            const i = this.events.findIndex(e => (e as TimelineRecords).field);\n            if(i !== -1) {\n                this.events$[i].next(this.getRecordsAsEvents(this.events[i] as TimelineRecords));\n            }\n        });\n        \n        // Clear the current filters\n        this.clearFilters = new Action({\n            icon: \"far fa-minus-square\",\n            title: \"msg#facet.clearSelects\",\n            action: () => {\n                this.selection = undefined;\n                this.searchService.query.removeSelect(this.name);\n                this.searchService.search();\n            }\n        });\n\n    }\n\n    getMinDate(): Date | undefined {\n        return this.currentRange? this.currentRange[0] : this.minDate;\n    }\n\n    getMaxDate(): Date | undefined {\n        return this.currentRange? this.currentRange[1] : this.maxDate;\n    }\n\n    override get actions(): Action[] {\n        const actions: Action[] = [];\n        if(this.facetService.hasFiltered(this.name)){\n            actions.push(this.clearFilters);\n        }\n        return actions;\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n\n        // Skip simple changes (width, height, etc.) that don't require modifying the timeline data\n        if(!changes.timeseries && !changes.events && !changes.results) {\n            return;\n        }\n\n        // Retrieve the current active selection for this timeline (if any)\n        const select = this.searchService.query.findSelect(this.name);\n\n        // Update the selection if it is not already set (which is the case on a page refresh)\n        if(select && !this.selection) {\n            let parsedexpr = this.appService.parseExpr(select.expression) as Expr;\n            if(!Utils.isString(parsedexpr)){\n                while(!parsedexpr.isLeaf){ // The select might over multiple fields (modified between [...] AND created between [...])\n                    parsedexpr = parsedexpr.operands[0];\n                }\n                if(parsedexpr.values){\n                    this.selection = [new Date(parsedexpr.values[0]), new Date(parsedexpr.values[1])];\n                    // Guess a current range based on the selection\n                    if(!this.currentRange) {\n                        const interval = this.selection[1].getTime() - this.selection[0].getTime();\n                        this.currentRange = [ // Selected Interval +10% on each side\n                            new Date(this.selection[0].getTime()-interval*0.1),\n                            new Date(this.selection[1].getTime()+interval*0.1)\n                        ];\n                    }\n                }\n            }\n        }\n        // If no active selection we remove the selection from the timeline, along with the current zoomed range\n        else if(!select) {\n            this.selection = undefined; // If no select, it was possibly removed by the user, we need to update our selection\n            this.currentRange = undefined; // current range is set by zoom events, we want to reset it only if there are no select (ie. no user interaction)\n        }\n\n        // Initialize timeseries\n        if(!this.timeseries$ || changes[\"timeseries\"]) {\n            // Create one observable per timeline\n            this.timeseries$ = this.timeseries.map(_ => new ReplaySubject(1));\n            this.mergedTimeseries$ = combineLatest(this.timeseries$);\n        }\n\n        this.updateTimeseries();\n\n        // Initialize events\n        if(!this.events$ || changes[\"events\"]) {\n            this.events$ = this.events.map(_ => new ReplaySubject(1));\n            this.mergedEvents$ = combineLatest(this.events$).pipe(\n                map(events => ([] as TimelineEvent[]).concat(...events))\n            );\n        }\n\n        this.updateEvents();\n        \n    }\n\n    /**\n     * For each timeseries configuration given as an input,\n     * update the data via the list of observables (timelines$)\n     */\n    updateTimeseries() {\n        this.timeseries.forEach((config, i) => {\n\n            const subject = this.timeseries$[i];\n\n            if((config as TimelineSeries).dates !== undefined) {\n                subject.next(config as TimelineSeries);\n            }\n\n            else {\n                let agg = config as TimelineAggregation;\n                if(agg.aggregation === undefined){\n                    \n                    config = config as TimelineCombinedAggregations;\n                    // We want to set the default scale if it hasn't been set before\n                    // or if no zoom/selection has been made (so current scale may not be adapted to the new results)\n                    if(!this.currentRange || !config.current){\n                        config.current = config.default;\n                    }\n\n                    agg = config.current;\n                }\n                \n                const range: [Date, Date] | undefined = !!this.minAggregationDate && !!this.maxAggregationDate ?\n                    [this.minAggregationDate, this.maxAggregationDate] : undefined;\n\n                this.getTimeseries(agg, range).subscribe({\n                    next: d => subject.next(d),\n                    error: err => subject.error(err)\n                });\n            }\n\n        });\n    }\n\n    /**\n     * For each event configuration given as an input, \n     * update the data via the list of observables (events$)\n     */\n    updateEvents() {\n        this.events.forEach((config, i) => {\n            const subject = this.events$[i];\n\n            if((config as TimelineRecords).field) {\n                subject.next(this.getRecordsAsEvents(config as TimelineRecords));\n            }\n            else if((config as TimelineEventAggregation).aggregation){\n                this.getEventAggregation(config as TimelineEventAggregation).subscribe({\n                    next: t => subject.next(t),\n                    error: err => subject.error(err)\n                });\n            }\n            else if(Array.isArray(config)){\n                subject.next(config as TimelineEvent[]);\n            }\n        });\n    }\n\n    /**\n     * Get a timeseries aggregation via the getAggregation method.\n     * @param config \n     * @param subject \n     * @param range \n     */\n    getTimeseries(config: TimelineAggregation, range?: [Date, Date]): Observable {\n        return this.getAggregation(config.aggregation, range).pipe(\n            map(d => BsFacetTimelineComponent.createTimeseries(config, d.aggregation, d.ccaggregation, range))\n        );\n    }\n\n    /**\n     * Get an aggregation of events via the getAggregation method\n     * @param config \n     * @param subject \n     */\n    getEventAggregation(config: TimelineEventAggregation): Observable {\n        return this.getAggregation(config.aggregation).pipe(\n            map(d => BsFacetTimelineComponent.createAggregationEvents(config, d.aggregation, d.ccaggregation))\n        );\n    }\n\n    /**\n     * Returns the list of records from the results as a list of TimelineEvent when they have a\n     * modified date. The size and styles of the events are determined from the given configuration (TimelineRecords)\n     * @param config \n     */\n    getRecordsAsEvents(config: TimelineRecords): TimelineEvent[] {\n        if(this.results) {\n            return this.results.records\n                .filter(r => !!Utils.toDate(r[config.field]))\n                .map(r => {\n                    return {\n                        id: r.id,\n                        date: Utils.toDate(r[config.field])!,\n                        size: !config.size? 6 : typeof config.size === 'function'? config.size(r, r.$selected) : config.size,\n                        styles: !config.styles? BsFacetTimelineComponent.defaultRecordStyle(r.$selected) :\n                                typeof config.styles === 'function'? config.styles(r, r.$selected) : \n                                config.styles,\n                        display: config.display? config.display(r) : r.title,\n                        // Custom property for click action\n                        record: r\n                    }\n                });\n        }\n        return [];\n    }\n\n\n    /**\n     * returns an aggregation and its configuration either directly from the facet service of\n     * by fetching it from the server.\n     * @param aggregationName \n     * @param range \n     */\n    getAggregation(aggregationName: string, range?: [Date, Date]): Observable {\n        \n        const ccaggregation = this.appService.getCCAggregation(aggregationName);\n        const aggregation = this.facetService.getAggregation(aggregationName, this.results);\n        \n        if(aggregation && ccaggregation) {\n            return of({aggregation: aggregation, ccaggregation: ccaggregation});\n        }\n\n        else if(ccaggregation) {\n            return this.fetchAggregation(aggregationName, ccaggregation, range).pipe(\n                map(agg => {return {aggregation: agg, ccaggregation: ccaggregation} })\n            );\n        }\n\n        else {\n            throw new Error(`Aggregation ${aggregationName} does not exist in the Query web service`);\n        }\n    }\n\n    /**\n     * Get an aggregation from the server, filtering by range if provided\n     * @param aggregation \n     * @param ccaggregation \n     * @param range \n     */\n    fetchAggregation(aggregation: string, ccaggregation: CCAggregation, range?: [Date, Date]): Observable {\n        const query = Utils.copy(this.searchService.query);\n        query.action = \"aggregate\";\n        query.aggregations = [aggregation];\n\n        if(range){\n            query.addSelect(`${ccaggregation.column}:[${this.formatDayRequest(range[0])}..${this.formatDayRequest(range[1])}]`);\n        }\n\n        return this.searchService.getResults(query, undefined, {searchInactive: true}).pipe(\n            map(results => results.aggregations[0])\n        );\n    }\n\n    /**\n     * Given a combined aggregation configuration and a range, this method searches for the most \n     * adapted aggregation scale (years, months, weeks or days) and updates the data if necessary.\n     * @param config \n     * @param range \n     * @param iTimeseries \n     */\n    updateCombinedAggregation(config: TimelineCombinedAggregations, range: [Date, Date], timeseries$: ReplaySubject) {\n        const nmonths = d3.timeMonth.count(range[0], range[1]);\n\n        if(!config.maxNMonths || config.maxNMonths.length !== config.aggregations.length) {\n            console.error(config);\n            throw new Error(\"maxNMonths and aggregations must have the same number of items\");\n        }\n\n        // Find the aggregation with min maxNMonths with maxNMonths >= nmonths\n        let jMin;\n        config.maxNMonths.forEach((maxNMonths, j) => {\n            if(maxNMonths >= nmonths && (jMin === undefined || maxNMonths  this.currentRange[1])) {\n\n            config.current = bestAggregation;\n            this.getTimeseries(bestAggregation, range).subscribe({\n                next: d => timeseries$.next(d),\n                error: err => timeseries$.error(err)\n            });\n        }\n\n    }\n\n\n    // Interaction callbacks\n\n    /**\n     * On selection is triggered when the user selects a range of dates on the timeline.\n     * This has the effect of updating the query.select (either remove it or add/replace it)\n     * and it updates the search.\n     * @param selection \n     */\n    onSelectionChange(selection: [Date, Date] | undefined) {\n        this.selection = selection;\n        if(selection) {\n            const from = this.formatDayRequest(selection[0]);\n            const to = this.formatDayRequest(selection[1]);\n\n            const exprs: string[] = [];\n            this.searchService.query.removeSelect(this.name);\n\n            this.timeseries.forEach((config) => {\n                    \n                if((config as TimelineAggregation).aggregation !== undefined \n                || (config as TimelineCombinedAggregations).default !== undefined) {\n\n                    const aggregation = (config as TimelineAggregation).aggregation || (config as TimelineCombinedAggregations).default.aggregation;\n                    const ccaggregation = this.appService.getCCAggregation(aggregation);\n                    if(ccaggregation) {\n                        exprs.push(this.exprBuilder.makeRangeExpr(ccaggregation.column, from, to));\n                    }\n                }\n\n            });\n\n            if(exprs.length > 0) {\n                const expr = this.exprBuilder.concatOrExpr(exprs);\n                this.searchService.query.addSelect(expr, this.name);\n                this.searchService.search(undefined, {type:AuditEventType.Search_Timeline_Usage, detail: { from, to }});\n            }            \n        }\n\n        else if(this.searchService.query.findSelect(this.name)) {\n            this.searchService.query.removeSelect(this.name);\n            this.searchService.search();\n        }\n    }\n\n    /**\n     * On range is triggered when the user zooms in our out on the timeline,\n     * which triggers a dynamic update of the combined aggregation timelines.\n     * @param range \n     */\n    onRangeChange(range: [Date, Date]) {\n\n        this.timeseries.forEach((config, i) => {\n            if((config as TimelineCombinedAggregations).aggregations !== undefined) {\n                this.updateCombinedAggregation(config as TimelineCombinedAggregations, range, this.timeseries$[i]);\n            }\n        });\n\n        // Note: updateCombinedAggregation() compares currentRange and range\n        // So this update must be kept after the forEach\n        this.currentRange = range;\n    }\n\n    /**\n     * When an event is clicked, the event is propagated to the parent, and the tooltip is closed\n     * @param event \n     * @param closeTooltip \n     */\n    onEventClicked(event: TimelineEvent, closeTooltip: () => void) {\n        this.eventClicked.next(event);\n        closeTooltip();\n        return false;\n    }\n\n\n    // Static utility methods\n    \n    \n    /**\n     * Create a time series object from its config, data (aggregation) and configuration (ccaggregation)\n     * @param config \n     * @param aggregation \n     * @param ccaggregation \n     */\n    static createTimeseries(config: TimelineAggregation, aggregation: Aggregation, ccaggregation: CCAggregation, range?: [Date, Date]): TimelineSeries {\n        return {\n            ...config,\n            name: config.name || aggregation.name,\n            dates: this.createDatapoints(aggregation.items, ccaggregation?.mask, range),\n        }\n    }\n\n    /**\n     * Create a list of events from its config, data (aggregation) and configuration (ccaggregation)\n     * @param config \n     * @param aggregation \n     * @param ccaggregation \n     */\n    static createAggregationEvents(config: TimelineEventAggregation, aggregation: Aggregation, ccaggregation: CCAggregation): TimelineEvent[] {\n        return !aggregation.items? [] : aggregation.items.map(item => {\n            return {\n                id: config.getDate(item).toUTCString()+\"|\"+config.getDisplay(item),\n                date: config.getDate(item),\n                size: !config.size? 6 : typeof config.size === 'function'? config.size(item) : config.size,\n                styles: !config.styles? undefined :\n                        typeof config.styles === 'function'? config.styles(item) : \n                        config.styles,                \n                display: config.getDisplay(item),\n\n                // Custom params for click action\n                item: item,\n                aggregation: aggregation,\n                ccaggregation: ccaggregation\n            }\n        });\n    }\n\n    /**\n     * This methods transforms a raw list of aggregation items into\n     * a time series completed with zeros, following the below scheme:\n     * Aggregation:  [    # #         # # #   #     # #       # # #    ]\n     * Series:       [  0 # # 0     0 # # # 0 # 0 0 # # 0   0 # # # 0  ]\n     * @param items \n     * @param resolution \n     */\n    static createDatapoints(items: AggregationItem[] | undefined, resolution: string, range?: [Date, Date]): TimelineDate[] {\n\n        if(!items) {\n            return [];\n        }\n\n        const timeInterval = this.getD3TimeInterval(resolution);\n        \n        const series: TimelineDate[] = [];\n\n        const _items = items\n            .map(item => {\n                if(!!item.value && !(item.value instanceof Date)){\n                    const val = item.value.toString();\n                    item.value = moment(val.length  undefined; // So it gets filtered out\n                    }\n                }\n                return item;\n            })\n            .filter(item => !!item.value && (!range || ((item.value as Date) >= range[0] && (item.value as Date)  {\n            const date = item.value as Date;\n            \n            if(i === 0 || timeInterval.offset(series[series.length-1].date, 1)  item.date = this.shiftDate(item.date, resolution));\n\n        return series;\n    }\n\n    \n    /**\n     * Shift the date to the middle of their time bracket (2020 = middle of the year, April = middle of the month, etc.)\n     * @param date \n     * @param resolution \n     */\n    static shiftDate(date: Date, resolution: string): Date {\n        switch(resolution){\n            case \"YYYY-MM-DD\": return d3.timeHour.offset(date, 12);\n            case \"YYYY-WW\": return d3.timeHour.offset(date, 84); // 3*24 + 12\n            case \"YYYY-MM\": return d3.timeDay.offset(date, 15);\n            case \"YYYY\": return d3.timeMonth.offset(date, 6);\n        }\n        return date;\n    }\n\n\n    static getD3TimeInterval(resolution: string): d3.CountableTimeInterval {\n        switch(resolution){\n            case \"YYYY-MM-DD\": return d3.timeDay;\n            case \"YYYY-WW\": return d3.timeWeek;\n            case \"YYYY-MM\": return d3.timeMonth;\n            case \"YYYY\": return d3.timeYear;\n        }\n        return d3.timeDay;\n    }\n\n    static defaultRecordStyle(selected: boolean): {[key: string]: any} {\n        return {\n            'fill': selected? 'red' : 'green',\n            'stroke': selected? 'red' : undefined,\n            'stroke-width': selected? '2px' : undefined\n        };\n    }\n}\n    \n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/TimelineSeries.html":{"url":"interfaces/TimelineSeries.html","title":"interface - TimelineSeries","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  TimelineSeries\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            timeline/bootstrap/timeline.component.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            areaStyles\n                                        \n                                \n                                \n                                        \n                                            dates\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            lineStyles\n                                        \n                                \n                                \n                                        \n                                            name\n                                        \n                                \n                                \n                                        \n                                            primary\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            showDatapoints\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        areaStyles\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        areaStyles:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        dates\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        dates:         TimelineDate[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         TimelineDate[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        lineStyles\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        lineStyles:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        name\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        name:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        primary\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        primary:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        showDatapoints\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        showDatapoints:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Component, Input, Output, ElementRef, ViewChild, OnChanges, AfterViewInit, EventEmitter, SimpleChanges, OnDestroy, SimpleChange, ContentChild, TemplateRef, ChangeDetectorRef } from '@angular/core';\nimport { Subscription } from 'rxjs';\nimport * as d3 from 'd3';\n\nimport { IntlService } from '@sinequa/core/intl';\nimport {Record} from '@sinequa/core/web-services';\n\n\nexport interface TimelineDate {\n    date: Date;\n    value: number;\n}\n\nexport interface TimelineSeries {\n    name: string;\n    dates: TimelineDate[];\n    primary: boolean;\n    lineStyles?: {[key:string]: any};\n    areaStyles?:  {[key:string]: any};\n    showDatapoints?: boolean;\n}\n\nexport interface TimelineEvent {\n    date: Date;\n    id: string;\n    display: string;\n    size?: number;\n    sizeOpened?: number;\n    styles?: {[key:string]: any};\n    record?: Record;\n}\n\n@Component({\n    selector: 'sq-timeline',\n    templateUrl: './timeline.component.html',\n    styleUrls: ['./timeline.component.scss']\n})\nexport class BsTimelineComponent implements OnChanges, AfterViewInit, OnDestroy {\n\n    @Input() data?: TimelineSeries[];\n    @Input() events?: TimelineEvent[];\n\n    @Input() selection?: [Date|undefined, Date|undefined];\n\n    // Initial scale (prior to any zoom)\n    @Input() minDate?: Date;\n    @Input() maxDate?: Date;\n\n    @Input() zoomable = true;\n    @Input() minZoomDays = 1; // Max 1 day scale\n    @Input() maxZoomDays = 365 * 100; // Max 100 years scale\n\n    @Input() width = 600;\n    @Input() height = 200;\n    @Input() margin = {top: 15, bottom: 20, left: 40, right: 15};\n\n    @Input() curveType = \"curveMonotoneX\";\n\n    @Input() showTooltip = true;\n    @Input() theme: \"light\" | \"dark\" = \"light\";\n\n    @Output() selectionChange = new EventEmitter();\n    @Output() rangeInit = new EventEmitter();\n    @Output() rangeChange = new EventEmitter();\n\n    @ContentChild(\"tooltipTpl\", {static: false}) tooltipTpl: TemplateRef;\n\n    // Data\n    groupedEvents: TimelineEvent[][] = [];\n\n    // Scales\n    x: d3.ScaleTime; // Read/Write\n    xt: d3.ScaleTime; // Transformed X axis due to Zoom\n    y: d3.ScaleLinear; // Read-only / domain updated\n\n    // Shapes\n    area: d3.Area; // Read only\n    line: d3.Line; // Read only\n\n    // Behaviors\n    brushBehavior: d3.BrushBehavior; // Read only\n    zoomBehavior: d3.ZoomBehavior; // Read/Write\n    brushSelection: [number, number] | null;\n    currentSelection?: (Date|undefined)[]; // Read/Write\n\n    // Elements\n    @ViewChild(\"xAxis\") gx: ElementRef;\n    @ViewChild(\"yAxis\") gy: ElementRef;\n    @ViewChild(\"brush\") gbrush: ElementRef;\n\n    // Selections\n    xAxis$: d3.Selection;\n    yAxis$: d3.Selection;\n    brush$: d3.Selection;\n    grips$: d3.Selection;\n\n    // Tooltip\n    tooltipItem: TimelineEvent[] | undefined;\n    tooltipX: number | undefined;\n    tooltipDatapoints?: (TimelineDate|undefined)[];\n    tooltipOrientation: \"left\" | \"right\";\n    tooltipTop: number;\n    tooltipRight: number;\n    tooltipLeft: number;\n    bisectDate = d3.bisector(d => { return d.date; }).left;\n\n    // Misc\n    viewInit: boolean;\n    intlSubscription: Subscription;\n    static counter = 0;\n    instance: number;\n\n    zooming: boolean;\n    brushing: boolean;\n\n    constructor(\n        protected el: ElementRef,\n        protected intlService: IntlService,\n        protected cdRef: ChangeDetectorRef\n    ){\n        // When the locale changes, we rebuild the X scale and axis\n        this.intlSubscription = this.intlService.events.subscribe(e => this.updateXAxis());\n\n        this.instance = BsTimelineComponent.counter++;\n\n    }\n\n    get innerWidth(): number {\n        return this.width - this.margin.left - this.margin.right;\n    }\n\n    get innerHeight(): number {\n        return this.height - this.margin.top - this.margin.bottom;\n    }\n\n    // Note: ngOnChanges is always called once before ngAfterViewInit\n    ngOnChanges(changes: SimpleChanges) {\n\n        if(!this.x) {\n\n            // Scales\n            this.x = d3.scaleUtc()\n                .range([0, this.innerWidth]);\n            this.xt = this.x;\n\n            this.y = d3.scaleLinear()\n                .range([this.innerHeight, 0]);\n\n            // Shapes\n            this.area = d3.area()\n                .curve(d3[this.curveType])\n                .x(d => this.xt(d.date)!)\n                .y0(this.y(0)!)\n                .y1(d => this.y(d.value)!);\n\n            this.line = d3.line()\n                .curve(d3[this.curveType])\n                .x(d => this.xt(d.date)!)\n                .y(d => this.y(d.value)!);\n\n            // Behaviors\n            this.brushBehavior = d3.brushX()\n                .extent([[0, 0], [this.innerWidth, this.innerHeight]])\n                .on(\"start\", () => this.brushing = true)\n                .on('brush', () => this.onBrush())\n                .on('end', () => this.onBrushEnd());\n        }\n\n        // Resize handling\n\n        if(changes[\"height\"]) {\n            this.y.range([this.innerHeight, 0]);\n            this.area.y0(this.y(0)!);\n            this.brushBehavior.extent([[0, 0], [this.innerWidth, this.innerHeight]]);\n            if(this.viewInit) {\n                this.drawYAxis();\n                this.brush$.call(this.brushBehavior);\n                this.grips$.selectAll(\"path\").attr(\"d\", this.drawGrips);\n            }\n        }\n\n        if(changes[\"width\"]) {\n            this.x.range([0, this.innerWidth]);\n            this.brushBehavior.extent([[0, 0], [this.innerWidth, this.innerHeight]]);\n            if(this.viewInit) {\n                this.drawXAxis();\n                if(!changes[\"height\"]) {\n                    this.brush$.call(this.brushBehavior);\n                    this.grips$.selectAll(\"path\").attr(\"d\", this.drawGrips);\n                }\n            }\n        }\n\n        // If the parent changes the selection, we want to update it\n        // If not, we keep the current selection as is\n        // (Important to keep this statement outside of the if bellow since\n        // the change of selection can be combined with a change of data)\n        const selectionChanged = changes[\"selection\"] && this.updateSelection();\n\n        // Only changes in data result in redrawing the chart\n        // (other input, except selection, are expected to be static)\n        if(this.viewInit && changes[\"data\"] && this.checkDataChanges(changes[\"data\"])){\n            this.updateChart();\n        }\n\n        // If the parent changes the selection (even though the data hasn't changed),\n        // we want to update the brush.\n        // If not, we keep the current selection as is.\n        // We can update the brush only if the view is initialized (viewInit).\n        else if(this.viewInit && ((changes[\"selection\"] && selectionChanged) || changes[\"width\"])) {\n            this.updateBrush();\n        }\n\n        if(changes[\"events\"]) {\n            this.updateEvents();\n        }\n\n    }\n\n    // Note: In onAfterViewInit we can access gx, gy, etc., obtained with @ViewChild.\n    // At this point we can initialize all the primitives and call updateChart()\n    ngAfterViewInit() {\n\n        // Get native elements\n        this.xAxis$ = d3.select(this.gx.nativeElement);\n        this.yAxis$ = d3.select(this.gy.nativeElement);\n        this.brush$ = d3.select(this.gbrush.nativeElement);\n\n        this.brush$\n            .call(this.brushBehavior)\n            .on(\"mousemove\", () => this.onMousemove())\n            .on(\"mouseout\", () => this.onMouseout());\n\n        // Add 2 \"grips\" to the brush goup, on each side of the rectangle\n        // Grips are inserted programmatically to appear on top the brush selection\n        this.grips$ = this.brush$.selectAll(\".grip\")\n            .data([{type: \"w\"}, {type: \"e\"}])\n            .enter()\n            .append(\"g\")\n            .attr(\"class\", \"grip\")\n            .attr(\"display\", \"none\");\n\n        this.grips$.append(\"path\")\n            .attr(\"d\", this.drawGrips);\n\n        this.grips$.append(\"text\")\n            .attr(\"class\", \"grip-text\")\n            .attr(\"text-anchor\", d => d.type === \"w\"? 'end' : 'start')\n            .attr(\"x\", d => d.type === \"w\"? -5 : 5)\n            .attr(\"y\", 10);\n\n        this.viewInit = true;\n\n        this.updateChart();\n\n        // This is necessary to prevent \"Expression has changed after check\" errors\n        // caused by calling updateChart inside ngAfterViewInit().\n        // Unfortunately this is necessary because we need the DOM to be rendered in order fill the DOM\n        // (for example gAxis needs to exist so we can draw the axis)\n        this.cdRef.detectChanges();\n    }\n\n    /**\n     * Redraw the graph (needs to be called after ngAfterViewInit so that the DOM elements\n     * are accessible)\n     */\n    updateChart() {\n\n        this.turnoffTooltip();\n\n        if(this.data && this.data.length) {\n\n            // Update scales\n            // Note: does not stop the update process even if the data is invalid/empty\n            this.updateScales(this.data);\n\n            // Update Axes\n            this.updateAxes();\n\n            // Update Zoom\n            this.updateZoom();\n\n            // Update brush\n            this.updateBrush();\n\n        }\n\n    }\n\n\n    /**\n     * Update the x & y scales, based on the input data\n     * @param data\n     */\n    protected updateScales(data: TimelineSeries[]) {\n\n        // Set x and y scales with the primary series (or first one)\n        const primarySeries = data.filter(s => s.primary) || [data[0]];\n        const allPrimaryDates = ([] as TimelineDate[]).concat(...primarySeries.map(s => s.dates));\n\n        const xExtent = d3.extent(allPrimaryDates, d => d.date);\n        const yMax = d3.max(data,\n            s => d3.max(s.dates, d => d.value));\n\n        // Check validity of data\n        if(!xExtent[0] || !xExtent[1] || !yMax) {\n            if (allPrimaryDates.length !== 0) {\n                console.error('Invalid timeseries', primarySeries);\n            }\n            this.x.domain(this.xt.domain());\n            this.xt = this.x;\n            return;\n        }\n\n        // Enforce minimum date\n        if(this.minDate) {\n            xExtent[0] = this.minDate;\n        }\n\n        // Enforce maximum date\n        if(this.maxDate) {\n            xExtent[1] = this.maxDate;\n        }\n\n        // Enforce minimum scale (especially when the timeseries contains a single datapoint)\n        const diff = xExtent[1].getTime() - xExtent[0].getTime();\n        const minDiff = this.minZoomDays * 24 * 60 * 60 * 1000;\n        if(diff  this.rangeInit.next(this.xt.domain()));\n    }\n\n    /**\n     * Update the x and y axes\n     */\n    protected updateAxes(){\n        this.drawXAxis();\n        this.drawYAxis();\n    }\n\n    /**\n     * The events are drawn in the template directly. This method simply\n     * updates the grouping of events (when they are close to each other)\n     */\n    protected updateEvents() {\n        this.groupedEvents = this.groupEvents(5);\n    }\n\n    /**\n     * Update/reset the zoom behavior when new data comes in (and new scales, axes...)\n     */\n    protected updateZoom() {\n\n        if(!this.zoomable) {\n            return;\n        }\n\n        // Reset the previous zoom !\n        if(this.zoomBehavior){\n            this.zoomBehavior.on(\"zoom\", null);\n            this.zoomBehavior.on(\"end\", null);\n            this.zoomBehavior.transform(this.brush$, d3.zoomIdentity);\n        }\n\n        // Compute the minimum and maximum zoom\n        const xDomain = this.x.domain();\n        const scaleExtent = (xDomain[1].getTime() - xDomain[0].getTime()) / 86400000; // current number of days on the scale\n\n        // Create the behavior\n        this.zoomBehavior = d3.zoom()\n            .extent([[0, 0], [this.innerWidth, this.innerHeight]])\n            .scaleExtent([scaleExtent/this.maxZoomDays, scaleExtent/this.minZoomDays])\n            .on(\"zoom\", () => this.onZoom())\n            .on(\"end\", () => this.onZoomEnd());\n\n        // Apply on to the brush element\n        this.brush$\n            .call(this.zoomBehavior)\n            .on(\"mousedown.zoom\", null) // Deactivate mouse event (taken by brush)\n            .on(\"touchstart.zoom\", null)\n            .on(\"touchmove.zoom\", null)\n            .on(\"touchend.zoom\", null);\n\n    }\n\n    /**\n     * Updates the brush (or hides it if no currentSelection),\n     * following a change of x scale.\n     * Number.MIN_VALUE and Number.MAX_VALUE are used to support semi-open intervals\n     */\n    protected updateBrush() {\n        if(this.currentSelection) {\n            const x0 = this.currentSelection[0] ? this.xt(this.currentSelection[0])! : Number.MIN_VALUE;\n            const x1 = this.currentSelection[1] ? this.xt(this.currentSelection[1])! : Number.MAX_VALUE;\n            const selection: [number, number] = [x0,x1];\n            this.brush$.call(this.brushBehavior.move, selection);\n        }\n        else {\n            this.brush$.call(this.brushBehavior.move, null);\n        }\n    }\n\n    /**\n     * This method tests whether the input selection is different from the currentSelection\n     * and updates it. It returns true if there is actually a change.\n     */\n    protected updateSelection(): boolean {\n        const change = this.checkSelectionChange(this.selection, this.currentSelection);\n        this.currentSelection = this.selection;\n        return change;\n    }\n\n    /**\n     * Recreate the x scale and axes (in the event of a language change)\n     */\n    protected updateXAxis(){\n        this.x = d3.scaleUtc()\n            .domain(this.x.domain())\n            .range(this.x.range());\n\n        this.xt = d3.scaleUtc()\n            .domain(this.xt.domain())\n            .range(this.xt.range());\n\n        this.drawXAxis();\n    }\n\n    /**\n     * Draws the X axis\n     */\n    protected drawXAxis() {\n        const nTicks = Math.round(this.width / 100);\n        this.xAxis$.call(d3.axisBottom(this.xt).ticks(nTicks));\n        this.xAxis$.selectAll(\".domain\").remove(); // Remove the axis line\n    }\n\n    /**\n     * Draws the Y axis\n     */\n    protected drawYAxis() {\n        const nTicks = Math.round(this.height / 40);\n\n        const yAxisTicks = this.y.ticks(nTicks)\n            .filter(tick => Number.isInteger(tick)); // Keep only integer ticks https://stackoverflow.com/questions/13576906/d3-tick-marks-on-integers-only/56821215\n\n        const yAxis = d3.axisLeft(this.y)\n            .tickValues(yAxisTicks)\n            .tickFormat(d3.format(\"~s\")); //https://github.com/d3/d3-format\n        this.yAxis$.call(yAxis);\n        this.yAxis$.selectAll(\".domain\").remove(); // Remove the axis line\n    }\n\n    /**\n     * Updates the display of the brush's grips when the brush has moved\n     * When the selection is a semi-open interval, we don't display the infinite border\n     * @param selection\n     */\n    protected updateGrips(selection: [number, number] | null) {\n        if (!selection) {\n            this.grips$.attr(\"display\", \"none\");\n        }\n        else {\n            this.grips$\n                .attr(\"display\", (d, i) => (selection[i] === Number.MAX_VALUE || selection[i] === Number.MIN_VALUE) ? \"none\" : null)\n                .attr(\"transform\", (d, i) => (selection[i] === Number.MAX_VALUE || selection[i] === Number.MIN_VALUE) ? null : \"translate(\" + selection[i] + \")\");\n            this.grips$.selectAll('.grip-text')\n                .text(\n                    (d) => {\n                        const index = d.type === 'w'? 0 : 1;\n                        return (selection[index] === Number.MAX_VALUE || selection[index] === Number.MIN_VALUE) ? null : this.intlService.formatDate(this.xt.invert(selection[index]))\n                    }\n                );\n        }\n    }\n\n\n    // Interaction callbacks\n\n    onBrush() {\n        this.turnoffTooltip();\n        this.brushSelection = d3.brushSelection(this.gbrush.nativeElement) as [number, number] | null;\n        this.updateGrips(this.brushSelection);\n    }\n\n    onBrushEnd(){\n        this.brushing = false;\n        this.onBrush();\n        const newSelection = this.brushSelection\n            ?.sort((a,b)=>a-b)\n            .map(x => (x === Number.MAX_VALUE || x === Number.MIN_VALUE) ? undefined : this.xt.invert(x));\n        if(this.checkSelectionChange(this.currentSelection, newSelection)) {\n            this.currentSelection = newSelection;\n            this.selectionChange.next(this.currentSelection);\n        }\n    }\n\n    onZoom(){\n\n        this.turnoffTooltip();\n\n        this.zooming = true;\n\n        // Create a transformed scale without modifying the original (to enforce the limit of scaleExtent)\n        const transform = d3.zoomTransform(this.brush$.node() as Element);\n        this.xt = transform.rescaleX(this.x);\n\n        // Redraw the axis\n        this.drawXAxis();\n\n        // Update the brush position\n        if(this.currentSelection){\n            const x0 = this.currentSelection[0] ? this.xt(this.currentSelection[0])! : Number.MIN_VALUE;\n            const x1 = this.currentSelection[1] ? this.xt(this.currentSelection[1])! : Number.MAX_VALUE;\n            const selection: [number, number] = [x0,x1];\n            this.brushBehavior.move(this.brush$, selection);\n        }\n\n    }\n\n    onZoomEnd(){\n        this.zooming = false;\n\n        // At the end of a zoom, we need to reorganize the grouping of events\n        this.updateEvents();\n\n        // Fire an event\n        this.rangeChange.next(this.xt.domain());\n    }\n\n    /**\n     * Redraw the simple tooltip (vertical line)\n     */\n    onMousemove() {\n        if(!this.tooltipItem && this.showTooltip) {\n            this.tooltipX = d3.mouse(this.gbrush.nativeElement)[0];\n            const date = this.xt.invert(this.tooltipX);\n            this.tooltipDatapoints = this.data?.map(series => {\n              if(!series.showDatapoints) return;\n              const i = this.bisectDate(series.dates, date);\n              const d0 = series.dates[i - 1];\n              const d1 = series.dates[i];\n              if(!d0 || !d1) return;\n              return date.getTime() - d0.date.getTime() > d1.date.getTime() - date.getTime() ? d1 : d0;\n            });\n        }\n    }\n\n    /**\n     * Remove the simple tooltip (vertical line)\n     */\n    onMouseout() {\n        if(!this.tooltipItem) {\n            this.tooltipX = undefined\n        }\n    }\n\n    /**\n     * Responds to a click on an event (triangle) by essentially turning tooltip on/off\n     * @param event\n     */\n    onEventClick(event: TimelineEvent[]) {\n\n        if(this.tooltipItem === event) {\n            this.turnoffTooltip();\n        }\n\n        else {\n\n            if(this.tooltipItem) {\n                this.turnoffTooltip();\n            }\n\n            this.tooltipItem = event;\n            this.tooltipX = this.xt(event[0].date);\n\n            // Since we use viewBox to auto-adjust the SVG to the container size, we have to\n            // convert from the SVG coordinate system to the HTML coordinate system\n            const x = this.margin.left + this.tooltipX!;\n            const actualWidth = (this.el.nativeElement as HTMLElement).offsetWidth;\n            const scale = actualWidth / this.width;\n            const relativeX = x / this.width;\n\n            // Tooltip to the right\n            if(relativeX  {\n        if(this.tooltipItem) {\n            this.tooltipItem = undefined;\n            this.tooltipX = undefined;\n        }\n    }\n\n    ngOnDestroy(){\n        this.intlSubscription.unsubscribe();\n    }\n\n    // Utilities\n\n    /**\n     * Transforms the input list of events into a list of list, by grouping events within a bin\n     * when their dates are close together. This closeness is measured in \"pixel per event\".\n     * Note: this currently uses a histogram-like algorithm, which could probably be improved (clustering?)\n     * @param pixPerEvent\n     */\n    protected groupEvents(pixPerEvent: number): TimelineEvent[][] {\n        const events: TimelineEvent[][] = [];\n\n        if(this.events) {\n            const nbins = Math.floor(this.innerWidth / pixPerEvent);\n            const domain = this.xt.domain();\n            const timeinterval = (domain[1].getTime() - domain[0].getTime()) / nbins;\n            this.events.concat()\n                .sort((a,b) => a.date.getTime() - b.date.getTime())\n                .forEach(event => {\n                    if(events.length === 0) {\n                        events.push([event]);\n                    }\n                    else {\n                        const last = events[events.length-1];\n                        const lastbin = Math.floor(last[0].date.getTime() / timeinterval);\n                        const bin = Math.floor(event.date.getTime() / timeinterval);\n                        if(bin === lastbin) {\n                            last.push(event);\n                        }\n                        else {\n                            events.push([event]);\n                        }\n                    }\n                });\n        }\n\n        return events;\n    }\n\n    /**\n     * Return true if there are actual changes in the data\n     * (in particular will ignore data refresh which change nothing)\n     * @param change\n     */\n    protected checkDataChanges(change: SimpleChange): boolean {\n        const previousValue = change.previousValue as TimelineSeries[] | undefined;\n        const currentValue = change.currentValue as TimelineSeries[] | undefined;\n\n        // Ignore null/undefined difference cause by | async\n        // See: https://github.com/angular/angular/issues/16982\n        if(currentValue === null && previousValue === undefined || currentValue === undefined && previousValue === null)\n            return false;\n\n        // Else, if one of them is null/undefined (or difference in length), there's clearly a change\n        if(!previousValue || !currentValue || previousValue.length !== currentValue.length)\n            return true;\n\n        // If both defined and same size, we need to compare the data piece by piece\n        for(let i=0; i {\n        const gripHeight = Math.min(10, Math.max((this.innerHeight) / 8, 4));\n        const gripWidth = gripHeight;\n\n        const x = -gripWidth / 2;\n        const y = this.innerHeight / 2 - gripHeight / 2;\n\n        const path =\n            'M ' + x + ' ' + y +\n            ' l ' + -gripWidth + ' ' + gripHeight / 2 +\n            ' l ' + gripWidth + ' ' + gripHeight / 2 + ' z ' +\n            'M ' + -x + ' ' + y +\n            ' l ' + gripWidth + ' ' + gripHeight / 2 +\n            ' l ' + -gripWidth + ' ' + gripHeight / 2 + ' z ' +\n            'M 0 ' + 0 + ' l 0 ' + this.innerHeight + ' z ';\n        return path;\n    }\n\n    /**\n     * Returns the size of the triangle drawn for one event (or a group of events)\n     * @param events\n     */\n    eventSize(events: TimelineEvent[]): number {\n        if(events!==this.tooltipItem) {\n            return events[0].size || 6;\n        }\n        else {\n            return events[0].sizeOpened || (events[0].size || 6)*2;\n        }\n    }\n\n    /**\n     * Return a string containing the path coordinates of a triangle for a given event (or group of events)\n     * @param events\n     * @param size\n     */\n    drawEvents(events: TimelineEvent[], size: number): string {\n        const x = this.xt(events[0].date);\n        return 'M ' + x + ' ' + (this.innerHeight - 3*size/2) +\n            ' l ' + -size + ' ' + (3*size/2) +\n            ' l ' + (2*size) + ' ' + 0 + ' z ';\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/VisEvent.html":{"url":"interfaces/VisEvent.html","title":"interface - VisEvent","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  VisEvent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            network/network.component.ts\n        \n\n\n            \n                Description\n            \n            \n                Structure of the events emitted by the Vis.js network\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            edges\n                                        \n                                \n                                \n                                        \n                                            event\n                                        \n                                \n                                \n                                        \n                                            items\n                                        \n                                \n                                \n                                        \n                                            nodes\n                                        \n                                \n                                \n                                        \n                                            pointer\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        edges\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        edges:     string[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        event\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        event:         any\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         any\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        items\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        items:     any[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     any[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        nodes\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        nodes:     string[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        pointer\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        pointer:         any\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         any\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Component, Input, OnChanges, SimpleChanges, OnDestroy, Output, EventEmitter, ContentChild, TemplateRef } from '@angular/core';\nimport { FormGroup, FormControl, FormBuilder } from '@angular/forms';\nimport { Subscription, combineLatest } from 'rxjs';\n\nimport { Results } from '@sinequa/core/web-services';\nimport { AppService, ExprBuilder } from '@sinequa/core/app-utils';\nimport { Utils } from '@sinequa/core/base';\nimport { UserPreferences } from '@sinequa/components/user-settings';\nimport { AbstractFacet } from '@sinequa/components/facet';\nimport { Action } from '@sinequa/components/action';\nimport { SearchService } from '@sinequa/components/search';\n\nimport { Options, VisNetworkService } from 'ngx-vis';\nimport { DataSet } from \"vis-data/peer/esm/vis-data\";\n\nimport { Node, Edge, NetworkDataset, NetworkProvider, NetworkContext } from './network-models';\nimport { IntlService } from '@sinequa/core/intl';\n\n/**\n * Default options of the Vis.js network.\n * See: https://visjs.github.io/vis-network/docs/network/\n */\nexport const defaultOptions: Options = {\n    height: '500px'\n};\n\n/**\n * Structure of the events emitted by the Vis.js network\n */\nexport interface VisEvent {\n    nodes: string[];\n    edges: string[];\n    event: any;\n    items: any[];\n    pointer: any;\n}\n\n@Component({\n    selector: 'sq-network',\n    templateUrl: './network.component.html'\n})\nexport class NetworkComponent extends AbstractFacet implements OnChanges, OnDestroy {\n\n    /** Name of the network - should be unique within the app */\n    @Input() name = \"Network\";\n\n    /** Input results - used to produce a OnChange event when  */\n    @Input() results: Results;\n\n    @Input() providers: NetworkProvider[];\n\n    /** General Vis options passed to the network (https://visjs.github.io/vis-network/docs/network/) */\n    @Input() options: Options = defaultOptions;\n\n    optionsPrefs: Options;\n\n    @Output() nodeClicked = new EventEmitter();\n    @Output() edgeClicked = new EventEmitter();\n\n    // Settings form\n    form: FormGroup;\n\n    // State\n    _networkInitialized: boolean;\n    _selectedNode?: Node;\n    _selectedEdge?: Edge;\n\n    // Actions\n    _actions: Action[] = [];\n    refreshAction: Action;\n    clearFilters: Action;\n\n    // Info cards\n    @ContentChild(\"nodeTpl\", {static: false}) nodeTpl: TemplateRef;\n    @ContentChild(\"edgeTpl\", {static: false}) edgeTpl: TemplateRef;\n\n    readonly context: NetworkContext;\n\n    providersSubscription: Subscription;\n\n    constructor(\n        public networkService: VisNetworkService,\n        public searchService: SearchService,\n        public appService: AppService,\n        public intlService: IntlService,\n        public formBuilder: FormBuilder,\n        public prefs: UserPreferences,\n        public exprBuilder: ExprBuilder\n    ) {\n        super();\n\n        // Notify providers when a node is clicked (this may trigger new data, or a node mutation)\n        this.nodeClicked.subscribe((node?: Node) => {\n            this.providers.forEach(p => p.onNodeClicked(node));\n        });\n\n        // Notify providers when a node is clicked (this may trigger new data, or a node mutation)\n        this.edgeClicked.subscribe((edge?: Edge) => {\n            this.providers.forEach(p => p.onEdgeClicked(edge));\n        });\n\n        // Refresh the network\n        this.refreshAction = new Action({\n            icon: \"fas fa-sync-alt\",\n            title: \"msg#network.actions.refresh\",\n            action: () => {\n                this.updateData();\n                this.updateActions();\n            }\n        });\n\n        // Clear the current filters\n        this.clearFilters = new Action({\n            icon: \"far fa-minus-square\",\n            title: \"msg#facet.clearSelects\",\n            action: () => {\n                this.searchService.query.removeSelect(this.name);\n                this.searchService.search();\n            }\n        });\n\n        this.context = {\n            name: this.name,\n            nodes: new DataSet(),\n            edges: new DataSet(),\n            searchService: searchService,\n            appService: appService,\n            networkService: networkService,\n            intlService: intlService,\n            exprBuilder: exprBuilder,\n            select: (node?: Node, edge?: Edge) => this.select(node, edge),\n        };\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n\n        if(changes['results'] || changes['providers']) {\n            // Update the context\n            this.context.name = this.name;\n\n            // Update selections\n            this.selectEdge();\n            this.selectNode();\n\n            // Update options from the preferences\n            this.updateOptions();\n\n            // Update data from the providers (async)\n            this.updateData();\n\n            // Update the actions of the facet\n            this.updateActions();\n        }\n        else if(changes['options']) {\n            this.updateOptions();\n        }\n\n    }\n\n    /**\n     * Resets the nodes and edges, create a new listener for the providers and\n     * call getData() on these providers to refresh the data\n     */\n    protected updateData() {\n\n        this.context.nodes.clear();\n        this.context.edges.clear();\n\n        if(this.providersSubscription){\n            this.providersSubscription.unsubscribe();\n        }\n\n        this.providersSubscription = combineLatest(\n            this.providers.map(p => p.getProvider())\n        ).subscribe(datasets =>\n            this.mergeDatasets(datasets.filter(d => !!d) as NetworkDataset[])\n        );\n\n        this.providers.forEach(p => p.getData(this.context));\n    }\n\n    /**\n     * Take in the datasets produced by each provider and merges them into\n     * a single one\n     * @param datasets\n     */\n    protected mergeDatasets(datasets: NetworkDataset[]) {\n        const dataset = datasets.reduce((prev, cur) => prev.merge(cur), new NetworkDataset());\n\n        // Notify providers that nodes were inserted (which could trigger an update of the data)\n        this.providers.forEach(p => p.onDatasetsMerged(dataset));\n\n        // TODO: Post process the dataset somehow to adjust visibility (or other properties)\n        dataset.updateDatasets(this.context.nodes, this.context.edges);\n\n        // Fit the nodes and edges\n        if(this._networkInitialized) {\n            this.fitNetwork();\n        }\n\n        // Notify providers that nodes were inserted (which could trigger an update of the data)\n        this.providers.forEach(p => p.onNodesInserted(this.context.nodes.get()));\n\n        this.updateActions();\n    }\n\n    override get actions(): Action[] {\n        return this._actions;\n    }\n\n    /**\n     * Updates the actions displayed in the facet frame (_action variable).\n     * Actions may come from this component or from its providers\n     */\n    protected updateActions() {\n        this._actions = [];\n\n        // Clear the active filters\n        if(this.searchService.breadcrumbs && !!this.searchService.breadcrumbs.findSelect(this.name)) {\n            this._actions.push(this.clearFilters);\n        }\n\n        // Selected node actions\n        if(this._selectedNode) {\n            this.providers.forEach(p => {\n                const actions = p.getNodeActions(this._selectedNode!);\n                if(actions.length){\n                    this._actions = this._actions.concat(actions);\n                }\n            });\n        }\n\n        // Selected edge actions\n        if(this._selectedEdge) {\n            this.providers.forEach(p => {\n                const actions = p.getEdgeActions(this._selectedEdge!);\n                if(actions.length){\n                    this._actions = this._actions.concat(actions);\n                }\n            });\n        }\n\n        // Actions specific to each provider\n        const providersActionList = new Action({\n            icon: \"fas fa-tasks\",\n            title: \"msg#network.actions.providers\",\n            children: this.providers.map(p => new Action({\n                text: this.intlService.formatMessage(p.name),\n                title: this.intlService.formatMessage(p.name),\n                children: p.getProviderActions()\n            }))\n        });\n        this._actions.push(providersActionList);\n\n        // Action to refresh the network\n        this._actions.push(this.refreshAction);\n\n    }\n\n    /**\n     * Fit the network view (zoom and position) to its content, with a delay\n     * to avoid some elusive bugs in the Vis library\n     */\n    fitNetwork() {\n        this.networkService.fit(this.name);\n    }\n\n\n    // Event handling\n\n    /**\n     * Called from the template by ngx-vis, when the network is initialized,\n     * and the NetworkService can be used.\n     */\n    networkInitialized() {\n        this._networkInitialized = true;\n\n        // now we can use the service to register on events\n        this.networkService.on(this.name, 'click');\n\n        this.networkService.click.subscribe((eventData: any[]) => this.onNetworkClick(eventData));\n\n        this.networkService.setOptions(this.name, this.optionsPrefs);\n\n    }\n\n    /**\n     * Method called when a node or edge in the network is clicked.\n     * The method generates appropriate nodeClicked and edgeClicked events,\n     * and updates the state of _selectedEdge and _selectedNode.\n     * @param eventData\n     */\n    protected onNetworkClick(eventData: any[]) {\n        if (eventData[0] === this.name) {\n            const event = eventData[1] as VisEvent;\n\n            if(event.event.type === \"tap\") {\n\n                if(event.edges.length === 1 && event.nodes.length === 0) {\n                    this.selectEdge(this.context.edges.get(event.edges[0]) as Edge);\n                    this.selectNode();\n                }\n                else {\n                    this.selectEdge();\n                    if(event.nodes.length === 1) {\n                        this.selectNode(this.context.nodes.get(event.nodes[0]) as Node);\n                    }\n                    else {\n                        this.selectNode();\n                    }\n                }\n\n            }\n            else {\n                this.selectNode();\n                this.selectEdge();\n            }\n\n            this.updateActions();\n        }\n    }\n\n    select(node?: Node, edge?: Edge) {\n        this.selectNode(node);\n        this.selectEdge(edge);\n        this.updateActions();\n    }\n\n    selectNode(node?: Node) {\n        this._selectedNode = node;\n        this.nodeClicked.next(node);\n    }\n\n    selectEdge(edge?: Edge) {\n        this._selectedEdge = edge;\n        this.edgeClicked.next();\n    }\n\n    ngOnDestroy() {\n        this.networkService.off(this.name, 'click');\n        if(this.providersSubscription){\n            this.providersSubscription.unsubscribe();\n        }\n    }\n\n\n    // Settings\n\n    /**\n     * Sets the options values either to the user preferences (stored in user settings)\n     * or the default values.\n     */\n    updateOptions() {\n        this.optionsPrefs = Utils.copy(this.options);\n        if(!this.optionsPrefs.physics){\n            this.optionsPrefs.physics = {};\n        }\n        if(!this.optionsPrefs.physics.barnesHut){\n            this.optionsPrefs.physics.barnesHut = {};\n        }\n        this.optionsPrefs.physics.barnesHut.springLength = this.springLengthPref;\n        this.optionsPrefs.physics.barnesHut.springConstant = this.springConstantPref / 100;\n        this.optionsPrefs.physics.barnesHut.damping = this.dampingPref / 100;\n        this.optionsPrefs.physics.barnesHut.gravitationalConstant = -this.repulsionPref;\n        this.optionsPrefs.physics.barnesHut.centralGravity = this.gravityPref / 10;\n\n        if(this._networkInitialized) {\n            this.networkService.setOptions(this.name, this.optionsPrefs);\n            this.fitNetwork();\n        }\n    }\n\n    /**\n     * Method from the AbstractFacet interface called when the settings\n     * panel is opened or closed\n     * @param opened whether settings are opened or closed\n     */\n    override onOpenSettings(opened: boolean){\n        if(opened) {\n            const springLengthControl = new FormControl(this.springLengthPref);\n            const springConstantControl = new FormControl(this.springConstantPref);\n            const dampingControl = new FormControl(this.dampingPref);\n            const repulsionControl = new FormControl(this.repulsionPref);\n            const gravityControl = new FormControl(this.gravityPref);\n\n            this.form = this.formBuilder.group({\n                springLength: springLengthControl,\n                springConstant: springConstantControl,\n                damping: dampingControl,\n                repulsion: repulsionControl,\n                gravity: gravityControl\n            });\n\n            this.form.valueChanges.subscribe(_ => {\n                this.prefs.set(this.name+'-spring-length', springLengthControl.value, true);\n                this.prefs.set(this.name+'-spring-constant', springConstantControl.value, true);\n                this.prefs.set(this.name+'-damping', dampingControl.value, true);\n                this.prefs.set(this.name+'-repulsion', repulsionControl.value, true);\n                this.prefs.set(this.name+'-gravity', gravityControl.value, true);\n                this.debounceSync();\n            });\n        }\n        else {\n            this.updateOptions();\n            this.updateData();\n        }\n    }\n\n    // Debounce syncing to avoid many calls to the user settings web service\n    debounceSync = Utils.debounce(() => {\n        this.prefs.sync();\n    }, 1000);\n\n    /**\n     * This method resets all the user preferences and rebuilds the settings form,\n     * so that the values displayed are up-to-date\n     */\n    setDefaults() {\n        this.prefs.delete(this.name+'-spring-length', true);\n        this.prefs.delete(this.name+'-spring-constant',true);\n        this.prefs.delete(this.name+'-damping', true);\n        this.prefs.delete(this.name+'-repulsion', true);\n        this.prefs.delete(this.name+'-gravity', true);\n        this.prefs.sync();\n        this.onOpenSettings(true);\n    }\n\n    // Accessor method for each of the settings.\n    // Return either the saved user preference or the default value.\n\n    get springLengthPref(): number {\n        return this.prefs.get(this.name+'-spring-length') || 100;\n    }\n\n    get springConstantPref(): number {\n        return this.prefs.get(this.name+'-spring-constant') || 4;\n    }\n\n    get dampingPref(): number {\n        return this.prefs.get(this.name+'-damping') || 50;\n    }\n\n    get repulsionPref(): number {\n        return this.prefs.get(this.name+'-repulsion') || 2000;\n    }\n\n    get gravityPref(): number {\n        return this.prefs.get(this.name+'-gravity') || 3;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/VisTimelineModule.html":{"url":"modules/VisTimelineModule.html","title":"module - VisTimelineModule","body":"\n                   \n\n\n\n\n    Modules\n    VisTimelineModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_VisTimelineModule\n\n\n\ncluster_VisTimelineModule_exports\n\n\n\ncluster_VisTimelineModule_declarations\n\n\n\n\nResultTimeline\n\nResultTimeline\n\n\n\nVisTimelineModule\n\nVisTimelineModule\n\nVisTimelineModule -->\n\nResultTimeline->VisTimelineModule\n\n\n\n\n\nResultTimeline \n\nResultTimeline \n\nResultTimeline  -->\n\nVisTimelineModule->ResultTimeline \n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            vis-timeline/vis-timeline-module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Declarations\n                    \n                        \n                            ResultTimeline\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            ResultTimeline\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import {NgModule} from \"@angular/core\";\nimport {CommonModule} from \"@angular/common\";\n\nimport {IntlModule} from \"@sinequa/core/intl\";\n\nimport {VisModule} from \"ngx-vis\";\n\nimport {ResultTimeline} from \"./result-timeline/result-timeline\";\n\n@NgModule({\n    imports: [\n        CommonModule,\n\n        IntlModule,\n\n        VisModule\n    ],\n    declarations: [\n        ResultTimeline\n    ],\n    exports: [\n        ResultTimeline\n    ]\n})\nexport class VisTimelineModule {\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                ag-grid/ag-grid-view.component.ts\n            \n            component\n            AgGridViewComponent\n            \n                73 %\n                (45/61)\n            \n        \n        \n            \n                \n                ag-grid/ag-grid-view.component.ts\n            \n            interface\n            Column\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                ag-grid/data-modal.component.ts\n            \n            component\n            DataModalComponent\n            \n                0 %\n                (0/10)\n            \n        \n        \n            \n                \n                ag-grid/datasource.ts\n            \n            class\n            SqDatasource\n            \n                42 %\n                (11/26)\n            \n        \n        \n            \n                \n                ag-grid/facet-wrapper.component.ts\n            \n            component\n            FacetWrapperComponent\n            \n                0 %\n                (0/11)\n            \n        \n        \n            \n                \n                ag-grid/messages/index.ts\n            \n            variable\n            deGrid\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                ag-grid/messages/index.ts\n            \n            variable\n            enGrid\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                ag-grid/messages/index.ts\n            \n            variable\n            frGrid\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                finance/messages/index.ts\n            \n            variable\n            deFinance\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                finance/messages/index.ts\n            \n            variable\n            enFinance\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                finance/messages/index.ts\n            \n            variable\n            frFinance\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                finance/money-cloud/money-cloud.component.ts\n            \n            component\n            MoneyCloudComponent\n            \n                10 %\n                (5/46)\n            \n        \n        \n            \n                \n                finance/money-cloud/money-cloud.component.ts\n            \n            interface\n            MoneyCloudDatum\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                finance/money-timeline/money-timeline.component.ts\n            \n            component\n            MoneyTimelineComponent\n            \n                28 %\n                (13/45)\n            \n        \n        \n            \n                \n                finance/money-timeline/money-timeline.component.ts\n            \n            interface\n            MoneyDatum\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                fusioncharts/chart/chart.ts\n            \n            component\n            FusionChart\n            \n                23 %\n                (9/38)\n            \n        \n        \n            \n                \n                fusioncharts/chart/chart.ts\n            \n            variable\n            defaultChart\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                googlemaps/dark-style.ts\n            \n            variable\n            darkStyle\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                googlemaps/map.component.ts\n            \n            component\n            MapComponent\n            \n                50 %\n                (12/24)\n            \n        \n        \n            \n                \n                googlemaps/messages/index.ts\n            \n            variable\n            deGooglemaps\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                googlemaps/messages/index.ts\n            \n            variable\n            enGooglemaps\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                googlemaps/messages/index.ts\n            \n            variable\n            frGooglemaps\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                heatmap/bootstrap/facet-heatmap.component.ts\n            \n            component\n            BsFacetHeatmapComponent\n            \n                23 %\n                (13/56)\n            \n        \n        \n            \n                \n                heatmap/bootstrap/heatmap.component.ts\n            \n            component\n            BsHeatmapComponent\n            \n                20 %\n                (8/39)\n            \n        \n        \n            \n                \n                heatmap/bootstrap/heatmap.component.ts\n            \n            interface\n            HeatmapItem\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                heatmap/bootstrap/results-heatmap-view.ts\n            \n            component\n            BsResultsHeatmapView\n            \n                18 %\n                (11/60)\n            \n        \n        \n            \n                \n                heatmap/bootstrap/tooltip.component.ts\n            \n            component\n            BsTooltipComponent\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                heatmap/messages/index.ts\n            \n            variable\n            deHeatmap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                heatmap/messages/index.ts\n            \n            variable\n            enHeatmap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                heatmap/messages/index.ts\n            \n            variable\n            frHeatmap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                network/edge-info-card.component.ts\n            \n            component\n            BsEdgeInfoCard\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                network/network-models.ts\n            \n            class\n            NetworkDataset\n            \n                95 %\n                (19/20)\n            \n        \n        \n            \n                \n                network/network-models.ts\n            \n            interface\n            Edge\n            \n                20 %\n                (2/10)\n            \n        \n        \n            \n                \n                network/network-models.ts\n            \n            interface\n            EdgeType\n            \n                75 %\n                (3/4)\n            \n        \n        \n            \n                \n                network/network-models.ts\n            \n            interface\n            NetworkContext\n            \n                40 %\n                (4/10)\n            \n        \n        \n            \n                \n                network/network-models.ts\n            \n            interface\n            NetworkProvider\n            \n                93 %\n                (14/15)\n            \n        \n        \n            \n                \n                network/network-models.ts\n            \n            interface\n            Node\n            \n                22 %\n                (2/9)\n            \n        \n        \n            \n                \n                network/network-models.ts\n            \n            interface\n            NodeType\n            \n                50 %\n                (2/4)\n            \n        \n        \n            \n                \n                network/network-sample-configs.ts\n            \n            function\n            asyncRecordsProviderDemo\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                network/network-sample-configs.ts\n            \n            function\n            coocAggregationDemo\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                network/network-sample-configs.ts\n            \n            function\n            coocRecordDemo\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                network/network-sample-configs.ts\n            \n            function\n            crossAggregationDemo\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                network/network-sample-configs.ts\n            \n            function\n            crossAggregationExpandDemo\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                network/network-sample-configs.ts\n            \n            function\n            oOTBConfig\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                network/network-sample-configs.ts\n            \n            function\n            recordsProviderDemo\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                network/network-sample-configs.ts\n            \n            function\n            selectedRecordsProviderDemo\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                network/network-sample-configs.ts\n            \n            function\n            typedCoocAggregationDemo\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                network/network-sample-configs.ts\n            \n            function\n            typedCoocRecordDemo\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                network/network-sample-configs.ts\n            \n            function\n            wikiAsyncConfig\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                network/network-sample-configs.ts\n            \n            function\n            wikiDynConfig\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                network/network-sample-configs.ts\n            \n            function\n            wikiDynEdgeConfig\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                network/network-sample-configs.ts\n            \n            function\n            wikiMultiDynConfig\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                network/network.component.ts\n            \n            component\n            NetworkComponent\n            \n                21 %\n                (8/38)\n            \n        \n        \n            \n                \n                network/network.component.ts\n            \n            interface\n            VisEvent\n            \n                16 %\n                (1/6)\n            \n        \n        \n            \n                \n                network/network.component.ts\n            \n            variable\n            defaultOptions\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                network/node-info-card.component.ts\n            \n            component\n            BsNodeInfoCard\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                network/node-info-card.component.ts\n            \n            interface\n            NodeData\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                network/providers/aggregation-provider.ts\n            \n            class\n            AggregationProvider\n            \n                47 %\n                (10/21)\n            \n        \n        \n            \n                \n                network/providers/aggregation-provider.ts\n            \n            interface\n            AggregationData\n            \n                16 %\n                (1/6)\n            \n        \n        \n            \n                \n                network/providers/aggregation-provider.ts\n            \n            interface\n            AggregationEdge\n            \n                33 %\n                (1/3)\n            \n        \n        \n            \n                \n                network/providers/aggregation-provider.ts\n            \n            interface\n            AggregationEdgeType\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                network/providers/aggregation-provider.ts\n            \n            function\n            isAggregationEdgeType\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                network/providers/async-records-provider.ts\n            \n            class\n            AsyncRecordsProvider\n            \n                45 %\n                (9/20)\n            \n        \n        \n            \n                \n                network/providers/base-provider.ts\n            \n            class\n            BaseProvider\n            \n                31 %\n                (6/19)\n            \n        \n        \n            \n                \n                network/providers/dynamic-edge-provider.ts\n            \n            class\n            DynamicEdgeProvider\n            \n                36 %\n                (7/19)\n            \n        \n        \n            \n                \n                network/providers/dynamic-edge-provider.ts\n            \n            interface\n            DynamicEdge\n            \n                50 %\n                (1/2)\n            \n        \n        \n            \n                \n                network/providers/dynamic-edge-provider.ts\n            \n            interface\n            DynamicEdgeType\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                network/providers/dynamic-edge-provider.ts\n            \n            function\n            isDynamicEdgeType\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                network/providers/dynamic-node-provider.ts\n            \n            class\n            DynamicNodeProvider\n            \n                36 %\n                (7/19)\n            \n        \n        \n            \n                \n                network/providers/dynamic-node-provider.ts\n            \n            interface\n            DynamicNodeType\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                network/providers/provider-factory.ts\n            \n            injectable\n            ProviderFactory\n            \n                90 %\n                (30/33)\n            \n        \n        \n            \n                \n                network/providers/records-provider.ts\n            \n            class\n            RecordsProvider\n            \n                36 %\n                (7/19)\n            \n        \n        \n            \n                \n                network/providers/records-provider.ts\n            \n            interface\n            CustomData\n            \n                16 %\n                (1/6)\n            \n        \n        \n            \n                \n                network/providers/records-provider.ts\n            \n            interface\n            RecordNode\n            \n                50 %\n                (1/2)\n            \n        \n        \n            \n                \n                network/providers/records-provider.ts\n            \n            interface\n            StructuralEdgeType\n            \n                100 %\n                (6/6)\n            \n        \n        \n            \n                \n                network/providers/records-provider.ts\n            \n            function\n            isStructuralEdgeType\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                network/providers/selected-records-provider.ts\n            \n            class\n            SelectedRecordsProvider\n            \n                35 %\n                (7/20)\n            \n        \n        \n            \n                \n                ngx-charts/chart/chart.ts\n            \n            component\n            NgxChart\n            \n                0 %\n                (0/17)\n            \n        \n        \n            \n                \n                ngx-charts/chart/chart.ts\n            \n            interface\n            ChartDataPoint\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                ngx-charts/chart/chart.ts\n            \n            interface\n            ChartOptions\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                ngx-charts/facet-chart/facet-chart.ts\n            \n            component\n            FacetNgxChart\n            \n                17 %\n                (4/23)\n            \n        \n        \n            \n                \n                ngx-charts/facet-chart/facet-chart.ts\n            \n            interface\n            FacetChartDataPoint\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                public-api.ts\n            \n            variable\n            sinequaComponentsModule\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                timeline/bootstrap/facet-date.ts\n            \n            component\n            BsFacetDate\n            \n                0 %\n                (0/27)\n            \n        \n        \n            \n                \n                timeline/bootstrap/facet-date.ts\n            \n            interface\n            FacetDateConfig\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                timeline/bootstrap/facet-date.ts\n            \n            interface\n            FacetDateParams\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                timeline/bootstrap/facet-timeline.component.ts\n            \n            component\n            BsFacetTimelineComponent\n            \n                25 %\n                (15/60)\n            \n        \n        \n            \n                \n                timeline/bootstrap/facet-timeline.component.ts\n            \n            interface\n            TimelineAggregation\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                timeline/bootstrap/facet-timeline.component.ts\n            \n            interface\n            TimelineCombinedAggregations\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                timeline/bootstrap/facet-timeline.component.ts\n            \n            interface\n            TimelineEventAggregation\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                timeline/bootstrap/facet-timeline.component.ts\n            \n            interface\n            TimelineRecords\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                timeline/bootstrap/timeline-legend.component.ts\n            \n            component\n            TimelineLegendComponent\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                timeline/bootstrap/timeline-legend.component.ts\n            \n            interface\n            TimelineEventType\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                timeline/bootstrap/timeline.component.ts\n            \n            component\n            BsTimelineComponent\n            \n                10 %\n                (7/65)\n            \n        \n        \n            \n                \n                timeline/bootstrap/timeline.component.ts\n            \n            interface\n            TimelineDate\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                timeline/bootstrap/timeline.component.ts\n            \n            interface\n            TimelineEvent\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                timeline/bootstrap/timeline.component.ts\n            \n            interface\n            TimelineSeries\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                vis-timeline/result-timeline/result-timeline.ts\n            \n            component\n            ResultTimeline\n            \n                0 %\n                (0/17)\n            \n        \n        \n            \n                \n                vis-timeline/result-timeline/result-timeline.ts\n            \n            variable\n            defaultOptions\n            \n                0 %\n                (0/1)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @sinequa/components : ^0.0.1\n    \n\n\n    \n    \n        Peer dependencies\n    \n    \n        \n            @agm/core : ^3.0.0-beta.0\n        \n            @swimlane/ngx-charts : ^14.0.0\n        \n            angular-fusioncharts : ^3.0.4\n        \n            fusioncharts : ^3.15.1-sr.1\n        \n            ngx-vis : ^3.1.0\n        \n            vis-data : ^6.5.1\n        \n            vis-network : ^7.3.4\n        \n            vis-timeline : ^7.3.4\n        \n            vis-util : ^4.0.0\n        \n            d3 : ^5.15.1\n        \n            ag-grid-angular : ^25.2.0\n        \n            ag-grid-community : ^25.2.0\n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            asyncRecordsProviderDemo   (network/.../network-sample-configs.ts)\n                        \n                        \n                            coocAggregationDemo   (network/.../network-sample-configs.ts)\n                        \n                        \n                            coocRecordDemo   (network/.../network-sample-configs.ts)\n                        \n                        \n                            crossAggregationDemo   (network/.../network-sample-configs.ts)\n                        \n                        \n                            crossAggregationExpandDemo   (network/.../network-sample-configs.ts)\n                        \n                        \n                            isAggregationEdgeType   (network/.../aggregation-provider.ts)\n                        \n                        \n                            isDynamicEdgeType   (network/.../dynamic-edge-provider.ts)\n                        \n                        \n                            isStructuralEdgeType   (network/.../records-provider.ts)\n                        \n                        \n                            oOTBConfig   (network/.../network-sample-configs.ts)\n                        \n                        \n                            recordsProviderDemo   (network/.../network-sample-configs.ts)\n                        \n                        \n                            selectedRecordsProviderDemo   (network/.../network-sample-configs.ts)\n                        \n                        \n                            typedCoocAggregationDemo   (network/.../network-sample-configs.ts)\n                        \n                        \n                            typedCoocRecordDemo   (network/.../network-sample-configs.ts)\n                        \n                        \n                            wikiAsyncConfig   (network/.../network-sample-configs.ts)\n                        \n                        \n                            wikiDynConfig   (network/.../network-sample-configs.ts)\n                        \n                        \n                            wikiDynEdgeConfig   (network/.../network-sample-configs.ts)\n                        \n                        \n                            wikiMultiDynConfig   (network/.../network-sample-configs.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    network/network-sample-configs.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        asyncRecordsProviderDemo\n                        \n                    \n                \n            \n            \n                \nasyncRecordsProviderDemo(providerFactory: ProviderFactory, searchService: SearchService)\n                \n            \n\n\n\n\n            \n                \n                    Creates a network for a list of records fetched with a query. The query\nspecifically returns 5 wikipedia documents about \"human\" and containing the text \"google\".\nThe record nodes are rendered with the wikipedia thumbnail rather than a generic icon.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    providerFactory\n                                    \n                                                ProviderFactory\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The provider factory\n\n                                    \n                                \n                                \n                                    searchService\n                                    \n                                            SearchService\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The search service\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         NetworkProvider[]\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        coocAggregationDemo\n                        \n                    \n                \n            \n            \n                \ncoocAggregationDemo(providerFactory: ProviderFactory)\n                \n            \n\n\n\n\n            \n                \n                    Creates a network from a cooccurrence distribution between person and company\nentities.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    providerFactory\n                                    \n                                                ProviderFactory\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The provider factory\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         NetworkProvider[]\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        coocRecordDemo\n                        \n                    \n                \n            \n            \n                \ncoocRecordDemo(providerFactory: ProviderFactory)\n                \n            \n\n\n\n\n            \n                \n                    Creates a network from the list of selected records and displays the cooccurrence entities\ncontained in these records. The record nodes themselves are actually hidden (hideRecordNode=true).\nThe cooccurrence entities are each displayed as two nodes linked by an edge.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    providerFactory\n                                    \n                                                ProviderFactory\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The provider factory\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         NetworkProvider[]\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        crossAggregationDemo\n                        \n                    \n                \n            \n            \n                \ncrossAggregationDemo(providerFactory: ProviderFactory)\n                \n            \n\n\n\n\n            \n                \n                    Creates a network from a cross-aggregation between person and company entities.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    providerFactory\n                                    \n                                                ProviderFactory\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The provider factory\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         NetworkProvider[]\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        crossAggregationExpandDemo\n                        \n                    \n                \n            \n            \n                \ncrossAggregationExpandDemo(providerFactory: ProviderFactory)\n                \n            \n\n\n\n\n            \n                \n                    Creates a network from a cross-aggregation between person and company entities.\nAdditionally, the company and person nodes can be expanded to other company, person\nand geo entities.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    providerFactory\n                                    \n                                                ProviderFactory\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The provider factory\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         NetworkProvider[]\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        oOTBConfig\n                        \n                    \n                \n            \n            \n                \noOTBConfig(providerFactory: ProviderFactory)\n                \n            \n\n\n\n\n            \n                \n                    Creates a network from the list of selected record and three cross-distributions between geo, \nperson and company entities.\nAdditionally, the metadata nodes are expandable to other metadata nodes, via cross-distributions.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    providerFactory\n                                    \n                                                ProviderFactory\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The provider factory\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         NetworkProvider[]\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        recordsProviderDemo\n                        \n                    \n                \n            \n            \n                \nrecordsProviderDemo(providerFactory: ProviderFactory, records)\n                \n            \n\n\n\n\n            \n                \n                    Creates a network from a list of records, with record and person nodes.\nThe person nodes are attached to a record if that record contains them.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    providerFactory\n                                    \n                                                ProviderFactory\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The provider factory\n\n                                    \n                                \n                                \n                                    records\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        A given list of records\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         NetworkProvider[]\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        selectedRecordsProviderDemo\n                        \n                    \n                \n            \n            \n                \nselectedRecordsProviderDemo(providerFactory: ProviderFactory)\n                \n            \n\n\n\n\n            \n                \n                    Creates a network from the selected records, with record and person nodes.\nThe person nodes are attached to a record if that record contains them.\nThe network is refreshed every time documents are selected or unselected.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    providerFactory\n                                    \n                                                ProviderFactory\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The provider factory\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         NetworkProvider[]\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        typedCoocAggregationDemo\n                        \n                    \n                \n            \n            \n                \ntypedCoocAggregationDemo(providerFactory: ProviderFactory)\n                \n            \n\n\n\n\n            \n                \n                    Creates a network from a triple-cooccurrence between person, companies and in-between\na \"job\" entity ('(BILL GATES)#(CEO)#(MICROSOFT)').\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    providerFactory\n                                    \n                                                ProviderFactory\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The provider factory\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         NetworkProvider[]\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        typedCoocRecordDemo\n                        \n                    \n                \n            \n            \n                \ntypedCoocRecordDemo(providerFactory: ProviderFactory)\n                \n            \n\n\n\n\n            \n                \n                    Creates a network from the list of selected records and displays the triple-cooccurrence entities\nbetween person, companies and in-between a \"job\" entity ('(BILL GATES)#(CEO)#(MICROSOFT)') contained\nin these records.\nThe cooccurrence entities are each displayed as two nodes linked by a typed edge (with a label showing the \"job\").\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    providerFactory\n                                    \n                                                ProviderFactory\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The provider factory\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         NetworkProvider[]\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        wikiAsyncConfig\n                        \n                    \n                \n            \n            \n                \nwikiAsyncConfig(providerFactory: ProviderFactory, searchService: SearchService)\n                \n            \n\n\n\n\n            \n                \n                    Creates a network from a list of records fetched via a query asynchronously, and cross-distributions\nbetween the geo, company and person nodes.\nThe query specifically asks for 3 wikipedia documents about \"Barack Obama\".\nThe network will contain relations between the records and the metadata displayed among the aggregation\nedges.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    providerFactory\n                                    \n                                                ProviderFactory\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The provider factory\n\n                                    \n                                \n                                \n                                    searchService\n                                    \n                                            SearchService\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The search service\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         NetworkProvider[]\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        wikiDynConfig\n                        \n                    \n                \n            \n            \n                \nwikiDynConfig(providerFactory: ProviderFactory, searchService: SearchService)\n                \n            \n\n\n\n\n            \n                \n                    Creates a network from cross distribution between Company and Person entities.\nAdditionally, the person nodes are \"dynamic nodes\", meaning they become enriched (when clicked on,\nby default) with a record fetched from the server. When this happens, the display of the node\nchanges (in this case we display the wikipedia thumbnail of that person, instead of a generic icon),\nand \"structural edges\" are added to the nodes (in this case we display the \"company\" entities\ncontained in the wikipedia pages of the person).\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    providerFactory\n                                    \n                                                ProviderFactory\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The provider factory\n\n                                    \n                                \n                                \n                                    searchService\n                                    \n                                            SearchService\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The search service\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         NetworkProvider[]\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        wikiDynEdgeConfig\n                        \n                    \n                \n            \n            \n                \nwikiDynEdgeConfig(providerFactory: ProviderFactory, searchService: SearchService)\n                \n            \n\n\n\n\n            \n                \n                    Creates a network from the list of selected records. Additionally, when these records\nare inserted, fetches additional records from the server, which gets attached to the record\nnodes (\"dynamic edges\"). Specifically these new records are 5 wikipedia articles about humans\nand talking about whatever the original node's label is. (if the original node is \"Microsoft\",\nthe dynamic edges will likely include Bill Gates, Steve Ballmer, Paul Allen, etc.)\nThe nodes of these new records (with the \"people\" type) are displayed with the wikipedia thumbnail.\nAdditionally we display the company entities contained in these people nodes (structural edges).\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    providerFactory\n                                    \n                                                ProviderFactory\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The provider factory\n\n                                    \n                                \n                                \n                                    searchService\n                                    \n                                            SearchService\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The search service\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         NetworkProvider[]\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        wikiMultiDynConfig\n                        \n                    \n                \n            \n            \n                \nwikiMultiDynConfig(providerFactory: ProviderFactory, searchService: SearchService)\n                \n            \n\n\n\n\n            \n                \n                    Creates a network from 3 cross distribution between Company, Geo and Person entities.\nAdditionally, the person nodes are \"dynamic nodes\", meaning they become enriched (when inserted) \nwith a record fetched from the server. When this happens, the display of the node\nchanges (in this case we display the wikipedia thumbnail of that person, instead of a generic icon).\nAdditionally, the company nodes are manually expandable to display relations with other people nodes.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    providerFactory\n                                    \n                                                ProviderFactory\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The provider factory\n\n                                    \n                                \n                                \n                                    searchService\n                                    \n                                            SearchService\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The search service\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         NetworkProvider[]\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    network/providers/aggregation-provider.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        isAggregationEdgeType\n                        \n                    \n                \n            \n            \n                \nisAggregationEdgeType(et: EdgeType)\n                \n            \n\n\n\n\n            \n                \n                    Tests whether an EdgeType is an AggregationEdgeType\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    et\n                                    \n                                                EdgeType\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        an edge type\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         AggregationEdgeType\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    network/providers/dynamic-edge-provider.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        isDynamicEdgeType\n                        \n                    \n                \n            \n            \n                \nisDynamicEdgeType(et: EdgeType)\n                \n            \n\n\n\n\n            \n                \n                    Tests whether a given edge type is a DynamicEdgeType\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    et\n                                    \n                                                EdgeType\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        an edge type\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         DynamicEdgeType\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    network/providers/records-provider.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        isStructuralEdgeType\n                        \n                    \n                \n            \n            \n                \nisStructuralEdgeType(et: EdgeType)\n                \n            \n\n\n\n\n            \n                \n                    Tests whether the given edge type is a structural edge type\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    et\n                                    \n                                                EdgeType\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        an edge type\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         StructuralEdgeType\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"overview - index","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AgGridModule\n\n\n\ncluster_AgGridModule_declarations\n\n\n\ncluster_AgGridModule_exports\n\n\n\ncluster_BsHeatmapModule\n\n\n\ncluster_BsHeatmapModule_declarations\n\n\n\ncluster_BsHeatmapModule_exports\n\n\n\ncluster_BsTimelineModule\n\n\n\ncluster_BsTimelineModule_declarations\n\n\n\ncluster_BsTimelineModule_exports\n\n\n\ncluster_FinanceModule\n\n\n\ncluster_FinanceModule_declarations\n\n\n\ncluster_FinanceModule_exports\n\n\n\ncluster_FusionChartsModule\n\n\n\ncluster_FusionChartsModule_declarations\n\n\n\ncluster_FusionChartsModule_exports\n\n\n\ncluster_GoogleMapsModule\n\n\n\ncluster_GoogleMapsModule_declarations\n\n\n\ncluster_GoogleMapsModule_exports\n\n\n\ncluster_NetworkModule\n\n\n\ncluster_NetworkModule_declarations\n\n\n\ncluster_NetworkModule_exports\n\n\n\ncluster_NgxChartsModule\n\n\n\ncluster_NgxChartsModule_declarations\n\n\n\ncluster_NgxChartsModule_exports\n\n\n\ncluster_VisTimelineModule\n\n\n\ncluster_VisTimelineModule_declarations\n\n\n\ncluster_VisTimelineModule_exports\n\n\n\n\nAgGridViewComponent\n\nAgGridViewComponent\n\n\n\nAgGridModule\n\nAgGridModule\n\nAgGridModule -->\n\nAgGridViewComponent->AgGridModule\n\n\n\n\n\nDataModalComponent\n\nDataModalComponent\n\nAgGridModule -->\n\nDataModalComponent->AgGridModule\n\n\n\n\n\nFacetWrapperComponent\n\nFacetWrapperComponent\n\nAgGridModule -->\n\nFacetWrapperComponent->AgGridModule\n\n\n\n\n\nAgGridViewComponent \n\nAgGridViewComponent \n\nAgGridViewComponent  -->\n\nAgGridModule->AgGridViewComponent \n\n\n\n\n\nBsFacetHeatmapComponent\n\nBsFacetHeatmapComponent\n\n\n\nBsHeatmapModule\n\nBsHeatmapModule\n\nBsHeatmapModule -->\n\nBsFacetHeatmapComponent->BsHeatmapModule\n\n\n\n\n\nBsHeatmapComponent\n\nBsHeatmapComponent\n\nBsHeatmapModule -->\n\nBsHeatmapComponent->BsHeatmapModule\n\n\n\n\n\nBsResultsHeatmapView\n\nBsResultsHeatmapView\n\nBsHeatmapModule -->\n\nBsResultsHeatmapView->BsHeatmapModule\n\n\n\n\n\nBsTooltipComponent\n\nBsTooltipComponent\n\nBsHeatmapModule -->\n\nBsTooltipComponent->BsHeatmapModule\n\n\n\n\n\nBsFacetHeatmapComponent \n\nBsFacetHeatmapComponent \n\nBsFacetHeatmapComponent  -->\n\nBsHeatmapModule->BsFacetHeatmapComponent \n\n\n\n\n\nBsHeatmapComponent \n\nBsHeatmapComponent \n\nBsHeatmapComponent  -->\n\nBsHeatmapModule->BsHeatmapComponent \n\n\n\n\n\nBsResultsHeatmapView \n\nBsResultsHeatmapView \n\nBsResultsHeatmapView  -->\n\nBsHeatmapModule->BsResultsHeatmapView \n\n\n\n\n\nBsTooltipComponent \n\nBsTooltipComponent \n\nBsTooltipComponent  -->\n\nBsHeatmapModule->BsTooltipComponent \n\n\n\n\n\nBsTimelineModule\n\nBsTimelineModule\n\nBsTimelineModule -->\n\nBsHeatmapModule->BsTimelineModule\n\n\n\n\n\nFinanceModule\n\nFinanceModule\n\nFinanceModule -->\n\nBsHeatmapModule->FinanceModule\n\n\n\n\n\nBsFacetDate\n\nBsFacetDate\n\nBsTimelineModule -->\n\nBsFacetDate->BsTimelineModule\n\n\n\n\n\nBsFacetTimelineComponent\n\nBsFacetTimelineComponent\n\nBsTimelineModule -->\n\nBsFacetTimelineComponent->BsTimelineModule\n\n\n\n\n\nBsTimelineComponent\n\nBsTimelineComponent\n\nBsTimelineModule -->\n\nBsTimelineComponent->BsTimelineModule\n\n\n\n\n\nTimelineLegendComponent\n\nTimelineLegendComponent\n\nBsTimelineModule -->\n\nTimelineLegendComponent->BsTimelineModule\n\n\n\n\n\nBsFacetDate \n\nBsFacetDate \n\nBsFacetDate  -->\n\nBsTimelineModule->BsFacetDate \n\n\n\n\n\nBsFacetTimelineComponent \n\nBsFacetTimelineComponent \n\nBsFacetTimelineComponent  -->\n\nBsTimelineModule->BsFacetTimelineComponent \n\n\n\n\n\nBsTimelineComponent \n\nBsTimelineComponent \n\nBsTimelineComponent  -->\n\nBsTimelineModule->BsTimelineComponent \n\n\n\n\n\nTimelineLegendComponent \n\nTimelineLegendComponent \n\nTimelineLegendComponent  -->\n\nBsTimelineModule->TimelineLegendComponent \n\n\n\n\n\nMoneyCloudComponent\n\nMoneyCloudComponent\n\nFinanceModule -->\n\nMoneyCloudComponent->FinanceModule\n\n\n\n\n\nMoneyTimelineComponent\n\nMoneyTimelineComponent\n\nFinanceModule -->\n\nMoneyTimelineComponent->FinanceModule\n\n\n\n\n\nMoneyCloudComponent \n\nMoneyCloudComponent \n\nMoneyCloudComponent  -->\n\nFinanceModule->MoneyCloudComponent \n\n\n\n\n\nMoneyTimelineComponent \n\nMoneyTimelineComponent \n\nMoneyTimelineComponent  -->\n\nFinanceModule->MoneyTimelineComponent \n\n\n\n\n\nFusionChart\n\nFusionChart\n\n\n\nFusionChartsModule\n\nFusionChartsModule\n\nFusionChartsModule -->\n\nFusionChart->FusionChartsModule\n\n\n\n\n\nFusionChart \n\nFusionChart \n\nFusionChart  -->\n\nFusionChartsModule->FusionChart \n\n\n\n\n\nMapComponent\n\nMapComponent\n\n\n\nGoogleMapsModule\n\nGoogleMapsModule\n\nGoogleMapsModule -->\n\nMapComponent->GoogleMapsModule\n\n\n\n\n\nMapComponent \n\nMapComponent \n\nMapComponent  -->\n\nGoogleMapsModule->MapComponent \n\n\n\n\n\nBsEdgeInfoCard\n\nBsEdgeInfoCard\n\n\n\nNetworkModule\n\nNetworkModule\n\nNetworkModule -->\n\nBsEdgeInfoCard->NetworkModule\n\n\n\n\n\nBsNodeInfoCard\n\nBsNodeInfoCard\n\nNetworkModule -->\n\nBsNodeInfoCard->NetworkModule\n\n\n\n\n\nNetworkComponent\n\nNetworkComponent\n\nNetworkModule -->\n\nNetworkComponent->NetworkModule\n\n\n\n\n\nBsEdgeInfoCard \n\nBsEdgeInfoCard \n\nBsEdgeInfoCard  -->\n\nNetworkModule->BsEdgeInfoCard \n\n\n\n\n\nBsNodeInfoCard \n\nBsNodeInfoCard \n\nBsNodeInfoCard  -->\n\nNetworkModule->BsNodeInfoCard \n\n\n\n\n\nNetworkComponent \n\nNetworkComponent \n\nNetworkComponent  -->\n\nNetworkModule->NetworkComponent \n\n\n\n\n\nFacetNgxChart\n\nFacetNgxChart\n\n\n\nNgxChartsModule\n\nNgxChartsModule\n\nNgxChartsModule -->\n\nFacetNgxChart->NgxChartsModule\n\n\n\n\n\nNgxChart\n\nNgxChart\n\nNgxChartsModule -->\n\nNgxChart->NgxChartsModule\n\n\n\n\n\nFacetNgxChart \n\nFacetNgxChart \n\nFacetNgxChart  -->\n\nNgxChartsModule->FacetNgxChart \n\n\n\n\n\nNgxChart \n\nNgxChart \n\nNgxChart  -->\n\nNgxChartsModule->NgxChart \n\n\n\n\n\nResultTimeline\n\nResultTimeline\n\n\n\nVisTimelineModule\n\nVisTimelineModule\n\nVisTimelineModule -->\n\nResultTimeline->VisTimelineModule\n\n\n\n\n\nResultTimeline \n\nResultTimeline \n\nResultTimeline  -->\n\nVisTimelineModule->ResultTimeline \n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        9 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    21 Components\n                \n            \n        \n        \n            \n                \n                    \n                    1 Injectable\n                \n            \n        \n        \n            \n                \n                    \n                    9 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    34 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AgGridModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        BsHeatmapModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        BsTimelineModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        FinanceModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        FusionChartsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        GoogleMapsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        NetworkModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        NgxChartsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        VisTimelineModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            AggregationTriggerType   (network/.../aggregation-provider.ts)\n                        \n                        \n                            DataModel   (ag-grid/.../data-modal.component.ts)\n                        \n                        \n                            Filter   (ag-grid/.../datasource.ts)\n                        \n                        \n                            StructuralDisplayType   (network/.../records-provider.ts)\n                        \n                        \n                            StructuralTriggerType   (network/.../records-provider.ts)\n                        \n                        \n                            TimelineData   (timeline/.../facet-timeline.component.ts)\n                        \n                        \n                            TimelineEventData   (timeline/.../facet-timeline.component.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    network/providers/aggregation-provider.ts\n    \n    \n        \n            \n                \n                    \n                    AggregationTriggerType\n                \n            \n            \n                \n                    Mode \"source\" means node are fetched and added systematically on getData() / other modes allow expanding an existing node\n\n                \n            \n            \n                \n                        \"source\" | \"onclick\" | \"manual\"\n\n                \n            \n        \n    \n    ag-grid/data-modal.component.ts\n    \n    \n        \n            \n                \n                    \n                    DataModel\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    ag-grid/datasource.ts\n    \n    \n        \n            \n                \n                    \n                    Filter\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    network/providers/records-provider.ts\n    \n    \n        \n            \n                \n                    \n                    StructuralDisplayType\n                \n            \n            \n                \n                        \"all\" | \"paginate\" | \"existingnodes\" | \n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    StructuralTriggerType\n                \n            \n            \n                \n                        \"oninsert\" | \"onclick\" | \"manual\"\n\n                \n            \n        \n    \n    timeline/bootstrap/facet-timeline.component.ts\n    \n    \n        \n            \n                \n                    \n                    TimelineData\n                \n            \n            \n                \n                        TimelineSeries | TimelineAggregation | TimelineCombinedAggregations\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    TimelineEventData\n                \n            \n            \n                \n                        TimelineEvent[] | TimelineRecords | TimelineEventAggregation\n\n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            darkStyle   (googlemaps/.../dark-style.ts)\n                        \n                        \n                            defaultChart   (fusioncharts/.../chart.ts)\n                        \n                        \n                            defaultOptions   (network/.../network.component.ts)\n                        \n                        \n                            defaultOptions   (vis-timeline/.../result-timeline.ts)\n                        \n                        \n                            deFinance   (finance/.../index.ts)\n                        \n                        \n                            deGooglemaps   (googlemaps/.../index.ts)\n                        \n                        \n                            deGrid   (ag-grid/.../index.ts)\n                        \n                        \n                            deHeatmap   (heatmap/.../index.ts)\n                        \n                        \n                            enFinance   (finance/.../index.ts)\n                        \n                        \n                            enGooglemaps   (googlemaps/.../index.ts)\n                        \n                        \n                            enGrid   (ag-grid/.../index.ts)\n                        \n                        \n                            enHeatmap   (heatmap/.../index.ts)\n                        \n                        \n                            frFinance   (finance/.../index.ts)\n                        \n                        \n                            frGooglemaps   (googlemaps/.../index.ts)\n                        \n                        \n                            frGrid   (ag-grid/.../index.ts)\n                        \n                        \n                            frHeatmap   (heatmap/.../index.ts)\n                        \n                        \n                            sinequaComponentsModule   (public-api.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    googlemaps/dark-style.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        darkStyle\n                        \n                    \n                \n            \n                \n                    \n                        Type :     []\n\n                    \n                \n                \n                    \n                        Default value : [\n    {\n      \"elementType\": \"geometry\",\n      \"stylers\": [\n        {\n          \"color\": \"#1d2c4d\"\n        }\n      ]\n    },\n    {\n      \"elementType\": \"labels.text.fill\",\n      \"stylers\": [\n        {\n          \"color\": \"#8ec3b9\"\n        }\n      ]\n    },\n    {\n      \"elementType\": \"labels.text.stroke\",\n      \"stylers\": [\n        {\n          \"color\": \"#1a3646\"\n        }\n      ]\n    },\n    {\n      \"featureType\": \"administrative.country\",\n      \"elementType\": \"geometry.stroke\",\n      \"stylers\": [\n        {\n          \"color\": \"#4b6878\"\n        }\n      ]\n    },\n    {\n      \"featureType\": \"administrative.land_parcel\",\n      \"elementType\": \"labels.text.fill\",\n      \"stylers\": [\n        {\n          \"color\": \"#64779e\"\n        }\n      ]\n    },\n    {\n      \"featureType\": \"administrative.province\",\n      \"elementType\": \"geometry.stroke\",\n      \"stylers\": [\n        {\n          \"color\": \"#4b6878\"\n        }\n      ]\n    },\n    {\n      \"featureType\": \"landscape.man_made\",\n      \"elementType\": \"geometry.stroke\",\n      \"stylers\": [\n        {\n          \"color\": \"#334e87\"\n        }\n      ]\n    },\n    {\n      \"featureType\": \"landscape.natural\",\n      \"elementType\": \"geometry\",\n      \"stylers\": [\n        {\n          \"color\": \"#023e58\"\n        }\n      ]\n    },\n    {\n      \"featureType\": \"poi\",\n      \"elementType\": \"geometry\",\n      \"stylers\": [\n        {\n          \"color\": \"#283d6a\"\n        }\n      ]\n    },\n    {\n      \"featureType\": \"poi\",\n      \"elementType\": \"labels.text.fill\",\n      \"stylers\": [\n        {\n          \"color\": \"#6f9ba5\"\n        }\n      ]\n    },\n    {\n      \"featureType\": \"poi\",\n      \"elementType\": \"labels.text.stroke\",\n      \"stylers\": [\n        {\n          \"color\": \"#1d2c4d\"\n        }\n      ]\n    },\n    {\n      \"featureType\": \"poi.park\",\n      \"elementType\": \"geometry.fill\",\n      \"stylers\": [\n        {\n          \"color\": \"#023e58\"\n        }\n      ]\n    },\n    {\n      \"featureType\": \"poi.park\",\n      \"elementType\": \"labels.text.fill\",\n      \"stylers\": [\n        {\n          \"color\": \"#3C7680\"\n        }\n      ]\n    },\n    {\n      \"featureType\": \"road\",\n      \"elementType\": \"geometry\",\n      \"stylers\": [\n        {\n          \"color\": \"#304a7d\"\n        }\n      ]\n    },\n    {\n      \"featureType\": \"road\",\n      \"elementType\": \"labels.text.fill\",\n      \"stylers\": [\n        {\n          \"color\": \"#98a5be\"\n        }\n      ]\n    },\n    {\n      \"featureType\": \"road\",\n      \"elementType\": \"labels.text.stroke\",\n      \"stylers\": [\n        {\n          \"color\": \"#1d2c4d\"\n        }\n      ]\n    },\n    {\n      \"featureType\": \"road.highway\",\n      \"elementType\": \"geometry\",\n      \"stylers\": [\n        {\n          \"color\": \"#2c6675\"\n        }\n      ]\n    },\n    {\n      \"featureType\": \"road.highway\",\n      \"elementType\": \"geometry.stroke\",\n      \"stylers\": [\n        {\n          \"color\": \"#255763\"\n        }\n      ]\n    },\n    {\n      \"featureType\": \"road.highway\",\n      \"elementType\": \"labels.text.fill\",\n      \"stylers\": [\n        {\n          \"color\": \"#b0d5ce\"\n        }\n      ]\n    },\n    {\n      \"featureType\": \"road.highway\",\n      \"elementType\": \"labels.text.stroke\",\n      \"stylers\": [\n        {\n          \"color\": \"#023e58\"\n        }\n      ]\n    },\n    {\n      \"featureType\": \"transit\",\n      \"elementType\": \"labels.text.fill\",\n      \"stylers\": [\n        {\n          \"color\": \"#98a5be\"\n        }\n      ]\n    },\n    {\n      \"featureType\": \"transit\",\n      \"elementType\": \"labels.text.stroke\",\n      \"stylers\": [\n        {\n          \"color\": \"#1d2c4d\"\n        }\n      ]\n    },\n    {\n      \"featureType\": \"transit.line\",\n      \"elementType\": \"geometry.fill\",\n      \"stylers\": [\n        {\n          \"color\": \"#283d6a\"\n        }\n      ]\n    },\n    {\n      \"featureType\": \"transit.station\",\n      \"elementType\": \"geometry\",\n      \"stylers\": [\n        {\n          \"color\": \"#3a4762\"\n        }\n      ]\n    },\n    {\n      \"featureType\": \"water\",\n      \"elementType\": \"geometry\",\n      \"stylers\": [\n        {\n          \"color\": \"#222222\"\n        }\n      ]\n    },\n    {\n      \"featureType\": \"water\",\n      \"elementType\": \"labels.text.fill\",\n      \"stylers\": [\n        {\n          \"color\": \"#4e6d70\"\n        }\n      ]\n    }\n  ]\n                    \n                \n\n\n        \n    \n\n    fusioncharts/chart/chart.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        defaultChart\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n    \"theme\": \"fusion\",\n    \"labelDisplay\": \"rotate\",\n    \"slantLabel\": \"1\"\n}\n                    \n                \n\n\n        \n    \n\n    network/network.component.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        defaultOptions\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Options\n\n                    \n                \n                \n                    \n                        Default value : {\n    height: '500px'\n}\n                    \n                \n\n            \n                \n                    Default options of the Vis.js network.\nSee: https://visjs.github.io/vis-network/docs/network/\n\n                \n            \n\n        \n    \n\n    vis-timeline/result-timeline/result-timeline.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        defaultOptions\n                        \n                    \n                \n            \n                \n                    \n                        Type :     TimelineOptions\n\n                    \n                \n                \n                    \n                        Default value : {\n    minHeight : '150px',\n    maxHeight : '350px',\n    margin: {\n        axis: 5,\n        item: 5\n    }\n}\n                    \n                \n\n\n        \n    \n\n    finance/messages/index.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        deFinance\n                        \n                    \n                \n            \n                \n                    \n                        Default value : Utils.merge({}, _deFinance, deFacet)\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        enFinance\n                        \n                    \n                \n            \n                \n                    \n                        Default value : Utils.merge({}, _enFinance, enFacet)\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        frFinance\n                        \n                    \n                \n            \n                \n                    \n                        Default value : Utils.merge({}, _frFinance, frFacet)\n                    \n                \n\n\n        \n    \n\n    googlemaps/messages/index.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        deGooglemaps\n                        \n                    \n                \n            \n                \n                    \n                        Default value : Utils.merge({}, _deGooglemaps, deFacet)\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        enGooglemaps\n                        \n                    \n                \n            \n                \n                    \n                        Default value : Utils.merge({}, _enGooglemaps, enFacet)\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        frGooglemaps\n                        \n                    \n                \n            \n                \n                    \n                        Default value : Utils.merge({}, _frGooglemaps, frFacet)\n                    \n                \n\n\n        \n    \n\n    ag-grid/messages/index.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        deGrid\n                        \n                    \n                \n            \n                \n                    \n                        Default value : Utils.merge({}, _deGrid)\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        enGrid\n                        \n                    \n                \n            \n                \n                    \n                        Default value : Utils.merge({}, _enGrid)\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        frGrid\n                        \n                    \n                \n            \n                \n                    \n                        Default value : Utils.merge({}, _frGrid)\n                    \n                \n\n\n        \n    \n\n    heatmap/messages/index.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        deHeatmap\n                        \n                    \n                \n            \n                \n                    \n                        Default value : Utils.merge({}, _deHeatmap, deResultsView, deSearch)\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        enHeatmap\n                        \n                    \n                \n            \n                \n                    \n                        Default value : Utils.merge({}, _enHeatmap, enResultsView, enSearch)\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        frHeatmap\n                        \n                    \n                \n            \n                \n                    \n                        Default value : Utils.merge({}, _frHeatmap, frResultsView, frSearch)\n                    \n                \n\n\n        \n    \n\n    public-api.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        sinequaComponentsModule\n                        \n                    \n                \n            \n                \n                    \n                        Default value : undefined\n                    \n                \n\n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
